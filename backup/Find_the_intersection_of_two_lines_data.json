{"task": "Find_the_intersection_of_two_lines", "blocks": [{"lang": "ALGOL 68", "loc": 30, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>    <span class=\"coMULTI\"># mode to hold a point #</span><br/>    <span class=\"kw4\">MODE</span> POINT <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw3\">REAL</span> x<span class=\"sy1\">,</span> y <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># mode to hold a line expressed as y = mx + c #</span><br/>    <span class=\"kw4\">MODE</span> LINE  <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw3\">REAL</span> m<span class=\"sy1\">,</span> c <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\"># returns the line that passes through p1 and p2 #</span><br/>    <span class=\"kw4\">PROC</span> find line <span class=\"sy1\">=</span> <span class=\"br0\">(</span> POINT p1<span class=\"sy1\">,</span> p2 <span class=\"br0\">)</span>LINE<span class=\"sy1\">:</span><br/>         <span class=\"kw2\">IF</span> x <span class=\"kw6\">OF</span> p1 <span class=\"sy1\">=</span> x <span class=\"kw6\">OF</span> p2 <span class=\"kw2\">THEN</span><br/>             <span class=\"coMULTI\"># the line is vertical                 #</span><br/>             LINE<span class=\"br0\">(</span> 0<span class=\"sy1\">,</span> x <span class=\"kw6\">OF</span> p1 <span class=\"br0\">)</span><br/>         <span class=\"kw2\">ELSE</span><br/>             <span class=\"coMULTI\"># the line is not vertical             #</span><br/>             <span class=\"kw3\">REAL</span> m <span class=\"sy1\">=</span> <span class=\"br0\">(</span> y <span class=\"kw6\">OF</span> p1 <span class=\"sy1\">-</span> y <span class=\"kw6\">OF</span> p2 <span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"br0\">(</span> x <span class=\"kw6\">OF</span> p1 <span class=\"sy1\">-</span> x <span class=\"kw6\">OF</span> p2 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>             LINE<span class=\"br0\">(</span> m<span class=\"sy1\">,</span> y <span class=\"kw6\">OF</span> p1 <span class=\"sy1\">-</span> <span class=\"br0\">(</span> m <span class=\"sy1\">*</span> x <span class=\"kw6\">OF</span> p1 <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>         <span class=\"kw2\">FI</span> <span class=\"coMULTI\"># find line #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># returns the intersection of two lines - the lines must be distinct and not parallel #</span><br/>    <span class=\"kw4\">PRIO</span> INTERSECTION <span class=\"sy1\">=</span> 5<span class=\"sy1\">;</span><br/>    <span class=\"kw4\">OP</span>   INTERSECTION <span class=\"sy1\">=</span> <span class=\"br0\">(</span> LINE l1<span class=\"sy1\">,</span> l2 <span class=\"br0\">)</span>POINT<span class=\"sy1\">:</span><br/>         <span class=\"kw2\">BEGIN</span><br/>             <span class=\"kw3\">REAL</span> x <span class=\"sy1\">=</span> <span class=\"br0\">(</span> c <span class=\"kw6\">OF</span> l2 <span class=\"sy1\">-</span> c <span class=\"kw6\">OF</span> l1 <span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"br0\">(</span> m <span class=\"kw6\">OF</span> l1 <span class=\"sy1\">-</span> m <span class=\"kw6\">OF</span> l2 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>             POINT<span class=\"br0\">(</span> x<span class=\"sy1\">,</span> <span class=\"br0\">(</span> m <span class=\"kw6\">OF</span> l1 <span class=\"sy1\">*</span> x <span class=\"br0\">)</span> <span class=\"sy1\">+</span> c <span class=\"kw6\">OF</span> l1 <span class=\"br0\">)</span><br/>         <span class=\"kw2\">END</span> <span class=\"coMULTI\"># INTERSECTION #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># find the intersection of the lines as per the task #</span><br/>    POINT i <span class=\"sy1\">=</span> find line<span class=\"br0\">(</span> POINT<span class=\"br0\">(</span> <span class=\"re1\">4.0</span><span class=\"sy1\">,</span> <span class=\"re1\">0.0</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span> POINT<span class=\"br0\">(</span> <span class=\"re1\">6.0</span><span class=\"sy1\">,</span> <span class=\"re1\">10.0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>              INTERSECTION find line<span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"re1\">0.0</span><span class=\"sy1\">,</span> <span class=\"re1\">3.0</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span> <span class=\"re1\">10.0</span><span class=\"sy1\">,</span> <span class=\"re1\">7.0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">fixed</span><span class=\"br0\">(</span> x <span class=\"kw6\">OF</span> i<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>8<span class=\"sy1\">,</span> 4 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">fixed</span><span class=\"br0\">(</span> y <span class=\"kw6\">OF</span> i<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>8<span class=\"sy1\">,</span> 4 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">END</span></pre>"}, {"lang": "AWK", "loc": 28, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f FIND_THE_INTERSECTION_OF_TWO_LINES.AWK</span><br/><span class=\"co1\"># converted from Ring</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    intersect<span class=\"br0\">(</span><span class=\"nu0\">4</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">10</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">10</span>,<span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> intersect<span class=\"br0\">(</span>xa,ya,xb,yb,xc,yc,xd,yd,  errors,x,y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"the 1st line passes through (%g,%g) and (%g,%g)<span class=\"es0\">\\n</span>\"</span>,xa,ya,xb,yb<span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"the 2nd line passes through (%g,%g) and (%g,%g)<span class=\"es0\">\\n</span>\"</span>,xc,yc,xd,yd<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>xb<span class=\"sy3\">-</span>xa <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"error: xb-xa=0\"</span><span class=\"br0\">)</span>\u00a0; errors<span class=\"sy3\">++</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>xd<span class=\"sy3\">-</span>xc <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"error: xd-xc=0\"</span><span class=\"br0\">)</span>\u00a0; errors<span class=\"sy3\">++</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>errors <span class=\"sy2\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>      <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"the two lines are:<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"yab=%g+x*%g<span class=\"es0\">\\n</span>\"</span>,ya<span class=\"sy3\">-</span>xa<span class=\"sy3\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yb<span class=\"sy3\">-</span>ya<span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"br0\">(</span>xb<span class=\"sy3\">-</span>xa<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"br0\">(</span>yb<span class=\"sy3\">-</span>ya<span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"br0\">(</span>xb<span class=\"sy3\">-</span>xa<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"ycd=%g+x*%g<span class=\"es0\">\\n</span>\"</span>,yc<span class=\"sy3\">-</span>xc<span class=\"sy3\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yd<span class=\"sy3\">-</span>yc<span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"br0\">(</span>xd<span class=\"sy3\">-</span>xc<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"br0\">(</span>yd<span class=\"sy3\">-</span>yc<span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"br0\">(</span>xd<span class=\"sy3\">-</span>xc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    x = <span class=\"br0\">(</span><span class=\"br0\">(</span>yc<span class=\"sy3\">-</span>xc<span class=\"sy3\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yd<span class=\"sy3\">-</span>yc<span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"br0\">(</span>xd<span class=\"sy3\">-</span>xc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"br0\">(</span>ya<span class=\"sy3\">-</span>xa<span class=\"sy3\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yb<span class=\"sy3\">-</span>ya<span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"br0\">(</span>xb<span class=\"sy3\">-</span>xa<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yb<span class=\"sy3\">-</span>ya<span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"br0\">(</span>xb<span class=\"sy3\">-</span>xa<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yd<span class=\"sy3\">-</span>yc<span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"br0\">(</span>xd<span class=\"sy3\">-</span>xc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"x=%g<span class=\"es0\">\\n</span>\"</span>,x<span class=\"br0\">)</span><br/>    y = ya<span class=\"sy3\">-</span>xa<span class=\"sy3\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yb<span class=\"sy3\">-</span>ya<span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"br0\">(</span>xb<span class=\"sy3\">-</span>xa<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>x<span class=\"sy3\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yb<span class=\"sy3\">-</span>ya<span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"br0\">(</span>xb<span class=\"sy3\">-</span>xa<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"yab=%g<span class=\"es0\">\\n</span>\"</span>,y<span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"ycd=%g<span class=\"es0\">\\n</span>\"</span>,yc<span class=\"sy3\">-</span>xc<span class=\"sy3\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yd<span class=\"sy3\">-</span>yc<span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"br0\">(</span>xd<span class=\"sy3\">-</span>xc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">+</span>x<span class=\"sy3\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yd<span class=\"sy3\">-</span>yc<span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"br0\">(</span>xd<span class=\"sy3\">-</span>xc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"intersection:\u00a0%g,%g<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span>,x,y<span class=\"br0\">)</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\"> 10 LET XA=4<br/> 20 LET YA=0<br/> 30 LET XB=6<br/> 40 LET YB=10<br/> 50 LET XC=0<br/> 60 LET YC=3<br/> 70 LET XD=10<br/> 80 LET YD=0<br/> 90 PRINT \"THE TWO LINES ARE:\"<br/>100 PRINT \"YAB=\";YA-XA*((YB-YA)/(XB-XA));\"+X*\";((YB-YA)/(XB-XA))<br/>110 PRINT \"YCD=\";YC-XC*((YD-YC)/(XD-XC));\"+X*\";((YD-YC)/(XD-XC))<br/>120 LET X=((YC-XC*((YD-YC)/(XD-XC)))-(YA-XA*((YB-YA)/(XB-XA))))/(((YB-YA)/(XB-XA))-((YD-YC)/(XD-XC)))<br/>130 PRINT \"X=\";X<br/>140 LET Y=YA-XA*((YB-YA)/(XB-XA))+X*((YB-YA)/(XB-XA))<br/>150 PRINT \"YAB=\";Y<br/>160 PRINT \"YCD=\";YC-XC*((YD-YC)/(XD-XC))+X*((YD-YC)/(XD-XC))<br/>170 PRINT \"INTERSECTION: \";X;\",\";Y</pre>"}, {"lang": "C", "loc": 92, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/><span class=\"co2\">#include&lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> x<span class=\"sy0\">,</span>y<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span>point<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> lineSlope<span class=\"br0\">(</span>point a<span class=\"sy0\">,</span>point b<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>a.<span class=\"me1\">x</span><span class=\"sy0\">-</span>b.<span class=\"me1\">x</span> <span class=\"sy0\">==</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> NAN<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">else</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span>a.<span class=\"me1\">y</span><span class=\"sy0\">-</span>b.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>a.<span class=\"me1\">x</span><span class=\"sy0\">-</span>b.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>point extractPoint<span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span> str<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>start<span class=\"sy0\">,</span>end<span class=\"sy0\">,</span>length<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span><span class=\"sy0\">*</span> holder<span class=\"sy0\">;</span><br/>\tpoint c<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=</span><span class=\"nu8\">00</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">'('</span><span class=\"br0\">)</span><br/>\t\t\tstart <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">','</span><span class=\"sy0\">||</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">')'</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tend <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\tlength <span class=\"sy0\">=</span> end <span class=\"sy0\">-</span> start<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\tholder <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>length<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;</span>length<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t\tholder<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> str<span class=\"br0\">[</span>start <span class=\"sy0\">+</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t\tholder<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu8\">00</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\tstart <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>\t\t\t\tc.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atof.html\"><span class=\"kw3\">atof</span></a><span class=\"br0\">(</span>holder<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">else</span><br/>\t\t\t\tc.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atof.html\"><span class=\"kw3\">atof</span></a><span class=\"br0\">(</span>holder<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> c<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>point intersectionPoint<span class=\"br0\">(</span>point a1<span class=\"sy0\">,</span>point a2<span class=\"sy0\">,</span>point b1<span class=\"sy0\">,</span>point b2<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tpoint c<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">double</span> slopeA <span class=\"sy0\">=</span> lineSlope<span class=\"br0\">(</span>a1<span class=\"sy0\">,</span>a2<span class=\"br0\">)</span><span class=\"sy0\">,</span> slopeB <span class=\"sy0\">=</span> lineSlope<span class=\"br0\">(</span>b1<span class=\"sy0\">,</span>b2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>slopeA<span class=\"sy0\">==</span>slopeB<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tc.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> NAN<span class=\"sy0\">;</span><br/>\t\tc.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> NAN<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>slopeA<span class=\"sy0\">==</span>NAN <span class=\"sy0\">&amp;&amp;</span> slopeB<span class=\"sy0\">!=</span>NAN<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tc.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> a1.<span class=\"me1\">x</span><span class=\"sy0\">;</span><br/>\t\tc.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a1.<span class=\"me1\">x</span><span class=\"sy0\">-</span>b1.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>slopeB <span class=\"sy0\">+</span> b1.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>slopeB<span class=\"sy0\">==</span>NAN <span class=\"sy0\">&amp;&amp;</span> slopeA<span class=\"sy0\">!=</span>NAN<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tc.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> b1.<span class=\"me1\">x</span><span class=\"sy0\">;</span><br/>\t\tc.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b1.<span class=\"me1\">x</span><span class=\"sy0\">-</span>a1.<span class=\"me1\">x</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>slopeA <span class=\"sy0\">+</span> b1.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t\tc.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>slopeA<span class=\"sy0\">*</span>a1.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> slopeB<span class=\"sy0\">*</span>b1.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> b1.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> a1.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>slopeA <span class=\"sy0\">-</span> slopeB<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tc.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> slopeB<span class=\"sy0\">*</span><span class=\"br0\">(</span>c.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> b1.<span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> b1.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> c<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argC<span class=\"sy0\">,</span><span class=\"kw4\">char</span><span class=\"sy0\">*</span> argV<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tpoint c<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>argC <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Usage\u00a0:\u00a0%s &lt;four points specified as (x,y) separated by a space&gt;\"</span><span class=\"sy0\">,</span>argV<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t\tc <span class=\"sy0\">=</span> intersectionPoint<span class=\"br0\">(</span>extractPoint<span class=\"br0\">(</span>argV<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>extractPoint<span class=\"br0\">(</span>argV<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>extractPoint<span class=\"br0\">(</span>argV<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>extractPoint<span class=\"br0\">(</span>argV<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>c.<span class=\"me1\">x</span><span class=\"sy0\">==</span>NAN<span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"The lines do not intersect, they are either parallel or co-incident.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Point of intersection\u00a0: (%lf,%lf)\"</span><span class=\"sy0\">,</span>c.<span class=\"me1\">x</span><span class=\"sy0\">,</span>c.<span class=\"me1\">y</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 25, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Drawing</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> PointF FindIntersection<span class=\"br0\">(</span>PointF s1, PointF e1, PointF s2, PointF e2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">float</span> a1 <span class=\"sy0\">=</span> e1<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">-</span> s1<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">float</span> b1 <span class=\"sy0\">=</span> s1<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">-</span> e1<span class=\"sy0\">.</span><span class=\"me1\">X</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">float</span> c1 <span class=\"sy0\">=</span> a1 <span class=\"sy0\">*</span> s1<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">+</span> b1 <span class=\"sy0\">*</span> s1<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">float</span> a2 <span class=\"sy0\">=</span> e2<span class=\"sy0\">.</span><span class=\"me1\">Y</span> <span class=\"sy0\">-</span> s2<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">float</span> b2 <span class=\"sy0\">=</span> s2<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">-</span> e2<span class=\"sy0\">.</span><span class=\"me1\">X</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">float</span> c2 <span class=\"sy0\">=</span> a2 <span class=\"sy0\">*</span> s2<span class=\"sy0\">.</span><span class=\"me1\">X</span> <span class=\"sy0\">+</span> b2 <span class=\"sy0\">*</span> s2<span class=\"sy0\">.</span><span class=\"me1\">Y</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">float</span> delta <span class=\"sy0\">=</span> a1 <span class=\"sy0\">*</span> b2 <span class=\"sy0\">-</span> a2 <span class=\"sy0\">*</span> b1<span class=\"sy0\">;</span><br/>        <span class=\"co1\">//If lines are parallel, the result will be (NaN, NaN).</span><br/>        <span class=\"kw1\">return</span> delta <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> PointF<span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"sy0\">.</span><span class=\"me1\">NaN</span>, <span class=\"kw4\">float</span><span class=\"sy0\">.</span><span class=\"me1\">NaN</span><span class=\"br0\">)</span><br/>            <span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> PointF<span class=\"br0\">(</span><span class=\"br0\">(</span>b2 <span class=\"sy0\">*</span> c1 <span class=\"sy0\">-</span> b1 <span class=\"sy0\">*</span> c2<span class=\"br0\">)</span> <span class=\"sy0\">/</span> delta, <span class=\"br0\">(</span>a1 <span class=\"sy0\">*</span> c2 <span class=\"sy0\">-</span> a2 <span class=\"sy0\">*</span> c1<span class=\"br0\">)</span> <span class=\"sy0\">/</span> delta<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">float</span>, <span class=\"kw4\">float</span>, PointF<span class=\"sy0\">&gt;</span> p <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> PointF<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>FindIntersection<span class=\"br0\">(</span>p<span class=\"br0\">(</span>4f, 0f<span class=\"br0\">)</span>, p<span class=\"br0\">(</span>6f, 10f<span class=\"br0\">)</span>, p<span class=\"br0\">(</span>0f, 3f<span class=\"br0\">)</span>, p<span class=\"br0\">(</span>10f, 7f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>FindIntersection<span class=\"br0\">(</span>p<span class=\"br0\">(</span>0f, 0f<span class=\"br0\">)</span>, p<span class=\"br0\">(</span>1f, 1f<span class=\"br0\">)</span>, p<span class=\"br0\">(</span>1f, 2f<span class=\"br0\">)</span>, p<span class=\"br0\">(</span>4f, 5f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 69, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/><span class=\"co2\">#include &lt;assert.h&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/** Calculate determinant of matrix:<br/>\t[a b]<br/>\t[c d]<br/>*/</span><br/><span class=\"kw2\">inline</span> <span class=\"kw4\">double</span> Det<span class=\"br0\">(</span><span class=\"kw4\">double</span> a, <span class=\"kw4\">double</span> b, <span class=\"kw4\">double</span> c, <span class=\"kw4\">double</span> d<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> a<span class=\"sy2\">*</span>d <span class=\"sy2\">-</span> b<span class=\"sy2\">*</span>c<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">///Calculate intersection of two lines.</span><br/><span class=\"co1\">///\\return true if found, false if not found or error</span><br/><span class=\"kw4\">bool</span> LineLineIntersect<span class=\"br0\">(</span><span class=\"kw4\">double</span> x1, <span class=\"kw4\">double</span> y1, <span class=\"co1\">//Line 1 start</span><br/>\t<span class=\"kw4\">double</span> x2, <span class=\"kw4\">double</span> y2, <span class=\"co1\">//Line 1 end</span><br/>\t<span class=\"kw4\">double</span> x3, <span class=\"kw4\">double</span> y3, <span class=\"co1\">//Line 2 start</span><br/>\t<span class=\"kw4\">double</span> x4, <span class=\"kw4\">double</span> y4, <span class=\"co1\">//Line 2 end</span><br/>\t<span class=\"kw4\">double</span> <span class=\"sy3\">&amp;</span>ixOut, <span class=\"kw4\">double</span> <span class=\"sy3\">&amp;</span>iyOut<span class=\"br0\">)</span> <span class=\"co1\">//Output </span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> detL1 <span class=\"sy1\">=</span> Det<span class=\"br0\">(</span>x1, y1, x2, y2<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> detL2 <span class=\"sy1\">=</span> Det<span class=\"br0\">(</span>x3, y3, x4, y4<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> x1mx2 <span class=\"sy1\">=</span> x1 <span class=\"sy2\">-</span> x2<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> x3mx4 <span class=\"sy1\">=</span> x3 <span class=\"sy2\">-</span> x4<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> y1my2 <span class=\"sy1\">=</span> y1 <span class=\"sy2\">-</span> y2<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> y3my4 <span class=\"sy1\">=</span> y3 <span class=\"sy2\">-</span> y4<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">double</span> xnom <span class=\"sy1\">=</span> Det<span class=\"br0\">(</span>detL1, x1mx2, detL2, x3mx4<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> ynom <span class=\"sy1\">=</span> Det<span class=\"br0\">(</span>detL1, y1my2, detL2, y3my4<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> denom <span class=\"sy1\">=</span> Det<span class=\"br0\">(</span>x1mx2, y1my2, x3mx4, y3my4<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>denom <span class=\"sy1\">==</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"co1\">//Lines don't seem to cross</span><br/>\t<span class=\"br0\">{</span><br/>\t\tixOut <span class=\"sy1\">=</span> NAN<span class=\"sy4\">;</span><br/>\t\tiyOut <span class=\"sy1\">=</span> NAN<span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tixOut <span class=\"sy1\">=</span> xnom <span class=\"sy2\">/</span> denom<span class=\"sy4\">;</span>\t<br/>\tiyOut <span class=\"sy1\">=</span> ynom <span class=\"sy2\">/</span> denom<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy3\">!</span>isfinite<span class=\"br0\">(</span>ixOut<span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"sy3\">!</span>isfinite<span class=\"br0\">(</span>iyOut<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">//Probably a numerical issue</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span> <span class=\"co1\">//All OK</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"co1\">// **Simple crossing diagonal lines**</span><br/>\u00a0<br/>\t<span class=\"co1\">//Line 1</span><br/>\t<span class=\"kw4\">double</span> x1<span class=\"sy1\">=</span><span class=\"nu16\">4.0</span>, y1<span class=\"sy1\">=</span><span class=\"nu16\">0.0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> x2<span class=\"sy1\">=</span><span class=\"nu16\">6.0</span>, y2<span class=\"sy1\">=</span><span class=\"nu16\">10.0</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"co1\">//Line 2</span><br/>\t<span class=\"kw4\">double</span> x3<span class=\"sy1\">=</span><span class=\"nu16\">0.0</span>, y3<span class=\"sy1\">=</span><span class=\"nu16\">3.0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> x4<span class=\"sy1\">=</span><span class=\"nu16\">10.0</span>, y4<span class=\"sy1\">=</span><span class=\"nu16\">7.0</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">double</span> ix <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu16\">1.0</span>, iy <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu16\">1.0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">bool</span> result <span class=\"sy1\">=</span> LineLineIntersect<span class=\"br0\">(</span>x1, y1, x2, y2, x3, y3, x4, y4, ix, iy<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"result \"</span> <span class=\"sy1\">&lt;&lt;</span>  result <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\",\"</span> <span class=\"sy1\">&lt;&lt;</span> ix <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\",\"</span> <span class=\"sy1\">&lt;&lt;</span> iy <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">double</span> eps <span class=\"sy1\">=</span> <span class=\"nu19\">1e-6</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">assert</span><span class=\"br0\">(</span>result <span class=\"sy1\">==</span> <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">assert</span><span class=\"br0\">(</span><span class=\"kw3\">fabs</span><span class=\"br0\">(</span>ix <span class=\"sy2\">-</span> <span class=\"nu16\">5.0</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> eps<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">assert</span><span class=\"br0\">(</span><span class=\"kw3\">fabs</span><span class=\"br0\">(</span>iy <span class=\"sy2\">-</span> <span class=\"nu16\">5.0</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> eps<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 41, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Point <span class=\"br0\">{</span><br/>    <span class=\"kw4\">real</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> toString<span class=\"br0\">(</span><span class=\"kw2\">scope</span> <span class=\"kw4\">void</span> <span class=\"kw2\">delegate</span><span class=\"br0\">(</span><span class=\"kw4\">const</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> sink<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">import</span> std.<span class=\"me1\">format</span><span class=\"sy0\">;</span><br/>        sink<span class=\"br0\">(</span><span class=\"st0\">\"{\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sink.<span class=\"me1\">formattedWrite</span><span class=\"sy0\">!</span><span class=\"st0\">\"%f\"</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sink<span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sink.<span class=\"me1\">formattedWrite</span><span class=\"sy0\">!</span><span class=\"st0\">\"%f\"</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        sink<span class=\"br0\">(</span><span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Line <span class=\"br0\">{</span><br/>    Point s<span class=\"sy0\">,</span> e<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Point findIntersection<span class=\"br0\">(</span>Line l1<span class=\"sy0\">,</span> Line l2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> a1 <span class=\"sy0\">=</span> l1.<span class=\"me1\">e</span>.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> l1.<span class=\"me1\">s</span>.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> b1 <span class=\"sy0\">=</span> l1.<span class=\"me1\">s</span>.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> l1.<span class=\"me1\">e</span>.<span class=\"me1\">x</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> c1 <span class=\"sy0\">=</span> a1 <span class=\"sy0\">*</span> l1.<span class=\"me1\">s</span>.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> b1 <span class=\"sy0\">*</span> l1.<span class=\"me1\">s</span>.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> a2 <span class=\"sy0\">=</span> l2.<span class=\"me1\">e</span>.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> l2.<span class=\"me1\">s</span>.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> b2 <span class=\"sy0\">=</span> l2.<span class=\"me1\">s</span>.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> l2.<span class=\"me1\">e</span>.<span class=\"me1\">x</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> c2 <span class=\"sy0\">=</span> a2 <span class=\"sy0\">*</span> l2.<span class=\"me1\">s</span>.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> b2 <span class=\"sy0\">*</span> l2.<span class=\"me1\">s</span>.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> delta <span class=\"sy0\">=</span> a1 <span class=\"sy0\">*</span> b2 <span class=\"sy0\">-</span> a2 <span class=\"sy0\">*</span> b1<span class=\"sy0\">;</span><br/>    <span class=\"co1\">// If lines are parallel, intersection point will contain infinite values</span><br/>    <span class=\"kw1\">return</span> Point<span class=\"br0\">(</span><span class=\"br0\">(</span>b2 <span class=\"sy0\">*</span> c1 <span class=\"sy0\">-</span> b1 <span class=\"sy0\">*</span> c2<span class=\"br0\">)</span> <span class=\"sy0\">/</span> delta<span class=\"sy0\">,</span> <span class=\"br0\">(</span>a1 <span class=\"sy0\">*</span> c2 <span class=\"sy0\">-</span> a2 <span class=\"sy0\">*</span> c1<span class=\"br0\">)</span> <span class=\"sy0\">/</span> delta<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> l1 <span class=\"sy0\">=</span> Line<span class=\"br0\">(</span>Point<span class=\"br0\">(</span><span class=\"nu16\">4.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Point<span class=\"br0\">(</span><span class=\"nu16\">6.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">10.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> l2 <span class=\"sy0\">=</span> Line<span class=\"br0\">(</span>Point<span class=\"br0\">(</span><span class=\"nu17\">0f</span><span class=\"sy0\">,</span> <span class=\"nu17\">3f</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Point<span class=\"br0\">(</span><span class=\"nu17\">10f</span><span class=\"sy0\">,</span> <span class=\"nu17\">7f</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>findIntersection<span class=\"br0\">(</span>l1<span class=\"sy0\">,</span> l2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    l1 <span class=\"sy0\">=</span> Line<span class=\"br0\">(</span>Point<span class=\"br0\">(</span><span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Point<span class=\"br0\">(</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    l2 <span class=\"sy0\">=</span> Line<span class=\"br0\">(</span>Point<span class=\"br0\">(</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Point<span class=\"br0\">(</span><span class=\"nu16\">4.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">5.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>findIntersection<span class=\"br0\">(</span>l1<span class=\"sy0\">,</span> l2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "F#", "loc": 13, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co3\">(*<br/>Find the point of intersection of 2 lines.<br/>Nigel Galloway May 20th., 2017<br/>*)</span><br/><span class=\"kw1\">type</span> Line<span class=\"sy0\">=</span><span class=\"br0\">{</span>a:float<span class=\"sy0\">;</span>b:float<span class=\"sy0\">;</span>c:<span class=\"kw4\">float</span><span class=\"br0\">}</span> <span class=\"kw1\">member</span> N.<span class=\"me1\">toS</span><span class=\"sy0\">=</span>sprintf <span class=\"st0\">\"%.2fx +\u00a0%.2fy =\u00a0%.2f\"</span> N.<span class=\"me1\">a</span> N.<span class=\"me1\">b</span> N.<span class=\"me1\">c</span><br/><span class=\"kw1\">let</span> intersect <span class=\"br0\">(</span>n:Line<span class=\"br0\">)</span> g <span class=\"sy0\">=</span> <span class=\"kw1\">match</span> <span class=\"br0\">(</span>n.<span class=\"me1\">a</span><span class=\"sy0\">*</span>g.<span class=\"me1\">b</span><span class=\"sy0\">-</span>g.<span class=\"me1\">a</span><span class=\"sy0\">*</span>n.<span class=\"me1\">b</span><span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>                           |<span class=\"nu0\">0.0</span> <span class=\"sy0\">-&gt;</span>printfn <span class=\"st0\">\"%s does not intersect\u00a0%s\"</span> n.<span class=\"me1\">toS</span> g.<span class=\"me1\">toS</span><br/>                           |ng  <span class=\"sy0\">-&gt;</span>printfn <span class=\"st0\">\"%s intersects\u00a0%s at x=%.2f y=%.2f\"</span> n.<span class=\"me1\">toS</span> g.<span class=\"me1\">toS</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>g.<span class=\"me1\">b</span><span class=\"sy0\">*</span>n.<span class=\"me1\">c</span><span class=\"sy0\">-</span>n.<span class=\"me1\">b</span><span class=\"sy0\">*</span>g.<span class=\"me1\">c</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>ng<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n.<span class=\"me1\">a</span><span class=\"sy0\">*</span>g.<span class=\"me1\">c</span><span class=\"sy0\">-</span>g.<span class=\"me1\">a</span><span class=\"sy0\">*</span>n.<span class=\"me1\">c</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>ng<span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> fn <span class=\"br0\">(</span>i,g<span class=\"br0\">)</span> <span class=\"br0\">(</span>e,l<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span>a<span class=\"sy0\">=</span>g<span class=\"sy0\">-</span>l<span class=\"sy0\">;</span>b<span class=\"sy0\">=</span>e<span class=\"sy0\">-</span>i<span class=\"sy0\">;</span>c<span class=\"sy0\">=</span><span class=\"br0\">(</span>e<span class=\"sy0\">-</span>i<span class=\"br0\">)</span><span class=\"sy0\">*</span>g<span class=\"sy0\">+</span><span class=\"br0\">(</span>g<span class=\"sy0\">-</span>l<span class=\"br0\">)</span><span class=\"sy0\">*</span>i<span class=\"br0\">}</span><br/>intersect <span class=\"br0\">(</span>fn <span class=\"br0\">(</span><span class=\"nu0\">4.0</span>,<span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">6.0</span>,<span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>fn <span class=\"br0\">(</span><span class=\"nu0\">0.0</span>,<span class=\"nu0\">3.0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">10.0</span>,<span class=\"nu0\">7.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>intersect <span class=\"br0\">{</span>a<span class=\"sy0\">=</span><span class=\"nu0\">3.18</span><span class=\"sy0\">;</span>b<span class=\"sy0\">=</span><span class=\"nu0\">4.23</span><span class=\"sy0\">;</span>c<span class=\"sy0\">=</span><span class=\"nu0\">7.13</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>a<span class=\"sy0\">=</span><span class=\"nu0\">6.36</span><span class=\"sy0\">;</span>b<span class=\"sy0\">=</span><span class=\"nu0\">8.46</span><span class=\"sy0\">;</span>c<span class=\"sy0\">=</span><span class=\"nu0\">9.75</span><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 45, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 16-08-2017</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/><span class=\"co2\">#Define NaN 0 / 0   ' FreeBASIC returns -1.#IND</span><br/>\u00a0<br/><span class=\"kw1\">Type</span> _point_<br/>    <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> x, y<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Type</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> l_l_intersect<span class=\"br0\">(</span>s1 <span class=\"kw1\">As</span> _point_, e1 <span class=\"kw1\">As</span> _point_, s2 <span class=\"kw1\">As</span> _point_, e2 <span class=\"kw1\">As</span> _point_<span class=\"br0\">)</span> <span class=\"kw1\">As</span> _point_<br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> a1 = e1.<span class=\"me1\">y</span> - s1.<span class=\"me1\">y</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> b1 = s1.<span class=\"me1\">x</span> - e1.<span class=\"me1\">x</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> c1 = a1 * s1.<span class=\"me1\">x</span> + b1 * s1.<span class=\"me1\">y</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> a2 = e2.<span class=\"me1\">y</span> - s2.<span class=\"me1\">y</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> b2 = s2.<span class=\"me1\">x</span> - e2.<span class=\"me1\">x</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> c2 = a2 * s2.<span class=\"me1\">x</span> + b2 * s2.<span class=\"me1\">y</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> det = a1 * b2 - a2 * b1<br/>\u00a0<br/>    <span class=\"kw1\">If</span> det = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">Return</span> <span class=\"kw1\">Type</span><span class=\"br0\">(</span>NaN, NaN<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Else</span><br/>        <span class=\"kw1\">Return</span> <span class=\"kw1\">Type</span><span class=\"br0\">(</span><span class=\"br0\">(</span>b2 * c1 - b1 * c2<span class=\"br0\">)</span> / det, <span class=\"br0\">(</span>a1 * c2 - a2 * c1<span class=\"br0\">)</span> / det<span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> _point_ s1, e1, s2, e2, answer<br/>\u00a0<br/>s1.<span class=\"me1\">x</span> = <span class=\"nu0\">4.0</span>\u00a0: s1.<span class=\"me1\">y</span> = <span class=\"nu0\">0.0</span>\u00a0: e1.<span class=\"me1\">x</span> =  <span class=\"nu0\">6.0</span>\u00a0: e1.<span class=\"me1\">y</span> = <span class=\"nu0\">10.0</span>  <span class=\"co1\">' start and end of first line</span><br/>s2.<span class=\"me1\">x</span> = <span class=\"nu0\">0.0</span>\u00a0: s2.<span class=\"me1\">y</span> = <span class=\"nu0\">3.0</span>\u00a0: e2.<span class=\"me1\">x</span> = <span class=\"nu0\">10.0</span>\u00a0: e2.<span class=\"me1\">y</span> =  <span class=\"nu0\">7.0</span>  <span class=\"co1\">' start and end of second line</span><br/>answer = l_l_intersect<span class=\"br0\">(</span>s1, e1, s2, e2<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> answer.<span class=\"me1\">x</span>, answer.<span class=\"me1\">y</span><br/>\u00a0<br/>s1.<span class=\"me1\">x</span> = <span class=\"nu0\">0.0</span>\u00a0: s1.<span class=\"me1\">y</span> = <span class=\"nu0\">0.0</span>\u00a0: e1.<span class=\"me1\">x</span> =  <span class=\"nu0\">0.0</span>\u00a0: e1.<span class=\"me1\">y</span> =  <span class=\"nu0\">0.0</span>  <span class=\"co1\">' start and end of first line</span><br/>s2.<span class=\"me1\">x</span> = <span class=\"nu0\">0.0</span>\u00a0: s2.<span class=\"me1\">y</span> = <span class=\"nu0\">3.0</span>\u00a0: e2.<span class=\"me1\">x</span> = <span class=\"nu0\">10.0</span>\u00a0: e2.<span class=\"me1\">y</span> =  <span class=\"nu0\">7.0</span>  <span class=\"co1\">' start and end of second line</span><br/>answer = l_l_intersect<span class=\"br0\">(</span>s1, e1, s2, e2<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> answer.<span class=\"me1\">x</span>, answer.<span class=\"me1\">y</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 47, "block": "<pre class=\"go highlighted_source\">\u00a0<br/><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"errors\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Point <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>\tx <span class=\"kw4\">float64</span><br/>\ty <span class=\"kw4\">float64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Line <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>\tslope <span class=\"kw4\">float64</span><br/>\tyint <span class=\"kw4\">float64</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> CreateLine <span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b Point<span class=\"sy1\">)</span> Line <span class=\"sy1\">{</span><br/>\tslope <span class=\"sy2\">:=</span> <span class=\"sy1\">(</span>b<span class=\"sy3\">.</span>y<span class=\"sy3\">-</span>a<span class=\"sy3\">.</span>y<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> <span class=\"sy1\">(</span>b<span class=\"sy3\">.</span>x<span class=\"sy3\">-</span>a<span class=\"sy3\">.</span>x<span class=\"sy1\">)</span><br/>\tyint <span class=\"sy2\">:=</span> a<span class=\"sy3\">.</span>y <span class=\"sy3\">-</span> slope<span class=\"sy3\">*</span>a<span class=\"sy3\">.</span>x<br/>\t<span class=\"kw1\">return</span> Line<span class=\"sy1\">{</span>slope<span class=\"sy1\">,</span> yint<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span> <br/>\u00a0<br/><span class=\"kw4\">func</span> EvalX <span class=\"sy1\">(</span>l Line<span class=\"sy1\">,</span> x <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">return</span> l<span class=\"sy3\">.</span>slope<span class=\"sy3\">*</span>x <span class=\"sy3\">+</span> l<span class=\"sy3\">.</span>yint<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> Intersection <span class=\"sy1\">(</span>l1<span class=\"sy1\">,</span> l2 Line<span class=\"sy1\">)</span> <span class=\"sy1\">(</span>Point<span class=\"sy1\">,</span> error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> l1<span class=\"sy3\">.</span>slope <span class=\"sy3\">==</span> l2<span class=\"sy3\">.</span>slope <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> Point<span class=\"sy1\">{},</span> errors<span class=\"sy3\">.</span>New<span class=\"sy1\">(</span><span class=\"st0\">\"The lines do not intersect\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\tx <span class=\"sy2\">:=</span> <span class=\"sy1\">(</span>l2<span class=\"sy3\">.</span>yint<span class=\"sy3\">-</span>l1<span class=\"sy3\">.</span>yint<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> <span class=\"sy1\">(</span>l1<span class=\"sy3\">.</span>slope<span class=\"sy3\">-</span>l2<span class=\"sy3\">.</span>slope<span class=\"sy1\">)</span><br/>\ty <span class=\"sy2\">:=</span> EvalX<span class=\"sy1\">(</span>l1<span class=\"sy1\">,</span> x<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">return</span> Point<span class=\"sy1\">{</span>x<span class=\"sy1\">,</span> y<span class=\"sy1\">},</span> <span class=\"kw2\">nil</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tl1 <span class=\"sy2\">:=</span> CreateLine<span class=\"sy1\">(</span>Point<span class=\"sy1\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">},</span> Point<span class=\"sy1\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">})</span><br/>\tl2 <span class=\"sy2\">:=</span> CreateLine<span class=\"sy1\">(</span>Point<span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">},</span> Point<span class=\"sy1\">{</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">})</span><br/>\t<span class=\"kw1\">if</span> result<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> Intersection<span class=\"sy1\">(</span>l1<span class=\"sy1\">,</span> l2<span class=\"sy1\">);</span> err <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>result<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"The lines do not intersect\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 33, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">type</span> Line <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Point<span class=\"sy0\">,</span> Point<span class=\"br0\">)</span><br/><span class=\"kw1\">type</span> Point <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- INTERSECTION OF TWO LINES --------------------------------------------------</span><br/>maybeIntersection <span class=\"sy0\">::</span> Line <span class=\"sy0\">-&gt;</span> Line <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> Point<br/>maybeIntersection <span class=\"br0\">(</span><span class=\"br0\">(</span>ax<span class=\"sy0\">,</span> ay<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>bx<span class=\"sy0\">,</span> by<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>px<span class=\"sy0\">,</span> py<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>qx<span class=\"sy0\">,</span> qy<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"br0\">(</span>pqDX<span class=\"sy0\">,</span> abDX<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>px <span class=\"sy0\">-</span> qx<span class=\"sy0\">,</span> ax <span class=\"sy0\">-</span> bx<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>pqDY<span class=\"sy0\">,</span> abDY<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>py <span class=\"sy0\">-</span> qy<span class=\"sy0\">,</span> ay <span class=\"sy0\">-</span> by<span class=\"br0\">)</span><br/>      determinant <span class=\"sy0\">=</span> abDX <span class=\"sy0\">*</span> pqDY <span class=\"sy0\">-</span> abDY <span class=\"sy0\">*</span> pqDX<br/>      f pq ab <span class=\"sy0\">=</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>ax <span class=\"sy0\">*</span> by<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>ay <span class=\"sy0\">*</span> bx<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> pq<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <br/>         <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>px <span class=\"sy0\">*</span> qy<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>py <span class=\"sy0\">*</span> qx<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> ab<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span><br/>        determinant<br/>  <span class=\"kw1\">in</span> <span class=\"kw1\">case</span> determinant <span class=\"kw1\">of</span><br/>       <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> Nothing<br/>       <span class=\"sy0\">_</span> <span class=\"sy0\">-&gt;</span> Just <span class=\"br0\">(</span>f pqDX abDX<span class=\"sy0\">,</span> f pqDY abDY<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- TEST -----------------------------------------------------------------------</span><br/>ab <span class=\"sy0\">::</span> Line<br/>ab <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">4.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">6.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>pq <span class=\"sy0\">::</span> Line<br/>pq <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">10.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">7.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>interSection <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> Point<br/>interSection <span class=\"sy0\">=</span> maybeIntersection ab pq<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span><br/>  <span class=\"kw1\">case</span> interSection <span class=\"kw1\">of</span><br/>    Nothing <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"(parallel lines \u2013 no intersection)\"</span><br/>    Just x <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> x</pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">det=: -/ .*   <span class=\"co1\">NB. calculate determinant</span><br/>findIntersection=: <span class=\"sy0\">(</span>det ,.\"<span class=\"nu0\">1</span> [: |: -/\"<span class=\"nu0\">2</span><span class=\"sy0\">)</span>\u00a0%&amp;det -/\"<span class=\"nu0\">2</span></pre>"}, {"lang": "Java", "loc": 47, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Intersection <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> x, y<span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"kw4\">double</span> x, <span class=\"kw4\">double</span> y<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">x</span> <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">y</span> <span class=\"sy0\">=</span> y<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @Override<br/>        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"{%f,\u00a0%f}\"</span>, x, y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aline+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Line</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> s, e<span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aline+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Line</span></a><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> s, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">s</span> <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">e</span> <span class=\"sy0\">=</span> e<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a> findIntersection<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aline+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Line</span></a> l1, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aline+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Line</span></a> l2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> a1 <span class=\"sy0\">=</span> l1.<span class=\"me1\">e</span>.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> l1.<span class=\"me1\">s</span>.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> b1 <span class=\"sy0\">=</span> l1.<span class=\"me1\">s</span>.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> l1.<span class=\"me1\">e</span>.<span class=\"me1\">x</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> c1 <span class=\"sy0\">=</span> a1 <span class=\"sy0\">*</span> l1.<span class=\"me1\">s</span>.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> b1 <span class=\"sy0\">*</span> l1.<span class=\"me1\">s</span>.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">double</span> a2 <span class=\"sy0\">=</span> l2.<span class=\"me1\">e</span>.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> l2.<span class=\"me1\">s</span>.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> b2 <span class=\"sy0\">=</span> l2.<span class=\"me1\">s</span>.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> l2.<span class=\"me1\">e</span>.<span class=\"me1\">x</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> c2 <span class=\"sy0\">=</span> a2 <span class=\"sy0\">*</span> l2.<span class=\"me1\">s</span>.<span class=\"me1\">x</span> <span class=\"sy0\">+</span> b2 <span class=\"sy0\">*</span> l2.<span class=\"me1\">s</span>.<span class=\"me1\">y</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">double</span> delta <span class=\"sy0\">=</span> a1 <span class=\"sy0\">*</span> b2 <span class=\"sy0\">-</span> a2 <span class=\"sy0\">*</span> b1<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>b2 <span class=\"sy0\">*</span> c1 <span class=\"sy0\">-</span> b1 <span class=\"sy0\">*</span> c2<span class=\"br0\">)</span> <span class=\"sy0\">/</span> delta, <span class=\"br0\">(</span>a1 <span class=\"sy0\">*</span> c2 <span class=\"sy0\">-</span> a2 <span class=\"sy0\">*</span> c1<span class=\"br0\">)</span> <span class=\"sy0\">/</span> delta<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aline+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Line</span></a> l1 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aline+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Line</span></a><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aline+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Line</span></a> l2 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aline+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Line</span></a><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>findIntersection<span class=\"br0\">(</span>l1, l2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        l1 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aline+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Line</span></a><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        l2 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aline+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Line</span></a><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Apoint+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Point</span></a><span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>findIntersection<span class=\"br0\">(</span>l1, l2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 70, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// INTERSECTION OF TWO LINES ----------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// maybeIntersection\u00a0:: Line -&gt; Line -&gt; Maybe Point</span><br/>    <span class=\"kw1\">const</span> maybeIntersection <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><br/>        <span class=\"br0\">[</span>ax<span class=\"sy0\">,</span> ay<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span>bx<span class=\"sy0\">,</span> by<span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><br/>        <span class=\"br0\">[</span>px<span class=\"sy0\">,</span> py<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span>qx<span class=\"sy0\">,</span> qy<span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span><br/>            abDX <span class=\"sy0\">=</span> ax <span class=\"sy0\">-</span> bx<span class=\"sy0\">,</span><br/>            pqDX <span class=\"sy0\">=</span> px <span class=\"sy0\">-</span> qx<span class=\"sy0\">,</span><br/>            abDY <span class=\"sy0\">=</span> ay <span class=\"sy0\">-</span> by<span class=\"sy0\">,</span><br/>            pqDY <span class=\"sy0\">=</span> py <span class=\"sy0\">-</span> qy<span class=\"sy0\">,</span><br/>            determinant <span class=\"sy0\">=</span> abDX <span class=\"sy0\">*</span> pqDY <span class=\"sy0\">-</span> abDY <span class=\"sy0\">*</span> pqDX<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> determinant <span class=\"sy0\">!==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"br0\">{</span><br/>            nothing<span class=\"sy0\">:</span> <span class=\"kw2\">false</span><span class=\"sy0\">,</span><br/>            just<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">const</span><br/>                    abD <span class=\"sy0\">=</span> ax <span class=\"sy0\">*</span> by <span class=\"sy0\">-</span> ay <span class=\"sy0\">*</span> bx<span class=\"sy0\">,</span><br/>                    pqD <span class=\"sy0\">=</span> px <span class=\"sy0\">*</span> qy <span class=\"sy0\">-</span> py <span class=\"sy0\">*</span> qx<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span> ap<span class=\"br0\">(</span><br/>                    <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">[</span>pq<span class=\"sy0\">,</span> ab<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>                        <span class=\"br0\">(</span>abD <span class=\"sy0\">*</span> pq <span class=\"sy0\">-</span> ab <span class=\"sy0\">*</span> pqD<span class=\"br0\">)</span> <span class=\"sy0\">/</span> determinant<br/>                    <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><br/>                        <span class=\"br0\">[</span>pqDX<span class=\"sy0\">,</span> abDX<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                        <span class=\"br0\">[</span>pqDY<span class=\"sy0\">,</span> abDY<span class=\"br0\">]</span><br/>                    <span class=\"br0\">]</span><br/>                <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">{</span><br/>            nothing<span class=\"sy0\">:</span> <span class=\"kw2\">true</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// GENERIC FUNCTIONS ------------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// A list of functions applied to a list of arguments</span><br/>    <span class=\"co1\">// &lt;*&gt;\u00a0:: [(a -&gt; b)] -&gt; [a] -&gt; [b]</span><br/>    <span class=\"kw1\">const</span> ap <span class=\"sy0\">=</span> <span class=\"br0\">(</span>fs<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"co1\">//</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> fs.<span class=\"me1\">map</span><span class=\"br0\">(</span>f <span class=\"sy0\">=&gt;</span> <span class=\"co1\">//</span><br/>            <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// show\u00a0:: a -&gt; String</span><br/>    <span class=\"kw1\">const</span> show <span class=\"sy0\">=</span> x <span class=\"sy0\">=&gt;</span> JSON.<span class=\"me1\">stringify</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//, null, 2);</span><br/>\u00a0<br/>    <span class=\"co1\">// TEST -------------------------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// ab\u00a0:: Line</span><br/>    <span class=\"kw1\">const</span> ab <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">4.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">6.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">10.0</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// pq\u00a0:: Line</span><br/>    <span class=\"kw1\">const</span> pq <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3.0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">10.0</span><span class=\"sy0\">,</span> <span class=\"nu0\">7.0</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// intersection\u00a0:: Maybe Point</span><br/>    <span class=\"kw1\">const</span> intersection <span class=\"sy0\">=</span> maybeIntersection<span class=\"br0\">(</span>ab<span class=\"sy0\">,</span> pq<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> intersection.<span class=\"me1\">nothing</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>        <span class=\"st0\">'(Parallel lines \u2013 no intersection)'</span><br/>    <span class=\"br0\">)</span> <span class=\"sy0\">:</span> show<span class=\"br0\">(</span>intersection.<span class=\"me1\">just</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 22, "block": "<pre class=\"text highlighted_source\"># determinant of 2x2 matrix<br/>def det(a;b;c;d): a*d - b*c\u00a0;<br/>\u00a0<br/># Input: an array representing a line (L1)<br/># Output: the intersection of L1 and L2 unless the lines are judged to be parallel<br/># This implementation uses \"destructuring\" to assign local variables<br/>def lineIntersection(L2):<br/>  .    as [[$ax,$ay], [$bx,$by]]<br/>  | L2 as [[$cx,$cy], [$dx,$dy]]<br/>  | {detAB: det($ax;$ay; $bx;$by),<br/>     detCD: det($cx;$cy; $dx;$dy),<br/>     abDx: ($ax - $bx),<br/>     cdDx: ($cx - $dx),<br/>     abDy: ($ay - $by),<br/>     cdDy: ($cy - $dy)}<br/>  | . + {xnom:  det(.detAB;.abDx;.detCD;.cdDx),<br/>         ynom:  det(.detAB;.abDy;.detCD;.cdDy),<br/>         denom: det(.abDx; .abDy;.cdDx; .cdDy) }<br/>  | if (.denom|length &lt; 10e-6)  # length/0 emits the absolute value<br/>    then error(\"lineIntersect: parallel lines\")<br/>    else [.xnom/.denom, .ynom/.denom]<br/>    end\u00a0;</pre>"}, {"lang": "Julia", "loc": 31, "block": "<pre class=\"text highlighted_source\">struct Point{T}<br/>    x::T<br/>    y::T<br/>end<br/>\u00a0<br/>struct Line{T}<br/>    s::Point{T}<br/>    e::Point{T}<br/>end<br/>\u00a0<br/>function intersection(l1::Line{T}, l2::Line{T}) where T&lt;:Real<br/>    a1 = l1.e.y - l1.s.y<br/>    b1 = l1.s.x - l1.e.x<br/>    c1 = a1 * l1.s.x + b1 * l1.s.y<br/>\u00a0<br/>    a2 = l2.e.y - l2.s.y<br/>    b2 = l2.s.x - l2.e.x<br/>    c2 = a2 * l2.s.x + b2 * l2.s.y<br/>\u00a0<br/>    \u0394 = a1 * b2 - a2 * b1<br/>    # If lines are parallel, intersection point will contain infinite values<br/>    return Point((b2 * c1 - b1 * c2) / \u0394, (a1 * c2 - a2 * c1) / \u0394)<br/>end<br/>\u00a0<br/>l1 = Line(Point{Float64}(4, 0), Point{Float64}(6, 10))<br/>l2 = Line(Point{Float64}(0, 3), Point{Float64}(10, 7))<br/>println(intersection(l1, l2))<br/>\u00a0<br/>l1 = Line(Point{Float64}(0, 0), Point{Float64}(1, 1))<br/>l2 = Line(Point{Float64}(1, 2), Point{Float64}(4, 5))<br/>println(intersection(l1, l2))</pre>"}, {"lang": "Kotlin", "loc": 30, "block": "<pre class=\"text highlighted_source\">// version 1.1.2<br/>\u00a0<br/>class PointF(val x: Float, val y: Float) {<br/>    override fun toString() = \"{$x, $y}\"<br/>}<br/>\u00a0<br/>class LineF(val s: PointF, val e: PointF)<br/>\u00a0<br/>fun findIntersection(l1: LineF, l2: LineF): PointF {<br/>    val a1 = l1.e.y - l1.s.y<br/>    val b1 = l1.s.x - l1.e.x<br/>    val c1 = a1 * l1.s.x + b1 * l1.s.y<br/>\u00a0<br/>    val a2 = l2.e.y - l2.s.y<br/>    val b2 = l2.s.x - l2.e.x<br/>    val c2 = a2 * l2.s.x + b2 * l2.s.y<br/>\u00a0<br/>    val delta = a1 * b2 - a2 * b1<br/>    // If lines are parallel, intersection point will contain infinite values<br/>    return PointF((b2 * c1 - b1 * c2) / delta, (a1 * c2 - a2 * c1) / delta)<br/>}<br/>\u00a0<br/>fun main(args: Array&lt;String&gt;) {<br/>    var l1 = LineF(PointF(4f, 0f), PointF(6f, 10f))<br/>    var l2 = LineF(PointF(0f, 3f), PointF(10f, 7f))<br/>    println(findIntersection(l1, l2))<br/>    l1 = LineF(PointF(0f, 0f), PointF(1f, 1f))<br/>    l2 = LineF(PointF(1f, 2f), PointF(4f, 5f))<br/>    println(findIntersection(l1, l2))<br/>}</pre>"}, {"lang": "Lua", "loc": 12, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> intersection <span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> e1<span class=\"sy0\">,</span> s2<span class=\"sy0\">,</span> e2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> d <span class=\"sy0\">=</span> <span class=\"br0\">(</span>s1<span class=\"sy0\">.</span>x <span class=\"sy0\">-</span> e1<span class=\"sy0\">.</span>x<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>s2<span class=\"sy0\">.</span>y <span class=\"sy0\">-</span> e2<span class=\"sy0\">.</span>y<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>s1<span class=\"sy0\">.</span>y <span class=\"sy0\">-</span> e1<span class=\"sy0\">.</span>y<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>s2<span class=\"sy0\">.</span>x <span class=\"sy0\">-</span> e2<span class=\"sy0\">.</span>x<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> a <span class=\"sy0\">=</span> s1<span class=\"sy0\">.</span>x <span class=\"sy0\">*</span> e1<span class=\"sy0\">.</span>y <span class=\"sy0\">-</span> s1<span class=\"sy0\">.</span>y <span class=\"sy0\">*</span> e1<span class=\"sy0\">.</span>x<br/>  <span class=\"kw1\">local</span> b <span class=\"sy0\">=</span> s2<span class=\"sy0\">.</span>x <span class=\"sy0\">*</span> e2<span class=\"sy0\">.</span>y <span class=\"sy0\">-</span> s2<span class=\"sy0\">.</span>y <span class=\"sy0\">*</span> e2<span class=\"sy0\">.</span>x<br/>  <span class=\"kw1\">local</span> x <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">*</span> <span class=\"br0\">(</span>s2<span class=\"sy0\">.</span>x <span class=\"sy0\">-</span> e2<span class=\"sy0\">.</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>s1<span class=\"sy0\">.</span>x <span class=\"sy0\">-</span> e1<span class=\"sy0\">.</span>x<span class=\"br0\">)</span> <span class=\"sy0\">*</span> b<span class=\"br0\">)</span> <span class=\"sy0\">/</span> d<br/>  <span class=\"kw1\">local</span> y <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">*</span> <span class=\"br0\">(</span>s2<span class=\"sy0\">.</span>y <span class=\"sy0\">-</span> e2<span class=\"sy0\">.</span>y<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span>s1<span class=\"sy0\">.</span>y <span class=\"sy0\">-</span> e1<span class=\"sy0\">.</span>y<span class=\"br0\">)</span> <span class=\"sy0\">*</span> b<span class=\"br0\">)</span> <span class=\"sy0\">/</span> d<br/>  <span class=\"kw1\">return</span> x<span class=\"sy0\">,</span> y<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> line1start<span class=\"sy0\">,</span> line1end <span class=\"sy0\">=</span> <span class=\"br0\">{</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"br0\">}</span><br/><span class=\"kw1\">local</span> line2start<span class=\"sy0\">,</span> line2end <span class=\"sy0\">=</span> <span class=\"br0\">{</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span>x <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>intersection<span class=\"br0\">(</span>line1start<span class=\"sy0\">,</span> line1end<span class=\"sy0\">,</span> line2start<span class=\"sy0\">,</span> line2end<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 4, "block": "<pre class=\"text highlighted_source\">with(geometry):<br/>line(L1, [point(A,[4,0]), point(B,[6,10])]):<br/>line(L2, [point(C,[0,3]), point(E,[10,7])]):<br/>coordinates(intersection(x,L1,L2));</pre>"}, {"lang": "MATLAB", "loc": 7, "block": "<pre class=\"matlab highlighted_source\">\u00a0<br/><span class=\"kw1\">function</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/cross.html\"><span class=\"kw2\">cross</span></a>=intersection<span class=\"br0\">(</span>line1,line2<span class=\"br0\">)</span><br/>    a=<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/polyfit.html\"><span class=\"kw2\">polyfit</span></a><span class=\"br0\">(</span>line1<span class=\"br0\">(</span>:,<span class=\"nu0\">1</span><span class=\"br0\">)</span>,line1<span class=\"br0\">(</span>:,<span class=\"nu0\">2</span><span class=\"br0\">)</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>    b=<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/polyfit.html\"><span class=\"kw2\">polyfit</span></a><span class=\"br0\">(</span>line2<span class=\"br0\">(</span>:,<span class=\"nu0\">1</span><span class=\"br0\">)</span>,line2<span class=\"br0\">(</span>:,<span class=\"nu0\">2</span><span class=\"br0\">)</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/cross.html\"><span class=\"kw2\">cross</span></a>=<span class=\"br0\">[</span>a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> -<span class=\"nu0\">1</span>; b<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> -<span class=\"nu0\">1</span><span class=\"br0\">]</span>\\<span class=\"br0\">[</span>-a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;-b<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Modula-2", "loc": 57, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> LineIntersection;<br/><span class=\"kw1\">FROM</span> RealStr <span class=\"kw1\">IMPORT</span> RealToStr;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span><br/>    Point <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>        x<span class=\"sy0\">,</span>y <span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> PrintPoint<span class=\"br0\">(</span>p <span class=\"sy0\">:</span> Point<span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span> buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">31</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\"{\"</span><span class=\"br0\">)</span>;<br/>    RealToStr<span class=\"br0\">(</span>p.x<span class=\"sy0\">,</span> buf<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span>;<br/>    RealToStr<span class=\"br0\">(</span>p.y<span class=\"sy0\">,</span> buf<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\"}\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> PrintPoint;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span><br/>    Line <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>        s<span class=\"sy0\">,</span>e <span class=\"sy0\">:</span> Point;<br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> FindIntersection<span class=\"br0\">(</span>l1<span class=\"sy0\">,</span>l2 <span class=\"sy0\">:</span> Line<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Point;<br/><span class=\"kw1\">VAR</span> a1<span class=\"sy0\">,</span>b1<span class=\"sy0\">,</span>c1<span class=\"sy0\">,</span>a2<span class=\"sy0\">,</span>b2<span class=\"sy0\">,</span>c2<span class=\"sy0\">,</span>delta <span class=\"sy0\">:</span> <span class=\"kw4\">REAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    a1 <span class=\"sy0\">:=</span> l1.e.y <span class=\"sy0\">-</span> l1.s.y;<br/>    b1 <span class=\"sy0\">:=</span> l1.s.x <span class=\"sy0\">-</span> l1.e.x;<br/>    c1 <span class=\"sy0\">:=</span> a1 <span class=\"sy0\">*</span> l1.s.x <span class=\"sy0\">+</span> b1 <span class=\"sy0\">*</span> l1.s.y;<br/>\u00a0<br/>    a2 <span class=\"sy0\">:=</span> l2.e.y <span class=\"sy0\">-</span> l2.s.y;<br/>    b2 <span class=\"sy0\">:=</span> l2.s.x <span class=\"sy0\">-</span> l2.e.x;<br/>    c2 <span class=\"sy0\">:=</span> a2 <span class=\"sy0\">*</span> l2.s.x <span class=\"sy0\">+</span> b2 <span class=\"sy0\">*</span> l2.s.y;<br/>\u00a0<br/>    delta <span class=\"sy0\">:=</span> a1 <span class=\"sy0\">*</span> b2 <span class=\"sy0\">-</span> a2 <span class=\"sy0\">*</span> b1;<br/>    <span class=\"kw1\">RETURN</span> Point<span class=\"br0\">{</span><span class=\"br0\">(</span>b2 <span class=\"sy0\">*</span> c1 <span class=\"sy0\">-</span> b1 <span class=\"sy0\">*</span> c2<span class=\"br0\">)</span> <span class=\"sy0\">/</span> delta<span class=\"sy0\">,</span> <span class=\"br0\">(</span>a1 <span class=\"sy0\">*</span> c2 <span class=\"sy0\">-</span> a2 <span class=\"sy0\">*</span> c1<span class=\"br0\">)</span> <span class=\"sy0\">/</span> delta<span class=\"br0\">}</span>;<br/><span class=\"kw1\">END</span> FindIntersection;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>    l1<span class=\"sy0\">,</span>l2 <span class=\"sy0\">:</span> Line;<br/>    result <span class=\"sy0\">:</span> Point;<br/><span class=\"kw1\">BEGIN</span><br/>    l1 <span class=\"sy0\">:=</span> Line<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">4.0</span><span class=\"sy0\">,</span><span class=\"nu0\">0.0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">6.0</span><span class=\"sy0\">,</span><span class=\"nu0\">10.0</span><span class=\"br0\">}</span><span class=\"br0\">}</span>;<br/>    l2 <span class=\"sy0\">:=</span> Line<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">0.0</span><span class=\"sy0\">,</span><span class=\"nu0\">3.0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">10.0</span><span class=\"sy0\">,</span><span class=\"nu0\">7.0</span><span class=\"br0\">}</span><span class=\"br0\">}</span>;<br/>    PrintPoint<span class=\"br0\">(</span>FindIntersection<span class=\"br0\">(</span>l1<span class=\"sy0\">,</span>l2<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    WriteLn;<br/>\u00a0<br/>    l1 <span class=\"sy0\">:=</span> Line<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">0.0</span><span class=\"sy0\">,</span><span class=\"nu0\">0.0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1.0</span><span class=\"sy0\">,</span><span class=\"nu0\">1.0</span><span class=\"br0\">}</span><span class=\"br0\">}</span>;<br/>    l2 <span class=\"sy0\">:=</span> Line<span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">1.0</span><span class=\"sy0\">,</span><span class=\"nu0\">2.0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">4.0</span><span class=\"sy0\">,</span><span class=\"nu0\">5.0</span><span class=\"br0\">}</span><span class=\"br0\">}</span>;<br/>    PrintPoint<span class=\"br0\">(</span>FindIntersection<span class=\"br0\">(</span>l1<span class=\"sy0\">,</span>l2<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    WriteLn;<br/>\u00a0<br/>    ReadChar;<br/><span class=\"kw1\">END</span> LineIntersection.</pre>"}, {"lang": "Perl", "loc": 22, "block": "<pre class=\"perl highlighted_source\">\u00a0<br/><span class=\"kw2\">sub</span> intersect <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x1</span><span class=\"sy0\">,</span> <span class=\"re0\">$y1</span><span class=\"sy0\">,</span> <span class=\"re0\">$x2</span><span class=\"sy0\">,</span> <span class=\"re0\">$y2</span><span class=\"sy0\">,</span> <span class=\"re0\">$x3</span><span class=\"sy0\">,</span> <span class=\"re0\">$y3</span><span class=\"sy0\">,</span> <span class=\"re0\">$x4</span><span class=\"sy0\">,</span> <span class=\"re0\">$y4</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$a1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y2</span> <span class=\"sy0\">-</span> <span class=\"re0\">$y1</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$b1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x1</span> <span class=\"sy0\">-</span> <span class=\"re0\">$x2</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$c1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a1</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x1</span> <span class=\"sy0\">+</span> <span class=\"re0\">$b1</span> <span class=\"sy0\">*</span> <span class=\"re0\">$y1</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$a2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$y4</span> <span class=\"sy0\">-</span> <span class=\"re0\">$y3</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$b2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x3</span> <span class=\"sy0\">-</span> <span class=\"re0\">$x4</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$c2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x3</span> <span class=\"sy0\">+</span> <span class=\"re0\">$b2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$y3</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$delta</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a1</span> <span class=\"sy0\">*</span> <span class=\"re0\">$b2</span> <span class=\"sy0\">-</span> <span class=\"re0\">$a2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$b1</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$delta</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\"># If delta is 0, i.e. lines are parallel then the below will fail</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$ix</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$b2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$c1</span> <span class=\"sy0\">-</span> <span class=\"re0\">$b1</span> <span class=\"sy0\">*</span> <span class=\"re0\">$c2</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"re0\">$delta</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$iy</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$a1</span> <span class=\"sy0\">*</span> <span class=\"re0\">$c2</span> <span class=\"sy0\">-</span> <span class=\"re0\">$a2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$c1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"re0\">$delta</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"re0\">$ix</span><span class=\"sy0\">,</span> <span class=\"re0\">$iy</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$ix</span><span class=\"sy0\">,</span> <span class=\"re0\">$iy</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> intersect<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$ix $iy<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">(</span><span class=\"re0\">$ix</span><span class=\"sy0\">,</span> <span class=\"re0\">$iy</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> intersect<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$ix $iy<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 26, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> intersection <span class=\"br0\">(</span>Real <span class=\"re0\">$ax</span><span class=\"sy0\">,</span> Real <span class=\"re0\">$ay</span><span class=\"sy0\">,</span> Real <span class=\"re0\">$bx</span><span class=\"sy0\">,</span> Real <span class=\"re0\">$by</span><span class=\"sy0\">,</span><br/>                  Real <span class=\"re0\">$cx</span><span class=\"sy0\">,</span> Real <span class=\"re0\">$cy</span><span class=\"sy0\">,</span> Real <span class=\"re0\">$dx</span><span class=\"sy0\">,</span> Real <span class=\"re0\">$dy</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> term<span class=\"sy0\">:&lt;|</span>AB<span class=\"sy0\">|&gt;</span> <span class=\"br0\">{</span> determinate<span class=\"br0\">(</span><span class=\"re0\">$ax</span><span class=\"sy0\">,</span> <span class=\"re0\">$ay</span><span class=\"sy0\">,</span> <span class=\"re0\">$bx</span><span class=\"sy0\">,</span> <span class=\"re0\">$by</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">sub</span> term<span class=\"sy0\">:&lt;|</span>CD<span class=\"sy0\">|&gt;</span> <span class=\"br0\">{</span> determinate<span class=\"br0\">(</span><span class=\"re0\">$cx</span><span class=\"sy0\">,</span> <span class=\"re0\">$cy</span><span class=\"sy0\">,</span> <span class=\"re0\">$dx</span><span class=\"sy0\">,</span> <span class=\"re0\">$dy</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> $\u0394xAB <span class=\"sy0\">=</span> <span class=\"re0\">$ax</span> <span class=\"sy0\">-</span> <span class=\"re0\">$bx</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> $\u0394yAB <span class=\"sy0\">=</span> <span class=\"re0\">$ay</span> <span class=\"sy0\">-</span> <span class=\"re0\">$by</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> $\u0394xCD <span class=\"sy0\">=</span> <span class=\"re0\">$cx</span> <span class=\"sy0\">-</span> <span class=\"re0\">$dx</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> $\u0394yCD <span class=\"sy0\">=</span> <span class=\"re0\">$cy</span> <span class=\"sy0\">-</span> <span class=\"re0\">$dy</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$x</span><span class=\"sy0\">-</span><span class=\"kw3\">numerator</span> <span class=\"sy0\">=</span> determinate<span class=\"br0\">(</span> <span class=\"sy0\">|</span>AB<span class=\"sy0\">|,</span> $\u0394xAB<span class=\"sy0\">,</span> <span class=\"sy0\">|</span>CD<span class=\"sy0\">|,</span> $\u0394xCD <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$y</span><span class=\"sy0\">-</span><span class=\"kw3\">numerator</span> <span class=\"sy0\">=</span> determinate<span class=\"br0\">(</span> <span class=\"sy0\">|</span>AB<span class=\"sy0\">|,</span> $\u0394yAB<span class=\"sy0\">,</span> <span class=\"sy0\">|</span>CD<span class=\"sy0\">|,</span> $\u0394yCD <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$denominator</span> <span class=\"sy0\">=</span> determinate<span class=\"br0\">(</span> $\u0394xAB<span class=\"sy0\">,</span> $\u0394yAB<span class=\"sy0\">,</span> $\u0394xCD<span class=\"sy0\">,</span> $\u0394yCD <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"st_h\">'Lines are parallel'</span> <span class=\"kw1\">if</span> <span class=\"re0\">$denominator</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">-</span><span class=\"kw3\">numerator</span><span class=\"sy0\">/</span><span class=\"re0\">$denominator</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">-</span><span class=\"kw3\">numerator</span><span class=\"sy0\">/</span><span class=\"re0\">$denominator</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> determinate <span class=\"br0\">(</span> Real <span class=\"re0\">$a</span><span class=\"sy0\">,</span> Real <span class=\"re0\">$b</span><span class=\"sy0\">,</span> Real <span class=\"re0\">$c</span><span class=\"sy0\">,</span> Real <span class=\"re0\">$d</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$a</span> <span class=\"sy0\">*</span> <span class=\"re0\">$d</span> <span class=\"sy0\">-</span> <span class=\"re0\">$b</span> <span class=\"sy0\">*</span> <span class=\"re0\">$c</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># TESTING</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'Intersection point: '</span><span class=\"sy0\">,</span> intersection<span class=\"br0\">(</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'Intersection point: '</span><span class=\"sy0\">,</span> intersection<span class=\"br0\">(</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">7.1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'Intersection point: '</span><span class=\"sy0\">,</span> intersection<span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Python", "loc": 7, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">__future__</span> <span class=\"kw1\">import</span> print_function<br/><span class=\"kw1\">from</span> shapely.<span class=\"me1\">geometry</span> <span class=\"kw1\">import</span> LineString<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__<span class=\"sy0\">==</span><span class=\"st0\">\"__main__\"</span>:<br/>\tline1 <span class=\"sy0\">=</span> LineString<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">4.0</span><span class=\"sy0\">,</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">6.0</span><span class=\"sy0\">,</span><span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\tline2 <span class=\"sy0\">=</span> LineString<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">0.0</span><span class=\"sy0\">,</span><span class=\"nu0\">3.0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">10.0</span><span class=\"sy0\">,</span><span class=\"nu0\">7.0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">print</span> <span class=\"br0\">(</span>line1.<span class=\"me1\">intersection</span><span class=\"br0\">(</span>line2<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 19, "block": "<pre class=\"text highlighted_source\">#lang racket/base<br/>(define (det a b c d) (- (* a d) (* b c)))\u00a0; determinant<br/>\u00a0<br/>(define (line-intersect ax ay bx by cx cy dx dy)\u00a0; --&gt; (values x y)<br/>  (let* ((det.ab (det ax ay bx by))<br/>         (det.cd (det cx cy dx dy))<br/>         (ab\u0394x (- ax bx))<br/>         (cd\u0394x (- cx dx))<br/>         (ab\u0394y (- ay by))<br/>         (cd\u0394y (- cy dy))<br/>         (xnom (det det.ab ab\u0394x det.cd cd\u0394x))<br/>         (ynom (det det.ab ab\u0394y det.cd cd\u0394y))<br/>         (denom (det ab\u0394x ab\u0394y cd\u0394x cd\u0394y)))<br/>    (when (zero? denom)<br/>      (error 'line-intersect \"parallel lines\"))<br/>    (values (/ xnom denom) (/ ynom denom))))<br/>\u00a0<br/>(module+ test (line-intersect 4 0 6 10<br/>                              0 3 10 7))</pre>"}, {"lang": "REXX", "loc": 17, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX */</span><br/><span class=\"kw1\">Parse</span> <span class=\"kw2\">Value</span> <span class=\"st0\">'(4.0,0.0)'</span>  <span class=\"kw2\">With</span> <span class=\"st0\">'('</span> xa <span class=\"st0\">','</span> ya <span class=\"st0\">')'</span><br/><span class=\"kw1\">Parse</span> <span class=\"kw2\">Value</span> <span class=\"st0\">'(6.0,10.0)'</span> <span class=\"kw2\">With</span> <span class=\"st0\">'('</span> xb <span class=\"st0\">','</span> yb <span class=\"st0\">')'</span><br/><span class=\"kw1\">Parse</span> <span class=\"kw2\">Value</span> <span class=\"st0\">'(0.0,3.0)'</span>  <span class=\"kw2\">With</span> <span class=\"st0\">'('</span> xc <span class=\"st0\">','</span> yc <span class=\"st0\">')'</span><br/><span class=\"kw1\">Parse</span> <span class=\"kw2\">Value</span> <span class=\"st0\">'(10.0,7.0)'</span> <span class=\"kw2\">With</span> <span class=\"st0\">'('</span> xd <span class=\"st0\">','</span> yd <span class=\"st0\">')'</span><br/>\u00a0<br/><span class=\"kw1\">Say</span> <span class=\"st0\">'The two lines are:'</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'yab='</span>ya-xa<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yb-ya<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>xb-xa<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"st0\">'+x*'</span><span class=\"sy0\">||</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yb-ya<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>xb-xa<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'ycd='</span>yc-xc<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yd-yc<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>xd-xc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"st0\">'+x*'</span><span class=\"sy0\">||</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yd-yc<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>xd-xc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>x=<span class=\"br0\">(</span><span class=\"br0\">(</span>yc-xc<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yd-yc<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>xd-xc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>-<span class=\"br0\">(</span>ya-xa<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yb-ya<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>xb-xa<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>,<br/>                         <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yb-ya<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>xb-xa<span class=\"br0\">)</span><span class=\"br0\">)</span>-<span class=\"br0\">(</span><span class=\"br0\">(</span>yd-yc<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>xd-xc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'x='</span><span class=\"sy0\">||</span>x<br/>        y=ya-xa<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yb-ya<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>xb-xa<span class=\"br0\">)</span><span class=\"br0\">)</span>+x<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yb-ya<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>xb-xa<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'yab='</span>y<br/><span class=\"kw1\">Say</span> <span class=\"st0\">'ycd='</span>yc-xc<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yd-yc<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>xd-xc<span class=\"br0\">)</span><span class=\"br0\">)</span>+x<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>yd-yc<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>xd-xc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'Intersection: ('</span><span class=\"sy0\">||</span>x<span class=\"st0\">','</span>y<span class=\"st0\">')'</span></pre>"}, {"lang": "Ring", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Find the intersection of two lines<br/>\u00a0<br/>xa=4<br/>ya=0<br/>xb=6<br/>yb=10<br/>xc=0<br/>yc=3<br/>xd=10<br/>yd=7<br/>see \"the two lines are:\" + nl<br/>see \"yab=\" + (ya-xa*((yb-ya)/(xb-xa))) + \"+x*\" + ((yb-ya)/(xb-xa)) + nl<br/>see \"ycd=\" + (yc-xc*((yd-yc)/(xd-xc))) + \"+x*\" + ((yd-yc)/(xd-xc)) + nl<br/>x=((yc-xc*((yd-yc)/(xd-xc)))-(ya-xa*((yb-ya)/(xb-xa))))/(((yb-ya)/(xb-xa))-((yd-yc)/(xd-xc)))<br/>see \"x=\" + x + nl<br/>y=ya-xa*((yb-ya)/(xb-xa))+x*((yb-ya)/(xb-xa))<br/>see \"yab=\" + y + nl<br/>see \"ycd=\" + (yc-xc*((yd-yc)/(xd-xc))+x*((yd-yc)/(xd-xc))) + nl<br/>see \"intersection: \" + x + \",\" + y + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 28, "block": "<pre class=\"ruby highlighted_source\">Point = <span class=\"kw4\">Struct</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"re3\">:x</span>, <span class=\"re3\">:y</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Line<br/>  attr_reader <span class=\"re3\">:a</span>, <span class=\"re3\">:b</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>point1, point2<span class=\"br0\">)</span><br/>    <span class=\"re1\">@a</span> = <span class=\"br0\">(</span>point1.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> point2.<span class=\"me1\">y</span><span class=\"br0\">)</span>.<span class=\"me1\">fdiv</span><span class=\"br0\">(</span>point1.<span class=\"me1\">x</span> <span class=\"sy0\">-</span> point2.<span class=\"me1\">x</span><span class=\"br0\">)</span><br/>    <span class=\"re1\">@b</span> = point1.<span class=\"me1\">y</span> <span class=\"sy0\">-</span> <span class=\"re1\">@a</span><span class=\"sy0\">*</span>point1.<span class=\"me1\">x</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> intersect<span class=\"br0\">(</span>other<span class=\"br0\">)</span><br/>    <span class=\"kw2\">return</span> <span class=\"kw2\">nil</span> <span class=\"kw1\">if</span> <span class=\"re1\">@a</span> == other.<span class=\"me1\">a</span><br/>    x = <span class=\"br0\">(</span>other.<span class=\"me1\">b</span> <span class=\"sy0\">-</span> <span class=\"re1\">@b</span><span class=\"br0\">)</span>.<span class=\"me1\">fdiv</span><span class=\"br0\">(</span>@a <span class=\"sy0\">-</span> other.<span class=\"me1\">a</span><span class=\"br0\">)</span><br/>    y = <span class=\"re1\">@a</span><span class=\"sy0\">*</span>x <span class=\"sy0\">+</span> <span class=\"re1\">@b</span><br/>    Point.<span class=\"me1\">new</span><span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> to_s<br/>    <span class=\"st0\">\"y = #{@a}x + #{@b}\"</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>l1 = Line.<span class=\"me1\">new</span><span class=\"br0\">(</span>Point.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>, Point.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>l2 = Line.<span class=\"me1\">new</span><span class=\"br0\">(</span>Point.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>, Point.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"Line #{l1} intersects line #{l2} at #{l1.intersect(l2)}.\"</span><br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 30, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Intersection <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>l1, l2<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>LineF<span class=\"br0\">(</span>PointF<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>, PointF<span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, LineF<span class=\"br0\">(</span>PointF<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>, PointF<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> findIntersection<span class=\"br0\">(</span>l1<span class=\"sy0\">:</span> LineF, l2<span class=\"sy0\">:</span> LineF<span class=\"br0\">)</span><span class=\"sy0\">:</span> PointF <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a1 <span class=\"sy0\">=</span> l1.<span class=\"me1\">e</span>.<span class=\"me1\">y</span> - l1.<span class=\"me1\">s</span>.<span class=\"me1\">y</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b1 <span class=\"sy0\">=</span> l1.<span class=\"me1\">s</span>.<span class=\"me1\">x</span> - l1.<span class=\"me1\">e</span>.<span class=\"me1\">x</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c1 <span class=\"sy0\">=</span> a1 <span class=\"sy0\">*</span> l1.<span class=\"me1\">s</span>.<span class=\"me1\">x</span> + b1 <span class=\"sy0\">*</span> l1.<span class=\"me1\">s</span>.<span class=\"me1\">y</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a2 <span class=\"sy0\">=</span> l2.<span class=\"me1\">e</span>.<span class=\"me1\">y</span> - l2.<span class=\"me1\">s</span>.<span class=\"me1\">y</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b2 <span class=\"sy0\">=</span> l2.<span class=\"me1\">s</span>.<span class=\"me1\">x</span> - l2.<span class=\"me1\">e</span>.<span class=\"me1\">x</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c2 <span class=\"sy0\">=</span> a2 <span class=\"sy0\">*</span> l2.<span class=\"me1\">s</span>.<span class=\"me1\">x</span> + b2 <span class=\"sy0\">*</span> l2.<span class=\"me1\">s</span>.<span class=\"me1\">y</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> delta <span class=\"sy0\">=</span> a1 <span class=\"sy0\">*</span> b2 - a2 <span class=\"sy0\">*</span> b1<br/>    <span class=\"co1\">// If lines are parallel, intersection point will contain infinite values</span><br/>    PointF<span class=\"br0\">(</span><span class=\"br0\">(</span>b2 <span class=\"sy0\">*</span> c1 - b1 <span class=\"sy0\">*</span> c2<span class=\"br0\">)</span> / delta, <span class=\"br0\">(</span>a1 <span class=\"sy0\">*</span> c2 - a2 <span class=\"sy0\">*</span> c1<span class=\"br0\">)</span> / delta<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> l01 <span class=\"sy0\">=</span> LineF<span class=\"br0\">(</span>PointF<span class=\"br0\">(</span>0f, 0f<span class=\"br0\">)</span>, PointF<span class=\"br0\">(</span>1f, 1f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> l02 <span class=\"sy0\">=</span> LineF<span class=\"br0\">(</span>PointF<span class=\"br0\">(</span>1f, 2f<span class=\"br0\">)</span>, PointF<span class=\"br0\">(</span>4f, 5f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> PointF<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Float, y<span class=\"sy0\">:</span> Float<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString <span class=\"sy0\">=</span> s<span class=\"st0\">\"{$x, $y}\"</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> LineF<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> PointF, e<span class=\"sy0\">:</span> PointF<span class=\"br0\">)</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>findIntersection<span class=\"br0\">(</span>l1, l2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>findIntersection<span class=\"br0\">(</span>l01, l02<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 24, "block": "<pre class=\"ruby highlighted_source\">func det<span class=\"br0\">(</span>a, b, c, d<span class=\"br0\">)</span> <span class=\"br0\">{</span> a<span class=\"sy0\">*</span>d <span class=\"sy0\">-</span> b<span class=\"sy0\">*</span>c <span class=\"br0\">}</span><br/>\u00a0<br/>func intersection<span class=\"br0\">(</span>ax, ay, bx, by,<br/>                  cx, cy, dx, dy<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    var detAB = det<span class=\"br0\">(</span>ax,ay, bx,by<span class=\"br0\">)</span><br/>    var detCD = det<span class=\"br0\">(</span>cx,cy, dx,dy<span class=\"br0\">)</span><br/>\u00a0<br/>    var \u0394xAB = <span class=\"br0\">(</span>ax <span class=\"sy0\">-</span> bx<span class=\"br0\">)</span><br/>    var \u0394yAB = <span class=\"br0\">(</span>ay <span class=\"sy0\">-</span> by<span class=\"br0\">)</span><br/>    var \u0394xCD = <span class=\"br0\">(</span>cx <span class=\"sy0\">-</span> dx<span class=\"br0\">)</span><br/>    var \u0394yCD = <span class=\"br0\">(</span>cy <span class=\"sy0\">-</span> dy<span class=\"br0\">)</span><br/>\u00a0<br/>    var x_numerator = det<span class=\"br0\">(</span>detAB, \u0394xAB, detCD, \u0394xCD<span class=\"br0\">)</span><br/>    var y_numerator = det<span class=\"br0\">(</span>detAB, \u0394yAB, detCD, \u0394yCD<span class=\"br0\">)</span><br/>    var denominator = det<span class=\"br0\">(</span> \u0394xAB, \u0394yAB,  \u0394xCD, \u0394yCD<span class=\"br0\">)</span><br/>\u00a0<br/>    denominator == <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> <span class=\"st0\">'lines are parallel'</span><br/>    <span class=\"br0\">[</span>x_numerator <span class=\"sy0\">/</span> denominator, y_numerator <span class=\"sy0\">/</span> denominator<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"br0\">(</span><span class=\"st0\">'Intersection point: '</span>, intersection<span class=\"br0\">(</span><span class=\"nu0\">4</span>,<span class=\"nu0\">0</span>, <span class=\"nu0\">6</span>,<span class=\"nu0\">10</span>, <span class=\"nu0\">0</span>,<span class=\"nu0\">3</span>, <span class=\"nu0\">10</span>,<span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span><span class=\"st0\">'Intersection point: '</span>, intersection<span class=\"br0\">(</span><span class=\"nu0\">4</span>,<span class=\"nu0\">0</span>, <span class=\"nu0\">6</span>,<span class=\"nu0\">10</span>, <span class=\"nu0\">0</span>,<span class=\"nu0\">3</span>, <span class=\"nu0\">10</span>,<span class=\"nu0\">7.1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span><span class=\"st0\">'Intersection point: '</span>, intersection<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>, <span class=\"nu0\">4</span>,<span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "zkl", "loc": 13, "block": "<pre class=\"text highlighted_source\">fcn lineIntersect(ax,ay, bx,by,   cx,cy, dx,dy){\t// --&gt; (x,y)<br/>   detAB,detCD\u00a0:= det(ax,ay, bx,by), det(cx,cy, dx,dy);<br/>   abDx,cdDx\u00a0:= ax - bx, cx - dx;\t// delta x<br/>   abDy,cdDy\u00a0:= ay - by, cy - dy;\t// delta y<br/>\u00a0<br/>   xnom,ynom\u00a0:= det(detAB,abDx, detCD,cdDx), det(detAB,abDy, detCD,cdDy);<br/>   denom    \u00a0:= det(abDx,abDy, cdDx,cdDy);<br/>   if(denom.closeTo(0.0, 0.0001))<br/>      throw(Exception.MathError(\"lineIntersect: Parallel lines\"));<br/>\u00a0<br/>   return(xnom/denom, ynom/denom);<br/>}<br/>fcn det(a,b,c,d){ a*d - b*c }\t// determinant</pre>"}]}