{"task": "Element-wise_operations", "blocks": [{"lang": "Ada", "loc": 31, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Matrix_Scalar;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Scalar_Ops <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> T <span class=\"kw1\">is</span> Integer <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">3</span>;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> M <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Matrix_Scalar<span class=\"br0\">(</span>T, T, Integer<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- the functions to solve the task</span><br/>        <span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span> <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> M.<span class=\"me1\">Func</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw3\">function</span> <span class=\"st0\">\"-\"</span> <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> M.<span class=\"me1\">Func</span><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw3\">function</span> <span class=\"st0\">\"*\"</span> <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> M.<span class=\"me1\">Func</span><span class=\"br0\">(</span><span class=\"st0\">\"*\"</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw3\">function</span> <span class=\"st0\">\"/\"</span> <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> M.<span class=\"me1\">Func</span><span class=\"br0\">(</span><span class=\"st0\">\"/\"</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw3\">function</span> <span class=\"st0\">\"**\"</span> <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> M.<span class=\"me1\">Func</span><span class=\"br0\">(</span><span class=\"st0\">\"**\"</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw3\">function</span> <span class=\"st0\">\"mod\"</span> <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> M.<span class=\"me1\">Func</span><span class=\"br0\">(</span><span class=\"st0\">\"mod\"</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- for output purposes, we need a Matrix-&gt;String conversion</span><br/>        <span class=\"kw3\">function</span> Image <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> M.<span class=\"me1\">Image</span><span class=\"br0\">(</span>Integer'Image<span class=\"br0\">)</span>;<br/>\u00a0<br/>   A: M.<span class=\"me1\">Matrix</span>\u00a0:= <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span>,<span class=\"br0\">(</span><span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">6</span><span class=\"br0\">)</span>,<span class=\"br0\">(</span><span class=\"nu0\">7</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"co1\">-- something to begin with</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"  Initial M=\"</span> &amp; Image<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"        M+2=\"</span> &amp; Image<span class=\"br0\">(</span>A+<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"        M-2=\"</span> &amp; Image<span class=\"br0\">(</span>A-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"        M*2=\"</span> &amp; Image<span class=\"br0\">(</span>A*<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"        M/2=\"</span> &amp; Image<span class=\"br0\">(</span>A/<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"  square(M)=\"</span> &amp; Image<span class=\"br0\">(</span>A ** <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"    M mod 2=\"</span> &amp; Image<span class=\"br0\">(</span>A <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"(M*2) mod 3=\"</span> &amp; Image<span class=\"br0\">(</span><span class=\"br0\">(</span>A*<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Scalar_Ops;</pre>"}, {"lang": "ALGOL 68", "loc": 54, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\">#!/usr/local/bin/a68g --script #</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> SCALAR <span class=\"sy1\">=</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">;</span><br/><span class=\"kw6\">FORMAT</span> scalar fmt <span class=\"sy1\">=</span> $g<span class=\"br0\">(</span>0<span class=\"sy1\">,</span> 2<span class=\"br0\">)</span>$<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> MATRIX <span class=\"sy1\">=</span> <span class=\"br0\">[</span>3<span class=\"sy1\">,</span> 3<span class=\"br0\">]</span>SCALAR<span class=\"sy1\">;</span><br/><span class=\"kw6\">FORMAT</span> vector fmt <span class=\"sy1\">=</span> $<span class=\"st0\">\"(\"</span>n<span class=\"br0\">(</span>2 <span class=\"kw8\">UPB</span> <span class=\"kw4\">LOC</span> MATRIX <span class=\"sy1\">-</span> 2 <span class=\"kw8\">LWB</span> <span class=\"kw4\">LOC</span> MATRIX<span class=\"br0\">)</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span>scalar fmt<span class=\"br0\">)</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span>f<span class=\"br0\">(</span>scalar fmt<span class=\"br0\">)</span><span class=\"st0\">\")\"</span>$<span class=\"sy1\">;</span><br/><span class=\"kw6\">FORMAT</span> matrix fmt <span class=\"sy1\">=</span> $<span class=\"st0\">\"(\"</span>n<span class=\"br0\">(</span>1 <span class=\"kw8\">UPB</span> <span class=\"kw4\">LOC</span> MATRIX <span class=\"sy1\">-</span> 1 <span class=\"kw8\">LWB</span> <span class=\"kw4\">LOC</span> MATRIX<span class=\"br0\">)</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span>vector fmt<span class=\"br0\">)</span><span class=\"st0\">\",\"</span>l<span class=\"st0\">\" \"</span><span class=\"br0\">)</span>f<span class=\"br0\">(</span>vector fmt<span class=\"br0\">)</span><span class=\"st0\">\")\"</span>$<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> elementwise op <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">PROC</span><span class=\"br0\">(</span>SCALAR<span class=\"sy1\">,</span> SCALAR<span class=\"br0\">)</span>SCALAR op<span class=\"sy1\">,</span> MATRIX a<span class=\"sy1\">,</span> <span class=\"kw6\">UNION</span><span class=\"br0\">(</span>SCALAR<span class=\"sy1\">,</span> MATRIX<span class=\"br0\">)</span> b<span class=\"br0\">)</span>MATRIX<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span><span class=\"kw8\">LWB</span> a<span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> a<span class=\"sy1\">,</span> 2 <span class=\"kw8\">LWB</span> a<span class=\"sy1\">:</span>2 <span class=\"kw8\">UPB</span> a<span class=\"br0\">]</span>SCALAR out<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">CASE</span> b <span class=\"kw2\">IN</span><br/>  <span class=\"br0\">(</span>SCALAR b<span class=\"br0\">)</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> out <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> out <span class=\"kw2\">DO</span><br/>      <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> 2 <span class=\"kw8\">LWB</span> out <span class=\"kw2\">TO</span> 2 <span class=\"kw8\">UPB</span> out <span class=\"kw2\">DO</span><br/>        out<span class=\"br0\">[</span>i<span class=\"sy1\">,</span> j<span class=\"br0\">]</span><span class=\"sy1\">:=</span>op<span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"sy1\">,</span> j<span class=\"br0\">]</span><span class=\"sy1\">,</span> b<span class=\"br0\">)</span><br/>      <span class=\"kw2\">OD</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span>MATRIX b<span class=\"br0\">)</span><span class=\"sy1\">:</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> out <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> out <span class=\"kw2\">DO</span><br/>      <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> 2 <span class=\"kw8\">LWB</span> out <span class=\"kw2\">TO</span> 2 <span class=\"kw8\">UPB</span> out <span class=\"kw2\">DO</span><br/>        out<span class=\"br0\">[</span>i<span class=\"sy1\">,</span> j<span class=\"br0\">]</span><span class=\"sy1\">:=</span>op<span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"sy1\">,</span> j<span class=\"br0\">]</span><span class=\"sy1\">,</span> b<span class=\"br0\">[</span>i<span class=\"sy1\">,</span> j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">OD</span><br/>    <span class=\"kw2\">OD</span><br/>  <span class=\"kw2\">ESAC</span><span class=\"sy1\">;</span><br/>  out<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> plus  <span class=\"sy1\">=</span> <span class=\"br0\">(</span>SCALAR a<span class=\"sy1\">,</span> b<span class=\"br0\">)</span>SCALAR<span class=\"sy1\">:</span> a<span class=\"sy1\">+</span>b<span class=\"sy1\">,</span><br/>     minus <span class=\"sy1\">=</span> <span class=\"br0\">(</span>SCALAR a<span class=\"sy1\">,</span> b<span class=\"br0\">)</span>SCALAR<span class=\"sy1\">:</span> a<span class=\"sy1\">-</span>b<span class=\"sy1\">,</span><br/>     times <span class=\"sy1\">=</span> <span class=\"br0\">(</span>SCALAR a<span class=\"sy1\">,</span> b<span class=\"br0\">)</span>SCALAR<span class=\"sy1\">:</span> a<span class=\"sy1\">*</span>b<span class=\"sy1\">,</span><br/>     div   <span class=\"sy1\">=</span> <span class=\"br0\">(</span>SCALAR a<span class=\"sy1\">,</span> b<span class=\"br0\">)</span>SCALAR<span class=\"sy1\">:</span> a<span class=\"sy1\">/</span>b<span class=\"sy1\">,</span><br/>     pow   <span class=\"sy1\">=</span> <span class=\"br0\">(</span>SCALAR a<span class=\"sy1\">,</span> b<span class=\"br0\">)</span>SCALAR<span class=\"sy1\">:</span> a<span class=\"sy1\">**</span>b<span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    SCALAR scalar <span class=\"sy1\">:=</span> 10<span class=\"sy1\">;</span><br/>    MATRIX matrix <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> 7<span class=\"sy1\">,</span> 11<span class=\"sy1\">,</span> 13<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                     <span class=\"br0\">(</span>17<span class=\"sy1\">,</span> 19<span class=\"sy1\">,</span> 23<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                     <span class=\"br0\">(</span>29<span class=\"sy1\">,</span> 31<span class=\"sy1\">,</span> 37<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$f<span class=\"br0\">(</span>matrix fmt<span class=\"br0\">)</span><span class=\"st0\">\";\"</span>l$<span class=\"sy1\">,</span><br/>      elementwise op<span class=\"br0\">(</span>plus<span class=\"sy1\">,</span>  matrix<span class=\"sy1\">,</span> scalar<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      elementwise op<span class=\"br0\">(</span>minus<span class=\"sy1\">,</span> matrix<span class=\"sy1\">,</span> scalar<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      elementwise op<span class=\"br0\">(</span>times<span class=\"sy1\">,</span> matrix<span class=\"sy1\">,</span> scalar<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      elementwise op<span class=\"br0\">(</span>div<span class=\"sy1\">,</span>   matrix<span class=\"sy1\">,</span> scalar<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      elementwise op<span class=\"br0\">(</span>pow<span class=\"sy1\">,</span>   matrix<span class=\"sy1\">,</span> scalar<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/>      elementwise op<span class=\"br0\">(</span>plus<span class=\"sy1\">,</span>  matrix<span class=\"sy1\">,</span> matrix<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      elementwise op<span class=\"br0\">(</span>minus<span class=\"sy1\">,</span> matrix<span class=\"sy1\">,</span> matrix<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      elementwise op<span class=\"br0\">(</span>times<span class=\"sy1\">,</span> matrix<span class=\"sy1\">,</span> matrix<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      elementwise op<span class=\"br0\">(</span>div<span class=\"sy1\">,</span>   matrix<span class=\"sy1\">,</span> matrix<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      elementwise op<span class=\"br0\">(</span>pow<span class=\"sy1\">,</span>   matrix<span class=\"sy1\">,</span> matrix<span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "BBC BASIC", "loc": 53, "block": "<pre class=\"text highlighted_source\">      DIM a(1,2), b(1,2), c(1,2)<br/>      a() = 7, 8, 7, 4, 0, 9\u00a0: b() = 4, 5, 1, 6, 2, 1<br/>\u00a0<br/>      REM Matrix-Matrix:<br/>      c() = a() + b()\u00a0: PRINT FNshowmm(a(), \"+\", b(), c())<br/>      c() = a() - b()\u00a0: PRINT FNshowmm(a(), \"-\", b(), c())<br/>      c() = a() * b()\u00a0: PRINT FNshowmm(a(), \"*\", b(), c())<br/>      c() = a() / b()\u00a0: PRINT FNshowmm(a(), \"/\", b(), c())<br/>      PROCpowmm(a(), b(), c())\u00a0: PRINT FNshowmm(a(), \"^\", b(), c()) '<br/>\u00a0<br/>      REM Matrix-Scalar:<br/>      c() = a() + 3\u00a0: PRINT FNshowms(a(), \"+\", 3, c())<br/>      c() = a() - 3\u00a0: PRINT FNshowms(a(), \"-\", 3, c())<br/>      c() = a() * 3\u00a0: PRINT FNshowms(a(), \"*\", 3, c())<br/>      c() = a() / 3\u00a0: PRINT FNshowms(a(), \"/\", 3, c())<br/>      PROCpowms(a(), 3, c())\u00a0: PRINT FNshowms(a(), \"^\", 3, c())<br/>      END<br/>\u00a0<br/>      DEF PROCpowmm(a(), b(), c())<br/>      LOCAL i%, j%<br/>      FOR i% = 0 TO DIM(a(),1)<br/>        FOR j% = 0 TO DIM(a(),2)<br/>          c(i%,j%) = a(i%,j%) ^ b(i%,j%)<br/>        NEXT<br/>      NEXT<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCpowms(a(), b, c())<br/>      LOCAL i%, j%<br/>      FOR i% = 0 TO DIM(a(),1)<br/>        FOR j% = 0 TO DIM(a(),2)<br/>          c(i%,j%) = a(i%,j%) ^ b<br/>        NEXT<br/>      NEXT<br/>      ENDPROC<br/>\u00a0<br/>      DEF FNshowmm(a(), op$, b(), c())<br/>      = FNlist(a()) + \" \" + op$ + \" \" + FNlist(b()) + \" = \" + FNlist(c())<br/>\u00a0<br/>      DEF FNshowms(a(), op$, b, c())<br/>      = FNlist(a()) + \" \" + op$ + \" \" + STR$(b) + \" = \" + FNlist(c())<br/>\u00a0<br/>      DEF FNlist(a())<br/>      LOCAL i%, j%, a$<br/>      a$ = \"[\"<br/>      FOR i% = 0 TO DIM(a(),1)<br/>        a$ += \"[\"<br/>        FOR j% = 0 TO DIM(a(),2)<br/>          a$ += STR$(a(i%,j%)) + \", \"<br/>        NEXT<br/>        a$ = LEFT$(LEFT$(a$)) + \"]\"<br/>      NEXT<br/>      = a$ + \"]\"</pre>"}, {"lang": "C", "loc": 14, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define for_i for(i = 0; i &lt; h; i++)</span><br/><span class=\"co2\">#define for_j for(j = 0; j &lt; w; j++)</span><br/><span class=\"co2\">#define _M double**</span><br/><span class=\"co2\">#define OPM(name, _op_) \\<br/>\tvoid eop_##name(_M a, _M b, _M c, int w, int h){int i,j;\\<br/>\t\tfor_i for_j c[i][j] = a[i][j] _op_ b[i][j];}</span><br/>OPM<span class=\"br0\">(</span>add<span class=\"sy0\">,</span> <span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>OPM<span class=\"br0\">(</span>sub<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>OPM<span class=\"br0\">(</span>mul<span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>OPM<span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/div.html\"><span class=\"kw3\">div</span></a><span class=\"sy0\">,</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#define OPS(name, res) \\<br/>\tvoid eop_s_##name(_M a, double s, _M b, int w, int h) {double x;int i,j;\\<br/>\t\tfor_i for_j {x = a[i][j]; b[i][j] = res;}}</span><br/>OPS<span class=\"br0\">(</span>mul<span class=\"sy0\">,</span> x<span class=\"sy0\">*</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span>OPS<span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/div.html\"><span class=\"kw3\">div</span></a><span class=\"sy0\">,</span> x<span class=\"sy0\">/</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span>OPS<span class=\"br0\">(</span>add<span class=\"sy0\">,</span> x<span class=\"sy0\">+</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span>OPS<span class=\"br0\">(</span>sub<span class=\"sy0\">,</span> x<span class=\"sy0\">-</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span>OPS<span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "C#", "loc": 85, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> ElementWiseOperations<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">readonly</span> Dictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span>, Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span>, <span class=\"kw4\">double</span>, <span class=\"kw4\">double</span><span class=\"sy0\">&gt;&gt;</span> operations <span class=\"sy0\">=</span><br/>        <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Dictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span>, Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span>, <span class=\"kw4\">double</span>, <span class=\"kw4\">double</span><span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"br0\">{</span> <span class=\"st0\">\"add\"</span>, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">+</span> b <span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span> <span class=\"st0\">\"sub\"</span>, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-</span> b <span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span> <span class=\"st0\">\"mul\"</span>, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">*</span> b <span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span> <span class=\"st0\">\"div\"</span>, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">/</span> b <span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span> <span class=\"st0\">\"pow\"</span>, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">readonly</span> Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span>, <span class=\"kw4\">double</span>, <span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span> nothing <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> DoOperation<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> m, <span class=\"kw4\">string</span> name, <span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> other<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        DoOperation<span class=\"br0\">(</span>m, operations<span class=\"sy0\">.</span><span class=\"me1\">TryGetValue</span><span class=\"br0\">(</span>name, <span class=\"kw1\">out</span> <span class=\"kw1\">var</span> operation<span class=\"br0\">)</span> <span class=\"sy0\">?</span> operation <span class=\"sy0\">:</span> nothing, other<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> DoOperation<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> m, Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span>, <span class=\"kw4\">double</span>, <span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span> operation, <span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> other<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>m <span class=\"sy0\">==</span> <span class=\"kw1\">null</span> <span class=\"sy0\">||</span> other <span class=\"sy0\">==</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentNullException<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> rows <span class=\"sy0\">=</span> m<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, columns <span class=\"sy0\">=</span> m<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rows <span class=\"sy0\">!=</span> other<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> columns <span class=\"sy0\">!=</span> other<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Matrices have different dimensions.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> result <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span>rows, columns<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> rows<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> columns<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                result<span class=\"br0\">[</span>r, c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> operation<span class=\"br0\">(</span>m<span class=\"br0\">[</span>r, c<span class=\"br0\">]</span>, other<span class=\"br0\">[</span>r, c<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> DoOperation<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> m, <span class=\"kw4\">string</span> name, <span class=\"kw4\">double</span> number<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        DoOperation<span class=\"br0\">(</span>m, operations<span class=\"sy0\">.</span><span class=\"me1\">TryGetValue</span><span class=\"br0\">(</span>name, <span class=\"kw1\">out</span> <span class=\"kw1\">var</span> operation<span class=\"br0\">)</span> <span class=\"sy0\">?</span> operation <span class=\"sy0\">:</span> nothing, number<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> DoOperation<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> m, Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">double</span>, <span class=\"kw4\">double</span>, <span class=\"kw4\">double</span><span class=\"sy0\">&gt;</span> operation, <span class=\"kw4\">double</span> number<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>m <span class=\"sy0\">==</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentNullException<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> rows <span class=\"sy0\">=</span> m<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, columns <span class=\"sy0\">=</span> m<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> result <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span>rows, columns<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> rows<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> columns<span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                result<span class=\"br0\">[</span>r, c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> operation<span class=\"br0\">(</span>m<span class=\"br0\">[</span>r, c<span class=\"br0\">]</span>, number<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Print<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> m<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>m <span class=\"sy0\">==</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentNullException<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> rows <span class=\"sy0\">=</span> m<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, columns <span class=\"sy0\">=</span> m<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> rows<span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"[ \"</span> <span class=\"sy0\">+</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, columns<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> m<span class=\"br0\">[</span>r, c<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" ]\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> matrix <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            <span class=\"br0\">{</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span> <span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span> <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span> <span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span> <span class=\"nu0\">9</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">12</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span>,<span class=\"br0\">]</span> tens <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            <span class=\"br0\">{</span> <span class=\"nu0\">10</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">10</span>, <span class=\"nu0\">10</span> <span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span> <span class=\"nu0\">20</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">20</span>, <span class=\"nu0\">20</span> <span class=\"br0\">}</span>,<br/>            <span class=\"br0\">{</span> <span class=\"nu0\">30</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">30</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        matrix<span class=\"sy0\">.</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        WriteLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"br0\">(</span>matrix <span class=\"sy0\">=</span> matrix<span class=\"sy0\">.</span><span class=\"me1\">DoOperation</span><span class=\"br0\">(</span><span class=\"st0\">\"add\"</span>, tens<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        WriteLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        matrix<span class=\"sy0\">.</span><span class=\"me1\">DoOperation</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> b <span class=\"sy0\">-</span> a, <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 8, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> initial<span class=\"sy0\">-</span>mtx <span class=\"br0\">[</span>i1 i2 value<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> i1 <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">repeat</span> i2 value<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> operation <span class=\"br0\">[</span>f mtx1 mtx2<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">vector?</span> mtx1<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"kw1\">vec</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> f <span class=\"sy0\">%</span>1 <span class=\"sy0\">%</span>2<span class=\"br0\">)</span><span class=\"br0\">)</span> mtx1 mtx2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">recur</span> f <span class=\"br0\">(</span>initial<span class=\"sy0\">-</span>mtx <span class=\"br0\">(</span><span class=\"kw1\">count</span> mtx2<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">first</span> mtx2<span class=\"br0\">)</span><span class=\"br0\">)</span> mtx1<span class=\"br0\">)</span> mtx2<span class=\"br0\">)</span> <br/>  <span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 19, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> element-wise-matrix <span class=\"br0\">(</span>fn A B<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>len <span class=\"br0\">(</span>array-total-size A<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>m   <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>array-dimensions A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>n   <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> <span class=\"br0\">(</span>array-dimensions A<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>C   <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> `<span class=\"br0\">(</span><span class=\"sy0\">,</span>m <span class=\"sy0\">,</span>n<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> 0<span class=\"sy0\">.</span>0d0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">0</span> to <span class=\"br0\">(</span><span class=\"nu0\">1</span>- len<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>row-major-<span class=\"kw1\">aref</span> C i<span class=\"br0\">)</span> <br/>               <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> fn<br/>                        <span class=\"br0\">(</span>row-major-<span class=\"kw1\">aref</span> A i<span class=\"br0\">)</span><br/>                        <span class=\"br0\">(</span>row-major-<span class=\"kw1\">aref</span> B i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    C<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; A.+B, A.-B, A.*B, A./B, A.^B.</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> m+ <span class=\"br0\">(</span>A B<span class=\"br0\">)</span> <span class=\"br0\">(</span>element-wise-matrix #'+    A B<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> m- <span class=\"br0\">(</span>A B<span class=\"br0\">)</span> <span class=\"br0\">(</span>element-wise-matrix #'-    A B<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> m* <span class=\"br0\">(</span>A B<span class=\"br0\">)</span> <span class=\"br0\">(</span>element-wise-matrix #'*    A B<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> m/ <span class=\"br0\">(</span>A B<span class=\"br0\">)</span> <span class=\"br0\">(</span>element-wise-matrix #'/    A B<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> m<span class=\"sy0\">^</span> <span class=\"br0\">(</span>A B<span class=\"br0\">)</span> <span class=\"br0\">(</span>element-wise-matrix #'<span class=\"kw1\">expt</span> A B<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 15, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typetuple</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">;</span><br/>\u00a0<br/>T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> elementwise<span class=\"br0\">(</span><span class=\"kw4\">string</span> op<span class=\"sy0\">,</span> T<span class=\"sy0\">,</span> U<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> A<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> U B<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">auto</span> R <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw2\">typeof</span><span class=\"br0\">(</span><span class=\"kw1\">return</span><span class=\"br0\">)</span><span class=\"br0\">(</span>A.<span class=\"me1\">length</span><span class=\"sy0\">,</span> A<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>r<span class=\"sy0\">,</span> row<span class=\"sy0\">;</span> A<span class=\"br0\">)</span><br/>    R<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">mixin</span><span class=\"br0\">(</span><span class=\"st0\">\"row[] \"</span> <span class=\"sy0\">~</span> op <span class=\"sy0\">~</span> <span class=\"br0\">(</span>isNumeric<span class=\"sy0\">!</span>U <span class=\"sy0\">?</span> <span class=\"st0\">\"B\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"B[r][]\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> R<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">const</span> M <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>op<span class=\"sy0\">;</span> TypeTuple<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"*\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"/\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"^^\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%s:<span class=\"es1\">\\n</span>[%([%(%d,\u00a0%)],<span class=\"es1\">\\n</span>\u00a0%)]]<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>[%([%(%d,\u00a0%)],<span class=\"es1\">\\n</span>\u00a0%)]]<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span><br/>             op<span class=\"sy0\">,</span> elementwise<span class=\"sy0\">!</span>op<span class=\"br0\">(</span>M<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> elementwise<span class=\"sy0\">!</span>op<span class=\"br0\">(</span>M<span class=\"sy0\">,</span> M<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Factor", "loc": 15, "block": "<pre class=\"text highlighted_source\">USING: combinators.extras formatting kernel math.functions<br/>math.matrices math.vectors prettyprint sequences\u00a0;<br/>\u00a0<br/>: show ( a b words -- )<br/>    [<br/>        3dup execute( x x -- x ) [ unparse ] dip<br/>        \"%u\u00a0%u\u00a0%s =\u00a0%u\\n\" printf<br/>    ] 2with each\u00a0; inline<br/>\u00a0<br/>: m^n ( m n -- m ) [ ^ ] curry matrix-map\u00a0;<br/>: m^  ( m m -- m ) [ v^ ] 2map\u00a0;<br/>\u00a0<br/>{ { 1 2 } { 3 4 } } { { 5 6 } { 7 8 } } { m+ m- m* m/ m^ }<br/>{ { -1 9 4 } { 5 -13 0 } } 3 { m+n m-n m*n m/n m^n }<br/>[ show ] <a class=\"__cf_email__\" data-cfemail=\"d8ebbab198\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "Fortran", "loc": 63, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> element_operations<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span>,b<br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>  a<span class=\"sy0\">=</span><span class=\"kw4\">reshape</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">(</span>i,i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">]</span>,<span class=\"kw4\">shape</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  print<span class=\"sy0\">*</span>,<span class=\"st0\">'addition'</span><br/>  b<span class=\"sy0\">=</span>a<span class=\"sy0\">+</span>a<br/>  <span class=\"kw1\">call</span> print_arr<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>\u00a0<br/>  print<span class=\"sy0\">*</span>,<span class=\"st0\">'multiplication'</span><br/>  b<span class=\"sy0\">=</span>a<span class=\"sy0\">*</span>a<br/>  <span class=\"kw1\">call</span> print_arr<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>\u00a0<br/>  print<span class=\"sy0\">*</span>,<span class=\"st0\">'division'</span><br/>  b<span class=\"sy0\">=</span>a<span class=\"sy0\">/</span>b<br/>  <span class=\"kw1\">call</span> print_arr<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>\u00a0<br/>  print<span class=\"sy0\">*</span>,<span class=\"st0\">'exponentiation'</span><br/>  b<span class=\"sy0\">=</span>a<span class=\"sy0\">**</span>a<br/>  <span class=\"kw1\">call</span> print_arr<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>\u00a0<br/>  print<span class=\"sy0\">*</span>,<span class=\"st0\">'trignometric'</span><br/>  b<span class=\"sy0\">=</span><span class=\"kw4\">cos</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> print_arr<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>\u00a0<br/>  print<span class=\"sy0\">*</span>,<span class=\"st0\">'mod'</span><br/>  b<span class=\"sy0\">=</span><span class=\"kw4\">mod</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> print_arr<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>\u00a0<br/>  print<span class=\"sy0\">*</span>,<span class=\"st0\">'element selection'</span><br/>  b<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>  <span class=\"kw1\">where</span><span class=\"br0\">(</span>a&gt;<span class=\"nu0\">3</span><span class=\"br0\">)</span> b<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">call</span> print_arr<span class=\"br0\">(</span>b<span class=\"br0\">)</span>  <br/>\u00a0<br/>  print<span class=\"sy0\">*</span>,<span class=\"st0\">'elemental functions can be applied to single values:'</span><br/>  print<span class=\"sy0\">*</span>,square<span class=\"br0\">(</span><span class=\"nu0\">3.0</span><span class=\"br0\">)</span><br/>  print<span class=\"sy0\">*</span>,<span class=\"st0\">'or element wise to arrays:'</span><br/>  b<span class=\"sy0\">=</span>square<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> print_arr<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  elemental <span class=\"kw3\">real</span> <span class=\"kw1\">function</span> square<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"kw3\">real</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><br/>    square<span class=\"sy0\">=</span>a<span class=\"sy0\">*</span>a<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> square<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> print_arr<span class=\"br0\">(</span>arr<span class=\"br0\">)</span><br/>    <span class=\"kw3\">real</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">arr</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>    <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"kw4\">size</span><span class=\"br0\">(</span>arr,<span class=\"kw4\">dim</span><span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>       print<span class=\"sy0\">*</span>,arr<span class=\"br0\">(</span><span class=\"sy0\">:</span>,i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> print_arr<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> element_operations<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 70, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> element<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Matrix <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    ele    <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><br/>    stride <span class=\"kw4\">int</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> MatrixFromRows<span class=\"sy1\">(</span>rows <span class=\"sy1\">[][]</span><span class=\"kw4\">float64</span><span class=\"sy1\">)</span> Matrix <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>rows<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> Matrix<span class=\"sy1\">{</span><span class=\"kw2\">nil</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    m <span class=\"sy2\">:=</span> Matrix<span class=\"sy1\">{</span><span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>rows<span class=\"sy1\">)</span><span class=\"sy3\">*</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>rows<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])),</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>rows<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])}</span><br/>    <span class=\"kw1\">for</span> rx<span class=\"sy1\">,</span> row <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> rows <span class=\"sy1\">{</span><br/>        <span class=\"kw3\">copy</span><span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span>rx<span class=\"sy3\">*</span>m<span class=\"sy3\">.</span>stride<span class=\"sy1\">:(</span>rx<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><span class=\"sy3\">*</span>m<span class=\"sy3\">.</span>stride<span class=\"sy1\">],</span> row<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> m<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> like<span class=\"sy1\">(</span>m Matrix<span class=\"sy1\">)</span> Matrix <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> Matrix<span class=\"sy1\">{</span><span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>ele<span class=\"sy1\">)),</span> m<span class=\"sy3\">.</span>stride<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>m Matrix<span class=\"sy1\">)</span> String<span class=\"sy1\">()</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">for</span> e <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> e &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy3\">.</span>ele<span class=\"sy1\">);</span> e <span class=\"sy2\">+=</span> m<span class=\"sy3\">.</span>stride <span class=\"sy1\">{</span><br/>        s <span class=\"sy2\">+=</span> fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"%6.3f <span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> m<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span>e<span class=\"sy1\">:</span>e<span class=\"sy3\">+</span>m<span class=\"sy3\">.</span>stride<span class=\"sy1\">])</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> binaryFunc64 <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span><br/>\u00a0<br/><span class=\"kw4\">func</span> elementWiseMM<span class=\"sy1\">(</span>m1<span class=\"sy1\">,</span> m2 Matrix<span class=\"sy1\">,</span> f binaryFunc64<span class=\"sy1\">)</span> Matrix <span class=\"sy1\">{</span><br/>    z <span class=\"sy2\">:=</span> like<span class=\"sy1\">(</span>m1<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> m1e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m1<span class=\"sy3\">.</span>ele <span class=\"sy1\">{</span><br/>        z<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> f<span class=\"sy1\">(</span>m1e<span class=\"sy1\">,</span> m2<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">])</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> z<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> elementWiseMS<span class=\"sy1\">(</span>m Matrix<span class=\"sy1\">,</span> s <span class=\"kw4\">float64</span><span class=\"sy1\">,</span> f binaryFunc64<span class=\"sy1\">)</span> Matrix <span class=\"sy1\">{</span><br/>    z <span class=\"sy2\">:=</span> like<span class=\"sy1\">(</span>m<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> e <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> m<span class=\"sy3\">.</span>ele <span class=\"sy1\">{</span><br/>        z<span class=\"sy3\">.</span>ele<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> f<span class=\"sy1\">(</span>e<span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> z<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> add<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> a <span class=\"sy3\">+</span> b <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> sub<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> a <span class=\"sy3\">-</span> b <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> mul<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> a <span class=\"sy3\">*</span> b <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> div<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> a <span class=\"sy3\">/</span> b <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> exp<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> math<span class=\"sy3\">.</span>Pow<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> b<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> AddMatrix<span class=\"sy1\">(</span>m1<span class=\"sy1\">,</span> m2 Matrix<span class=\"sy1\">)</span> Matrix <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> elementWiseMM<span class=\"sy1\">(</span>m1<span class=\"sy1\">,</span> m2<span class=\"sy1\">,</span> add<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> SubMatrix<span class=\"sy1\">(</span>m1<span class=\"sy1\">,</span> m2 Matrix<span class=\"sy1\">)</span> Matrix <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> elementWiseMM<span class=\"sy1\">(</span>m1<span class=\"sy1\">,</span> m2<span class=\"sy1\">,</span> sub<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> MulMatrix<span class=\"sy1\">(</span>m1<span class=\"sy1\">,</span> m2 Matrix<span class=\"sy1\">)</span> Matrix <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> elementWiseMM<span class=\"sy1\">(</span>m1<span class=\"sy1\">,</span> m2<span class=\"sy1\">,</span> mul<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> DivMatrix<span class=\"sy1\">(</span>m1<span class=\"sy1\">,</span> m2 Matrix<span class=\"sy1\">)</span> Matrix <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> elementWiseMM<span class=\"sy1\">(</span>m1<span class=\"sy1\">,</span> m2<span class=\"sy1\">,</span> div<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> ExpMatrix<span class=\"sy1\">(</span>m1<span class=\"sy1\">,</span> m2 Matrix<span class=\"sy1\">)</span> Matrix <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> elementWiseMM<span class=\"sy1\">(</span>m1<span class=\"sy1\">,</span> m2<span class=\"sy1\">,</span> exp<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> AddScalar<span class=\"sy1\">(</span>m Matrix<span class=\"sy1\">,</span> s <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> Matrix <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> elementWiseMS<span class=\"sy1\">(</span>m<span class=\"sy1\">,</span> s<span class=\"sy1\">,</span> add<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> SubScalar<span class=\"sy1\">(</span>m Matrix<span class=\"sy1\">,</span> s <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> Matrix <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> elementWiseMS<span class=\"sy1\">(</span>m<span class=\"sy1\">,</span> s<span class=\"sy1\">,</span> sub<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> MulScalar<span class=\"sy1\">(</span>m Matrix<span class=\"sy1\">,</span> s <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> Matrix <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> elementWiseMS<span class=\"sy1\">(</span>m<span class=\"sy1\">,</span> s<span class=\"sy1\">,</span> mul<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> DivScalar<span class=\"sy1\">(</span>m Matrix<span class=\"sy1\">,</span> s <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> Matrix <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> elementWiseMS<span class=\"sy1\">(</span>m<span class=\"sy1\">,</span> s<span class=\"sy1\">,</span> div<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> ExpScalar<span class=\"sy1\">(</span>m Matrix<span class=\"sy1\">,</span> s <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> Matrix <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> elementWiseMS<span class=\"sy1\">(</span>m<span class=\"sy1\">,</span> s<span class=\"sy1\">,</span> exp<span class=\"sy1\">)</span> <span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 129, "block": "<pre class=\"haskell highlighted_source\"><span class=\"coMULTI\">{-# OPTIONS_GHC -fno-warn-duplicate-constraints #-}</span><br/><span class=\"coMULTI\">{-# LANGUAGE RankNTypes #-}</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array <span class=\"br0\">(</span>Array<span class=\"sy0\">,</span> Ix<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<span class=\"sy0\">.</span>Base<br/>\u00a0<br/><span class=\"co1\">-- | Element-wise combine the values of two arrays 'a' and 'b' with 'f'.</span><br/><span class=\"co1\">-- 'a' and 'b' must have the same bounds.</span><br/>zipWithA <span class=\"sy0\">::</span> <span class=\"br0\">(</span>IArray arr a<span class=\"sy0\">,</span> IArray arr b<span class=\"sy0\">,</span> IArray arr c<span class=\"sy0\">,</span> Ix i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>            <span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> b <span class=\"sy0\">-&gt;</span> c<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> arr i a <span class=\"sy0\">-&gt;</span> arr i b <span class=\"sy0\">-&gt;</span> arr i c<br/>zipWithA f a b <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">case</span> bounds a <span class=\"kw1\">of</span><br/>    ba <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">if</span> ba <span class=\"sy0\">/=</span> bounds b<br/>      <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a> <span class=\"st0\">\"elemwise: bounds mismatch\"</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> numElements a<br/>        <span class=\"kw1\">in</span> unsafeArray ba <span class=\"br0\">[</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> f <span class=\"br0\">(</span>unsafeAt a i<span class=\"br0\">)</span> <span class=\"br0\">(</span>unsafeAt b i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                          <span class=\"sy0\">|</span> i <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- Convenient aliases for matrix-matrix element-wise operations.</span><br/><span class=\"kw1\">type</span> ElemOp a b c <span class=\"sy0\">=</span> <span class=\"br0\">(</span>IArray arr a<span class=\"sy0\">,</span> IArray arr b<span class=\"sy0\">,</span> IArray arr c<span class=\"sy0\">,</span> Ix i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>                    arr i a <span class=\"sy0\">-&gt;</span> arr i b <span class=\"sy0\">-&gt;</span> arr i c<br/><span class=\"kw1\">type</span> ElemOp1 a <span class=\"sy0\">=</span> ElemOp a a a<br/>\u00a0<br/><span class=\"kw1\">infixl</span> <span class=\"nu0\">6</span> <span class=\"sy0\">+</span>:<span class=\"sy0\">,</span> <span class=\"sy0\">-</span>:<br/><span class=\"kw1\">infixl</span> <span class=\"nu0\">7</span> <span class=\"sy0\">*</span>:<span class=\"sy0\">,</span> <span class=\"sy0\">/</span>:<span class=\"sy0\">,</span> `divE`<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"sy0\">+</span>:<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span>:<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>:<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> ElemOp1 a<br/><span class=\"br0\">(</span><span class=\"sy0\">+</span>:<span class=\"br0\">)</span> <span class=\"sy0\">=</span> zipWithA <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"sy0\">-</span>:<span class=\"br0\">)</span> <span class=\"sy0\">=</span> zipWithA <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"sy0\">*</span>:<span class=\"br0\">)</span> <span class=\"sy0\">=</span> zipWithA <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0<br/>divE <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> ElemOp1 a<br/>divE <span class=\"sy0\">=</span> zipWithA <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"sy0\">/</span>:<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> ElemOp1 a<br/><span class=\"br0\">(</span><span class=\"sy0\">/</span>:<span class=\"br0\">)</span> <span class=\"sy0\">=</span> zipWithA <span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">infixr</span> <span class=\"nu0\">8</span> <span class=\"sy0\">^</span>:<span class=\"sy0\">,</span> <span class=\"sy0\">**</span>:<span class=\"sy0\">,</span> <span class=\"sy0\">^^</span>:<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"sy0\">^</span>:<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> ElemOp a b a<br/><span class=\"br0\">(</span><span class=\"sy0\">^</span>:<span class=\"br0\">)</span> <span class=\"sy0\">=</span> zipWithA <span class=\"br0\">(</span><span class=\"sy0\">^</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"sy0\">**</span>:<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Floating\"><span class=\"kw4\">Floating</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> ElemOp1 a<br/><span class=\"br0\">(</span><span class=\"sy0\">**</span>:<span class=\"br0\">)</span> <span class=\"sy0\">=</span> zipWithA <span class=\"br0\">(</span><span class=\"sy0\">**</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"sy0\">^^</span>:<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> ElemOp a b a<br/><span class=\"br0\">(</span><span class=\"sy0\">^^</span>:<span class=\"br0\">)</span> <span class=\"sy0\">=</span> zipWithA <span class=\"br0\">(</span><span class=\"sy0\">^^</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Convenient aliases for matrix-scalar element-wise operations.</span><br/><span class=\"kw1\">type</span> ScalarOp a b c <span class=\"sy0\">=</span> <span class=\"br0\">(</span>IArray arr a<span class=\"sy0\">,</span> IArray arr c<span class=\"sy0\">,</span> Ix i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>                      arr i a <span class=\"sy0\">-&gt;</span> b <span class=\"sy0\">-&gt;</span> arr i c<br/><span class=\"kw1\">type</span> ScalarOp1 a <span class=\"sy0\">=</span> ScalarOp a a a<br/>\u00a0<br/>samap <span class=\"sy0\">::</span> <span class=\"br0\">(</span>IArray arr a<span class=\"sy0\">,</span> IArray arr c<span class=\"sy0\">,</span> Ix i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>         <span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> b <span class=\"sy0\">-&gt;</span> c<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> arr i a <span class=\"sy0\">-&gt;</span> b <span class=\"sy0\">-&gt;</span> arr i c<br/>samap f a s <span class=\"sy0\">=</span> amap <span class=\"br0\">(</span>`f` s<span class=\"br0\">)</span> a<br/>\u00a0<br/><span class=\"kw1\">infixl</span> <span class=\"nu0\">6</span> <span class=\"sy0\">+.,</span> <span class=\"sy0\">-.</span><br/><span class=\"kw1\">infixl</span> <span class=\"nu0\">7</span> <span class=\"sy0\">*.,</span> <span class=\"sy0\">/.,</span> `divS`<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"sy0\">+.</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">-.</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> ScalarOp1 a<br/><span class=\"br0\">(</span><span class=\"sy0\">+.</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> samap <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"sy0\">-.</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> samap <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> samap <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0<br/>divS <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> ScalarOp1 a<br/>divS <span class=\"sy0\">=</span> samap <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"sy0\">/.</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> ScalarOp1 a<br/><span class=\"br0\">(</span><span class=\"sy0\">/.</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> samap <span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">infixr</span> <span class=\"nu0\">8</span> <span class=\"sy0\">^.,</span> <span class=\"sy0\">**.,</span> <span class=\"sy0\">^^.</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"sy0\">^.</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> ScalarOp a b a<br/><span class=\"br0\">(</span><span class=\"sy0\">^.</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> samap <span class=\"br0\">(</span><span class=\"sy0\">^</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"sy0\">**.</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Floating\"><span class=\"kw4\">Floating</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> ScalarOp1 a<br/><span class=\"br0\">(</span><span class=\"sy0\">**.</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> samap <span class=\"br0\">(</span><span class=\"sy0\">**</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"sy0\">^^.</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> ScalarOp a b a<br/><span class=\"br0\">(</span><span class=\"sy0\">^^.</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> samap <span class=\"br0\">(</span><span class=\"sy0\">^^</span><span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> m1<span class=\"sy0\">,</span> m2 <span class=\"sy0\">::</span> <span class=\"br0\">(</span><span class=\"kw1\">forall</span> a<span class=\"sy0\">.</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Enum\"><span class=\"kw4\">Enum</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> Array <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span> a<span class=\"br0\">)</span><br/>      m1 <span class=\"sy0\">=</span> listArray <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>      m2 <span class=\"sy0\">=</span> listArray <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>      s <span class=\"sy0\">::</span> <span class=\"br0\">(</span><span class=\"kw1\">forall</span> a<span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a <span class=\"sy0\">=&gt;</span> a<span class=\"br0\">)</span><br/>      s <span class=\"sy0\">=</span> <span class=\"nu0\">99</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"m1\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> m1<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"m2\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> m2<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"s\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> s<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"m1 + m2\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> m1 <span class=\"sy0\">+</span>: m2<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"m1 - m2\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> m1 <span class=\"sy0\">-</span>: m2<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"m1 * m2\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> m1 <span class=\"sy0\">*</span>: m2<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"m1 `div` m2\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> m1 `divE` m2<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"m1 / m2\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> m1 <span class=\"sy0\">/</span>: m2<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"m1 ^ m2\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> m1 <span class=\"sy0\">^</span>: m2<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"m1 ** m2\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> m1 <span class=\"sy0\">**</span>: m2<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"m1 ^^ m2\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> m1 <span class=\"sy0\">^^</span>: m2<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"m1 + s\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> m1 <span class=\"sy0\">+.</span> s<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"m1 - s\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> m1 <span class=\"sy0\">-.</span> s<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"m1 * s\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> m1 <span class=\"sy0\">*.</span> s<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"m1 `div` s\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> m1 `divS` s<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"m1 / s\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> m1 <span class=\"sy0\">/.</span> s<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"m1 ^ s\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> m1 <span class=\"sy0\">^.</span> s<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"m1 ** s\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> m1 <span class=\"sy0\">**.</span> s<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"m1 ^^ s\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> m1 <span class=\"sy0\">^^.</span> s</pre>"}, {"lang": "Icon and Unicon", "loc": 37, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   a <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>   b <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>   showMat<span class=\"br0\">(</span><span class=\"st0\">\"  a: \"</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><br/>   showMat<span class=\"br0\">(</span><span class=\"st0\">\"  b: \"</span><span class=\"sy0\">,</span>b<span class=\"br0\">)</span><br/>   showMat<span class=\"br0\">(</span><span class=\"st0\">\"a+b: \"</span><span class=\"sy0\">,</span>mmop<span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   showMat<span class=\"br0\">(</span><span class=\"st0\">\"a-b: \"</span><span class=\"sy0\">,</span>mmop<span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   showMat<span class=\"br0\">(</span><span class=\"st0\">\"a*b: \"</span><span class=\"sy0\">,</span>mmop<span class=\"br0\">(</span><span class=\"st0\">\"*\"</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   showMat<span class=\"br0\">(</span><span class=\"st0\">\"a/b: \"</span><span class=\"sy0\">,</span>mmop<span class=\"br0\">(</span><span class=\"st0\">\"/\"</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   showMat<span class=\"br0\">(</span><span class=\"st0\">\"a^b: \"</span><span class=\"sy0\">,</span>mmop<span class=\"br0\">(</span><span class=\"st0\">\"^\"</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   showMat<span class=\"br0\">(</span><span class=\"st0\">\"a+2: \"</span><span class=\"sy0\">,</span>msop<span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   showMat<span class=\"br0\">(</span><span class=\"st0\">\"a-2: \"</span><span class=\"sy0\">,</span>msop<span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   showMat<span class=\"br0\">(</span><span class=\"st0\">\"a*2: \"</span><span class=\"sy0\">,</span>msop<span class=\"br0\">(</span><span class=\"st0\">\"*\"</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   showMat<span class=\"br0\">(</span><span class=\"st0\">\"a/2: \"</span><span class=\"sy0\">,</span>msop<span class=\"br0\">(</span><span class=\"st0\">\"/\"</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   showMat<span class=\"br0\">(</span><span class=\"st0\">\"a^2: \"</span><span class=\"sy0\">,</span>msop<span class=\"br0\">(</span><span class=\"st0\">\"^\"</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> mmop<span class=\"br0\">(</span>op<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>B<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>A <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>B<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>B<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>        C <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"sy0\">:</span> <span class=\"sy0\">|</span><span class=\"kw4\">list</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">\\*</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span><span class=\"br0\">]</span><br/>        a1 <span class=\"sy0\">:=</span> <span class=\"kw1\">create</span> <span class=\"sy0\">!!</span>A<br/>        b1 <span class=\"sy0\">:=</span> <span class=\"kw1\">create</span> <span class=\"sy0\">!!</span>B<br/>        <span class=\"kw1\">every</span> <span class=\"br0\">(</span><span class=\"sy0\">!!</span>C<span class=\"br0\">)</span> <span class=\"sy0\">:=</span> op<span class=\"br0\">(</span><span class=\"sy0\">@</span>a1<span class=\"sy0\">,@</span>b1<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> C<br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> msop<span class=\"br0\">(</span>op<span class=\"sy0\">,</span>A<span class=\"sy0\">,</span>s<span class=\"br0\">)</span><br/>    C <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"sy0\">:</span> <span class=\"sy0\">|</span><span class=\"kw4\">list</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">\\*</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span><span class=\"br0\">]</span><br/>    a1 <span class=\"sy0\">:=</span> <span class=\"kw1\">create</span> <span class=\"sy0\">!!</span>A<br/>    <span class=\"kw1\">every</span> <span class=\"br0\">(</span><span class=\"sy0\">!!</span>C<span class=\"br0\">)</span> <span class=\"sy0\">:=</span> op<span class=\"br0\">(</span><span class=\"sy0\">@</span>a1<span class=\"sy0\">,</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> C<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> showMat<span class=\"br0\">(</span>label<span class=\"sy0\">,</span> m<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span>label <span class=\"sy0\">|</span> <span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"sy0\">!!</span>m<span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 24, "block": "<pre class=\"j highlighted_source\">   scalar =: <span class=\"nu0\">10</span><br/>   vector =: <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span><br/>   matrix =: <span class=\"nu0\">3</span> <span class=\"nu0\">3</span> $    <span class=\"nu0\">7</span> <span class=\"nu0\">11</span> <span class=\"nu0\">13</span>  <span class=\"nu0\">17</span> <span class=\"nu0\">19</span> <span class=\"nu0\">23</span>  <span class=\"nu0\">29</span> <span class=\"nu0\">31</span> <span class=\"nu0\">37</span><br/>\u00a0<br/>   scalar * scalar<br/><span class=\"nu0\">100</span><br/>   scalar * vector<br/><span class=\"nu0\">20</span> <span class=\"nu0\">30</span> <span class=\"nu0\">50</span><br/>   scalar * matrix<br/> <span class=\"nu0\">70</span> <span class=\"nu0\">110</span> <span class=\"nu0\">130</span><br/><span class=\"nu0\">170</span> <span class=\"nu0\">190</span> <span class=\"nu0\">230</span><br/><span class=\"nu0\">290</span> <span class=\"nu0\">310</span> <span class=\"nu0\">370</span><br/>\u00a0<br/>   vector * vector<br/><span class=\"nu0\">4</span> <span class=\"nu0\">9</span> <span class=\"nu0\">25</span><br/>   vector * matrix<br/> <span class=\"nu0\">14</span>  <span class=\"nu0\">22</span>  <span class=\"nu0\">26</span><br/> <span class=\"nu0\">51</span>  <span class=\"nu0\">57</span>  <span class=\"nu0\">69</span><br/><span class=\"nu0\">145</span> <span class=\"nu0\">155</span> <span class=\"nu0\">185</span><br/>\u00a0<br/>   matrix * matrix<br/> <span class=\"nu0\">49</span> <span class=\"nu0\">121</span>  <span class=\"nu0\">169</span><br/><span class=\"nu0\">289</span> <span class=\"nu0\">361</span>  <span class=\"nu0\">529</span><br/><span class=\"nu0\">841</span> <span class=\"nu0\">961</span> <span class=\"nu0\">1369</span></pre>"}, {"lang": "Java", "loc": 61, "block": "<pre class=\"java highlighted_source\">\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.HashMap</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Map</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.function.BiFunction</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.stream.Stream</span><span class=\"sy0\">;</span><br/>\u00a0<br/>@SuppressWarnings<span class=\"br0\">(</span><span class=\"st0\">\"serial\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ElementWiseOp <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">static</span> <span class=\"kw1\">final</span> Map<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>, BiFunction<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>, Double<span class=\"sy0\">&gt;&gt;</span> OPERATIONS <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> HashMap<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>, BiFunction<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>, Double<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tput<span class=\"br0\">(</span><span class=\"st0\">\"add\"</span>, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">+</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tput<span class=\"br0\">(</span><span class=\"st0\">\"sub\"</span>, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tput<span class=\"br0\">(</span><span class=\"st0\">\"mul\"</span>, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">*</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tput<span class=\"br0\">(</span><span class=\"st0\">\"div\"</span>, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">/</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tput<span class=\"br0\">(</span><span class=\"st0\">\"pow\"</span>, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tput<span class=\"br0\">(</span><span class=\"st0\">\"mod\"</span>, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">%</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> scalarOp<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> op, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> matr, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a> scalar<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tBiFunction<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>, Double<span class=\"sy0\">&gt;</span> operation <span class=\"sy0\">=</span> OPERATIONS.<span class=\"me1\">getOrDefault</span><span class=\"br0\">(</span>op, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> result <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a><span class=\"br0\">[</span>matr.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"br0\">[</span>matr<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> matr.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> matr<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\tresult<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> operation.<span class=\"me1\">apply</span><span class=\"br0\">(</span>matr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>, scalar<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> matrOp<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> op, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> matr, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> scalar<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tBiFunction<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a>, Double<span class=\"sy0\">&gt;</span> operation <span class=\"sy0\">=</span> OPERATIONS.<span class=\"me1\">getOrDefault</span><span class=\"br0\">(</span>op, <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> result <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a><span class=\"br0\">[</span>matr.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"br0\">[</span>Stream.<span class=\"me1\">of</span><span class=\"br0\">(</span>matr<span class=\"br0\">)</span>.<span class=\"me1\">mapToInt</span><span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> a.<span class=\"me1\">length</span><span class=\"br0\">)</span>.<span class=\"me1\">max</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">getAsInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> matr.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> matr<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\tresult<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> operation.<span class=\"me1\">apply</span><span class=\"br0\">(</span>matr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>, scalar<span class=\"br0\">[</span>i <span class=\"sy0\">%</span> scalar.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<br/>\t\t\t\t\t\t<span class=\"sy0\">%</span> scalar<span class=\"br0\">[</span>i <span class=\"sy0\">%</span> scalar.<span class=\"me1\">length</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> printMatrix<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> matr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tStream.<span class=\"me1\">of</span><span class=\"br0\">(</span>matr<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a><span class=\"sy0\">::</span>toString<span class=\"br0\">)</span>.<span class=\"kw1\">forEach</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span><span class=\"sy0\">::</span>println<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tprintMatrix<span class=\"br0\">(</span>scalarOp<span class=\"br0\">(</span><span class=\"st0\">\"mul\"</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"br0\">{</span> <span class=\"nu0\">1.0</span>, <span class=\"nu0\">2.0</span>, <span class=\"nu0\">3.0</span> <span class=\"br0\">}</span>, <br/>\t\t\t\t<span class=\"br0\">{</span> <span class=\"nu0\">4.0</span>, <span class=\"nu0\">5.0</span>, <span class=\"nu0\">6.0</span> <span class=\"br0\">}</span>, <br/>\t\t\t\t<span class=\"br0\">{</span> <span class=\"nu0\">7.0</span>, <span class=\"nu0\">8.0</span>, <span class=\"nu0\">9.0</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span>, <span class=\"nu0\">3.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tprintMatrix<span class=\"br0\">(</span>matrOp<span class=\"br0\">(</span><span class=\"st0\">\"div\"</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"br0\">{</span> <span class=\"nu0\">1.0</span>, <span class=\"nu0\">2.0</span>, <span class=\"nu0\">3.0</span> <span class=\"br0\">}</span>, <br/>\t\t\t\t<span class=\"br0\">{</span> <span class=\"nu0\">4.0</span>, <span class=\"nu0\">5.0</span>, <span class=\"nu0\">6.0</span> <span class=\"br0\">}</span>, <br/>\t\t\t\t<span class=\"br0\">{</span> <span class=\"nu0\">7.0</span>, <span class=\"nu0\">8.0</span>, <span class=\"nu0\">9.0</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span>, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adouble+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Double</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"br0\">{</span> <span class=\"nu0\">1.0</span>, <span class=\"nu0\">2.0</span><span class=\"br0\">}</span>, <br/>\t\t\t\t<span class=\"br0\">{</span> <span class=\"nu0\">3.0</span>, <span class=\"nu0\">4.0</span><span class=\"br0\">}</span> <br/>\t\t<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 12, "block": "<pre class=\"text highlighted_source\"># Occurrences of .[0] in \"operator\" will refer to an element in self,<br/># and occurrences of .[1] will refer to the corresponding element in other.<br/>def elementwise( operator; other ):<br/>  length as $rows<br/>  | if $rows == 0 then .<br/>    else . as $self<br/>    | other as $other<br/>    | ($self[0]|length) as $cols<br/>    | reduce range(0; $rows) as $i<br/>        ([]; reduce range(0; $cols) as $j<br/>          (.; .[$i][$j] = ([$self[$i][$j], $other[$i][$j]] | operator) ) )<br/>    end\u00a0;</pre>"}, {"lang": "Julia", "loc": 7, "block": "<pre class=\"text highlighted_source\">@show [1 2 3; 3 2 1] .+ [2 1 2; 0 2 1]<br/>@show [1 2 3; 2 1 2] .+ 1<br/>@show [1 2 3; 2 2 1] .- [1 1 1; 2 1 0]<br/>@show [1 2 1; 1 2 3] .* [3 2 1; 1 0 1]<br/>@show [1 2 3; 3 2 1] .* 2<br/>@show [9 8 6; 3 2 3] ./ [3 1 2; 2 1 2]<br/>@show [3 2 2; 1 2 3] .^ [1 2 3; 2 1 2]</pre>"}, {"lang": "K", "loc": 25, "block": "<pre class=\"text highlighted_source\">   scalar: 10<br/>   vector: 2 3 5<br/>   matrix: 3 3 # 7 11 13  17 19 23  29 31 37<br/>\u00a0<br/>   scalar * scalar<br/>100<br/>   scalar * vector<br/>20 30 50<br/>   scalar * matrix<br/>(70 110 130<br/> 170 190 230<br/> 290 310 370)<br/>\u00a0<br/>   vector * vector<br/>4 9 25<br/>   vector * matrix<br/>(14 22 26<br/> 51 57 69<br/> 145 155 185)<br/>\u00a0<br/>   matrix * matrix<br/>(49 121 169<br/> 289 361 529<br/> 841 961 1369)<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 48, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.51</span><br/>\u00a0<br/>typealias Matrix <span class=\"sy0\">=</span> Array<span class=\"sy0\">&lt;</span>DoubleArray<span class=\"sy0\">&gt;</span><br/>typealias Op <span class=\"sy0\">=</span> Double.<span class=\"br0\">(</span>Double<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Double<br/>\u00a0<br/>fun Double.<span class=\"me1\">dPow</span><span class=\"br0\">(</span>exp<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">pow</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>, exp<span class=\"br0\">)</span><br/>\u00a0<br/>fun Matrix.<span class=\"me1\">elementwiseOp</span><span class=\"br0\">(</span>other<span class=\"sy0\">:</span> Matrix, op<span class=\"sy0\">:</span> Op<span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"br0\">{</span><br/>    require<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> other.<span class=\"me1\">size</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> other<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> DoubleArray<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span> result<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">op</span><span class=\"br0\">(</span>other<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result  <br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun Matrix.<span class=\"me1\">elementwiseOp</span><span class=\"br0\">(</span>d<span class=\"sy0\">:</span> Double, op<span class=\"sy0\">:</span> Op<span class=\"br0\">)</span><span class=\"sy0\">:</span> Matrix <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> DoubleArray<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span> until <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span> result<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">op</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result  <br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun Matrix.<span class=\"me1\">print</span><span class=\"br0\">(</span>name<span class=\"sy0\">:</span> Char<span class=\"sy0\">?</span>, scalar<span class=\"sy0\">:</span> Boolean<span class=\"sy0\">?</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>when <span class=\"br0\">(</span>scalar<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a>  -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"m $name s\"</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a> -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"m $name m\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>  -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"m\"</span><br/>    <span class=\"br0\">}</span> + <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">asList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ops <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span>Double<span class=\"sy0\">::</span>plus, Double<span class=\"sy0\">::</span>minus, Double<span class=\"sy0\">::</span>times, Double<span class=\"sy0\">::</span>div, Double<span class=\"sy0\">::</span>dPow<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> names <span class=\"sy0\">=</span> <span class=\"st0\">\"+-*/^\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">3.0</span>, <span class=\"nu0\">5.0</span>, <span class=\"nu0\">7.0</span><span class=\"br0\">)</span>, <br/>        doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1.0</span>, <span class=\"nu0\">2.0</span>, <span class=\"nu0\">3.0</span><span class=\"br0\">)</span>,<br/>        doubleArrayOf<span class=\"br0\">(</span><span class=\"nu0\">2.0</span>, <span class=\"nu0\">4.0</span>, <span class=\"nu0\">6.0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    m.<span class=\"me1\">print</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>i, op<span class=\"br0\">)</span> in ops.<span class=\"me1\">withIndex</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> m.<span class=\"me1\">elementwiseOp</span><span class=\"br0\">(</span>m, op<span class=\"br0\">)</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>names<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <span class=\"nu0\">2.0</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"s = $s:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>i, op<span class=\"br0\">)</span> in ops.<span class=\"me1\">withIndex</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> m.<span class=\"me1\">elementwiseOp</span><span class=\"br0\">(</span>s, op<span class=\"br0\">)</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>names<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span>   <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Maple", "loc": 16, "block": "<pre class=\"text highlighted_source\"># Built-in element-wise operator ~<br/>\u00a0<br/>#addition<br/>&lt;1,2,3;4,5,6&gt; +~ 2;<br/>\u00a0<br/>#subtraction<br/>&lt;2,3,1,4;0,-2,-2,1&gt; -~ 4;<br/>\u00a0<br/>#multiplication<br/>&lt;2,3,1,4;0,-2,-2,1&gt; *~ 4;<br/>\u00a0<br/>#division<br/>&lt;2,3,7,9;6,8,4,5;7,0,10,11&gt; /~ 2;<br/>\u00a0<br/>#exponentiation<br/>&lt;1,2,0; 7,2,7; 6,11,3&gt;^~5;</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 32, "block": "<pre class=\"text highlighted_source\">S = 10\u00a0; M = {{7, 11, 13}, {17 , 19, 23} , {29, 31, 37}};<br/>M + S<br/>M - S<br/>M * S<br/>M / S<br/>M ^ S<br/>\u00a0<br/>M + M<br/>M - M<br/>M * M<br/>M / M<br/>M ^ M<br/>\u00a0<br/>Gives:<br/>\u00a0<br/>-&gt;{{17, 21, 23}, {27, 29, 33}, {39, 41, 47}}<br/>-&gt;{{-3, 1, 3}, {7, 9, 13}, {19, 21, 27}}<br/>-&gt;{{70, 110, 130}, {170, 190, 230}, {290, 310, 370}}<br/>-&gt;{{7/10, 11/10, 13/10}, {17/10, 19/10, 23/10}, {29/10, 31/10, 37/10}}<br/>-&gt;{{282475249, 25937424601, 137858491849}, {2015993900449, <br/>  6131066257801, 41426511213649}, {420707233300201, 819628286980801, <br/>  4808584372417849}}<br/>\u00a0<br/>-&gt;{{14, 22, 26}, {34, 38, 46}, {58, 62, 74}}<br/>-&gt;{{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}<br/>-&gt;{{49, 121, 169}, {289, 361, 529}, {841, 961, 1369}}<br/>-&gt;{{1, 1, 1}, {1, 1, 1}, {1, 1, 1}}<br/>-&gt;{{823543, 285311670611, 302875106592253}, {827240261886336764177, <br/>  1978419655660313589123979, <br/>  20880467999847912034355032910567}, {2567686153161211134561828214731016126483469, <br/>  17069174130723235958610643029059314756044734431, <br/>  10555134955777783414078330085995832946127396083370199442517}}</pre>"}, {"lang": "MATLAB", "loc": 4, "block": "<pre class=\"matlab highlighted_source\">a = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/rand.html\"><span class=\"kw2\">rand</span></a>;<br/>b = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/rand.html\"><span class=\"kw2\">rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">10</span>,<span class=\"nu0\">10</span><span class=\"br0\">)</span>;<br/>scalar_matrix = a * b;<br/>component_wise = b .* b;</pre>"}, {"lang": "Maxima", "loc": 11, "block": "<pre class=\"text highlighted_source\">a: matrix([1, 2], [3, 4]);<br/>b: matrix([2, 4], [3, 1]);<br/>\u00a0<br/>a * b;<br/>a / b;<br/>a + b;<br/>a - b;<br/>a^3;<br/>a^b;  /* won't work */<br/>fullmapl(\"^\", a, b);<br/>sin(a);</pre>"}, {"lang": "PARI/GP", "loc": 3, "block": "<pre class=\"parigp highlighted_source\">multMM<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">matrix</span><span class=\"br0\">(</span>#A<span class=\"br0\">[</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>#A<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>A<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"sy0\">*</span>B<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>divMM<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">matrix</span><span class=\"br0\">(</span>#A<span class=\"br0\">[</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>#A<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>A<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"sy0\">/</span>B<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>powMM<span class=\"br0\">(</span>A<span class=\"sy0\">,</span>B<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">matrix</span><span class=\"br0\">(</span>#A<span class=\"br0\">[</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>#A<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>A<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"sy0\">^</span>B<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 32, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Elementwise<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Exporter <span class=\"st_h\">'import'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">use</span> overload<br/><span class=\"st_h\">'='</span>  <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/><span class=\"st_h\">'+'</span>  <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/><span class=\"st_h\">'-'</span>  <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">sub</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/><span class=\"st_h\">'*'</span>  <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">mul</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/><span class=\"st_h\">'/'</span>  <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">div</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/><span class=\"st_h\">'**'</span>  <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><a href=\"http://perldoc.perl.org/functions/exp.html\"><span class=\"kw3\">exp</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> <span class=\"kw2\">new</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$class</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"re0\">$v</span><span class=\"sy0\">,</span> <span class=\"re0\">$class</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> clone<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@ret</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"re0\">\\@ret</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> add <span class=\"br0\">{</span> <span class=\"kw2\">new</span> Elementwise <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span>  <span class=\"sy0\">+</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"co5\">$#</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span>  <span class=\"sy0\">+</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"co5\">$#</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"kw2\">new</span> Elementwise <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span>  <span class=\"sy0\">-</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"co5\">$#</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span>  <span class=\"sy0\">-</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"co5\">$#</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> mul <span class=\"br0\">{</span> <span class=\"kw2\">new</span> Elementwise <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span>  <span class=\"sy0\">*</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"co5\">$#</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span>  <span class=\"sy0\">*</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"co5\">$#</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> div <span class=\"br0\">{</span> <span class=\"kw2\">new</span> Elementwise <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span>  <span class=\"co2\">/ $_[1][$_] } 0 .. $#{$_[0]} ]\u00a0: [map { $_[0][$_]  /</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"co5\">$#</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> <a href=\"http://perldoc.perl.org/functions/exp.html\"><span class=\"kw3\">exp</span></a> <span class=\"br0\">{</span> <span class=\"kw2\">new</span> Elementwise <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">**</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"co5\">$#</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">**</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"co5\">$#</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"nu0\">1</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 34, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@a</span> <span class=\"sy0\">=</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> msay<span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"kw1\">x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">@</span><span class=\"kw1\">x</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@row</span> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">print</span> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"sy0\">%</span>1 <span class=\"sy0\">??</span> <span class=\"re0\">$_</span><span class=\"sy0\">.</span><span class=\"kw3\">nude</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">'/'</span><span class=\"br0\">)</span> <span class=\"sy0\">!!</span> <span class=\"re0\">$_</span> <span class=\"kw1\">for</span> <span class=\"re0\">@row</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">say</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">say</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>msay <span class=\"re0\">@a</span> \u00ab<span class=\"sy0\">+</span>\u00bb <span class=\"re0\">@a</span><span class=\"sy0\">;</span><br/>msay <span class=\"re0\">@a</span> \u00ab<span class=\"sy0\">-</span>\u00bb <span class=\"re0\">@a</span><span class=\"sy0\">;</span><br/>msay <span class=\"re0\">@a</span> \u00ab<span class=\"sy0\">*</span>\u00bb <span class=\"re0\">@a</span><span class=\"sy0\">;</span><br/>msay <span class=\"re0\">@a</span> \u00ab<span class=\"sy0\">/</span>\u00bb <span class=\"re0\">@a</span><span class=\"sy0\">;</span><br/>msay <span class=\"re0\">@a</span> \u00ab<span class=\"sy0\">+</span>\u00bb <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>msay <span class=\"re0\">@a</span> \u00ab<span class=\"sy0\">-</span>\u00bb <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>msay <span class=\"re0\">@a</span> \u00ab<span class=\"sy0\">*</span>\u00bb <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>msay <span class=\"re0\">@a</span> \u00ab<span class=\"sy0\">/</span>\u00bb <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>msay <span class=\"re0\">@a</span> \u00ab<span class=\"sy0\">+</span>\u00bb <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>msay <span class=\"re0\">@a</span> \u00ab<span class=\"sy0\">-</span>\u00bb <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>msay <span class=\"re0\">@a</span> \u00ab<span class=\"sy0\">*</span>\u00bb <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>msay <span class=\"re0\">@a</span> \u00ab<span class=\"sy0\">/</span>\u00bb <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># In addition to calling the underlying higher-order functions directly, it's possible to name a function.</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> infix<span class=\"sy0\">:&lt;</span>M<span class=\"sy0\">+&gt;</span> <span class=\"br0\">(</span>\\l<span class=\"sy0\">,</span>\\r<span class=\"br0\">)</span> <span class=\"br0\">{</span> l <span class=\"sy0\">&lt;&lt;+&gt;&gt;</span> r <span class=\"br0\">}</span><br/>\u00a0<br/>msay <span class=\"re0\">@a</span> M<span class=\"sy0\">+</span> <span class=\"re0\">@a</span><span class=\"sy0\">;</span><br/>msay <span class=\"re0\">@a</span> M<span class=\"sy0\">+</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>msay <span class=\"re0\">@a</span> M<span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Phix", "loc": 12, "block": "<pre class=\"text highlighted_source\">constant m = {{7, 8, 7},{4, 0, 9}},<br/>         m2 = {{4, 5, 1},{6, 2, 1}}<br/>?{m,\"+\",m2,\"=\",sq_add(m,m2)}<br/>?{m,\"-\",m2,\"=\",sq_sub(m,m2)}<br/>?{m,\"*\",m2,\"=\",sq_mul(m,m2)}<br/>?{m,\"/\",m2,\"=\",sq_div(m,m2)}<br/>?{m,\"^\",m2,\"=\",sq_power(m,m2)}<br/>?{m,\"+ 3 =\",sq_add(m,3)}<br/>?{m,\"- 3 =\",sq_sub(m,3)}<br/>?{m,\"* 3 =\",sq_mul(m,3)}<br/>?{m,\"/ 3 =\",sq_div(m,3)}<br/>?{m,\"^ 3 =\",sq_power(m,3)}</pre>"}, {"lang": "PicoLisp", "loc": 5, "block": "<pre class=\"text highlighted_source\">(de elementWiseMatrix (Fun Mat1 Mat2)<br/>   (mapcar '((L1 L2) (mapcar Fun L1 L2)) Mat1 Mat2) )<br/>\u00a0<br/>(de elementWiseScalar (Fun Mat Scalar)<br/>   (elementWiseMatrix Fun Mat (circ (circ Scalar))) )</pre>"}, {"lang": "PL/I", "loc": 9, "block": "<pre class=\"text highlighted_source\">declare (matrix(3,3), vector(3), scalar) fixed;<br/>declare (m(3,3), v(3) fixed;<br/>\u00a0<br/>m = scalar * matrix;<br/>m = vector * matrix;<br/>m = matrix * matrix;<br/>\u00a0<br/>v = scalar * vector;<br/>v = vector * vector;</pre>"}, {"lang": "Python", "loc": 43, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> <span class=\"kw3\">random</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">from</span> <span class=\"kw3\">operator</span> <span class=\"kw1\">import</span> add<span class=\"sy0\">,</span> sub<span class=\"sy0\">,</span> mul<span class=\"sy0\">,</span> floordiv<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">from</span> <span class=\"kw3\">pprint</span> <span class=\"kw1\">import</span> <span class=\"kw3\">pprint</span> <span class=\"kw1\">as</span> pp<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> ewise<span class=\"br0\">(</span>matrix1<span class=\"sy0\">,</span> matrix2<span class=\"sy0\">,</span> op<span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>op<span class=\"br0\">(</span>e1<span class=\"sy0\">,</span>e2<span class=\"br0\">)</span> <span class=\"kw1\">for</span> e1<span class=\"sy0\">,</span>e2 <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>row1<span class=\"sy0\">,</span> row2<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> row1<span class=\"sy0\">,</span>row2 <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>matrix1<span class=\"sy0\">,</span> matrix2<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> m<span class=\"sy0\">,</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span> \t<span class=\"co1\"># array dimensions</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> a0 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"kw3\">random</span>.<span class=\"me1\">randint</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> a1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"kw3\">random</span>.<span class=\"me1\">randint</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> pp<span class=\"br0\">(</span>a0<span class=\"br0\">)</span><span class=\"sy0\">;</span> pp<span class=\"br0\">(</span>a1<span class=\"br0\">)</span><br/><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> pp<span class=\"br0\">(</span>ewise<span class=\"br0\">(</span>a0<span class=\"sy0\">,</span> a1<span class=\"sy0\">,</span> add<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> pp<span class=\"br0\">(</span>ewise<span class=\"br0\">(</span>a0<span class=\"sy0\">,</span> a1<span class=\"sy0\">,</span> sub<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> -<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>-<span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> -<span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> pp<span class=\"br0\">(</span>ewise<span class=\"br0\">(</span>a0<span class=\"sy0\">,</span> a1<span class=\"sy0\">,</span> mul<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">28</span><span class=\"sy0\">,</span> <span class=\"nu0\">40</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">24</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">24</span><span class=\"sy0\">,</span> <span class=\"nu0\">72</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">36</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> pp<span class=\"br0\">(</span>ewise<span class=\"br0\">(</span>a0<span class=\"sy0\">,</span> a1<span class=\"sy0\">,</span> floordiv<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> pp<span class=\"br0\">(</span>ewise<span class=\"br0\">(</span>a0<span class=\"sy0\">,</span> a1<span class=\"sy0\">,</span> <span class=\"kw2\">pow</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">2401</span><span class=\"sy0\">,</span> <span class=\"nu0\">32768</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">4096</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4096</span><span class=\"sy0\">,</span> <span class=\"nu0\">43046721</span><span class=\"sy0\">,</span> <span class=\"nu0\">64</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">46656</span><span class=\"sy0\">,</span> <span class=\"nu0\">64</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> pp<span class=\"br0\">(</span>ewise<span class=\"br0\">(</span>a0<span class=\"sy0\">,</span> a1<span class=\"sy0\">,</span> <span class=\"kw1\">lambda</span> x<span class=\"sy0\">,</span> y:<span class=\"nu0\">2</span>*x - y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> -<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> s_ewise<span class=\"br0\">(</span>scalar1<span class=\"sy0\">,</span> matrix1<span class=\"sy0\">,</span> op<span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>op<span class=\"br0\">(</span>scalar1<span class=\"sy0\">,</span> e1<span class=\"br0\">)</span> <span class=\"kw1\">for</span> e1 <span class=\"kw1\">in</span> row1<span class=\"br0\">]</span> <span class=\"kw1\">for</span> row1 <span class=\"kw1\">in</span> matrix1<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> scalar <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> a0<br/><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">for</span> op <span class=\"kw1\">in</span> <span class=\"br0\">(</span> add<span class=\"sy0\">,</span> sub<span class=\"sy0\">,</span> mul<span class=\"sy0\">,</span> floordiv<span class=\"sy0\">,</span> <span class=\"kw2\">pow</span><span class=\"sy0\">,</span> <span class=\"kw1\">lambda</span> x<span class=\"sy0\">,</span> y:<span class=\"nu0\">2</span>*x - y <span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"%10s\u00a0:\"</span>\u00a0% op.__name__<span class=\"sy0\">,</span> s_ewise<span class=\"br0\">(</span>scalar<span class=\"sy0\">,</span> a0<span class=\"sy0\">,</span> op<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>       add\u00a0: <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>       sub\u00a0: <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>       mul\u00a0: <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">70</span><span class=\"sy0\">,</span> <span class=\"nu0\">80</span><span class=\"sy0\">,</span> <span class=\"nu0\">70</span><span class=\"sy0\">,</span> <span class=\"nu0\">40</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">40</span><span class=\"sy0\">,</span> <span class=\"nu0\">90</span><span class=\"sy0\">,</span> <span class=\"nu0\">40</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">30</span><span class=\"sy0\">,</span> <span class=\"nu0\">60</span><span class=\"sy0\">,</span> <span class=\"nu0\">40</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  floordiv\u00a0: <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>       <span class=\"kw2\">pow</span>\u00a0: <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">10000000</span><span class=\"sy0\">,</span> <span class=\"nu0\">100000000</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000000</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">10000</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000000000</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"sy0\">&lt;</span>lambda<span class=\"sy0\">&gt;</span>\u00a0: <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">19</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">18</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "R", "loc": 12, "block": "<pre class=\"text highlighted_source\"># create a 2-times-2 matrix<br/>mat &lt;- matrix(1:4, 2, 2)<br/>\u00a0<br/># matrix with scalar<br/>mat + 2<br/>mat * 2<br/>mat ^ 2<br/>\u00a0<br/># matrix with matrix<br/>mat + mat<br/>mat * mat<br/>mat ^ mat</pre>"}, {"lang": "Racket", "loc": 13, "block": "<pre class=\"text highlighted_source\">#lang racket(require math/array)<br/>\u00a0<br/>(define mat (list-&gt;array #(2 2) '(1 3 2 4)))<br/>\u00a0<br/>mat<br/>(array+ mat (array 2))<br/>(array* mat (array 2))<br/>(array-map expt mat (array 2))<br/>\u00a0<br/>(array+ mat mat)<br/>(array* mat mat)<br/>(array-map expt mat mat)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 31, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  multiplies two matrixes together, displays the  matrixes and the result.*/</span><br/>m=<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>  <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span>  <span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>w=<span class=\"kw6\">words</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span>;               <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>;  <span class=\"kw1\">if</span> k<span class=\"sy0\">*</span>k<span class=\"sy0\">&gt;</span>=w  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span>;     rows=k;  cols=k<br/><span class=\"kw1\">call</span> showMat  M, <span class=\"st0\">'M matrix'</span><br/>answer=matAdd<span class=\"br0\">(</span>m, <span class=\"nu0\">2</span>  <span class=\"br0\">)</span>;    <span class=\"kw1\">call</span> showMat  answer, <span class=\"st0\">'M matrix, added 2'</span><br/>answer=matSub<span class=\"br0\">(</span>m, <span class=\"nu0\">7</span>  <span class=\"br0\">)</span>;    <span class=\"kw1\">call</span> showMat  answer, <span class=\"st0\">'M matrix, subtracted 7'</span><br/>answer=matMul<span class=\"br0\">(</span>m, <span class=\"nu0\">2.5</span><span class=\"br0\">)</span>;    <span class=\"kw1\">call</span> showMat  answer, <span class=\"st0\">'M matrix, multiplied by 2\u00bd'</span><br/>answer=matPow<span class=\"br0\">(</span>m, <span class=\"nu0\">3</span>  <span class=\"br0\">)</span>;    <span class=\"kw1\">call</span> showMat  answer, <span class=\"st0\">'M matrix, cubed'</span><br/>answer=matDiv<span class=\"br0\">(</span>m, <span class=\"nu0\">4</span>  <span class=\"br0\">)</span>;    <span class=\"kw1\">call</span> showMat  answer, <span class=\"st0\">'M matrix, divided by 4'</span><br/>answer=matIdv<span class=\"br0\">(</span>m, <span class=\"nu0\">2</span>  <span class=\"br0\">)</span>;    <span class=\"kw1\">call</span> showMat  answer, <span class=\"st0\">'M matrix, integer halved'</span><br/>answer=matMod<span class=\"br0\">(</span>m, <span class=\"nu0\">3</span>  <span class=\"br0\">)</span>;    <span class=\"kw1\">call</span> showMat  answer, <span class=\"st0\">'M matrix, modulus 3'</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>matAdd:   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> @,#;  <span class=\"kw1\">call</span> mat#;    <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> w;\u00a0!<span class=\"sy0\">.</span>j=!<span class=\"sy0\">.</span>j+#;     <span class=\"kw3\">end</span>;   <span class=\"kw1\">return</span> <a class=\"__cf_email__\" data-cfemail=\"523f332612\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>matSub:   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> @,#;  <span class=\"kw1\">call</span> mat#;    <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> w;\u00a0!<span class=\"sy0\">.</span>j=!<span class=\"sy0\">.</span>j-#;     <span class=\"kw3\">end</span>;   <span class=\"kw1\">return</span> <a class=\"__cf_email__\" data-cfemail=\"066b677246\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>matMul:   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> @,#;  <span class=\"kw1\">call</span> mat#;    <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> w;\u00a0!<span class=\"sy0\">.</span>j=!<span class=\"sy0\">.</span>j<span class=\"sy0\">*</span>#;     <span class=\"kw3\">end</span>;   <span class=\"kw1\">return</span> <a class=\"__cf_email__\" data-cfemail=\"e08d8194a0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>matDiv:   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> @,#;  <span class=\"kw1\">call</span> mat#;    <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> w;\u00a0!<span class=\"sy0\">.</span>j=!<span class=\"sy0\">.</span>j<span class=\"sy0\">/</span>#;     <span class=\"kw3\">end</span>;   <span class=\"kw1\">return</span> <a class=\"__cf_email__\" data-cfemail=\"7d101c093d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>matIdv:   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> @,#;  <span class=\"kw1\">call</span> mat#;    <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> w;\u00a0!<span class=\"sy0\">.</span>j=!<span class=\"sy0\">.</span>j%#;     <span class=\"kw3\">end</span>;   <span class=\"kw1\">return</span> <a class=\"__cf_email__\" data-cfemail=\"721f130632\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>matPow:   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> @,#;  <span class=\"kw1\">call</span> mat#;    <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> w;\u00a0!<span class=\"sy0\">.</span>j=!<span class=\"sy0\">.</span>j<span class=\"sy0\">**</span>#;    <span class=\"kw3\">end</span>;   <span class=\"kw1\">return</span> <a class=\"__cf_email__\" data-cfemail=\"630e021723\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>matMod:   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> @,#;  <span class=\"kw1\">call</span> mat#;    <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> w;\u00a0!<span class=\"sy0\">.</span>j=!<span class=\"sy0\">.</span>j<span class=\"sy0\">//</span>#;    <span class=\"kw3\">end</span>;   <span class=\"kw1\">return</span> <a class=\"__cf_email__\" data-cfemail=\"204d415460\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>mat#:     w=<span class=\"kw6\">words</span><span class=\"br0\">(</span>@<span class=\"br0\">)</span>;                   <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> w;\u00a0!<span class=\"sy0\">.</span>j=<span class=\"kw6\">word</span><span class=\"br0\">(</span>@,j<span class=\"br0\">)</span>; <span class=\"kw3\">end</span>;   <span class=\"kw1\">return</span><br/><a class=\"__cf_email__\" data-cfemail=\"f29f9386b2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:     @=!<span class=\"sy0\">.</span>1;                        <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>   <span class=\"kw2\">to</span> w; @<a class=\"__cf_email__\" data-cfemail=\"033e43\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0!<span class=\"sy0\">.</span>j;       <span class=\"kw3\">end</span>;   <span class=\"kw1\">return</span> @<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>showMat:  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> @, hdr; L=<span class=\"nu0\">0</span>;  <span class=\"kw1\">say</span><br/>                                        <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> w;  L=<span class=\"kw6\">max</span><span class=\"br0\">(</span>L,<span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>@,j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"kw3\">end</span><br/>          <span class=\"kw1\">say</span>  <span class=\"kw6\">center</span><span class=\"br0\">(</span>hdr, <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>hdr<span class=\"br0\">)</span>+<span class=\"nu0\">4</span>, cols<span class=\"sy0\">*</span><span class=\"br0\">(</span>L+<span class=\"nu0\">1</span><span class=\"br0\">)</span>+<span class=\"nu0\">4</span><span class=\"br0\">)</span>, <span class=\"st0\">\"\u2500\"</span><span class=\"br0\">)</span><br/>          n=<span class=\"nu0\">0</span><br/>                    <span class=\"kw1\">do</span> r    =<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> rows;         _=<br/>                        <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> cols; n=n+<span class=\"nu0\">1</span>;  _=_ <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>@,n<span class=\"br0\">)</span>,L<span class=\"br0\">)</span>; <span class=\"kw3\">end</span>;    <span class=\"kw1\">say</span> _<br/>                    <span class=\"kw3\">end</span><br/>          <span class=\"kw1\">return</span></pre>"}, {"lang": "Ruby", "loc": 16, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'matrix'</span><br/>\u00a0<br/><span class=\"kw1\">class</span> <span class=\"kw4\">Matrix</span><br/>  <span class=\"kw1\">def</span> element_wise<span class=\"br0\">(</span> operator, other <span class=\"br0\">)</span><br/>    <span class=\"kw4\">Matrix</span>.<span class=\"me1\">build</span><span class=\"br0\">(</span>row_size, column_size<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>row, col<span class=\"sy0\">|</span><br/>      <span class=\"kw2\">self</span><span class=\"br0\">[</span>row, col<span class=\"br0\">]</span>.<span class=\"me1\">send</span><span class=\"br0\">(</span>operator, other<span class=\"br0\">[</span>row, col<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>m1, m2 = <span class=\"kw4\">Matrix</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">4</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span>, <span class=\"kw4\">Matrix</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">8</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"m1: #{m1}<span class=\"es0\">\\n</span>m2: #{m2}<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><br/>\u00a0<br/><span class=\"br0\">[</span>:<span class=\"sy0\">+</span>,\u00a0:<span class=\"sy0\">-</span>,\u00a0:<span class=\"sy0\">*</span>,\u00a0:<span class=\"sy0\">/</span>, <span class=\"re3\">:fdiv</span>,\u00a0:<span class=\"sy0\">**</span>,\u00a0:<span class=\"sy0\">%</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>op<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"m1\u00a0%-4s m2  = \u00a0%s\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>op, m1.<span class=\"me1\">element_wise</span><span class=\"br0\">(</span>op, m2<span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 135, "block": "<pre class=\"text highlighted_source\">struct Matrix {<br/>    elements: Vec&lt;f32&gt;,<br/>    pub height: u32,<br/>    pub width: u32,<br/>}<br/>\u00a0<br/>impl Matrix {<br/>    fn new(elements: Vec&lt;f32&gt;, height: u32, width: u32) -&gt; Matrix {<br/>        // Should check for dimensions but omitting to be succient<br/>        Matrix {<br/>            elements: elements,<br/>            height: height,<br/>            width: width,<br/>        }<br/>    }<br/>\u00a0<br/>    fn get(&amp;self, row: u32, col: u32) -&gt; f32 {<br/>        let row = row as usize;<br/>        let col = col as usize;<br/>        self.elements[col + row * (self.width as usize)]<br/>    }<br/>\u00a0<br/>    fn set(&amp;mut self, row: u32, col: u32, value: f32) {<br/>        let row = row as usize;<br/>        let col = col as usize;<br/>        self.elements[col + row * (self.width as usize)] = value;<br/>    }<br/>\u00a0<br/>    fn print(&amp;self) {<br/>        for row in 0..self.height {<br/>            for col in 0..self.width {<br/>                print!(\"{:3.0}\", self.get(row, col));<br/>            }<br/>            println!(\"\");<br/>        }<br/>        println!(\"\");<br/>    }<br/>}<br/>\u00a0<br/>// Matrix addition will perform element-wise addition<br/>fn matrix_addition(first: &amp;Matrix, second: &amp;Matrix) -&gt; Result&lt;Matrix, String&gt; {<br/>    if first.width == second.width &amp;&amp; first.height == second.height {<br/>        let mut result = Matrix::new(vec![0.0f32; (first.height * first.width) as usize],<br/>                                     first.height,<br/>                                     first.width);<br/>        for row in 0..first.height {<br/>            for col in 0..first.width {<br/>                let first_value = first.get(row, col);<br/>                let second_value = second.get(row, col);<br/>                result.set(row, col, first_value + second_value);<br/>            }<br/>        }<br/>        Ok(result)<br/>    } else {<br/>        Err(\"Dimensions don't match\".to_owned())<br/>    }<br/>}<br/>\u00a0<br/>fn scalar_multiplication(scalar: f32, matrix: &amp;Matrix) -&gt; Matrix {<br/>    let mut result = Matrix::new(vec![0.0f32; (matrix.height * matrix.width) as usize],<br/>                                 matrix.height,<br/>                                 matrix.width);<br/>    for row in 0..matrix.height {<br/>        for col in 0..matrix.width {<br/>            let value = matrix.get(row, col);<br/>            result.set(row, col, scalar * value);<br/>        }<br/>    }<br/>    result<br/>}<br/>\u00a0<br/>// Subtract second from first<br/>fn matrix_subtraction(first: &amp;Matrix, second: &amp;Matrix) -&gt; Result&lt;Matrix, String&gt; {<br/>    if first.width == second.width &amp;&amp; first.height == second.height {<br/>        let negative_matrix = scalar_multiplication(-1.0, second);<br/>        let result = matrix_addition(first, &amp;negative_matrix).unwrap();<br/>        Ok(result)<br/>    } else {<br/>        Err(\"Dimensions don't match\".to_owned())<br/>    }<br/>}<br/>\u00a0<br/>// First must be a l x m matrix and second a m x n matrix for this to work.<br/>fn matrix_multiplication(first: &amp;Matrix, second: &amp;Matrix) -&gt; Result&lt;Matrix, String&gt; {<br/>    if first.width == second.height {<br/>        let mut result = Matrix::new(vec![0.0f32; (first.height * second.width) as usize],<br/>                                     first.height,<br/>                                     second.width);<br/>        for row in 0..result.height {<br/>            for col in 0..result.width {<br/>                let mut value = 0.0;<br/>                for it in 0..first.width {<br/>                    value += first.get(row, it) * second.get(it, col);<br/>                }<br/>                result.set(row, col, value);<br/>            }<br/>        }<br/>        Ok(result)<br/>    } else {<br/>        Err(\"Dimensions don't match. Width of first must equal height of second\".to_owned())<br/>    }<br/>}<br/>\u00a0<br/>\u00a0<br/>fn main() {<br/>    let height = 2;<br/>    let width = 3;<br/>    // Matrix will look like:<br/>    // | 1.0  2.0  3.0  |<br/>    // | 4.0  5.0  6.0 |<br/>    let matrix1 = Matrix::new(vec![1.0, 2.0, 3.0, 4.0, 5.0, 6.0], height, width);<br/>\u00a0<br/>    // Matrix will look like:<br/>    // | 6.0  5.0  4.0  |<br/>    // | 3.0  2.0  1.0 |<br/>    let matrix2 = Matrix::new(vec![6.0, 5.0, 4.0, 3.0, 2.0, 1.0], height, width);<br/>\u00a0<br/>    // | 7.0  7.0  7.0  |<br/>    // | 7.0  7.0  7.0 |<br/>    matrix_addition(&amp;matrix1, &amp;matrix2).unwrap().print();<br/>    // | 2.0   4.0   6.0  |<br/>    // | 8.0  10.0  12.0 |<br/>    scalar_multiplication(2.0, &amp;matrix1).print();<br/>    // | -5.0  -3.0  -1.0  |<br/>    // |  1.0   3.0   5.0 |<br/>    matrix_subtraction(&amp;matrix1, &amp;matrix2).unwrap().print();<br/>\u00a0<br/>    // | 1.0 |<br/>    // | 1.0 |<br/>    // | 1.0 |<br/>    let matrix3 = Matrix::new(vec![1.0, 1.0, 1.0], width, 1);<br/>    // |  6 |<br/>    // | 15 |<br/>    matrix_multiplication(&amp;matrix1, &amp;matrix3).unwrap().print();<br/>}</pre>"}, {"lang": "Sidef", "loc": 25, "block": "<pre class=\"ruby highlighted_source\">var m1 = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">4</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>var m2 = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">8</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>say <span class=\"st0\">\":: Matrix-matrix operations\"</span><br/>say <span class=\"br0\">(</span>m1 ~W<span class=\"sy0\">+</span>  m2<span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span>m1 ~W<span class=\"sy0\">-</span>  m2<span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span>m1 ~W<span class=\"sy0\">*</span>  m2<span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span>m1 ~W<span class=\"sy0\">/</span>  m2<span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span>m1 ~W<span class=\"sy0\">//</span> m2<span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span>m1 ~W<span class=\"sy0\">**</span> m2<span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span>m1 ~W<span class=\"sy0\">%</span>  m2<span class=\"br0\">)</span><br/>\u00a0<br/>say <span class=\"st0\">\"<span class=\"es0\">\\n</span>:: Matrix-scalar operations\"</span><br/>say <span class=\"br0\">(</span>m1 ~S<span class=\"sy0\">+</span>  <span class=\"nu0\">42</span><span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span>m1 ~S<span class=\"sy0\">-</span>  <span class=\"nu0\">42</span><span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span>m1 ~S<span class=\"sy0\">/</span>  <span class=\"nu0\">42</span><span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span>m1 ~S<span class=\"sy0\">**</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"co1\"># ...</span><br/>\u00a0<br/>say <span class=\"st0\">\"<span class=\"es0\">\\n</span>:: Scalar-matrix operations\"</span><br/>say <span class=\"br0\">(</span>m1 ~RS<span class=\"sy0\">+</span>  <span class=\"nu0\">42</span><span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span>m1 ~RS<span class=\"sy0\">-</span>  <span class=\"nu0\">42</span><span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span>m1 ~RS<span class=\"sy0\">/</span>  <span class=\"nu0\">42</span><span class=\"br0\">)</span><br/>say <span class=\"br0\">(</span>m1 ~RS<span class=\"sy0\">**</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"co1\"># ...</span></pre>"}, {"lang": "Stata", "loc": 17, "block": "<pre class=\"text highlighted_source\">mata<br/>a = rnormal(5,5,0,1)<br/>b = 2<br/>a:+b<br/>a:-b<br/>a:*b<br/>a:/b<br/>a:^b<br/>\u00a0<br/>a = rnormal(5,5,0,1)<br/>b = rnormal(5,1,0,1)<br/>a:+b<br/>a:-b<br/>a:*b<br/>a:/b<br/>a:^b<br/>end</pre>"}, {"lang": "Tcl", "loc": 40, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">proc</span> alias <span class=\"br0\">{</span>name args<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">uplevel</span> <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw2\">interp</span> alias <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"re0\">$name</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$args</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Engine for elementwise operations between matrices</span><br/><span class=\"kw1\">proc</span> elementwiseMatMat <span class=\"br0\">{</span>lambda A B<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> C <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> rA <span class=\"re0\">$A</span> rB <span class=\"re0\">$B</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> rC <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">foreach</span> vA <span class=\"re0\">$rA</span> vB <span class=\"re0\">$rB</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> rC <span class=\"br0\">[</span>apply <span class=\"re0\">$lambda</span> <span class=\"re0\">$vA</span> <span class=\"re0\">$vB</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">lappend</span> C <span class=\"re0\">$rC</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$C</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># Lift some basic math ops</span><br/>alias m+  elementwiseMatMat <span class=\"br0\">{</span><span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span>+<span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>alias m-  elementwiseMatMat <span class=\"br0\">{</span><span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span>-<span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>alias m<span class=\"sy0\">*</span>  elementwiseMatMat <span class=\"br0\">{</span><span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"sy0\">*</span><span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>alias m/  elementwiseMatMat <span class=\"br0\">{</span><span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span>/<span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>alias m<span class=\"sy0\">**</span> elementwiseMatMat <span class=\"br0\">{</span><span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"sy0\">**</span><span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Engine for elementwise operations between a matrix and a scalar</span><br/><span class=\"kw1\">proc</span> elementwiseMatSca <span class=\"br0\">{</span>lambda A b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> C <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> rA <span class=\"re0\">$A</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> rC <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">foreach</span> vA <span class=\"re0\">$rA</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> rC <span class=\"br0\">[</span>apply <span class=\"re0\">$lambda</span> <span class=\"re0\">$vA</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">lappend</span> C <span class=\"re0\">$rC</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$C</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># Lift some basic math ops</span><br/>alias .+  elementwiseMatSca <span class=\"br0\">{</span><span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span>+<span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>alias .-  elementwiseMatSca <span class=\"br0\">{</span><span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span>-<span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>alias .<span class=\"sy0\">*</span>  elementwiseMatSca <span class=\"br0\">{</span><span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"sy0\">*</span><span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>alias ./  elementwiseMatSca <span class=\"br0\">{</span><span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span>/<span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>alias .<span class=\"sy0\">**</span> elementwiseMatSca <span class=\"br0\">{</span><span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"sy0\">**</span><span class=\"re0\">$b</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 12, "block": "<pre class=\"text highlighted_source\">var [const] GSL=Import(\"zklGSL\");\t// libGSL (GNU Scientific Library)<br/>M:=GSL.Matrix(3,3).set(3,5,7, 1,2,3, 2,4,6);<br/>x:=2;<br/>println(\"M = \\n%s\\nx =\u00a0%s\".fmt(M.format(),x));<br/>foreach op in (T('+,'-,'*,'/)){<br/>   println(\"M\u00a0%s x:\\n%s\\n\".fmt(op.toString()[3,1],op(M.copy(),x).format()));<br/>}<br/>foreach op in (T(\"addElements\",\"subElements\",\"mulElements\",\"divElements\")){<br/>   println(\"M\u00a0%s M:\\n%s\\n\".fmt(op, M.copy().resolve(op)(M).format()));<br/>}<br/>mSqrd:=M.pump(0,M.copy(),fcn(x){ x*x });  // M element by element<br/>println(\"M square elements:\\n%s\\n\".fmt(mSqrd.format()));</pre>"}]}