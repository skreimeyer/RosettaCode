{"task": "Real_constants_and_functions", "blocks": [{"lang": "ACL2", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>floor <span class=\"nu0\">15</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">;; This is the floor of 15/2</span><br/><span class=\"br0\">(</span>ceiling <span class=\"nu0\">15</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">15</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">;; 15 squared</span></pre>"}, {"lang": "ActionScript", "loc": 9, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw3\">Math</span>.<span class=\"kw3\">E</span>;       <span class=\"co1\">//e</span><br/><span class=\"kw3\">Math</span>.<span class=\"kw3\">PI</span>;      <span class=\"co1\">//pi</span><br/><span class=\"kw3\">Math</span>.<span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span>; <span class=\"co1\">//square root of u</span><br/><span class=\"kw3\">Math</span>.<span class=\"kw3\">log</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span>;  <span class=\"co1\">//natural logarithm of u</span><br/><span class=\"kw3\">Math</span>.<span class=\"kw3\">exp</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span>;  <span class=\"co1\">//e to the power of u</span><br/><span class=\"kw3\">Math</span>.<span class=\"kw3\">abs</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span>;  <span class=\"co1\">//absolute value of u</span><br/><span class=\"kw3\">Math</span>.<span class=\"kw3\">floor</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span>;<span class=\"co1\">//floor of u</span><br/><span class=\"kw3\">Math</span>.<span class=\"kw3\">ceil</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span>; <span class=\"co1\">//ceiling of u</span><br/><span class=\"kw3\">Math</span>.<span class=\"kw3\">pow</span><span class=\"br0\">(</span>u,v<span class=\"br0\">)</span>;<span class=\"co1\">//u to the power of v</span></pre>"}, {"lang": "Ada", "loc": 9, "block": "<pre class=\"ada highlighted_source\">Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">e</span>  <span class=\"co1\">-- Euler's number</span><br/>Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">pi</span> <span class=\"co1\">-- pi</span><br/>sqrt<span class=\"br0\">(</span>x<span class=\"br0\">)</span>         <span class=\"co1\">-- square root</span><br/>log<span class=\"br0\">(</span>x, base<span class=\"br0\">)</span>    <span class=\"co1\">-- logarithm to any specified base</span><br/>exp<span class=\"br0\">(</span>x<span class=\"br0\">)</span>          <span class=\"co1\">-- exponential</span><br/><span class=\"kw2\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>          <span class=\"co1\">-- absolute value</span><br/>S'floor<span class=\"br0\">(</span>x<span class=\"br0\">)</span>      <span class=\"co1\">-- Produces the floor of an instance of subtype S</span><br/>S'ceiling<span class=\"br0\">(</span>x<span class=\"br0\">)</span>    <span class=\"co1\">-- Produces the ceiling of an instance of subtype S</span><br/>x**y            <span class=\"co1\">-- x raised to the y power</span></pre>"}, {"lang": "Aime", "loc": 12, "block": "<pre class=\"text highlighted_source\"># e<br/>exp(1);<br/># pi<br/>2 * asin(1);<br/>\u00a0<br/>sqrt(x);<br/>log(x);<br/>exp(x);<br/>fabs(x);<br/>floor(x);<br/>ceil(x);<br/>pow(x, y);</pre>"}, {"lang": "ALGOL 68", "loc": 13, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw3\">REAL</span> x<span class=\"sy1\">:=</span><span class=\"kw24\">exp</span><span class=\"br0\">(</span>1<span class=\"br0\">)</span><span class=\"sy1\">,</span> y<span class=\"sy1\">:=</span>4<span class=\"sy1\">*</span>atan<span class=\"br0\">(</span>1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$g<span class=\"br0\">(</span><span class=\"sy1\">-</span>8<span class=\"sy1\">,</span>5<span class=\"br0\">)</span><span class=\"st0\">\"; \"</span>$<span class=\"sy1\">,</span><br/>    <span class=\"kw24\">exp</span><span class=\"br0\">(</span>1<span class=\"br0\">)</span><span class=\"sy1\">,</span>    <span class=\"coMULTI\"># e #</span><br/>    <span class=\"kw23\">pi</span><span class=\"sy1\">,</span>        <span class=\"coMULTI\"># pi #</span><br/>    <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">,</span>   <span class=\"coMULTI\"># square root #</span><br/>    <span class=\"kw24\">log</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">,</span>    <span class=\"coMULTI\"># logarithm base 10 #</span><br/>    <span class=\"kw24\">ln</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">,</span>     <span class=\"coMULTI\"># natural logarithm #</span><br/>    <span class=\"kw24\">exp</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">,</span>    <span class=\"coMULTI\"># exponential #</span><br/>    <span class=\"kw8\">ABS</span> x<span class=\"sy1\">,</span>     <span class=\"coMULTI\"># absolute value #</span><br/>    <span class=\"kw8\">ENTIER</span> x<span class=\"sy1\">,</span>  <span class=\"coMULTI\"># floor #</span><br/>   <span class=\"sy1\">-</span><span class=\"kw8\">ENTIER</span> <span class=\"sy1\">-</span>x<span class=\"sy1\">,</span> <span class=\"coMULTI\"># ceiling #</span><br/>    x <span class=\"sy1\">**</span> y     <span class=\"coMULTI\"># power #</span><br/><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 17, "block": "<pre class=\"text highlighted_source\">begin<br/>    real t, u;<br/>    t\u00a0:= 10;<br/>    u\u00a0:= -2.3;<br/>    i_w\u00a0:= 4; s_w\u00a0:= 0; r_format\u00a0:= \"A\"; r_d\u00a0:= 4; r_w\u00a0:= 9;\u00a0% set output format\u00a0%<br/>    write( \"         e: \", exp( 1 ) );        \u00a0% e             \u00a0%<br/>    write( \"        pi: \", pi );              \u00a0% pi            \u00a0%<br/>    write( \"    root t: \", sqrt( t ) );       \u00a0% square root   \u00a0%<br/>    write( \"     log t: \", log( t ) );        \u00a0% log base 10   \u00a0%<br/>    write( \"      ln t: \", ln( t ) );         \u00a0% log base e    \u00a0%<br/>    write( \"     exp u: \", exp( u ) );        \u00a0% exponential   \u00a0%<br/>    write( \"     abs u: \", abs u );           \u00a0% absolute value\u00a0%<br/>    write( \"  floor pi: \", entier( pi ) );    \u00a0% floor         \u00a0%<br/>    write( \"ceiling pi: \", - entier( - pi ) );\u00a0% ceiling       \u00a0%<br/>   \u00a0% the raise-to-the-power operator is \"**\" - it only allows integers for the power\u00a0%<br/>    write( \"  pi cubed: \", pi ** 3 )\u00a0% use exp( ln( x ) * y ) for general x^y\u00a0%<br/>end.</pre>"}, {"lang": "AutoHotkey", "loc": 8, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Sqrt</span></a><span class=\"br0\">(</span>Number<span class=\"br0\">)</span> <span class=\"co1\">; square root</span><br/><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Log</span></a><span class=\"br0\">(</span>Number<span class=\"br0\">)</span> <span class=\"co1\">; logarithm (base 10)</span><br/><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Ln</span></a><span class=\"br0\">(</span>Number<span class=\"br0\">)</span> <span class=\"co1\">; natural logarithm (base e)</span><br/><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Exp</span></a><span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"co1\">; e to the power N</span><br/><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Abs</span></a><span class=\"br0\">(</span>Number<span class=\"br0\">)</span> <span class=\"co1\">; absolute value</span><br/><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Floor</span></a><span class=\"br0\">(</span>Number<span class=\"br0\">)</span> <span class=\"co1\">; floor</span><br/><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Ceil</span></a><span class=\"br0\">(</span>Number<span class=\"br0\">)</span> <span class=\"co1\">; ceiling</span><br/>x<span class=\"sy0\">**</span>y <span class=\"co1\">; x to the power y</span></pre>"}, {"lang": "AWK", "loc": 7, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw5\">print</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>\t\t<span class=\"co1\"># square root</span><br/>\t<span class=\"kw5\">print</span> <span class=\"kw4\">log</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>\t\t<span class=\"co1\"># logarithm base e</span><br/>\t<span class=\"kw5\">print</span> <span class=\"kw4\">exp</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>\t\t<span class=\"co1\"># exponential</span><br/>\t<span class=\"kw5\">print</span> <span class=\"nu0\">2</span> <span class=\"sy3\">^</span> <span class=\"sy3\">-</span><span class=\"nu0\">3.4</span>\t\t<span class=\"co1\"># power</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># outputs 1.41421, 0.693147, 7.38906, 0.0947323</span></pre>"}, {"lang": "Axe", "loc": 1, "block": "<pre class=\"text highlighted_source\">\u221a(X)</pre>"}, {"lang": "BASIC", "loc": 6, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckabs.shtml\"><span class=\"kw3\">ABS</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"co1\">'absolute value</span><br/><a href=\"http://www.qbasicnews.com/qboho/qcksqr.shtml\"><span class=\"kw3\">SQR</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"co1\">'square root</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckexp.shtml\"><span class=\"kw3\">EXP</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"co1\">'exponential</span><br/><a href=\"http://www.qbasicnews.com/qboho/qcklog.shtml\"><span class=\"kw3\">LOG</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"co1\">'natural logarithm</span><br/>x <span class=\"sy0\">^</span> y <span class=\"co1\">'power</span><br/><span class=\"co1\">'floor, ceiling, e, and pi not available</span></pre>"}, {"lang": "BBC BASIC", "loc": 14, "block": "<pre class=\"text highlighted_source\">      e = EXP(1)<br/>      Pi = PI<br/>      Sqr2 = SQR(2)<br/>      Ln2 = LN(2)<br/>      Log2 = LOG(2)\u00a0: REM Base 10<br/>      Exp2 = EXP(2)<br/>      Abs2 = ABS(-2)<br/>      Floor = INT(1.234)<br/>      Ceil = FNceil(1.234)<br/>      Power = 1.23^4<br/>      END<br/>\u00a0<br/>      DEF FNceil(n) = INT(n) - (INT(n) &lt;&gt; n)<br/>\u00a0</pre>"}, {"lang": "bc", "loc": 3, "block": "<pre class=\"text highlighted_source\">scale = 6<br/>sqrt(2)\t\t/* 1.414213\tsquare root */<br/>4.3 ^ -2\t/* .054083\tpower (integer exponent) */</pre>"}, {"lang": "blz", "loc": 1, "block": "<pre class=\"text highlighted_source\">{e}</pre>"}, {"lang": "Bracmat", "loc": 1, "block": "<pre class=\"text highlighted_source\">x \\D (10^x) { \\D is the differentiation operator }</pre>"}, {"lang": "C", "loc": 12, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/>M_E<span class=\"sy0\">;</span> <span class=\"coMULTI\">/* e - not standard but offered by most implementations */</span><br/>M_PI<span class=\"sy0\">;</span> <span class=\"coMULTI\">/* pi - not standard but offered by most implementations */</span><br/><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* square root--cube root also available in C99 (cbrt) */</span><br/><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/log.html\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* natural logarithm--log base 10 also available (log10) */</span><br/><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exp.html\"><span class=\"kw3\">exp</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* exponential */</span><br/><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* absolute value (for integers) */</span><br/><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fabs.html\"><span class=\"kw3\">fabs</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* absolute value (for doubles) */</span><br/><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/floor.html\"><span class=\"kw3\">floor</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* floor */</span><br/><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/ceil.html\"><span class=\"kw3\">ceil</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* ceiling */</span><br/><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/pow.html\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* power */</span></pre>"}, {"lang": "C++", "loc": 28, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/>\u00a0<br/><span class=\"co2\">#ifdef M_E</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">double</span> euler_e <span class=\"sy1\">=</span> M_E<span class=\"sy4\">;</span><br/><span class=\"co2\">#else</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">double</span> euler_e <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"kw3\">exp</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// standard fallback</span><br/><span class=\"co2\">#endif</span><br/>\u00a0<br/><span class=\"co2\">#ifdef M_PI</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">double</span> pi <span class=\"sy1\">=</span> M_PI<span class=\"sy4\">;</span><br/><span class=\"co2\">#else</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">double</span> pi <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"kw3\">acos</span><span class=\"br0\">(</span><span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"co2\">#endif</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"e = \"</span> <span class=\"sy1\">&lt;&lt;</span> euler_e<br/>            <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>pi = \"</span> <span class=\"sy1\">&lt;&lt;</span> pi<br/>            <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>sqrt(2) = \"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"nu16\">2.0</span><span class=\"br0\">)</span><br/>            <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>ln(e) = \"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"kw3\">log</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><br/>            <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>lg(100) = \"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"kw3\">log10</span><span class=\"br0\">(</span><span class=\"nu16\">100.0</span><span class=\"br0\">)</span><br/>            <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>exp(3) = \"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"kw3\">exp</span><span class=\"br0\">(</span><span class=\"nu16\">3.0</span><span class=\"br0\">)</span><br/>            <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>|-4.5| = \"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"kw3\">abs</span><span class=\"br0\">(</span><span class=\"sy2\">-</span><span class=\"nu16\">4.5</span><span class=\"br0\">)</span>   <span class=\"co1\">// or std::fabs(4.0); both work in C++</span><br/>            <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>floor(4.5) = \"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"kw3\">floor</span><span class=\"br0\">(</span><span class=\"nu16\">4.5</span><span class=\"br0\">)</span><br/>            <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>ceiling(4.5) = \"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"kw3\">ceil</span><span class=\"br0\">(</span><span class=\"nu16\">4.5</span><span class=\"br0\">)</span><br/>            <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>pi^2 = \"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"kw3\">pow</span><span class=\"br0\">(</span>pi,<span class=\"nu16\">2.0</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 16, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span>        <br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">E</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//E</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">PI</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//PI</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//Square Root</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Log</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Logarithm</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Log10</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Base 10 Logarithm</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Exp</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Exponential</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Abs</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//Absolute value</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Floor</span><span class=\"br0\">(</span><span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//Floor</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Ceiling</span><span class=\"br0\">(</span><span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//Ceiling</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Exponentiation</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Chef", "loc": 9, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>Math/E<span class=\"br0\">)</span><span class=\"co1\">; //e</span><br/><span class=\"br0\">(</span>Math/PI<span class=\"br0\">)</span><span class=\"co1\">; //pi</span><br/><span class=\"br0\">(</span>Math/<span class=\"kw1\">sqrt</span> x<span class=\"br0\">)</span><span class=\"co1\">; //square root--cube root also available (cbrt)</span><br/><span class=\"br0\">(</span>Math/log x<span class=\"br0\">)</span><span class=\"co1\">; //natural logarithm--log base 10 also available (log10)</span><br/><span class=\"br0\">(</span>Math/<span class=\"kw1\">exp</span> x<span class=\"br0\">)</span><span class=\"co1\">; //exponential</span><br/><span class=\"br0\">(</span>Math/<span class=\"kw1\">abs</span> x<span class=\"br0\">)</span><span class=\"co1\">; //absolute value</span><br/><span class=\"br0\">(</span>Math/floor x<span class=\"br0\">)</span><span class=\"co1\">; //floor</span><br/><span class=\"br0\">(</span>Math/ceil x<span class=\"br0\">)</span><span class=\"co1\">; //ceiling</span><br/><span class=\"br0\">(</span>Math/pow x y<span class=\"br0\">)</span><span class=\"co1\">; //power</span></pre>"}, {"lang": "Clojure", "loc": 9, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>Math/E<span class=\"br0\">)</span><span class=\"co1\">; //e</span><br/><span class=\"br0\">(</span>Math/PI<span class=\"br0\">)</span><span class=\"co1\">; //pi</span><br/><span class=\"br0\">(</span>Math/<span class=\"kw1\">sqrt</span> x<span class=\"br0\">)</span><span class=\"co1\">; //square root--cube root also available (cbrt)</span><br/><span class=\"br0\">(</span>Math/log x<span class=\"br0\">)</span><span class=\"co1\">; //natural logarithm--log base 10 also available (log10)</span><br/><span class=\"br0\">(</span>Math/<span class=\"kw1\">exp</span> x<span class=\"br0\">)</span><span class=\"co1\">; //exponential</span><br/><span class=\"br0\">(</span>Math/<span class=\"kw1\">abs</span> x<span class=\"br0\">)</span><span class=\"co1\">; //absolute value</span><br/><span class=\"br0\">(</span>Math/floor x<span class=\"br0\">)</span><span class=\"co1\">; //floor</span><br/><span class=\"br0\">(</span>Math/ceil x<span class=\"br0\">)</span><span class=\"co1\">; //ceiling</span><br/><span class=\"br0\">(</span>Math/pow x y<span class=\"br0\">)</span><span class=\"co1\">; //power</span></pre>"}, {"lang": "COBOL", "loc": 13, "block": "<pre class=\"cobol highlighted_source\">E          *&gt; e<br/>PI         *&gt; Pi<br/><span class=\"kw4\">SQRT</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>    *&gt; Sqaure root<br/><span class=\"kw4\">LOG</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>     *&gt; Natural logarithm<br/><span class=\"kw4\">LOG10</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>   *&gt; Logarithm <span class=\"br0\">(</span>base <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>EXP<span class=\"br0\">(</span>n<span class=\"br0\">)</span>     *&gt; e <span class=\"kw2\">to</span> the nth power<br/>ABS<span class=\"br0\">(</span>n<span class=\"br0\">)</span>     *&gt; Absolute <span class=\"kw3\">value</span><br/><span class=\"kw4\">INTEGER</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> *&gt; While <span class=\"kw3\">not</span> a proper floor <span class=\"kw3\">function</span><span class=\"sy0\">,</span> it <span class=\"kw3\">is</span> implemented <span class=\"kw3\">in</span> the <span class=\"kw3\">same</span> way<span class=\"sy0\">.</span><br/><span class=\"co1\">*&gt; There is no ceiling function. However, it could be implemented like so:</span><br/><span class=\"kw2\">ADD</span> <span class=\"nu0\">1</span> <span class=\"kw2\">TO</span> N<br/><span class=\"kw2\">MOVE</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"kw2\">TO</span> Result<br/><span class=\"co1\">*&gt; There is no pow function, although the COMPUTE verb does have an exponention operator.</span><br/><span class=\"kw2\">COMPUTE</span> Result <span class=\"sy0\">=</span> N<span class=\"sy0\"> ** </span><span class=\"nu0\">2</span> </pre>"}, {"lang": "Common Lisp", "loc": 12, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">exp</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>     <span class=\"co1\">; e (Euler's number)</span><br/>pi          <span class=\"co1\">; pi constant</span><br/><span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> x<span class=\"br0\">)</span>    <span class=\"co1\">; square root: works for negative reals and complex</span><br/><span class=\"br0\">(</span>log x<span class=\"br0\">)</span>     <span class=\"co1\">; natural logarithm: works for negative reals and complex</span><br/><span class=\"br0\">(</span>log x <span class=\"nu0\">10</span><span class=\"br0\">)</span>  <span class=\"co1\">; logarithm base 10</span><br/><span class=\"br0\">(</span><span class=\"kw1\">exp</span> x<span class=\"br0\">)</span>     <span class=\"co1\">; exponential</span><br/><span class=\"br0\">(</span><span class=\"kw1\">abs</span> x<span class=\"br0\">)</span>     <span class=\"co1\">; absolute value: result exact if input exact: (abs -1/3) -&gt; 1/3.</span><br/><span class=\"br0\">(</span>floor x<span class=\"br0\">)</span>   <span class=\"co1\">; floor: restricted to real, two valued (second value gives residue)</span><br/><span class=\"br0\">(</span>ceiling x<span class=\"br0\">)</span> <span class=\"co1\">; ceiling: restricted to real, two valued (second value gives residue)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">expt</span> x y<span class=\"br0\">)</span>  <span class=\"co1\">; power</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 12, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">math</span> <span class=\"sy0\">;</span> <span class=\"co1\">// need to import this module</span><br/>E        <span class=\"co1\">// Euler's number</span><br/>PI       <span class=\"co1\">// pi constant</span><br/>sqrt<span class=\"br0\">(</span>x<span class=\"br0\">)</span>  <span class=\"co1\">// square root</span><br/>log<span class=\"br0\">(</span>x<span class=\"br0\">)</span>   <span class=\"co1\">// natural logarithm</span><br/>log10<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"co1\">// logarithm base 10</span><br/>log2<span class=\"br0\">(</span>x<span class=\"br0\">)</span>  <span class=\"co1\">// logarithm base 2</span><br/>exp<span class=\"br0\">(</span>x<span class=\"br0\">)</span>   <span class=\"co1\">// exponential</span><br/>abs<span class=\"br0\">(</span>x<span class=\"br0\">)</span>   <span class=\"co1\">// absolute value (= magnitude for complex)</span><br/>floor<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"co1\">// floor</span><br/>ceil<span class=\"br0\">(</span>x<span class=\"br0\">)</span>  <span class=\"co1\">// ceiling</span><br/>pow<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"co1\">// power</span></pre>"}, {"lang": "Delphi", "loc": 12, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw3\">Exp</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>         <span class=\"co1\">// e (Euler's number)</span><br/>Pi<span class=\"sy1\">;</span>             <span class=\"co1\">// \u03c0 (Pi)</span><br/><span class=\"kw3\">Sqrt</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">;</span>        <span class=\"co1\">// square root</span><br/><span class=\"kw3\">LogN</span><span class=\"br0\">(</span>BASE<span class=\"sy1\">,</span> x<span class=\"br0\">)</span>   <span class=\"co1\">// log of x for a specified base</span><br/><span class=\"kw3\">Log2</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>         <span class=\"co1\">// log of x for base 2</span><br/><span class=\"kw3\">Log10</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>        <span class=\"co1\">// log of x for base 10</span><br/><span class=\"kw3\">Ln</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">;</span>          <span class=\"co1\">// natural logarithm (for good measure)</span><br/><span class=\"kw3\">Exp</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">;</span>         <span class=\"co1\">// exponential</span><br/><span class=\"kw3\">Abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">;</span>         <span class=\"co1\">// absolute value (a.k.a. \"magnitude\")</span><br/><span class=\"kw3\">Floor</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">;</span>       <span class=\"co1\">// floor</span><br/><span class=\"kw3\">Ceil</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">;</span>        <span class=\"co1\">// ceiling</span><br/><span class=\"kw3\">Power</span><span class=\"br0\">(</span>x<span class=\"sy1\">,</span> y<span class=\"br0\">)</span><span class=\"sy1\">;</span>    <span class=\"co1\">// power</span></pre>"}, {"lang": "DWScript", "loc": 26, "block": "<pre class=\"e highlighted_source\"><span class=\"sy0\">?</span> <span class=\"nu0\">1.0</span>.<span class=\"me1\">exp</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 2.7182818284590455</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <span class=\"nu0\">0.0</span>.<span class=\"me1\">acos</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/><span class=\"co1\"># value: 3.141592653589793</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <span class=\"nu0\">2.0</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 1.4142135623730951</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <span class=\"nu0\">2.0</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 0.6931471805599453</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <span class=\"nu0\">5.0</span>.<span class=\"me1\">exp</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 148.4131591025766</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 5</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <span class=\"nu0\">1.2</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 1</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <span class=\"nu0\">1.2</span>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 2</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <span class=\"nu0\">10</span> <span class=\"sy0\">**</span> <span class=\"nu0\">6</span><br/><span class=\"co1\"># value: 1000000</span></pre>"}, {"lang": "E", "loc": 26, "block": "<pre class=\"e highlighted_source\"><span class=\"sy0\">?</span> <span class=\"nu0\">1.0</span>.<span class=\"me1\">exp</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 2.7182818284590455</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <span class=\"nu0\">0.0</span>.<span class=\"me1\">acos</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/><span class=\"co1\"># value: 3.141592653589793</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <span class=\"nu0\">2.0</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 1.4142135623730951</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <span class=\"nu0\">2.0</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 0.6931471805599453</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <span class=\"nu0\">5.0</span>.<span class=\"me1\">exp</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 148.4131591025766</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 5</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <span class=\"nu0\">1.2</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 1</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <span class=\"nu0\">1.2</span>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: 2</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <span class=\"nu0\">10</span> <span class=\"sy0\">**</span> <span class=\"nu0\">6</span><br/><span class=\"co1\"># value: 1000000</span></pre>"}, {"lang": "Elena", "loc": 16, "block": "<pre class=\"text highlighted_source\">import system'math.<br/>import extensions.<br/>\u00a0<br/>program =<br/>[<br/>    console printLine(e_value).     //E<br/>    console printLine(pi_value).    //PI<br/>    console printLine(10 sqrt).     //Square Root        <br/>    console printLine(10 ln).       //Logarithm        <br/>    console printLine(10 log10). // Base 10 Logarithm<br/>    console printLine(10 exp).      //Exponential       <br/>    console printLine(10 absolute). //Absolute value<br/>    console printLine(10.0r floor). //Floor<br/>    console printLine(10.0r ceil).  //Ceiling    <br/>    console printLine(2 power:5).   //Exponentiation    <br/>].</pre>"}, {"lang": "Elixir", "loc": 16, "block": "<pre class=\"text highlighted_source\">defmodule Real_constants_and_functions do<br/>  def main do<br/>    IO.puts\u00a0:math.exp(1)                # e<br/>    IO.puts\u00a0:math.pi                    # pi<br/>    IO.puts\u00a0:math.sqrt(16)              # square root<br/>    IO.puts\u00a0:math.log(10)               # natural logarithm<br/>    IO.puts\u00a0:math.log10(10)             # base 10 logarithm<br/>    IO.puts\u00a0:math.exp(2)                # e raised to the power of x<br/>    IO.puts abs(-2.24)                  # absolute value<br/>    IO.puts Float.floor(3.1423)         # floor<br/>    IO.puts Float.ceil(20.125)          # ceiling<br/>    IO.puts\u00a0:math.pow(3,2)              # exponentiation<br/>  end<br/>end<br/>\u00a0<br/>Real_constants_and_functions.main</pre>"}, {"lang": "Elm", "loc": 9, "block": "<pre class=\"text highlighted_source\">e           -- e<br/>pi          -- pi<br/>sqrt x      -- square root<br/>logBase 3 9 -- logarithm (any base)<br/>e^x         -- exponential<br/>abs x       -- absolute value<br/>floor x     -- floor<br/>ceiling x   -- ceiling<br/>2 ^ 3       -- power</pre>"}, {"lang": "Erlang", "loc": 36, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">% Implemented by Arjun Sunel</span><br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>math_constants<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~p~n\"</span><span class=\"sy1\">,</span>\t<span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">exp</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span>\t\t<span class=\"br0\">)</span><span class=\"sy1\">,</span>\t\t<span class=\"co1\">% e</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~p~n\"</span><span class=\"sy1\">,</span>\t<span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">pi</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span>\t\t<span class=\"br0\">)</span><span class=\"sy1\">,</span>\t\t<span class=\"co1\">% pi</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~p~n\"</span><span class=\"sy1\">,</span>\t<span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">]</span>\t\t<span class=\"br0\">)</span><span class=\"sy1\">,</span>\t\t<span class=\"co1\">% square root</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~p~n\"</span><span class=\"sy1\">,</span>\t<span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">log</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span>\t\t<span class=\"br0\">)</span><span class=\"sy1\">,</span>\t\t<span class=\"co1\">% natural logarithm\t\t\t</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~p~n\"</span><span class=\"sy1\">,</span>\t<span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">log10</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span>\t<span class=\"br0\">)</span><span class=\"sy1\">,</span>\t\t<span class=\"co1\">% base 10 logarithm</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~p~n\"</span><span class=\"sy1\">,</span>\t<span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">exp</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span>\t\t<span class=\"br0\">)</span><span class=\"sy1\">,</span>\t\t<span class=\"co1\">% e raised to the power of x</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~p~n\"</span><span class=\"sy1\">,</span>\t<span class=\"br0\">[</span><span class=\"kw3\">abs</span><span class=\"br0\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">2.24</span><span class=\"br0\">)</span><span class=\"br0\">]</span>\t\t<span class=\"br0\">)</span><span class=\"sy1\">,</span>\t\t<span class=\"co1\">% absolute value</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~p~n\"</span><span class=\"sy1\">,</span>\t<span class=\"br0\">[</span><span class=\"re3\">floor</span><span class=\"br0\">(</span><span class=\"nu0\">3.1423</span><span class=\"br0\">)</span><span class=\"br0\">]</span>\t\t<span class=\"br0\">)</span><span class=\"sy1\">,</span>\t\t<span class=\"co1\">% floor</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~p~n\"</span><span class=\"sy1\">,</span>\t<span class=\"br0\">[</span><span class=\"re3\">ceil</span><span class=\"br0\">(</span><span class=\"nu0\">20.125</span><span class=\"br0\">)</span><span class=\"br0\">]</span>\t\t<span class=\"br0\">)</span><span class=\"sy1\">,</span>\t\t<span class=\"co1\">% ceiling</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~p~n\"</span><span class=\"sy1\">,</span>\t<span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span>\t        <span class=\"br0\">)</span><span class=\"sy1\">.</span>\t\t<span class=\"co1\">% exponentiation </span><br/>\u00a0<br/><span class=\"re3\">floor</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">T</span> <span class=\"sy3\">=</span> <span class=\"kw3\">trunc</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"kw1\">case</span> <span class=\"re5\">X</span> <span class=\"sy3\">-</span> <span class=\"re5\">T</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">of</span><br/>\t\ttrue <span class=\"sy1\">-&gt;</span> <span class=\"re5\">T</span><span class=\"sy1\">;</span><br/>        \tfalse <span class=\"sy1\">-&gt;</span> <span class=\"re5\">T</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"re3\">floor</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>\t<span class=\"kw3\">trunc</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">ceil</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"kw3\">trunc</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"re3\">ceil</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">T</span> <span class=\"sy3\">=</span> <span class=\"kw3\">trunc</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"kw1\">case</span> <span class=\"re5\">X</span> <span class=\"sy3\">-</span> <span class=\"re5\">T</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">of</span><br/>\t\ttrue <span class=\"sy1\">-&gt;</span> <span class=\"re5\">T</span><span class=\"sy1\">;</span><br/>\t\tfalse <span class=\"sy1\">-&gt;</span> <span class=\"re5\">T</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">end</span><span class=\"sy1\">.</span>\t<br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 28, "block": "<pre class=\"text highlighted_source\">PROGRAM R_C_F<br/>\u00a0<br/>FUNCTION CEILING(X)<br/>   CEILING=INT(X)-(X-INT(X)&gt;0)<br/>END FUNCTION<br/>\u00a0<br/>FUNCTION FLOOR(X)<br/>   FLOOR=INT(X)<br/>END FUNCTION<br/>\u00a0<br/>BEGIN<br/>     PRINT(EXP(1))          \u00a0! e  not available<br/>     PRINT(\u03c0)               \u00a0! pi is available or ....<br/>     PRINT(4*ATN(1))        \u00a0! .... equal to<br/>\u00a0<br/>     X=12.345<br/>     Y=1.23<br/>\u00a0<br/>     PRINT(SQR(X),X^0.5)    \u00a0! square root<br/>     PRINT(LOG(X))          \u00a0! natural logarithm base e<br/>     PRINT(LOG(X)/LOG(10))  \u00a0! base 10 logarithm<br/>     PRINT(LOG(X)/LOG(Y))   \u00a0! arbitrary base logarithm (y&gt;0)<br/>     PRINT(EXP(X))          \u00a0! exponential<br/>     PRINT(ABS(X))          \u00a0! absolute value<br/>     PRINT(FLOOR(X))        \u00a0! floor<br/>     PRINT(CEILING(X))      \u00a0! ceiling<br/>     PRINT(X^Y)             \u00a0! power<br/>END PROGRAM</pre>"}, {"lang": "F#", "loc": 15, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"kw1\">let</span> main _ <span class=\"sy0\">=</span><br/>    Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math.<span class=\"me1\">E</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>             <span class=\"co1\">// e</span><br/>    Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math.<span class=\"me1\">PI</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>            <span class=\"co1\">// Pi</span><br/>    Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math.<span class=\"me1\">Sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    <span class=\"co1\">// Square Root</span><br/>    Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math.<span class=\"me1\">Log</span><span class=\"br0\">(</span><span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>     <span class=\"co1\">// Logarithm</span><br/>    Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math.<span class=\"me1\">Log10</span><span class=\"br0\">(</span><span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"co1\">// Base 10 Logarithm</span><br/>    Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math.<span class=\"me1\">Exp</span><span class=\"br0\">(</span><span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>     <span class=\"co1\">// Exponential</span><br/>    Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math.<span class=\"me1\">Abs</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>       <span class=\"co1\">// Absolute value</span><br/>    Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math.<span class=\"me1\">Floor</span><span class=\"br0\">(</span><span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"co1\">// Floor</span><br/>    Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math.<span class=\"me1\">Ceiling</span><span class=\"br0\">(</span><span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Ceiling</span><br/>    Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Math.<span class=\"me1\">Pow</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span>, <span class=\"nu0\">5.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Exponentiation</span><br/>\u00a0<br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Factor", "loc": 11, "block": "<pre class=\"text highlighted_source\">e         \u00a0! e<br/>pi        \u00a0! \u03c0<br/>sqrt      \u00a0! square root<br/>log       \u00a0! natural logarithm<br/>exp       \u00a0! exponentiation<br/>abs       \u00a0! absolute value<br/>floor     \u00a0! greatest whole number smaller than or equal<br/>ceiling   \u00a0! smallest whole number greater than or equal<br/>truncate  \u00a0! remove the fractional part (i.e. round towards 0)<br/>round     \u00a0! round to next whole number<br/>^         \u00a0! power</pre>"}, {"lang": "Fantom", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Float.e<br/>Float.pi<br/>9f.sqrt<br/>9f.log      // natural logarithm<br/>9f.log10    // logarithm to base 10<br/>9f.exp      // exponentiation<br/>(-3f).abs   // absolute value, note bracket<br/>3.2f.floor  // nearest Int smaller than this number<br/>3.2f.ceil   // nearest Int bigger than this number<br/>3.2f.round  // nearest Int<br/>3f.pow(2f)  // power<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 9, "block": "<pre class=\"text highlighted_source\">1e fexp fconstant e<br/>0e facos 2e f* fconstant pi  \\ predefined in gforth<br/>fsqrt ( f -- f )<br/>fln ( f -- f )   \\ flog for base 10<br/>fexp ( f -- f )<br/>fabs ( f -- f )<br/>floor ( f -- f )  \\ round towards -inf<br/>: ceil ( f -- f ) fnegate floor fnegate\u00a0; \\ not standard, though fround is available<br/>f** ( f e -- f^e )</pre>"}, {"lang": "Fortran", "loc": 10, "block": "<pre class=\"fortran highlighted_source\"> e          <span class=\"co1\">! Not available. Can be calculated EXP(1.0)</span><br/> pi         <span class=\"co1\">! Not available. Can be calculated 4.0*ATAN(1.0)</span><br/> <span class=\"kw4\">SQRT</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>    <span class=\"co1\">! square root</span><br/> <span class=\"kw4\">LOG</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>     <span class=\"co1\">! natural logarithm</span><br/> <span class=\"kw4\">LOG10</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>   <span class=\"co1\">! logarithm to base 10</span><br/> <span class=\"kw4\">EXP</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>     <span class=\"co1\">! exponential</span><br/> <span class=\"kw4\">ABS</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>     <span class=\"co1\">! absolute value</span><br/> <span class=\"kw4\">FLOOR</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>   <span class=\"co1\">! floor - Fortran 90 or later only</span><br/> <span class=\"kw4\">CEILING</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"co1\">! ceiling - Fortran 90 or later only</span><br/> x<span class=\"sy0\">**</span>y       <span class=\"co1\">! x raised to the y power</span></pre>"}, {"lang": "FreeBASIC", "loc": 15, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co2\">#Include \"crt/math.bi\"</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> M_E          <span class=\"co1\">'' constant \"e\" from C runtime library</span><br/><span class=\"kw1\">Print</span> M_PI         <span class=\"co1\">'' constant \"pi\" from C runtime library</span><br/><span class=\"kw1\">Print</span> <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>       <span class=\"co1\">'' square root function built into FB</span><br/><span class=\"kw1\">Print</span> <span class=\"kw1\">Log</span><span class=\"br0\">(</span>M_E<span class=\"br0\">)</span>     <span class=\"co1\">'' log to base \"e\" built into FB</span><br/><span class=\"kw1\">Print</span> log10<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>    <span class=\"co1\">'' log to base 10 from C runtime library   </span><br/><span class=\"kw1\">Print</span> <span class=\"kw1\">Exp</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>       <span class=\"co1\">'' exponential function built into FB</span><br/><span class=\"kw1\">Print</span> Abs<span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>      <span class=\"co1\">'' absolute value function (integers or floats) built into FB</span><br/><span class=\"kw1\">Print</span> <span class=\"kw1\">Int</span><span class=\"br0\">(</span>-<span class=\"nu0\">2.5</span><span class=\"br0\">)</span>    <span class=\"co1\">'' floor function built into FB </span><br/><span class=\"kw1\">Print</span> ceil<span class=\"br0\">(</span>-<span class=\"nu0\">2.5</span><span class=\"br0\">)</span>   <span class=\"co1\">'' ceiling function from C runtime library</span><br/><span class=\"kw1\">Print</span> <span class=\"nu0\">2.5</span> ^ <span class=\"nu0\">3.5</span>    <span class=\"co1\">'' exponentiation operator built into FB</span><br/><span class=\"kw1\">Sleep</span> </pre>"}, {"lang": "Frink", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>e<br/>pi, \u03c0   // Unicode can also be written in ASCII programs as \\u03C0<br/>sqrt[x]<br/>ln[x]   // Natural log<br/>log[x]  // Log to base 10<br/>exp[x], e^x<br/>abs[x]<br/>floor[x] // Except for complex numbers where there's no good interpretation.<br/>ceil[x]  // Except for complex numbers where there's no good interpretation.<br/>x^y<br/>\u00a0</pre>"}, {"lang": "FutureBasic", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>// Set width of tab<br/>def tab 8<br/>\u00a0<br/>print \"exp:\",   exp(1)<br/>print \"pi:\",    pi<br/>print \"sqr:\",   sqr(2)<br/>print \"log:\",   log(2)<br/>print \"log2:\",  log2(2)<br/>print \"log10\",  log10(2)<br/>print \"abs:\",   abs(-2)<br/>print \"floor:\", int(1.534)<br/>print \"ceil:\",  val( using\"###\"; 1.534 )<br/>print \"power:\", 1.23 ^ 4<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 54, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// e and pi defined as constants.</span><br/>    <span class=\"co1\">// In Go, that means they are not of a specific data type and can be used</span><br/>    <span class=\"co1\">// as float32 or float64.  Println takes the float64 values.</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"float64 values:\"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"e:\"</span><span class=\"sy1\">,</span> math<span class=\"sy3\">.</span><span class=\"me1\">E</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"\u03c0:\"</span><span class=\"sy1\">,</span> math<span class=\"sy3\">.</span><span class=\"me1\">Pi</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// The following functions all take and return the float64 data type.</span><br/>\u00a0<br/>    <span class=\"co1\">// square root.  cube root also available (math.Cbrt)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"square root(1.44):\"</span><span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Sqrt<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">44</span><span class=\"sy1\">))</span><br/>    <span class=\"co1\">// natural logarithm--log base 10, 2 also available (math.Log10, math.Log2)</span><br/>    <span class=\"co1\">// also available is log1p, the log of 1+x.  (using log1p can be more</span><br/>    <span class=\"co1\">// accurate when x is near zero.)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"ln(e):\"</span><span class=\"sy1\">,</span> math<span class=\"sy3\">.</span><span class=\"me1\">Log</span><span class=\"sy1\">(</span>math<span class=\"sy3\">.</span><span class=\"me1\">E</span><span class=\"sy1\">))</span><br/>    <span class=\"co1\">// exponential.  also available are exp base 10, 2 (math.Pow10, math.Exp2)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"exponential(1):\"</span><span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Exp<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"absolute value(-1.2):\"</span><span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Abs<span class=\"sy1\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">2</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"floor(-1.2):\"</span><span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Floor<span class=\"sy1\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">2</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"ceiling(-1.2):\"</span><span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Ceil<span class=\"sy1\">(</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">2</span><span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"power(1.44, .5):\"</span><span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Pow<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy3\">.</span><span class=\"nu0\">44</span><span class=\"sy1\">,</span> <span class=\"sy3\">.</span><span class=\"nu0\">5</span><span class=\"sy1\">))</span><br/>\u00a0<br/>    <span class=\"co1\">// Equivalent functions for the float32 type are not in the standard</span><br/>    <span class=\"co1\">// library.  Here are the constants e and \u03c0 as float32s however.</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>float32 values:\"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"e:\"</span><span class=\"sy1\">,</span> <span class=\"kw4\">float32</span><span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>E<span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"\u03c0:\"</span><span class=\"sy1\">,</span> <span class=\"kw4\">float32</span><span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Pi<span class=\"sy1\">))</span><br/>\u00a0<br/>    <span class=\"co1\">// The standard library has an arbitrary precision floating point type but</span><br/>    <span class=\"co1\">// provides only the most basic methods.  Also while the constants math.E</span><br/>    <span class=\"co1\">// and math.Pi are provided to over 80 decimal places, there is no</span><br/>    <span class=\"co1\">// convenient way of loading these numbers (with their full precision)</span><br/>    <span class=\"co1\">// into a big.Float.  A hack is cutting and pasting into a string, but</span><br/>    <span class=\"co1\">// of course if you're going to do that you are free to cut and paste from</span><br/>    <span class=\"co1\">// any other source.  (The documentation cites OEIS as its source.)</span><br/>    pi <span class=\"sy2\">:=</span> <span class=\"st0\">\"3.141592653589793238462643383279502884197169399375105820974944\"</span><br/>    \u03c0<span class=\"sy1\">,</span> _<span class=\"sy1\">,</span> _ <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>ParseFloat<span class=\"sy1\">(</span>pi<span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">,</span> <span class=\"nu0\">200</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>big.Float values:\"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"\u03c0:\"</span><span class=\"sy1\">,</span> \u03c0<span class=\"sy1\">)</span><br/>    <span class=\"co1\">// Of functions requested by the task, only absolute value is provided.</span><br/>    x <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span>big<span class=\"sy3\">.</span>Float<span class=\"sy1\">)</span><span class=\"sy3\">.</span>Neg<span class=\"sy1\">(</span>\u03c0<span class=\"sy1\">)</span><br/>    y <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span>big<span class=\"sy3\">.</span>Float<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"x:\"</span><span class=\"sy1\">,</span> x<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"abs(x):\"</span><span class=\"sy1\">,</span> y<span class=\"sy3\">.</span><span class=\"me1\">Abs</span><span class=\"sy1\">(</span>x<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">22</span><span class=\"br0\">)</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 11, "block": "<pre class=\"haskell highlighted_source\"><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:exp\"><span class=\"kw3\">exp</span></a> <span class=\"nu0\">1</span>     <span class=\"co1\">-- Euler number</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a>        <span class=\"co1\">-- pi</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> x    <span class=\"co1\">-- square root</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:log\"><span class=\"kw3\">log</span></a> x     <span class=\"co1\">-- natural logarithm</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:exp\"><span class=\"kw3\">exp</span></a> x     <span class=\"co1\">-- exponential</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:abs\"><span class=\"kw3\">abs</span></a> x     <span class=\"co1\">-- absolute value</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:floor\"><span class=\"kw3\">floor</span></a> x   <span class=\"co1\">-- floor</span><br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:ceiling\"><span class=\"kw3\">ceiling</span></a> x <span class=\"co1\">-- ceiling</span><br/>x <span class=\"sy0\">**</span> y    <span class=\"co1\">-- power (e.g. floating-point exponentiation)</span><br/>x <span class=\"sy0\">^</span> y     <span class=\"co1\">-- power (e.g. integer exponentiation, nonnegative y only)</span><br/>x <span class=\"sy0\">^^</span> y    <span class=\"co1\">-- power (e.g. integer exponentiation of rationals, also negative y)</span></pre>"}, {"lang": "HicEst", "loc": 11, "block": "<pre class=\"hicest highlighted_source\">e          <span class=\"co1\">! Not available. Can be calculated EXP(1)</span><br/>pi         <span class=\"co1\">! Not available. Can be calculated 4.0*ATAN(1.0)</span><br/>x<span class=\"sy1\">^</span><span class=\"nu0\">0.5</span>      <span class=\"co1\">! square root</span><br/><span class=\"kw1\">LOG</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>     <span class=\"co1\">! natural logarithm</span><br/><span class=\"kw1\">LOG</span><span class=\"br0\">(</span>x<span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"co1\">! logarithm to base 10</span><br/><span class=\"kw1\">EXP</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>     <span class=\"co1\">! exponential</span><br/><span class=\"kw1\">ABS</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>     <span class=\"co1\">! absolute value</span><br/><span class=\"kw1\">FLOOR</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>   <span class=\"co1\">! floor</span><br/><span class=\"kw1\">CEILING</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"co1\">! ceiling</span><br/>x<span class=\"sy1\">**</span>y       <span class=\"co1\">! x raised to the y power</span><br/>x<span class=\"sy1\">^</span>y        <span class=\"co1\">! same as x**y</span></pre>"}, {"lang": "Icon and Unicon", "loc": 15, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> numbers  <span class=\"co1\"># for floor and ceil</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"e=\"</span><span class=\"sy1\">,&amp;</span><span class=\"kw3\">e</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"pi=\"</span><span class=\"sy1\">,&amp;</span><span class=\"kw3\">pi</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"phi=\"</span><span class=\"sy1\">,&amp;</span><span class=\"kw3\">phi</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"sqrt(2)=\"</span><span class=\"sy1\">,</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"log(e)=\"</span><span class=\"sy1\">,</span><span class=\"kw4\">log</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">e</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"log(100.,10)=\"</span><span class=\"sy1\">,</span><span class=\"kw4\">log</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"exp(1)=\"</span><span class=\"sy1\">,</span><span class=\"kw4\">exp</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"abs(-2)=\"</span><span class=\"sy1\">,</span><span class=\"kw4\">abs</span><span class=\"br0\">(</span><span class=\"sy1\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"floor(-2.2)=\"</span><span class=\"sy1\">,</span>floor<span class=\"br0\">(</span><span class=\"sy1\">-</span><span class=\"nu0\">2.2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"ceil(-2.2)=\"</span><span class=\"sy1\">,</span>ceil<span class=\"br0\">(</span><span class=\"sy1\">-</span><span class=\"nu0\">2.2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"power: 3^3=\"</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">^</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 14, "block": "<pre class=\"j highlighted_source\">e =. <span class=\"nu0\">1x1</span>   <span class=\"co1\">NB. Euler's number, specified as a numeric literal.</span><br/>e =. ^ <span class=\"nu0\">1</span>   <span class=\"co1\">NB. Euler's number, computed by exponentiation.</span><br/>pi=. <span class=\"nu0\">1p1</span>   <span class=\"co1\">NB. pi, specified as a numeric literal.</span><br/>pi=. o.<span class=\"nu0\">1</span>   <span class=\"co1\">NB. pi, computed trigonometrically.</span><br/>magnitude_of_x   =. |<span class=\"kw2\">x</span><br/>floor_of_x       =. &lt;.<span class=\"kw2\">x</span><br/>ceiling_of_x     =. &gt;.<span class=\"kw2\">x</span><br/>natural_log_of_x =. ^.<span class=\"kw2\">x</span><br/>base_x_log_of_y  =. <span class=\"kw2\">x</span>^.<span class=\"kw2\">y</span><br/>x_squared        =. *:<span class=\"kw2\">x</span>     <span class=\"co1\">NB. special form</span><br/>x_squared        =. <span class=\"kw2\">x</span>^<span class=\"nu0\">2</span>     <span class=\"co1\">NB. exponential form</span><br/>square_root_of_x =.\u00a0%:<span class=\"kw2\">x</span>     <span class=\"co1\">NB. special form</span><br/>square_root_of_x =. <span class=\"kw2\">x</span>^<span class=\"nu0\">0.5</span>   <span class=\"co1\">NB. exponential form</span><br/>x_to_the_y_power =. <span class=\"kw2\">x</span>^<span class=\"kw2\">y</span></pre>"}, {"lang": "Java", "loc": 9, "block": "<pre class=\"java highlighted_source\"><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">E</span><span class=\"sy0\">;</span> <span class=\"co1\">//e</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">PI</span><span class=\"sy0\">;</span> <span class=\"co1\">//pi</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//square root--cube root also available (cbrt)</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">log</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//natural logarithm--log base 10 also available (log10)</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">exp</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//exponential</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//absolute value</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//floor</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//ceiling</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>x,y<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//power</span></pre>"}, {"lang": "JavaScript", "loc": 9, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw4\">Math</span>.<span class=\"me1\">E</span><br/><span class=\"kw4\">Math</span>.<span class=\"me1\">PI</span><br/><span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw4\">Math</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw4\">Math</span>.<span class=\"me1\">exp</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw4\">Math</span>.<span class=\"me1\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw4\">Math</span>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw4\">Math</span>.<span class=\"me1\">pow</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span></pre>"}, {"lang": "jq", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>1 | exp                      # i.e. e<br/>1 | atan * 4                 # i.e. \u03c0<br/>sqrt<br/>log                          # Naperian log<br/>exp<br/>if . &lt; 0 then -. else . end  # absolute value<br/>floor<br/># jq does not currently have a ceiling function<br/># jq does not currently have a function to compute x^y</pre>"}, {"lang": "Julia", "loc": 9, "block": "<pre class=\"text highlighted_source\">e<br/>\u03c0, pi<br/>sqrt(x)<br/>log(x)<br/>exp(x)<br/>abs(x)<br/>floor(x)<br/>ceil(x)<br/>x^y</pre>"}, {"lang": "Kotlin", "loc": 14, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>Math.<span class=\"me1\">E</span><span class=\"br0\">)</span>                <span class=\"co1\">// e</span><br/>    println<span class=\"br0\">(</span>Math.<span class=\"me1\">PI</span><span class=\"br0\">)</span>               <span class=\"co1\">// pi</span><br/>    println<span class=\"br0\">(</span>Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>        <span class=\"co1\">// square root</span><br/>    println<span class=\"br0\">(</span>Math.<span class=\"me1\">log</span><span class=\"br0\">(</span>Math.<span class=\"me1\">E</span><span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co1\">// log to base e</span><br/>    println<span class=\"br0\">(</span>Math.<span class=\"me1\">log10</span><span class=\"br0\">(</span><span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co1\">// log to base 10</span><br/>    println<span class=\"br0\">(</span>Math.<span class=\"me1\">exp</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>         <span class=\"co1\">// exponential</span><br/>    println<span class=\"br0\">(</span>Math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>          <span class=\"co1\">// absolute value</span><br/>    println<span class=\"br0\">(</span>Math.<span class=\"me1\">floor</span><span class=\"br0\">(</span>-<span class=\"nu0\">2.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co1\">// floor </span><br/>    println<span class=\"br0\">(</span>Math.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>-<span class=\"nu0\">2.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>       <span class=\"co1\">// ceiling </span><br/>    println<span class=\"br0\">(</span>Math.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2.5</span>, <span class=\"nu0\">3.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\">// power</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 16, "block": "<pre class=\"text highlighted_source\">//e<br/>define e =&gt; 2.7182818284590452<br/>\u00a0<br/>//\u03c0<br/>define pi =&gt; 3.141592653589793<br/>\u00a0<br/>e<br/>pi<br/>9.0-&gt;sqrt<br/>1.64-&gt;log<br/>1.64-&gt;log10<br/>1.64-&gt;exp<br/>1.64-&gt;abs<br/>1.64-&gt;floor<br/>1.64-&gt;ceil<br/>1.64-&gt;pow(10.0)</pre>"}, {"lang": "Liberty BASIC", "loc": 34, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">print</span> <span class=\"kw2\">exp</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>            <span class=\"co1\">' e  not available</span><br/><span class=\"kw1\">print</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span><span class=\"kw2\">atn</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>         <span class=\"co1\">' pi not available</span><br/>\u00a0<br/>x <span class=\"sy0\">=</span><span class=\"nu0\">12.345</span><span class=\"sy0\">:</span> y <span class=\"sy0\">=</span><span class=\"nu0\">1.23</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"kw2\">sqr</span><span class=\"br0\">(</span> x<span class=\"br0\">)</span><span class=\"sy0\">,</span> x^<span class=\"nu0\">0.5</span>     <span class=\"co1\">' square root- NB the unusual name</span><br/><span class=\"kw1\">print</span> <span class=\"kw2\">log</span><span class=\"br0\">(</span> x<span class=\"br0\">)</span>            <span class=\"co1\">' natural logarithm base e</span><br/><span class=\"kw1\">print</span> <span class=\"kw2\">log</span><span class=\"br0\">(</span> x<span class=\"br0\">)</span> <span class=\"sy0\">/</span><span class=\"nu0\">2.303</span>     <span class=\"co1\">' base 10 logarithm</span><br/><span class=\"kw1\">print</span> <span class=\"kw2\">log</span><span class=\"br0\">(</span> x<span class=\"br0\">)</span> <span class=\"sy0\">/</span><span class=\"kw2\">log</span><span class=\"br0\">(</span> y<span class=\"br0\">)</span>   <span class=\"co1\">' arbitrary base logarithm</span><br/><span class=\"kw1\">print</span> <span class=\"kw2\">exp</span><span class=\"br0\">(</span> x<span class=\"br0\">)</span>            <span class=\"co1\">' exponential</span><br/><span class=\"kw1\">print</span> <span class=\"kw2\">abs</span><span class=\"br0\">(</span> x<span class=\"br0\">)</span>            <span class=\"co1\">' absolute value</span><br/><span class=\"kw1\">print</span> floor<span class=\"br0\">(</span> x<span class=\"br0\">)</span>          <span class=\"co1\">' floor</span><br/><span class=\"kw1\">print</span> ceiling<span class=\"br0\">(</span> x<span class=\"br0\">)</span>        <span class=\"co1\">' ceiling</span><br/><span class=\"kw1\">print</span> x^y                <span class=\"co1\">' power</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> floor<span class=\"br0\">(</span> x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> x <span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        floor <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">if</span> x <span class=\"sy0\">&lt;&gt;</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> x<span class=\"br0\">)</span> <span class=\"kw1\">then</span> floor <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> x<span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">else</span> floor <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> ceiling<span class=\"br0\">(</span> x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> x <span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        ceiling <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>        ceiling <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> x<span class=\"br0\">)</span> <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 47, "block": "<pre class=\"text highlighted_source\">the floatPrecision = 8<br/>\u00a0<br/>-- e (base of the natural logarithm)<br/>put exp(1)<br/>-- 2.71828183<br/>\u00a0<br/>-- pi<br/>put PI<br/>-- 3.14159265<br/>\u00a0<br/>-- square root<br/>put sqrt(2.0)<br/>-- 1.41421356<br/>\u00a0<br/>-- logarithm (any base allowed)<br/>x = 100<br/>\u00a0<br/>put log(x) -- calculate log for base e<br/>-- 4.60517019<br/>\u00a0<br/>put log(x)/log(10) -- calculate log for base 10<br/>-- 2.00000000<br/>\u00a0<br/>-- exponential (ex)<br/>put exp(3)<br/>-- 20.08553692<br/>\u00a0<br/>-- absolute value (a.k.a. \"magnitude\")<br/>put abs(-1)<br/>-- 1<br/>\u00a0<br/>-- floor (largest integer less than or equal to this number--not the same as truncate or int)<br/>n = 23.536<br/>put bitOr(n, 0) -- calculates floor<br/>-- 23<br/>\u00a0<br/>-- ceiling (smallest integer not less than this number--not the same as round up)<br/>n = 23.536<br/>-- calculates ceil<br/>floor = bitOr(n, 0)<br/>if (floor &gt;= n) then put floor<br/>else put floor+1<br/>-- 24<br/>\u00a0<br/>-- power<br/>put power(2, 8)<br/>-- 256.00000000</pre>"}, {"lang": "LiveCode", "loc": 9, "block": "<pre class=\"text highlighted_source\">e\u202c: exp(1)<br/>pi: pi<br/>square root: sqrt(x)<br/>logarithm: log(x)<br/>exponential (\u202aex\u202c): exp(x)<br/>absolute value: abs(x)<br/>floor: floor(x)<br/>ceiling: ceil(x)<br/>power: x^y</pre>"}, {"lang": "Logo", "loc": 7, "block": "<pre class=\"text highlighted_source\">make \"e exp 1<br/>make \"pi 2*(RADARCTAN 0 1)<br/>sqrt\u00a0:x<br/>ln\u00a0:x<br/>exp\u00a0:x<br/>; there is no standard abs, floor, or ceiling; only INT and ROUND.<br/>power\u00a0:x\u00a0:y</pre>"}, {"lang": "Logtalk", "loc": 18, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(constants_and_functions).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(show<span class=\"sy1\">/</span><span class=\"nu0\">0</span>).<br/>    show <span class=\"sy2\">:-</span><br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'e = '</span>), <span class=\"re0\">E</span> <span class=\"kw5\">is</span> <span class=\"kw7\">e</span>, <span class=\"kw4\">write</span>(<span class=\"re0\">E</span>), <span class=\"kw5\">nl</span>,<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'pi = '</span>), <span class=\"re0\">PI</span> <span class=\"kw5\">is</span> <span class=\"kw7\">pi</span>, <span class=\"kw4\">write</span>(<span class=\"re0\">PI</span>), <span class=\"kw5\">nl</span>,<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'sqrt(2) = '</span>), <span class=\"re0\">SQRT</span> <span class=\"kw5\">is</span> <span class=\"kw6\">sqrt</span>(<span class=\"nu0\">2</span>), <span class=\"kw4\">write</span>(<span class=\"re0\">SQRT</span>), <span class=\"kw5\">nl</span>,<br/>        <span class=\"co1\">% only base e logorithm is avaialable as a standard built-in function</span><br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'log(2) = '</span>), <span class=\"re0\">LOG</span> <span class=\"kw5\">is</span> <span class=\"kw6\">log</span>(<span class=\"nu0\">2</span>), <span class=\"kw4\">write</span>(<span class=\"re0\">LOG</span>), <span class=\"kw5\">nl</span>,<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'exp(2) = '</span>), <span class=\"re0\">EXP</span> <span class=\"kw5\">is</span> <span class=\"kw6\">exp</span>(<span class=\"nu0\">2</span>), <span class=\"kw4\">write</span>(<span class=\"re0\">EXP</span>), <span class=\"kw5\">nl</span>,<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'abs(-1) = '</span>), <span class=\"re0\">ABS</span> <span class=\"kw5\">is</span> <span class=\"kw6\">abs</span>(<span class=\"sy1\">-</span><span class=\"nu0\">1</span>), <span class=\"kw4\">write</span>(<span class=\"re0\">ABS</span>), <span class=\"kw5\">nl</span>,<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'floor(-3.4) = '</span>), <span class=\"re0\">FLOOR</span> <span class=\"kw5\">is</span> <span class=\"kw6\">floor</span>(<span class=\"sy1\">-</span><span class=\"nu0\">3.4</span>), <span class=\"kw4\">write</span>(<span class=\"re0\">FLOOR</span>), <span class=\"kw5\">nl</span>,<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'ceiling(-3.4) = '</span>), <span class=\"re0\">CEILING</span> <span class=\"kw5\">is</span> <span class=\"kw6\">ceiling</span>(<span class=\"sy1\">-</span><span class=\"nu0\">3.4</span>), <span class=\"kw4\">write</span>(<span class=\"re0\">CEILING</span>), <span class=\"kw5\">nl</span>,<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'2 ** -3.4 = '</span>), <span class=\"re0\">POWER</span> <span class=\"kw5\">is</span> <span class=\"nu0\">2</span> <span class=\"sy1\">**</span> <span class=\"sy1\">-</span><span class=\"nu0\">3.4</span>, <span class=\"kw4\">write</span>(<span class=\"re0\">POWER</span>), <span class=\"kw5\">nl</span>.<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 10, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw3\">math.exp</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw3\">math.pi</span><br/><span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw3\">math.log</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw3\">math.log10</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw3\">math.exp</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw3\">math.abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw3\">math.ceil</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>x<span class=\"sy0\">^</span>y</pre>"}, {"lang": "M2000 Interpreter", "loc": 36, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module Checkit {<br/>      Def exp(x)= 2.71828182845905^x<br/>      Print Ln(exp(1))==1<br/>      Print Log(10^5)==5<br/>      Print Sgn(-5)=-1<br/>      Print Abs(-2.10#)=2.1#<br/>      Def exptype$(x)=type$(x)<br/>      Print exptype$(Abs(-2.1#))=\"Currency\"<br/>      Print exptype$(Abs(-2.1~))=\"Single\"<br/>      Print exptype$(Abs(<a class=\"__cf_email__\" data-cfemail=\"c2eff0ecf382\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>))=\"Decimal\"<br/>      Print exptype$(Abs(-2&amp;))=\"Long\"<br/>      Print exptype$(Abs(-2%))=\"Integer\"<br/>      Print exptype$(Abs(-2.212e34))=\"Double\"<br/>\u00a0<br/>      Print exptype$(Sgn(-2.1#))=\"Integer\"<br/>      \\\\ Sgn return integer type<br/>      Print exptype$(Sgn(-2.212e34))=\"Integer\"<br/>      \\\\ Log, Len return double<br/>      Print exptype$(Log(1000))=\"Double\"<br/>      Print exptype$(exp(1%))=\"Double\"<br/>      Print exptype$(Ln(1212%))=\"Double\"<br/>      \\\\ power return type Double<br/>      Print exptype$(2&amp;^2&amp;)=\"Double\"<br/>      Print exptype$(2&amp;**2&amp;)=\"Double\"<br/>      Print exptype$(2&amp;*2&amp;)=\"Long\"<br/>      Print 2**2=4, 2^2=4, 2^2^2=16, 2**2**2=16<br/>      \\\\ floor() and Int() is the same<br/>      Print Int(-2.7)=-3, Int(2.7)=2<br/>      Print Floor(-2.7)=-3, Floor(2.7)=2<br/>      Print Ceil(-2.7)=-2, Ceil(2.7)=3<br/>\u00a0<br/>      Print Sqrt(4)=2<br/>}<br/>Checkit<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 2, "block": "<pre class=\"text highlighted_source\">&gt; abs(ceil(floor(ln(exp(1)^sqrt(exp(Pi*I)+1)))));      <br/>                                   0</pre>"}, {"lang": "Mathematica", "loc": 10, "block": "<pre class=\"text highlighted_source\">E<br/>Pi<br/>Sqrt[x]<br/>Log[x]<br/>Log[b,x]<br/>Exp[x]<br/>Abs[x]<br/>Floor[x]<br/>Ceiling[x]<br/>Power[x, y]</pre>"}, {"lang": "MATLAB / Octave", "loc": 11, "block": "<pre class=\"matlab highlighted_source\"><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/exp.html\"><span class=\"kw2\">exp</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>    <span class=\"co1\">% e</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pi.html\"><span class=\"kw2\">pi</span></a>        <span class=\"co1\">% pi</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sqrt.html\"><span class=\"kw2\">sqrt</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span>   <span class=\"co1\">% square root</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/log.html\"><span class=\"kw2\">log</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span>    <span class=\"co1\">% natural logarithm</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/log2.html\"><span class=\"kw2\">log2</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span>   <span class=\"co1\">% logarithm base 2 </span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/log10.html\"><span class=\"kw2\">log10</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span>  <span class=\"co1\">% logarithm base 10 </span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/exp.html\"><span class=\"kw2\">exp</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span>    <span class=\"co1\">% exponential</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/abs.html\"><span class=\"kw2\">abs</span></a><span class=\"br0\">(</span>-x<span class=\"br0\">)</span>   <span class=\"co1\">% absolute value</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/floor.html\"><span class=\"kw2\">floor</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span>  <span class=\"co1\">% floor</span><br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ceil.html\"><span class=\"kw2\">ceil</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span>   <span class=\"co1\">% ceiling</span><br/>x^y       <span class=\"co1\">% power</span></pre>"}, {"lang": "MAXScript", "loc": 9, "block": "<pre class=\"text highlighted_source\">e       -- Euler's number<br/>pi      -- pi<br/>log x   -- natural logarithm<br/>log10 x -- log base 10<br/>exp x   -- exponantial<br/>abs x   -- absolute value<br/>floor x -- floor<br/>ceil x  -- ceiling<br/>pow x y -- power</pre>"}, {"lang": "Mercury", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>math.pi        \u00a0% Pi.<br/>math.e         \u00a0% Euler's number.<br/>math.sqrt(X)   \u00a0% Square root of X.<br/>math.ln(X)     \u00a0% Natural logarithm of X.<br/>math.log10(X)  \u00a0% Logarithm to the base 10 of X.<br/>math.log2(X)   \u00a0% Logarithm to the base 2 of X.<br/>math.log(B, X) \u00a0% Logarithm to the base B of X.<br/>math.exp(X)    \u00a0% e raised to the power of X.<br/>float.abs(X)   \u00a0% Absolute value of X.<br/>math.floor(X)  \u00a0% Floor of X.<br/>math.ceiling(X)\u00a0% Ceiling of X.<br/>math.pow(X, Y) \u00a0% X raised to the power of Y.</pre>"}, {"lang": "Metafont", "loc": 15, "block": "<pre class=\"text highlighted_source\">show mexp(256);  \u00a0% outputs e; since MF uses mexp(x) = exp(x/256)<br/>show 3.14159;    \u00a0% no pi constant built in; of course we can define it<br/>                 \u00a0% in several ways... even computing<br/>                 \u00a0% C/2r (which would be funny since MF handles paths,<br/>                 \u00a0% and a circle is a path...)<br/>show sqrt2;      \u00a0% 1.41422, or in general sqrt(a)<br/>show mexp(256*x);\u00a0% see e.<br/>show abs(x);     \u00a0% returns |x| (the absolute value of the number x, or<br/>                 \u00a0% the length of the vector x); it is the same as<br/>                 \u00a0% length(x); plain Metafont in fact says:<br/>                 \u00a0% let abs = length;<br/>show floor(x);   \u00a0% floor<br/>show ceiling(x); \u00a0% ceiling<br/>show x**y;       \u00a0% ** is not a built in: it is defined in the basic macros<br/>                 \u00a0% set for Metafont (plain Metafont) as a primarydef</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 19, "block": "<pre class=\"text highlighted_source\">1\te^x\t\u0421/\u041f<br/>\u00a0<br/>\u043f\u0438\t\u0421/\u041f<br/>\u00a0<br/>\u041a\u0432\u041a\u043e\u0440\t\u0421/\u041f<br/>\u00a0<br/>lg\t\u0421/\u041f<br/>\u00a0<br/>e^x\t\u0421/\u041f<br/>\u00a0<br/>|x|\t\u0421/\u041f<br/>\u00a0<br/>\u041f0\t^\t[x]\t\u041f1\t-\tx=0\t09\t\u0418\u041f0\t\u0421/\u041f\t\u0417\u041d<br/>x&gt;=0\t14\t\u0418\u041f1\t\u0421/\u041f\t\u0418\u041f1\t1\t-\t\u0421/\u041f<br/>\u00a0<br/>\u041f0\t^\t[x]\t\u041f1\t-\tx=0\t09\t\u0418\u041f0\t\u0421/\u041f\t\u0417\u041d<br/>x&lt;0\t14\t\u0418\u041f1\t\u0421/\u041f\t\u0418\u041f1\t1\t+\t\u0421/\u041f<br/>\u00a0<br/>x^y\t\u0421/\u041f</pre>"}, {"lang": "Modula-3", "loc": 9, "block": "<pre class=\"modula3 highlighted_source\">Math.<span class=\"me1\">E</span>;<br/>Math.<span class=\"me1\">Pi</span>;<br/>Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;<br/>Math.<span class=\"me1\">log</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;<br/>Math.<span class=\"me1\">exp</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;<br/><span class=\"kw3\">ABS</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>; <span class=\"coMULTI\">(* Built in function. *)</span><br/><span class=\"kw3\">FLOOR</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>; <span class=\"coMULTI\">(* Built in function. *)</span><br/><span class=\"kw3\">CEILING</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>; <span class=\"coMULTI\">(* Built in function. *)</span><br/>Math.<span class=\"me1\">pow</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span>;</pre>"}, {"lang": "NetRexx", "loc": 50, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary utf8<br/>\u00a0<br/><span class=\"kw1\">numeric</span> digits <span class=\"nu0\">30</span><br/>\u00a0<br/>x = <span class=\"nu0\">2.5</span><br/>y = <span class=\"nu0\">3</span><br/>pad = <span class=\"nu0\">40</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'Java Math constants &amp; functions:'</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Euler'</span><span class=\"st0\">'s number (e):'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                    Math.<span class=\"me0\">E</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Pi:'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                                     Math.<span class=\"me0\">PI</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Square root of'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                     Math.<span class=\"me0\">sqrt</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Log(e) of'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                          Math.<span class=\"me0\">log</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Log(e) of e:'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                            Math.<span class=\"me0\">log</span><span class=\"br0\">(</span>Math.<span class=\"me0\">E</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Log(10) of'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                         Math.<span class=\"me0\">log10</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Log(10) of 10:'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                          Math.<span class=\"me0\">log10</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Exponential (e**x) of'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>              Math.<span class=\"me0\">exp</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Exponential (e**x) of log(e)'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>       Math.<span class=\"me0\">exp</span><span class=\"br0\">(</span>Math.<span class=\"me0\">log</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Abs of'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                             Math.<span class=\"kw6\">abs</span><span class=\"br0\">(</span>x.<span class=\"kw6\">todouble</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Abs of'</span> <span class=\"br0\">(</span>-x<span class=\"br0\">)</span><span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                          Math.<span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"br0\">(</span>-x<span class=\"br0\">)</span>.<span class=\"kw6\">todouble</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Floor of'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                           Math.<span class=\"me0\">floor</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Floor of'</span> <span class=\"br0\">(</span>-x<span class=\"br0\">)</span><span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                        Math.<span class=\"me0\">floor</span><span class=\"br0\">(</span><span class=\"br0\">(</span>-x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Ceiling of'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                         Math.<span class=\"me0\">ceil</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Ceiling of'</span> <span class=\"br0\">(</span>-x<span class=\"br0\">)</span><span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                      Math.<span class=\"me0\">ceil</span><span class=\"br0\">(</span><span class=\"br0\">(</span>-x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">' '</span> x <span class=\"st0\">'to the power of'</span> y<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                Math.<span class=\"me0\">pow</span><span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">' '</span> x <span class=\"st0\">'to the power of'</span> <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> y<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>            Math.<span class=\"me0\">pow</span><span class=\"br0\">(</span>x, <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> y<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  10 to the power of log10'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>           Math.<span class=\"me0\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>, Math.<span class=\"me0\">log10</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Extras</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Cube root of'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                       Math.<span class=\"me0\">cbrt</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Hypotenuse of'</span> <span class=\"nu0\">3</span> <span class=\"st0\">'x'</span> <span class=\"nu0\">4</span> <span class=\"st0\">'right triangle:'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span> Math.<span class=\"me0\">hypot</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Max of'</span> <span class=\"br0\">(</span>-x<span class=\"br0\">)</span> <span class=\"st0\">'&amp;'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                    Math.<span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"br0\">(</span>-x<span class=\"br0\">)</span>.<span class=\"kw6\">todouble</span>, x<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Min of'</span> <span class=\"br0\">(</span>-x<span class=\"br0\">)</span> <span class=\"st0\">'&amp;'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                    Math.<span class=\"kw6\">min</span><span class=\"br0\">(</span><span class=\"br0\">(</span>-x<span class=\"br0\">)</span>.<span class=\"kw6\">todouble</span>, x<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Signum of'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                          Math.<span class=\"me0\">signum</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>.<span class=\"kw6\">todouble</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Signum of'</span> x <span class=\"st0\">'-'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                    Math.<span class=\"me0\">signum</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x - x<span class=\"br0\">)</span>.<span class=\"kw6\">todouble</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Signum of'</span> <span class=\"br0\">(</span>-x<span class=\"br0\">)</span><span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                       Math.<span class=\"me0\">signum</span><span class=\"br0\">(</span><span class=\"br0\">(</span>-x<span class=\"br0\">)</span>.<span class=\"kw6\">todouble</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'NetRexx built-in support for numeric data:'</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Abs of'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                        x.<span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Abs of'</span> <span class=\"br0\">(</span>-x<span class=\"br0\">)</span><span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                     <span class=\"br0\">(</span>-x<span class=\"br0\">)</span>.<span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Sign of'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                       x.<span class=\"kw6\">sign</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Sign of'</span> x <span class=\"st0\">'-'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                 <span class=\"br0\">(</span>x - x<span class=\"br0\">)</span>.<span class=\"kw6\">sign</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Sign of'</span> <span class=\"br0\">(</span>-x<span class=\"br0\">)</span><span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                    <span class=\"br0\">(</span>-x<span class=\"br0\">)</span>.<span class=\"kw6\">sign</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Max of'</span> <span class=\"br0\">(</span>-x<span class=\"br0\">)</span> <span class=\"st0\">'&amp;'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>               <span class=\"br0\">(</span>-x<span class=\"br0\">)</span>.<span class=\"kw6\">max</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Min of'</span> <span class=\"br0\">(</span>-x<span class=\"br0\">)</span> <span class=\"st0\">'&amp;'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>               <span class=\"br0\">(</span>-x<span class=\"br0\">)</span>.<span class=\"kw6\">min</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Truncate'</span> x <span class=\"st0\">'by'</span> y<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>               x.<span class=\"kw6\">trunc</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> Rexx<span class=\"br0\">(</span><span class=\"st0\">'  Format (with rounding)'</span> x <span class=\"st0\">'by'</span> y<span class=\"st0\">':'</span><span class=\"br0\">)</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span> x.<span class=\"me0\">format</span><span class=\"br0\">(</span>y, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 14, "block": "<pre class=\"text highlighted_source\">import math<br/>\u00a0<br/>var x, y = 12.5<br/>\u00a0<br/>echo E<br/>echo Pii<br/>echo sqrt(x)<br/>echo ln(x)<br/>echo log10(x)<br/>echo exp(x)<br/>echo abs(x)<br/>echo floor(x)<br/>echo ceil(x)<br/>echo pow(x, y)</pre>"}, {"lang": "Objeck", "loc": 9, "block": "<pre class=\"objeck highlighted_source\">Float<span class=\"sy0\">-&gt;</span><span class=\"me1\">Pi</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Float<span class=\"sy0\">-&gt;</span><span class=\"me1\">E</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"nu0\">4.0</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">SquareRoot</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"nu0\">1.5</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Log</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># exponential is not supported</span><br/><span class=\"nu0\">3.99</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"nu0\">3.99</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Floor</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"nu0\">3.99</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Ceiling</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"nu0\">4.5</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Ceiling</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "OCaml", "loc": 9, "block": "<pre class=\"ocaml highlighted_source\"><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsqrt\"><span class=\"kw3\">sqrt</span></a> x      <span class=\"co1\">(* square root *)</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALlog\"><span class=\"kw3\">log</span></a> x       <span class=\"co1\">(* natural logarithm--log base 10 also available (log10) *)</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALexp\"><span class=\"kw3\">exp</span></a> x       <span class=\"co1\">(* exponential *)</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALabs_float\"><span class=\"kw3\">abs_float</span></a> x <span class=\"co1\">(* absolute value *)</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALabs\"><span class=\"kw3\">abs</span></a> x       <span class=\"co1\">(* absolute value (for integers) *)</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloor\"><span class=\"kw3\">floor</span></a> x     <span class=\"co1\">(* floor *)</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALceil\"><span class=\"kw3\">ceil</span></a> x      <span class=\"co1\">(* ceiling *)</span><br/>x <span class=\"sy0\">**</span> y      <span class=\"co1\">(* power *)</span><br/><span class=\"sy0\">-.</span> x        <span class=\"co1\">(* negation for floats *)</span></pre>"}, {"lang": "Octave", "loc": 9, "block": "<pre class=\"octave highlighted_source\"><a href=\"http://octave.sourceforge.net/octave/function/e.html\"><span class=\"kw10\">e</span></a>         <span class=\"co2\">% e</span><br/><a href=\"http://octave.sourceforge.net/octave/function/pi.html\"><span class=\"kw10\">pi</span></a>        <span class=\"co2\">% pi</span><br/><a href=\"http://octave.sourceforge.net/octave/function/sqrt.html\"><span class=\"kw5\">sqrt</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/pi.html\"><span class=\"kw10\">pi</span></a><span class=\"br0\">)</span>  <span class=\"co2\">% square root</span><br/><a href=\"http://octave.sourceforge.net/octave/function/log.html\"><span class=\"kw5\">log</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/e.html\"><span class=\"kw10\">e</span></a><span class=\"br0\">)</span>    <span class=\"co2\">% natural logarithm</span><br/><a href=\"http://octave.sourceforge.net/octave/function/exp.html\"><span class=\"kw5\">exp</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/pi.html\"><span class=\"kw10\">pi</span></a><span class=\"br0\">)</span>   <span class=\"co2\">% exponential</span><br/><a href=\"http://octave.sourceforge.net/octave/function/abs.html\"><span class=\"kw5\">abs</span></a><span class=\"br0\">(</span><span class=\"sy1\">-</span><a href=\"http://octave.sourceforge.net/octave/function/e.html\"><span class=\"kw10\">e</span></a><span class=\"br0\">)</span>   <span class=\"co2\">% absolute value</span><br/><a href=\"http://octave.sourceforge.net/octave/function/floor.html\"><span class=\"kw5\">floor</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/pi.html\"><span class=\"kw10\">pi</span></a><span class=\"br0\">)</span> <span class=\"co2\">% floor</span><br/><a href=\"http://octave.sourceforge.net/octave/function/ceil.html\"><span class=\"kw5\">ceil</span></a><span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/pi.html\"><span class=\"kw10\">pi</span></a><span class=\"br0\">)</span>  <span class=\"co2\">% ceiling</span><br/><a href=\"http://octave.sourceforge.net/octave/function/e.html\"><span class=\"kw10\">e</span></a><span class=\"sy1\">**</span><a href=\"http://octave.sourceforge.net/octave/function/pi.html\"><span class=\"kw10\">pi</span></a>     <span class=\"co2\">% power</span></pre>"}, {"lang": "Oforth", "loc": 24, "block": "<pre class=\"text highlighted_source\">import: math<br/>\u00a0<br/>: testReal<br/>   E println<br/>   Pi println<br/>   9 sqrt println<br/>   2 ln println<br/>   2 exp println<br/>   -3.4 abs println<br/>   3.4 exp println<br/>\u00a0<br/>   2.4 floor println<br/>   3.9 floor println<br/>   5.5 floor println<br/>  -2.4 floor println<br/>  -3.9 floor println<br/>  -5.5 floor println<br/>\u00a0<br/>   2.4 ceil println<br/>   3.9 ceil println<br/>   5.5 ceil println<br/>  -2.4 ceil println<br/>  -3.9 ceil println<br/>  -5.5 ceil println\u00a0;</pre>"}, {"lang": "ooRexx", "loc": 58, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"coMULTI\">/* Rexx */</span><br/>\u00a0<br/><span class=\"co1\">-- MathLoadFuncs &amp; MathDropFuncs are no longer needed and are effectively NOPs</span><br/><span class=\"co1\">-- but MathLoadFuncs does return its copyright statement when given a string argument</span><br/>RxMathCopyright = MathLoadFuncs<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> RxMathCopyright<br/>\u00a0<br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">16</span><br/>\u00a0<br/>x = <span class=\"nu0\">2.5</span><br/>y = <span class=\"nu0\">3</span><br/>pad = <span class=\"nu0\">40</span><br/>digs = <span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'Working with precision'</span> digs<br/><span class=\"kw1\">say</span> <span class=\"st0\">'Math constants &amp; functions:'</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Euler'</span><span class=\"st0\">'s number (e):'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                    RxCalcExp<span class=\"br0\">(</span><span class=\"nu0\">1</span>, digs<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Pi:'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                                     RxCalcPi<span class=\"br0\">(</span>digs<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Square root of'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                     RxCalcSqrt<span class=\"br0\">(</span>x, digs<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Log(e) of'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                          RxCalcLog<span class=\"br0\">(</span>x, digs<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Log(e) of e:'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                            RxCalcLog<span class=\"br0\">(</span>RxCalcExp<span class=\"br0\">(</span><span class=\"nu0\">1</span>, digs<span class=\"br0\">)</span>, digs<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Log(10) of'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                         RxCalcLog10<span class=\"br0\">(</span>x, digs<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Log(10) of 10:'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                          RxCalcLog10<span class=\"br0\">(</span><span class=\"nu0\">10</span>, digs<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Exponential (e**x) of'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>              RxCalcExp<span class=\"br0\">(</span>x, digs<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Exponential (e**x) of log(e)'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>       RxCalcExp<span class=\"br0\">(</span>RxCalcLog<span class=\"br0\">(</span>x, digs<span class=\"br0\">)</span>, digs<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">' '</span> x <span class=\"st0\">'to the power of'</span> y<span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                RxCalcPower<span class=\"br0\">(</span>x, y, digs<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">' '</span> x <span class=\"st0\">'to the power of 1/'</span>y<span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>              RxCalcPower<span class=\"br0\">(</span>x, <span class=\"nu0\">1</span> <span class=\"sy0\">/</span> y, digs<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  10 to the power of log10'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>           RxCalcPower<span class=\"br0\">(</span><span class=\"nu0\">10</span>, RxCalcLog10<span class=\"br0\">(</span>x<span class=\"br0\">)</span>, digs<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'Rexx built-in support for numeric data:'</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Abs of'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                             x~<span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Abs of'</span> <span class=\"br0\">(</span>-x<span class=\"br0\">)</span><span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                          <span class=\"br0\">(</span>-x<span class=\"br0\">)</span>~<span class=\"kw6\">abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Sign of'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                            x~<span class=\"kw6\">sign</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Sign of'</span> x <span class=\"st0\">'-'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                      <span class=\"br0\">(</span>x - x<span class=\"br0\">)</span>~<span class=\"kw6\">sign</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Sign of'</span> <span class=\"br0\">(</span>-x<span class=\"br0\">)</span><span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                         <span class=\"br0\">(</span>-x<span class=\"br0\">)</span>~<span class=\"kw6\">sign</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Max of'</span> <span class=\"br0\">(</span>-x<span class=\"br0\">)</span> <span class=\"st0\">'&amp;'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                    <span class=\"br0\">(</span>-x<span class=\"br0\">)</span>~<span class=\"kw6\">max</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Min of'</span> <span class=\"br0\">(</span>-x<span class=\"br0\">)</span> <span class=\"st0\">'&amp;'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                    <span class=\"br0\">(</span>-x<span class=\"br0\">)</span>~<span class=\"kw6\">min</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Truncate'</span> x <span class=\"st0\">'by'</span> y<span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                    x~<span class=\"kw6\">trunc</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Format (with rounding)'</span> x <span class=\"st0\">'by'</span> y<span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>      x~<span class=\"kw6\">format</span><span class=\"br0\">(</span>y, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'Use RYO functions for floor &amp; ceiling:'</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Floor of'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                           floor<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Floor of'</span> <span class=\"br0\">(</span>-x<span class=\"br0\">)</span><span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                        floor<span class=\"br0\">(</span><span class=\"br0\">(</span>-x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Ceiling of'</span> x<span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                         ceiling<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"br0\">(</span><span class=\"st0\">'  Ceiling of'</span> <span class=\"br0\">(</span>-x<span class=\"br0\">)</span><span class=\"st0\">':'</span><span class=\"br0\">)</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span>pad<span class=\"br0\">)</span>                      ceiling<span class=\"br0\">(</span><span class=\"br0\">(</span>-x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- floor and ceiling functions are not part of ooRexx</span><br/>floor: <span class=\"kw1\">procedure</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>~<span class=\"kw6\">trunc</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">\\</span>= <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>~<span class=\"kw6\">trunc</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>ceiling: <span class=\"kw1\">procedure</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>~<span class=\"kw6\">trunc</span><span class=\"br0\">(</span><span class=\"br0\">)</span> + <span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">\\</span>= <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>~<span class=\"kw6\">trunc</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>::requires <span class=\"st0\">'RxMath'</span> library</pre>"}, {"lang": "Oz", "loc": 12, "block": "<pre class=\"oz highlighted_source\"><span class=\"br0\">{</span>ForAll<br/> <span class=\"br0\">[</span><br/>  <span class=\"br0\">{</span>Exp 1<span class=\"sy0\">.</span><span class=\"br0\">}</span>           <span class=\"co1\">%% 2.7183   Euler's number: not predefined</span><br/>  4<span class=\"sy0\">.</span> <span class=\"sy0\">*</span> <span class=\"br0\">{</span>Atan2 1<span class=\"sy0\">.</span> 1<span class=\"sy0\">.</span><span class=\"br0\">}</span> <span class=\"co1\">%% 3.1416   pi: not predefined</span><br/>  <span class=\"br0\">{</span>Sqrt 81<span class=\"sy0\">.</span><span class=\"br0\">}</span>         <span class=\"co1\">%% 9.0      square root; expects a float</span><br/>  <span class=\"br0\">{</span>Log 2<span class=\"sy0\">.</span>7183<span class=\"br0\">}</span>       <span class=\"co1\">%% 1.0      natural logarithm</span><br/>  <span class=\"br0\">{</span>Abs <span class=\"sy0\">~</span>1<span class=\"br0\">}</span>           <span class=\"co1\">%% 1        absolute value; expects a float or an integer</span><br/>  <span class=\"br0\">{</span>Floor 1<span class=\"sy0\">.</span>999<span class=\"br0\">}</span>      <span class=\"co1\">%% 1.0      floor; expects and returns a float</span><br/>  <span class=\"br0\">{</span>Ceil 1<span class=\"sy0\">.</span>999<span class=\"br0\">}</span>       <span class=\"co1\">%% 2.0      ceiling; expects and returns a float</span><br/>  <span class=\"br0\">{</span>Pow 2 3<span class=\"br0\">}</span>          <span class=\"co1\">%% 8        power; both arguments must be of the same type</span><br/> <span class=\"br0\">]</span><br/> Show<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"br0\">[</span><span class=\"kw1\">exp</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">Pi</span><span class=\"sy0\">,</span> <span class=\"kw1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">log</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">abs</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">floor</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">ceil</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu1\">2</span><span class=\"sy0\">^</span><span class=\"nu1\">3</span><span class=\"br0\">]</span></pre>"}, {"lang": "Pascal", "loc": 17, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> POSIX<span class=\"sy0\">;</span> <span class=\"co1\"># for floor() and ceil()</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/exp.html\"><span class=\"kw3\">exp</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># e</span><br/><span class=\"nu0\">4</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/atan2.html\"><span class=\"kw3\">atan2</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># pi</span><br/><a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># square root</span><br/><a href=\"http://perldoc.perl.org/functions/log.html\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># natural logarithm; log10() available in POSIX module</span><br/><a href=\"http://perldoc.perl.org/functions/exp.html\"><span class=\"kw3\">exp</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># exponential</span><br/><a href=\"http://perldoc.perl.org/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># absolute value</span><br/>floor<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># floor</span><br/>ceil<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># ceiling</span><br/><span class=\"re0\">$x</span> <span class=\"sy0\">**</span> <span class=\"re0\">$y</span><span class=\"sy0\">;</span> <span class=\"co1\"># power</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">Trig</span><span class=\"sy0\">;</span><br/>pi<span class=\"sy0\">;</span> <span class=\"co1\"># alternate way to get pi</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">Complex</span><span class=\"sy0\">;</span><br/>pi<span class=\"sy0\">;</span> <span class=\"co1\"># alternate way to get pi</span></pre>"}, {"lang": "Perl", "loc": 17, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> POSIX<span class=\"sy0\">;</span> <span class=\"co1\"># for floor() and ceil()</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/exp.html\"><span class=\"kw3\">exp</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># e</span><br/><span class=\"nu0\">4</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/atan2.html\"><span class=\"kw3\">atan2</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># pi</span><br/><a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># square root</span><br/><a href=\"http://perldoc.perl.org/functions/log.html\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># natural logarithm; log10() available in POSIX module</span><br/><a href=\"http://perldoc.perl.org/functions/exp.html\"><span class=\"kw3\">exp</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># exponential</span><br/><a href=\"http://perldoc.perl.org/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># absolute value</span><br/>floor<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># floor</span><br/>ceil<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># ceiling</span><br/><span class=\"re0\">$x</span> <span class=\"sy0\">**</span> <span class=\"re0\">$y</span><span class=\"sy0\">;</span> <span class=\"co1\"># power</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">Trig</span><span class=\"sy0\">;</span><br/>pi<span class=\"sy0\">;</span> <span class=\"co1\"># alternate way to get pi</span><br/>\u00a0<br/><span class=\"kw2\">use</span> Math<span class=\"sy0\">::</span><span class=\"me2\">Complex</span><span class=\"sy0\">;</span><br/>pi<span class=\"sy0\">;</span> <span class=\"co1\"># alternate way to get pi</span></pre>"}, {"lang": "Perl 6", "loc": 38, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> e<span class=\"sy0\">;</span>            <span class=\"co1\"># e</span><br/><span class=\"kw3\">say</span> \u03c0<span class=\"sy0\">;</span> <span class=\"co1\"># or pi    # pi</span><br/><span class=\"kw3\">say</span> \u03c4<span class=\"sy0\">;</span> <span class=\"co1\"># or tau   # tau</span><br/>\u00a0<br/><span class=\"co1\"># Common mathmatical function are availble</span><br/><span class=\"co1\"># as subroutines and as numeric methods.</span><br/><span class=\"co1\"># It is a matter of personal taste and</span><br/><span class=\"co1\"># programming style as to which is used.</span><br/><span class=\"kw3\">say</span> <span class=\"kw3\">sqrt</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>       <span class=\"co1\"># Square root</span><br/><span class=\"kw3\">say</span> <span class=\"nu0\">2</span><span class=\"sy0\">.</span><span class=\"kw3\">sqrt</span><span class=\"sy0\">;</span>       <span class=\"co1\"># Square root</span><br/>\u00a0<br/><span class=\"co1\"># If you omit a base, does natural logarithm</span><br/><span class=\"kw3\">say</span> <span class=\"kw3\">log</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span>        <span class=\"co1\"># Natural logarithm</span><br/><span class=\"kw3\">say</span> <span class=\"nu0\">2</span><span class=\"sy0\">.</span><span class=\"kw3\">log</span><span class=\"sy0\">;</span>        <span class=\"co1\"># Natural logarithm</span><br/>\u00a0<br/><span class=\"co1\"># Specify a base if other than e</span><br/><span class=\"kw3\">say</span> <span class=\"kw3\">log</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span>    <span class=\"co1\"># Base 10 logarithm</span><br/><span class=\"kw3\">say</span> <span class=\"nu0\">4</span><span class=\"sy0\">.</span><span class=\"kw3\">log</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    <span class=\"co1\"># Base 10 logarithm</span><br/><span class=\"kw3\">say</span> <span class=\"nu0\">4</span><span class=\"sy0\">.</span><span class=\"kw3\">log10</span><span class=\"sy0\">;</span>      <span class=\"co1\"># Convenience, base 10 only logarithm</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"kw3\">exp</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span>        <span class=\"co1\"># Exponentiation base e</span><br/><span class=\"kw3\">say</span> <span class=\"nu0\">7</span><span class=\"sy0\">.</span><span class=\"kw3\">exp</span><span class=\"sy0\">;</span>        <span class=\"co1\"># Exponentiation base e</span><br/>\u00a0<br/><span class=\"co1\"># Specify a base if other than e</span><br/><span class=\"kw3\">say</span> <span class=\"kw3\">exp</span> <span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span>     <span class=\"co1\"># Exponentiation</span><br/><span class=\"kw3\">say</span> <span class=\"nu0\">7</span><span class=\"sy0\">.</span><span class=\"kw3\">exp</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>     <span class=\"co1\"># Exponentiation</span><br/><span class=\"kw3\">say</span> <span class=\"nu0\">4</span> <span class=\"sy0\">**</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span>       <span class=\"co1\"># Exponentiation</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"kw3\">abs</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span>       <span class=\"co1\"># Absolute value</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">abs</span><span class=\"sy0\">;</span>     <span class=\"co1\"># Absolute value</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"kw3\">floor</span> <span class=\"sy0\">-</span><span class=\"nu0\">3.5</span><span class=\"sy0\">;</span>   <span class=\"co1\"># Floor</span><br/><span class=\"kw3\">say</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">3.5</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">floor</span><span class=\"sy0\">;</span> <span class=\"co1\"># Floor</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"kw3\">ceiling</span> pi<span class=\"sy0\">;</span>   <span class=\"co1\"># Ceiling</span><br/><span class=\"kw3\">say</span> pi<span class=\"sy0\">.</span><span class=\"kw3\">ceiling</span><span class=\"sy0\">;</span>   <span class=\"co1\"># Ceiling</span><br/>\u00a0<br/><span class=\"kw3\">say</span> e <span class=\"sy0\">**</span> \u03c0\\<span class=\"kw3\">i</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> \u2245 <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"co1\">#\u00a0:-)</span></pre>"}, {"lang": "Phix", "loc": 15, "block": "<pre class=\"text highlighted_source\">?E                  -- Euler number<br/>?PI                 -- pi<br/>?log(E)             -- natural logarithm<br/>?log10(10)          -- base 10 logarithm<br/>?exp(log(5))        -- exponential<br/>?sqrt(5)            -- square root<br/>?abs(-1.2)          -- absolute value<br/>?floor(-1.2)        -- floor,    -2<br/>?ceil(-1.2)         -- ceiling,  -1<br/>?round(-1.8)        -- rounded,  -2<br/>?trunc(-1.8)        -- truncate, -1<br/>?power(E,log(5))    -- displays 5.0<br/>?power(10,log10(5)) -- displays 5.0<br/>?INVLN10            -- displays 0.434..<br/>?exp(1/INVLN10)     -- displays 10.0</pre>"}, {"lang": "PHP", "loc": 9, "block": "<pre class=\"php highlighted_source\">M_E<span class=\"sy0\">;</span> <span class=\"co1\">//e</span><br/>M_PI<span class=\"sy0\">;</span> <span class=\"co1\">//pi</span><br/><a href=\"http://www.php.net/sqrt\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//square root</span><br/><a href=\"http://www.php.net/log\"><span class=\"kw3\">log</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//natural logarithm--log base 10 also available (log10)</span><br/><a href=\"http://www.php.net/exp\"><span class=\"kw3\">exp</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//exponential</span><br/><a href=\"http://www.php.net/abs\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//absolute value</span><br/><a href=\"http://www.php.net/floor\"><span class=\"kw3\">floor</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//floor</span><br/><a href=\"http://www.php.net/ceil\"><span class=\"kw3\">ceil</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//ceiling</span><br/><a href=\"http://www.php.net/pow\"><span class=\"kw3\">pow</span></a><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//power</span></pre>"}, {"lang": "PL/I", "loc": 16, "block": "<pre class=\"pli highlighted_source\"><span class=\"coMULTI\">/* e  not available other than by using exp(1q0).*/</span><br/><span class=\"coMULTI\">/* pi not available other than by using a trig function such as: pi=4*atan(1) */</span><br/>y <span class=\"sy0\">=</span> <span class=\"kw1\">sqrt</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>y <span class=\"sy0\">=</span> <span class=\"kw1\">log</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>y <span class=\"sy0\">=</span> <span class=\"kw1\">log2</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>y <span class=\"sy0\">=</span> <span class=\"kw1\">log10</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>y <span class=\"sy0\">=</span> <span class=\"kw1\">exp</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>y <span class=\"sy0\">=</span> <span class=\"kw1\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>y <span class=\"sy0\">=</span> <span class=\"kw1\">floor</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>y <span class=\"sy0\">=</span> <span class=\"kw1\">ceil</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>a <span class=\"sy0\">=</span> x<span class=\"sy0\">**</span>y<span class=\"sy0\">;</span>      <span class=\"coMULTI\">/* power */</span><br/><span class=\"coMULTI\">/* extra functions: */</span><br/>y <span class=\"sy0\">=</span> <span class=\"kw1\">erf</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span>    <span class=\"coMULTI\">/* the error function. */</span><br/>y <span class=\"sy0\">=</span> <span class=\"kw1\">erfc</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"coMULTI\">/* the error function complemented. */</span><br/>y <span class=\"sy0\">=</span> <span class=\"kw1\">gamma</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>y <span class=\"sy0\">=</span> <span class=\"kw1\">loggamma</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 16, "block": "<pre class=\"text highlighted_source\">(scl 12)  # 12 places after decimal point<br/>(load \"@lib/math.l\")<br/>\u00a0<br/>(prinl (format (exp 1.0) *Scl))        # e, exp<br/>(prinl (format pi *Scl))               # pi<br/>\u00a0<br/>(prinl (format (pow 2.0 0.5) *Scl))    # sqare root<br/>(prinl (format (sqrt 2.0 1.0) *Scl))<br/>\u00a0<br/>(prinl (format (log 2.0) *Scl))        # logarithm<br/>(prinl (format (exp 4.0) *Scl))        # exponential<br/>\u00a0<br/>(prinl (format (abs -7.2) *Scl))       # absolute value<br/>(prinl (abs -123))<br/>\u00a0<br/>(prinl (format (pow 3.0 4.0) *Scl))    # power</pre>"}, {"lang": "Pop11", "loc": 6, "block": "<pre class=\"text highlighted_source\">pi       \u00a0;;; Number Pi<br/>sqrt(x)  \u00a0;;; Square root<br/>log(x)   \u00a0;;; Natural logarithm<br/>exp(x)   \u00a0;;; Exponential function<br/>abs(x)   \u00a0;;; Absolute value<br/>x ** y   \u00a0;;; x to the power y</pre>"}, {"lang": "ACL2", "loc": 11, "block": "<pre class=\"text highlighted_source\">define floor(x);<br/>    if x &lt; 0 then<br/>        -intof(x);<br/>    else<br/>        intof(x);<br/>    endif;<br/>enddefine;<br/>\u00a0<br/>define ceiling(x);<br/>    -floor(-x);<br/>enddefine;</pre>"}, {"lang": "PowerShell", "loc": 9, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw1\">Write-Host</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::E<span class=\"br0\">)</span><br/><span class=\"kw1\">Write-Host</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Pi<span class=\"br0\">)</span><br/><span class=\"kw1\">Write-Host</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Sqrt<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Write-Host</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Log<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Write-Host</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Exp<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Write-Host</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Abs<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Write-Host</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Floor<span class=\"br0\">(</span><span class=\"nu0\">3.14</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Write-Host</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Ceiling<span class=\"br0\">(</span><span class=\"nu0\">3.14</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Write-Host</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Pow<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "PureBasic", "loc": 8, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Debug</span> #E<br/><span class=\"kw1\">Debug</span> #PI <br/><span class=\"kw1\">Debug</span> <span class=\"kw2\">Sqr</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/><span class=\"kw1\">Debug</span> <span class=\"kw2\">Log</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/><span class=\"kw1\">Debug</span> Exp<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/><span class=\"kw1\">Debug</span> <span class=\"kw2\">Log10</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/><span class=\"kw1\">Debug</span> <span class=\"kw2\">Abs</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/><span class=\"kw1\">Debug</span> <span class=\"kw2\">Pow</span><span class=\"br0\">(</span>f,f<span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 16, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">math</span><br/>\u00a0<br/><span class=\"kw3\">math</span>.<span class=\"me1\">e</span>          <span class=\"co1\"># e</span><br/><span class=\"kw3\">math</span>.<span class=\"me1\">pi</span>         <span class=\"co1\"># pi</span><br/><span class=\"kw3\">math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>    <span class=\"co1\"># square root  (Also commonly seen as x ** 0.5 to obviate importing the math module)</span><br/><span class=\"kw3\">math</span>.<span class=\"me1\">log</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>     <span class=\"co1\"># natural logarithm</span><br/><span class=\"kw3\">math</span>.<span class=\"me1\">log10</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>   <span class=\"co1\"># base 10 logarithm</span><br/><span class=\"kw3\">math</span>.<span class=\"me1\">exp</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>     <span class=\"co1\"># e raised to the power of x</span><br/><span class=\"kw2\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>          <span class=\"co1\"># absolute value</span><br/><span class=\"kw3\">math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>   <span class=\"co1\"># floor</span><br/><span class=\"kw3\">math</span>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>    <span class=\"co1\"># ceiling</span><br/>x ** y          <span class=\"co1\"># exponentiation </span><br/><span class=\"kw2\">pow</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">[</span><span class=\"sy0\">,</span> n<span class=\"br0\">]</span><span class=\"br0\">)</span>  <span class=\"co1\"># exponentiation [, modulo n (useful in certain encryption/decryption algorithms)]</span><br/>\u00a0<br/><span class=\"co1\"># The math module constants and functions can, of course, be imported directly by:</span><br/><span class=\"co1\">#   from math import e, pi, sqrt, log, log10, exp, floor, ceil</span></pre>"}, {"lang": "R", "loc": 11, "block": "<pre class=\"text highlighted_source\">exp(1)             # e<br/>pi                 # pi<br/>sqrt(x)            # square root<br/>log(x)             # natural logarithm<br/>log10(x)           # base 10 logarithm<br/>log(x, y)          # arbitrary base logarithm<br/>exp(x)             # exponential<br/>abs(x)             # absolute value<br/>floor(x)           # floor<br/>ceiling(x)         # ceiling<br/>x^y                # power</pre>"}, {"lang": "Racket", "loc": 9, "block": "<pre class=\"text highlighted_source\">(exp 1)        \u00a0; e<br/>pi             \u00a0; pi<br/>(sqrt x)       \u00a0; square root<br/>(log x)        \u00a0; natural logarithm<br/>(exp x)        \u00a0; exponential<br/>(abs x)        \u00a0; absolute value<br/>(floor x)      \u00a0; floor<br/>(ceiling x)    \u00a0; ceiling<br/>(expt x y)     \u00a0; power</pre>"}, {"lang": "REXX", "loc": 1, "block": "<pre class=\"rexx highlighted_source\">a=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span>                       <span class=\"coMULTI\">/*takes the absolute value of y.*/</span></pre>"}, {"lang": "Ring", "loc": 47, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>See \"Mathematical Functions\" + nl<br/>See \"Sin(0) = \" + sin(0) + nl<br/>See \"Sin(90) radians = \" + sin(90) + nl<br/>See \"Sin(90) degree = \" + sin(90*3.14/180) + nl<br/>\u00a0<br/>See \"Cos(0) = \" + cos(0) + nl<br/>See \"Cos(90) radians = \" + cos(90) + nl<br/>See \"Cos(90) degree = \" + cos(90*3.14/180) + nl<br/>\u00a0<br/>See \"Tan(0) = \" + tan(0) + nl<br/>See \"Tan(90) radians = \" + tan(90) + nl<br/>See \"Tan(90) degree = \" + tan(90*3.14/180) + nl<br/>\u00a0<br/>See \"asin(0) = \" + asin(0) + nl<br/>See \"acos(0) = \" + acos(0) + nl<br/>See \"atan(0) = \" + atan(0) + nl<br/>See \"atan2(1,1) = \" + atan2(1,1) + nl<br/>\u00a0<br/>See \"sinh(0) = \" + sinh(0) + nl<br/>See \"sinh(1) = \" + sinh(1) + nl<br/>See \"cosh(0) = \" + cosh(0) + nl<br/>See \"cosh(1) = \" + cosh(1) + nl<br/>See \"tanh(0) = \" + tanh(0) + nl<br/>See \"tanh(1) = \" + tanh(1) + nl<br/>\u00a0<br/>See \"exp(0) = \" + exp(0) + nl<br/>See \"exp(1) = \" + exp(1) + nl<br/>See \"log(1) = \" + log(1) + nl<br/>See \"log(2) = \" + log(2) + nl<br/>See \"log10(1) = \" + log10(1) + nl<br/>See \"log10(2) = \" + log10(2) + nl<br/>See \"log10(10) = \" + log10(10) + nl<br/>\u00a0<br/>See \"Ceil(1.12) = \" + Ceil(1.12) + nl<br/>See \"Ceil(1.72) = \" + Ceil(1.72) + nl<br/>\u00a0<br/>See \"Floor(1.12) = \" + floor(1.12) + nl<br/>See \"Floor(1.72) = \" + floor(1.72) + nl<br/>\u00a0<br/>See \"fabs(1.12) = \" + fabs(1.12) + nl<br/>See \"fabs(1.72) = \" + fabs(1.72) + nl<br/>\u00a0<br/>See \"pow(2,3) = \" + pow(2,3) + nl<br/>\u00a0<br/>see \"sqrt(16) = \" + sqrt(16) + nl<br/>\u00a0</pre>"}, {"lang": "RLaB", "loc": 5, "block": "<pre class=\"text highlighted_source\">&gt;&gt; const<br/>   e                    euler           ln10            ln2             lnpi<br/>   log10e               log2e           pi              pihalf          piquarter<br/>   rpi                  sqrt2           sqrt2r          sqrt3           sqrtpi<br/>   tworpi</pre>"}, {"lang": "Ruby", "loc": 14, "block": "<pre class=\"ruby highlighted_source\">x.<span class=\"me1\">abs</span> <span class=\"co1\">#absolute value</span><br/>x.<span class=\"me1\">magnitude</span> <span class=\"co1\">#absolute value</span><br/>x.<span class=\"me1\">floor</span> <span class=\"co1\">#floor</span><br/>x.<span class=\"me1\">ceil</span> <span class=\"co1\">#ceiling</span><br/>x <span class=\"sy0\">**</span> y <span class=\"co1\">#power</span><br/><span class=\"kw1\">include</span> <span class=\"kw4\">Math</span><br/>E <span class=\"co1\">#e</span><br/>PI <span class=\"co1\">#pi</span><br/>sqrt<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"co1\">#square root</span><br/>log<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"co1\">#natural logarithm</span><br/>log<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"co1\">#logarithm base y</span><br/>log10<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"co1\">#base 10 logarithm</span><br/>exp<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"co1\">#exponential</span><br/>\u00a0</pre>"}, {"lang": "Run BASIC", "loc": 9, "block": "<pre class=\"text highlighted_source\">print \"exp:\";chr$(9);   EXP(1)<br/>print \"PI:\";chr$(9);    22/7<br/>print \"Sqr2:\";chr$(9);  SQR(2)<br/>print \"Log2:\";chr$(9);  LOG(2)\u00a0: REM Base 10<br/>print \"Exp2:\";chr$(9);  EXP(2)<br/>print \"Abs2:\";chr$(9);  ABS(-2)<br/>print \"Floor:\";chr$(9); INT(1.534)<br/>print \"ceil:\";chr$(9);  val(using(\"###\",1.534))<br/>print \"Power:\";chr$(9); 1.23^4</pre>"}, {"lang": "Rust", "loc": 24, "block": "<pre class=\"text highlighted_source\">use std::f64::consts::*;<br/>\u00a0<br/>fn main() {<br/>    // e (base of the natural logarithm)<br/>    let mut x = E;<br/>    // \u03c0<br/>    x += PI;<br/>    // square root<br/>    x = x.sqrt();<br/>    // logarithm (any base allowed)<br/>    x = x.ln();<br/>    // ceiling (smallest integer not less than this number--not the same as round up)<br/>    x = x.ceil();<br/>    // exponential (ex)<br/>    x = x.exp();<br/>    // absolute value (a.k.a. \"magnitude\")<br/>    x = x.abs();<br/>    // floor (largest integer less than or equal to this number--not the same as truncate or int)<br/>    x = x.floor();<br/>    // power (xy) <br/>    x = x.powf(x);<br/>\u00a0<br/>    assert_eq!(x, 4.0);<br/>}</pre>"}, {"lang": "Scala", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> RealConstantsFunctions <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App<span class=\"br0\">{</span><br/>  println<span class=\"br0\">(</span>math.<span class=\"me1\">E</span><span class=\"br0\">)</span>                <span class=\"co1\">// e</span><br/>  println<span class=\"br0\">(</span>math.<span class=\"me1\">Pi</span><span class=\"br0\">)</span>               <span class=\"co1\">// pi</span><br/>  println<span class=\"br0\">(</span>math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>        <span class=\"co1\">// square root</span><br/>  println<span class=\"br0\">(</span>math.<span class=\"me1\">log</span><span class=\"br0\">(</span>math.<span class=\"me1\">E</span><span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co1\">// log to base e</span><br/>  println<span class=\"br0\">(</span>math.<span class=\"me1\">log10</span><span class=\"br0\">(</span><span class=\"nu0\">10.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co1\">// log to base 10</span><br/>  println<span class=\"br0\">(</span>math.<span class=\"me1\">exp</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>         <span class=\"co1\">// exponential</span><br/>  println<span class=\"br0\">(</span>math.<span class=\"me1\">abs</span><span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>          <span class=\"co1\">// absolute value</span><br/>  println<span class=\"br0\">(</span>math.<span class=\"me1\">floor</span><span class=\"br0\">(</span>-<span class=\"nu0\">2.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co1\">// floor</span><br/>  println<span class=\"br0\">(</span>math.<span class=\"me1\">ceil</span><span class=\"br0\">(</span>-<span class=\"nu0\">2.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>       <span class=\"co1\">// ceiling</span><br/>  println<span class=\"br0\">(</span>math.<span class=\"me1\">pow</span><span class=\"br0\">(</span><span class=\"nu0\">2.5</span>, <span class=\"nu0\">3.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co1\">// power</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 7, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> x<span class=\"br0\">)</span> <span class=\"co1\">;square root</span><br/><span class=\"br0\">(</span><span class=\"kw1\">log</span> x<span class=\"br0\">)</span> <span class=\"co1\">;natural logarithm</span><br/><span class=\"br0\">(</span><span class=\"kw1\">exp</span> x<span class=\"br0\">)</span> <span class=\"co1\">;exponential</span><br/><span class=\"br0\">(</span><span class=\"kw1\">abs</span> x<span class=\"br0\">)</span> <span class=\"co1\">;absolute value</span><br/><span class=\"br0\">(</span><span class=\"kw1\">floor</span> x<span class=\"br0\">)</span> <span class=\"co1\">;floor</span><br/><span class=\"br0\">(</span><span class=\"kw1\">ceiling</span> x<span class=\"br0\">)</span> <span class=\"co1\">;ceiling</span><br/><span class=\"br0\">(</span><span class=\"kw1\">expt</span> x y<span class=\"br0\">)</span> <span class=\"co1\">;power</span></pre>"}, {"lang": "Seed7", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">Num.<span class=\"me1\">e</span>     <span class=\"co1\"># e</span><br/>Num.<span class=\"me1\">pi</span>    <span class=\"co1\"># pi</span><br/>x.<span class=\"me1\">sqrt</span>    <span class=\"co1\"># square root</span><br/>x.<span class=\"me1\">log</span>     <span class=\"co1\"># natural logarithm</span><br/>x.<span class=\"me1\">log10</span>   <span class=\"co1\"># base 10 logarithm</span><br/>x.<span class=\"me1\">exp</span>     <span class=\"co1\"># e raised to the power of x</span><br/>x.<span class=\"me1\">abs</span>     <span class=\"co1\"># absolute value</span><br/>x.<span class=\"me1\">floor</span>   <span class=\"co1\"># floor</span><br/>x.<span class=\"me1\">ceil</span>    <span class=\"co1\"># ceiling</span><br/>x<span class=\"sy0\">**</span>y      <span class=\"co1\"># exponentiation</span></pre>"}, {"lang": "Sidef", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">Num.<span class=\"me1\">e</span>     <span class=\"co1\"># e</span><br/>Num.<span class=\"me1\">pi</span>    <span class=\"co1\"># pi</span><br/>x.<span class=\"me1\">sqrt</span>    <span class=\"co1\"># square root</span><br/>x.<span class=\"me1\">log</span>     <span class=\"co1\"># natural logarithm</span><br/>x.<span class=\"me1\">log10</span>   <span class=\"co1\"># base 10 logarithm</span><br/>x.<span class=\"me1\">exp</span>     <span class=\"co1\"># e raised to the power of x</span><br/>x.<span class=\"me1\">abs</span>     <span class=\"co1\"># absolute value</span><br/>x.<span class=\"me1\">floor</span>   <span class=\"co1\"># floor</span><br/>x.<span class=\"me1\">ceil</span>    <span class=\"co1\"># ceiling</span><br/>x<span class=\"sy0\">**</span>y      <span class=\"co1\"># exponentiation</span></pre>"}, {"lang": "Slate", "loc": 11, "block": "<pre class=\"text highlighted_source\">numerics E.<br/>numerics Pi.<br/>n sqrt.<br/>n log10. \"base 10 logarithm\"<br/>n ln. \"natural logarithm\"<br/>n log: m. \"arbitrary base logarithm\"<br/>n exp. \"exponential\"<br/>n abs. \"absolute value\"<br/>n floor. <br/>n ceiling.<br/>n raisedTo: anotherNumber</pre>"}, {"lang": "Smalltalk", "loc": 10, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Float</span> e.<br/><span class=\"re0\">Float</span> pi.<br/><span class=\"re5\">aNumber</span> sqrt.<br/><span class=\"re5\">aNumber</span> log. <span class=\"coMULTI\">\"base 10 logarithm\"</span><br/>aNumber ln. <span class=\"coMULTI\">\"natural logarithm\"</span><br/>aNumber exp. <span class=\"coMULTI\">\"exponential\"</span><br/>aNumber abs. <span class=\"coMULTI\">\"absolute value\"</span><br/>aNumber floor. <br/><span class=\"re5\">aNumber</span> ceiling.<br/><span class=\"re5\">aNumber</span> raisedTo: <span class=\"re5\">anotherNumber</span></pre>"}, {"lang": "Sparkling", "loc": 31, "block": "<pre class=\"text highlighted_source\">// e:<br/>print(M_E);<br/>\u00a0<br/>// \u03c0:<br/>print(M_PI);<br/>\u00a0<br/>// square root:<br/>let five = sqrt(25);<br/>\u00a0<br/>// logarithm<br/>// natural:<br/>let one = log(M_E);<br/>// base-2:<br/>let six = log2(64);<br/>// base-10<br/>let three = log10(1000);<br/>\u00a0<br/>// exponential<br/>let e_cubed = exp(3);<br/>\u00a0<br/>// absolute value<br/>let ten = abs(-10);<br/>\u00a0<br/>// floor<br/>let seven = floor(7.8);<br/>\u00a0<br/>// ceiling<br/>let four = ceil(3.2);<br/>\u00a0<br/>// power<br/>let eighty_one = pow(3, 4);</pre>"}, {"lang": "Standard ML", "loc": 10, "block": "<pre class=\"text highlighted_source\">Math.e; (* e *)<br/>Math.pi; (* pi *)<br/>Math.sqrt x; (* square root *)<br/>Math.ln x; (* natural logarithm--log base 10 also available (Math.log10) *)<br/>Math.exp x; (* exponential *)<br/>abs x; (* absolute value *)<br/>floor x; (* floor *)<br/>ceil x; (* ceiling *)<br/>Math.pow (x, y); (* power *)<br/>~ x; (* negation *)</pre>"}, {"lang": "Stata", "loc": 13, "block": "<pre class=\"text highlighted_source\">scalar x=2<br/>scalar y=3<br/>di exp(1)<br/>di _pi<br/>di c(pi)<br/>di sqrt(x)<br/>di log(x)<br/>di log10(x)<br/>di exp(x)<br/>di abs(x)<br/>di floor(x)<br/>di ceil(x)<br/>di x^y</pre>"}, {"lang": "Swift", "loc": 11, "block": "<pre class=\"text highlighted_source\">import Darwin<br/>\u00a0<br/>M_E // e<br/>M_PI // pi<br/>sqrt(x) // square root--cube root also available (cbrt)<br/>log(x) // natural logarithm--log base 10 also available (log10)<br/>exp(x) // exponential<br/>abs(x) // absolute value<br/>floor(x) // floor<br/>ceil(x) // ceiling<br/>pow(x,y) // power</pre>"}, {"lang": "Tcl", "loc": 9, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>exp<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span>       <span class=\"sy0\">;</span><span class=\"co1\"># e</span><br/><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">4</span> <span class=\"sy0\">*</span> atan<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span>  <span class=\"sy0\">;</span><span class=\"co1\"># pi -- also, simpler: expr acos(-1)</span><br/><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>sqrt<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"br0\">}</span>     <span class=\"sy0\">;</span><span class=\"co1\"># square root</span><br/><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>log<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"br0\">}</span>      <span class=\"sy0\">;</span><span class=\"co1\"># natural logarithm, also log10</span><br/><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>exp<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"br0\">}</span>      <span class=\"sy0\">;</span><span class=\"co1\"># exponential</span><br/><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>abs<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"br0\">}</span>      <span class=\"sy0\">;</span><span class=\"co1\"># absolute value</span><br/><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>floor<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"br0\">}</span>    <span class=\"sy0\">;</span><span class=\"co1\"># floor</span><br/><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>ceil<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"br0\">}</span>     <span class=\"sy0\">;</span><span class=\"co1\"># ceiling</span><br/><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span><span class=\"sy0\">**</span><span class=\"re0\">$y</span><span class=\"br0\">}</span>       <span class=\"sy0\">;</span><span class=\"co1\"># power, also pow($x,$y)</span></pre>"}, {"lang": "TI-89 BASIC", "loc": 15, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> exp<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co0\"># e</span><br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> acos<span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co0\"># PI</span><br/><span class=\"re2\">x</span>=<span class=\"nu0\">5</span>  <br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> sqrt<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"co0\"># square root</span><br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> log<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co0\"># logarithm base e</span><br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> log2<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"co0\"># logarithm base 2</span><br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> log10<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co0\"># logarithm base 10</span><br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> exp<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co0\"># exponential</span><br/><span class=\"re2\">x</span>=-<span class=\"nu0\">42</span> <br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> abs<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co0\"># absolute value</span><br/><span class=\"re2\">x</span>=-<span class=\"nu0\">5.5</span> <br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> floor<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co0\"># floor</span><br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> ceil<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"co0\"># ceiling</span><br/><span class=\"re2\">x</span>=<span class=\"nu0\">10</span> <span class=\"re2\">y</span>=<span class=\"nu0\">3</span> <br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> pow<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co0\"># power</span></pre>"}, {"lang": "UNIX Shell", "loc": 15, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> exp<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co0\"># e</span><br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> acos<span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co0\"># PI</span><br/><span class=\"re2\">x</span>=<span class=\"nu0\">5</span>  <br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> sqrt<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"co0\"># square root</span><br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> log<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co0\"># logarithm base e</span><br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> log2<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"co0\"># logarithm base 2</span><br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> log10<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co0\"># logarithm base 10</span><br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> exp<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co0\"># exponential</span><br/><span class=\"re2\">x</span>=-<span class=\"nu0\">42</span> <br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> abs<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"co0\"># absolute value</span><br/><span class=\"re2\">x</span>=-<span class=\"nu0\">5.5</span> <br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> floor<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co0\"># floor</span><br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> ceil<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"co0\"># ceiling</span><br/><span class=\"re2\">x</span>=<span class=\"nu0\">10</span> <span class=\"re2\">y</span>=<span class=\"nu0\">3</span> <br/><span class=\"kw3\">echo</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span> pow<span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"co0\"># power</span></pre>"}, {"lang": "XPL0", "loc": 26, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;                          \\intrinsic 'code' declarations<br/>\u00a0<br/>func real Power(X, Y);  \\X raised to the Y power<br/>real X, Y;<br/>return Exp(Y*Ln(X));<br/>\u00a0<br/>real E, Pi;<br/>[Format(4, 16);                                 \\places shown before and after .<br/>E:= Exp(1.0);<br/>RlOut(0, E);  CrLf(0);<br/>RlOut(0, Ln(E));  CrLf(0);<br/>CrLf(0);<br/>Pi:= ATan2(0.0, -1.0);                          \\Pi is also a defined constant<br/>RlOut(0, Pi);  CrLf(0);<br/>RlOut(0, Cos(Pi));  CrLf(0);<br/>CrLf(0);<br/>RlOut(0, Sqrt(2.0));  CrLf(0);                  \\Sqrt is a call to an intrinsic<br/>RlOut(0, Log(100.0));  CrLf(0);<br/>RlOut(0, Ln(Exp(123.456789)));  CrLf(0);<br/>CrLf(0);<br/>RlOut(0, abs(-1234.5));  CrLf(0);               \\abs works for both reals &amp; ints<br/>CrLf(0);<br/>RlOut(0, float(fix(1.999-0.5)));  CrLf(0);      \\floor   rounds toward -infinity<br/>RlOut(0, float(fix(1.001+0.5)));  CrLf(0);      \\ceiling rounds toward +infinity<br/>RlOut(0, Power(sqrt(2.0), 4.0));  CrLf(0);      \\sqrt is an inline function and<br/>]                                               \\ can be used for both reals &amp; ints</pre>"}, {"lang": "zkl", "loc": 10, "block": "<pre class=\"text highlighted_source\">(0.0).e        // Euler's number, a property of all floats<br/>(0.0).e.pi     // pi, yep, all floats<br/>(2.0).sqrt()   // square root<br/>(2.0).log()    // natural (base e) logarithm<br/>(2.0).log10()  // log base 10<br/>(0.0).e.pow(x) // e^x<br/>(-10.0).abs()  // absolute value, both floats and ints<br/>x.pow(y)       // x raised to the y power<br/>x.ceil()       // ceiling<br/>x.floor()      // floor</pre>"}]}