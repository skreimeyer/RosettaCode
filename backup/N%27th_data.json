{"task": "N%27th", "blocks": [{"lang": "Ada", "loc": 26, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Nth <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Suffix<span class=\"br0\">(</span>N: Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span>    N <span class=\"kw2\">mod</span> <span class=\"nu0\">10</span> = <span class=\"nu0\">1</span> <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> N <span class=\"kw2\">mod</span> <span class=\"nu0\">100</span> /= <span class=\"nu0\">11</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"st\"</span>;<br/>      <span class=\"kw1\">elsif</span> N <span class=\"kw2\">mod</span> <span class=\"nu0\">10</span> = <span class=\"nu0\">2</span> <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> N <span class=\"kw2\">mod</span> <span class=\"nu0\">100</span> /= <span class=\"nu0\">12</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"nd\"</span>;<br/>      <span class=\"kw1\">elsif</span> N <span class=\"kw2\">mod</span> <span class=\"nu0\">10</span> = <span class=\"nu0\">3</span> <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> N <span class=\"kw2\">mod</span> <span class=\"nu0\">100</span> /= <span class=\"nu0\">13</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"rd\"</span>;<br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"th\"</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Suffix;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Print_Images<span class=\"br0\">(</span>From, To: Natural<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> From .. <span class=\"me1\">To</span> <span class=\"kw1\">loop</span><br/>\t Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Natural'Image<span class=\"br0\">(</span>I<span class=\"br0\">)</span> &amp; Suffix<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>   <span class=\"kw1\">end</span> Print_Images;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Print_Images<span class=\"br0\">(</span>   <span class=\"nu0\">0</span>,   <span class=\"nu0\">25</span><span class=\"br0\">)</span>;<br/>   Print_Images<span class=\"br0\">(</span> <span class=\"nu0\">250</span>,  <span class=\"nu0\">265</span><span class=\"br0\">)</span>;<br/>   Print_Images<span class=\"br0\">(</span><span class=\"nu0\">1000</span>, <span class=\"nu0\">1025</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Nth;</pre>"}, {"lang": "ALGOL 68", "loc": 49, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># PROC to suffix a number with st, nd, rd or th as appropriate #</span><br/><span class=\"kw4\">PROC</span> nth <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> number <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>\u00a0<br/>    <span class=\"kw3\">INT</span> number mod 100 <span class=\"sy1\">=</span> number <span class=\"kw12\">MOD</span> 100<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># RESULT #</span><br/>    <span class=\"kw22\">whole</span><span class=\"br0\">(</span> number<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><br/>  <span class=\"sy1\">+</span> <span class=\"kw2\">IF</span> number mod 100 <span class=\"sy1\">&gt;=</span> 10 <span class=\"kw16\">AND</span> number mod 100 <span class=\"sy1\">&lt;=</span> 20<br/>    <span class=\"kw2\">THEN</span><br/>        <span class=\"coMULTI\"># numbers in the range 10 .. 20 always have \"th\" #</span><br/>        <span class=\"st0\">\"th\"</span><br/>    <span class=\"kw2\">ELSE</span><br/>        <span class=\"coMULTI\"># not in the range 10 .. 20, suffix is st, nd, rd or th #</span><br/>        <span class=\"coMULTI\"># depending on the final digit                          #</span><br/>        <span class=\"kw2\">CASE</span> number <span class=\"kw12\">MOD</span> 10<br/>        <span class=\"kw2\">IN</span>  <span class=\"coMULTI\"># 1 #</span> <span class=\"st0\">\"st\"</span><br/>        <span class=\"sy1\">,</span>   <span class=\"coMULTI\"># 2 #</span> <span class=\"st0\">\"nd\"</span><br/>        <span class=\"sy1\">,</span>   <span class=\"coMULTI\"># 3 #</span> <span class=\"st0\">\"rd\"</span><br/>        <span class=\"kw2\">OUT</span>       <span class=\"st0\">\"th\"</span><br/>        <span class=\"kw2\">ESAC</span><br/>    <span class=\"kw2\">FI</span><br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># nth #</span><br/>\u00a0<br/><span class=\"coMULTI\"># PROC to test nth, displays nth for all numbers in the range from .. to  #</span><br/><span class=\"kw4\">PROC</span> test nth <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> from<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> to <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>    <span class=\"kw3\">INT</span> test count <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> test value <span class=\"kw2\">FROM</span> from <span class=\"kw2\">TO</span> to<br/>    <span class=\"kw2\">DO</span><br/>        <span class=\"kw3\">STRING</span> test result <span class=\"sy1\">=</span> nth<span class=\"br0\">(</span> test value <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"        \"</span><span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> 8 <span class=\"sy1\">-</span> <span class=\"kw8\">UPB</span> test result <span class=\"br0\">]</span><span class=\"sy1\">,</span> nth<span class=\"br0\">(</span> test value <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        test count <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> test count <span class=\"kw12\">MOD</span> 8 <span class=\"sy1\">=</span> 0<br/>        <span class=\"kw2\">THEN</span><br/>            <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># test nth #</span><br/>\u00a0<br/>\u00a0<br/>main<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>\u00a0<br/>    test nth<span class=\"br0\">(</span>    0<span class=\"sy1\">,</span>   25 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    test nth<span class=\"br0\">(</span>  250<span class=\"sy1\">,</span>  265 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    test nth<span class=\"br0\">(</span> 1000<span class=\"sy1\">,</span> 1025 <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 82, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- ORDINAL STRINGS -----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- ordinalString\u00a0:: Int -&gt; String</span><br/><span class=\"kw3\">on</span> ordinalString<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>n <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> ordinalSuffix<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> ordinalString<br/>\u00a0<br/><span class=\"co1\">-- ordinalSuffix\u00a0:: Int -&gt; String</span><br/><span class=\"kw3\">on</span> ordinalSuffix<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> modHundred <span class=\"kw3\">to</span> n <span class=\"kw2\">mod</span> <span class=\"nu0\">100</span><br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">11</span> \u2264 modHundred<span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span><span class=\"nu0\">13</span> \u2265 modHundred<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>        <span class=\"st0\">\"th\"</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw1\">item</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"kw2\">mod</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> \u00ac<br/>            <span class=\"br0\">{</span><span class=\"st0\">\"th\"</span>, <span class=\"st0\">\"st\"</span>, <span class=\"st0\">\"nd\"</span>, <span class=\"st0\">\"rd\"</span>, <span class=\"st0\">\"th\"</span>, <span class=\"st0\">\"th\"</span>, <span class=\"st0\">\"th\"</span>, <span class=\"st0\">\"th\"</span>, <span class=\"st0\">\"th\"</span>, <span class=\"st0\">\"th\"</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> ordinalSuffix<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    <span class=\"co1\">-- showOrdinals\u00a0:: [Int] -&gt; [String]</span><br/>    <span class=\"kw3\">script</span> showOrdinals<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>lstInt<span class=\"br0\">)</span><br/>            map<span class=\"br0\">(</span>ordinalString, lstInt<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    map<span class=\"br0\">(</span>showOrdinals, \u00ac<br/>        map<span class=\"br0\">(</span>uncurry<span class=\"br0\">(</span>enumFromTo<span class=\"br0\">)</span>, \u00ac<br/>            <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">25</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">250</span>, <span class=\"nu0\">265</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">1000</span>, <span class=\"nu0\">1025</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> m &gt; n <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- uncurry\u00a0:: Handler (a -&gt; b -&gt; c) -&gt; Script |\u03bb| ((a, b) -&gt; c)</span><br/><span class=\"kw3\">on</span> uncurry<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>xy<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> <span class=\"br0\">{</span>x, y<span class=\"br0\">}</span> <span class=\"kw3\">to</span> xy<br/>            mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> uncurry</pre>"}, {"lang": "Applesoft BASIC", "loc": 19, "block": "<pre class=\"text highlighted_source\">0 OP = 1<br/>10 FOR N = 0 TO 25\u00a0: GOSUB 100\u00a0: NEXT<br/>20 FOR N = 250 TO 265\u00a0: GOSUB 100\u00a0: NEXT<br/>30 FOR N = 1000 TO 1025\u00a0: GOSUB 100\u00a0: NEXT<br/>40 END<br/>\u00a0<br/>100 GOSUB 200\"NTH<br/>110 PRINT NTH$ \" \";<br/>120 RETURN<br/>\u00a0<br/>200 M1 = N - INT(N / 10) * 10<br/>210 M2 = N - INT(N / 100) * 100<br/>220 NTH$ = \"TH\"<br/>230 IF M1 = 1 AND M2 &lt;&gt; 11 THEN NTH$ = \"ST\"<br/>240 IF M1 = 2 AND M2 &lt;&gt; 12 THEN NTH$ = \"ND\"<br/>250 IF M1 = 3 AND M2 &lt;&gt; 13 THEN NTH$ = \"RD\"<br/>260 IF NOT OP THEN NTH$ = \"'\" + NTH$<br/>270 NTH$ = STR$(N) + NTH$<br/>280 RETURN</pre>"}, {"lang": "AutoHotkey", "loc": 16, "block": "<pre class=\"autohotkey highlighted_source\">for k<span class=\"sy0\">,</span> v in <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">250</span><span class=\"sy0\">,</span> <span class=\"nu0\">265</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span> <span class=\"nu0\">1025</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">while</span> v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> v<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t\tOut <span class=\"sy0\">.=</span> Ordinal<span class=\"br0\">(</span>v<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"st0\">\" \"</span><br/>\t\tv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">++</span><br/>\t<span class=\"br0\">}</span><br/>\tOut <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% Out<br/>\u00a0<br/>Ordinal<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\ts2 <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>s2 <span class=\"sy0\">&gt;</span> <span class=\"nu0\">10</span> <span class=\"sy0\">&amp;&amp;</span> s2 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">14</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> n <span class=\"st0\">\"th\"</span><br/>\ts1 <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> n <span class=\"br0\">(</span>s1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\u00a0? <span class=\"st0\">\"st\"</span>\u00a0: s1 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>\u00a0? <span class=\"st0\">\"nd\"</span>\u00a0: s1 <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>\u00a0? <span class=\"st0\">\"rd\"</span>\u00a0: <span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 34, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f NTH.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    prn<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">25</span><span class=\"br0\">)</span><br/>    prn<span class=\"br0\">(</span><span class=\"nu0\">250</span>,<span class=\"nu0\">265</span><span class=\"br0\">)</span><br/>    prn<span class=\"br0\">(</span><span class=\"nu0\">1000</span>,<span class=\"nu0\">1025</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> prn<span class=\"br0\">(</span>start,stop,  i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d-%d: \"</span>,start,stop<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=start; i<span class=\"sy2\">&lt;=</span>stop; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d%s \"</span>,i,nth<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> nth<span class=\"br0\">(</span>yearday,  nthday<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>yearday <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy3\">-</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>         <span class=\"co1\"># 11th,12th,13th</span><br/>      nthday = <span class=\"st0\">\"th\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>yearday <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"nu0\">1</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>         <span class=\"co1\"># 1st,21st,31st,etc.</span><br/>      nthday = <span class=\"st0\">\"st\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>yearday <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"nu0\">2</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>         <span class=\"co1\"># 2nd,22nd,32nd,etc.</span><br/>      nthday = <span class=\"st0\">\"nd\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>yearday <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"nu0\">3</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>         <span class=\"co1\"># 3rd,23rd,33rd,etc.</span><br/>      nthday = <span class=\"st0\">\"rd\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>yearday <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"br0\">[</span>0456789<span class=\"br0\">]</span>$<span class=\"sy3\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># 4th-10th,20th,24th-30th,etc.</span><br/>      nthday = <span class=\"st0\">\"th\"</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><span class=\"br0\">(</span>nthday<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Babel", "loc": 28, "block": "<pre class=\"text highlighted_source\">((irregular (\"st\" \"nd\" \"rd\"))<br/>\u00a0<br/>(main <br/>    {(0 250 1000)<br/>    { test\u00a0! \"\\n\" &lt;&lt; }<br/>    each})<br/>\u00a0<br/>(test { <br/>    &lt;- <br/>    {iter 1 - -&gt; dup &lt;- + ordinalify\u00a0! &lt;&lt; <br/>        {iter 10\u00a0%} {\"  \"} {\"\\n\"} ifte &lt;&lt; } <br/>    26 times})<br/>\u00a0<br/>(ordinalify { <br/>    &lt;-<br/>    {{ -&gt; dup &lt;- 100\u00a0% 10 cugt }\u00a0!<br/>     { -&gt; dup &lt;- 100\u00a0% 14 cult }\u00a0!<br/>     and not<br/>     { -&gt; dup &lt;- 10 \u00a0% 0  cugt }\u00a0!<br/>     { -&gt; dup &lt;- 10 \u00a0% 4  cult }\u00a0!<br/>     and<br/>     and}<br/>        { -&gt; dup <br/>            &lt;-\u00a0%d \"'\"<br/>            irregular -&gt; 10\u00a0% 1 - ith<br/>            . . }<br/>        { -&gt;\u00a0%d \"'th\" . }<br/>    ifte }))</pre>"}, {"lang": "BaCon", "loc": 28, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' Nth (sans apostrophes)</span><br/><span class=\"kw1\">FUNCTION</span> nth$<span class=\"br0\">(</span>NUMBER n<span class=\"br0\">)</span> <span class=\"kw1\">TYPE</span> <span class=\"kw1\">STRING</span><br/>    <span class=\"kw1\">LOCAL</span> suffix<br/>    <span class=\"kw1\">IF</span> n &lt; <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> <span class=\"kw1\">STR</span>$<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">IF</span> <span class=\"kw1\">MOD</span><span class=\"br0\">(</span>n, <span class=\"nu0\">100</span><span class=\"br0\">)</span> &gt;= <span class=\"nu0\">11</span> AND <span class=\"kw1\">MOD</span><span class=\"br0\">(</span>n, <span class=\"nu0\">100</span><span class=\"br0\">)</span> &lt;= <span class=\"nu0\">13</span> <span class=\"kw1\">THEN</span><br/>        suffix = <span class=\"st0\">\"th\"</span><br/>    <span class=\"kw1\">ELSE</span><br/>        suffix = <span class=\"kw1\">MID</span>$<span class=\"br0\">(</span><span class=\"st0\">\"thstndrdthththththth\"</span>, <span class=\"kw1\">MOD</span><span class=\"br0\">(</span>n, <span class=\"nu0\">10</span><span class=\"br0\">)</span> * <span class=\"nu0\">2</span> + <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    ENDIF<br/>    <span class=\"kw1\">RETURN</span> CONCAT$<span class=\"br0\">(</span><span class=\"kw1\">STR</span>$<span class=\"br0\">(</span>n<span class=\"br0\">)</span>, suffix<span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"co1\">' Test a few ranges</span><br/><span class=\"kw1\">FOR</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">4</span><br/>    <span class=\"kw1\">READ</span> first, last<br/>    per = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">FOR</span> n = first <span class=\"kw1\">TO</span> last<br/>        <span class=\"kw1\">PRINT</span> nth$<span class=\"br0\">(</span>n<span class=\"br0\">)</span> FORMAT <span class=\"st0\">\"%s \"</span><br/>        <span class=\"co1\">' limit to 10 entries per line</span><br/>        <span class=\"kw1\">IF</span> per = <span class=\"nu0\">10</span> <span class=\"kw1\">OR</span> n = last <span class=\"kw1\">THEN</span><br/>            per = <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">PRINT</span><br/>        <span class=\"kw1\">ELSE</span><br/>            INCR per<br/>        ENDIF<br/>    <span class=\"kw1\">NEXT</span><br/><span class=\"kw1\">NEXT</span><br/><span class=\"kw1\">DATA</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">25</span>, <span class=\"nu0\">250</span>, <span class=\"nu0\">265</span>, <span class=\"nu0\">1000</span>, <span class=\"nu0\">1025</span>, -<span class=\"nu0\">20</span>, -<span class=\"nu0\">11</span></pre>"}, {"lang": "Batch File", "loc": 21, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><span class=\"co2\">::Main thing...</span><br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">Nth</span> 0 25<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">Nth</span> 250 265<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">Nth</span> 1000 1025<br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><span class=\"co2\"><br/>::The subroutine</span><br/>:<span class=\"re0\">Nth</span> <span class=\"sy0\">&lt;</span>lbound<span class=\"sy0\">&gt;</span> <span class=\"sy0\">&lt;</span>ubound<span class=\"sy0\">&gt;</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">n</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">~1</span>,1,<span class=\"sy0\">%</span><span class=\"re3\">~2</span><span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> curr_num=<span class=\"sy0\">%%</span><span class=\"re3\">n</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"out=<span class=\"sy0\">%</span><span class=\"sy0\">%</span>nth\"<br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">curr_num:~-1</span><span class=\"sy0\">!</span>==1 <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"out=<span class=\"sy0\">%</span><span class=\"sy0\">%</span>nst\"<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">curr_num:~-1</span><span class=\"sy0\">!</span>==2 <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"out=<span class=\"sy0\">%</span><span class=\"sy0\">%</span>nnd\"<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">curr_num:~-1</span><span class=\"sy0\">!</span>==3 <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"out=<span class=\"sy0\">%</span><span class=\"sy0\">%</span>nrd\"<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"range_output=<span class=\"sy0\">!</span><span class=\"re2\">range_output</span><span class=\"sy0\">!</span> <span class=\"sy0\">!</span><span class=\"re2\">out</span><span class=\"sy0\">!</span>\"<br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.\"<span class=\"sy0\">!</span><span class=\"re2\">range_output:~1</span><span class=\"sy0\">!</span>\"<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">EOF</span></pre>"}, {"lang": "BBC BASIC", "loc": 16, "block": "<pre class=\"text highlighted_source\">      PROCNth(   0,  25)<br/>      PROCNth( 250, 265)<br/>      PROCNth(1000,1025)<br/>      END<br/>\u00a0<br/>      DEF PROCNth(s%,e%)<br/>      LOCAL i%,suff$<br/>      FOR i%=s% TO e%<br/>        suff$=\"th\"<br/>        IF i% MOD 10 = 1 AND i% MOD 100 &lt;&gt; 11 suff$=\"st\"<br/>        IF i% MOD 10 = 2 AND i% MOD 100 &lt;&gt; 12 suff$=\"nd\"<br/>        IF i% MOD 10 = 3 AND i% MOD 100 &lt;&gt; 13 suff$=\"rd\"<br/>        PRINT STR$i%+suff$+\" \";<br/>      NEXT<br/>      PRINT<br/>      ENDPROC</pre>"}, {"lang": "Befunge", "loc": 12, "block": "<pre class=\"text highlighted_source\">0&gt;55*:&gt;1-\\:0\\`!v<br/>#v$#$&lt;^:\\+*8\"}\"_<br/> &gt;35*:&gt;1-\\:0\\`!v<br/>#v$#$&lt;^:\\+*2\"}\"_<br/>5&lt; v$_v#!::-&lt;0*5<br/>@v &lt;,*&gt;#81#4^# _<br/>\u00a0<br/>&gt;&gt;:0\\&gt;:55+%68*v:<br/>tsnr |:/+ 55\\+&lt;,<br/>htdd &gt;$&gt;:#,_$:vg<br/>v\"d\"\\*!`3:%+55&lt;9<br/>&gt;%55+/1-!!*:8g,^</pre>"}, {"lang": "C", "loc": 52, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">char</span><span class=\"sy0\">*</span> addSuffix<span class=\"br0\">(</span><span class=\"kw4\">int</span> num<span class=\"sy0\">,</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> buf<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> len<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>suffixes<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"th\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"st\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nd\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"rd\"</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>num <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> i <span class=\"sy0\">=</span> <span class=\"br0\">(</span>num <span class=\"sy0\">%</span> <span class=\"nu0\">100</span> <span class=\"sy0\">==</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t         <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">2</span> <span class=\"sy0\">:</span> i <span class=\"sy0\">=</span> <span class=\"br0\">(</span>num <span class=\"sy0\">%</span> <span class=\"nu0\">100</span> <span class=\"sy0\">==</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                 <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">3</span> <span class=\"sy0\">:</span> i <span class=\"sy0\">=</span> <span class=\"br0\">(</span>num <span class=\"sy0\">%</span> <span class=\"nu0\">100</span> <span class=\"sy0\">==</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>                 <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">default</span><span class=\"sy0\">:</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/snprintf.html\"><span class=\"kw3\">snprintf</span></a><span class=\"br0\">(</span>buf<span class=\"sy0\">,</span> len<span class=\"sy0\">,</span> <span class=\"st0\">\"%d%s\"</span><span class=\"sy0\">,</span> num<span class=\"sy0\">,</span> suffixes<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> buf<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Set [0,25]:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">26</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">char</span> s<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s \"</span><span class=\"sy0\">,</span> addSuffix<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Set [250,265]:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">250</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">266</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">char</span> s<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s \"</span><span class=\"sy0\">,</span> addSuffix<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Set [1000,1025]:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1026</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">char</span> s<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s \"</span><span class=\"sy0\">,</span> addSuffix<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 41, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/>string Suffix<span class=\"br0\">(</span><span class=\"kw4\">int</span> num<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>num <span class=\"sy2\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">1</span> <span class=\"sy4\">:</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>num <span class=\"sy2\">%</span> <span class=\"nu0\">100</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"st\"</span><span class=\"sy4\">;</span><br/>           <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">2</span> <span class=\"sy4\">:</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>num <span class=\"sy2\">%</span> <span class=\"nu0\">100</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"nd\"</span><span class=\"sy4\">;</span><br/>           <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">3</span> <span class=\"sy4\">:</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>num <span class=\"sy2\">%</span> <span class=\"nu0\">100</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"rd\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"th\"</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Set [0,25]:\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">26</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> Suffix<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Set [250,265]:\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">250</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">266</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> Suffix<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Set [1000,1025]:\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1000</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">1026</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> Suffix<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 31, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> Ordinalize<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        i <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Abs</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">11</span>, <span class=\"nu0\">12</span>, <span class=\"nu0\">13</span><span class=\"br0\">}</span><span class=\"sy0\">.</span><span class=\"me1\">Contains</span><span class=\"br0\">(</span>i<span class=\"sy0\">%</span>100<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> i <span class=\"sy0\">+</span> <span class=\"st0\">\"th\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>i<span class=\"sy0\">%</span>10<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">return</span> i <span class=\"sy0\">+</span> <span class=\"st0\">\"st\"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">return</span> i <span class=\"sy0\">+</span> <span class=\"st0\">\"nd\"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">return</span> i <span class=\"sy0\">+</span> <span class=\"st0\">\"rd\"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">return</span> i <span class=\"sy0\">+</span> <span class=\"st0\">\"th\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">26</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>Ordinalize<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">250</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>Ordinalize<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span>, <span class=\"nu0\">26</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>Ordinalize<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 16, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> n<span class=\"sy0\">-</span>th <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">str</span> n<br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>rem <span class=\"br0\">(</span>mod n <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> rem <span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> rem <span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"st0\">\"th\"</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">condp</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>mod n <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>          <span class=\"nu0\">1</span> <span class=\"st0\">\"st\"</span><br/>          <span class=\"nu0\">2</span> <span class=\"st0\">\"nd\"</span><br/>          <span class=\"nu0\">3</span> <span class=\"st0\">\"rd\"</span><br/>          <span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">interpose</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> n<span class=\"sy0\">-</span>th <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">0</span> <span class=\"nu0\">26</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">interpose</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> n<span class=\"sy0\">-</span>th <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">250</span> <span class=\"nu0\">266</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">interpose</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> n<span class=\"sy0\">-</span>th <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">1000</span> <span class=\"nu0\">1026</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 31, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> NTH-<span class=\"kw3\">PROGRAM</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  WS-<span class=\"kw3\">NUMBER</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> N               <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> LAST-TWO-DIGITS <span class=\"kw3\">PIC</span> <span class=\"nu0\">99</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> LAST-DIGIT      <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> N-TO-<span class=\"kw3\">OUTPUT</span>     <span class=\"kw3\">PIC</span> Z<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">05</span> SUFFIX          <span class=\"kw3\">PIC</span> AA<span class=\"sy0\">.</span><br/><span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>TEST-PARAGRAPH<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">PERFORM</span> NTH-PARAGRAPH <span class=\"kw2\">VARYING</span> N <span class=\"kw3\">FROM</span> <span class=\"nu0\">0</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> N <span class=\"kw3\">IS</span> <span class=\"kw3\">GREATER</span> <span class=\"kw3\">THAN</span> <span class=\"nu0\">25</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">PERFORM</span> NTH-PARAGRAPH <span class=\"kw2\">VARYING</span> N <span class=\"kw3\">FROM</span> <span class=\"nu0\">250</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> N <span class=\"kw3\">IS</span> <span class=\"kw3\">GREATER</span> <span class=\"kw3\">THAN</span> <span class=\"nu0\">265</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">PERFORM</span> NTH-PARAGRAPH <span class=\"kw2\">VARYING</span> N <span class=\"kw3\">FROM</span> <span class=\"nu0\">1000</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span> <span class=\"kw2\">UNTIL</span> N <span class=\"kw3\">IS</span> <span class=\"kw3\">GREATER</span> <span class=\"kw3\">THAN</span> <span class=\"nu0\">1025</span><span class=\"sy0\">.</span><br/>    <span class=\"kw3\">STOP</span> <span class=\"kw3\">RUN</span><span class=\"sy0\">.</span><br/>NTH-PARAGRAPH<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span> <span class=\"st0\">'TH'</span> <span class=\"kw2\">TO</span> SUFFIX<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span> N <span class=\"br0\">(</span><span class=\"nu0\">7</span>:<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw2\">TO</span> LAST-TWO-DIGITS<span class=\"sy0\">.</span><br/>    <span class=\"kw1\">IF</span> LAST-TWO-DIGITS <span class=\"kw3\">IS</span> <span class=\"kw3\">LESS</span> <span class=\"kw3\">THAN</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span><br/>    <span class=\"kw3\">OR</span> LAST-TWO-DIGITS <span class=\"kw3\">IS</span> <span class=\"kw3\">GREATER</span> <span class=\"kw3\">THAN</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span><br/>    <span class=\"kw3\">THEN</span> <span class=\"kw2\">PERFORM</span> DECISION-PARAGRAPH<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span> N <span class=\"kw2\">TO</span> N-TO-<span class=\"kw3\">OUTPUT</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">DISPLAY</span> N-TO-<span class=\"kw3\">OUTPUT</span> <span class=\"kw3\">WITH</span> <span class=\"kw3\">NO</span> <span class=\"kw3\">ADVANCING</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">DISPLAY</span> SUFFIX <span class=\"kw3\">WITH</span> <span class=\"kw3\">NO</span> <span class=\"kw3\">ADVANCING</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">DISPLAY</span> <span class=\"kw3\">SPACE</span> <span class=\"kw3\">WITH</span> <span class=\"kw3\">NO</span> <span class=\"kw3\">ADVANCING</span><span class=\"sy0\">.</span><br/>DECISION-PARAGRAPH<span class=\"sy0\">.</span><br/>    <span class=\"kw2\">MOVE</span> N <span class=\"br0\">(</span><span class=\"nu0\">8</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">TO</span> LAST-DIGIT<span class=\"sy0\">.</span><br/>    <span class=\"kw1\">IF</span> LAST-DIGIT <span class=\"kw3\">IS</span> <span class=\"kw3\">EQUAL</span> <span class=\"kw2\">TO</span> <span class=\"nu0\">1</span> <span class=\"kw3\">THEN</span> <span class=\"kw2\">MOVE</span> <span class=\"st0\">'ST'</span> <span class=\"kw2\">TO</span> SUFFIX<span class=\"sy0\">.</span><br/>    <span class=\"kw1\">IF</span> LAST-DIGIT <span class=\"kw3\">IS</span> <span class=\"kw3\">EQUAL</span> <span class=\"kw2\">TO</span> <span class=\"nu0\">2</span> <span class=\"kw3\">THEN</span> <span class=\"kw2\">MOVE</span> <span class=\"st0\">'ND'</span> <span class=\"kw2\">TO</span> SUFFIX<span class=\"sy0\">.</span><br/>    <span class=\"kw1\">IF</span> LAST-DIGIT <span class=\"kw3\">IS</span> <span class=\"kw3\">EQUAL</span> <span class=\"kw2\">TO</span> <span class=\"nu0\">3</span> <span class=\"kw3\">THEN</span> <span class=\"kw2\">MOVE</span> <span class=\"st0\">'RD'</span> <span class=\"kw2\">TO</span> SUFFIX<span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 9, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> add-suffix <span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>suffixes #<span class=\"nu0\">10</span><span class=\"br0\">(</span><span class=\"st0\">\"th\"</span>  <span class=\"st0\">\"st\"</span>  <span class=\"st0\">\"nd\"</span>  <span class=\"st0\">\"rd\"</span>  <span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>last2 <span class=\"br0\">(</span>mod number <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>last-digit <span class=\"br0\">(</span>mod number <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>suffix <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span> last2 <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>                   <span class=\"st0\">\"th\"</span><br/>                   <span class=\"br0\">(</span>svref suffixes last-digit<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>format <span class=\"kw1\">nil</span> <span class=\"st0\">\"~a~a\"</span> number suffix<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 12, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">string</span> nth<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">immutable</span> suffix <span class=\"sy0\">=</span> <span class=\"st0\">\"th st nd rd th th th th th th\"</span>.<span class=\"me1\">split</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"%d'%s\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">100</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">100</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span><br/>                             suffix<span class=\"br0\">[</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>r<span class=\"sy0\">;</span> <span class=\"br0\">[</span>iota<span class=\"br0\">(</span><span class=\"nu0\">26</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> iota<span class=\"br0\">(</span><span class=\"nu0\">250</span><span class=\"sy0\">,</span> <span class=\"nu0\">266</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> iota<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span> <span class=\"nu0\">1026</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%-(%s\u00a0%)\"</span><span class=\"sy0\">,</span> r.<span class=\"me1\">map</span><span class=\"sy0\">!</span>nth<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elena", "loc": 29, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import system'math.<br/>import system'routines.<br/>\u00a0<br/>extension op<br/>{<br/>    ordinalize<br/>    [<br/>        int i\u00a0:= self absolute.<br/>        if ((11,12,13) ifExists(i mod:100))<br/>        [<br/>            ^ i literal + \"th\".<br/>        ].<br/>\u00a0<br/>        (i mod:10) =&gt;<br/>            1 [ ^ i literal + \"st\" ];<br/>            2 [ ^ i literal + \"nd\" ];<br/>            3 [ ^ i literal + \"rd\" ].<br/>\u00a0<br/>        ^ i literal + \"th\".<br/>    ]<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    console printLine(Range new(0,26); selectBy:%\"op.ordinalize\").<br/>    console printLine(Range new(250,26); selectBy:%\"op.ordinalize\").<br/>    console printLine(Range new(1000,26); selectBy:%\"op.ordinalize\").<br/>].</pre>"}, {"lang": "Elixir", "loc": 20, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def ordinalize(n) do<br/>    num = abs(n)<br/>    ordinal = if rem(num, 100) in 4..20 do<br/>                \"th\"<br/>              else<br/>                case rem(num, 10) do<br/>                  1 -&gt; \"st\"<br/>                  2 -&gt; \"nd\"<br/>                  3 -&gt; \"rd\"<br/>                  _ -&gt; \"th\"<br/>                end<br/>              end<br/>    \"#{n}#{ordinal}\"<br/>  end<br/>end<br/>\u00a0<br/>Enum.each([0..25, 250..265, 1000..1025], fn range -&gt;<br/>  Enum.map(range, fn n -&gt; RC.ordinalize(n) end) |&gt; Enum.join(\" \") |&gt; IO.puts<br/>end)</pre>"}, {"lang": "ERRE", "loc": 25, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM NTH_SOLVE<br/>\u00a0<br/>!<br/>! for rosettacode.org<br/>!<br/>\u00a0<br/>PROCEDURE NTH(S%,E%)<br/>      LOCAL I%,SUFF$<br/>      FOR I%=S% TO E% DO<br/>        SUFF$=\"th\"<br/>        IF I% MOD 10=1 AND I% MOD 100&lt;&gt;11 THEN SUFF$=\"st\" END IF<br/>        IF I% MOD 10=2 AND I% MOD 100&lt;&gt;12 THEN SUFF$=\"nd\" END IF<br/>        IF I% MOD 10=3 AND I% MOD 100&lt;&gt;13 THEN SUFF$=\"rd\" END IF<br/>        PRINT(STR$(I%)+SUFF$+\" \";)<br/>      END FOR<br/>      PRINT<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>   NTH(0,25)<br/>   NTH(250,265)<br/>   NTH(1000,1025)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 16, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"kw1\">let</span> ordinalsuffix n <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> suffixstrings <span class=\"sy0\">=</span> <span class=\"br0\">[</span>|<span class=\"st0\">\"th\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"st\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"nd\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"rd\"</span>|<span class=\"br0\">]</span><br/>    <span class=\"kw1\">let</span> <span class=\"br0\">(</span>d, r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Math.<span class=\"me1\">DivRem</span><span class=\"br0\">(</span>n, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    n.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> suffixstrings.<span class=\"br0\">[</span> <span class=\"kw1\">if</span> r <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span> &amp;&amp; <span class=\"br0\">(</span>d <span class=\"sy0\">&amp;&amp;&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> r <span class=\"kw1\">else</span> <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> show <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> <span class=\"br0\">(</span>ordinalsuffix <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span>printf <span class=\"st0\">\"\u00a0%s\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span>Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">25</span><span class=\"br0\">]</span> <span class=\"sy0\">|&gt;</span> show<br/>    <span class=\"br0\">[</span><span class=\"nu0\">250</span>..<span class=\"nu0\">265</span><span class=\"br0\">]</span> <span class=\"sy0\">|&gt;</span> show<br/>    <span class=\"br0\">[</span><span class=\"nu0\">1000</span>..<span class=\"nu0\">1025</span><span class=\"br0\">]</span> <span class=\"sy0\">|&gt;</span> show<br/>    <span class=\"nu0\">0</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 29, "block": "<pre class=\"text highlighted_source\">USING: math kernel combinators math.ranges math.parser<br/>    sequences io\u00a0;<br/>IN: nth<br/>\u00a0<br/>: tens-digit ( n -- n ) 10 [ /i ] [ mod ] bi\u00a0;<br/>\u00a0<br/>: teens? ( n --\u00a0? ) tens-digit 1 =\u00a0;<br/>\u00a0<br/>: non-teen-suffix ( n -- str )<br/>    10 mod {<br/>        { 1 [ \"st\" ] }<br/>        { 2 [ \"nd\" ] }<br/>        { 3 [ \"rd\" ] }<br/>        [ drop \"th\" ]<br/>    } case\u00a0;<br/>\u00a0<br/>: ordinal-suffix ( n -- str )<br/>    dup teens? [ drop 0 ] when non-teen-suffix\u00a0;<br/>\u00a0<br/>: join-suffix ( n -- str ) dup ordinal-suffix<br/>    [ number&gt;string ] dip append\u00a0;<br/>\u00a0<br/>: main ( -- )<br/>    0 25 250 265 1000 1025 [ [a,b] ] <a class=\"__cf_email__\" data-cfemail=\"2a185e58436a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    [ [ join-suffix ] map ] <a class=\"__cf_email__\" data-cfemail=\"7d090f143d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>    [ [ bl ] [ write ] interleave nl ] <a class=\"__cf_email__\" data-cfemail=\"8afef8e3ca\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0;<br/>\u00a0<br/>MAIN: main<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 10, "block": "<pre class=\"text highlighted_source\">: 'nth ( -- c-addr )  s\" th st nd rd th th th th th th \" drop\u00a0;<br/>: .nth ( n -- )<br/>  dup 10 20 within if 0 .r .\" th \" exit then<br/>  dup 0 .r 10 mod 3 * 'nth + 3 type\u00a0;<br/>\u00a0<br/>: test ( n n -- )  cr do i 5 mod 0= if cr then i .nth loop\u00a0;<br/>: tests ( -- )<br/>  26 0 test  266 250 test  1026 1000 test\u00a0;<br/>\u00a0<br/>tests</pre>"}, {"lang": "Fortran", "loc": 91, "block": "<pre class=\"fortran highlighted_source\"><span class=\"co1\">!-*- mode: compilation; default-directory: \"/tmp/\" -*-</span><br/><span class=\"co1\">!Compilation started at Fri Jun  6 15:40:18</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!a=./f &amp;&amp; make -k $a &amp;&amp; echo 0 25 | $a &amp;&amp; echo 250 265 | $a &amp;&amp; echo 1000 1025 | $a</span><br/><span class=\"co1\">!gfortran -std=f2008 -Wall -fopenmp -ffree-form -fall-intrinsics -fimplicit-none -g f.f08 -o f</span><br/><span class=\"co1\">!                  0'th                  1'st                  2'nd</span><br/><span class=\"co1\">!                  3'rd                  4'th                  5'th</span><br/><span class=\"co1\">!                  6'th                  7'th                  8'th</span><br/><span class=\"co1\">!                  9'th                 10'th                 11'th</span><br/><span class=\"co1\">!                 12'th                 13'th                 14'th</span><br/><span class=\"co1\">!                 15'th                 16'th                 17'th</span><br/><span class=\"co1\">!                 18'th                 19'th                 20'th</span><br/><span class=\"co1\">!                 21'st                 22'nd                 23'rd</span><br/><span class=\"co1\">!                 24'th                 25'th</span><br/><span class=\"co1\">!                                      250'th                251'st</span><br/><span class=\"co1\">!                252'nd                253'rd                254'th</span><br/><span class=\"co1\">!                255'th                256'th                257'th</span><br/><span class=\"co1\">!                258'th                259'th                260'th</span><br/><span class=\"co1\">!                261'st                262'nd                263'rd</span><br/><span class=\"co1\">!                264'th                265'th</span><br/><span class=\"co1\">!                                     1000th                1001st </span><br/><span class=\"co1\">!               1002nd                1003rd                1004th </span><br/><span class=\"co1\">!               1005th                1006th                1007th </span><br/><span class=\"co1\">!               1008th                1009th                1010th </span><br/><span class=\"co1\">!               1011th                1012th                1013th </span><br/><span class=\"co1\">!               1014th                1015th                1016th </span><br/><span class=\"co1\">!               1017th                1018th                1019th </span><br/><span class=\"co1\">!               1020th                1021st                1022nd </span><br/><span class=\"co1\">!               1023rd                1024th                1025th </span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!Compilation finished at Fri Jun  6 15:40:18</span><br/>\u00a0<br/><span class=\"kw1\">program</span> nth<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">need</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">here</span>, there, n, i, <span class=\"kw1\">iostat</span><br/>  read<span class=\"br0\">(</span><span class=\"nu0\">5</span>,<span class=\"sy0\">*</span>,<span class=\"kw1\">iostat</span><span class=\"sy0\">=</span><span class=\"kw1\">iostat</span><span class=\"br0\">)</span> here, there<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">iostat</span> <span class=\"kw2\">.<span class=\"me1\">ne</span>.</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>     write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"st0\">'such bad input never before seen.'</span><br/>     write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"st0\">'I AYE EYE QUIT!'</span><br/>     <span class=\"kw1\">call</span> <span class=\"kw1\">exit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  need <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>  n <span class=\"sy0\">=</span> <span class=\"kw4\">abs</span><span class=\"br0\">(</span>there <span class=\"sy0\">-</span> here<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">/=</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">+</span><span class=\"kw4\">mod</span><span class=\"br0\">(</span>here<span class=\"sy0\">-</span>i, <span class=\"nu0\">3</span><span class=\"br0\">)</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"st0\">'(a22)'</span>,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> <span class=\"st0\">''</span><br/>     i <span class=\"sy0\">=</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> here, there, <span class=\"kw4\">sign</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, there<span class=\"sy0\">-</span>here<span class=\"br0\">)</span><br/>     write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"st0\">'(a22)'</span>,<span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> ordinate<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>     <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">/=</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>i,<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        need <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>     <span class=\"kw1\">else</span><br/>        write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"st0\">'(a)'</span><span class=\"br0\">)</span><span class=\"st0\">''</span><br/>        need <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>     <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>need<span class=\"br0\">)</span> write<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"st0\">'(a)'</span><span class=\"br0\">)</span><span class=\"st0\">''</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">22</span><span class=\"br0\">)</span> <span class=\"kw1\">function</span> ordinate<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">19</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">20</span><span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"sy0\">&amp;</span><br/>         <span class=\"sy0\">&amp;</span>a09 <span class=\"sy0\">=</span>   <span class=\"st0\">\"thstndrdthththththth\"</span>,<span class=\"sy0\">&amp;</span><br/>         <span class=\"sy0\">&amp;</span>ateen <span class=\"sy0\">=</span> <span class=\"st0\">\"thththththththththth\"</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">ones</span>, tens, ones_index<br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    write<span class=\"br0\">(</span>a,<span class=\"st0\">'(i19)'</span><span class=\"br0\">)</span> n<br/>    ones <span class=\"sy0\">=</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>n,<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    tens <span class=\"sy0\">=</span> <span class=\"kw4\">mod</span><span class=\"br0\">(</span>n,<span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>    ones_index <span class=\"sy0\">=</span> ones<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n &lt; <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>       <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"kw2\">.<span class=\"me1\">le</span>.</span> tens<span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"br0\">(</span>tens <span class=\"kw2\">.<span class=\"me1\">lt</span>.</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          ordinate <span class=\"sy0\">=</span> a <span class=\"sy0\">//</span> <span class=\"st0\">\"'\"</span> <span class=\"sy0\">//</span> ateen<span class=\"br0\">(</span>ones_index<span class=\"sy0\">:</span>ones_index<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"co1\">!            ^^^^^^  remove these characters to remove the important '</span><br/>       <span class=\"kw1\">else</span><br/>          ordinate <span class=\"sy0\">=</span> a <span class=\"sy0\">//</span> <span class=\"st0\">\"'\"</span> <span class=\"sy0\">//</span> a09<span class=\"br0\">(</span>ones_index<span class=\"sy0\">:</span>ones_index<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"co1\">!            ^^^^^^  remove these characters to remove the important '</span><br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">else</span><br/>       <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"kw2\">.<span class=\"me1\">le</span>.</span> tens<span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"br0\">(</span>tens <span class=\"kw2\">.<span class=\"me1\">lt</span>.</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          ordinate <span class=\"sy0\">=</span> a <span class=\"sy0\">//</span> ateen<span class=\"br0\">(</span>ones_index<span class=\"sy0\">:</span>ones_index<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">else</span><br/>          ordinate <span class=\"sy0\">=</span> a <span class=\"sy0\">//</span> a09<span class=\"br0\">(</span>ones_index<span class=\"sy0\">:</span>ones_index<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> ordinate<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> nth</pre>"}, {"lang": "FreeBASIC", "loc": 39, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co1\">' Apostrophes NOT used as incorrect English</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> ordinal<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>  <span class=\"kw1\">Dim</span> ns <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"kw1\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  Select <span class=\"kw1\">Case</span> <span class=\"kw1\">Right</span><span class=\"br0\">(</span>ns, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Case</span> <span class=\"st0\">\"0\"</span>, <span class=\"st0\">\"4\"</span> <span class=\"kw1\">To</span> <span class=\"st0\">\"9\"</span><br/>      <span class=\"kw1\">Return</span> ns + <span class=\"st0\">\"th\"</span><br/>    <span class=\"kw1\">Case</span> <span class=\"st0\">\"1\"</span><br/>      <span class=\"kw1\">If</span> <span class=\"kw1\">Right</span><span class=\"br0\">(</span>ns, <span class=\"nu0\">2</span><span class=\"br0\">)</span> = <span class=\"st0\">\"11\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> ns + <span class=\"st0\">\"th\"</span> <br/>      <span class=\"kw1\">Return</span> ns + <span class=\"st0\">\"st\"</span><br/>    <span class=\"kw1\">Case</span> <span class=\"st0\">\"2\"</span><br/>      <span class=\"kw1\">If</span> <span class=\"kw1\">Right</span><span class=\"br0\">(</span>ns, <span class=\"nu0\">2</span><span class=\"br0\">)</span> = <span class=\"st0\">\"12\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> ns + <span class=\"st0\">\"th\"</span> <br/>      <span class=\"kw1\">Return</span> ns + <span class=\"st0\">\"nd\"</span><br/>    <span class=\"kw1\">Case</span> <span class=\"st0\">\"3\"</span><br/>      <span class=\"kw1\">If</span> <span class=\"kw1\">Right</span><span class=\"br0\">(</span>ns, <span class=\"nu0\">2</span><span class=\"br0\">)</span> = <span class=\"st0\">\"13\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> ns + <span class=\"st0\">\"th\"</span> <br/>      <span class=\"kw1\">Return</span> ns + <span class=\"st0\">\"rd\"</span><br/>  <span class=\"kw1\">End</span> Select<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span>    <br/>\u00a0<br/><span class=\"kw1\">Dim</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">25</span><br/>  <span class=\"kw1\">Print</span> ordinal<span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>;<br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">250</span> <span class=\"kw1\">To</span> <span class=\"nu0\">265</span><br/>  <span class=\"kw1\">Print</span> ordinal<span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>;<br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i = <span class=\"nu0\">1000</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1025</span><br/>  <span class=\"kw1\">Print</span> ordinal<span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>;<br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Gambas", "loc": 17, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siNums <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>, <span class=\"nu0\">25</span>, <span class=\"nu0\">250</span>, <span class=\"nu0\">265</span>, <span class=\"nu0\">1000</span>, <span class=\"nu0\">1025</span><span class=\"br0\">]</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siCount, siNumbers <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sOrdinal <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siNumbers <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">4</span> <a href=\"http://gambasdoc.org/help/lang/step\"><span class=\"kw1\">Step</span></a> <span class=\"nu0\">2</span><br/>  <a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount <span class=\"sy0\">=</span> siNums<span class=\"br0\">[</span>siNumbers<span class=\"br0\">]</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> siNums<span class=\"br0\">[</span>siNumbers <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    sOrdinal <span class=\"sy0\">=</span> <span class=\"st0\">\"th\"</span><br/>    <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/right\"><span class=\"kw2\">Right</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/str\"><span class=\"kw2\">Str</span></a><span class=\"br0\">(</span>siCount<span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span> <a href=\"http://gambasdoc.org/help/lang/and\"><span class=\"kw5\">And</span></a> <a href=\"http://gambasdoc.org/help/lang/right\"><span class=\"kw2\">Right</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/str\"><span class=\"kw2\">Str</span></a><span class=\"br0\">(</span>siCount<span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"11\"</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> sOrdinal <span class=\"sy0\">=</span> <span class=\"st0\">\"st\"</span><br/>    <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/right\"><span class=\"kw2\">Right</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/str\"><span class=\"kw2\">Str</span></a><span class=\"br0\">(</span>siCount<span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"2\"</span> <a href=\"http://gambasdoc.org/help/lang/and\"><span class=\"kw5\">And</span></a> <a href=\"http://gambasdoc.org/help/lang/right\"><span class=\"kw2\">Right</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/str\"><span class=\"kw2\">Str</span></a><span class=\"br0\">(</span>siCount<span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"12\"</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> sOrdinal <span class=\"sy0\">=</span> <span class=\"st0\">\"nd\"</span><br/>    <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <a href=\"http://gambasdoc.org/help/lang/right\"><span class=\"kw2\">Right</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/str\"><span class=\"kw2\">Str</span></a><span class=\"br0\">(</span>siCount<span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"3\"</span> <a href=\"http://gambasdoc.org/help/lang/and\"><span class=\"kw5\">And</span></a> <a href=\"http://gambasdoc.org/help/lang/right\"><span class=\"kw2\">Right</span></a><span class=\"br0\">(</span><a href=\"http://gambasdoc.org/help/lang/str\"><span class=\"kw2\">Str</span></a><span class=\"br0\">(</span>siCount<span class=\"br0\">)</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"13\"</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> sOrdinal <span class=\"sy0\">=</span> <span class=\"st0\">\"rd\"</span><br/>    <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> siCount <span class=\"sy0\">&amp;</span> sOrdinal;;<br/>  <a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> gb.<span class=\"me1\">NewLine</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a> </pre>"}, {"lang": "Go", "loc": 37, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ord<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"st0\">\"th\"</span><br/>    <span class=\"kw1\">switch</span> c <span class=\"sy2\">:=</span> n <span class=\"sy3\">%</span> <span class=\"nu0\">10</span><span class=\"sy1\">;</span> c <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">if</span> n<span class=\"sy3\">%</span><span class=\"nu0\">100</span><span class=\"sy3\">/</span><span class=\"nu0\">10</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">switch</span> c <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy1\">:</span><br/>            s <span class=\"sy2\">=</span> <span class=\"st0\">\"st\"</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy1\">:</span><br/>            s <span class=\"sy2\">=</span> <span class=\"st0\">\"nd\"</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy1\">:</span><br/>            s <span class=\"sy2\">=</span> <span class=\"st0\">\"rd\"</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"%d%s\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">25</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%s \"</span><span class=\"sy1\">,</span> ord<span class=\"sy1\">(</span>n<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">250</span><span class=\"sy1\">;</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">265</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%s \"</span><span class=\"sy1\">,</span> ord<span class=\"sy1\">(</span>n<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">1000</span><span class=\"sy1\">;</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">1025</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%s \"</span><span class=\"sy1\">,</span> ord<span class=\"sy1\">(</span>n<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "GW-BASIC", "loc": 30, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"co3\"><br/>10</span>  <span class=\"co1\">' N'th</span><br/><span class=\"co3\">20</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> LOLIM% <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"co3\">30</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> HILIM% <span class=\"sy0\">=</span> <span class=\"nu0\">25</span><br/><span class=\"co3\">40</span>  <span class=\"kw1\">GOSUB</span> <span class=\"nu0\">1000</span><br/><span class=\"co3\">50</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> LOLIM% <span class=\"sy0\">=</span> <span class=\"nu0\">250</span><br/><span class=\"co3\">60</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> HILIM% <span class=\"sy0\">=</span> <span class=\"nu0\">265</span><br/><span class=\"co3\">70</span>  <span class=\"kw1\">GOSUB</span> <span class=\"nu0\">1000</span><br/><span class=\"co3\">80</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> LOLIM% <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><br/><span class=\"co3\">90</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> HILIM% <span class=\"sy0\">=</span> <span class=\"nu0\">1025</span><br/><span class=\"co3\">100</span> <span class=\"kw1\">GOSUB</span> <span class=\"nu0\">1000</span><br/><span class=\"co3\">110</span> <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <br/><span class=\"co3\"> <br/>995</span>  <span class=\"co1\">' Print images </span><br/><span class=\"co3\">1000</span> <span class=\"kw1\">FOR</span> I% <span class=\"sy0\">=</span> LOLIM% <span class=\"kw1\">TO</span> HILIM%<br/><span class=\"co3\">1010</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> NR% <span class=\"sy0\">=</span> I%<br/><span class=\"co3\">1020</span>  <span class=\"kw1\">GOSUB</span> <span class=\"nu0\">1500</span><br/><span class=\"co3\">1030</span>  <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> SI$ <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckstr%24.shtml\"><span class=\"kw3\">STR$</span></a><span class=\"br0\">(</span>I%<span class=\"br0\">)</span><br/><span class=\"co3\">1040</span>  <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckright%24.shtml\"><span class=\"kw3\">RIGHT$</span></a><span class=\"br0\">(</span>SI$<span class=\"sy0\">,</span> <a href=\"http://www.qbasicnews.com/qboho/qcklen.shtml\"><span class=\"kw3\">LEN</span></a><span class=\"br0\">(</span>SI$<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>; SUF$; <span class=\"st0\">\" \"</span>;<br/><span class=\"co3\">1050</span> <span class=\"kw1\">NEXT</span> I%<br/><span class=\"co3\">1060</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a><br/><span class=\"co3\">1070</span> <span class=\"kw1\">RETURN</span> <br/><span class=\"co3\"><br/>1495</span> <span class=\"co1\">' Get suffix</span><br/><span class=\"co3\">1500</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>NR% <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> <span class=\"nu0\">10</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckand.shtml\"><span class=\"kw3\">AND</span></a> <span class=\"br0\">(</span>NR% <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> <span class=\"nu0\">100</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> SUF$ <span class=\"sy0\">=</span> <span class=\"st0\">\"st\"</span>: <span class=\"kw1\">GOTO</span> <span class=\"nu0\">2000</span><br/><span class=\"co3\">1600</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>NR% <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> <span class=\"nu0\">10</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckand.shtml\"><span class=\"kw3\">AND</span></a> <span class=\"br0\">(</span>NR% <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> <span class=\"nu0\">100</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> SUF$ <span class=\"sy0\">=</span> <span class=\"st0\">\"nd\"</span>: <span class=\"kw1\">GOTO</span> <span class=\"nu0\">2000</span><br/><span class=\"co3\">1700</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>NR% <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> <span class=\"nu0\">10</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckand.shtml\"><span class=\"kw3\">AND</span></a> <span class=\"br0\">(</span>NR% <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> <span class=\"nu0\">100</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> SUF$ <span class=\"sy0\">=</span> <span class=\"st0\">\"rd\"</span>: <span class=\"kw1\">GOTO</span> <span class=\"nu0\">2000</span> <br/><span class=\"co3\">1800</span> <a href=\"http://www.qbasicnews.com/qboho/qcklet.shtml\"><span class=\"kw3\">LET</span></a> SUF$ <span class=\"sy0\">=</span> <span class=\"st0\">\"th\"</span><br/><span class=\"co3\">2000</span> <span class=\"kw1\">RETURN</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 19, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<br/>\u00a0<br/>ordSuffs <span class=\"sy0\">::</span> Array <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>ordSuffs <span class=\"sy0\">=</span> listArray <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"st0\">\"th\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"st\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nd\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"rd\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"th\"</span><span class=\"sy0\">,</span><br/>                            <span class=\"st0\">\"th\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"th\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"th\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"th\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"th\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>ordSuff <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>ordSuff n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> n <span class=\"sy0\">++</span> suff n<br/>  <span class=\"kw1\">where</span> suff m <span class=\"sy0\">|</span> <span class=\"br0\">(</span>m `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:rem\"><span class=\"kw3\">rem</span></a>` <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">11</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>m `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:rem\"><span class=\"kw3\">rem</span></a>` <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">13</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"th\"</span><br/>               <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a>          <span class=\"sy0\">=</span> ordSuffs <span class=\"sy0\">!</span> <span class=\"br0\">(</span>m `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:rem\"><span class=\"kw3\">rem</span></a>` <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/>printOrdSuffs <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>printOrdSuffs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unwords\"><span class=\"kw3\">unwords</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> ordSuff<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  printOrdSuffs <span class=\"br0\">[</span>   <span class=\"nu0\">0</span><span class=\"sy0\">..</span>  <span class=\"nu0\">25</span><span class=\"br0\">]</span><br/>  printOrdSuffs <span class=\"br0\">[</span> <span class=\"nu0\">250</span><span class=\"sy0\">..</span> <span class=\"nu0\">265</span><span class=\"br0\">]</span><br/>  printOrdSuffs <span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"sy0\">..</span><span class=\"nu0\">1025</span><span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 11, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span>nth<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">25</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span>nth<span class=\"br0\">(</span><span class=\"nu0\">250</span> <span class=\"kw1\">to</span> <span class=\"nu0\">265</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span>nth<span class=\"br0\">(</span><span class=\"nu0\">1000</span> <span class=\"kw1\">to</span> <span class=\"nu0\">1025</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> nth<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> n <span class=\"sy0\">||</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy0\">%</span>10 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"sy0\">%</span>100 <span class=\"sy0\">~=</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"st0\">\"st\"</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span><br/>                 <span class=\"br0\">(</span>n<span class=\"sy0\">%</span>10 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> n<span class=\"sy0\">%</span>100 <span class=\"sy0\">~=</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nd\"</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span><br/>                 <span class=\"br0\">(</span>n<span class=\"sy0\">%</span>10 <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> n<span class=\"sy0\">%</span>100 <span class=\"sy0\">~=</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"st0\">\"rd\"</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">suf=: <span class=\"sy0\">(</span>;:<span class=\"st_h\">'th st nd rd th'</span><span class=\"sy0\">)</span> {::~ <span class=\"nu0\">4</span> &lt;. <span class=\"nu0\">10</span> <span class=\"nu0\">10</span> <span class=\"sy0\">(</span>* <span class=\"nu0\">1</span>&amp;~:<span class=\"sy0\">)</span>~/@#: ]<br/>nth=: [:\u00a0;:inv <span class=\"sy0\">(</span>\": , suf<span class=\"sy0\">)</span>each</pre>"}, {"lang": "Java", "loc": 26, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Nth <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> ordinalAbbrev<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> ans <span class=\"sy0\">=</span> <span class=\"st0\">\"th\"</span><span class=\"sy0\">;</span> <span class=\"co1\">//most of the time it should be \"th\"</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">100</span> <span class=\"sy0\">/</span> <span class=\"nu0\">10</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> ans<span class=\"sy0\">;</span> <span class=\"co1\">//teens are all \"th\"</span><br/>\t\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span> ans <span class=\"sy0\">=</span> <span class=\"st0\">\"st\"</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span> ans <span class=\"sy0\">=</span> <span class=\"st0\">\"nd\"</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span> ans <span class=\"sy0\">=</span> <span class=\"st0\">\"rd\"</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">return</span> ans<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">25</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> ordinalAbbrev<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">250</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">265</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> ordinalAbbrev<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1025</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> ordinalAbbrev<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 24, "block": "<pre class=\"javascript highlighted_source\">console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"kw1\">var</span> lstSuffix <span class=\"sy0\">=</span> <span class=\"st0\">'th st nd rd th th th th th th'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>    fnOrdinalForm <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> n.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><br/>        <span class=\"nu0\">11</span> <span class=\"sy0\">&lt;=</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">100</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"nu0\">13</span> <span class=\"sy0\">&gt;=</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">100</span> <span class=\"sy0\">?</span><br/>        <span class=\"st0\">\"th\"</span> <span class=\"sy0\">:</span> lstSuffix<span class=\"br0\">[</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\u00a0<br/>    range <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw4\">Array</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><br/>        <span class=\"kw2\">null</span><span class=\"sy0\">,</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> m <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> m <span class=\"sy0\">+</span> i<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">250</span><span class=\"sy0\">,</span> <span class=\"nu0\">265</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span> <span class=\"nu0\">1025</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>tpl<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> range.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span> tpl<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>fnOrdinalForm<span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># ordinalize an integer input, positive or negative<br/>def ordinalize:<br/> (if . &lt; 0 then -(.) else . end) as $num<br/> | ($num\u00a0% 100) as $small<br/> | (if 11 &lt;= $small and $small &lt;= 13 then \"th\"<br/>    else<br/>    ( $num\u00a0% 10)<br/>      | (if   . == 1 then \"st\" <br/>         elif . == 2 then \"nd\"<br/>         elif . == 3 then \"rd\"<br/>         else             \"th\"<br/>         end)<br/>    end) as $ordinal<br/> | \"\\(.)\\($ordinal)\"\u00a0;<br/>\u00a0<br/>([range(-5; -1)], [range(0;26)], [range(250;266)], [range(1000;1026)])<br/> | map(ordinalize)<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 12, "block": "<pre class=\"text highlighted_source\">function ordinal(n::Integer)<br/>    n &lt; 0 &amp;&amp; throw(DomainError())<br/>    suffixes = (\"st\", \"nd\", \"rd\")<br/>    u = n\u00a0% 10<br/>    t = n \u00f7 10\u00a0% 10<br/>    if u &gt; 3 || u == 0 || t == 1<br/>        suf = \"th\"<br/>    else<br/>        suf = suffixes[u]<br/>    end<br/>    return string(n, suf)<br/>end</pre>"}, {"lang": "Kotlin", "loc": 9, "block": "<pre class=\"scala highlighted_source\">fun Int.<span class=\"me1\">ordinalAbbrev</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <span class=\"sy0\">%</span> <span class=\"nu0\">100</span> / <span class=\"nu0\">10</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\"th\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> when <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span> -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"st\"</span> <span class=\"nu0\">2</span> -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"nd\"</span> <span class=\"nu0\">3</span> -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"rd\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span> <span class=\"st0\">\"th\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>fun IntRange.<span class=\"me1\">ordinalAbbrev</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> map <span class=\"br0\">{</span> <span class=\"st0\">\"$it\"</span> + it.<span class=\"me1\">ordinalAbbrev</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    listOf<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">25</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">250</span>..<span class=\"nu0\">265</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">1000</span>..<span class=\"nu0\">1025</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> println<span class=\"br0\">(</span>it.<span class=\"me1\">ordinalAbbrev</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 12, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> getSuffix <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> lastTwo<span class=\"sy0\">,</span> lastOne <span class=\"sy0\">=</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">100</span><span class=\"sy0\">,</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">if</span> lastTwo <span class=\"sy0\">&gt;</span> <span class=\"nu0\">3</span> <span class=\"kw2\">and</span> lastTwo <span class=\"sy0\">&lt;</span> <span class=\"nu0\">21</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"th\"</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> lastOne <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"st\"</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> lastOne <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"nd\"</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> lastOne <span class=\"sy0\">==</span> <span class=\"nu0\">3</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"rd\"</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"th\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Nth <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">return</span> n <span class=\"sy0\">..</span> <span class=\"st0\">\"'\"</span> <span class=\"sy0\">..</span> getSuffix<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span> <span class=\"kw1\">do</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span>Nth<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span> Nth<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">250</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Nth<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 25, "block": "<pre class=\"text highlighted_source\">toOrdinal\u00a0:= proc(n:: nonnegint)<br/>\tif 1 &lt;= n and n &lt;= 10 then<br/>\t\tif n &gt;= 4 then<br/>\t\t\tprintf(\"%ath\", n);<br/>\t\telif n = 3 then<br/>\t\t\tprintf(\"%ard\", n);<br/>\t\telif n = 2 then<br/>\t\t\tprintf(\"%and\", n);<br/>\t\telse<br/>\t\t\tprintf(\"%ast\", n);<br/>\t\tend if:<br/>\telse<br/>\t\tprintf(convert(n, 'ordinal'));<br/>\tend if:<br/>\treturn NULL;<br/>end proc:<br/>\u00a0<br/>a\u00a0:= [[0, 25], [250, 265], [1000, 1025]]:<br/>for i in a do<br/>\tfor j from i[1] to i[2] do<br/>\t\ttoOrdinal(j);<br/>\t\tprintf(\"   \");<br/>\tend do;<br/>\tprintf(\"\\n\\n\");<br/>end do;</pre>"}, {"lang": "Mathematica", "loc": 13, "block": "<pre class=\"text highlighted_source\">suffixlist = {\"th\", \"st\", \"nd\", \"rd\", \"th\", \"th\", \"th\", \"th\", \"th\",\"th\"};<br/>addsuffix[n_]\u00a0:= Module[{suffix},<br/>  suffix = Which[<br/>    Mod[n, 100] &lt;= 10, suffixlist[[Mod[n, 10] + 1]],<br/>    Mod[n, 100] &gt; 20, suffixlist[[Mod[n, 10] + 1]],<br/>    True, \"th\"<br/>    ];<br/>  ToString[n] &lt;&gt; suffix<br/>  ]<br/>addsuffix[#] &amp; /@ Range[0, 25] (* test 1 *)<br/>addsuffix[#] &amp; /@ Range[250, 265] (* test 2 *)<br/>addsuffix[#] &amp; /@ Range[1000, 1025] (* test 3 *)<br/>\u00a0</pre>"}, {"lang": "MATLAB", "loc": 18, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> s = nth<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    tens = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>n, <span class=\"nu0\">100</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">if</span> tens &gt; <span class=\"nu0\">9</span> &amp;&amp; tens &lt; <span class=\"nu0\">20</span><br/>        suf = <span class=\"co2\">'th'</span>;<br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">switch</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>n, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><br/>                suf = <span class=\"co2\">'st'</span>;<br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><br/>                suf = <span class=\"co2\">'nd'</span>;<br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><br/>                suf = <span class=\"co2\">'rd'</span>;<br/>            <span class=\"kw1\">otherwise</span><br/>                suf = <span class=\"co2\">'th'</span>;<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    s = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'%d%s'</span>, n, suf<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Microsoft Small Basic", "loc": 34, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>loLim = 0<br/>hiLim = 25<br/>PrintImages()<br/>loLim = 250<br/>hiLim = 265<br/>PrintImages()<br/>loLim = 1000<br/>hiLim = 1025<br/>PrintImages()<br/>\u00a0<br/>Sub PrintImages<br/>  For i = loLim To hiLim<br/>    nr = i<br/>    GetSuffix()<br/>    TextWindow.Write(i + suffix + \" \")<br/>  EndFor<br/>  TextWindow.WriteLine(\"\")<br/>EndSub  <br/>\u00a0<br/>Sub GetSuffix<br/>  rem10  = Math.Remainder(nr, 10)  <br/>  rem100 = Math.Remainder(nr, 100)<br/>  If rem10 = 1 And rem100 &lt;&gt; 11 Then<br/>    suffix = \"st\"<br/>  ElseIf rem10 = 2 And rem100 &lt;&gt; 12 Then<br/>    suffix = \"nd\"<br/>  ElseIf rem10 = 3 And rem100 &lt;&gt; 13 Then<br/>    suffix = \"rd\"<br/>  Else<br/>    suffix = \"th\"<br/>  EndIf      <br/>EndSub<br/>\u00a0</pre>"}, {"lang": "Modula-2", "loc": 47, "block": "<pre class=\"modula2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Nth;<br/>\u00a0<br/><span class=\"kw1\">FROM</span> STextIO <span class=\"kw1\">IMPORT</span><br/>  WriteString<span class=\"sy0\">,</span> WriteLn;<br/><span class=\"kw1\">FROM</span> WholeStr <span class=\"kw1\">IMPORT</span><br/>  IntToStr;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Suffix<span class=\"br0\">(</span>N<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>; <span class=\"kw1\">VAR</span> OUT Destination<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span><br/>  NMod10<span class=\"sy0\">,</span> NMod100<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  NMod10 <span class=\"sy0\">:=</span> N <span class=\"kw1\">MOD</span> <span class=\"nu0\">10</span>;<br/>  NMod100 <span class=\"sy0\">:=</span> N <span class=\"kw1\">MOD</span> <span class=\"nu0\">100</span>;<br/>  <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>NMod10 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">AND</span> <span class=\"br0\">(</span>NMod100 &lt;&gt; <span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>    Destination <span class=\"sy0\">:=</span> <span class=\"st0\">\"st\"</span>;<br/>  <span class=\"kw1\">ELSIF</span> <span class=\"br0\">(</span>NMod10 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">AND</span> <span class=\"br0\">(</span>NMod100 &lt;&gt; <span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>    Destination <span class=\"sy0\">:=</span> <span class=\"st0\">\"nd\"</span>;<br/>  <span class=\"kw1\">ELSIF</span> <span class=\"br0\">(</span>NMod10 <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">AND</span> <span class=\"br0\">(</span>NMod100 &lt;&gt; <span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>    Destination <span class=\"sy0\">:=</span> <span class=\"st0\">\"rd\"</span>;<br/>  <span class=\"kw1\">ELSE</span><br/>    Destination <span class=\"sy0\">:=</span> <span class=\"st0\">\"th\"</span>;<br/>  <span class=\"kw1\">END</span>;<br/><span class=\"kw1\">END</span> Suffix;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> PrintImages<span class=\"br0\">(</span>LoLim<span class=\"sy0\">,</span> HiLim<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span><br/>  I<span class=\"sy0\">:</span> <span class=\"kw4\">CARDINAL</span>;<br/>  IString<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> .. <span class=\"nu0\">15</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>  ISuff<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> .. <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">FOR</span> I <span class=\"sy0\">:=</span> LoLim <span class=\"kw1\">TO</span> HiLim <span class=\"kw1\">DO</span><br/>    IntToStr<span class=\"br0\">(</span>I<span class=\"sy0\">,</span> IString<span class=\"br0\">)</span>;<br/>    Suffix<span class=\"br0\">(</span>I<span class=\"sy0\">,</span> ISuff<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>IString<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>ISuff<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span>;<br/>  WriteLn;<br/><span class=\"kw1\">END</span> PrintImages;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  PrintImages<span class=\"br0\">(</span>   <span class=\"nu0\">0</span><span class=\"sy0\">,</span>   <span class=\"nu0\">25</span><span class=\"br0\">)</span>;<br/>  PrintImages<span class=\"br0\">(</span> <span class=\"nu0\">250</span><span class=\"sy0\">,</span>  <span class=\"nu0\">265</span><span class=\"br0\">)</span>;<br/>  PrintImages<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span> <span class=\"nu0\">1025</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> Nth.<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 9, "block": "<pre class=\"text highlighted_source\">const suffix = [\"th\", \"st\", \"nd\", \"rd\", \"th\", \"th\", \"th\", \"th\", \"th\", \"th\"]<br/>\u00a0<br/>proc nth(n): string =<br/>  $n &amp; \"'\" &amp; (if n mod 100 &lt;= 10 or n mod 100 &gt; 20: suffix[n mod 10] else: \"th\")<br/>\u00a0<br/>for j in countup(0, 1000, 250):<br/>  for i in j..j+24:<br/>    stdout.write nth(i), \" \"<br/>  echo \"\"</pre>"}, {"lang": "OCaml", "loc": 17, "block": "<pre class=\"ocaml highlighted_source\">\u00a0<br/><span class=\"kw1\">let</span> show_nth n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"kw1\">mod</span> <span class=\"nu0\">10</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>n <span class=\"kw1\">mod</span> <span class=\"nu0\">100</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"st\"</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"kw1\">mod</span> <span class=\"nu0\">10</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>n <span class=\"kw1\">mod</span> <span class=\"nu0\">100</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"nd\"</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"kw1\">mod</span> <span class=\"nu0\">10</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>n <span class=\"kw1\">mod</span> <span class=\"nu0\">100</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"rd\"</span><br/>  <span class=\"kw1\">else</span> <span class=\"st0\">\"th\"</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> show_ordinals <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmin\"><span class=\"kw3\">min</span></a>, <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmax\"><span class=\"kw3\">max</span></a><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmin\"><span class=\"kw3\">min</span></a> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmax\"><span class=\"kw3\">max</span></a> <span class=\"kw1\">do</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%d%s \"</span> i <span class=\"br0\">(</span>show_nth i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>\u00a0<br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter show_ordinals <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">25</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"nu0\">250</span>,<span class=\"nu0\">265</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span><span class=\"nu0\">1000</span>,<span class=\"nu0\">1025</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "Oforth", "loc": 7, "block": "<pre class=\"text highlighted_source\">: nth(n)<br/>| r |<br/>   n \"th\" over 10 mod -&gt;r<br/>   r 1 == ifTrue: [ n 100 mod 11 == ifFalse: [ drop \"st\" ] ]<br/>   r 2 == ifTrue: [ n 100 mod 12 == ifFalse: [ drop \"nd\" ] ]<br/>   r 3 == ifTrue: [ n 100 mod 13 == ifFalse: [ drop \"rd\" ] ]  <br/>   +\u00a0;</pre>"}, {"lang": "PARI/GP", "loc": 5, "block": "<pre class=\"parigp highlighted_source\">ordinal<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>k<span class=\"sy0\">=</span>n<span class=\"sy0\">%</span><span class=\"nu2\">10</span><span class=\"sy0\">,</span>m<span class=\"sy0\">=</span>n<span class=\"sy0\">%</span><span class=\"nu2\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>m<span class=\"sy0\">&lt;</span><span class=\"nu1\">21</span><span class=\"sy0\">&amp;&amp;</span>m<span class=\"sy0\">&gt;</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"st0\">\"th\"</span><span class=\"sy0\">,</span>k<span class=\"sy0\">==</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"st0\">\"st\"</span><span class=\"sy0\">,</span>k<span class=\"sy0\">==</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"st0\">\"nd\"</span><span class=\"sy0\">,</span>k<span class=\"sy0\">==</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"st0\">\"rd\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">apply</span><span class=\"br0\">(</span>ordinal<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">0</span>..<span class=\"nu1\">25</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">apply</span><span class=\"br0\">(</span>ordinal<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">250</span>..<span class=\"nu1\">265</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">apply</span><span class=\"br0\">(</span>ordinal<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">1000</span>..<span class=\"nu1\">1025</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">apply</span><span class=\"br0\">(</span>ordinal<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">111</span><span class=\"sy0\">,</span> <span class=\"nu1\">1012</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 33, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> n_th<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Suffix<span class=\"br0\">(</span>N<span class=\"sy1\">:</span> NativeInt<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">AnsiString</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  res<span class=\"sy1\">:</span> <span class=\"kw4\">AnsiString</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  res<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'th'</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">case</span> N <span class=\"kw1\">mod</span> <span class=\"nu0\">10</span> <span class=\"kw1\">of</span><br/>  <span class=\"nu0\">1</span><span class=\"sy1\">:</span><span class=\"kw1\">IF</span> N <span class=\"kw1\">mod</span> <span class=\"nu0\">100</span> &lt;&gt; <span class=\"nu0\">11</span> <span class=\"kw1\">then</span><br/>      res<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'st'</span><span class=\"sy1\">;</span><br/>  <span class=\"nu0\">2</span><span class=\"sy1\">:</span><span class=\"kw1\">IF</span> N <span class=\"kw1\">mod</span> <span class=\"nu0\">100</span> &lt;&gt; <span class=\"nu0\">12</span> <span class=\"kw1\">then</span><br/>      res<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'nd'</span><span class=\"sy1\">;</span><br/>  <span class=\"nu0\">3</span><span class=\"sy1\">:</span><span class=\"kw1\">IF</span> N <span class=\"kw1\">mod</span> <span class=\"nu0\">100</span> &lt;&gt; <span class=\"nu0\">13</span> <span class=\"kw1\">then</span><br/>      res<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'rd'</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">else</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  Suffix <span class=\"sy1\">:</span><span class=\"sy3\">=</span> res<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> Print_Images<span class=\"br0\">(</span>loLim<span class=\"sy1\">,</span> HiLim<span class=\"sy1\">:</span> NativeInt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i <span class=\"sy1\">:</span> NativeUint<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> I <span class=\"sy1\">:</span><span class=\"sy3\">=</span> LoLim <span class=\"kw1\">to</span> HiLim <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>i<span class=\"sy1\">,</span>Suffix<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Print_Images<span class=\"br0\">(</span>   <span class=\"nu0\">0</span><span class=\"sy1\">,</span>   <span class=\"nu0\">25</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   Print_Images<span class=\"br0\">(</span> <span class=\"nu0\">250</span><span class=\"sy1\">,</span>  <span class=\"nu0\">265</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   Print_Images<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"sy1\">,</span> <span class=\"nu0\">1025</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 16, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">%irregulars</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'st'</span><span class=\"sy0\">,</span><br/>                   <span class=\"nu0\">2</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'nd'</span><span class=\"sy0\">,</span><br/>                   <span class=\"nu0\">3</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'rd'</span><span class=\"sy0\">,</span><br/>                  <span class=\"nu0\">11</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'th'</span><span class=\"sy0\">,</span><br/>                  <span class=\"nu0\">12</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'th'</span><span class=\"sy0\">,</span><br/>                  <span class=\"nu0\">13</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'th'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> nth<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">.</span> <span class=\"co1\"># q(') . # Uncomment this to add apostrophes to output</span><br/>    <span class=\"br0\">(</span><span class=\"re0\">$irregulars</span><span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"nu0\">100</span><span class=\"br0\">}</span> <span class=\"sy0\">//</span> <span class=\"re0\">$irregulars</span><span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">}</span> <span class=\"sy0\">//</span> <span class=\"st_h\">'th'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> range <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> nth<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> range<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">25</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">250</span><span class=\"sy0\">..</span><span class=\"nu0\">265</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"sy0\">..</span><span class=\"nu0\">1025</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 5, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">%irregulars</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> st <span class=\"nu0\">2</span> nd <span class=\"nu0\">3</span> rd<span class=\"sy0\">&gt;,</span> <span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy0\">..</span><span class=\"nu0\">13</span> <span class=\"kw1\">X</span><span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'th'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> nth <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$n</span> <span class=\"sy0\">~</span> <span class=\"br0\">(</span> <span class=\"re0\">%irregulars</span><span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"nu0\">100</span><span class=\"br0\">}</span> <span class=\"sy0\">//</span> <span class=\"re0\">%irregulars</span><span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">}</span> <span class=\"sy0\">//</span> <span class=\"st_h\">'th'</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"sy0\">.</span><span class=\"me1\">list</span>\u00bb<span class=\"sy0\">.</span><span class=\"re0\">&amp;nth</span> <span class=\"kw1\">for</span> <span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">26</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">250</span><span class=\"sy0\">..</span><span class=\"nu0\">265</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"sy0\">..</span><span class=\"nu0\">1025</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 16, "block": "<pre class=\"text highlighted_source\">constant ordinals = {\"th\",\"st\",\"nd\",\"rd\"}<br/>\u00a0<br/>function Nth(integer n, bool apostrophe=false)<br/>    integer mod10 = mod(n,10)+1<br/>    if mod10&gt;4 or mod(n,100)=mod10+9 then mod10 = 1 end if<br/>    return sprintf(\"%d%s\",{n,repeat('\\'',apostrophe)&amp;ordinals[mod10]})<br/>end function<br/>\u00a0<br/>constant ranges = {{0,25},{250,265},{1000,1025}}<br/>for i=1 to length(ranges) do<br/>    for j=ranges[i][1] to ranges[i][2] do<br/>        if mod(j,10)=0 then puts(1,\"\\n\") end if<br/>        printf(1,\"\u00a0%6s\",{Nth(j,i=2)})<br/>    end for<br/>    puts(1,\"\\n\")<br/>end for</pre>"}, {"lang": "PHP", "loc": 25, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">function</span> nth<span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"re0\">$os</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"th\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$num</span> <span class=\"sy0\">%</span> <span class=\"nu0\">100</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span> or <span class=\"re0\">$num</span> <span class=\"sy0\">%</span> <span class=\"nu0\">100</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">switch</span> <span class=\"br0\">(</span><span class=\"re0\">$num</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy0\">:</span><br/>        <span class=\"re0\">$os</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"st\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>        <span class=\"re0\">$os</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"nd\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span><br/>        <span class=\"re0\">$os</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"rd\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span> <br/>  <span class=\"kw1\">return</span> <span class=\"re0\">$num</span> <span class=\"sy0\">.</span> <span class=\"re0\">$os</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">25</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">250</span><span class=\"sy0\">,</span><span class=\"nu0\">265</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span><span class=\"nu0\">1025</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"kw1\">as</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$i</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">echo</span> nth<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$i</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 18, "block": "<pre class=\"text highlighted_source\">(de rangeth (A B)<br/>   (mapcar<br/>      '((I)<br/>         (pack I<br/>            (if (member (% I 100) (11 12 13))<br/>               'th<br/>               (case (% I 10)<br/>                  (1 'st)<br/>                  (2 'nd)<br/>                  (3 'rd)<br/>                  (T 'th) ) ) ) )<br/>         (range A B) ) )<br/>\u00a0<br/>(prinl (glue \" \" (rangeth 0 25)))<br/>(prinl (glue \" \" (rangeth 250 265)))<br/>(prinl (glue \" \" (rangeth 1000 1025)))<br/>\u00a0<br/>(bye)</pre>"}, {"lang": "PL/I", "loc": 26, "block": "<pre class=\"text highlighted_source\">Nth: procedure options (main);   /* 1 June 2014 */<br/>   declare i fixed (10);<br/>\u00a0<br/>   do i = 0 to 25, 250 to 265, 1000 to 1025;<br/>      if i = 250 | i = 1000 then put skip (2);<br/>      put edit (enth(i)) (x(1), a);<br/>   end;<br/>\u00a0<br/>enth: procedure (i) returns (character (25) varying);<br/>   declare i fixed (10);<br/>   declare suffix character (2);<br/>\u00a0<br/>   select (mod(i, 10));<br/>      when (1)  suffix = 'st';<br/>      when (2)  suffix = 'nd';<br/>      when (3)  suffix = 'rd';<br/>      otherwise suffix = 'th';<br/>   end;<br/>   select (mod(i, 100));<br/>      when (11, 12, 13) suffix = 'th';<br/>      otherwise\u00a0;<br/>   end;<br/>   return ( trim(i) || suffix );<br/>end enth;<br/>\u00a0<br/>end Nth;</pre>"}, {"lang": "PowerShell", "loc": 14, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> nth<span class=\"br0\">(</span><span class=\"re0\">$inp</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"re0\">$suffix</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"th\"</span><br/>\u00a0<br/>\t<span class=\"kw3\">switch</span><span class=\"br0\">(</span><span class=\"re0\">$inp</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"nu0\">1</span><span class=\"br0\">{</span><span class=\"re0\">$suffix</span><span class=\"sy0\">=</span><span class=\"st0\">\"st\"</span><span class=\"br0\">}</span><br/>\t\t<span class=\"nu0\">2</span><span class=\"br0\">{</span><span class=\"re0\">$suffix</span><span class=\"sy0\">=</span><span class=\"st0\">\"nd\"</span><span class=\"br0\">}</span><br/>\t\t<span class=\"nu0\">3</span><span class=\"br0\">{</span><span class=\"re0\">$suffix</span><span class=\"sy0\">=</span><span class=\"st0\">\"rd\"</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">return</span> <span class=\"st0\">\"$inp$suffix \"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"nu0\">0</span>..<span class=\"nu0\">25</span> <span class=\"sy0\">|</span> <span class=\"sy0\">%</span><span class=\"br0\">{</span><span class=\"kw1\">Write-host</span> <span class=\"kw5\">-nonewline</span> <span class=\"br0\">(</span>nth <span class=\"st0\">\"$_\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span>;<span class=\"st0\">\"\"</span><br/><span class=\"nu0\">250</span>..<span class=\"nu0\">265</span> <span class=\"sy0\">|</span> <span class=\"sy0\">%</span><span class=\"br0\">{</span><span class=\"kw1\">Write-host</span> <span class=\"kw5\">-nonewline</span> <span class=\"br0\">(</span>nth <span class=\"st0\">\"$_\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span>;<span class=\"st0\">\"\"</span><br/><span class=\"nu0\">1000</span>..<span class=\"nu0\">1025</span> <span class=\"sy0\">|</span> <span class=\"sy0\">%</span><span class=\"br0\">{</span><span class=\"kw1\">Write-host</span> <span class=\"kw5\">-nonewline</span> <span class=\"br0\">(</span>nth <span class=\"st0\">\"$_\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span>;<span class=\"st0\">\"\"</span></pre>"}, {"lang": "Prolog", "loc": 17, "block": "<pre class=\"prolog highlighted_source\">nth<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> N_Th<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    <span class=\"br0\">(</span> tween<span class=\"br0\">(</span>N<span class=\"br0\">)</span>      <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> Th <span class=\"sy6\">=</span> \"th\"<br/>    <span class=\"sy4\">;</span> <span class=\"nu0\">1</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">10</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> Th <span class=\"sy6\">=</span> \"st\"<br/>    <span class=\"sy4\">;</span> <span class=\"nu0\">2</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">10</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> Th <span class=\"sy6\">=</span> \"nd\"<br/>    <span class=\"sy4\">;</span> <span class=\"nu0\">3</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">10</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> Th <span class=\"sy6\">=</span> \"rd\"<br/>    <span class=\"sy4\">;</span> Th <span class=\"sy6\">=</span> \"th\" <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    string_concat<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Th<span class=\"sy4\">,</span> N_Th<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>tween<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> Tween <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">100</span><span class=\"sy4\">,</span> between<span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy4\">,</span> <span class=\"nu0\">13</span><span class=\"sy4\">,</span> Tween<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>test <span class=\"sy1\">:-</span><br/>    forall<span class=\"br0\">(</span> between<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">25</span><span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span>     <span class=\"br0\">(</span>nth<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> N_Th<span class=\"br0\">)</span><span class=\"sy4\">,</span> format<span class=\"br0\">(</span><span class=\"st_h\">'~w, '</span><span class=\"sy4\">,</span> N_Th<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>    forall<span class=\"br0\">(</span> between<span class=\"br0\">(</span><span class=\"nu0\">250</span><span class=\"sy4\">,</span><span class=\"nu0\">265</span><span class=\"sy4\">,</span>N<span class=\"br0\">)</span><span class=\"sy4\">,</span>   <span class=\"br0\">(</span>nth<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> N_Th<span class=\"br0\">)</span><span class=\"sy4\">,</span> format<span class=\"br0\">(</span><span class=\"st_h\">'~w, '</span><span class=\"sy4\">,</span> N_Th<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>    forall<span class=\"br0\">(</span> between<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"sy4\">,</span><span class=\"nu0\">1025</span><span class=\"sy4\">,</span>N<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">(</span>nth<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> N_Th<span class=\"br0\">)</span><span class=\"sy4\">,</span> format<span class=\"br0\">(</span><span class=\"st_h\">'~w, '</span><span class=\"sy4\">,</span> N_Th<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 8, "block": "<pre class=\"python highlighted_source\">_suffix <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'th'</span><span class=\"sy0\">,</span> <span class=\"st0\">'st'</span><span class=\"sy0\">,</span> <span class=\"st0\">'nd'</span><span class=\"sy0\">,</span> <span class=\"st0\">'rd'</span><span class=\"sy0\">,</span> <span class=\"st0\">'th'</span><span class=\"sy0\">,</span> <span class=\"st0\">'th'</span><span class=\"sy0\">,</span> <span class=\"st0\">'th'</span><span class=\"sy0\">,</span> <span class=\"st0\">'th'</span><span class=\"sy0\">,</span> <span class=\"st0\">'th'</span><span class=\"sy0\">,</span> <span class=\"st0\">'th'</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> nth<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"%i'%s\"</span>\u00a0% <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> _suffix<span class=\"br0\">[</span>n%<span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> n\u00a0% <span class=\"nu0\">100</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span> <span class=\"kw1\">or</span> n\u00a0% <span class=\"nu0\">100</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">20</span> <span class=\"kw1\">else</span> <span class=\"st0\">'th'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1001</span><span class=\"sy0\">,</span> <span class=\"nu0\">250</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>nth<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span>j<span class=\"sy0\">,</span> j+<span class=\"nu0\">25</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 18, "block": "<pre class=\"rsplus highlighted_source\">nth <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a> <span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/return.html\"><span class=\"kw2\">return</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/sapply.html\"><span class=\"kw2\">sapply</span></a><span class=\"br0\">(</span>n, nth<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  mod <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html\"><span class=\"kw2\">function</span></a><span class=\"br0\">(</span>m, n<span class=\"br0\">)</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/ifelse.html\"><span class=\"kw2\">ifelse</span></a><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>m<span class=\"sy0\">%%</span>n<span class=\"br0\">)</span>, n, m<span class=\"sy0\">%%</span>n<span class=\"br0\">)</span><br/>  suffices <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/c.html\"><span class=\"kw2\">c</span></a><span class=\"br0\">(</span><span class=\"st0\">\"th\"</span>, <span class=\"st0\">\"st\"</span>, <span class=\"st0\">\"nd\"</span>, <span class=\"st0\">\"rd\"</span>, <span class=\"st0\">\"th\"</span>, <span class=\"st0\">\"th\"</span>, <span class=\"st0\">\"th\"</span>, <span class=\"st0\">\"th\"</span>, <span class=\"st0\">\"th\"</span>, <span class=\"st0\">\"th\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html\"><span class=\"kw2\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%%</span> <span class=\"nu0\">100</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">%%</span> <span class=\"nu0\">100</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span> <br/>    suffix <span class=\"sy0\">&lt;-</span> suffices<span class=\"br0\">[</span>mod<span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">else</span> <br/>    suffix <span class=\"sy0\">&lt;-</span> <span class=\"st0\">'th'</span><br/>\u00a0<br/>  <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/paste.html\"><span class=\"kw2\">paste</span></a><span class=\"br0\">(</span>n, <span class=\"st0\">\"'\"</span>, suffix, sep<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/range.html\"><span class=\"kw2\">range</span></a> <span class=\"sy0\">&lt;-</span> <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/list.html\"><span class=\"kw2\">list</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">25</span>, <span class=\"nu0\">250</span><span class=\"sy0\">:</span><span class=\"nu0\">275</span>, <span class=\"nu0\">500</span><span class=\"sy0\">:</span><span class=\"nu0\">525</span>, <span class=\"nu0\">750</span><span class=\"sy0\">:</span><span class=\"nu0\">775</span>, <span class=\"nu0\">1000</span><span class=\"sy0\">:</span><span class=\"nu0\">1025</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/sapply.html\"><span class=\"kw2\">sapply</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/range.html\"><span class=\"kw2\">range</span></a>, nth<span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 10, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define (teen? n) (&lt;= 11 (modulo n 100) 19))<br/>(define (Nth n)<br/>  (format<br/>   \"~a'~a\" n<br/>   (match* ((modulo n 10) n)<br/>     [((or 1 2 3) (? teen?)) 'th] [(1 _) 'st] [(2 _) 'nd] [(3 _) 'rd] [(_ _) 'th])))<br/>\u00a0<br/>(for ((range (list  (in-range 26) (in-range 250 266) (in-range 1000 1026))))<br/>  (displayln (string-join (for/list ((nth (sequence-map Nth range))) nth) \" \")))</pre>"}, {"lang": "REXX", "loc": 13, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program shows ranges of numbers  with  ordinal  (st/nd/rd/th)  suffixes attached.*/</span><br/><span class=\"kw1\">call</span> tell     <span class=\"nu0\">0</span>,    <span class=\"nu0\">25</span>                           <span class=\"coMULTI\">/*display the  1st  range of numbers.  */</span><br/><span class=\"kw1\">call</span> tell   <span class=\"nu0\">250</span>,   <span class=\"nu0\">265</span>                           <span class=\"coMULTI\">/*   \"     \"   2nd    \"    \"    \"      */</span><br/><span class=\"kw1\">call</span> tell  <span class=\"nu0\">1000</span>,  <span class=\"nu0\">1025</span>                           <span class=\"coMULTI\">/*   \"     \"   3rd    \"    \"    \"      */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>tell: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> L,H,,$                <span class=\"coMULTI\">/*get the Low and High #s, nullify list*/</span><br/>           <span class=\"kw1\">do</span> j=L  <span class=\"kw2\">to</span>  H;   $=$ th<span class=\"br0\">(</span>j<span class=\"br0\">)</span>;   <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*process the range, from low \u2500\u2500\u2500\u25ba high*/</span><br/>      <span class=\"kw1\">say</span> <span class=\"st0\">'numbers from  '</span>    L    <span class=\"st0\">\" to \"</span>    H    <span class=\"st0\">' (inclusive):'</span>  <span class=\"coMULTI\">/*display the title. */</span><br/>      <span class=\"kw1\">say</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>;    <span class=\"kw1\">say</span>;     <span class=\"kw1\">say</span>                                <span class=\"coMULTI\">/*display line; 2 sep*/</span><br/>      <span class=\"kw1\">return</span>                                                       <span class=\"coMULTI\">/*return to invoker. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>th: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z; x=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span>; <span class=\"kw1\">return</span> z<span class=\"sy0\">||</span><span class=\"kw6\">word</span><span class=\"br0\">(</span><span class=\"st0\">'th st nd rd'</span>,<span class=\"nu0\">1</span>+x<span class=\"sy0\">//</span><span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>x<span class=\"sy0\">//</span><span class=\"nu0\">100</span>%10<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>x<span class=\"sy0\">//</span><span class=\"nu0\">10</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ring", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>for nr = 0 to 25 <br/>    see Nth(nr) + Nth(nr + 250) + Nth(nr + 1000) + nl<br/>next<br/>\u00a0<br/>func getSuffix n<br/>     lastTwo = n\u00a0% 100<br/>     lastOne = n\u00a0% 10<br/>     if lastTwo &gt; 3 and lastTwo &lt; 21  \"th\" ok<br/>     if lastOne = 1 return \"st\" ok<br/>     if lastOne = 2 return \"nd\" ok<br/>     if lastOne = 3 return \"rd\" ok<br/>     return \"th\"<br/>\u00a0<br/>func Nth n<br/>     return  \"\" + n + \"'\" +  getSuffix(n) + \" \"<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 19, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> <span class=\"kw3\">Integer</span><br/>  <span class=\"kw1\">def</span> ordinalize<br/>    num = <span class=\"kw2\">self</span>.<span class=\"me1\">abs</span><br/>    ordinal = <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">11</span>..<span class=\"nu0\">13</span><span class=\"br0\">)</span>.<span class=\"kw1\">include</span>?<span class=\"br0\">(</span>num <span class=\"sy0\">%</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>      <span class=\"st0\">\"th\"</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">case</span> num <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><br/>        <span class=\"kw1\">when</span> <span class=\"nu0\">1</span>; <span class=\"st0\">\"st\"</span><br/>        <span class=\"kw1\">when</span> <span class=\"nu0\">2</span>; <span class=\"st0\">\"nd\"</span><br/>        <span class=\"kw1\">when</span> <span class=\"nu0\">3</span>; <span class=\"st0\">\"rd\"</span><br/>        <span class=\"kw1\">else</span>    <span class=\"st0\">\"th\"</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"st0\">\"#{self}#{ordinal}\"</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">25</span><span class=\"br0\">)</span>,<span class=\"br0\">(</span><span class=\"nu0\">250</span>..<span class=\"nu0\">265</span><span class=\"br0\">)</span>,<span class=\"br0\">(</span><span class=\"nu0\">1000</span>..<span class=\"nu0\">1025</span><span class=\"br0\">)</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>r<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> r.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:ordinalize<span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span>; <span class=\"kw3\">puts</span><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Rust", "loc": 20, "block": "<pre class=\"text highlighted_source\">fn nth(num: isize) -&gt; String {<br/>    format!(\"{}{}\", num, match (num\u00a0% 10, num\u00a0% 100) {<br/>        (1, 11) | (2, 12) | (3, 13) =&gt; \"th\",<br/>        (1, _) =&gt; \"st\",<br/>        (2, _) =&gt; \"nd\",<br/>        (3, _) =&gt; \"rd\",<br/>        _ =&gt; \"th\",<br/>    })<br/>}<br/>\u00a0<br/>fn main() {<br/>    let ranges = [(0, 26), (250, 266), (1000, 1026)];<br/>    for &amp;(s, e) in &amp;ranges {<br/>        println!(\"[{}, {})\u00a0:\", s, e);<br/>        for i in s..e {<br/>            print!(\"{}, \", nth(i));<br/>        }<br/>        println!();<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 20, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Nth <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> abbrevNumber<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> print<span class=\"br0\">(</span>s<span class=\"st0\">\"$i${ordinalAbbrev(i)} \"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> ordinalAbbrev<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ans <span class=\"sy0\">=</span> <span class=\"st0\">\"th\"</span> <span class=\"co1\">//most of the time it should be \"th\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">100</span> / <span class=\"nu0\">10</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> ans <span class=\"co1\">//teens are all \"th\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"st\"</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">2</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"nd\"</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">3</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"rd\"</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> ans<br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">(</span><span class=\"nu0\">0</span> to <span class=\"nu0\">25</span><span class=\"br0\">)</span>.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>abbrevNumber<span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">250</span> to <span class=\"nu0\">265</span><span class=\"br0\">)</span>.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>abbrevNumber<span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">1000</span> to <span class=\"nu0\">1025</span><span class=\"br0\">)</span>.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>abbrevNumber<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 29, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func string: suffix (in integer: num) is func<br/>  result<br/>    var string: suffix is \"\";<br/>  begin<br/>    if    num rem 10 = 1 and num rem 100 &lt;&gt; 11 then suffix\u00a0:= \"st\";<br/>    elsif num rem 10 = 2 and num rem 100 &lt;&gt; 12 then suffix\u00a0:= \"nd\";<br/>    elsif num rem 10 = 3 and num rem 100 &lt;&gt; 13 then suffix\u00a0:= \"rd\";<br/>    else suffix\u00a0:= \"th\";<br/>    end if;<br/>   end func;<br/>\u00a0<br/>const proc: printImages (in integer: start, in integer: stop) is func<br/>  local<br/>    var integer: num is 0;<br/>  begin<br/>    for num range start to stop do<br/>      write(num &lt;&amp; suffix(num) &lt;&amp; \" \");<br/>    end for;<br/>    writeln;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    printImages(   0,   25);<br/>    printImages( 250,  265);<br/>    printImages(1000, 1025);<br/>  end func;</pre>"}, {"lang": "Set lang", "loc": 21, "block": "<pre class=\"text highlighted_source\">set o 49<br/>set t 50<br/>set h 51<br/>set n\u00a0!<br/>set\u00a0! n<br/>set\u00a0! 39<br/>[n=o] set\u00a0? 13<br/>[n=t] set\u00a0? 16<br/>[n=h] set\u00a0? 19<br/>set\u00a0! T<br/>set\u00a0! H<br/>set\u00a0? 21<br/>set\u00a0! S<br/>set\u00a0! T<br/>set\u00a0? 21<br/>set\u00a0! N<br/>set\u00a0! D<br/>set\u00a0? 12<br/>set\u00a0! R<br/>set\u00a0! D<br/>&gt; EOF</pre>"}, {"lang": "Sidef", "loc": 8, "block": "<pre class=\"ruby highlighted_source\">func nth<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    static irregulars = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> \u02e2\u1d57 <span class=\"nu0\">2</span> \u207f\u1d48 <span class=\"nu0\">3</span> \u02b3\u1d48 <span class=\"nu0\">11</span> \u1d57\u02b0 <span class=\"nu0\">12</span> \u1d57\u02b0 <span class=\"nu0\">13</span> \u1d57\u02b0<span class=\"sy0\">&gt;</span>...<span class=\"br0\">)</span><br/>    n.<span class=\"me1\">to_s</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>irregulars<span class=\"br0\">{</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">100</span><span class=\"br0\">}</span> \\\\ irregulars<span class=\"br0\">{</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">}</span> \\\\ <span class=\"st0\">'\u1d57\u02b0'</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">25</span>, <span class=\"nu0\">250</span>..<span class=\"nu0\">265</span>, <span class=\"nu0\">1000</span>..<span class=\"nu0\">1025</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    say r.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> nth<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sinclair ZX81 BASIC", "loc": 24, "block": "<pre class=\"text highlighted_source\"> 10 FOR N=0 TO 25<br/> 20 GOSUB 160<br/> 30 PRINT N$;\" \";<br/> 40 NEXT N<br/> 50 PRINT<br/> 60 FOR N=250 TO 265<br/> 70 GOSUB 160<br/> 80 PRINT N$;\" \";<br/> 90 NEXT N<br/>100 PRINT<br/>110 FOR N=1000 TO 1025<br/>120 GOSUB 160<br/>130 PRINT N$;\" \";<br/>140 NEXT N<br/>150 STOP<br/>160 LET N$=STR$ N<br/>170 LET S$=\"TH\"<br/>180 IF LEN N$=1 THEN GOTO 200<br/>190 IF N$(LEN N$-1)=\"1\" THEN GOTO 230<br/>200 IF N$(LEN N$)=\"1\" THEN LET S$=\"ST\"<br/>210 IF N$(LEN N$)=\"2\" THEN LET S$=\"ND\"<br/>220 IF N$(LEN N$)=\"3\" THEN LET S$=\"RD\"<br/>230 LET N$=N$+S$<br/>240 RETURN</pre>"}, {"lang": "SQL", "loc": 9, "block": "<pre class=\"sql highlighted_source\">\u00a0<br/><span class=\"kw1\">SELECT</span> level card<span class=\"sy0\">,</span><br/>        to_char<span class=\"br0\">(</span>to_date<span class=\"br0\">(</span>level<span class=\"sy0\">,</span><span class=\"st0\">'j'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">'fmjth'</span><span class=\"br0\">)</span> ord<br/><span class=\"kw1\">FROM</span> dual<br/><span class=\"kw1\">CONNECT</span> <span class=\"kw1\">BY</span> level <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">15</span>;<br/>\u00a0<br/><span class=\"kw1\">SELECT</span> to_char<span class=\"br0\">(</span>to_date<span class=\"br0\">(</span><span class=\"nu0\">5373485</span><span class=\"sy0\">,</span><span class=\"st0\">'j'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">'fmjth'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">FROM</span> dual;<br/>\u00a0</pre>"}, {"lang": "Stata", "loc": 18, "block": "<pre class=\"text highlighted_source\">mata<br/>function maps(f,a) {<br/>\tnr = rows(a)<br/>\tnc = cols(a)<br/>\tb = J(nr,nc,\"\")<br/>\tfor (i=1;i&lt;=nr;i++) {<br/>\t\tfor (j=1;j&lt;=nc;j++) b[i,j] = (*f)(a[i,j])<br/>\t}<br/>\treturn(b)<br/>}<br/>\u00a0<br/>function nth(n) {<br/>\tk = max((min((mod(n-1,10)+1,4)),4*(mod(n-10,100)&lt;10)))<br/>\treturn(strofreal(n)+(\"st\",\"nd\",\"rd\",\"th\")[k])<br/>}<br/>\u00a0<br/>maps(&amp;nth(),((0::25),(250::275),(1000::1025)))<br/>end</pre>"}, {"lang": "Swift", "loc": 29, "block": "<pre class=\"text highlighted_source\">func addSuffix(n:Int) -&gt; String {<br/>    if n\u00a0% 100 / 10 == 1 {<br/>        return \"th\"<br/>    }<br/>\u00a0<br/>    switch n\u00a0% 10 {<br/>    case 1:<br/>        return \"st\"<br/>    case 2:<br/>        return \"nd\"<br/>    case 3:<br/>        return \"rd\"<br/>    default:<br/>        return \"th\"<br/>    }<br/>}<br/>\u00a0<br/>for i in 0...25 {<br/>    print(\"\\(i)\\(addSuffix(i)) \")<br/>}<br/>println()<br/>for i in 250...265 {<br/>    print(\"\\(i)\\(addSuffix(i)) \")<br/>}<br/>println()<br/>for i in 1000...1025 {<br/>    print(\"\\(i)\\(addSuffix(i)) \")<br/>}<br/>println()</pre>"}, {"lang": "Tcl", "loc": 15, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> ordinal <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span><span class=\"sy0\">%</span>100<span class=\"sy0\">&lt;</span><span class=\"nu0\">10</span> || <span class=\"re0\">$n</span><span class=\"sy0\">%</span>100<span class=\"sy0\">&gt;</span><span class=\"nu0\">20</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> suff <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"br0\">{</span>th st nd rd th th th th th th<span class=\"br0\">}</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> suff th<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"$n'$suff\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> start <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">250</span> <span class=\"nu0\">1000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"re0\">$start</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> l <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span><span class=\"sy0\">&lt;</span>=<span class=\"re0\">$start</span>+<span class=\"nu0\">25</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> l <span class=\"br0\">[</span>ordinal <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">puts</span> <span class=\"re0\">$l</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "uBasic/4tH", "loc": 35, "block": "<pre class=\"text highlighted_source\">For x = 0 to 25                        ' Test range 0..25<br/>  Push x\u00a0: GoSub _PrintOrdinal<br/>Next x \u00a0: Print<br/>\u00a0<br/>For x = 250 to 265                     ' Test range 250..265<br/>  Push x\u00a0: GoSub _PrintOrdinal<br/>Next x\u00a0: Print<br/>\u00a0<br/>For x = 1000 to 1025                   ' Test range 1000..1025<br/>  Push x\u00a0: GoSub _PrintOrdinal<br/>Next x\u00a0: Print<br/>\u00a0<br/>End                                    ' End test program<br/>                                       ' ( n --)<br/>_PrintOrdinal                          ' Ordinal subroutine<br/>  If Tos() &gt; -1 Then                   ' If within range then<br/>    Print Using \"____#\";Tos();\"'\";     ' Print the number<br/>                                       ' Take care of 11, 12 and 13<br/>    If (Tos()%100 &gt; 10) * (Tos()%100 &lt; 14) Then<br/>       Gosub (Pop() * 0) + 100         ' Clear stack and print \"th\"<br/>       Return                          ' We're done here<br/>    EndIf<br/>\u00a0<br/>    Push Pop()\u00a0% 10                    ' Calculate n mod 10<br/>    GoSub 100 + 10 * ((Tos()&gt;0) + (Tos()&gt;1) + (Tos()&gt;2) - (3 * (Pop()&gt;3)))<br/>  Else                                 ' And decide which ordinal to use<br/>    Print Pop();\" is less than zero\"   ' Otherwise, it is an error<br/>  EndIf<br/>\u00a0<br/>Return<br/>                                       ' Select and print proper ordinal<br/>100 Print \"th\";\u00a0: Return<br/>110 Print \"st\";\u00a0: Return<br/>120 Print \"nd\";\u00a0: Return<br/>130 Print \"rd\";\u00a0: Return</pre>"}, {"lang": "XLISP", "loc": 20, "block": "<pre class=\"text highlighted_source\">(DEFUN NTH (N)<br/>    (COND<br/>        ((AND (&gt; (MOD N 100) 3) (&lt; (MOD N 100) 21)) `(,N TH))<br/>        ((= (MOD N 10) 1) `(,N ST))<br/>        ((= (MOD N 10) 2) `(,N ND))<br/>        ((= (MOD N 10) 3) `(,N RD))<br/>        (T `(,N TH))))<br/>\u00a0<br/>(DEFUN RANGE (X Y)<br/>    (IF (&lt;= X Y)<br/>        (CONS X (RANGE (+ X 1) Y))))<br/>\u00a0<br/>(DEFUN TEST-NTH ()<br/>    (DISPLAY (MAPCAR NTH (RANGE 1 25)))<br/>    (NEWLINE)<br/>    (DISPLAY (MAPCAR NTH (RANGE 250 265)))<br/>    (NEWLINE)<br/>    (DISPLAY (MAPCAR NTH (RANGE 1000 1025))))<br/>\u00a0<br/>(TEST-NTH)</pre>"}, {"lang": "zkl", "loc": 14, "block": "<pre class=\"text highlighted_source\">#if 0<br/>fcn addSuffix(n){<br/>   z:=n.abs()%100;<br/>   if(11&lt;=z&lt;=13) return(String(n,\"th\"));<br/>   z=z%10;<br/>   String(n,(z==1 and \"st\") or (z==2 and \"nd\") or (z==3 and \"rd\") or \"th\");<br/>}<br/>#else<br/>fcn addSuffix(n){<br/>   var suffixes=T(\"th\",\"st\",\"nd\",\"rd\",\"th\",\"th\",\"th\",\"th\",\"th\",\"th\"); //0..10<br/>   z:=n.abs()%100;<br/>   String(n,(z&lt;=10 or z&gt;20) and suffixes[z%10] or \"th\");<br/>}<br/>#endif</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 22, "block": "<pre class=\"text highlighted_source\"> 10 FOR n=0 TO 25<br/> 20 GO SUB 140<br/> 30 PRINT n$;\" \";<br/> 40 NEXT n<br/> 50 FOR n=250 TO 265<br/> 60 GO SUB 140<br/> 70 PRINT n$;\" \";<br/> 80 NEXT n<br/> 90 FOR n=1000 TO 1025<br/>100 GO SUB 140<br/>110 PRINT n$;\" \";<br/>120 NEXT n<br/>130 STOP<br/>140 LET s$=\"th\"<br/>150 LET n$=STR$ n<br/>160 IF LEN n$=1 THEN GO TO 180<br/>170 IF n$(LEN n$-1)=\"1\" THEN GO TO 210<br/>180 IF n$(LEN n$)=\"1\" THEN LET s$=\"st\"<br/>190 IF n$(LEN n$)=\"2\" THEN LET s$=\"nd\"<br/>200 IF n$(LEN n$)=\"3\" THEN LET s$=\"rd\"<br/>210 LET n$=n$+s$<br/>220 RETURN</pre>"}]}