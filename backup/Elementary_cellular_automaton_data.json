{"task": "Elementary_cellular_automaton", "blocks": [{"lang": "AutoHotkey", "loc": 47, "block": "<pre class=\"autohotkey highlighted_source\">state <span class=\"sy0\">:=</span> StrSplit<span class=\"br0\">(</span><span class=\"st0\">\"0000000001000000000\"</span><span class=\"br0\">)</span><br/>rule <span class=\"sy0\">:=</span> <span class=\"nu0\">90</span><br/>output <span class=\"sy0\">:=</span> <span class=\"st0\">\"Rule: \"</span> rule<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">10</span> <span class=\"br0\">{</span><br/>\toutput <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"st0\">\"`t\"</span> PrintState<span class=\"br0\">(</span>state<span class=\"br0\">)</span><br/>\tstate <span class=\"sy0\">:=</span> NextState<span class=\"br0\">(</span>state<span class=\"sy0\">,</span> rule<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Font\"><span class=\"kw7\">Font</span></a><span class=\"sy0\">,,</span> Courier New<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Add\"><span class=\"kw7\">Add</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/GuiControls.htm#Text\"><span class=\"kw8\">Text</span></a><span class=\"sy0\">,,</span>\u00a0% output<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm\"><span class=\"kw3\">Gui</span></a><span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">Show</span></a><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose\"><span class=\"kw7\">GuiClose</span></a>:<br/><a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/>\u00a0<br/><span class=\"co1\">; Returns the next state based on the current state and rule.</span><br/>NextState<span class=\"br0\">(</span>state<span class=\"sy0\">,</span> rule<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tr <span class=\"sy0\">:=</span> ByteDigits<span class=\"br0\">(</span>rule<span class=\"br0\">)</span><br/>\tresult <span class=\"sy0\">:=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\tfor i<span class=\"sy0\">,</span> val in state <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\t\t\t<span class=\"co1\">; The leftmost cell</span><br/>\t\t\tresult<span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span>r<span class=\"br0\">[</span>state<span class=\"br0\">[</span>state<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span> state<span class=\"sy0\">.</span>1 state<span class=\"sy0\">.</span>2<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> state<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\t<span class=\"co1\">; The rightmost cell</span><br/>\t\t\tresult<span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span>r<span class=\"br0\">[</span>state<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> val state<span class=\"sy0\">.</span>1<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">else</span>\t\t\t\t<span class=\"co1\">; All cells between leftmost and rightmost</span><br/>\t\t\tresult<span class=\"sy0\">.</span><span class=\"kw6\">Insert</span><span class=\"br0\">(</span>r<span class=\"br0\">[</span>state<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> val state<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> result<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; Returns an array with each three digit sequence as a key corresponding to a value </span><br/><span class=\"co1\">; of true or false depending on the rule.</span><br/>ByteDigits<span class=\"br0\">(</span>rule<span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>\tres <span class=\"sy0\">:=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\tfor i<span class=\"sy0\">,</span> val in <span class=\"br0\">[</span><span class=\"st0\">\"000\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"001\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"010\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"011\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"100\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"101\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"110\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"111\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t\tres<span class=\"br0\">[</span>val<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>rule<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\trule <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> res<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">; Converts 0 and 1 to . and # respectively and returns a string representing the state</span><br/>PrintState<span class=\"br0\">(</span>state<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tfor i<span class=\"sy0\">,</span> val in state<br/>\t\tresult <span class=\"sy0\">.=</span> val <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>\u00a0? <span class=\"st0\">\"#\"</span>\u00a0: <span class=\"st0\">\".\"</span><br/>\t<span class=\"kw1\">return</span> result<br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 31, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;limits.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> ull<span class=\"sy0\">;</span><br/><span class=\"co2\">#define N  (sizeof(ull) * CHAR_BIT)</span><br/><span class=\"co2\">#define B(x) (1ULL &lt;&lt; (x))</span><br/>\u00a0<br/><span class=\"kw4\">void</span> evolve<span class=\"br0\">(</span>ull state<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> rule<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\tull st<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Rule\u00a0%d:<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> rule<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>\t\tst <span class=\"sy0\">=</span> state<span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> N<span class=\"sy0\">;</span> i<span class=\"sy0\">--;</span> <span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span>st <span class=\"sy0\">&amp;</span> B<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">'#'</span> <span class=\"sy0\">:</span> <span class=\"st0\">'.'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>state <span class=\"sy0\">=</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> N<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>rule <span class=\"sy0\">&amp;</span> B<span class=\"br0\">(</span><span class=\"nu0\">7</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>st<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> st<span class=\"sy0\">&lt;&lt;</span><span class=\"br0\">(</span>N<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\tstate <span class=\"sy0\">|=</span> B<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>st <span class=\"sy0\">!=</span> state<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tevolve<span class=\"br0\">(</span>B<span class=\"br0\">(</span>N<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">90</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tevolve<span class=\"br0\">(</span>B<span class=\"br0\">(</span>N<span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">|</span>B<span class=\"br0\">(</span>N <span class=\"sy0\">-</span> N<span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// well, enjoy the fireworks</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 31, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;bitset&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define SIZE\t           80</span><br/><span class=\"co2\">#define RULE               30</span><br/><span class=\"co2\">#define RULE_TEST(x)       (RULE &amp; 1 &lt;&lt; (7 &amp; (x)))</span><br/>\u00a0<br/><span class=\"kw4\">void</span> evolve<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">bitset</span><span class=\"sy1\">&lt;</span>SIZE<span class=\"sy1\">&gt;</span> <span class=\"sy3\">&amp;</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">bitset</span><span class=\"sy1\">&lt;</span>SIZE<span class=\"sy1\">&gt;</span> t<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    t<span class=\"br0\">[</span>SIZE<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> RULE_TEST<span class=\"br0\">(</span> s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy3\">|</span> s<span class=\"br0\">[</span>SIZE<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy3\">|</span> s<span class=\"br0\">[</span>SIZE<span class=\"sy2\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    t<span class=\"br0\">[</span>     <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> RULE_TEST<span class=\"br0\">(</span> s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy3\">|</span> s<span class=\"br0\">[</span>     <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy3\">|</span> s<span class=\"br0\">[</span>SIZE<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> SIZE<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><br/>\tt<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> RULE_TEST<span class=\"br0\">(</span> s<span class=\"br0\">[</span>i<span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy3\">|</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy3\">|</span> s<span class=\"br0\">[</span>i<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> SIZE<span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">void</span> show<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">bitset</span><span class=\"sy1\">&lt;</span>SIZE<span class=\"sy1\">&gt;</span> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy1\">=</span> SIZE<span class=\"sy4\">;</span> <span class=\"sy2\">--</span>i<span class=\"sy4\">;</span> <span class=\"br0\">)</span> <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%c\"</span>, s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy4\">?</span> <span class=\"st0\">'#'</span> <span class=\"sy4\">:</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">bitset</span><span class=\"sy1\">&lt;</span>SIZE<span class=\"sy1\">&gt;</span> state<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    state <span class=\"sy1\">&lt;&lt;=</span> SIZE <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span> i<span class=\"sy1\">&lt;</span><span class=\"nu0\">10</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tshow<span class=\"br0\">(</span>state<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tevolve<span class=\"br0\">(</span>state<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 94, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">namespace</span> ElementaryCellularAutomaton<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Automata<br/>    <span class=\"br0\">{</span><br/>        BitArray cells, ncells<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> MAX_CELLS <span class=\"sy0\">=</span> <span class=\"nu0\">19</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> run<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            cells <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BitArray<span class=\"br0\">(</span>MAX_CELLS<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            ncells <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BitArray<span class=\"br0\">(</span>MAX_CELLS<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"What Rule do you want to visualize\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                doRule<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">Parse</span><span class=\"br0\">(</span>Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Press any key to continue...\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">byte</span> getCells<span class=\"br0\">(</span><span class=\"kw4\">int</span> index<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">byte</span> b<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> i1 <span class=\"sy0\">=</span> index <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>,<br/>                i2 <span class=\"sy0\">=</span> index,<br/>                i3 <span class=\"sy0\">=</span> index <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i1 <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> i1 <span class=\"sy0\">=</span> MAX_CELLS <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i3 <span class=\"sy0\">&gt;=</span> MAX_CELLS<span class=\"br0\">)</span> i3 <span class=\"sy0\">-=</span> MAX_CELLS<span class=\"sy0\">;</span><br/>\u00a0<br/>            b <span class=\"sy0\">=</span> Convert<span class=\"sy0\">.</span><span class=\"me1\">ToByte</span><span class=\"br0\">(</span><br/>                <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> Convert<span class=\"sy0\">.</span><span class=\"me1\">ToByte</span><span class=\"br0\">(</span>cells<span class=\"sy0\">.</span><span class=\"kw1\">Get</span><span class=\"br0\">(</span>i1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>                <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> Convert<span class=\"sy0\">.</span><span class=\"me1\">ToByte</span><span class=\"br0\">(</span>cells<span class=\"sy0\">.</span><span class=\"kw1\">Get</span><span class=\"br0\">(</span>i2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>                Convert<span class=\"sy0\">.</span><span class=\"me1\">ToByte</span><span class=\"br0\">(</span>cells<span class=\"sy0\">.</span><span class=\"kw1\">Get</span><span class=\"br0\">(</span>i3<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> b<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">string</span> getBase2<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">string</span> s <span class=\"sy0\">=</span> Convert<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span>i, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>s<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span> <span class=\"sy0\">+</span> s<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> s<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> doRule<span class=\"br0\">(</span><span class=\"kw4\">int</span> rule<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">Clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">string</span> rl <span class=\"sy0\">=</span> getBase2<span class=\"br0\">(</span>rule<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            cells<span class=\"sy0\">.</span><span class=\"me1\">SetAll</span><span class=\"br0\">(</span><span class=\"kw1\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            ncells<span class=\"sy0\">.</span><span class=\"me1\">SetAll</span><span class=\"br0\">(</span><span class=\"kw1\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            cells<span class=\"sy0\">.</span><span class=\"kw1\">Set</span><span class=\"br0\">(</span>MAX_CELLS <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, <span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Rule: \"</span> <span class=\"sy0\">+</span> rule <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>----------<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> gen <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> gen <span class=\"sy0\">&lt;</span> <span class=\"nu0\">51</span><span class=\"sy0\">;</span> gen<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"{0, 4}\"</span>, gen <span class=\"sy0\">+</span> <span class=\"st0\">\": \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">bool</span> b <span class=\"kw1\">in</span> cells<span class=\"br0\">)</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span>b <span class=\"sy0\">?</span> <span class=\"st0\">\"#\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw4\">byte</span> b <span class=\"sy0\">=</span> getCells<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    ncells<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span> <span class=\"sy0\">==</span> rl<span class=\"br0\">[</span><span class=\"nu0\">7</span> <span class=\"sy0\">-</span> b<span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"kw1\">true</span> <span class=\"sy0\">:</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">++</span>i <span class=\"sy0\">==</span> MAX_CELLS<span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">bool</span> b <span class=\"kw1\">in</span> ncells<span class=\"br0\">)</span><br/>                    cells<span class=\"br0\">[</span>i<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> b<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Automata t <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Automata<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            t<span class=\"sy0\">.</span><span class=\"me1\">run</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Ceylon", "loc": 86, "block": "<pre class=\"text highlighted_source\">class Rule(number) satisfies Correspondence&lt;Boolean[3], Boolean&gt; {<br/>\u00a0<br/>\tshared Byte number;<br/>\u00a0<br/>\t\"all 3 bit patterns will return a value so this is always true\"<br/>\tshared actual Boolean defines(Boolean[3] key) =&gt; true;<br/>\u00a0<br/>\tshared actual Boolean? get(Boolean[3] key) =&gt; <br/>\t\t\tnumber.get((key[0] then 4 else 0) + (key[1] then 2 else 0) + (key[2] then 1 else 0));<br/>\u00a0<br/>\tfunction binaryString(Integer integer, Integer maxPadding) =&gt;<br/>\t\t\tInteger.format(integer, 2).padLeading(maxPadding, '0');<br/>\u00a0<br/>\tstring =&gt; <br/>\t\t\tlet (digits = binaryString(number.unsigned, 8))<br/>\t\t\t\"Rule #``number``<br/>\t\t\t ``\" | \".join { for (pattern in $111..0) binaryString(pattern, 3) }`` <br/>\t\t\t ``\" | \".join(digits.map((Character element) =&gt; element.string.pad(3)))``\";<br/>}<br/>\u00a0<br/>class ElementaryAutomaton {<br/>\u00a0<br/>\tshared static ElementaryAutomaton|ParseException parse(Rule rule, String cells, Character aliveChar, Character deadChar) {<br/>\t\tif (!cells.every((Character element) =&gt; element == aliveChar || element == deadChar)) {<br/>\t\t\treturn ParseException(\"the string was not a valid automaton\");<br/>\t\t}<br/>\t\treturn ElementaryAutomaton(rule, cells.map((Character element) =&gt; element == aliveChar));<br/>\t}<br/>\u00a0<br/>\tshared Rule rule;<br/>\u00a0<br/>\tArray&lt;Boolean&gt; cells;<br/>\u00a0<br/>\tshared new(Rule rule, {Boolean*} initialCells) {<br/>\t\tthis.rule = rule;<br/>\t\tthis.cells = Array { *initialCells }; <br/>\t}<br/>\u00a0<br/>\tshared Boolean evolve() {<br/>\u00a0<br/>\t\tif (cells.empty) {<br/>\t\t\treturn false;<br/>\t\t}<br/>\u00a0<br/>\t\tfunction left(Integer index) {<br/>\t\t\tassert (exists cell = cells[index - 1] else cells.last);<br/>\t\t\treturn cell;<br/>\t\t}<br/>\u00a0<br/>\t\tfunction right(Integer index) {<br/>\t\t\tassert (exists cell = cells[index + 1] else cells.first);<br/>\t\t\treturn cell;<br/>\t\t}<br/>\u00a0<br/>\t\tvalue newCells = Array.ofSize(cells.size, false);<br/>\t\tfor (index-&gt;cell in cells.indexed) {<br/>\t\t\tvalue neighbourhood = [left(index), cell, right(index)];<br/>\t\t\tassert (exists newCell = rule[neighbourhood]);<br/>\t\t\tnewCells[index] = newCell;<br/>\t\t}<br/>\u00a0<br/>\t\tif (newCells == cells) {<br/>\t\t\treturn false;<br/>\t\t}<br/>\u00a0<br/>\t\tnewCells.copyTo(cells);<br/>\t\treturn true;\t<br/>\t}<br/>\u00a0<br/>\tshared void display(Character aliveChar = '#', Character deadChar = ' ') {<br/>\t\tprint(\"\".join(cells.map((Boolean element) =&gt; element then aliveChar else deadChar)));<br/>\t}<br/>}<br/>\u00a0<br/>shared void run() {<br/>\tvalue rule = Rule(90.byte);<br/>\tprint(rule);<br/>\u00a0<br/>\tvalue automaton = ElementaryAutomaton.parse(rule, \"          #          \", '#', ' ');<br/>\tassert (is ElementaryAutomaton automaton);<br/>\u00a0<br/>\tfor (generation in 0..10) {<br/>\t\tautomaton.display();<br/>\t\tautomaton.evolve();<br/>\t}<br/>}</pre>"}, {"lang": "Common Lisp", "loc": 21, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> automaton <span class=\"br0\">(</span>init rule <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>stop <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>next-gen <span class=\"br0\">(</span>cells<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'new-cell <br/>                     <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span><span class=\"kw1\">last</span> cells<span class=\"br0\">)</span><span class=\"br0\">)</span> cells<span class=\"br0\">)</span><br/>                     cells<br/>                     <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> cells<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> cells<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>           <span class=\"br0\">(</span>new-cell <span class=\"br0\">(</span>left current right<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>shift <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* left <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>* current <span class=\"nu0\">2</span><span class=\"br0\">)</span> right<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">logtest</span> rule <span class=\"br0\">(</span>ash <span class=\"nu0\">1</span> shift<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>           <span class=\"br0\">(</span>pretty-<span class=\"kw1\">print</span> <span class=\"br0\">(</span>cells<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>format T <span class=\"st0\">\"~{~a~}~%\"</span> <br/>                     <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> x<span class=\"br0\">)</span> #\\<span class=\"sy0\">.</span> #\\#<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                             cells<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"br0\">(</span>loop for cells <span class=\"sy0\">=</span> init then <span class=\"br0\">(</span>next-gen cells<span class=\"br0\">)</span><br/>          for i below stop<br/>          <span class=\"kw1\">do</span> <span class=\"br0\">(</span>pretty-<span class=\"kw1\">print</span> cells<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>automaton '<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">90</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 36, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> mod <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> m<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> m<span class=\"br0\">)</span> <span class=\"sy0\">+</span> m<span class=\"br0\">)</span> <span class=\"sy0\">%</span> m<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> ECAwrap <span class=\"br0\">{</span><br/>    <span class=\"kw4\">public</span> <span class=\"kw4\">string</span> front<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">public</span> <span class=\"kw4\">enum</span> <span class=\"kw4\">bool</span> empty <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">immutable</span> <span class=\"kw4\">const</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"kw4\">string</span><span class=\"br0\">]</span> next<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span> cells_<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> rule<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">this</span>.<span class=\"me1\">front</span> <span class=\"sy0\">=</span> cells_<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> ruleBits <span class=\"sy0\">=</span> <span class=\"st0\">\"%08b\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>rule<span class=\"br0\">)</span>.<span class=\"me1\">retro</span>.<span class=\"me1\">text</span><span class=\"sy0\">;</span><br/>        next <span class=\"sy0\">=</span> <span class=\"nu0\">8</span>.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> tuple<span class=\"br0\">(</span><span class=\"st0\">\"%03b\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw4\">char</span><span class=\"br0\">(</span>ruleBits<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">assocArray</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> popFront<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">alias</span> c <span class=\"sy0\">=</span> front<span class=\"sy0\">;</span><br/>        c <span class=\"sy0\">=</span> iota<span class=\"br0\">(</span>c.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> next<span class=\"br0\">[</span><span class=\"br0\">[</span>c<span class=\"br0\">[</span><span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">mod</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> c<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> c<span class=\"br0\">[</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> $<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">text</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> nLines <span class=\"sy0\">=</span> <span class=\"nu0\">50</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">string</span> start <span class=\"sy0\">=</span> <span class=\"st0\">\"0000000001000000000\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> <span class=\"kw4\">uint</span><span class=\"br0\">[</span><span class=\"br0\">]</span> rules <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">90</span><span class=\"sy0\">,</span> <span class=\"nu0\">30</span><span class=\"sy0\">,</span> <span class=\"nu0\">122</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Rules: \"</span><span class=\"sy0\">,</span> rules<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> ecas <span class=\"sy0\">=</span> rules.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>rule <span class=\"sy0\">=&gt;</span> ECAwrap<span class=\"br0\">(</span>start<span class=\"sy0\">,</span> rule<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">nLines</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%2d:\u00a0%-(%s   \u00a0%)\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> ecas.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>eca <span class=\"sy0\">=&gt;</span> eca.<span class=\"me1\">front</span>.<span class=\"me1\">tr</span><span class=\"br0\">(</span><span class=\"st0\">\"01\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\".#\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw2\">ref</span> eca<span class=\"sy0\">;</span> ecas<span class=\"br0\">)</span><br/>            eca.<span class=\"me1\">popFront</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 61, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'types<span class=\"br0\">)</span> <span class=\"co1\">;; int32 vectors</span><br/><span class=\"br0\">(</span>lib 'plot<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>constant BIT0 <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>constant BIT1 <span class=\"br0\">(</span>rgb <span class=\"nu0\">0.8</span> <span class=\"nu0\">0.9</span> <span class=\"nu0\">0.7</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; colored bit 1</span><br/>\u00a0<br/><span class=\"co1\">;; integer to pattern</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span> n<span class=\"sy0\">-&gt;</span>pat n<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">vector</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t#:when <span class=\"br0\">(</span>bitwise<span class=\"sy0\">-</span>bit<span class=\"sy0\">-</span>set? n i<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">vector</span>  <span class=\"br0\">(</span><span class=\"br0\">(</span>j <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">2</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>bitwise<span class=\"sy0\">-</span>bit<span class=\"sy0\">-</span>set? i j<span class=\"br0\">)</span> BIT1  BIT0 <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; test if three pixels match a pattern</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>pmatch a b c pat<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>v pat<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> a <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> v <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"br0\">(</span><span class=\"sy0\">=</span> b <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> v <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"br0\">(</span><span class=\"sy0\">=</span> c <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> v <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; next generation = next row</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>generate x0 width PAT PIX <span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\t\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>dx <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">0</span> width<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> x <span class=\"br0\">(</span><span class=\"sy0\">+</span> x0 dx<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> PIX <span class=\"br0\">(</span><span class=\"sy0\">+</span> x width<span class=\"br0\">)</span> <span class=\"co1\">;; next row</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <br/>\t\t\t<span class=\"br0\">(</span>pmatch <br/>\t\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> PIX <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> dx<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> x0 width<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; let's wrap</span><br/>\t\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> PIX x<span class=\"br0\">)</span>  <br/>\t\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> PIX <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> dx <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> width<span class=\"br0\">)</span><span class=\"br0\">)</span> x0 <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\tPAT<span class=\"br0\">)</span> <br/>\t\t\tBIT1 BIT0<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; n is the pattern, starters in the number of set pixels at generation 0</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>task n <span class=\"br0\">(</span>starters <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> width <span class=\"br0\">(</span>first <span class=\"br0\">(</span>plot<span class=\"sy0\">-</span>size<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> height <span class=\"br0\">(</span>rest <span class=\"br0\">(</span>plot<span class=\"sy0\">-</span>size<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> PAT <span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>pat n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>plot<span class=\"sy0\">-</span>clear<span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> PIX <span class=\"br0\">(</span>pixels<span class=\"sy0\">-&gt;</span>int32<span class=\"sy0\">-</span><span class=\"kw1\">vector</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>init<span class=\"sy0\">-</span>pix  starters  width height PIX<span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>y <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> height<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span>generate <span class=\"br0\">(</span><span class=\"sy0\">*</span> y width<span class=\"br0\">)</span> width PAT into: PIX<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span>vector<span class=\"sy0\">-&gt;</span>pixels PIX<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; put n starters on first row</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>init<span class=\"sy0\">-</span>pix starters width height PIX<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">define</span> dw <span class=\"br0\">(</span><span class=\"kw1\">floor</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> width <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> starters<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range dw width <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> dw<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>\t\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> PIX x BIT1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; usage</span><br/><span class=\"br0\">(</span>task <span class=\"nu0\">99</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">672400</span> <span class=\"co1\">;; ESC to see it</span><br/><span class=\"br0\">(</span>task <span class=\"nu0\">22</span><span class=\"br0\">)</span>   \u2192 <span class=\"nu0\">672400</span><br/>\u00a0<br/><span class=\"co1\">;; check pattern generator</span><br/><span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>pat <span class=\"nu0\">13</span><span class=\"br0\">)</span><br/>    \u2192 #<span class=\"br0\">(</span> #<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> #<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-</span><span class=\"nu0\">5052980</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> #<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"sy0\">-</span><span class=\"nu0\">5052980</span> <span class=\"sy0\">-</span><span class=\"nu0\">5052980</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 27, "block": "<pre class=\"text highlighted_source\">defmodule Elementary_cellular_automaton do<br/>  def run(start_str, rule, times) do<br/>    IO.puts \"rule\u00a0: #{rule}\"<br/>    each(start_str, rule_pattern(rule), times)<br/>  end<br/>\u00a0<br/>  defp rule_pattern(rule) do<br/>    list = Integer.to_string(rule, 2) |&gt; String.pad_leading(8, \"0\")<br/>           |&gt; String.codepoints |&gt; Enum.reverse<br/>    Enum.map(0..7, fn i -&gt; Integer.to_string(i, 2) |&gt; String.pad_leading(3, \"0\") end)<br/>    |&gt; Enum.zip(list) |&gt; Map.new<br/>  end<br/>\u00a0<br/>  defp each(_, _, 0), do:\u00a0:ok<br/>  defp each(str, patterns, times) do<br/>    IO.puts String.replace(str, \"0\", \".\") |&gt; String.replace(\"1\", \"#\")<br/>    str2 = String.last(str) &lt;&gt; str &lt;&gt; String.first(str)<br/>    next_str = Enum.map_join(0..String.length(str)-1, fn i -&gt;<br/>      Map.get(patterns, String.slice(str2, i, 3))<br/>    end)<br/>    each(next_str, patterns, times-1)<br/>  end<br/>end<br/>\u00a0<br/>pad = String.duplicate(\"0\", 14)<br/>str = pad &lt;&gt; \"1\" &lt;&gt; pad<br/>Elementary_cellular_automaton.run(str, 18, 25)</pre>"}, {"lang": "GFA Basic", "loc": 127, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'<br/>' Elementary One-Dimensional Cellular Automaton<br/>'<br/>' World is cyclic, and rules are defined by a parameter<br/>'<br/>' start$=\"01110110101010100100\"\u00a0! start state for world<br/>' rules%=104\u00a0! number defining rule-set to use<br/>start$=\"00000000000000000000100000000000000000000\"<br/>rules%=18<br/>max_cycles%=20\u00a0! give a maximum depth to world<br/>'<br/>' Global variables hold the world, with two rows<br/>' world! is treated as cyclical<br/>' cur% gives the row for current world,<br/>' new% gives the row for the next world.<br/>'<br/>size%=LEN(start$)<br/>DIM world!(size%,2)<br/>cur%=0<br/>new%=1<br/>clock%=0<br/>'<br/>@setup_world(start$)<br/>OPENW 1<br/>CLEARW 1<br/>DO<br/>  @display_world<br/>  @update_world<br/>  EXIT IF @same_state<br/>  clock%=clock%+1<br/>  EXIT IF clock%&gt;max_cycles%\u00a0! safety net<br/>LOOP<br/>~INP(2)<br/>CLOSEW 1<br/>'<br/>' parse given string to set up initial states in world<br/>' -- assumes world! is of correct size<br/>'<br/>PROCEDURE setup_world(defn$)<br/>  LOCAL i%<br/>  ' clear out the array<br/>  ARRAYFILL world!(),FALSE<br/>  ' for each 1 in string, set cell to true<br/>  FOR i%=1 TO LEN(defn$)<br/>    IF MID$(defn$,i%,1)=\"1\"<br/>      world!(i%-1,0)=TRUE<br/>    ENDIF<br/>  NEXT i%<br/>  ' set references to cur and new<br/>  cur%=0<br/>  new%=1<br/>RETURN<br/>'<br/>' Display the world<br/>'<br/>PROCEDURE display_world<br/>  LOCAL i%<br/>  FOR i%=1 TO size%<br/>    IF world!(i%-1,cur%)<br/>      PRINT \"#\";<br/>    ELSE<br/>      PRINT \".\";<br/>    ENDIF<br/>  NEXT i%<br/>  PRINT \"\"<br/>RETURN<br/>'<br/>' Create new version of world<br/>'<br/>PROCEDURE update_world<br/>  LOCAL i%<br/>  FOR i%=1 TO size%<br/>    world!(i%-1,new%)<a class=\"__cf_email__\" data-cfemail=\"6a572a040f1d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>_state(@get_value(i%-1))<br/>  NEXT i%<br/>  ' reverse cur/new<br/>  cur%=1-cur%<br/>  new%=1-new%<br/>RETURN<br/>'<br/>' Test if cur/new states are the same<br/>'<br/>FUNCTION same_state<br/>  LOCAL i%<br/>  FOR i%=1 TO size%<br/>    IF world!(i%-1,cur%)&lt;&gt;world!(i%-1,new%)<br/>      RETURN FALSE<br/>    ENDIF<br/>  NEXT i%<br/>  RETURN TRUE<br/>ENDFUNC<br/>'<br/>' Return new state of cell given value<br/>'<br/>FUNCTION new_state(value%)<br/>  RETURN BTST(rules%,value%)<br/>ENDFUNC<br/>'<br/>' Compute value for cell + neighbours<br/>'<br/>FUNCTION get_value(cell%)<br/>  LOCAL result%<br/>  result%=0<br/>  IF cell%-1&lt;0\u00a0! check for wrapping at left<br/>    IF world!(size%-1,cur%)<br/>      result%=result%+4<br/>    ENDIF<br/>  ELSE\u00a0! no wrapping<br/>    IF world!(cell%-1,cur%)<br/>      result%=result%+4<br/>    ENDIF<br/>  ENDIF<br/>  IF world!(cell%,cur%)<br/>    result%=result%+2<br/>  ENDIF<br/>  IF cell%+1&gt;size%\u00a0! check for wrapping at right<br/>    IF world!(0,cur%)<br/>      result%=result%+1<br/>    ENDIF<br/>  ELSE\u00a0! no wrapping<br/>    IF world!(cell%+1,cur%)<br/>      result%=result%+1<br/>    ENDIF<br/>  ENDIF<br/>  RETURN result%<br/>ENDFUNC<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 45, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/big\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">const</span> cells <span class=\"sy2\">=</span> <span class=\"nu0\">20</span><br/>    <span class=\"kw1\">const</span> generations <span class=\"sy2\">=</span> <span class=\"nu0\">9</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Single 1, rule 90:\"</span><span class=\"sy1\">)</span><br/>    a <span class=\"sy2\">:=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    a<span class=\"sy3\">.</span>Lsh<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> cells<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>    elem<span class=\"sy1\">(</span><span class=\"nu0\">90</span><span class=\"sy1\">,</span> cells<span class=\"sy1\">,</span> generations<span class=\"sy1\">,</span> a<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Random intial state, rule 30:\"</span><span class=\"sy1\">)</span><br/>    a <span class=\"sy2\">=</span> big<span class=\"sy3\">.</span>NewInt<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    a<span class=\"sy3\">.</span>Rand<span class=\"sy1\">(</span>rand<span class=\"sy3\">.</span>New<span class=\"sy1\">(</span>rand<span class=\"sy3\">.</span>NewSource<span class=\"sy1\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">)),</span> a<span class=\"sy3\">.</span>Lsh<span class=\"sy1\">(</span>a<span class=\"sy1\">,</span> cells<span class=\"sy1\">))</span><br/>    elem<span class=\"sy1\">(</span><span class=\"nu0\">30</span><span class=\"sy1\">,</span> cells<span class=\"sy1\">,</span> generations<span class=\"sy1\">,</span> a<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> elem<span class=\"sy1\">(</span>rule <span class=\"kw4\">uint</span><span class=\"sy1\">,</span> cells<span class=\"sy1\">,</span> generations <span class=\"kw4\">int</span><span class=\"sy1\">,</span> a <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    output <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>strings<span class=\"sy3\">.</span>Replace<span class=\"sy1\">(</span>strings<span class=\"sy3\">.</span>Replace<span class=\"sy1\">(</span><br/>            fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"%0*b\"</span><span class=\"sy1\">,</span> cells<span class=\"sy1\">,</span> a<span class=\"sy1\">),</span> <span class=\"st0\">\"0\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">),</span> <span class=\"st0\">\"1\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"#\"</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    output<span class=\"sy1\">()</span><br/>    a1 <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span><a href=\"http://golang.org/search?q=big.Int\"><span class=\"kw5\">big.<span class=\"me1\">Int</span></span></a><span class=\"sy1\">)</span><br/>    set <span class=\"sy2\">:=</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>cell <span class=\"kw4\">int</span><span class=\"sy1\">,</span> k <span class=\"kw4\">uint</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        a1<span class=\"sy3\">.</span>SetBit<span class=\"sy1\">(</span>a1<span class=\"sy1\">,</span> cell<span class=\"sy1\">,</span> rule&gt;&gt;k&amp;<span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    last <span class=\"sy2\">:=</span> cells <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> r <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> r &lt; generations<span class=\"sy1\">;</span> r<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        k <span class=\"sy2\">:=</span> a<span class=\"sy3\">.</span>Bit<span class=\"sy1\">(</span>last<span class=\"sy1\">)</span> <span class=\"sy3\">|</span> a<span class=\"sy3\">.</span>Bit<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span>&lt;&lt;<span class=\"nu0\">1</span> <span class=\"sy3\">|</span> a<span class=\"sy3\">.</span>Bit<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span>&lt;&lt;<span class=\"nu0\">2</span><br/>        set<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> k<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> c &lt; last<span class=\"sy1\">;</span> c<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            k <span class=\"sy2\">=</span> k&gt;&gt;<span class=\"nu0\">1</span> <span class=\"sy3\">|</span> a<span class=\"sy3\">.</span>Bit<span class=\"sy1\">(</span>c<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span>&lt;&lt;<span class=\"nu0\">2</span><br/>            set<span class=\"sy1\">(</span>c<span class=\"sy1\">,</span> k<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        set<span class=\"sy1\">(</span>last<span class=\"sy1\">,</span> k&gt;&gt;<span class=\"nu0\">1</span><span class=\"sy3\">|</span>a<span class=\"sy3\">.</span>Bit<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span>&lt;&lt;<span class=\"nu0\">2</span><span class=\"sy1\">)</span><br/>        a<span class=\"sy1\">,</span> a1 <span class=\"sy2\">=</span> a1<span class=\"sy1\">,</span> a<br/>        output<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 9, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array <span class=\"br0\">(</span>listArray<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> bounds<span class=\"sy0\">,</span> elems<span class=\"br0\">)</span><br/>\u00a0<br/>step rule a <span class=\"sy0\">=</span> listArray <span class=\"br0\">(</span>l<span class=\"sy0\">,</span>r<span class=\"br0\">)</span> res<br/>  <span class=\"kw1\">where</span> <span class=\"br0\">(</span>l<span class=\"sy0\">,</span>r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> bounds a<br/>        res <span class=\"sy0\">=</span> <span class=\"br0\">[</span>rule <span class=\"br0\">(</span>a<span class=\"sy0\">!</span>r<span class=\"br0\">)</span>     <span class=\"br0\">(</span>a<span class=\"sy0\">!</span>l<span class=\"br0\">)</span> <span class=\"br0\">(</span>a<span class=\"sy0\">!</span><span class=\"br0\">(</span>l<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"sy0\">++</span><br/>              <span class=\"br0\">[</span>rule <span class=\"br0\">(</span>a<span class=\"sy0\">!</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>a<span class=\"sy0\">!</span>i<span class=\"br0\">)</span> <span class=\"br0\">(</span>a<span class=\"sy0\">!</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> i <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span>l<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>r<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span> <span class=\"sy0\">++</span><br/>              <span class=\"br0\">[</span>rule <span class=\"br0\">(</span>a<span class=\"sy0\">!</span><span class=\"br0\">(</span>r<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>a<span class=\"sy0\">!</span>r<span class=\"br0\">)</span> <span class=\"br0\">(</span>a<span class=\"sy0\">!</span>l<span class=\"br0\">)</span>     <span class=\"br0\">]</span><br/>\u00a0<br/>runCA rule <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> <span class=\"br0\">(</span>step rule<span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 11, "block": "<pre class=\"j highlighted_source\">   next=: <span class=\"sy0\">((</span><span class=\"nu0\">8</span>$<span class=\"nu0\">2</span><span class=\"sy0\">)</span> #: [<span class=\"sy0\">)</span> {~ <span class=\"nu0\">2</span> #. <span class=\"nu0\">1</span> - [: |: |.~\"<span class=\"nu0\">1</span> <span class=\"nu0\">0</span>&amp;<span class=\"nu0\">_1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span>@]<br/>   <span class=\"st_h\">' *'</span>{~<span class=\"nu0\">90</span> next^:<span class=\"sy0\">(</span>i.<span class=\"nu0\">9</span><span class=\"sy0\">)</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/>      *     <br/>     * *    <br/>    *   *   <br/>   * * * *  <br/>  *       * <br/> * *     * *<br/>    *   *   <br/>   * * * *  <br/>  *       * </pre>"}, {"lang": "Java", "loc": 83, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.event.ActionEvent</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.swing.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.swing.Timer</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> WolframCA <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajpanel+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JPanel</span></a> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> ruleSet <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">30</span>, <span class=\"nu0\">45</span>, <span class=\"nu0\">50</span>, <span class=\"nu0\">57</span>, <span class=\"nu0\">62</span>, <span class=\"nu0\">70</span>, <span class=\"nu0\">73</span>, <span class=\"nu0\">75</span>, <span class=\"nu0\">86</span>, <span class=\"nu0\">89</span>, <span class=\"nu0\">90</span>, <span class=\"nu0\">99</span>,<br/>        <span class=\"nu0\">101</span>, <span class=\"nu0\">105</span>, <span class=\"nu0\">109</span>, <span class=\"nu0\">110</span>, <span class=\"nu0\">124</span>, <span class=\"nu0\">129</span>, <span class=\"nu0\">133</span>, <span class=\"nu0\">135</span>, <span class=\"nu0\">137</span>, <span class=\"nu0\">139</span>, <span class=\"nu0\">141</span>, <span class=\"nu0\">164</span>,<span class=\"nu0\">170</span>, <span class=\"nu0\">232</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> cells<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> rule <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> WolframCA<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adimension+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Dimension</span></a> dim <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adimension+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Dimension</span></a><span class=\"br0\">(</span><span class=\"nu0\">900</span>, <span class=\"nu0\">450</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setPreferredSize<span class=\"br0\">(</span>dim<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setBackground<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">white</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setFont<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afont+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Font</span></a><span class=\"br0\">(</span><span class=\"st0\">\"SansSerif\"</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afont+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Font</span></a>.<span class=\"me1\">BOLD</span>, <span class=\"nu0\">28</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        cells <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">byte</span><span class=\"br0\">[</span>dim.<span class=\"me1\">height</span><span class=\"br0\">]</span><span class=\"br0\">[</span>dim.<span class=\"me1\">width</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        cells<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>dim.<span class=\"me1\">width</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Atimer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Timer</span></a><span class=\"br0\">(</span><span class=\"nu0\">5000</span>, <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aactionevent+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">ActionEvent</span></a> e<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>            rule<span class=\"sy0\">++;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rule <span class=\"sy0\">==</span> ruleSet.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>                rule <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">byte</span> rules<span class=\"br0\">(</span><span class=\"kw4\">int</span> lhs, <span class=\"kw4\">int</span> mid, <span class=\"kw4\">int</span> rhs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> idx <span class=\"sy0\">=</span> <span class=\"br0\">(</span>lhs <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">|</span> mid <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">|</span> rhs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>ruleSet<span class=\"br0\">[</span>rule<span class=\"br0\">]</span> <span class=\"sy0\">&gt;&gt;</span> idx <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> drawCa<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">black</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> cells.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> cells<span class=\"br0\">[</span>r<span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">byte</span> lhs <span class=\"sy0\">=</span> cells<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">byte</span> mid <span class=\"sy0\">=</span> cells<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">byte</span> rhs <span class=\"sy0\">=</span> cells<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                cells<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> rules<span class=\"br0\">(</span>lhs, mid, rhs<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// next generation</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cells<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    g.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span>c, r, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> drawLegend<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> s <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>ruleSet<span class=\"br0\">[</span>rule<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> sw <span class=\"sy0\">=</span> g.<span class=\"me1\">getFontMetrics</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">stringWidth</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">white</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span><span class=\"nu0\">16</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">55</span>, <span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">darkGray</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">drawString</span><span class=\"br0\">(</span>s, <span class=\"nu0\">16</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">55</span> <span class=\"sy0\">-</span> sw<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, <span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> paintComponent<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics</span></a> gg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">super</span>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a><span class=\"br0\">)</span> gg<span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arenderinghints+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RenderingHints</span></a>.<span class=\"me1\">KEY_ANTIALIASING</span>,<br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arenderinghints+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RenderingHints</span></a>.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        drawCa<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        drawLegend<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aswingutilities+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">SwingUtilities</span></a>.<span class=\"me1\">invokeLater</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a> f <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setDefaultCloseOperation</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a>.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setTitle</span><span class=\"br0\">(</span><span class=\"st0\">\"Wolfram CA\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setResizable</span><span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> WolframCA<span class=\"br0\">(</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aborderlayout+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BorderLayout</span></a>.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">pack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setLocationRelativeTo</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setVisible</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 27, "block": "<pre class=\"text highlighted_source\"># The ordinal value of the relevant states:<br/>def states:<br/>  {\"111\": 1, \"110\": 2, \"101\": 3, \"100\": 4, \"011\": 5, \"010\": 6, \"001\": 7, \"000\": 8};<br/>\u00a0<br/># Compute the next \"state\"<br/># input: a state (\"111\" or \"110\" ...)<br/># rule: the rule represented as a string of 0s and 1s <br/># output: the next state \"0\" or \"1\" depending on the rule<br/>def next(rule):<br/>  states[.] as $n | rule[($n-1):$n]\u00a0;<br/>\u00a0<br/># The state of cell $n, using 0-based indexing<br/>def triple($n):<br/>  if $n == 0 then .[-1:] + .[0:2]<br/>  elif $n == (length-1) then .[-2:] + .[0:1]<br/>  else .[$n-1:$n+2]<br/>  end;<br/>\u00a0<br/># input: non-negative decimal integer<br/># output: 0-1 binary string<br/>def binary_digits:<br/>  if . == 0 then \"0\"<br/>  else [recurse( if . == 0 then empty else ./2 | floor end )\u00a0% 2 | tostring]<br/>    | reverse<br/>    | .[1:] # remove the leading 0<br/>    | join(\"\")<br/>  end\u00a0;</pre>"}, {"lang": "Kotlin", "loc": 38, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.51</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">BitSet</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> SIZE  <span class=\"sy0\">=</span> <span class=\"nu0\">32</span><br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> LINES <span class=\"sy0\">=</span> SIZE / <span class=\"nu0\">2</span><br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> RULE  <span class=\"sy0\">=</span> <span class=\"nu0\">90</span><br/>\u00a0<br/>fun ruleTest<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>RULE and <span class=\"br0\">(</span><span class=\"nu0\">1</span> shl <span class=\"br0\">(</span><span class=\"nu0\">7</span> and x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>infix fun Boolean.<span class=\"me1\">shl</span><span class=\"br0\">(</span>bitCount<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">0</span><span class=\"br0\">)</span> shl bitCount<br/>\u00a0<br/>fun Boolean.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">0</span><br/>\u00a0<br/>fun evolve<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> BitSet<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> t <span class=\"sy0\">=</span> BitSet<span class=\"br0\">(</span>SIZE<span class=\"br0\">)</span>  <span class=\"co1\">// all false by default</span><br/>    t<span class=\"br0\">[</span>SIZE - <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> ruleTest<span class=\"br0\">(</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> shl <span class=\"nu0\">2</span><span class=\"br0\">)</span> or <span class=\"br0\">(</span>s<span class=\"br0\">[</span>SIZE - <span class=\"nu0\">1</span><span class=\"br0\">]</span> shl <span class=\"nu0\">1</span><span class=\"br0\">)</span> or s<span class=\"br0\">[</span>SIZE - <span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> ruleTest<span class=\"br0\">(</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> shl <span class=\"nu0\">2</span><span class=\"br0\">)</span> or <span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> shl <span class=\"nu0\">1</span><span class=\"br0\">)</span> or s<span class=\"br0\">[</span>SIZE - <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span> until SIZE - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        t<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> ruleTest<span class=\"br0\">(</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>i + <span class=\"nu0\">1</span><span class=\"br0\">]</span> shl <span class=\"nu0\">2</span><span class=\"br0\">)</span> or <span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> shl <span class=\"nu0\">1</span><span class=\"br0\">)</span> or s<span class=\"br0\">[</span>i - <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until SIZE<span class=\"br0\">)</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun show<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> BitSet<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in SIZE - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"st0\">\"*\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> state <span class=\"sy0\">=</span> BitSet<span class=\"br0\">(</span>SIZE<span class=\"br0\">)</span><br/>    state.<span class=\"me1\">set</span><span class=\"br0\">(</span>LINES<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Rule $RULE:\"</span><span class=\"br0\">)</span><br/>    repeat<span class=\"br0\">(</span>LINES<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        show<span class=\"br0\">(</span>state<span class=\"br0\">)</span><br/>        evolve<span class=\"br0\">(</span>state<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>ArrayPlot[CellularAutomaton[30, {0, 0, 0, 0, 1, 0, 0, 0}, 100]]<br/>\u00a0</pre>"}, {"lang": "MATLAB", "loc": 5, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> init = cellularAutomaton<span class=\"br0\">(</span>rule, init, n<span class=\"br0\">)</span><br/>  init<span class=\"br0\">(</span>n + <span class=\"nu0\">1</span>,\u00a0:<span class=\"br0\">)</span> = <span class=\"nu0\">0</span>;<br/>  <span class=\"kw1\">for</span> k = <span class=\"nu0\">1</span>\u00a0: n<br/>    init<span class=\"br0\">(</span>k + <span class=\"nu0\">1</span>,\u00a0:<span class=\"br0\">)</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/bitget.html\"><span class=\"kw2\">bitget</span></a><span class=\"br0\">(</span>rule, <span class=\"nu0\">1</span> + <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/filter2.html\"><span class=\"kw2\">filter2</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">4</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>, init<span class=\"br0\">(</span>k,\u00a0:<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">end</span></pre>"}, {"lang": "Perl", "loc": 36, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Automaton <span class=\"br0\">{</span><br/>    <span class=\"kw2\">sub</span> <span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$class</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$rule</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"sy0\">//,</span> <a href=\"http://perldoc.perl.org/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a> <span class=\"st0\">\"%08b\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">{</span> rule <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$rule</span><span class=\"sy0\">,</span> cells <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span> <span class=\"co5\">@_</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">$class</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">sub</span> <span class=\"kw1\">next</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$this</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@previous</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>cells<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>cells<span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>\t    <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>rule<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">[</span><br/>\t    <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span><br/>\t      <span class=\"nu0\">4</span><span class=\"re0\">*$previous</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"co5\">$_</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">@previous</span><span class=\"br0\">]</span><br/>\t    <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"re0\">*$previous</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><br/>\t    <span class=\"sy0\">+</span>   <span class=\"re0\">$previous</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"co5\">$_</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"re0\">@previous</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">@previous</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t    <span class=\"br0\">]</span><br/>\t<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$this</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">use</span> overload<br/>    <a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">{</span><span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$this</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"co5\">$_</span> <span class=\"sy0\">?</span> <span class=\"st_h\">'#'</span> <span class=\"sy0\">:</span> <span class=\"st_h\">' '</span> <span class=\"br0\">}</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>cells<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@a</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">91</span><span class=\"sy0\">;</span> <span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"nu0\">45</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> Automaton<span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"nu0\">90</span><span class=\"sy0\">,</span> <span class=\"re0\">@a</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">40</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"|$a|<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span> <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"kw1\">next</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 25, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> Automaton <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"kw2\">rule</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">@</span><span class=\"sy0\">.</span><span class=\"me1\">cells</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">@</span><span class=\"sy0\">.</span><span class=\"me1\">code</span> <span class=\"sy0\">=</span> $<span class=\"sy0\">!</span><span class=\"kw2\">rule</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st_h\">'%08b'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">flip</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">Int</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> gist <span class=\"br0\">{</span> <span class=\"st0\">\"|{ @!cells.map({+$_\u00a0?? '#'\u00a0!! ' '}).join }|\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> <span class=\"kw3\">succ</span> <span class=\"br0\">{</span><br/>        self<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">:</span> <span class=\"sy0\">:</span>$<span class=\"sy0\">!</span><span class=\"kw2\">rule</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">@!code</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>cells<span class=\"br0\">(</span> <br/>            <span class=\"re0\">@!code</span><span class=\"br0\">[</span><br/>                    <span class=\"nu0\">4</span> \u00ab<span class=\"sy0\">*</span>\u00ab\u00a0<span class=\"re0\">@!cells</span><span class=\"sy0\">.</span><span class=\"kw3\">rotate</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>               \u00a0\u00bb<span class=\"sy0\">+</span>\u00ab\u00a0<span class=\"nu0\">2</span> \u00ab<span class=\"sy0\">*</span>\u00ab\u00a0<span class=\"re0\">@!cells</span><br/>               \u00a0\u00bb<span class=\"sy0\">+</span>\u00ab\u00a0      <span class=\"re0\">@!cells</span><span class=\"sy0\">.</span><span class=\"kw3\">rotate</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">]</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@padding</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> Automaton <span class=\"re0\">$a</span> <span class=\"sy0\">.=</span> <span class=\"kw2\">new</span><span class=\"sy0\">:</span><br/>    <span class=\"sy0\">:</span><span class=\"kw2\">rule</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"sy0\">:</span>cells<span class=\"br0\">(</span>flat <span class=\"re0\">@padding</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">@padding</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"re0\">$a</span><span class=\"sy0\">++</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 16, "block": "<pre class=\"text highlighted_source\">string s = \".........#.........\", t=s, r = \"........\"<br/>integer rule = 90, k, l = length(s)<br/>for i=1 to 8 do<br/>    r[i] = iff(mod(rule,2)?'#':'.')<br/>    rule = floor(rule/2)<br/>end for<br/>for i=0 to 50 do<br/>   \u00a0?s<br/>    for j=1 to l do<br/>        k = (s[iff(j=1?l:j-1)]='#')*4<br/>          + (s[          j   ]='#')*2<br/>          + (s[iff(j=l?1:j+1)]='#')+1<br/>        t[j] = r[k]<br/>    end for<br/>    s = t<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 28, "block": "<pre class=\"text highlighted_source\">(de dictionary (N)<br/>   (extract<br/>      '((A B)<br/>         (and<br/>            (= \"1\" B)<br/>            (mapcar<br/>               '((L) (if (= \"1\" L) \"#\" \".\"))<br/>               A ) ) )<br/>      (mapcar<br/>         '((N) (chop (pad 3 (bin N))))<br/>         (range 7 0) )<br/>      (chop (pad 8 (bin N))) ) )<br/>(de cellular (Lst N)<br/>   (let (Lst (chop Lst)  D (dictionary N))<br/>      (do 10<br/>         (prinl Lst)<br/>         (setq Lst<br/>            (make<br/>               (map<br/>                  '((L)<br/>                     (let Y (head 3 L)<br/>                        (and<br/>                           (cddr Y)<br/>                           (link (if (member Y D) \"#\" \".\")) ) ) )<br/>                  (conc (cons (last Lst)) Lst (cons (car Lst))) ) ) ) ) ) )<br/>(cellular<br/>   \".........#.........\"<br/>   90 )</pre>"}, {"lang": "Python", "loc": 21, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> eca<span class=\"br0\">(</span>cells<span class=\"sy0\">,</span> rule<span class=\"br0\">)</span>:<br/>    lencells <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>cells<span class=\"br0\">)</span><br/>    c <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span> + cells + <span class=\"st0\">\"0\"</span>    <span class=\"co1\"># Zero pad the ends</span><br/>    rulebits <span class=\"sy0\">=</span> <span class=\"st0\">'{0:08b}'</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>rule<span class=\"br0\">)</span><br/>    neighbours2next <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">'{0:03b}'</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>:rulebits<span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">yield</span> c<span class=\"br0\">[</span><span class=\"nu0\">1</span>:-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        c <span class=\"sy0\">=</span> <span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">'0'</span><span class=\"sy0\">,</span><br/>                     <span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>neighbours2next<span class=\"br0\">[</span>c<span class=\"br0\">[</span>i-<span class=\"nu0\">1</span>:i+<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>                             <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>lencells+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                     <span class=\"st0\">'0'</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">yield</span> c<span class=\"br0\">[</span><span class=\"nu0\">1</span>:-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    lines<span class=\"sy0\">,</span> start<span class=\"sy0\">,</span> rules <span class=\"sy0\">=</span> <span class=\"nu0\">50</span><span class=\"sy0\">,</span> <span class=\"st0\">'0000000001000000000'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">90</span><span class=\"sy0\">,</span> <span class=\"nu0\">30</span><span class=\"sy0\">,</span> <span class=\"nu0\">122</span><span class=\"br0\">)</span><br/>    zipped <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">range</span><span class=\"br0\">(</span>lines<span class=\"br0\">)</span><span class=\"br0\">]</span> + <span class=\"br0\">[</span>eca<span class=\"br0\">(</span>start<span class=\"sy0\">,</span> rule<span class=\"br0\">)</span> <span class=\"kw1\">for</span> rule <span class=\"kw1\">in</span> rules<span class=\"br0\">]</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>   Rules:\u00a0%r'</span>\u00a0% <span class=\"br0\">(</span>rules<span class=\"sy0\">,</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> data <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>*zipped<span class=\"br0\">)</span>:<br/>        i <span class=\"sy0\">=</span> data<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        cells <span class=\"sy0\">=</span> data<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%2i:\u00a0%s'</span>\u00a0% <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"st0\">'    '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>cells<span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"sy0\">,</span> <span class=\"st0\">'.'</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">'1'</span><span class=\"sy0\">,</span> <span class=\"st0\">'#'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 86, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require racket/fixnum)<br/>(provide usable-bits/fixnum usable-bits/fixnum-1 CA-next-generation<br/>         wrap-rule-truncate-left-word show-automaton)<br/>\u00a0<br/>(define usable-bits/fixnum 30)<br/>(define usable-bits/fixnum-1 (sub1 usable-bits/fixnum))<br/>(define usable-bits/mask (fx- (fxlshift 1 usable-bits/fixnum) 1))<br/>(define 2^u-b-1 (fxlshift 1 usable-bits/fixnum-1))<br/>(define (fxior3 a b c) (fxior (fxior a b) c))<br/>(define (if-bit-set n i [result 1]) (if (bitwise-bit-set? n i) result 0))<br/>\u00a0<br/>(define (shift-right-1-bit-with-lsb-L L n)<br/>  (fxior (if-bit-set L 0 2^u-b-1) (fxrshift n 1)))<br/>\u00a0<br/>(define (shift-left-1-bit-with-msb-R n R)<br/>  (fxior (fxand usable-bits/mask (fxlshift n 1))<br/>         (if-bit-set R usable-bits/fixnum-1)))<br/>\u00a0<br/>(define ((CA-next-bit-state rule) L n R)<br/>  (for/fold ([n+ 0])<br/>            ([b (in-range usable-bits/fixnum-1 -1 -1)])<br/>    (define rule-bit (fxior3 (if-bit-set (shift-right-1-bit-with-lsb-L L n) b 4)<br/>                             (if-bit-set n b 2)<br/>                             (if-bit-set (shift-left-1-bit-with-msb-R n R) b)))<br/>    (fxior (fxlshift n+ 1) (if-bit-set rule rule-bit))))<br/>\u00a0<br/>;; CA-next-generation generates a function which takes:<br/>;;  v-in  \u00a0: an fxvector representing the CA's current state as a bit field. This may be mutated<br/>;;  offset\u00a0: the offset of the leftmost element of v-in; this is used in infinite CA to allow the CA<br/>;;           to occupy negative indices<br/>;;  wrap-rule\u00a0: provided for automata that are not an integer number of usable-bits/fixnum bits wide<br/>;;  wrap-rule = #f - v-in and offset are unchanged<br/>;;  wrap-rule\u00a0: (v-in vl-1 offset) -&gt; (values v-out vl-1+ offset-)<br/>;;             v-in as passed into CA-next-generation<br/>;;             vl-1=(sub1 (length v-in)), since its precomputed vaule is needed<br/>;;             offset as passed into CA-next-generation<br/>;;             v-out: either a new copy of v-in, or v-in itself (which might be mutated)<br/>;;             vl-1+: (sub1 (length v-out))<br/>;;             offset-\u00a0: a new value for offset (it will have decreased since the CA grows to the left<br/>;;             with offset, and to the right with (length v-out)<br/>(define (CA-next-generation rule #:wrap-rule (wrap-rule values))<br/>  (define next-state (CA-next-bit-state rule))<br/>  (lambda (v-in offset)<br/>    (define vl-1 (fx- (fxvector-length v-in) 1))<br/>    (define-values [v+ v+l-1 offset-] (wrap-rule v-in vl-1 offset))<br/>    (define rv<br/>      (for/fxvector ([l (in-sequences (in-value (fxvector-ref v+ v+l-1)) (in-fxvector v+))]<br/>                     [n (in-fxvector v+)]<br/>                     [r (in-sequences (in-fxvector v+ 1) (in-value (fxvector-ref v+ 0)))])<br/>        (next-state l n r)))<br/>    (values rv offset-)))<br/>\u00a0<br/>;; CA-next-generation with the default (non) wrap rule wraps the MSB of the left-hand word (L) and the<br/>;; LSB of the right-hand word (R) in the CA. If the CA is not a multiple of usable-bits/fixnum wide,<br/>;; then we use this function to put these bits where they can be used... i.e. the actual MSB is copied<br/>;; to the word's MSB and the LSB is copied to the bit that is to the left of the actual MSB.<br/>(define (wrap-rule-truncate-left-word sig-bits)<br/>  (define wlb-mask (fx- (fxlshift 1 sig-bits) 1))<br/>  (unless (fx&lt; sig-bits (fx- usable-bits/fixnum 1))<br/>    (error \"we need at least 2 bits in the top of the word to do this safely\"))<br/>  (lambda (v-in vl-1 offset)<br/>    (define v0 (fxvector-ref v-in 0))<br/>   \u00a0;; this must wrap to wlb of the first word<br/>    (define last-bit (fxlshift (fxand 1 (fxvector-ref v-in vl-1)) sig-bits))<br/>   \u00a0;; this must wrap to the extreme left of the first word<br/>    (define first-bit (if-bit-set v0 (fx- sig-bits 1) 2^u-b-1))<br/>    (fxvector-set! v-in 0 (fxior3 last-bit first-bit (fxand v0 wlb-mask)))<br/>    (values v-in vl-1 offset)))<br/>\u00a0<br/>;; This displays a state of the CA<br/>(define (show-automaton v #:step (step #f) #:sig-bits (sig-bits #f) #:push-right (push-right #f))<br/>  (when step (printf \"[~a] \" (~a #:align 'right #:width 10 step)))<br/>  (when push-right (display (make-string (* usable-bits/fixnum push-right) #\\.)))<br/>  (when (number? sig-bits)<br/>    (display (~a #:width sig-bits #:align 'right #:pad-string \"0\"<br/>                 (number-&gt;string (fxvector-ref v 0) 2))))<br/>  (for ([n (in-fxvector v (if sig-bits 1 0))])<br/>    (display (~a #:width usable-bits/fixnum #:align 'right #:pad-string \"0\" (number-&gt;string n 2)))))<br/>\u00a0<br/>(module+ main<br/>  (define ng/122/19-bits (CA-next-generation 122 #:wrap-rule (wrap-rule-truncate-left-word 19)))<br/>  (for/fold ([v (fxvector #b1000000000)] [o 0]) ([step (in-range 40)])<br/>    (show-automaton v #:step step #:sig-bits 19)<br/>    (newline)<br/>    (ng/122/19-bits v o)))</pre>"}, {"lang": "Ruby", "loc": 22, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> ElemCellAutomat<br/>  <span class=\"kw1\">include</span> <span class=\"kw4\">Enumerable</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> initialize <span class=\"br0\">(</span>start_str, rule, disp=<span class=\"kw2\">false</span><span class=\"br0\">)</span><br/>    <span class=\"re1\">@cur</span> = start_str<br/>    <span class=\"re1\">@patterns</span> = <span class=\"kw4\">Hash</span><span class=\"br0\">[</span><span class=\"nu0\">8</span>.<span class=\"me1\">times</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><span class=\"br0\">[</span><span class=\"st0\">\"%03b\"</span><span class=\"sy0\">%</span>i, <span class=\"st0\">\"01\"</span><span class=\"br0\">[</span>rule<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"Rule (#{rule})\u00a0: #@patterns\"</span> <span class=\"kw1\">if</span> disp<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> each<br/>    <span class=\"kw2\">return</span> to_enum <span class=\"kw1\">unless</span> block_given?<br/>    <span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">yield</span> <span class=\"re1\">@cur</span><br/>      str = <span class=\"re1\">@cur</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re1\">@cur</span> <span class=\"sy0\">+</span> <span class=\"re1\">@cur</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>      <span class=\"re1\">@cur</span> = <span class=\"re1\">@cur</span>.<span class=\"me1\">size</span>.<span class=\"me1\">times</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"re1\">@patterns</span><span class=\"br0\">[</span>str<span class=\"br0\">[</span>i,<span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>eca = ElemCellAutomat.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"st0\">'1'</span>.<span class=\"me1\">center</span><span class=\"br0\">(</span><span class=\"nu0\">39</span>, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>, <span class=\"nu0\">18</span>, <span class=\"kw2\">true</span><span class=\"br0\">)</span><br/>eca.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>line<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> line.<span class=\"me1\">tr</span><span class=\"br0\">(</span><span class=\"st0\">\"01\"</span>, <span class=\"st0\">\".#\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span></pre>"}, {"lang": "Rust", "loc": 44, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fn main() {<br/>    struct ElementaryCA {<br/>        rule: u8,<br/>        state: u64,<br/>    }<br/>    impl ElementaryCA {<br/>        fn new(rule: u8) -&gt; (u64, ElementaryCA) {<br/>            let out = ElementaryCA {<br/>                rule,<br/>                state: 1,<br/>            };<br/>            (out.state, out)<br/>        }<br/>        fn next(&amp;mut self) -&gt; u64 {<br/>            let mut next_state = 0u64;<br/>            let state = self.state;<br/>            for i in 0..64 {<br/>                next_state |= (((self.rule as u64)&gt;&gt;(7 &amp; (state.rotate_left(1).rotate_right(i as u32)))) &amp; 1)&lt;&lt;i;<br/>            }<br/>            self.state = next_state;<br/>            self.state<br/>        }<br/>    }<br/>    fn rep_u64(val: u64) -&gt; String {<br/>        let mut out = String::new();<br/>        for i in (0..64).rev() {<br/>            if 1&lt;&lt;i &amp; val\u00a0!= 0 {<br/>                out = out + \"\\u{2588}\";<br/>            } else {<br/>                out = out + \"-\";<br/>            }<br/>        }<br/>        out<br/>    }<br/>\u00a0<br/>    let (i, mut thirty) = ElementaryCA::new(154);<br/>    println!(\"{}\",rep_u64(i));<br/>    for _ in 0..32 {<br/>        let s = thirty.next();<br/>        println!(\"{}\", rep_u64(s));<br/>    }<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 73, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"sy0\">_</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"me1\">event</span>.<span class=\"me1\">ActionEvent</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"sy0\">_</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> ElementaryCellularAutomaton <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  SwingUtilities.<span class=\"me1\">invokeLater</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> JFrame<span class=\"br0\">(</span><span class=\"st0\">\"Elementary Cellular Automaton\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> ElementaryCellularAutomaton <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> JPanel <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dim <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Dimension<span class=\"br0\">(</span><span class=\"nu0\">900</span>, <span class=\"nu0\">450</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cells <span class=\"sy0\">=</span> Array.<span class=\"me1\">ofDim</span><span class=\"br0\">[</span>Byte<span class=\"br0\">]</span><span class=\"br0\">(</span>dim.<span class=\"me1\">height</span>, dim.<span class=\"me1\">width</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> rule <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> ruleSet <span class=\"sy0\">=</span><br/>          Seq<span class=\"br0\">(</span><span class=\"nu0\">30</span>, <span class=\"nu0\">45</span>, <span class=\"nu0\">50</span>, <span class=\"nu0\">57</span>, <span class=\"nu0\">62</span>, <span class=\"nu0\">70</span>, <span class=\"nu0\">73</span>, <span class=\"nu0\">75</span>, <span class=\"nu0\">86</span>, <span class=\"nu0\">89</span>, <span class=\"nu0\">90</span>, <span class=\"nu0\">99</span>, <span class=\"nu0\">101</span>, <span class=\"nu0\">105</span>, <span class=\"nu0\">109</span>, <span class=\"nu0\">110</span>, <span class=\"nu0\">124</span>, <span class=\"nu0\">129</span>, <span class=\"nu0\">133</span>, <span class=\"nu0\">135</span>, <span class=\"nu0\">137</span>, <span class=\"nu0\">139</span>, <span class=\"nu0\">141</span>, <span class=\"nu0\">164</span>, <span class=\"nu0\">170</span>, <span class=\"nu0\">232</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> paintComponent<span class=\"br0\">(</span>gg<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> drawCa<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> rules<span class=\"br0\">(</span>lhs<span class=\"sy0\">:</span> Int, mid<span class=\"sy0\">:</span> Int, rhs<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>              <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> idx <span class=\"sy0\">=</span> lhs <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">2</span> | mid <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span> | rhs<br/>              <span class=\"br0\">(</span>ruleSet<span class=\"br0\">(</span>rule<span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;</span> idx <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">toByte</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>Color.<span class=\"me1\">black</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>r <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until cells.<span class=\"me1\">length</span> - <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                 c <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> until cells<span class=\"br0\">(</span>r<span class=\"br0\">)</span>.<span class=\"me1\">length</span> - <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                 lhs <span class=\"sy0\">=</span> cells<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">(</span>c - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                 mid <span class=\"sy0\">=</span> cells<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                 rhs <span class=\"sy0\">=</span> cells<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">(</span>c + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>              cells<span class=\"br0\">(</span>r + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">=</span> rules<span class=\"br0\">(</span>lhs, mid, rhs<span class=\"br0\">)</span> <span class=\"co1\">// next generation</span><br/>              <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>cells<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> g.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span>c, r, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>          <span class=\"br0\">}</span><br/>\u00a0<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> drawLegend<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> ruleSet<span class=\"br0\">(</span>rule<span class=\"br0\">)</span>.<span class=\"me1\">toString</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sw <span class=\"sy0\">=</span> g.<span class=\"me1\">getFontMetrics</span>.<span class=\"me1\">stringWidth</span><span class=\"br0\">(</span>ruleSet<span class=\"br0\">(</span>rule<span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">)</span><br/>            g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>Color.<span class=\"me1\">white</span><span class=\"br0\">)</span><br/>            g.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span><span class=\"nu0\">16</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">55</span>, <span class=\"nu0\">30</span><span class=\"br0\">)</span><br/>            g.<span class=\"me1\">setColor</span><span class=\"br0\">(</span>Color.<span class=\"me1\">darkGray</span><span class=\"br0\">)</span><br/>            g.<span class=\"me1\">drawString</span><span class=\"br0\">(</span>s, <span class=\"nu0\">16</span> + <span class=\"br0\">(</span><span class=\"nu0\">55</span> - sw<span class=\"br0\">)</span> / <span class=\"nu0\">2</span>, <span class=\"nu0\">30</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">}</span><br/>\u00a0<br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">super</span></a>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> gg.<span class=\"me1\">asInstanceOf</span><span class=\"br0\">[</span>Graphics2D<span class=\"br0\">]</span><br/>          g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span>RenderingHints.<span class=\"me1\">KEY_ANTIALIASING</span>, RenderingHints.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><br/>          drawCa<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>          drawLegend<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Timer<span class=\"br0\">(</span><span class=\"nu0\">5000</span>, <span class=\"br0\">(</span><span class=\"sy0\">_:</span> ActionEvent<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>          rule +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>          <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>rule <span class=\"sy0\">==</span> ruleSet.<span class=\"me1\">length</span><span class=\"br0\">)</span> rule <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>          repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        cells<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">(</span>dim.<span class=\"me1\">width</span> / <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        setBackground<span class=\"br0\">(</span>Color.<span class=\"me1\">white</span><span class=\"br0\">)</span><br/>        setFont<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Font<span class=\"br0\">(</span><span class=\"st0\">\"SansSerif\"</span>, Font.<span class=\"me1\">BOLD</span>, <span class=\"nu0\">28</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        setPreferredSize<span class=\"br0\">(</span>dim<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>      add<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> ElementaryCellularAutomaton, BorderLayout.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><br/>      pack<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      setDefaultCloseOperation<span class=\"br0\">(</span>WindowConstants.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><br/>      setLocationRelativeTo<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>      setResizable<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span><br/>      setVisible<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 29, "block": "<pre class=\"scheme highlighted_source\"><span class=\"co1\">; uses SRFI-1 library http://srfi.schemers.org/srfi-1/srfi-1.html</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>evolve ls r<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>unfold<br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> <span class=\"br0\">(</span>cddr x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> r <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">4</span> <span class=\"br0\">(</span>first x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span>second x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>third x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">cdr</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>last ls<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">append</span> ls <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> ls<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>automaton <span class=\"kw1\">s</span> r n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>automaton s0 rv n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> x<span class=\"br0\">)</span> #\\. #\\#<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> s0<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s1 <span class=\"br0\">(</span>evolve s0 rv<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"sy0\">*</span>automaton s1 rv <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"Rule \"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">display</span> r<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">*</span>automaton<br/>    <span class=\"kw1\">s</span><br/>    <span class=\"br0\">(</span>list<span class=\"sy0\">-&gt;</span><span class=\"kw1\">vector</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">append</span><br/>\t<span class=\"br0\">(</span>int<span class=\"sy0\">-&gt;</span>bin r<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>make<span class=\"sy0\">-</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"nu0\">7</span> <span class=\"br0\">(</span><span class=\"kw1\">floor</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw1\">log</span> r<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">log</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>automaton '<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">30</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 33, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Automaton<span class=\"br0\">(</span>rule, cells<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    method init <span class=\"br0\">{</span><br/>        rule = <span class=\"kw3\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"%08b\"</span>, rule<span class=\"br0\">)</span>.<span class=\"me1\">chars</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">to_i</span><span class=\"br0\">}</span>.<span class=\"me1\">reverse</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method <span class=\"kw1\">next</span> <span class=\"br0\">{</span><br/>        var previous = cells.<span class=\"me1\">map</span><span class=\"br0\">{</span>_<span class=\"br0\">}</span><br/>        var len = previous.<span class=\"me1\">len</span><br/>        cells<span class=\"br0\">[</span><span class=\"br0\">]</span> = rule<span class=\"br0\">[</span><br/>                    previous.<span class=\"me1\">range</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>                        <span class=\"nu0\">4</span><span class=\"sy0\">*</span>previous<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">%</span> len<span class=\"br0\">]</span> <span class=\"sy0\">+</span><br/>                        <span class=\"nu0\">2</span><span class=\"sy0\">*</span>previous<span class=\"br0\">[</span>i<span class=\"br0\">]</span>         <span class=\"sy0\">+</span><br/>                        previous<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">%</span> len<span class=\"br0\">]</span><br/>                    <span class=\"br0\">}</span><br/>                  <span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method to_s <span class=\"br0\">{</span><br/>        cells.<span class=\"me1\">map</span> <span class=\"br0\">{</span> _\u00a0? <span class=\"st0\">'#'</span>\u00a0: <span class=\"st0\">' '</span> <span class=\"br0\">}</span>.<span class=\"me1\">join</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var size = <span class=\"nu0\">20</span><br/>var arr = size.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>arr<span class=\"br0\">[</span>size<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> = <span class=\"nu0\">1</span><br/>\u00a0<br/>var auto = Automaton<span class=\"br0\">(</span><span class=\"nu0\">90</span>, arr<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>size<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">times</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"|#{auto}|<span class=\"es0\">\\n</span>\"</span><br/>    auto.<span class=\"kw1\">next</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 40, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/>oo::<span class=\"me1\">class</span> create ElementaryAutomaton <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> rules<br/>    <span class=\"co1\"># Decode the rule number to get a collection of state mapping rules.</span><br/>    <span class=\"co1\"># In effect, \"compiles\" the rule number</span><br/>    constructor <span class=\"br0\">{</span>ruleNumber<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> ins <span class=\"br0\">{</span><span class=\"nu0\">111</span> <span class=\"nu0\">110</span> <span class=\"nu0\">101</span> <span class=\"nu0\">100</span> 011 010 001 000<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> bits <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> range <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>08b <span class=\"re0\">$ruleNumber</span><span class=\"br0\">]</span> end-<span class=\"nu0\">7</span> end<span class=\"br0\">]</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">foreach</span> input <span class=\"br0\">{</span><span class=\"nu0\">111</span> <span class=\"nu0\">110</span> <span class=\"nu0\">101</span> <span class=\"nu0\">100</span> 011 010 001 000<span class=\"br0\">}</span> state <span class=\"re0\">$bits</span> <span class=\"br0\">{</span><br/>\t    dict <span class=\"kw1\">set</span> rules <span class=\"re0\">$input</span> <span class=\"re0\">$state</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Apply the rule to an automaton state to get a new automaton state.</span><br/>    <span class=\"co1\"># We wrap the edges; the state space is circular.</span><br/>    <span class=\"kw1\">method</span> evolve <span class=\"br0\">{</span>state<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> len <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$state</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$len</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span>dict get <span class=\"re0\">$rules</span> <span class=\"br0\">[</span><br/>\t\t    <span class=\"kw2\">lindex</span> <span class=\"re0\">$state</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$i</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"re0\">$len</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span><br/>\t\t    <span class=\"kw2\">lindex</span> <span class=\"re0\">$state</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><br/>\t\t    <span class=\"kw2\">lindex</span> <span class=\"re0\">$state</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$i</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"re0\">$len</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Simple driver method; omit the initial state to get a centred dot</span><br/>    <span class=\"kw1\">method</span> run <span class=\"br0\">{</span>steps <span class=\"br0\">{</span>initialState <span class=\"st0\">\"\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span><span class=\"kw2\">info</span> level <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> initialState <span class=\"st0\">\"[string repeat . $steps]1[string repeat . $steps]\"</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> s <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> map <span class=\"st0\">\". 0 # 1\"</span> <span class=\"re0\">$initialState</span><span class=\"br0\">]</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$steps</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> map <span class=\"st0\">\"0 . 1 #\"</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$s</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> s <span class=\"br0\">[</span>my evolve <span class=\"re0\">$s</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> map <span class=\"st0\">\"0 . 1 #\"</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$s</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 5, "block": "<pre class=\"text highlighted_source\">fcn rule(n){ n=n.toString(2); \"00000000\"[n.len() - 8,*] + n }<br/>fcn applyRule(rule,cells){<br/>   cells=String(cells[-1],cells,cells[0]); // wrap cell ends<br/>   (cells.len() - 2).pump(String,'wrap(n){ rule[7 - cells[n,3].toInt(2)] })<br/>}</pre>"}]}