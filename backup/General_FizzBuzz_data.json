{"task": "General_FizzBuzz", "blocks": [{"lang": "AppleScript", "loc": 83, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- GENERAL FIZZBUZZ ----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- fizz\u00a0:: [[Int, String]] -&gt; Int -&gt; String</span><br/><span class=\"kw3\">on</span> fizz<span class=\"br0\">(</span>lstRules, intMax<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">-- fizzLine\u00a0:: String -&gt; Int -&gt; String</span><br/>    <span class=\"kw3\">script</span> fizzline<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>strSeries, n<span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"co1\">-- Multiple rule matches -&gt;  single or concatenated words</span><br/>            <span class=\"co1\">-- wordIfRuleMatch\u00a0:: String -&gt; (Int, String) -&gt; String</span><br/>            <span class=\"kw3\">script</span> wordIfRuleMatch<br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>str, rulePair<span class=\"br0\">)</span><br/>                    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>factor, noiseWord<span class=\"br0\">}</span> <span class=\"kw3\">to</span> rulePair<br/>\u00a0<br/>                    cond<span class=\"br0\">(</span>n <span class=\"kw2\">mod</span> factor &gt; <span class=\"nu0\">0</span>, str, str <span class=\"sy0\">&amp;</span> noiseWord<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            <span class=\"kw3\">set</span> strPhrase <span class=\"kw3\">to</span> foldl<span class=\"br0\">(</span>wordIfRuleMatch, <span class=\"st0\">\"\"</span>, lstRules<span class=\"br0\">)</span><br/>\u00a0<br/>            strSeries <span class=\"sy0\">&amp;</span> cond<span class=\"br0\">(</span>strPhrase \u2260 <span class=\"st0\">\"\"</span>, strPhrase, n <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> linefeed<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldl<span class=\"br0\">(</span>fizzline, <span class=\"st0\">\"\"</span>, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, intMax<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> fizz<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    fizz<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"st0\">\"Fizz\"</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">5</span>, <span class=\"st0\">\"Buzz\"</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">7</span>, <span class=\"st0\">\"Baxx\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- cond\u00a0:: Bool -&gt; a -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> cond<span class=\"br0\">(</span>bool, x, y<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> bool <span class=\"kw3\">then</span><br/>        x<br/>    <span class=\"kw3\">else</span><br/>        y<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> cond<br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> m &gt; n <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "AWK", "loc": 1, "block": "<pre>105\n3 Fizz\n5 Buzz\n7 Baxx</pre>"}, {"lang": "Batch File", "loc": 32, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><span class=\"co2\">\t::Range variable</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> range=20<br/><span class=\"co2\"><br/>\t::The input data [will not be validated]</span><br/><span class=\"co2\">\t::This is the strictly the data format...</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"data=3:Fizz 5:Buzz 7:Baxx\"<br/><span class=\"co2\"><br/>\t::Parsing the data into 1-based pseudo-arrays...</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"data_cnt=0\"<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">A</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(!</span><span class=\"re2\">data</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"data_cnt+=1\"<br/>\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /f \"tokens=1-2 delims=:\" <span class=\"sy0\">%%</span><span class=\"re3\">D</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>\"<span class=\"sy0\">%%</span><span class=\"re3\">A</span>\"<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"fact<span class=\"sy0\">!</span><span class=\"re2\">data_cnt</span><span class=\"sy0\">!</span>=<span class=\"sy0\">%%</span><span class=\"re3\">D</span>\"<br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"prnt<span class=\"sy0\">!</span><span class=\"re2\">data_cnt</span><span class=\"sy0\">!</span>=<span class=\"sy0\">%%</span><span class=\"re3\">E</span>\"<br/>\t<span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span><br/><span class=\"co2\"><br/>\t::Do the count...</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">C</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,<span class=\"sy0\">!</span><span class=\"re2\">range</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"out=\"<br/>\t<a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%</span><span class=\"sy0\">%</span>. <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,<span class=\"sy0\">!</span><span class=\"re2\">data_cnt</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a \"mod=<span class=\"sy0\">%%</span><span class=\"re3\">C</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span> fact<span class=\"sy0\">%</span><span class=\"sy0\">%</span>.\"<br/>\t\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">mod</span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">equ</span></a> 0 <span class=\"sy0\">(</span><br/>\t\t\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"out=<span class=\"sy0\">!</span><span class=\"re2\">out</span><span class=\"sy0\">!!</span><span class=\"re2\">prnt%%.</span><span class=\"sy0\">!</span>\"<br/>\t\t<span class=\"sy0\">)</span><br/>\t<span class=\"sy0\">)</span><br/>\t<a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> <a href=\"http://www.ss64.com/nt/defined.html\"><span class=\"kw2\">defined</span></a> out <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<span class=\"sy0\">%%</span><span class=\"re3\">C</span><span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<span class=\"sy0\">!</span><span class=\"re2\">out</span><span class=\"sy0\">!)</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b 0</pre>"}, {"lang": "BBC BASIC", "loc": 20, "block": "<pre class=\"text highlighted_source\">REM &gt;genfizzb<br/>INPUT \"Maximum number: \" max%<br/>INPUT \"Number of factors: \" n%<br/>DIM factors%(n% - 1)<br/>DIM words$(n% - 1)<br/>FOR i% = 0 TO n% - 1<br/>    INPUT \"&gt; \" factor$<br/>    factors%(i%) = VAL(LEFT$(factor$, INSTR(factor$, \" \") - 1))<br/>    words$(i%) = MID$(factor$, INSTR(factor$, \" \") + 1)<br/>NEXT<br/>FOR i% = 1 TO max%<br/>    matched% = FALSE<br/>    FOR j% = 0 TO n% - 1<br/>        IF i% MOD factors%(j%) = 0 THEN<br/>            PRINT words$(j%);<br/>            matched% = TRUE<br/>        ENDIF<br/>    NEXT<br/>    IF matched% THEN PRINT ELSE PRINT;i%<br/>NEXT</pre>"}, {"lang": "C", "loc": 55, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> replace_info <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> n<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>text<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> compare<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">struct</span> replace_info <span class=\"sy0\">*</span>x <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">struct</span> replace_info <span class=\"sy0\">*</span><span class=\"br0\">)</span> a<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">struct</span> replace_info <span class=\"sy0\">*</span>y <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">struct</span> replace_info <span class=\"sy0\">*</span><span class=\"br0\">)</span> b<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> x<span class=\"sy0\">-&gt;</span>n <span class=\"sy0\">-</span> y<span class=\"sy0\">-&gt;</span>n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> generic_fizz_buzz<span class=\"br0\">(</span><span class=\"kw4\">int</span> max<span class=\"sy0\">,</span> <span class=\"kw4\">struct</span> replace_info <span class=\"sy0\">*</span>info<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> info_length<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> it<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> found_word<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> max<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        found_word <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/* Assume sorted order of values in the info array */</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>it <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> it <span class=\"sy0\">&lt;</span> info_length<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>it<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> i <span class=\"sy0\">%</span> info<span class=\"br0\">[</span>it<span class=\"br0\">]</span>.<span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span><span class=\"sy0\">,</span> info<span class=\"br0\">[</span>it<span class=\"br0\">]</span>.<span class=\"me1\">text</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                found_word <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> found_word<span class=\"br0\">)</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">struct</span> replace_info info<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Buzz\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Baxx\"</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Fizz\"</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Sort information array */</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/qsort.html\"><span class=\"kw3\">qsort</span></a><span class=\"br0\">(</span>info<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> replace_info<span class=\"br0\">)</span><span class=\"sy0\">,</span> compare<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Print output for generic FizzBuzz */</span><br/>    generic_fizz_buzz<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span> info<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 39, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> pair  <span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    pair<span class=\"br0\">(</span> <span class=\"kw4\">int</span> s, std<span class=\"sy4\">::</span><span class=\"me2\">string</span> z <span class=\"br0\">)</span>            <span class=\"br0\">{</span> p <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">make_pair</span><span class=\"br0\">(</span> s, z <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">bool</span> operator <span class=\"sy1\">&lt;</span> <span class=\"br0\">(</span> <span class=\"kw4\">const</span> pair<span class=\"sy3\">&amp;</span> o <span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> i<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> o.<span class=\"me1\">i</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> i<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>                           <span class=\"br0\">{</span> <span class=\"kw1\">return</span> p.<span class=\"me1\">first</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> s<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>                   <span class=\"br0\">{</span> <span class=\"kw1\">return</span> p.<span class=\"me1\">second</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">pair</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span>, std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> p<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">void</span> gFizzBuzz<span class=\"br0\">(</span> <span class=\"kw4\">int</span> c, std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>pair<span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> v <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">bool</span> output<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;=</span> c<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        output <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>pair<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> i <span class=\"sy1\">=</span> v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i <span class=\"sy3\">!</span><span class=\"sy1\">=</span> v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span><span class=\"br0\">(</span> x <span class=\"sy2\">%</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span>.<span class=\"me1\">i</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>i <span class=\"br0\">)</span>.<span class=\"me1\">s</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                output <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>output <span class=\"br0\">)</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> x<span class=\"sy4\">;</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>pair<span class=\"sy1\">&gt;</span> v<span class=\"sy4\">;</span><br/>    v.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> pair<span class=\"br0\">(</span> <span class=\"nu0\">7</span>, <span class=\"st0\">\"Baxx\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    v.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> pair<span class=\"br0\">(</span> <span class=\"nu0\">3</span>, <span class=\"st0\">\"Fizz\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    v.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> pair<span class=\"br0\">(</span> <span class=\"nu0\">5</span>, <span class=\"st0\">\"Buzz\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">sort</span><span class=\"br0\">(</span> v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    gFizzBuzz<span class=\"br0\">(</span> <span class=\"nu0\">20</span>, v <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 62, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> GeneralFizzBuzz<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> j<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> k<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> limit<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">string</span> iString<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">string</span> jString<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">string</span> kString<span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"First integer:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        i <span class=\"sy0\">=</span> Convert<span class=\"sy0\">.</span><span class=\"me1\">ToInt32</span><span class=\"br0\">(</span>Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"First string:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        iString <span class=\"sy0\">=</span> Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Second integer:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        j <span class=\"sy0\">=</span> Convert<span class=\"sy0\">.</span><span class=\"me1\">ToInt32</span><span class=\"br0\">(</span>Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Second string:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        jString <span class=\"sy0\">=</span> Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Third integer:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        k <span class=\"sy0\">=</span> Convert<span class=\"sy0\">.</span><span class=\"me1\">ToInt32</span><span class=\"br0\">(</span>Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Third string:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        kString <span class=\"sy0\">=</span> Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Limit (inclusive):\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        limit <span class=\"sy0\">=</span> Convert<span class=\"sy0\">.</span><span class=\"me1\">ToInt32</span><span class=\"br0\">(</span>Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n<span class=\"sy0\">&lt;=</span> limit<span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">bool</span> flag <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">%</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span>iString<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                flag <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">%</span>j <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span>jString<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                flag <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">%</span>k <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span>kString<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                flag <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>flag<span class=\"br0\">)</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Ceylon", "loc": 40, "block": "<pre class=\"text highlighted_source\">shared void run() {<br/>\u00a0<br/>\tprint(\"enter the max value\");<br/>\tassert(exists maxLine = process.readLine(), <br/>\t\texists max = parseInteger(maxLine));<br/>\u00a0<br/>\tprint(\"enter your number/word pairs<br/>\t       enter a blank line to stop\");<br/>\u00a0<br/>\tvariable value divisorsToWords = map&lt;Integer, String&gt; {};<br/>\u00a0<br/>\twhile(true) {<br/>\t\tvalue line = process.readLine();<br/>\t\tassert(exists line);<br/>\t\tif(line.trimmed.empty) {<br/>\t\t\tbreak;<br/>\t\t}<br/>\t\tvalue pair = line.trimmed.split().sequence();<br/>\t\tif(exists first = pair.first, <br/>\t\t\texists integer = parseInteger(first), <br/>\t\t\texists word = pair[1]) {<br/>\t\t\tdivisorsToWords = divisorsToWords.patch(map {integer -&gt; word});<br/>\t\t}<br/>\t}<br/>\u00a0<br/>\tvalue divisors = divisorsToWords.keys.sort(byIncreasing(Integer.magnitude));<br/>\tfor(i in 1..max) {<br/>\t\tvalue builder = StringBuilder();<br/>\t\tfor(divisor in divisors) {<br/>\t\t\tif(divisor.divides(i), exists word = divisorsToWords[divisor]) {<br/>\t\t\t\tbuilder.append(word);<br/>\t\t\t}<br/>\t\t}<br/>\t\tif(builder.empty) {<br/>\t\t\tprint(i);<br/>\t\t} else {<br/>\t\t\tprint(builder.string);<br/>\t\t}<br/>\t}<br/>}</pre>"}, {"lang": "Clojure", "loc": 15, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> fix <span class=\"br0\">[</span>pairs<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> second pairs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> getvalid <span class=\"br0\">[</span>pairs n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">filter</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>p<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span>mod n <span class=\"br0\">(</span><span class=\"kw1\">first</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">sort-by</span> <span class=\"kw1\">first</span> pairs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> gfizzbuzz <span class=\"br0\">[</span>pairs numbers<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">interpose</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>f <span class=\"br0\">(</span>getvalid pairs n<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                            <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> f<span class=\"br0\">)</span><br/>                              n<br/>                              <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span><br/>                                     <span class=\"br0\">(</span>fix f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  numbers<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 29, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fizzbuzz <span class=\"br0\">(</span>limit factor-words<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">1</span> to limit<br/>     <span class=\"kw1\">if</span> <span class=\"br0\">(</span>assoc-<span class=\"kw1\">if</span> #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>factor<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span>mod i factor<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> factor-words<span class=\"br0\">)</span><br/>     <span class=\"kw1\">do</span> <span class=\"br0\">(</span>loop for <span class=\"br0\">(</span>factor <span class=\"sy0\">.</span> word<span class=\"br0\">)</span> in factor-words<br/>           <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span>mod i factor<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">princ</span> word<span class=\"br0\">)</span><br/>           finally <span class=\"br0\">(</span>fresh-line<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     else <span class=\"kw1\">do</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"~a~%\"</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> read-factors <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>optional factor-words<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"st0\">\"&gt; \"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>input <span class=\"br0\">(</span>read-line t <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> input<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>sort factor-words #'<span class=\"sy0\">&lt;</span> <span class=\"sy0\">:</span><span class=\"me1\">key</span> #'<span class=\"kw1\">car</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"br0\">(</span>digit-char-p <span class=\"br0\">(</span>char input <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>n i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">parse-integer</span> input <span class=\"sy0\">:</span><span class=\"me1\">junk-allowed</span> t<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>read-factors <span class=\"br0\">(</span>acons n <span class=\"br0\">(</span>string-trim <span class=\"st0\">\" \"</span> <span class=\"br0\">(</span>subseq input i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                  factor-words<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>t <span class=\"br0\">(</span>write-line <span class=\"st0\">\"Invalid input.\"</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>read-factors factor-words<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop initially <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"st0\">\"&gt; \"</span><span class=\"br0\">)</span><br/>     for input <span class=\"sy0\">=</span> <span class=\"br0\">(</span>read-line t <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>     until <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> input<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>digit-char-p <span class=\"br0\">(</span>char input <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"kw1\">parse-integer</span> input <span class=\"sy0\">:</span><span class=\"me1\">junk-allowed</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     finally <span class=\"br0\">(</span>fizzbuzz <span class=\"br0\">(</span><span class=\"kw1\">parse-integer</span> input <span class=\"sy0\">:</span><span class=\"me1\">junk-allowed</span> t<span class=\"br0\">)</span> <span class=\"br0\">(</span>read-factors<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 49, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> core.<span class=\"me1\">stdc</span>.<span class=\"me1\">stdlib</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> limit<span class=\"sy0\">;</span><br/>    write<span class=\"br0\">(</span><span class=\"st0\">\"Max number (&gt;0): \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    readf<span class=\"sy0\">!</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">(</span>limit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>limit <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"The max number to consider must be greater than zero.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        exit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> terms<span class=\"sy0\">;</span><br/>    write<span class=\"br0\">(</span><span class=\"st0\">\"Terms (&gt;0): \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    readf<span class=\"sy0\">!</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">(</span>terms<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>terms <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"The number of terms to consider must be greater than zero.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        exit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> factors <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>terms<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> words <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span>terms<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>terms<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        write<span class=\"br0\">(</span><span class=\"st0\">\"Factor \"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\" and word: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        readf<span class=\"sy0\">!</span><span class=\"st0\">\"%d\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">(</span>factors<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> words<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>factors<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            writeln<span class=\"br0\">(</span><span class=\"st0\">\"The factor to consider must be greater than zero.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            exit<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>n<span class=\"sy0\">;</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"me1\">limit</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">bool</span> print <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>terms<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> factors<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                write<span class=\"br0\">(</span>words<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                print <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>print<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            writeln<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            writeln<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 19, "block": "<pre class=\"text highlighted_source\">defmodule General do<br/>  def fizzbuzz(input) do<br/>    [num | nwords] = String.split(input)<br/>    max = String.to_integer(num)<br/>    dict = Enum.chunk(nwords, 2) |&gt; Enum.map(fn[n,word] -&gt; {String.to_integer(n),word} end)<br/>    Enum.each(1..max, fn i -&gt;<br/>      str = Enum.map_join(dict, fn {n,word} -&gt; if rem(i,n)==0, do: word end)<br/>      IO.puts if str==\"\", do: i, else: str<br/>    end)<br/>  end<br/>end<br/>\u00a0<br/>input = \"\"\"<br/>105<br/>3 Fizz<br/>5 Buzz<br/>7 Baxx<br/>\"\"\"<br/>General.fizzbuzz(input)</pre>"}, {"lang": "Factor", "loc": 21, "block": "<pre class=\"text highlighted_source\">USING: assocs combinators.extras io kernel math math.parser<br/>math.ranges prettyprint sequences splitting\u00a0;<br/>IN: rosetta-code.general-fizzbuzz<br/>\u00a0<br/>: prompt ( -- str ) \"&gt;\" write readln\u00a0;<br/>\u00a0<br/>: get-factor ( -- seq )<br/>    prompt \" \" split first2 [ string&gt;number ] dip<br/>    { } 2sequence\u00a0;<br/>\u00a0<br/>: get-input ( -- assoc n )<br/>    prompt string&gt;number [1,b] [ get-factor ] thrice<br/>    { } 3sequence swap\u00a0;<br/>\u00a0<br/>: fizzbuzz ( assoc n -- )<br/>    swap dupd [ drop swap mod 0 = ] with assoc-filter<br/>    dup empty? [ drop . ] [ nip values concat print ] if\u00a0;<br/>\u00a0<br/>: main ( -- ) get-input [ fizzbuzz ] with each\u00a0;<br/>\u00a0<br/>MAIN: main</pre>"}, {"lang": "Forth", "loc": 26, "block": "<pre class=\"text highlighted_source\">\\ gfb.fs - generalized fizz buzz<br/>: times\t\t( xt n -- )<br/>\tBEGIN dup WHILE<br/>\t\t1- over swap 2&gt;r execute 2r&gt;<br/>\tREPEAT<br/>\t2drop<br/>;<br/>\\ 'Domain Specific Language' compiling words<br/>\\ -- First  comment: stack-effect at compile-time<br/>\\ -- Second comment: stack efect of compiled sequence<br/>: ]+[\t\t( u ca u -- ) ( u f -- u f' )<br/>\t2&gt;r &gt;r\t]<br/>\t\t\t]] over [[<br/>\tr&gt;  \t\t]] literal mod 0= IF [[<br/>\t2r&gt; \t\t]] sliteral type 1+ THEN [ [[<br/>;<br/>: ]fb\t\t( -- xt ) ( u f -- u+1 )<br/>\t]] IF space ELSE dup u. THEN 1+\u00a0; [[<br/>;<br/>: fb[\t\t( -- ) ( u -- u 0 \u00a0;'u' is START-NUMBER )<br/>\t:noname  0 ]] literal [ [[<br/>;<br/>\\ Usage: START-NUMBER COMPILING-SEQUENCE U times drop ( INCREASED-NUBER )<br/>\\ Example:<br/>\\ 1 fb[ 3 s\" fizz\" ]+[ 5 s\" buzz\" ]+[ 7 s\" dizz\" ]+[ ]fb 40 times drop<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 59, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 01-03-2018</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">UInteger</span> f<span class=\"br0\">(</span><span class=\"br0\">)</span>, factor, c, i, n<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> max<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> w<span class=\"br0\">(</span><span class=\"br0\">)</span>, word<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> boolean flag<br/>\u00a0<br/><span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">Input</span> <span class=\"st0\">\"Enter maximum number, if number &lt; 1 then the program wil end \"</span>, max<br/>    <span class=\"kw1\">If</span> max &lt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>\u00a0<br/>    <span class=\"kw1\">Print</span><br/>    <span class=\"kw1\">While</span> c = <span class=\"nu0\">0</span> <span class=\"kw1\">Or</span> c &gt; max<br/>        <span class=\"kw1\">Input</span> <span class=\"st0\">\"Total number of factors \"</span>, c<br/>    <span class=\"kw1\">Wend</span><br/>    c -= <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">ReDim</span> f<span class=\"br0\">(</span>c<span class=\"br0\">)</span>, w<span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">Print</span><br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> c<br/>        <span class=\"kw1\">Input</span> <span class=\"st0\">\"Enter factor and word, separated by a comma \"</span>, factor, word<br/>        f<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = factor<br/>        w<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = word<br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw1\">While</span> flag = <span class=\"kw1\">FALSE</span><br/>        flag = <span class=\"kw1\">TRUE</span><br/>        <span class=\"kw1\">For</span> n = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> c-<span class=\"nu0\">1</span><br/>            <span class=\"kw1\">For</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> c<br/>                <span class=\"kw1\">If</span> f<span class=\"br0\">(</span>n<span class=\"br0\">)</span> &gt; f<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>                    flag = <span class=\"kw1\">FALSE</span><br/>                    <span class=\"kw1\">Swap</span> f<span class=\"br0\">(</span>n<span class=\"br0\">)</span>, f<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>                    <span class=\"kw1\">Swap</span> w<span class=\"br0\">(</span>n<span class=\"br0\">)</span>, w<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>                <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>            <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Wend</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> max<br/>        flag = <span class=\"kw1\">FALSE</span><br/>        <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> c<br/>            <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> f<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>                flag = <span class=\"kw1\">TRUE</span><br/>                <span class=\"kw1\">Print</span> w<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">Print</span> <span class=\"kw1\">IIf</span><span class=\"br0\">(</span>flag , <span class=\"st0\">\"\"</span>, <span class=\"kw1\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/><span class=\"kw1\">Loop</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 35, "block": "<pre class=\"go highlighted_source\">\u00a0<br/><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> numbers <span class=\"sy2\">=</span> <span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\u00a0<br/>\t<span class=\"co1\">//using the provided data</span><br/>\tmax <span class=\"sy2\">:=</span> <span class=\"nu0\">20</span><br/>\twords <span class=\"sy2\">:=</span> <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">int</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>\t\t<span class=\"nu0\">3</span><span class=\"sy1\">:</span> <span class=\"st0\">\"Fizz\"</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"nu0\">5</span><span class=\"sy1\">:</span> <span class=\"st0\">\"Buzz\"</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"nu0\">7</span><span class=\"sy1\">:</span> <span class=\"st0\">\"Baxx\"</span><span class=\"sy1\">,</span><br/>\t<span class=\"sy1\">}</span><br/>\tkeys <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">}</span><br/>\tdivisible <span class=\"sy2\">:=</span> <span class=\"kw2\">false</span><br/>\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> max<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> n <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> keys <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy3\">%</span> n <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t\t\tfmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>words<span class=\"sy1\">[</span>n<span class=\"sy1\">])</span><br/>\t\t\t\tdivisible <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"sy3\">!</span>divisible <span class=\"sy1\">{</span><br/>\t\t\tfmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>\t\tdivisible <span class=\"sy2\">=</span> <span class=\"kw2\">false</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 7, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> log <span class=\"sy0\">=</span> <span class=\"st0\">''</span><br/><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">40</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span><a href=\"http://www.google.de/search?as_q=Integer&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Integer</span></a> value <span class=\"sy0\">-&gt;</span> log <span class=\"sy0\">+=</span><span class=\"br0\">(</span>value <span class=\"sy0\">%</span>3 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span>value <span class=\"sy0\">%</span>5 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">?</span> <span class=\"st0\">'FIZZBUZZ<span class=\"es0\">\\n</span>'</span>:<span class=\"br0\">(</span>value <span class=\"sy0\">%</span>7 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">?</span> <span class=\"st0\">'FIZZBAXX<span class=\"es0\">\\n</span>'</span>:<span class=\"st0\">'FIZZ<span class=\"es0\">\\n</span>'</span><br/>                                   \u00a0:<span class=\"br0\">(</span>value <span class=\"sy0\">%</span>5 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span>value <span class=\"sy0\">%</span>7 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">?</span> <span class=\"st0\">'BUZBAXX<span class=\"es0\">\\n</span>'</span>:<span class=\"st0\">'BUZZ<span class=\"es0\">\\n</span>'</span><br/>                                   \u00a0:<span class=\"br0\">(</span>value <span class=\"sy0\">%</span>7 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span><span class=\"st0\">'BAXX<span class=\"es0\">\\n</span>'</span><br/>                                   \u00a0:<span class=\"br0\">(</span>value<span class=\"sy0\">+</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> log<br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 17, "block": "<pre class=\"haskell highlighted_source\">fizz <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>fizz a xs<br/>    <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a> result <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> a<br/>    <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a>   <span class=\"sy0\">=</span> result<br/>    <span class=\"kw1\">where</span> result <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <span class=\"br0\">(</span>fizz<span class=\"st0\">' a) xs<br/>          fizz'</span> a <span class=\"br0\">(</span>factor<span class=\"sy0\">,</span> str<span class=\"br0\">)</span><br/>              <span class=\"sy0\">|</span> a `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` factor <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> str<br/>              <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a>           <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    line <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:getLine\"><span class=\"kw3\">getLine</span></a><br/>    <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> line<br/>    contents <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:getContents\"><span class=\"kw3\">getContents</span></a><br/>    <span class=\"kw1\">let</span> multiples <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>convert <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:words\"><span class=\"kw3\">words</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lines\"><span class=\"kw3\">lines</span></a> contents<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span>\\ x <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> fizz x multiples<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>n<span class=\"br0\">]</span><br/>    <span class=\"kw1\">where</span> convert <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 5, "block": "<pre class=\"j highlighted_source\">genfb=:<span class=\"nu0\">1</span>\u00a0:<span class=\"nu0\">0</span><br/>:<br/>  b=. * <span class=\"kw2\">x</span>|/<span class=\"nu0\">1</span>+i.<span class=\"kw2\">y</span><br/>  &gt;,&amp;\":&amp;.&gt;/<span class=\"sy0\">(</span><span class=\"kw2\">m</span>#inv\"<span class=\"nu0\">_1</span>~-.b<span class=\"sy0\">)</span>,<span class=\"sy0\">(</span>*/b<span class=\"sy0\">)</span>#&amp;.&gt;<span class=\"nu0\">1</span>+i.<span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 29, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> FizzBuzz <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Sound<span class=\"br0\">[</span><span class=\"br0\">]</span> sounds <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"kw1\">new</span> Sound<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"st0\">\"Fizz\"</span><span class=\"br0\">)</span>, <span class=\"kw1\">new</span> Sound<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"st0\">\"Buzz\"</span><span class=\"br0\">)</span>,  <span class=\"kw1\">new</span> Sound<span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"st0\">\"Baxx\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            StringBuilder sb <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Sound sound <span class=\"sy0\">:</span> sounds<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                sb.<span class=\"me1\">append</span><span class=\"br0\">(</span>sound.<span class=\"me1\">generate</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>sb.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> i <span class=\"sy0\">:</span> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> Sound <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> trigger<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> onomatopoeia<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Sound<span class=\"br0\">(</span><span class=\"kw4\">int</span> trigger, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> onomatopoeia<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">trigger</span> <span class=\"sy0\">=</span> trigger<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">onomatopoeia</span> <span class=\"sy0\">=</span> onomatopoeia<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> generate<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> i <span class=\"sy0\">%</span> trigger <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> onomatopoeia <span class=\"sy0\">:</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 9, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> fizz<span class=\"br0\">(</span>d<span class=\"sy0\">,</span> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw1\">function</span> b<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> a <span class=\"sy0\">?</span> b<span class=\"br0\">(</span>a <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>b<span class=\"sy0\">,</span> a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> b <span class=\"sy0\">+</span> <span class=\"br0\">(</span>d.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>b<span class=\"sy0\">,</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> b <span class=\"sy0\">+</span> <span class=\"br0\">(</span>a <span class=\"sy0\">%</span> c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">:</span> c<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> a.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 29, "block": "<pre class=\"text highlighted_source\">function fizzbuzz(triggers\u00a0:: Vector{Tuple{Int, ASCIIString}}, upper\u00a0:: Int)<br/>    for i = 1\u00a0: upper<br/>        triggered = false<br/>\u00a0<br/>        for trigger in triggers<br/>            if i\u00a0% trigger[1] == 0<br/>                triggered = true<br/>                print(trigger[2])<br/>            end<br/>        end<br/>\u00a0<br/>       \u00a0!triggered &amp;&amp; print(i)<br/>        println()<br/>    end<br/>end<br/>\u00a0<br/>print(\"Enter upper limit:\\n&gt; \")<br/>upper = parse(Int, readline())<br/>\u00a0<br/>triggers = Tuple{Int, ASCIIString}[]<br/>print(\"Enter factor/string pairs (space delimited; ^D when done):\\n&gt; \")<br/>while (r = readline())\u00a0!= \"\"<br/>    input = split(r)<br/>    push!(triggers, (parse(Int, input[1]), input[2]))<br/>    print(\"&gt; \")<br/>end<br/>\u00a0<br/>println(\"EOF\\n\")<br/>fizzbuzz(triggers, upper)</pre>"}, {"lang": "Kotlin", "loc": 28, "block": "<pre class=\"text highlighted_source\">fun main(args: Array&lt;String&gt;) {<br/>\u00a0<br/>    //Read the maximum number, set to 0 if it couldn't be read<br/>    val max = readLine()?.toInt()\u00a0?: 0<br/>    val words = mutableMapOf&lt;Int, String&gt;()<br/>\u00a0<br/>    //Read input three times for a factor and a word<br/>    (1..3).forEach {<br/>        readLine()?.let {<br/>            val tokens = it.split(' ')<br/>            words.put(tokens[0].toInt(), tokens[1])<br/>        }<br/>    }<br/>\u00a0<br/>    //Sort the words so they will be output in arithmetic order<br/>    val sortedWords = words.toSortedMap()<br/>\u00a0<br/>    //Find the words with matching factors and print them, print the number if no factors match<br/>    for (i in 1..max) {<br/>        val wordsToPrint = sortedWords.filter { i\u00a0% it.key == 0 }.map { it.value }<br/>        if (wordsToPrint.isNotEmpty()) {<br/>            wordsToPrint.forEach { print(it) }<br/>            println()<br/>        }<br/>        else<br/>            println(i)<br/>    }<br/>}</pre>"}, {"lang": "LiveCode", "loc": 22, "block": "<pre class=\"text highlighted_source\">function generalisedFizzBuzz m, f1, f2, f3<br/>    put f1 &amp; cr &amp; f2 &amp; cr &amp; f3 into factors<br/>    sort factors ascending numeric<br/>    repeat with i = 1 to m<br/>        put false into flag<br/>        if i mod (word 1 of line 1 of factors) = 0 then<br/>            put word 2 of line 1 of factors after fizzbuzz<br/>            put true into flag<br/>        end if<br/>        if i mod (word 1 of line 2 of factors) = 0 then<br/>            put word 2 of line 2 of factors after fizzbuzz<br/>            put true into flag<br/>        end if<br/>        if i mod (word 1 of line 3 of factors) = 0 then<br/>            put word 2 of line 3 of factors after fizzbuzz<br/>            put true into flag<br/>        end if<br/>        if flag is false then put i after fizzbuzz<br/>        put cr after fizzbuzz<br/>    end repeat<br/>    return fizzbuzz<br/>end generalisedFizzBuzz</pre>"}, {"lang": "Lua", "loc": 20, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> genFizz <span class=\"br0\">(</span>param<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> response<br/>  <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> param<span class=\"sy0\">.</span>limit <span class=\"kw1\">do</span><br/>    response <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> n <span class=\"sy0\">%</span> param<span class=\"sy0\">.</span>factor<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        response <span class=\"sy0\">=</span> response <span class=\"sy0\">..</span> param<span class=\"sy0\">.</span>word<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> response <span class=\"sy0\">==</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span>response<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> param <span class=\"sy0\">=</span> <span class=\"br0\">{</span>factor <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> word <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>param<span class=\"sy0\">.</span>limit <span class=\"sy0\">=</span> <span class=\"kw3\">io.read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"kw1\">do</span><br/>  param<span class=\"sy0\">.</span>factor<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> param<span class=\"sy0\">.</span>word<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">io.read</span><span class=\"br0\">(</span><span class=\"st0\">\"*number\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"*line\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>genFizz<span class=\"br0\">(</span>param<span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 32, "block": "<pre class=\"text highlighted_source\">findNum\u00a0:= proc(str) #help parse input<br/>\tlocal i;<br/>\ti\u00a0:= 1:<br/>\twhile (true) do<br/>\t\tif (StringTools:-IsAlpha(str[i])) then<br/>\t\t\treturn i-2:<br/>\t\tend if:<br/>\t\ti\u00a0:= i+1:<br/>\tend do:<br/>end proc:<br/>path\u00a0:= \"input.txt\";<br/>input\u00a0:= readline(path):<br/>T\u00a0:= table():<br/>maxnum\u00a0:= parse(input):<br/>while (true) do<br/>\tinput\u00a0:= readline(path):<br/>\tif input = 0 then break; end if:<br/>\tpos\u00a0:= findNum(input):<br/>\tnum\u00a0:= parse(input[..pos]):<br/>\tT[num]\u00a0:= input[pos+2..]:<br/>end do:<br/>for i from 1 to maxnum do<br/>\tfactored\u00a0:= false:<br/>\tfor j in [indices(T)] do<br/>\t\tif i mod j[1] = 0 then<br/>\t\t\tfactored\u00a0:= true:<br/>\t\t\tprintf(T[j[1]]);<br/>\t\tend if:<br/>\tend do:<br/>\tif (not factored) then printf(\"%d\", i): end if:<br/>\tprintf(\"\\n\");<br/>end do:</pre>"}, {"lang": "Mathematica", "loc": 6, "block": "<pre class=\"text highlighted_source\">list={{5,\"Buzz\"},{3,\"Fizz\"},{7,\"Baxx\"}};<br/>runTo=(*<a class=\"__cf_email__\" data-cfemail=\"e8a4aba5a8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@list[[All,1]]+1*)20;<br/><a class=\"__cf_email__\" data-cfemail=\"f7b4989b829a99b7a396959b92\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[<br/> Select[list,Mod[x,#[[1]]]==0&amp;][[All,2]]/.{}-&gt;{x}<br/> ,{x,1,runTo}<br/>]</pre>"}, {"lang": "Modula-2", "loc": 103, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> GeneralFizzBuzz;<br/><span class=\"kw1\">FROM</span> Conversions <span class=\"kw1\">IMPORT</span> StrToInt;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> Write<span class=\"sy0\">,</span>WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span><br/>    Word <span class=\"sy0\">=</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> WriteInt<span class=\"br0\">(</span>i <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span> buf <span class=\"sy0\">:</span> Word;<br/><span class=\"kw1\">BEGIN</span><br/>    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%i\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> i<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> WriteInt;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> ReadInt<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">9</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    c <span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span>;<br/>    i <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">LOOP</span><br/>        c <span class=\"sy0\">:=</span> ReadChar<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>c<span class=\"sy0\">=</span>0C<span class=\"br0\">)</span> <span class=\"kw1\">OR</span> <span class=\"br0\">(</span>i&gt;<span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>            BREAK<br/>        <span class=\"kw1\">ELSIF</span> <span class=\"br0\">(</span>c<span class=\"sy0\">=</span>012C<span class=\"br0\">)</span> <span class=\"kw1\">OR</span> <span class=\"br0\">(</span>c<span class=\"sy0\">=</span>015C<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>            WriteLn;<br/>            buf<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> 0C;<br/>            BREAK<br/>        <span class=\"kw1\">ELSIF</span> <span class=\"br0\">(</span>c&lt;<span class=\"st_h\">'0'</span><span class=\"br0\">)</span> <span class=\"kw1\">OR</span> <span class=\"br0\">(</span>c&gt;<span class=\"st_h\">'9'</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>            Write<span class=\"br0\">(</span>c<span class=\"br0\">)</span>;<br/>            buf<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> 0C;<br/>            BREAK<br/>        <span class=\"kw1\">ELSE</span><br/>            Write<span class=\"br0\">(</span>c<span class=\"br0\">)</span>;<br/>            buf<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> c;<br/>            <span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span>;<br/>    StrToInt<span class=\"br0\">(</span>buf<span class=\"sy0\">,</span> i<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">RETURN</span> i<br/><span class=\"kw1\">END</span> ReadInt;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> ReadLine<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> Word;<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> Word;<br/>    i <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>    c <span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">WHILE</span> i&lt;<span class=\"kw3\">HIGH</span><span class=\"br0\">(</span>buf<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>        c <span class=\"sy0\">:=</span> ReadChar<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>c<span class=\"sy0\">=</span>0C<span class=\"br0\">)</span> <span class=\"kw1\">OR</span> <span class=\"br0\">(</span>c<span class=\"sy0\">=</span>012C<span class=\"br0\">)</span> <span class=\"kw1\">OR</span> <span class=\"br0\">(</span>c<span class=\"sy0\">=</span>015C<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>            WriteLn;<br/>            buf<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> 0C;<br/>            BREAK<br/>        <span class=\"kw1\">ELSE</span><br/>            Write<span class=\"br0\">(</span>c<span class=\"br0\">)</span>;<br/>            buf<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> c;<br/>            <span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> buf;<br/><span class=\"kw1\">END</span> ReadLine;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>    i<span class=\"sy0\">,</span>max <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>    fa<span class=\"sy0\">,</span>fb<span class=\"sy0\">,</span>fc <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>    wa<span class=\"sy0\">,</span>wb<span class=\"sy0\">,</span>wc <span class=\"sy0\">:</span> Word;<br/>    done <span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    max <span class=\"sy0\">:=</span> ReadInt<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    fa <span class=\"sy0\">:=</span> ReadInt<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>    wa <span class=\"sy0\">:=</span> ReadLine<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>    fb <span class=\"sy0\">:=</span> ReadInt<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>    wb <span class=\"sy0\">:=</span> ReadLine<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>    fc <span class=\"sy0\">:=</span> ReadInt<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>    wc <span class=\"sy0\">:=</span> ReadLine<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> max <span class=\"kw1\">DO</span><br/>        done <span class=\"sy0\">:=</span> <span class=\"kw2\">FALSE</span>;<br/>        <span class=\"kw1\">IF</span> i <span class=\"kw1\">MOD</span> fa <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>            done <span class=\"sy0\">:=</span> <span class=\"kw2\">TRUE</span>;<br/>            WriteString<span class=\"br0\">(</span>wa<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">END</span>;<br/>        <span class=\"kw1\">IF</span> i <span class=\"kw1\">MOD</span> fb <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>            done <span class=\"sy0\">:=</span> <span class=\"kw2\">TRUE</span>;<br/>            WriteString<span class=\"br0\">(</span>wb<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">END</span>;<br/>        <span class=\"kw1\">IF</span> i <span class=\"kw1\">MOD</span> fc <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>            done <span class=\"sy0\">:=</span> <span class=\"kw2\">TRUE</span>;<br/>            WriteString<span class=\"br0\">(</span>wc<span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">END</span>;<br/>        <span class=\"kw1\">IF</span> <span class=\"kw1\">NOT</span> done <span class=\"kw1\">THEN</span><br/>            WriteInt<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">END</span>;<br/>        WriteLn;<br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> GeneralFizzBuzz.</pre>"}, {"lang": "Nim", "loc": 47, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import parseutils, strutils, algorithm<br/>\u00a0<br/>type FactorAndWord = tuple[factor:int, word: string]<br/>\u00a0<br/>var number: int<br/>var factorAndWords: array[3, FactorAndWord]<br/>\u00a0<br/>#custom comparison proc for the FactorAndWord type<br/>proc customCmp(x,y: FactorAndWord): int =<br/>  if x.factor &lt; y.factor:<br/>    -1<br/>  elif x.factor &gt; y.factor:<br/>    1<br/>  else:<br/>    0<br/>\u00a0<br/>echo \"Enter max number:\"<br/>var input = readLine(stdin)<br/>discard parseInt(input, number)<br/>\u00a0<br/>for i in 0..2:<br/>\u00a0<br/>  echo \"Enter a number and word separated by space:\"<br/>  var input = readLine(stdin)<br/>\u00a0<br/>  var tokens = input.split<br/>  discard parseInt(tokens[0], factorAndWords[i].factor)<br/>  factorAndWords[i].word = tokens[1]<br/>\u00a0<br/>#sort factors in ascending order<br/>sort(factorAndWords, customCmp)<br/>\u00a0<br/>#implement fiz buz<br/>for i in 1..number:<br/>  var written = false;<br/>  for item in items(factorAndWords):<br/>    if i mod item.factor == 0\u00a0:<br/>      write(stdout, item.word)<br/>      written = true<br/>  if written\u00a0:<br/>    write(stdout, \"\\n\")<br/>  else\u00a0:<br/>    writeLine(stdout, i)<br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 15, "block": "<pre class=\"parigp highlighted_source\">fizz<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>v<span class=\"br0\">[</span>..<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><br/><span class=\"br0\">{</span><br/>\tv<span class=\"sy0\">=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span><br/>\t\tmy<span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>k<span class=\"sy0\">%</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><br/>\t\t\t\t<span class=\"kw1\">print1</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tt<span class=\"sy0\">=</span><span class=\"nu1\">1</span><br/>\t\t\t<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>fizz<span class=\"br0\">(</span><span class=\"nu1\">20</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span><span class=\"st0\">\"Fizz\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span><span class=\"st0\">\"Buzz\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu1\">7</span><span class=\"sy0\">,</span><span class=\"st0\">\"Baxx\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 53, "block": "<pre class=\"perl highlighted_source\">\u00a0<br/><span class=\"co1\">#!bin/usr/perl</span><br/><span class=\"kw2\">use</span> <span class=\"nu0\">5.020</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">#Get a max number from the user</span><br/>say<span class=\"br0\">(</span><span class=\"st0\">\"Please enter the maximum possible multiple. \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <span class=\"re4\">&lt;STDIN&gt;</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">#Get the factors from the user</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@factors</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$buffer</span><span class=\"sy0\">;</span><br/>say<span class=\"br0\">(</span><span class=\"st0\">\"Now enter the first factor and its associated word. Ex: 3 Fizz \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/chomp.html\"><span class=\"kw3\">chomp</span></a><span class=\"br0\">(</span><span class=\"re0\">$buffer</span> <span class=\"sy0\">=</span> <span class=\"re4\">&lt;STDIN&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@factors</span><span class=\"sy0\">,</span> <span class=\"re0\">$buffer</span><span class=\"sy0\">;</span><br/>say<span class=\"br0\">(</span><span class=\"st0\">\"Now enter the second factor and its associated word. Ex: 5 Buzz \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/chomp.html\"><span class=\"kw3\">chomp</span></a><span class=\"br0\">(</span><span class=\"re0\">$buffer</span> <span class=\"sy0\">=</span> <span class=\"re4\">&lt;STDIN&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@factors</span><span class=\"sy0\">,</span> <span class=\"re0\">$buffer</span><span class=\"sy0\">;</span><br/>say<span class=\"br0\">(</span><span class=\"st0\">\"Now enter the third factor and its associated word. Ex: 7 Baxx \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/chomp.html\"><span class=\"kw3\">chomp</span></a><span class=\"br0\">(</span><span class=\"re0\">$buffer</span> <span class=\"sy0\">=</span> <span class=\"re4\">&lt;STDIN&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@factors</span><span class=\"sy0\">,</span> <span class=\"re0\">$buffer</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">#Counting from 1 to max</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$max</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"co1\">#Create a secondary buffer as well as set the original buffer to the current index</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$oBuffer</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$buffer</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">#Run through each element in our array</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"kw1\">my</span> <span class=\"re0\">$element</span> <span class=\"br0\">(</span><span class=\"re0\">@factors</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">#Look for white space</span><br/>        <span class=\"re0\">$element</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/\\s/</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">#If the int is a factor of max, append it to oBuffer as a string to be printed</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">%</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$element</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"co5\">@-</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"re0\">$oBuffer</span> <span class=\"sy0\">=</span> <span class=\"re0\">$oBuffer</span> <span class=\"sy0\">.</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$element</span><span class=\"sy0\">,</span> <span class=\"co5\">@+</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$element</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\">#This is essentially setting a flag saying that at least one element is a factor</span><br/>            <span class=\"re0\">$buffer</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\">#If there are any factors for that number, print their words. If not, print the number.</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$buffer</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a><span class=\"br0\">(</span><span class=\"re0\">$buffer</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a><span class=\"br0\">(</span><span class=\"re0\">$oBuffer</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 28, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"co1\"># General case implementation of a \"FizzBuzz\" class.</span><br/><span class=\"co1\"># Defaults to standard FizzBuzz unless a new schema is passed in.</span><br/><span class=\"kw2\">class</span> FizzBuzz <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">schema</span> <span class=\"kw1\">is</span> rw <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span> Fizz <span class=\"nu0\">5</span> Buzz <span class=\"sy0\">&gt;.</span><span class=\"me1\">hash</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">method</span> filter <span class=\"br0\">(</span>Int <span class=\"re0\">$this</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$fb</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">schema</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"sy0\">+.</span><span class=\"me1\">key</span> <span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$p</span> <span class=\"br0\">{</span> <span class=\"re0\">$fb</span> <span class=\"sy0\">~=</span> <span class=\"re0\">$this</span> <span class=\"sy0\">%%</span> <span class=\"sy0\">+</span><span class=\"re0\">$p</span><span class=\"sy0\">.</span><span class=\"me1\">key</span> <span class=\"sy0\">??</span> <span class=\"re0\">$p</span><span class=\"sy0\">.</span><span class=\"me1\">value</span> <span class=\"sy0\">!!</span> <span class=\"st_h\">''</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$fb</span> <span class=\"sy0\">||</span> <span class=\"re0\">$this</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\"># Sub implementing the specific requirements of the task.</span><br/><span class=\"kw2\">sub</span> GeneralFizzBuzz <span class=\"br0\">(</span>Int <span class=\"re0\">$upto</span><span class=\"sy0\">,</span> <span class=\"re0\">@schema</span><span class=\"sy0\">?</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$ping</span> <span class=\"sy0\">=</span> FizzBuzz<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$ping</span><span class=\"sy0\">.</span><span class=\"me1\">schema</span> <span class=\"sy0\">=</span> <span class=\"re0\">@schema</span><span class=\"sy0\">.</span><span class=\"me1\">hash</span> <span class=\"kw1\">if</span> <span class=\"re0\">@schema</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"re0\">$ping</span><span class=\"sy0\">.</span><span class=\"me1\">filter</span><span class=\"sy0\">:</span> <span class=\"re0\">$_</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$upto</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># The task</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'Using: 20 '</span> <span class=\"sy0\">~</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span> Fizz <span class=\"nu0\">5</span> Buzz <span class=\"nu0\">7</span> Baxx<span class=\"sy0\">&gt;;</span><br/><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> GeneralFizzBuzz<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span> Fizz <span class=\"nu0\">5</span> Buzz <span class=\"nu0\">7</span> Baxx<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># And for fun</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'Using: 21 '</span> <span class=\"sy0\">~</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span> Pip <span class=\"nu0\">4</span> Squack <span class=\"nu0\">5</span> Pocketa <span class=\"nu0\">7</span> Queep<span class=\"sy0\">&gt;;</span><br/><span class=\"kw3\">say</span> <span class=\"kw3\">join</span> <span class=\"st_h\">', '</span><span class=\"sy0\">,</span> GeneralFizzBuzz<span class=\"br0\">(</span><span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span> Pip <span class=\"nu0\">4</span> Squack <span class=\"nu0\">5</span> Pocketa <span class=\"nu0\">7</span> Queep<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 15, "block": "<pre class=\"text highlighted_source\">procedure general_fizz_buzz(integer lim, sequence words, sequence facts)<br/>    for i=1 to lim do<br/>        string word = \"\"<br/>        for j=1 to length(facts) do<br/>            if remainder(i,facts[j])=0 then<br/>                word &amp;= words[j]<br/>            end if<br/>        end for<br/>        if length(word)=0 then<br/>            word = sprintf(\"%d\",i)<br/>        end if<br/>        printf(1,\"%s\\n\",{word})<br/>    end for<br/>end procedure<br/>general_fizz_buzz(20, {\"Fizz\",\"Buzz\",\"Baxx\"}, {3,5,7})</pre>"}, {"lang": "PicoLisp", "loc": 11, "block": "<pre class=\"text highlighted_source\">(de general (N Lst)<br/>   (for A N<br/>      (prinl<br/>         (or<br/>            (extract<br/>               '((L)<br/>                  (and (=0 (% A (car L))) (cdr L)) )<br/>               Lst )<br/>            A ) ) ) )<br/>\u00a0<br/>(general 20 '((3 . Fizz) (5 . Buzz) (7 . Baxx)))</pre>"}, {"lang": "PowerShell", "loc": 19, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$limit</span> <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><br/><span class=\"re0\">$data</span>  <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"st0\">\"3 Fizz\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"5 Buzz\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"7 Baxx\"</span><span class=\"br0\">)</span><br/>\t<span class=\"co1\">#An array with whitespace as the delimiter</span><br/>\t<span class=\"co1\">#Between the factor and the word</span><br/>\u00a0<br/><span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>;$i <span class=\"kw4\">-le</span> <span class=\"re0\">$limit</span>;$i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"re0\">$outP</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw3\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"kw3\">in</span> <span class=\"re0\">$data</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$data_split</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span> <span class=\"sy0\">-</span>split <span class=\"st0\">\" \"</span>\t<span class=\"co1\">#Split the \"&lt;factor&gt; &lt;word&gt;\"</span><br/>\t\t<span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">%</span> <span class=\"re0\">$data_split</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"re0\">$outP</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$data_split</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>\t<span class=\"co1\">#Append the &lt;word&gt; to outP</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"re0\">$outP</span><span class=\"br0\">)</span><span class=\"br0\">{</span>\t<span class=\"co1\">#Is outP equal to NUL?</span><br/>\t\t<span class=\"kw1\">Write-HoSt</span> <span class=\"re0\">$i</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">Write-HoSt</span> <span class=\"re0\">$outP</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Python", "loc": 10, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> genfizzbuzz<span class=\"br0\">(</span>factorwords<span class=\"sy0\">,</span> numbers<span class=\"br0\">)</span>:<br/>    factorwords.<span class=\"me1\">sort</span><span class=\"br0\">(</span>key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> p: p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    lines <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> num <span class=\"kw1\">in</span> numbers:<br/>        words <span class=\"sy0\">=</span> <span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>wrd <span class=\"kw1\">for</span> fact<span class=\"sy0\">,</span> wrd <span class=\"kw1\">in</span> factorwords <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num\u00a0% fact<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        lines.<span class=\"me1\">append</span><span class=\"br0\">(</span>words <span class=\"kw1\">if</span> words <span class=\"kw1\">else</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>lines<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>genfizzbuzz<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st0\">'Buzz'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">'Fizz'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"st0\">'Baxx'</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 19, "block": "<pre class=\"text highlighted_source\">#lang racket/base<br/>\u00a0<br/>(define (get-matches num factors/words)<br/>  (for*/list ([factor/word (in-list factors/words)]<br/>              [factor (in-value (car factor/word))]<br/>              [word (in-value (cadr factor/word))] <br/>              #:when (zero? (remainder num factor)))<br/>    word))<br/>\u00a0<br/>(define (gen-fizzbuzz from to factors/words)<br/>  (for ([num (in-range from to)])<br/>    (define matches (get-matches num factors/words))<br/>    (displayln (if (null? matches)<br/>                  (number-&gt;string num)<br/>                  (apply string-append matches)))))<br/>\u00a0<br/>(gen-fizzbuzz 1 21 '((3 \"Fizz\")<br/>                     (5 \"Buzz\")<br/>                     (7 \"Baxx\")))</pre>"}, {"lang": "REXX", "loc": 11, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program shows a generalized  FizzBuzz  program:  #1 name1    #2 name2   \u00b7\u00b7\u00b7      */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> h $                                    <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> h=<span class=\"st0\">''</span> <span class=\"sy0\">|</span> h=<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> h=<span class=\"nu0\">20</span>                       <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> $=<span class=\"st0\">''</span> <span class=\"sy0\">|</span> $=<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> $= <span class=\"st0\">\"3 Fizz 5 Buzz 7 Baxx\"</span>  <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> h;             _=                  <span class=\"coMULTI\">/*traipse through the numbers to   H.  */</span><br/>    <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>\u00a0% <span class=\"nu0\">2</span>               <span class=\"coMULTI\">/*   \"       \"     \" factors  in   J.  */</span><br/>    <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>$,k<span class=\"br0\">)</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> _=_ <span class=\"sy0\">||</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>$,k+<span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*Is it a factor?  Then append it to _ */</span><br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                                  <span class=\"coMULTI\">/* [\u2191]  Note:  the factors may be zero.*/</span><br/>  <span class=\"kw1\">say</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>_ j,<span class=\"nu0\">1</span><span class=\"br0\">)</span>                                <span class=\"coMULTI\">/*display the number  or  its factors. */</span><br/>  <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*j*/</span>                                  <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>limit = 20<br/>for n = 1 to limit<br/>    if n\u00a0% 3 = 0 see \"\" + n + \" = \" + \"Fizz\"+ nl<br/>    but n\u00a0% 5 = 0 see \"\" + n + \" = \" + \"Buzz\" + nl<br/>    but n\u00a0% 7 = 0 see \"\" + n + \" = \" + \"Baxx\" + nl<br/>    else see \"\" + n + \" = \" + n + nl ok<br/>next<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 18, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> general_fizzbuzz<span class=\"br0\">(</span>text<span class=\"br0\">)</span><br/>  num, <span class=\"sy0\">*</span>nword = text.<span class=\"kw3\">split</span><br/>  num = num.<span class=\"me1\">to_i</span><br/>  dict = nword.<span class=\"me1\">each_slice</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>n,word<span class=\"sy0\">|</span> <span class=\"br0\">[</span>n.<span class=\"me1\">to_i</span>,word<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">num</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>    str = dict.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>n,word<span class=\"sy0\">|</span> word <span class=\"kw1\">if</span> i<span class=\"sy0\">%</span>n==<span class=\"nu0\">0</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><br/>    <span class=\"kw3\">puts</span> str.<span class=\"me1\">empty</span>?\u00a0? i\u00a0: str<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>text = <span class=\"co4\">&lt;&lt;EOS<br/>20<br/>3 Fizz<br/>5 Buzz<br/>7 Baxx<br/>EOS</span><br/>\u00a0<br/>general_fizzbuzz<span class=\"br0\">(</span>text<span class=\"br0\">)</span></pre>"}, {"lang": "Rust", "loc": 39, "block": "<pre class=\"text highlighted_source\">use std::io;<br/>use std::io::BufRead;<br/>\u00a0<br/>fn parse_entry(l: &amp;str) -&gt; (i32, String) {<br/>    let params: Vec&lt;&amp;str&gt; = l.split(' ').collect();<br/>\u00a0<br/>    let divisor = params[0].parse::&lt;i32&gt;().unwrap();<br/>    let word = params[1].to_string();<br/>    (divisor, word)<br/>}<br/>\u00a0<br/>fn main() {<br/>    let stdin = io::stdin();<br/>    let mut lines = stdin.lock().lines().map(|l| l.unwrap());<br/>\u00a0<br/>    let l = lines.next().unwrap();<br/>    let high = l.parse::&lt;i32&gt;().unwrap();<br/>\u00a0<br/>    let mut entries = Vec::new();<br/>    for l in lines {<br/>        if &amp;l == \"\" { break }<br/>        let entry = parse_entry(&amp;l);<br/>        entries.push(entry);<br/>    }<br/>\u00a0<br/>    for i in 1..(high + 1) {<br/>        let mut line = String::new();<br/>        for &amp;(divisor, ref word) in &amp;entries {<br/>            if i\u00a0% divisor == 0 {<br/>                line = line + &amp;word;<br/>            }<br/>        }<br/>        if line == \"\" {<br/>            println!(\"{}\", i);<br/>        } else {<br/>            println!(\"{}\", line);<br/>        }<br/>    }<br/>}</pre>"}, {"lang": "Sidef", "loc": 19, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> FizzBuzz<span class=\"br0\">(</span>schema=<span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span> Fizz <span class=\"nu0\">5</span> Buzz<span class=\"sy0\">&gt;</span>...<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    method filter<span class=\"br0\">(</span>this<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        var fb = <span class=\"st0\">''</span><br/>        schema.<span class=\"me1\">sort_by</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>k,_<span class=\"sy0\">|</span> k.<span class=\"me1\">to_i</span> <span class=\"br0\">}</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>pair<span class=\"sy0\">|</span><br/>            fb <span class=\"sy0\">+</span>= <span class=\"br0\">(</span>pair<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">to_i</span> <span class=\"st0\">`divides`</span> this\u00a0? pair<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>\u00a0: <span class=\"st0\">''</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        fb.<span class=\"me1\">len</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span>\u00a0? fb\u00a0: this<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func GeneralFizzBuzz<span class=\"br0\">(</span>upto, schema<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var ping = FizzBuzz<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw2\">nil</span>\u00a0!= schema<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        ping.<span class=\"me1\">schema</span> = schema.<span class=\"me1\">to_hash</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">upto</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> ping.<span class=\"me1\">filter</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>GeneralFizzBuzz<span class=\"br0\">(</span><span class=\"nu0\">20</span>, <span class=\"sy0\">&lt;</span><span class=\"nu0\">3</span> Fizz <span class=\"nu0\">5</span> Buzz <span class=\"nu0\">7</span> Baxx<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> .<span class=\"me1\">say</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Scala", "loc": 11, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> GenericFizzBuzz <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> max <span class=\"sy0\">=</span> io.<span class=\"me1\">StdIn</span>.<span class=\"me1\">readInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> factors <span class=\"sy0\">=</span> io.<span class=\"me1\">Source</span>.<span class=\"me1\">stdin</span>.<span class=\"me1\">getLines</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">toSeq</span>.<span class=\"me1\">sorted</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>f <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span> -<span class=\"sy0\">&gt;</span> f<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"nu0\">1</span> to max foreach <span class=\"br0\">{</span> i <span class=\"sy0\">=&gt;</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> words <span class=\"sy0\">=</span> factors collect <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>k, v<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> i <span class=\"sy0\">%</span> k <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> v <span class=\"br0\">}</span><br/>      println<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>words.<span class=\"me1\">nonEmpty</span><span class=\"br0\">)</span> words.<span class=\"me1\">mkString</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> i<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 15, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> fizzbuzz <span class=\"br0\">{</span>n args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$args</span> eq <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> args <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">3</span> Fizz<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">5</span> Buzz<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> out <span class=\"st0\">\"\"</span><br/>        <span class=\"kw1\">foreach</span> rule <span class=\"re0\">$args</span> <span class=\"br0\">{</span><br/>            lassign <span class=\"re0\">$rule</span> m echo<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">%</span> <span class=\"re0\">$m</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">append</span> out <span class=\"re0\">$echo</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$out</span> eq <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> out <span class=\"re0\">$i</span><span class=\"br0\">}</span><br/>        <span class=\"kw2\">puts</span> <span class=\"re0\">$out</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>fizzbuzz <span class=\"nu0\">20</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span> Fizz<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">5</span> Buzz<span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"nu0\">7</span> Baxx<span class=\"br0\">}</span></pre>"}, {"lang": "Ursa", "loc": 41, "block": "<pre class=\"text highlighted_source\">#<br/># general fizzbuzz<br/>#<br/>decl int&lt;&gt; factors<br/>decl string&lt;&gt; words<br/>decl int max<br/>\u00a0<br/># get the max number<br/>out \"&gt;\" console<br/>set max (in int console)<br/>\u00a0<br/># get the factors<br/>decl string input<br/>set input \" \"<br/>while (not (= input \"\"))<br/>        out \"&gt;\" console<br/>        set input (in string console)<br/>        if (not (= input \"\"))<br/>                append (int (split input \" \")&lt;0&gt;) factors<br/>                append (split input \" \")&lt;1&gt; words<br/>        end if<br/>end while<br/>\u00a0<br/># output all the numbers<br/>decl int i<br/>for (set i 1) (&lt; i (+ max 1)) (inc i)<br/>        decl boolean foundfactor<br/>        set foundfactor false<br/>        for (decl int j) (&lt; j (size factors)) (inc j)<br/>                if (= (mod i factors&lt;j&gt;) 0)<br/>                        set foundfactor true<br/>                        out words&lt;j&gt; console<br/>                end if<br/>        end for<br/>        set j 0<br/>\u00a0<br/>        if (not foundfactor)<br/>                out i console<br/>        end if<br/>        out endl console<br/>end for</pre>"}, {"lang": "VBA", "loc": 35, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw4\">Type</span> Choice<br/>    Number <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>    Name <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/><span class=\"kw3\">End</span> <span class=\"kw4\">Type</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> MaxNumber <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main()<br/><span class=\"kw4\">Dim</span> U(1 <span class=\"kw3\">To</span> 3) <span class=\"kw4\">As</span> Choice, i <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, t$<br/>\u00a0<br/>    MaxNumber = Application.InputBox(<span class=\"st0\">\"Enter the max number\u00a0: \"</span>, <span class=\"st0\">\"Integer please\"</span>, <span class=\"kw4\">Type</span>:=1)<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 3<br/>        U(i) = UserChoice<br/>    <span class=\"kw3\">Next</span><br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> MaxNumber<br/>        t = vbNullString<br/>        <span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> 3<br/>            <span class=\"kw3\">If</span> i <span class=\"kw4\">Mod</span> U(j).Number = 0 <span class=\"kw3\">Then</span> t = t &amp; U(j).Name<br/>        <span class=\"kw3\">Next</span><br/>        Debug.<span class=\"kw4\">Print</span> IIf(t = vbNullString, i, t)<br/>    <span class=\"kw3\">Next</span> i<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> UserChoice() <span class=\"kw4\">As</span> Choice<br/><span class=\"kw4\">Dim</span> ok <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>\u00a0<br/>    <span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> <span class=\"kw3\">Not</span> ok<br/>        UserChoice.Number = Application.InputBox(<span class=\"st0\">\"Enter the factors to be calculated\u00a0: \"</span>, <span class=\"st0\">\"Integer please\"</span>, <span class=\"kw4\">Type</span>:=1)<br/>        UserChoice.Name = InputBox(<span class=\"st0\">\"Enter the corresponding word\u00a0: \"</span>)<br/>        <span class=\"kw3\">If</span> StrPtr(UserChoice.Name) &lt;&gt; 0 <span class=\"kw3\">And</span> UserChoice.Number &lt; MaxNumber <span class=\"kw3\">Then</span> ok = <span class=\"kw5\">True</span><br/>    <span class=\"kw3\">Loop</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "VBScript", "loc": 34, "block": "<pre class=\"vb highlighted_source\"><span class=\"co1\">'The Function<br/></span><span class=\"kw2\">Function</span> FizzBuzz(range, mapping)<br/>    data = Array()<br/>\u00a0<br/>    <span class=\"co1\">'Parse the mapping and put to \"data\" array<br/></span>    temp = Split(mapping, <span class=\"st0\">\",\"</span>)<br/>    <span class=\"kw4\">ReDim</span> data(<span class=\"kw4\">UBound</span>(temp),1)<br/>    <span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(temp)<br/>        map = Split(temp(i), <span class=\"st0\">\" \"</span>)<br/>        data(i, 0) = map(0)<br/>        data(i, 1) = map(1)<br/>    <span class=\"kw3\">Next</span>    <br/>\u00a0<br/>    <span class=\"co1\">'Do the loop<br/></span>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">to</span> range<br/>        noMatch = <span class=\"kw5\">True</span><br/>        <span class=\"kw3\">For</span> j = 0 <span class=\"kw3\">to</span> <span class=\"kw4\">UBound</span>(data, 1)<br/>            <span class=\"kw3\">If</span> (i <span class=\"kw4\">Mod</span> data(j, 0)) = 0 <span class=\"kw3\">Then</span><br/>                WScript.StdOut.Write data(j, 1)<br/>                noMatch = <span class=\"kw5\">False</span><br/>            <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>        <span class=\"kw3\">Next</span><br/>        <span class=\"kw3\">If</span> noMatch <span class=\"kw3\">Then</span> WScript.StdOut.Write i<br/>        WScript.StdOut.Write vbCrLf<br/>    <span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'The Main Thing<br/></span>WScript.StdOut.Write <span class=\"st0\">\"Range? \"</span><br/>x = WScript.StdIn.ReadLine<br/>WScript.StdOut.Write <span class=\"st0\">\"Mapping? \"</span><br/>y = WScript.StdIn.ReadLine<br/>WScript.StdOut.WriteLine <span class=\"st0\">\"\"</span><br/>FizzBuzz x, y</pre>"}, {"lang": "zkl", "loc": 7, "block": "<pre class=\"text highlighted_source\">stop:=ask(\"Count: \").toInt();<br/>fizzBuzzers:=List(); <br/>do(3){ n,txt:=ask(\"&gt;\").split(); fizzBuzzers.append(T(n.toInt(),txt)) }<br/>foreach n in ([1..stop]){<br/>   s:=fizzBuzzers.filter('wrap([(fb,txt)]){ n%fb==0 }).apply(\"get\",1).concat();<br/>   println(s or n);<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 15, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> INPUT <span class=\"st0\">\"Maximum number: \"</span>;max<br/><span class=\"nu0\">20</span> INPUT <span class=\"st0\">\"Number of factors: \"</span>;n<br/><span class=\"nu0\">30</span> <span class=\"kw1\">DIM</span> f<span class=\"br0\">(</span>n<span class=\"br0\">)</span>: <span class=\"kw1\">DIM</span> w$<span class=\"br0\">(</span>n,<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n<br/><span class=\"nu0\">50</span> INPUT <span class=\"st0\">\"Input value-ENTER-word: \"</span>;f<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;w$<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">70</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> max<br/><span class=\"nu0\">80</span> <span class=\"kw1\">LET</span> matched=<span class=\"nu0\">0</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">FOR</span> j=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n<br/><span class=\"nu0\">100</span> <span class=\"kw1\">IF</span> FN m<span class=\"br0\">(</span>i,f<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span>=<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> matched=<span class=\"nu0\">1</span>: <span class=\"kw1\">PRINT</span> w$<span class=\"br0\">(</span>j<span class=\"br0\">)</span>;<br/><span class=\"nu0\">110</span> <span class=\"kw1\">NEXT</span> j<br/><span class=\"nu0\">120</span> <span class=\"kw1\">IF</span> <span class=\"kw4\">NOT</span> matched <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span>\u00a0;i: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">140</span><br/><span class=\"nu0\">130</span> <span class=\"kw1\">PRINT</span> <br/><span class=\"nu0\">140</span> <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">150</span> DEF FN m<span class=\"br0\">(</span>a,b<span class=\"br0\">)</span>=a-<span class=\"kw3\">INT</span> <span class=\"br0\">(</span>a/b<span class=\"br0\">)</span>*b</pre>"}]}