{"task": "Tokenize_a_string", "blocks": [{"lang": "360 Assembly", "loc": 83, "block": "<pre class=\"text highlighted_source\">*        Tokenize a string -       08/06/2018<br/>TOKSTR   CSECT<br/>         USING  TOKSTR,R13         base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         SAVE   (14,12)            save previous context<br/>         ST     R13,4(R15)         link backward<br/>         ST     R15,8(R13)         link forward<br/>         LR     R13,R15            set addressability<br/>         MVC    N,=A(1)            n=1<br/>         LA     R7,1               i1=1<br/>         LA     R6,1               i=1<br/>       DO WHILE=(C,R6,LE,LENS)     do i=1 to length(s);<br/>         LA     R4,S-1             @s-1<br/>         AR     R4,R6              +i<br/>         MVC    C,0(R4)            c=substr(s,i,1)<br/>       IF CLI,C,EQ,C',' THEN       if c=',' then do<br/>         BAL    R14,TOK              call tok<br/>         LR     R2,R8                i2<br/>         SR     R2,R7                i2-i1<br/>         LA     R2,1(R2)             i2-i1+1<br/>         L      R1,N                 n<br/>         SLA    R1,1                 *2<br/>         STH    R2,TALEN-2(R1)       talen(n)=i2-i1+1<br/>         L      R2,N                 n<br/>         LA     R2,1(R2)             n+1<br/>         ST     R2,N                 n=n+1<br/>         LA     R7,1(R6)             i1=i+1<br/>       ENDIF    ,                    endif <br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         BAL    R14,TOK            call tok<br/>         LR     R2,R8              i2<br/>         SR     R2,R7              i2-i1<br/>         LA     R2,1(R2)           i2-i1+1<br/>         L      R1,N               n<br/>         SLA    R1,1               *2<br/>         STH    R2,TALEN-2(R1)     talen(n)=i2-i1+1<br/>         LA     R11,PG             <a class=\"__cf_email__\" data-cfemail=\"fc8c9b95c1bc8c9b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>         LA     R6,1               i=1<br/>       DO WHILE=(C,R6,LE,N)        do i=1 to n<br/>         LR     R1,R6                i<br/>         SLA    R1,1                 *2<br/>         LH     R10,TALEN-2(R1)      l=talen(i)<br/>         LR     R1,R6                i<br/>         SLA    R1,3                 *8<br/>         LA     R4,TABLE-8(R1)       @table(i)<br/>         LR     R2,R10               l<br/>         BCTR   R2,0                 ~<br/>         EX     R2,MVCX              output table(i) length(l)<br/>         AR     R11,R10              pgi=pgi+l<br/>       IF C,R6,NE,N THEN             if i^=n then <br/>         MVC    0(1,R11),=C'.'         output '.'<br/>         LA     R11,1(R11)             pgi=pgi+1<br/>       ENDIF    ,                    endif <br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         XPRNT  PG,L'PG            print<br/>         L      R13,4(0,R13)       restore previous savearea pointer<br/>         RETURN (14,12),RC=0       restore registers from calling sav<br/>TOK      LR     R5,R6              i                              &lt;--<br/>         BCTR   R5,0               i-1                              |<br/>         LR     R8,R5              i2=i-1<br/>         SR     R5,R7              i2-i1<br/>         LA     R5,1(R5)           l=i2-i1+1  source length<br/>         L      R1,N               n<br/>         SLA    R1,3               *8<br/>         LA     R2,TABLE-8(R1)     @table(n)<br/>         LA     R4,S-1             @s-1<br/>         AR     R4,R7              @s+i1-1<br/>         LA     R3,8               target length<br/>         MVCL   R2,R4              table(n)=substr(s,i1,i2-i1+1)    |<br/>         BR     R14                End TOK subroutine             &lt;--<br/>MVCX     MVC    0(0,R11),0(R4)     output table(i)<br/>S        DC     CL80'Hello,How,Are,You,Today'  &lt;== input string ==<br/>LENS     DC     F'23'              length(s)   &lt;==<br/>TABLE    DC     8CL8' '            table(8)<br/>TALEN    DC     8H'0'              talen(8) <br/>C        DS     CL1                char<br/>N        DS     F                  number of tokens<br/>PG       DC     CL80' '            buffer<br/>         YREGS<br/>         END    TOKSTR</pre>"}, {"lang": "ACL2", "loc": 29, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> split-at <span class=\"br0\">(</span>xs delim<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>endp xs<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">eql</span> <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span> delim<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>mv <span class=\"kw1\">nil</span> <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>mv-<span class=\"kw1\">let</span> <span class=\"br0\">(</span>before after<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>split-at <span class=\"br0\">(</span>rest xs<span class=\"br0\">)</span> delim<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>mv <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>first xs<span class=\"br0\">)</span> before<span class=\"br0\">)</span> after<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> split <span class=\"br0\">(</span>xs delim<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp xs<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span>mv-<span class=\"kw1\">let</span> <span class=\"br0\">(</span>before after<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>split-at xs delim<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">cons</span> before <span class=\"br0\">(</span>split after delim<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> css-<span class=\"sy0\">&gt;</span>strs <span class=\"br0\">(</span>css<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp css<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>coerce <span class=\"br0\">(</span>first css<span class=\"br0\">)</span> 'string<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>css-<span class=\"sy0\">&gt;</span>strs <span class=\"br0\">(</span>rest css<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> split-str <span class=\"br0\">(</span>str delim<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>css-<span class=\"sy0\">&gt;</span>strs <span class=\"br0\">(</span>split <span class=\"br0\">(</span>coerce str '<span class=\"kw1\">list</span><span class=\"br0\">)</span> delim<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-with <span class=\"br0\">(</span>strs delim<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp strs<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>cw <span class=\"st0\">\"~%\"</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">progn</span>$ <span class=\"br0\">(</span>cw <span class=\"br0\">(</span>first strs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>cw <span class=\"br0\">(</span>coerce <span class=\"br0\">(</span><span class=\"kw1\">list</span> delim<span class=\"br0\">)</span> 'string<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>print-with <span class=\"br0\">(</span>rest strs<span class=\"br0\">)</span> delim<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 6, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">var</span> hello:<span class=\"kw3\">String</span> = <span class=\"st0\">\"Hello,How,Are,You,Today\"</span>;<br/><span class=\"kw2\">var</span> tokens:<span class=\"kw3\">Array</span> = hello.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw3\">trace</span><span class=\"br0\">(</span>tokens.<span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"co1\">// Or as a one-liner</span><br/><span class=\"kw3\">trace</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello,How,Are,You,Today\"</span>.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span>.<span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Ada", "loc": 19, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Indefinite_Vectors</span>;<br/><span class=\"kw3\">use</span>  Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Containers</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> tokenize <span class=\"kw1\">is</span><br/>  <span class=\"kw3\">package</span> String_Vector <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Indefinite_Vectors <span class=\"br0\">(</span>Natural,String<span class=\"br0\">)</span>; <span class=\"kw3\">use</span> String_Vector;<br/>  s      \u00a0: String  \u00a0:= <span class=\"st0\">\"Hello,How,Are,You,Today\"</span> &amp; <span class=\"st0\">\",\"</span>;<br/>  current\u00a0: Positive\u00a0:= s'First;      <br/>  v      \u00a0: Vector;<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw3\">in</span> s'<span class=\"kw3\">range</span> <span class=\"kw1\">loop</span> <br/>    <span class=\"kw1\">if</span> s <span class=\"br0\">(</span>i<span class=\"br0\">)</span> = ',' <span class=\"kw2\">or</span> i = s'last <span class=\"kw1\">then</span> <br/>      v.<span class=\"me1\">append</span> <span class=\"br0\">(</span>s <span class=\"br0\">(</span>current .. <span class=\"me1\">i</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      current\u00a0:= i + <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>  <span class=\"kw1\">for</span> s <span class=\"kw3\">of</span> v <span class=\"kw1\">loop</span> put<span class=\"br0\">(</span>s &amp; <span class=\"st0\">\".\"</span><span class=\"br0\">)</span>; <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> tokenize;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 49, "block": "<pre class=\"algol68 highlighted_source\">main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>\u00a0<br/>  <span class=\"kw4\">OP</span> <span class=\"sy1\">+:=</span>  <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> in out<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> item<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    <span class=\"br0\">[</span><span class=\"kw8\">LWB</span> in out<span class=\"sy1\">:</span> <span class=\"kw8\">UPB</span> in out<span class=\"sy1\">+</span>1<span class=\"br0\">]</span><span class=\"kw3\">STRING</span> new<span class=\"sy1\">;</span><br/>    new<span class=\"br0\">[</span><span class=\"kw8\">LWB</span> in out<span class=\"sy1\">:</span> <span class=\"kw8\">UPB</span> in out<span class=\"br0\">]</span><span class=\"sy1\">:=</span>in out<span class=\"sy1\">;</span><br/>    new<span class=\"br0\">[</span><span class=\"kw8\">UPB</span> new<span class=\"br0\">]</span><span class=\"sy1\">:=</span>item<span class=\"sy1\">;</span><br/>    in out <span class=\"sy1\">:=</span> new<br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">PROC</span> string split <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> beetles<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> substr<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    <span class=\"st0\">\"\"</span><span class=\"st0\">\" Split beetles where substr is found \"</span><span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>    <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>1<span class=\"sy1\">:</span>0<span class=\"br0\">]</span><span class=\"kw3\">STRING</span> out<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> start <span class=\"sy1\">:=</span> 1<span class=\"sy1\">,</span> pos<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">WHILE</span> <span class=\"kw26\">string in string</span><span class=\"br0\">(</span>substr<span class=\"sy1\">,</span> pos<span class=\"sy1\">,</span> beetles<span class=\"br0\">[</span>start<span class=\"sy1\">:</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">DO</span><br/>      out <span class=\"sy1\">+:=</span> <span class=\"kw3\">STRING</span><span class=\"br0\">(</span>beetles<span class=\"br0\">[</span>start<span class=\"sy1\">:</span>start<span class=\"sy1\">+</span>pos<span class=\"sy1\">-</span>2<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      start <span class=\"sy1\">+:=</span> pos <span class=\"sy1\">+</span> <span class=\"kw8\">UPB</span> substr <span class=\"sy1\">-</span> 1<br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> start <span class=\"sy1\">&gt;</span> <span class=\"kw8\">LWB</span> beetles <span class=\"kw2\">THEN</span><br/>      out <span class=\"sy1\">+:=</span> <span class=\"kw3\">STRING</span><span class=\"br0\">(</span>beetles<span class=\"br0\">[</span>start<span class=\"sy1\">:</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>    out<br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">PROC</span> char split <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> beetles<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> chars<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>    <span class=\"st0\">\"\"</span><span class=\"st0\">\" Split beetles where character is found in chars \"</span><span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>    <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>1<span class=\"sy1\">:</span>0<span class=\"br0\">]</span><span class=\"kw3\">STRING</span> out<span class=\"sy1\">;</span><br/>    <span class=\"kw6\">FILE</span> beetlef<span class=\"sy1\">;</span><br/>    <span class=\"kw22\">associate</span><span class=\"br0\">(</span>beetlef<span class=\"sy1\">,</span> beetles<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># associate a FILE handle with a STRING   #</span><br/>    <span class=\"kw22\">make term</span><span class=\"br0\">(</span>beetlef<span class=\"sy1\">,</span> chars<span class=\"br0\">)</span><span class=\"sy1\">;</span>   <span class=\"coMULTI\"># make term: assign CSV string terminator #</span> <br/>\u00a0<br/>    <span class=\"kw4\">PROC</span> raise logical file end <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw6\">FILE</span> f<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span> except logical file end<span class=\"sy1\">;</span><br/>    <span class=\"kw22\">on logical file end</span><span class=\"br0\">(</span>beetlef<span class=\"sy1\">,</span> raise logical file end<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">STRING</span> solo<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">DO</span><br/>      <span class=\"kw22\">getf</span><span class=\"br0\">(</span>beetlef<span class=\"sy1\">,</span> <span class=\"br0\">(</span>$g$<span class=\"sy1\">,</span> solo<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      out<span class=\"sy1\">+:=</span>solo<span class=\"sy1\">;</span><br/>      <span class=\"kw22\">getf</span><span class=\"br0\">(</span>beetlef<span class=\"sy1\">,</span> <span class=\"br0\">(</span>$x$<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"coMULTI\"># skip CHAR separator #</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    except logical file end<span class=\"sy1\">:</span><br/>      <span class=\"kw7\">SKIP</span><span class=\"sy1\">;</span><br/>    out<br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw3\">STRING</span> beetles <span class=\"sy1\">:=</span> <span class=\"st0\">\"John Lennon, Paul McCartney, George Harrison, Ringo Starr\"</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$g<span class=\"st0\">\".\"</span>$<span class=\"sy1\">,</span> string split<span class=\"br0\">(</span>beetles<span class=\"sy1\">,</span> <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>$l$<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$g<span class=\"st0\">\".\"</span>$<span class=\"sy1\">,</span> char   split<span class=\"br0\">(</span>beetles<span class=\"sy1\">,</span> <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>$l$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 20, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">on</span> <span class=\"kw1\">run</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  intercalate<span class=\"br0\">(</span><span class=\"st0\">\".\"</span>, splitOn<span class=\"br0\">(</span><span class=\"st0\">\",\"</span>, <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- splitOn\u00a0:: String -&gt; String -&gt; [String]</span><br/><span class=\"kw3\">on</span> splitOn<span class=\"br0\">(</span>strDelim, strMain<span class=\"br0\">)</span><br/>  <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strDelim<span class=\"br0\">}</span><br/>  <span class=\"kw3\">set</span> lstParts <span class=\"kw3\">to</span> <span class=\"kw1\">text</span> <span class=\"kw1\">items</span> <span class=\"kw3\">of</span> strMain<br/>  <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>  <span class=\"kw3\">return</span> lstParts<br/><span class=\"kw3\">end</span> splitOn<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: String -&gt; [String] -&gt; String</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>  <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>  <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>  <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>  <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate</pre>"}, {"lang": "Astro", "loc": 4, "block": "<pre class=\"python highlighted_source\">let text <span class=\"sy0\">=</span> <span class=\"st0\">'Hello,How,Are,You,Today'</span><br/>let tokens <span class=\"sy0\">=</span> text.<span class=\"me1\">split</span><span class=\"br0\">(</span>/<span class=\"sy0\">,</span>/<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> tokens.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw1\">with</span>: <span class=\"st0\">'.'</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 6, "block": "<pre class=\"autohotkey highlighted_source\">string <span class=\"sy0\">:=</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/StringSplit.htm\"><span class=\"kw3\">stringsplit</span></a><span class=\"sy0\">,</span> string<span class=\"sy0\">,</span> string<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% string0<br/><span class=\"br0\">{</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% string<span class=\"re0\">%A_Index%</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 8, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>  s = <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><br/>  <span class=\"kw4\">split</span><span class=\"br0\">(</span>s, arr, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i <span class=\"sy2\">&lt;</span> <span class=\"kw4\">length</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">printf</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"st0\">\".\"</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw5\">print</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 20, "block": "<pre class=\"text highlighted_source\">100 T$ = \"HELLO,HOW,ARE,YOU,TODAY\"<br/>110 GOSUB 200\"TOKENIZE<br/>120 FOR I = 1 TO N<br/>130     PRINT A$(I) \".\"\u00a0;<br/>140 NEXT<br/>150 PRINT<br/>160 END<br/>\u00a0<br/>200 IF N = 0 THEN DIM A$(256)<br/>210 N = 1<br/>220 A$(N) = \"<br/>230 FOR TI = 1 TO LEN(T$)<br/>240     C$ = MID$(T$, TI, 1)<br/>250     T = C$ = \",\"<br/>260     IF T THEN C$ = \"<br/>270     N = N + T<br/>280     IF T THEN A$(N) = C$<br/>290     A$(N) = A$(N) + C$<br/>300 NEXT TI<br/>310 RETURN</pre>"}, {"lang": "Batch File", "loc": 12, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">tokenize</span> <span class=\"sy0\">%</span><span class=\"re3\">1</span> res<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">res</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">eof</span><br/>\u00a0<br/>:<span class=\"re0\">tokenize</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> str=<span class=\"sy0\">%</span><span class=\"re3\">~1</span><br/>:<span class=\"re0\">loop</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(%</span><span class=\"re3\">str</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">2</span>=<span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">2</span></span><span class=\"sy0\">!</span>.<span class=\"sy0\">%%</span><span class=\"re3\">i</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">2</span>=<span class=\"sy0\">!</span><span class=\"re2\">%<span class=\"re3\">2</span>:~1</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">eof</span></pre>"}, {"lang": "Bracmat", "loc": 13, "block": "<pre class=\"text highlighted_source\">( \"Hello,How,Are,You,Today\":?String<br/>&amp;\u00a0:?ReverseList<br/>&amp;   whl<br/>  ' ( @(!String:?element \",\"\u00a0?String)<br/>    &amp;\u00a0!element\u00a0!ReverseList:?ReverseList<br/>    )<br/>&amp;\u00a0!String:?List<br/>&amp;   whl<br/>  ' (\u00a0!ReverseList:%?element\u00a0?ReverseList<br/>    &amp; (!element.!List):?List<br/>    )<br/>&amp; out$!List<br/>)</pre>"}, {"lang": "C", "loc": 22, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include&lt;string.h&gt;</span><br/><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/><span class=\"co2\">#include&lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>a<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">=</span><span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> n<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> nn<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>ds<span class=\"sy0\">=</span>strdup<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\ta<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">=</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strtok.html\"><span class=\"kw3\">strtok</span></a><span class=\"br0\">(</span>ds<span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> a<span class=\"br0\">[</span><span class=\"sy0\">++</span>n<span class=\"br0\">]</span><span class=\"sy0\">=</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strtok.html\"><span class=\"kw3\">strtok</span></a><span class=\"br0\">(</span>NULL<span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>nn<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> nn<span class=\"sy0\">&lt;=</span>n<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>nn<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s.\"</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span>nn<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>ds<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 6, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw4\">string</span> str <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"sy0\">;</span> <br/><span class=\"co1\">// or Regex.Split ( \"Hello,How,Are,You,Today\", \",\" );</span><br/><span class=\"co1\">// (Regex is in System.Text.RegularExpressions namespace)</span><br/><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> strings <span class=\"sy0\">=</span> str<span class=\"sy0\">.</span><span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">String</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span>, s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 16, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">string</span> s <span class=\"sy1\">=</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span> v<span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">istringstream</span> buf<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> token<span class=\"sy4\">;</span> getline<span class=\"br0\">(</span>buf, token, <span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">)</span><br/>        v.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>token<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    copy<span class=\"br0\">(</span>v.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, v.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span>, <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 5, "block": "<pre class=\"text highlighted_source\">shared void tokenizeAString() {<br/>\tvalue input = \"Hello,How,Are,You,Today\";<br/>\tvalue tokens = input.split(','.equals);<br/>\tprint(\".\".join(tokens));<br/>}</pre>"}, {"lang": "COBOL", "loc": 32, "block": "<pre class=\"cobol highlighted_source\">\u00a0<br/>      <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> tokenize<span class=\"sy0\">.</span><br/>\u00a0<br/>       environment <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">configuration</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       repository<span class=\"sy0\">.</span><br/>           <span class=\"kw3\">function</span> <span class=\"kw3\">all</span> intrinsic<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> period constant as <span class=\"st0\">\".\"</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> cmma   constant as <span class=\"st0\">\",\"</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span> start-<span class=\"kw3\">with</span><span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> <span class=\"kw3\">value</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span> items<span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> item <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"kw3\">occurs</span> <span class=\"nu0\">5</span> <span class=\"kw2\">times</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       tokenize-<span class=\"kw1\">main</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">unstring</span> start-<span class=\"kw3\">with</span> <span class=\"kw3\">delimited</span> <span class=\"kw3\">by</span> cmma<br/>           <span class=\"kw2\">into</span> item<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> item<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> item<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> item<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> item<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>\u00a0<br/>       <span class=\"kw2\">display</span> trim<span class=\"br0\">(</span>item<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> period trim<span class=\"br0\">(</span>item<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> period<br/>               trim<span class=\"br0\">(</span>item<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> period trim<span class=\"br0\">(</span>item<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> period<br/>               trim<span class=\"br0\">(</span>item<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> tokenize<span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 4, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>arr = <span class=\"st0\">\"Hello,How,Are,You,Today\"</span>.<span class=\"me1\">split</span> <span class=\"st0\">\",\"</span><br/>console.<span class=\"me1\">log</span> arr.<span class=\"me1\">join</span> <span class=\"st0\">\".\"</span><br/>\u00a0</pre>"}, {"lang": "ColdFusion", "loc": 6, "block": "<pre class=\"cfm highlighted_source\">\u00a0<br/><span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfoutput</span><span class=\"sy0\">&gt;</span></span><br/>  <span class=\"sc5\"><span class=\"sy0\">&lt;</span><span class=\"kw1\">cfset</span> wordListTag <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"sy0\">&gt;</span></span><br/>  #Replace( wordListTag, \",\", \".\", \"all\" )#<br/><span class=\"sc5\"><span class=\"sy0\">&lt;/</span><span class=\"kw1\">cfoutput</span><span class=\"sy0\">&gt;</span></span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 8, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> comma-split <span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for start <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> then <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ finish<span class=\"br0\">)</span><br/>        for finish <span class=\"sy0\">=</span> <span class=\"br0\">(</span>position #\\<span class=\"sy0\">,</span> string <span class=\"sy0\">:</span><span class=\"me1\">start</span> start<span class=\"br0\">)</span><br/>        collecting <span class=\"br0\">(</span>subseq string start finish<span class=\"br0\">)</span><br/>        until <span class=\"br0\">(</span><span class=\"kw1\">null</span> finish<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> write-with-periods <span class=\"br0\">(</span>strings<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"~{~A~^.~}\"</span> strings<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">interpose</span> <span class=\"st0\">\".\"</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span>split #<span class=\"st0\">\",\"</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 5, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"st0\">\"Hello,How,Are,You,Today\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 34, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> TokenizeString<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  Classes<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  tmp<span class=\"sy1\">:</span> TStringList<span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>\u00a0<br/>  <span class=\"co1\">// Instantiate TStringList class</span><br/>  tmp <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStringList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">try</span><br/>    <span class=\"coMULTI\">{ Use the TStringList's CommaText property to get/set<br/>      all the strings in a single comma-delimited string }</span><br/>    tmp<span class=\"sy1\">.</span><span class=\"me1\">CommaText</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'Hello,How,Are,You,Today'</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">{ Now loop through the TStringList and display each<br/>      token on the console }</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"kw3\">Pred</span><span class=\"br0\">(</span>tmp<span class=\"sy1\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>tmp<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">finally</span><br/>    tmp<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  Readln<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 1, "block": "<pre class=\"text highlighted_source\">!print join \".\" split \"Hello,How,Are,You,Today\" \",\"</pre>"}, {"lang": "E", "loc": 1, "block": "<pre class=\"e highlighted_source\"><span class=\"st0\">\".\"</span>.<span class=\"me1\">rjoin</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello,How,Are,You,Today\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Elena", "loc": 12, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>\u00a0<br/>program =<br/>[<br/>    var string\u00a0:= \"Hello,How,Are,You,Today\".<br/>\u00a0<br/>    string split by:\",\"; forEach(:s)<br/>    [<br/>        console print(s,\".\")<br/>    ]<br/>].</pre>"}, {"lang": "Elixir", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>tokens = String.split(\"Hello,How,Are,You,Today\", \",\")<br/>IO.puts Enum.join(tokens, \".\")<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 7, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>tok<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>start<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>   <span class=\"re5\">Lst</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">tokens</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"sy1\">,</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~s~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/string.html\"><span class=\"kw5\">string</span></a>:<span class=\"re3\">join</span><span class=\"br0\">(</span><span class=\"re5\">Lst</span><span class=\"sy1\">,</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>   ok<span class=\"sy1\">.</span></pre>"}, {"lang": "Euphoria", "loc": 22, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> split<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> s<span class=\"sy2\">,</span> <span class=\"kw2\">integer</span> c<span class=\"br0\">)</span><br/>    <span class=\"kw2\">sequence</span> out<br/>    <span class=\"kw2\">integer</span> first<span class=\"sy2\">,</span> delim<br/>    out <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    first <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> first&lt;<span class=\"sy1\">=</span><span class=\"kw2\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        delim <span class=\"sy1\">=</span> <span class=\"kw2\">find_from</span><span class=\"br0\">(</span>c<span class=\"sy2\">,</span>s<span class=\"sy2\">,</span>first<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> delim <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            delim <span class=\"sy1\">=</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">+</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        out <span class=\"sy1\">=</span> <span class=\"kw2\">append</span><span class=\"br0\">(</span>out<span class=\"sy2\">,</span>s<span class=\"br0\">[</span>first..delim<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        first <span class=\"sy1\">=</span> delim <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>    <span class=\"kw1\">return</span> out<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw2\">sequence</span> s<br/>s <span class=\"sy1\">=</span> split<span class=\"br0\">(</span><span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"sy2\">,</span> <span class=\"st0\">','</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&amp;</span> <span class=\"st0\">','</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span></pre>"}, {"lang": "F#", "loc": 1, "block": "<pre class=\"fsharp highlighted_source\">System.<a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span>, <span class=\"st0\">\"Hello,How,Are,You,Today\"</span>.<span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"Hello,How,Are,You,Today\" \",\" split \".\" join print</pre>"}, {"lang": "Falcon", "loc": 15, "block": "<pre class=\"falcon highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* created by Aykayayciti Earl Lamont Montgomery<br/>April 9th, 2018 */</span><br/>\u00a0<br/>a <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>a <span class=\"sy0\">=</span> <a href=\"http://falconpl.org/project_docs/core/functions.html#strSplit\"><span class=\"kw6\">strSplit</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>index <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>start <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>b <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">for</span> index <span class=\"kw3\">in</span> <span class=\"br0\">[</span> start <span class=\"sy0\">:</span> <a href=\"http://falconpl.org/project_docs/core/functions.html#len\"><span class=\"kw6\">len</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span> <span class=\"br0\">]</span><br/>\tb <span class=\"sy0\">=</span> b <span class=\"sy0\">+</span> a<span class=\"br0\">[</span><span class=\"re0\">i</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"sy0\">&gt;</span> b<br/>\u00a0</pre>"}, {"lang": "Fantom", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Main<br/>{<br/>  public static Void main ()<br/>  {<br/>    str\u00a0:= \"Hello,How,Are,You,Today\"<br/>    words\u00a0:= str.split(',')<br/>    words.each |Str word|<br/>    {<br/>      echo (\"${word}. \")<br/>    }<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 18, "block": "<pre class=\"text highlighted_source\">: split ( str len separator len -- tokens count )<br/>  here &gt;r 2swap<br/>  begin<br/>    2dup 2,             \\ save this token ( addr len )<br/>    2over search        \\ find next separator<br/>  while<br/>    dup negate  here 2 cells -  +!  \\ adjust last token length<br/>    2over nip /string               \\ start next search past separator<br/>  repeat<br/>  2drop 2drop<br/>  r&gt;  here over -   ( tokens length )<br/>  dup negate allot           \\ reclaim dictionary<br/>  2 cells /\u00a0;                \\ turn byte length into token count<br/>\u00a0<br/>: .tokens ( tokens count -- )<br/>  1\u00a0?do dup <a class=\"__cf_email__\" data-cfemail=\"675527\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> type .\" .\" cell+ cell+ loop <a class=\"__cf_email__\" data-cfemail=\"ebd9ab\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> type\u00a0;<br/>\u00a0<br/>s\" Hello,How,Are,You,Today\" s\" ,\" split .tokens  \\ Hello.How.Are.You.Today</pre>"}, {"lang": "Fortran", "loc": 23, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">PROGRAM</span> Example<br/>\u00a0<br/>  <span class=\"kw3\">CHARACTER</span><span class=\"br0\">(</span><span class=\"nu0\">23</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">str</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><br/>  <span class=\"kw3\">CHARACTER</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">word</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">pos1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, pos2, n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, i<br/>\u00a0<br/>  <span class=\"kw1\">DO</span><br/>    pos2 <span class=\"sy0\">=</span> <span class=\"kw4\">INDEX</span><span class=\"br0\">(</span>str<span class=\"br0\">(</span>pos1<span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>pos2 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>       n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>       word<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> str<span class=\"br0\">(</span>pos1<span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">EXIT</span><br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>    n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    word<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> str<span class=\"br0\">(</span>pos1<span class=\"sy0\">:</span>pos1<span class=\"sy0\">+</span>pos2<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    pos1 <span class=\"sy0\">=</span> pos2<span class=\"sy0\">+</span>pos1<br/> <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/> <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<br/>   WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">\"(2A)\"</span>, <span class=\"kw1\">ADVANCE</span><span class=\"sy0\">=</span><span class=\"st0\">\"NO\"</span><span class=\"br0\">)</span> <span class=\"kw4\">TRIM</span><span class=\"br0\">(</span>word<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"st0\">\".\"</span><br/> <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">PROGRAM</span> Example</pre>"}, {"lang": "Frink", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>println[join[\".\", split[\",\", \"Hello,How,Are,You,Today\"]]]<br/>\u00a0</pre>"}, {"lang": "Gambas", "loc": 6, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sString <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/split\"><span class=\"kw2\">Split</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sString.<span class=\"me1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "GAP", "loc": 5, "block": "<pre class=\"text highlighted_source\">SplitString(\"Hello,How,Are,You,Today\", \",\");<br/># [ \"Hello\", \"How\", \"Are\", \"You\", \"Today\" ]<br/>\u00a0<br/>JoinStringsWithSeparator(last, \".\");<br/># \"Hello.How.Are.You.Today\"</pre>"}, {"lang": "Go", "loc": 11, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>strings<span class=\"sy3\">.</span><span class=\"me1\">Join</span><span class=\"sy1\">(</span>strings<span class=\"sy3\">.</span><span class=\"me1\">Split</span><span class=\"sy1\">(</span>s<span class=\"sy1\">,</span> <span class=\"st0\">\",\"</span><span class=\"sy1\">),</span> <span class=\"st0\">\".\"</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">'Hello,How,Are,You,Today'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20join\"><span class=\"kw5\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 5, "block": "<pre class=\"haskell highlighted_source\"><span class=\"coMULTI\">{-# OPTIONS_GHC -XOverloadedStrings #-}</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Text <span class=\"br0\">(</span>splitOn<span class=\"sy0\">,</span>intercalate<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>Text<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"kw1\">as</span> T <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> T<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> intercalate <span class=\"st0\">\".\"</span> <span class=\"sy0\">$</span> splitOn <span class=\"st0\">\",\"</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span></pre>"}, {"lang": "HicEst", "loc": 13, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">CHARACTER</span> string<span class=\"sy1\">=</span><span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"sy1\">,</span> list<br/>\u00a0<br/>nWords <span class=\"sy1\">=</span> <span class=\"kw1\">INDEX</span><span class=\"br0\">(</span>string<span class=\"sy1\">,</span> <span class=\"st0\">','</span><span class=\"sy1\">,</span> <span class=\"nu0\">256</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><br/>maxWordLength <span class=\"sy1\">=</span> <span class=\"kw1\">LEN</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span> <span class=\"sy1\">-</span> <span class=\"nu0\">2</span><span class=\"sy1\">*</span>nWords<br/><span class=\"kw1\">ALLOCATE</span><span class=\"br0\">(</span>list<span class=\"sy1\">,</span> nWords<span class=\"sy1\">*</span>maxWordLength<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> nWords<br/>  <span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>string<span class=\"sy1\">,</span> SePaRators<span class=\"sy1\">=</span><span class=\"st0\">','</span><span class=\"sy1\">,</span> item<span class=\"sy1\">=</span>i<span class=\"sy1\">,</span> WordEnd<span class=\"sy1\">,</span> CoPyto<span class=\"sy1\">=</span><span class=\"kw1\">CHAR</span><span class=\"br0\">(</span>i<span class=\"sy1\">,</span> maxWordLength<span class=\"sy1\">,</span> list<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">ENDDO</span><br/>\u00a0<br/><span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> nWords<br/>  <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>APPend<span class=\"br0\">)</span> TRIM<span class=\"br0\">(</span><span class=\"kw1\">CHAR</span><span class=\"br0\">(</span>i<span class=\"sy1\">,</span> maxWordLength<span class=\"sy1\">,</span> list<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">'.'</span><br/><span class=\"kw1\">ENDDO</span></pre>"}, {"lang": "Icon and Unicon", "loc": 6, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   A <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>   <span class=\"st0\">\"Hello,How,Are,You,Today\"</span> <span class=\"sy1\">?</span> <span class=\"kw1\">while</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>A<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">(</span><span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"sy1\">|</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">,=</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>A<span class=\"sy1\">,</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Io", "loc": 1, "block": "<pre class=\"io highlighted_source\"><span class=\"st0\">\"Hello,How,Are,You,Today\"</span> split<span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span> join<span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span> println</pre>"}, {"lang": "J", "loc": 10, "block": "<pre class=\"j highlighted_source\">   s=: <span class=\"st_h\">'Hello,How,Are,You,Today'</span><br/>   ] t=: &lt;;.<span class=\"nu0\">_1</span> <span class=\"st_h\">','</span>,s<br/>+-----+---+---+---+-----+<br/>|Hello|How|Are|You|Today|<br/>+-----+---+---+---+-----+<br/>  \u00a0; t,&amp;.&gt;<span class=\"st_h\">'.'</span><br/>Hello.How.Are.You.Today.<br/>\u00a0<br/>  <span class=\"st_h\">'.'</span> <span class=\"sy0\">(</span>I.<span class=\"st_h\">','</span>=s<span class=\"sy0\">)</span>}s  <span class=\"co1\">NB. two steps combined</span><br/>Hello.How.Are.You.Today</pre>"}, {"lang": "Java", "loc": 2, "block": "<pre class=\"java5 highlighted_source\"><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> toTokenize = <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"sy0\">;</span><br/><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span>, toTokenize.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "JavaScript", "loc": 1, "block": "<pre class=\"javascript highlighted_source\">alert<span class=\"br0\">(</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">split(\",\") | join(\".\")</pre>"}, {"lang": "Julia", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>s = \"Hello,How,Are,You,Today\"<br/>a = split(s, \",\")<br/>t = join(a, \".\")<br/>\u00a0<br/>println(\"The string \\\"\", s, \"\\\"\")<br/>println(\"Splits into \", a)<br/>println(\"Reconstitutes to \\\"\", t, \"\\\"\")<br/>\u00a0</pre>"}, {"lang": "K", "loc": 2, "block": "<pre class=\"text highlighted_source\">words: \",\" \\: \"Hello,How,Are,You,Today\"<br/>\".\" /: words</pre>"}, {"lang": "Kotlin", "loc": 4, "block": "<pre class=\"scala highlighted_source\">fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> input <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><br/>    println<span class=\"br0\">(</span>input.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span>.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LabVIEW", "loc": 6, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">set</span> split <span class=\"br0\">(</span>string<span class=\"sy0\">:</span><span class=\"me1\">tokens</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"st0\">\"Hello\"</span> <span class=\"st0\">\"How\"</span> <span class=\"st0\">\"Are\"</span> <span class=\"st0\">\"You\"</span> <span class=\"st0\">\"Today\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>string<span class=\"sy0\">:</span><span class=\"me1\">join</span> split <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"Hello.How.Are.You.Today\"</span><br/>\u00a0</pre>"}, {"lang": "LFE", "loc": 6, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">set</span> split <span class=\"br0\">(</span>string<span class=\"sy0\">:</span><span class=\"me1\">tokens</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"st0\">\"Hello\"</span> <span class=\"st0\">\"How\"</span> <span class=\"st0\">\"Are\"</span> <span class=\"st0\">\"You\"</span> <span class=\"st0\">\"Today\"</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>string<span class=\"sy0\">:</span><span class=\"me1\">join</span> split <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/><span class=\"st0\">\"Hello.How.Are.You.Today\"</span><br/>\u00a0</pre>"}, {"lang": "Lang5", "loc": 1, "block": "<pre class=\"text highlighted_source\">'Hello,How,Are,You,Today ', split '. join .</pre>"}, {"lang": "Lingo", "loc": 9, "block": "<pre class=\"text highlighted_source\">input = \"Hello,How,Are,You,Today\"<br/>_player.itemDelimiter = \",\"<br/>output = \"\"<br/>repeat with i = 1 to input.item.count<br/>  put input.item[i]&amp;\".\" after output<br/>end repeat<br/>delete the last char of output<br/>put output<br/>-- \"Hello.How.Are.You.Today\"</pre>"}, {"lang": "Logo", "loc": 3, "block": "<pre class=\"text highlighted_source\">to split\u00a0:str\u00a0:sep<br/>  output parse map [ifelse\u00a0? =\u00a0:sep [\"| |] [?]]\u00a0:str<br/>end</pre>"}, {"lang": "Logtalk", "loc": 24, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(spliting).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(convert<span class=\"sy1\">/</span><span class=\"nu0\">2</span>).<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">mode</span>(convert(<span class=\"sy1\">+</span>atom, <span class=\"sy1\">-</span>atom), one).<br/>\u00a0<br/>    convert(<span class=\"re0\">StringIn</span>, <span class=\"re0\">StringOut</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"kw4\">atom_chars</span>(<span class=\"re0\">StringIn</span>, <span class=\"re0\">CharactersIn</span>),<br/>        <span class=\"kw4\">phrase</span>(split(<span class=\"st0\">','</span>, <span class=\"re0\">Tokens</span>), <span class=\"re0\">CharactersIn</span>),<br/>        <span class=\"kw4\">phrase</span>(split(<span class=\"st0\">'.'</span>, <span class=\"re0\">Tokens</span>), <span class=\"re0\">CharactersOut</span>),<br/>        <span class=\"kw4\">atom_chars</span>(<span class=\"re0\">StringOut</span>, <span class=\"re0\">CharactersOut</span>).<br/>\u00a0<br/>    split(<span class=\"re0\">Separator</span>, [t([<span class=\"re0\">Character</span>| <span class=\"re0\">Characters</span>])| <span class=\"re0\">Tokens</span>]) <span class=\"sy1\">--&gt;</span><br/>        [<span class=\"re0\">Character</span>], <span class=\"sy0\">{</span><span class=\"re0\">Character</span> <span class=\"sy1\">\\==</span> <span class=\"re0\">Separator</span><span class=\"sy0\">}</span>, split(<span class=\"re0\">Separator</span>, [t(<span class=\"re0\">Characters</span>)| <span class=\"re0\">Tokens</span>]).<br/>    split(<span class=\"re0\">Separator</span>, [t([])| <span class=\"re0\">Tokens</span>]) <span class=\"sy1\">--&gt;</span><br/>        [<span class=\"re0\">Separator</span>], split(<span class=\"re0\">Separator</span>, <span class=\"re0\">Tokens</span>).<br/>    split(<span class=\"re0\">_</span>, [t([])]) <span class=\"sy1\">--&gt;</span><br/>        [].<br/>    <span class=\"co1\">% the look-ahead in the next rule prevents adding a spurious separator at the end</span><br/>    split(<span class=\"re0\">_</span>, []), [<span class=\"re0\">Character</span>] <span class=\"sy1\">--&gt;</span><br/>        [<span class=\"re0\">Character</span>].<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 9, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> <span class=\"kw3\">string</span><span class=\"sy0\">:</span>split <span class=\"br0\">(</span>sep<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> sep<span class=\"sy0\">,</span> fields <span class=\"sy0\">=</span> sep <span class=\"kw2\">or</span> <span class=\"st0\">\":\"</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">local</span> pattern <span class=\"sy0\">=</span> <span class=\"kw3\">string.format</span><span class=\"br0\">(</span><span class=\"st0\">\"([^%s]+)\"</span><span class=\"sy0\">,</span> sep<span class=\"br0\">)</span><br/>    self<span class=\"sy0\">:</span><span class=\"kw3\">gsub</span><span class=\"br0\">(</span>pattern<span class=\"sy0\">,</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> fields<span class=\"br0\">[</span><span class=\"sy0\">#</span>fields<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> c <span class=\"kw1\">end</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> fields<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> str <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">table.concat</span><span class=\"br0\">(</span>str<span class=\"sy0\">:</span>split<span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "M4", "loc": 11, "block": "<pre class=\"text highlighted_source\">define(`s',`Hello,How,Are,You,Today')<br/>define(`set',`define(`$1[$2]',`$3')')<br/>define(`get',`defn($1[$2])')<br/>define(`n',0)<br/>define(`fill',<br/>   `set(a,n,$1)`'define(`n',incr(n))`'ifelse(eval($#&gt;1),1,`fill(shift(<a class=\"__cf_email__\" data-cfemail=\"331773\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>))')')<br/>fill(s)<br/>define(`j',0)<br/>define(`show',<br/>   `ifelse(eval(j&lt;n),1,`get(a,j).`'define(`j',incr(j))`'show')')<br/>show</pre>"}, {"lang": "Maple", "loc": 1, "block": "<pre class=\"text highlighted_source\">StringTools:-Join(StringTools:-Split(\"Hello,How,Are,You,Today\", \",\"),\".\");</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">StringRiffle[StringSplit[\"Hello,How,Are,You,Today\", \",\"], \".\"]</pre>"}, {"lang": "MATLAB / Octave", "loc": 14, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> tokenizeString<span class=\"br0\">(</span>string,delimeter<span class=\"br0\">)</span><br/>\u00a0<br/>    tokens = <span class=\"br0\">{</span><span class=\"br0\">}</span>;<br/>\u00a0<br/>    <span class=\"kw1\">while</span> not<span class=\"br0\">(</span>isempty<span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"br0\">)</span>        <br/>        <span class=\"br0\">[</span>tokens<span class=\"br0\">{</span><span class=\"kw1\">end</span>+<span class=\"nu0\">1</span><span class=\"br0\">}</span>,string<span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/strtok.html\"><span class=\"kw2\">strtok</span></a><span class=\"br0\">(</span>string,delimeter<span class=\"br0\">)</span>;        <br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a> = <span class=\"br0\">(</span><span class=\"nu0\">1</span>:numel<span class=\"br0\">(</span>tokens<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span>        <br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>tokens<span class=\"br0\">{</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/i.html\"><span class=\"kw2\"><span class=\"re0\">i</span></span></a><span class=\"br0\">}</span> <span class=\"co2\">'.'</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>tokens<span class=\"br0\">{</span><span class=\"kw1\">end</span><span class=\"br0\">}</span> <span class=\"co2\">'\\n'</span><span class=\"br0\">]</span><span class=\"br0\">)</span>        <br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maxima", "loc": 2, "block": "<pre class=\"text highlighted_source\">l: split(\"Hello,How,Are,You,Today\", \",\")$<br/>printf(true, \"~{~a~^.~}~%\", l)$</pre>"}, {"lang": "MAXScript", "loc": 6, "block": "<pre class=\"text highlighted_source\">output = \"\"<br/>for word in (filterString \"Hello,How,Are,You,Today\" \",\") do<br/>(<br/>    output += (word + \".\")<br/>)<br/>format \"%\\n\" output</pre>"}, {"lang": "Mercury", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>:- module string_tokenize.<br/>:- interface.<br/>\u00a0<br/>:- import_module io.<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>:- import_module list, string.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>    Tokens = string.split_at_char((','), \"Hello,How,Are,You,Today\"),   <br/>    io.write_list(Tokens, \".\", io.write_string,\u00a0!IO),<br/>    io.nl(!IO).</pre>"}, {"lang": "MMIX", "loc": 54, "block": "<pre class=\"mmix highlighted_source\">sep\t<span class=\"kw2\">IS</span>\t<span class=\"st0\">','</span><br/>EOS\t<span class=\"kw2\">IS</span>\t<span class=\"nu1\">0</span><br/>NL\t<span class=\"kw2\">IS</span>\t<span class=\"nu1\">10</span><br/><span class=\"co3\"><br/>// main registers</span><br/>p\t<span class=\"kw2\">IS</span>\t<span class=\"nu3\">$255</span><br/>tp\t<span class=\"kw2\">GREG</span><br/><span class=\"nu1\">c</span>\t<span class=\"kw2\">GREG</span><br/>t\t<span class=\"kw2\">GREG</span><br/>\u00a0<br/>\t<span class=\"kw2\">LOC</span>\tData_Segment<br/>\t<span class=\"kw2\">GREG</span>\t@<br/>Text\t<span class=\"kw2\">BYTE</span>\t<span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"sy0\">,</span>EOS<br/>token\t<span class=\"kw2\">BYTE</span>\t<span class=\"nu1\">0</span><br/>eot\t<span class=\"kw2\">IS</span>\t@<span class=\"sy0\">+</span><span class=\"nu1\">255</span><br/>\u00a0<br/>\t<span class=\"kw2\">LOC</span>\t<span class=\"nu2\">#100</span>\t<span class=\"co2\">% main () {</span><br/>Main\t<span class=\"kw1\">LDA</span>\tp<span class=\"sy0\">,</span>Text\t\t<span class=\"co2\">%</span><br/>\t<span class=\"kw1\">LDA</span>\ttp<span class=\"sy0\">,</span>token\t<span class=\"co2\">% initialize pointers</span><br/>2H\t<span class=\"kw1\">LDBU</span>\t<span class=\"nu1\">c</span><span class=\"sy0\">,</span>p\t\t<span class=\"co2\">% DO  get char</span><br/>\t<span class=\"kw1\">BZ</span>\t<span class=\"nu1\">c</span><span class=\"sy0\">,</span><span class=\"nu1\">5F</span>\t\t<span class=\"co2\">%  break if char == EOS</span><br/>\t<span class=\"kw1\">CMP</span>\tt<span class=\"sy0\">,</span><span class=\"nu1\">c</span><span class=\"sy0\">,</span>sep\t\t<span class=\"co2\">%  if char\u00a0!= sep then</span><br/>\t<span class=\"kw1\">PBNZ</span>\tt<span class=\"sy0\">,</span><span class=\"nu1\">3F</span>\t\t<span class=\"co2\">%     store char</span><br/>\t<span class=\"kw2\">SET</span>\tt<span class=\"sy0\">,</span>NL\t\t<span class=\"co2\">%  terminate token with NL,EOS</span><br/>\t<span class=\"kw1\">STBU</span>\tt<span class=\"sy0\">,</span>tp<br/>\t<span class=\"kw2\">SET</span>\tt<span class=\"sy0\">,</span>EOS<br/>\t<span class=\"kw1\">INCL</span>\ttp<span class=\"sy0\">,</span><span class=\"nu1\">1</span><br/>\t<span class=\"kw1\">STBU</span>\tt<span class=\"sy0\">,</span>tp<br/>\t<span class=\"kw1\">JMP</span>\t<span class=\"nu1\">4F</span>\t\t<span class=\"co2\">%  continue</span><br/>\u00a0<br/>3H\t<span class=\"kw1\">STBU</span>\t<span class=\"nu1\">c</span><span class=\"sy0\">,</span>tp\t\t<span class=\"co2\">%  store char</span><br/>4H\t<span class=\"kw1\">INCL</span>\ttp<span class=\"sy0\">,</span><span class=\"nu1\">1</span>\t\t<span class=\"co2\">%  update pointers</span><br/>\t<span class=\"kw1\">INCL</span>\tp<span class=\"sy0\">,</span><span class=\"nu1\">1</span><br/>\t<span class=\"kw1\">JMP</span>\t<span class=\"nu1\">2B</span>\t\t<span class=\"co2\">% LOOP</span><br/>\u00a0<br/>5H\t<span class=\"kw2\">SET</span>\tt<span class=\"sy0\">,</span>NL\t\t<span class=\"co2\">% terminate last token and buffer</span><br/>\t<span class=\"kw1\">STBU</span>\tt<span class=\"sy0\">,</span>tp<br/>\t<span class=\"kw2\">SET</span>\tt<span class=\"sy0\">,</span>EOS<br/>\t<span class=\"kw1\">INCL</span>\ttp<span class=\"sy0\">,</span><span class=\"nu1\">1</span><br/>\t<span class=\"kw1\">STBU</span>\tt<span class=\"sy0\">,</span>tp<br/><span class=\"co3\">%  next part is not really necessary</span><br/><span class=\"co3\">%  program runs only once</span><br/><span class=\"co3\">%\tINCL\ttp,1\t\t% terminate buffer</span><br/><span class=\"co3\">%\tSTBU\tt,tp</span><br/>\u00a0<br/>\t<span class=\"kw1\">LDA</span>\ttp<span class=\"sy0\">,</span>token\t<span class=\"co2\">% reset token pointer</span><br/><span class=\"co3\">\t\t\t\t% REPEAT</span><br/>2H\t<span class=\"kw1\">ADD</span>\tp<span class=\"sy0\">,</span>tp<span class=\"sy0\">,</span><span class=\"nu1\">0</span>\t\t<span class=\"co2\">%    start of token</span><br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Fputs<span class=\"sy0\">,</span>StdOut\t<span class=\"co2\">%    output token</span><br/>\t<span class=\"kw1\">ADD</span>\ttp<span class=\"sy0\">,</span>tp<span class=\"sy0\">,</span>p<br/>\t<span class=\"kw1\">INCL</span>\ttp<span class=\"sy0\">,</span><span class=\"nu1\">1</span>\t\t<span class=\"co2\">%    step to next token</span><br/>\t<span class=\"kw1\">LDBU</span>\tt<span class=\"sy0\">,</span>tp<br/>\t<span class=\"kw1\">PBNZ</span>\tt<span class=\"sy0\">,</span><span class=\"nu1\">2B</span>\t\t<span class=\"co2\">% UNTIL EOB(uffer)</span><br/>\t<span class=\"kw1\">TRAP</span>\t<span class=\"nu1\">0</span><span class=\"sy0\">,</span>Halt<span class=\"sy0\">,</span><span class=\"nu1\">0</span></pre>"}, {"lang": "Modula-3", "loc": 18, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> Tokenize <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> TextConv;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span> Texts <span class=\"sy0\">=</span> <span class=\"kw1\">REF</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">TEXT</span>;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> tokens<span class=\"sy0\">:</span> Texts;<br/>    string <span class=\"sy0\">:=</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span>;<br/>    sep <span class=\"sy0\">:=</span> <span class=\"kw1\">SET</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span> <span class=\"br0\">{</span><span class=\"st_h\">','</span><span class=\"br0\">}</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  tokens <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>Texts<span class=\"sy0\">,</span> TextConv.<span class=\"me1\">ExplodedSize</span><span class=\"br0\">(</span>string<span class=\"sy0\">,</span> sep<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  TextConv.<span class=\"me1\">Explode</span><span class=\"br0\">(</span>string<span class=\"sy0\">,</span> tokens^<span class=\"sy0\">,</span> sep<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"kw3\">FIRST</span><span class=\"br0\">(</span>tokens^<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LAST</span><span class=\"br0\">(</span>tokens^<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>    IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>tokens<span class=\"br0\">[</span>i<span class=\"br0\">]</span> &amp; <span class=\"st0\">\".\"</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span>;<br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> Tokenize.</pre>"}, {"lang": "MUMPS", "loc": 7, "block": "<pre class=\"text highlighted_source\">TOKENS<br/> NEW I,J,INP<br/> SET INP=\"Hello,how,are,you,today\"<br/> NEW I FOR I=1:1:$LENGTH(INP,\",\") SET INP(I)=$PIECE(INP,\",\",I)<br/> NEW J FOR J=1:1:I WRITE INP(J) WRITE:J'=I \".\"<br/> KILL I,J,INP  // Kill is optional. \"New\" variables automatically are killed on \"Quit\"<br/> QUIT</pre>"}, {"lang": "Nemerle", "loc": 14, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>using Nemerle.Utility.NString;<br/>\u00a0<br/>module Tokenize<br/>{<br/>    Main()\u00a0: void<br/>    {<br/>        def cswords = \"Hello,How,Are,You,Today\";<br/>        WriteLine(Concat(\".\", $[s | s in cswords.Split(',')]));<br/>        // Split() produces an array while Concat() consumes a list<br/>        // a quick in place list comprehension takes care of that<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 12, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/*NetRexx program *****************************************************<br/>* 20.08.2012 Walter Pachl derived from REXX Version 3<br/>**********************************************************************/</span><br/>  sss=<span class=\"st0\">'Hello,How,Are,You,Today'</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'input string='</span>sss<br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">''</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'Words in the string:'</span><br/>  ss =sss.<span class=\"kw6\">translate</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>,<span class=\"st0\">','</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Loop</span> i=<span class=\"nu0\">1</span> To ss.<span class=\"kw6\">words</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Say</span> ss.<span class=\"kw6\">word</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"st0\">'.'</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'End-of-list.'</span></pre>"}, {"lang": "NewLISP", "loc": 1, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#print\"><span class=\"kw1\">print</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#join\"><span class=\"kw1\">join</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#parse\"><span class=\"kw1\">parse</span></a> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nial", "loc": 4, "block": "<pre class=\"text highlighted_source\">     s\u00a0:= 'Hello,How,Are,You,Today'<br/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br/>|H|e|l|l|o|,|H|o|w|,|A|r|e|,|Y|o|u|,|T|o|d|a|y|<br/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</pre>"}, {"lang": "Nim", "loc": 5, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>let text = \"Hello,How,Are,You,Today\"<br/>let tokens = text.split(',')<br/>echo tokens.join(\" \")</pre>"}, {"lang": "Objeck", "loc": 9, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span> Parse <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    tokens <span class=\"sy0\">:=</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">each</span><span class=\"br0\">(</span>i <span class=\"sy0\">:</span> tokens<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      tokens<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Objective-C", "loc": 4, "block": "<pre class=\"objc highlighted_source\"><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span>text <span class=\"sy0\">=</span> <span class=\"co3\">@</span><span class=\"st0\">\"Hello,How,Are,You,Today\"</span>;<br/><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/\"><span class=\"kw5\">NSArray</span></a> <span class=\"sy0\">*</span>tokens <span class=\"sy0\">=</span> <span class=\"br0\">[</span>text componentsSeparatedByString<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\",\"</span><span class=\"br0\">]</span>;<br/><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span>result <span class=\"sy0\">=</span> <span class=\"br0\">[</span>tokens componentsJoinedByString<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\".\"</span><span class=\"br0\">]</span>;<br/>NSLog<span class=\"br0\">(</span>result<span class=\"br0\">)</span>;</pre>"}, {"lang": "OCaml", "loc": 3, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> words <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>split_on_char <span class=\"sy0\">'</span>,<span class=\"sy0\">'</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span> <span class=\"kw1\">in</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>concat <span class=\"st0\">\".\"</span> words<br/>\u00a0</pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"Hello,How,Are,You,Today\" wordsWith(',') println</pre>"}, {"lang": "ooRexx", "loc": 5, "block": "<pre class=\"oorexx highlighted_source\">text=<span class=\"st0\">'Hello,How,Are,You,Today'</span><br/><span class=\"kw1\">do</span> <span class=\"kw2\">while</span> text <span class=\"sy0\">\\</span>= <span class=\"st0\">''</span><br/>   <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> text word1 <span class=\"st0\">','</span> text<br/>   <span class=\"kw1\">call</span> <span class=\"kw6\">charout</span> <span class=\"st0\">'STDOUT:'</span>,word1<span class=\"st0\">'.'</span><br/><span class=\"kw3\">end</span></pre>"}, {"lang": "OpenEdge/Progress", "loc": 24, "block": "<pre class=\"progress highlighted_source\"><span class=\"kw1\">FUNCTION</span> tokenizeString <span class=\"kw1\">RETURNS</span> <span class=\"kw4\">CHAR</span> <span class=\"br0\">(</span><br/>   i_c <span class=\"kw3\">AS</span> <span class=\"kw4\">CHAR</span><br/><span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>\u00a0<br/>   <span class=\"kw1\">DEF</span> <span class=\"kw1\">VAR</span> ii        <span class=\"kw3\">AS</span> <span class=\"kw4\">INT</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">DEF</span> <span class=\"kw1\">VAR</span> carray    <span class=\"kw3\">AS</span> <span class=\"kw4\">CHAR</span> <span class=\"kw4\">EXTENT</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">DEF</span> <span class=\"kw1\">VAR</span> cresult   <span class=\"kw3\">AS</span> <span class=\"kw4\">CHAR</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw4\">EXTENT</span><span class=\"br0\">(</span> carray <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">NUM-ENTRIES</span><span class=\"br0\">(</span> i_c <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw1\">DO</span> ii <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">NUM-ENTRIES</span><span class=\"br0\">(</span> i_c <span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>      <span class=\"me0\">carray</span><span class=\"br0\">[</span> ii <span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">ENTRY</span><span class=\"br0\">(</span> ii<span class=\"sy0\">,</span> i_c <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw1\">DO</span> ii <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"kw4\">EXTENT</span><span class=\"br0\">(</span> carray <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>      cresult <span class=\"sy0\">=</span> cresult <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span> <span class=\"sy0\">+</span> carray<span class=\"br0\">[</span> ii <span class=\"br0\">]</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>   <span class=\"kw3\">RETURN</span> <span class=\"kw1\">SUBSTRING</span><span class=\"br0\">(</span> cresult<span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><span class=\"sy0\">.</span> <span class=\"coMULTI\">/* tokenizeString */</span><br/>\u00a0<br/><span class=\"kw1\">MESSAGE</span> <br/>   tokenizeString<span class=\"br0\">(</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span> <span class=\"br0\">)</span> <br/><span class=\"kw1\">VIEW-AS</span> <span class=\"kw1\">ALERT-BOX</span><span class=\"sy0\">.</span></pre>"}, {"lang": "Oz", "loc": 3, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">for</span> T <span class=\"kw1\">in</span> <span class=\"br0\">{</span>String<span class=\"sy0\">.</span>tokens <span class=\"st0\">\"Hello,How,Are,You,Today\"</span> <span class=\"re3\">&amp;,</span><span class=\"br0\">}</span> <span class=\"kw1\">do</span><br/>   <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>printInfo T<span class=\"sy0\">#</span><span class=\"st0\">\".\"</span><span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 19, "block": "<pre class=\"parigp highlighted_source\">\u00a0<br/><span class=\"co1\">\\\\ Tokenize a string str according to 1 character delimiter d. Return a list of tokens.</span><br/><span class=\"co1\">\\\\ Using ssubstr() from http://rosettacode.org/wiki/Substring#PARI.2FGP</span><br/><span class=\"co1\">\\\\ tokenize() 3/5/16 aev</span><br/>tokenize<span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"sy0\">,</span>d<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>my<span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"sy0\">=</span><span class=\"kw1\">Str</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"sy0\">,</span>d<span class=\"br0\">)</span><span class=\"sy0\">,</span>vt<span class=\"sy0\">=</span><span class=\"kw1\">Vecsmall</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>d1<span class=\"sy0\">=</span>sasc<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">,</span>Lr<span class=\"sy0\">=</span><span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>sn<span class=\"sy0\">=</span>#str<span class=\"sy0\">,</span>v1<span class=\"sy0\">,</span>p1<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span>p1<span class=\"sy0\">,</span>sn<span class=\"sy0\">,</span> v1<span class=\"sy0\">=</span>vt<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>v1<span class=\"sy0\">==</span>d1<span class=\"sy0\">,</span> <span class=\"kw1\">listput</span><span class=\"br0\">(</span>Lr<span class=\"sy0\">,</span>ssubstr<span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"sy0\">,</span>p1<span class=\"sy0\">,</span>i<span class=\"sy0\">-</span>p1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> p1<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/><span class=\"kw1\">return</span><span class=\"br0\">(</span>Lr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span><br/><span class=\"co1\">\\\\ TEST </span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" *** Testing tokenize from Version #1:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"1.\"</span><span class=\"sy0\">,</span> tokenize<span class=\"br0\">(</span><span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">\\\\ BOTH 2 &amp; 3 are NOT OK!!</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"2.\"</span><span class=\"sy0\">,</span>tokenize<span class=\"br0\">(</span><span class=\"st0\">\"Hello,How,Are,You,Today,\"</span><span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"3.\"</span><span class=\"sy0\">,</span>tokenize<span class=\"br0\">(</span><span class=\"st0\">\",Hello,,How,Are,You,Today\"</span><span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Pascal", "loc": 25, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> TokenizeString<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$mode objfpc}{$H+}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  SysUtils<span class=\"sy1\">,</span> Classes<span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  TestString <span class=\"sy3\">=</span> <span class=\"st0\">'Hello,How,Are,You,Today'</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  Tokens<span class=\"sy1\">:</span> TStringList<span class=\"sy1\">;</span><br/>  I<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"co1\">// Uses FCL facilities, \"harder\" algorithm not implemented</span><br/>  Tokens <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStringList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">try</span><br/>    Tokens<span class=\"sy1\">.</span><span class=\"me1\">Delimiter</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">','</span><span class=\"sy1\">;</span><br/>    Tokens<span class=\"sy1\">.</span><span class=\"me1\">DelimitedText</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TestString<span class=\"sy1\">;</span><br/>    Tokens<span class=\"sy1\">.</span><span class=\"me1\">Delimiter</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'.'</span><span class=\"sy1\">;</span> <span class=\"co1\">// For example</span><br/>    <span class=\"co1\">// To standard Output</span><br/>    <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>Format<span class=\"br0\">(</span><span class=\"st0\">'Tokenize from: \"%s\"'</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>TestString<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>Format<span class=\"br0\">(</span><span class=\"st0\">'to:            \"%s\"'</span><span class=\"sy1\">,</span><span class=\"br0\">[</span>Tokens<span class=\"sy1\">.</span><span class=\"me1\">DelimitedText</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">finally</span><br/>    Tokens<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 1, "block": "<pre class=\"perl highlighted_source\"><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">'.'</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"co2\">/,/</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Hello,How,Are,You,Today'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"st_h\">'Hello,How,Are,You,Today'</span><span class=\"sy0\">.</span><span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st_h\">','</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">'.'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">say</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 1, "block": "<pre class=\"text highlighted_source\">?join(split(\"Hello,How,Are,You,Today\",\",\"),\".\")</pre>"}, {"lang": "PHP", "loc": 4, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'Hello,How,Are,You,Today'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"st_h\">'.'</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/explode\"><span class=\"kw3\">explode</span></a><span class=\"br0\">(</span><span class=\"st_h\">','</span><span class=\"sy0\">,</span> <span class=\"re0\">$str</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">(mapcar pack<br/>   (split (chop \"Hello,How,Are,You,Today\") \",\") )</pre>"}, {"lang": "Pike", "loc": 1, "block": "<pre class=\"pike highlighted_source\"><span class=\"br0\">(</span><span class=\"st0\">\"Hello,How,Are,You,Today\"</span> <span class=\"sy0\">/</span> <span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"st0\">\".\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PL/I", "loc": 23, "block": "<pre class=\"pli highlighted_source\">tok<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">declare</span> s <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">initial</span> <span class=\"br0\">(</span><span class=\"st0\">'Hello,How,Are,You,Today'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">declare</span> n <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span> <span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>n <span class=\"sy0\">=</span> <span class=\"kw1\">tally</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> table<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"kw1\">varying</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> c <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> k<span class=\"br0\">)</span> <span class=\"kw1\">fixed</span> <span class=\"kw1\">binary</span> <span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   table <span class=\"sy0\">=</span> <span class=\"st0\">''</span><span class=\"sy0\">;</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      c <span class=\"sy0\">=</span> <span class=\"kw1\">substr</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> c <span class=\"sy0\">=</span> <span class=\"st0\">','</span> <span class=\"kw1\">then</span> k <span class=\"sy0\">=</span> k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">else</span> table<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">=</span> table<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">||</span> c<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"coMULTI\">/* display the table */</span><br/>   table <span class=\"sy0\">=</span> table <span class=\"sy0\">||</span> <span class=\"st0\">'.'</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"kw1\">skip</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">string</span><span class=\"br0\">(</span>table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pop11", "loc": 6, "block": "<pre class=\"text highlighted_source\">;;; Make a list of strings from a string using space as separator<br/>lvars list;<br/>sysparse_string('the cat sat on the mat') -&gt; list;<br/>;;; print the list of strings<br/>list =&gt;<br/>** [the cat sat on the mat]</pre>"}, {"lang": "PowerShell", "loc": 2, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$words</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span>.Split<span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><br/><span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span>::Join<span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"sy0\">,</span> <span class=\"re0\">$words</span><span class=\"br0\">)</span></pre>"}, {"lang": "Prolog", "loc": 9, "block": "<pre class=\"prolog highlighted_source\">splitup<span class=\"br0\">(</span>Sep<span class=\"sy4\">,</span><span class=\"br0\">[</span>token<span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"sy5\">|</span>BL<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> splitup<span class=\"br0\">(</span>Sep<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>BL<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>splitup<span class=\"br0\">(</span>Sep<span class=\"sy4\">,</span><span class=\"br0\">[</span>A<span class=\"sy5\">|</span>AL<span class=\"br0\">]</span><span class=\"sy4\">,</span>B<span class=\"br0\">)</span>      <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span>A<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">{</span><span class=\"sy2\">\\+</span> <span class=\"br0\">[</span>A<span class=\"br0\">]</span> <span class=\"sy6\">=</span> Sep <span class=\"br0\">}</span><span class=\"sy4\">,</span> splitup<span class=\"br0\">(</span>Sep<span class=\"sy4\">,</span>AL<span class=\"sy4\">,</span>B<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>splitup<span class=\"br0\">(</span>Sep<span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>B<span class=\"sy5\">|</span>BL<span class=\"br0\">]</span><span class=\"br0\">)</span>     <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> Sep<span class=\"sy4\">,</span> splitup<span class=\"br0\">(</span>Sep<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>BL<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>splitup<span class=\"br0\">(</span>_Sep<span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>        <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>start <span class=\"sy1\">:-</span><br/>    phrase<span class=\"br0\">(</span>splitup<span class=\"br0\">(</span>\"<span class=\"sy4\">,</span>\"<span class=\"sy4\">,</span>Tokens<span class=\"br0\">)</span><span class=\"sy4\">,</span>\"Hello<span class=\"sy4\">,</span>How<span class=\"sy4\">,</span>Are<span class=\"sy4\">,</span>You<span class=\"sy4\">,</span>Today\"<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    phrase<span class=\"br0\">(</span>splitup<span class=\"br0\">(</span>\"<span class=\"sy4\">.</span>\"<span class=\"sy4\">,</span>Tokens<span class=\"br0\">)</span><span class=\"sy4\">,</span>Backtogether<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    string_to_list<span class=\"br0\">(</span>ABack<span class=\"sy4\">,</span>Backtogether<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    writeln<span class=\"br0\">(</span>ABack<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "Python", "loc": 3, "block": "<pre class=\"python highlighted_source\">text <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><br/>tokens <span class=\"sy0\">=</span> text.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"st0\">'.'</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>tokens<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Q", "loc": 2, "block": "<pre class=\"q highlighted_source\">words: <span class=\"st0\">\",\"</span> <span class=\"kw1\">vs</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><br/><span class=\"st0\">\".\"</span> <span class=\"kw1\">sv</span> words</pre>"}, {"lang": "R", "loc": 3, "block": "<pre class=\"text highlighted_source\">text &lt;- \"Hello,How,Are,You,Today\"<br/>junk &lt;- strsplit(text, split=\",\")<br/>print(paste(unlist(junk), collapse=\".\"))</pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(string-join (string-split \"Hello,How,Are,You,Today\" \",\") \".\")<br/>;; -&gt; \"Hello.How.Are.You.Today\"<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 1, "block": "<pre class=\"text highlighted_source\">'Hello,How,Are,You,Today' ',' split '.' join print</pre>"}, {"lang": "REBOL", "loc": 4, "block": "<pre class=\"rebol highlighted_source\"><span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"st0\">\"Original:\"</span>  original: <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"br0\">]</span><br/>tokens: <span class=\"kw3\">parse</span> original <span class=\"st0\">\",\"</span><br/>dotted: <span class=\"st0\">\"\"</span>  <span class=\"kw2\">repeat</span> i tokens <span class=\"br0\">[</span><span class=\"kw3\">append</span> dotted <span class=\"kw3\">rejoin</span> <span class=\"br0\">[</span>i <span class=\"st0\">\".\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"kw3\">print</span> <span class=\"br0\">[</span><span class=\"st0\">\"Dotted:  \"</span>  dotted<span class=\"br0\">]</span></pre>"}, {"lang": "Red", "loc": 8, "block": "<pre class=\"text highlighted_source\">str: \"Hello,How,Are,You,Today\"<br/>&gt;&gt; tokens: split str \",\"<br/>&gt;&gt; probe tokens<br/>[\"Hello\" \"How\" \"Are\" \"You\" \"Today\"]<br/>\u00a0<br/>&gt;&gt; periods: replace/all form tokens \" \" \".\"       \u00a0;The word FORM converts the list series to a string removing quotes. <br/>&gt;&gt; print periods                                           \u00a0;then REPLACE/ALL spaces with period<br/>Hello.How.Are.You.Today</pre>"}, {"lang": "Retro", "loc": 13, "block": "<pre class=\"text highlighted_source\">{{<br/> \u00a0: char     (  -$  )   \" \"\u00a0;<br/> \u00a0: tokenize ( $-$$ )<br/>    @char ^strings'splitAtChar withLength 1- over + 0 swap\u00a0! tempString\u00a0;<br/> \u00a0: action   ( $-   )<br/>    keepString ^buffer'add\u00a0;<br/>---reveal---<br/> \u00a0: split    ( $cb- )<br/>    ^buffer'set\u00a0!char<br/>    char ^strings'append<br/>    [ tokenize action dup 1 &lt;&gt; ] while drop<br/>    ^buffer'get drop\u00a0;<br/>}}</pre>"}, {"lang": "REXX", "loc": 17, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program separates a string of comma-delimited words, and echoes. */</span><br/>sss = <span class=\"st0\">'Hello,How,Are,You,Today'</span>        <span class=\"coMULTI\">/*words seperated by commas (,). */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'input string ='</span> sss               <span class=\"coMULTI\">/*display the original string.   */</span><br/>new=sss                                <span class=\"coMULTI\">/*make a copy of the string.     */</span><br/>                                       <span class=\"coMULTI\">/* [\u2193]  string NEW is destroyed. */</span><br/>  <span class=\"kw1\">do</span> items=<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span>  new==<span class=\"st0\">''</span>           <span class=\"coMULTI\">/*keep going until  NEW is empty.*/</span><br/>  <span class=\"kw1\">parse</span>  <span class=\"kw2\">var</span>  new a<span class=\"sy0\">.</span>items  <span class=\"st0\">','</span>  new    <span class=\"coMULTI\">/*parse words delinated by comma.*/</span><br/>  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*items*/</span>                      <span class=\"coMULTI\">/* [\u2191]  the array is named   A.  */</span><br/>\u00a0<br/><span class=\"kw1\">say</span>;   <span class=\"kw1\">say</span> <span class=\"st0\">'Words in the string:'</span>      <span class=\"coMULTI\">/*display a header for the list. */</span><br/>\u00a0<br/>     <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> items                 <span class=\"coMULTI\">/*now, display all the words.    */</span><br/>     <span class=\"kw1\">say</span> a<span class=\"sy0\">.</span>j <span class=\"sy0\">||</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span>, j<span class=\"sy0\">\\</span>==items<span class=\"br0\">)</span>   <span class=\"coMULTI\">/*append period to word,  maybe. */</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                       <span class=\"coMULTI\">/* [\u2191]  don't append \".\" if last.*/</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'End-of-list.'</span>                     <span class=\"coMULTI\">/*display a trailer for the list.*/</span><br/>                                       <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span></pre>"}, {"lang": "Ring", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>see substr(\"Hello,How,Are,You,Today\", \",\", \".\")<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 1, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">puts</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span>.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Rust", "loc": 5, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    let s = \"Hello,How,Are,You,Today\";<br/>    let tokens: Vec&lt;&amp;str&gt; = s.split(\",\").collect();<br/>    println!(\"{}\", tokens.join(\".\"));<br/>}</pre>"}, {"lang": "S-lang", "loc": 2, "block": "<pre class=\"text highlighted_source\">variable a = strchop(\"Hello,How,Are,You,Today\", ',', 0);<br/>print(strjoin(a, \".\"));</pre>"}, {"lang": "Scala", "loc": 1, "block": "<pre class=\"scala highlighted_source\">println<span class=\"br0\">(</span><span class=\"st0\">\"Hello,How,Are,You,Today\"</span> split <span class=\"st0\">\",\"</span> mkString <span class=\"st0\">\".\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 8, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>use<span class=\"sy0\">-</span>modules <span class=\"br0\">(</span>ice<span class=\"sy0\">-</span><span class=\"nu0\">9</span> regex<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">s</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> words <span class=\"br0\">(</span><span class=\"kw1\">map</span> match:<span class=\"kw1\">substring</span> <span class=\"br0\">(</span>list<span class=\"sy0\">-</span>matches <span class=\"st0\">\"[^,]+\"</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"br0\">(</span><span class=\"kw1\">length</span> words<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">list-ref</span> words n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> n <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> words<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 3, "block": "<pre class=\"text highlighted_source\">var array string: tokens is 0 times \"\";<br/>\u00a0<br/>tokens\u00a0:= split(\"Hello,How,Are,You,Today\", \",\");</pre>"}, {"lang": "Self", "loc": 3, "block": "<pre class=\"text highlighted_source\">| s = 'Hello,How,Are,You,Today' |<br/>((s splitOn: ',') joinUsing: '.') printLine.<br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 1, "block": "<pre class=\"ruby highlighted_source\"><span class=\"st0\">'Hello,How,Are,You,Today'</span>.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">','</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'.'</span><span class=\"br0\">)</span>.<span class=\"me1\">say</span>;</pre>"}, {"lang": "Slate", "loc": 1, "block": "<pre class=\"text highlighted_source\">('Hello,How,Are,You,Today' splitWith: $,) join &amp;separator: '.'.</pre>"}, {"lang": "Smalltalk", "loc": 3, "block": "<pre class=\"smalltalk highlighted_source\">|<span class=\"re3\">array </span>|<br/><span class=\"re6\">array</span> <span class=\"sy0\">:=</span> <span class=\"st0\">'Hello,How,Are,You,Today'</span> subStrings: $,.<br/><span class=\"re5\">array</span> fold: <span class=\"br0\">[</span>:<span class=\"re5\">concatenation</span>\u00a0:<span class=\"re5\">string</span> | concatenation, <span class=\"st0\">'.'</span>, <span class=\"re5\">string</span> <span class=\"br0\">]</span></pre>"}, {"lang": "SNOBOL4", "loc": 17, "block": "<pre class=\"text highlighted_source\">        define('split(chs,str)i,j,t,w2')\u00a0:(split_end)<br/>split   t = table()<br/>sp1     str pos(0) (break(chs) | rem) $ t&lt;i = i + 1&gt;<br/>+           span(chs) (break(chs) | '') . w2  = w2\u00a0:s(sp1)<br/>*       t&lt;i&gt; = differ(str,'') str\u00a0;* Uncomment for CSnobol<br/>        split = array(i)<br/>sp2     split&lt;j = j + 1&gt; = t&lt;j&gt;\u00a0:s(sp2)f(return)<br/>split_end<br/>\u00a0<br/>        define('join(ch,a)i,')\u00a0:(join_end)<br/>join    join = join a&lt;i = i + 1&gt;<br/>        join = join\u00a0?a&lt;i + 1&gt; ch\u00a0:s(join)f(return)<br/>join_end<br/>\u00a0<br/>*       # Test and display<br/>        output = join('.',split(',','Hello,How,Are,You,Today'))<br/>end</pre>"}, {"lang": "Standard ML", "loc": 2, "block": "<pre class=\"text highlighted_source\">val splitter = String.tokens (fn c =&gt; c = #\",\");<br/>val main = (String.concatWith \".\") o splitter;</pre>"}, {"lang": "Swift", "loc": 5, "block": "<pre class=\"text highlighted_source\">let text = \"Hello,How,Are,You,Today\"<br/>let tokens = text.components(separatedBy: \",\") // for single or multi-character separator<br/>print(tokens)<br/>let result = tokens.joined(separator: \".\")<br/>print(result)</pre>"}, {"lang": "Tcl", "loc": 1, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">split</span> <span class=\"re0\">$string</span> <span class=\"st0\">\",\"</span></pre>"}, {"lang": "tr", "loc": 1, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw3\">echo</span> <span class=\"st_h\">'Hello,How,Are,You,Today'</span> <span class=\"sy0\">|</span> <span class=\"kw2\">tr</span> <span class=\"st_h\">','</span> <span class=\"st_h\">'.'</span></pre>"}, {"lang": "TUSCRIPT", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>SET string=\"Hello,How,Are,You,Today\"<br/>SET string=SPLIT (string,\":,:\")<br/>SET string=JOIN  (string,\".\")<br/>\u00a0</pre>"}, {"lang": "TXR", "loc": 5, "block": "<pre class=\"text highlighted_source\">@(next\u00a0:list \"Hello,How,Are,You,Today\")<br/>@(coll)@{token /[^,]+/}@(end)<br/>@(output)<br/>@(rep)@<a class=\"__cf_email__\" data-cfemail=\"483c27232d266608\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(last)@<a class=\"__cf_email__\" data-cfemail=\"4733282c222907\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(end)<br/>@(end)</pre>"}, {"lang": "UNIX Shell", "loc": 5, "block": "<pre class=\"bash highlighted_source\"><span class=\"re2\">string</span>=<span class=\"st_h\">'Hello,How,Are,You,Today'</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"re2\">IFS</span>=,<br/> <span class=\"kw3\">printf</span> <span class=\"st_h\">'%s.'</span> <span class=\"re1\">$string</span><br/> <span class=\"kw3\">echo</span><span class=\"br0\">)</span></pre>"}, {"lang": "UnixPipes", "loc": 5, "block": "<pre class=\"bash highlighted_source\">token<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"br0\">(</span><span class=\"re2\">IFS</span>=, <span class=\"kw2\">read</span> <span class=\"re5\">-r</span> A B; <span class=\"kw3\">echo</span> <span class=\"st0\">\"<span class=\"es2\">$A</span>\"</span>.; <span class=\"kw3\">test</span> <span class=\"re5\">-n</span> <span class=\"st0\">\"<span class=\"es2\">$B</span>\"</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"kw3\">echo</span> <span class=\"st0\">\"<span class=\"es2\">$B</span>\"</span> <span class=\"sy0\">|</span> token<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"Hello,How,Are,You\"</span> <span class=\"sy0\">|</span> token</pre>"}, {"lang": "Ursa", "loc": 8, "block": "<pre class=\"text highlighted_source\">decl string text<br/>set text \"Hello,How,Are,You,Today\"<br/>decl string&lt;&gt; tokens<br/>set tokens (split text \",\")<br/>for (decl int i) (&lt; i (size tokens)) (inc i)<br/>        out tokens&lt;i&gt; \".\" console<br/>end for<br/>out endl console</pre>"}, {"lang": "Ursala", "loc": 7, "block": "<pre class=\"text highlighted_source\">#import std<br/>\u00a0<br/>token_list = sep`, 'Hello,How,Are,You,Today'<br/>\u00a0<br/>#cast\u00a0%s<br/>\u00a0<br/>main = mat`. token_list</pre>"}, {"lang": "Vala", "loc": 6, "block": "<pre class=\"vala highlighted_source\"><span class=\"co1\">// declare test string</span><br/><span class=\"kw4\">string</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"sy0\">;</span><br/><span class=\"co1\">// create array of strings, could use var words instead if desired</span><br/><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> words <span class=\"sy0\">=</span> s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">// create string by joining array of strings with .</span><br/><span class=\"kw4\">string</span> joined <span class=\"sy0\">=</span> <span class=\"kw4\">string</span>.<span class=\"me1\">joinv</span><span class=\"br0\">(</span><span class=\"st0\">\".\"</span>, words<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "VBA", "loc": 13, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Sub</span> Main()<br/><span class=\"kw4\">Dim</span> temp() <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>   temp = Tokenize(<span class=\"st0\">\"Hello,How,Are,You,Today\"</span>, <span class=\"st0\">\",\"</span>)<br/>   Display temp, Space(5)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> Tokenize(strS <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, sep <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>()<br/>   Tokenize = Split(strS, sep)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Sub</span> Display(arr() <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, sep <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>)<br/>   Debug.<span class=\"kw4\">Print</span> Join(arr, sep)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span></pre>"}, {"lang": "VBScript", "loc": 4, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>s = <span class=\"st0\">\"Hello,How,Are,You,Today\"</span><br/>WScript.StdOut.Write Join(Split(s,<span class=\"st0\">\",\"</span>),<span class=\"st0\">\".\"</span>)<br/>\u00a0</pre>"}, {"lang": "Vedit macro language", "loc": 20, "block": "<pre class=\"vedit highlighted_source\">Buf_Switch<span class=\"br0\">(</span>Buf_Free<span class=\"br0\">)</span><br/>Ins_Text<span class=\"br0\">(</span><span class=\"st0\">\"Hello,How,Are,You,Today\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">// Split the text into text registers 10, 11, ...</span><br/>BOF<br/>#<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><br/><span class=\"kw1\">Repeat</span><span class=\"br0\">(</span>ALL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    #<span class=\"nu0\">1</span><span class=\"sy0\">++</span><br/>    #<span class=\"nu0\">2</span> <span class=\"sy0\">=</span> Cur_Pos<br/>    Search<span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"sy0\">,</span> ADVANCE<span class=\"sy0\">+</span>ERRBREAK<span class=\"br0\">)</span><br/>    Reg_Copy_Block<span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"sy0\">,</span> #<span class=\"nu0\">2</span><span class=\"sy0\">,</span> Cur_Pos<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>Reg_Copy_Block<span class=\"br0\">(</span>#<span class=\"nu0\">1</span><span class=\"sy0\">,</span> #<span class=\"nu0\">2</span><span class=\"sy0\">,</span> EOB_Pos<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">// Display the list</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> #<span class=\"nu0\">3</span> <span class=\"sy0\">&lt;=</span> #<span class=\"nu0\">1</span><span class=\"sy0\">;</span> #<span class=\"nu0\">3</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Reg_Type<span class=\"br0\">(</span>#<span class=\"nu0\">3</span><span class=\"br0\">)</span> Message<span class=\"br0\">(</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span> <br/><span class=\"br0\">}</span><br/>\u00a0<br/>Buf_Quit<span class=\"br0\">(</span>OK<span class=\"br0\">)</span></pre>"}, {"lang": "WinBatch", "loc": 9, "block": "<pre class=\"winbatch highlighted_source\">text  = <span class=\"st0\">'Hello,How,Are,You,Today'</span><br/>result = <span class=\"st0\">''</span><br/><span class=\"kw3\">BoxOpen</span><span class=\"br0\">(</span><span class=\"st0\">'WinBatch Tokenizing Example'</span>, <span class=\"st0\">''</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> ix = <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw3\">itemcount</span><span class=\"br0\">(</span>text,<span class=\"st0\">','</span><span class=\"br0\">)</span><br/>    result = result <span class=\"co2\">: itemextract(ix, text, ',')\u00a0: '.'</span><br/>    <span class=\"kw3\">BoxText</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span><br/><span class=\"kw1\">next</span><br/><span class=\"kw3\">display</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"st0\">'End of Program'</span>, <span class=\"st0\">'Dialog and program will close momentarily.'</span><span class=\"br0\">)</span><br/><span class=\"kw3\">BoxShut</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Wortel", "loc": 1, "block": "<pre class=\"text highlighted_source\">@join \".\" @split \",\" \"Hello,How,Are,You,Today\"</pre>"}, {"lang": "XPath 2.0", "loc": 1, "block": "<pre class=\"text highlighted_source\">string-join(tokenize(\"Hello,How,Are,You,Today\", \",\"), \".\")</pre>"}, {"lang": "XPL0", "loc": 20, "block": "<pre class=\"text highlighted_source\">string 0;<br/>include c:\\cxpl\\codes;<br/>int  I, J, K, Char;<br/>char String, Array(5,6);        \\5 words and 5 maximum chars + terminating 0<br/>\u00a0<br/>[String:= \"Hello,How,Are,You,Today\";<br/>I:= 0;  K:= 0;<br/>repeat  J:= 0;<br/>        loop    [Char:= String(I);<br/>                I:= I+1;<br/>                if Char=^, or Char=0 then quit;<br/>                Array(K,J):= Char;<br/>                J:= J+1;<br/>                ];<br/>        Array(K,J):= 0;         \\terminate word<br/>        K:= K+1;                \\next word in array<br/>until   K&gt;=5;<br/>for K:= 4 downto 0 do [Text(0, addr Array(K,0));  ChOut(0, ^.)];<br/>CrLf(0);<br/>]</pre>"}, {"lang": "Yabasic", "loc": 9, "block": "<pre class=\"text highlighted_source\">dim s$(1)<br/>\u00a0<br/>n = token(\"Hello. How are you today?\", s$(), \".? \")<br/>\u00a0<br/>for i = 1 to n<br/>\tprint s$(i);<br/>\tif i &lt; n print \".\";<br/>next<br/>print</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">\"Hello,How,Are,You,Today\".split(\",\").concat(\".\").println();<br/>Hello.How.Are.You.Today</pre>"}, {"lang": "Zsh", "loc": 3, "block": "<pre class=\"text highlighted_source\">str='Hello,How,Are,You,Today'<br/>tokens=(${(s:,:)str})<br/>print ${(j:.:)tokens}</pre>"}]}