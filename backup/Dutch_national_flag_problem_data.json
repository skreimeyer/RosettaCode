{"task": "Dutch_national_flag_problem", "blocks": [{"lang": "Ada", "loc": 99, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Discrete_Random</span>, Ada.<span class=\"me1\">Command_Line</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Dutch_National_Flag <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Colour_Type <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Red, White, Blue<span class=\"br0\">)</span>;<br/>\u00a0<br/>   Number: Positive <span class=\"kw3\">range</span> <span class=\"nu0\">2</span> .. <span class=\"me1\">Positive</span>'Last\u00a0:=<br/>     Positive'Value<span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"co1\">-- no sorting if the Number of balls is less than 2</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Balls <span class=\"kw1\">is</span> <span class=\"kw3\">array</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"me1\">Number</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Colour_Type;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Is_Sorted<span class=\"br0\">(</span>B: Balls<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>      <span class=\"co1\">-- checks if balls are in order</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Balls'First .. <span class=\"me1\">Balls</span>'Last-<span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> B<span class=\"br0\">(</span>I<span class=\"br0\">)</span> &gt; B<span class=\"br0\">(</span>I+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> False;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> True;<br/>   <span class=\"kw1\">end</span> Is_Sorted;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Random_Balls <span class=\"kw1\">return</span> Balls <span class=\"kw1\">is</span><br/>      <span class=\"co1\">-- generates an array of random balls, ensuring they are not in order</span><br/>      <span class=\"kw3\">package</span> Random_Colour <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Discrete_Random</span><span class=\"br0\">(</span>Colour_Type<span class=\"br0\">)</span>;<br/>      Gen: Random_Colour.<span class=\"me1\">Generator</span>;<br/>      B: Balls;<br/>   <span class=\"kw1\">begin</span><br/>      Random_Colour.<span class=\"me1\">Reset</span><span class=\"br0\">(</span>Gen<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Balls'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>            B<span class=\"br0\">(</span>I<span class=\"br0\">)</span>\u00a0:= Random_Colour.<span class=\"me1\">Random</span><span class=\"br0\">(</span>Gen<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> <span class=\"br0\">(</span><span class=\"kw2\">not</span> Is_Sorted<span class=\"br0\">(</span>B<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"co1\">-- ... ensuring they are not in order</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> B;<br/>   <span class=\"kw1\">end</span> Random_Balls;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Print<span class=\"br0\">(</span>Message: String; B: Balls<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Message<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> B'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Colour_Type'Image<span class=\"br0\">(</span>B<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">if</span> I &lt; B'Last <span class=\"kw1\">then</span><br/>            Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">else</span><br/>            Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Print;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Sort<span class=\"br0\">(</span>Bls: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Balls<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"co1\">-- sort Bls in O(1) time</span><br/>\u00a0<br/>      Cnt: <span class=\"kw3\">array</span><span class=\"br0\">(</span>Colour_Type<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Natural\u00a0:= <span class=\"br0\">(</span>Red =&gt; <span class=\"nu0\">0</span>, White =&gt; <span class=\"nu0\">0</span>, Blue =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>      Col: Colour_Type;<br/>\u00a0<br/>      <span class=\"kw3\">procedure</span> Move_Colour_To_Top<span class=\"br0\">(</span>Bls: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Balls;<br/>                                   Colour: Colour_Type;<br/>                                   Start: Positive;<br/>                                   Count: Natural<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>         This: Positive\u00a0:= Start;<br/>         Tmp: Colour_Type;<br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">for</span> N <span class=\"kw3\">in</span> Start .. <span class=\"me1\">Start</span>+Count-<span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>            <span class=\"kw1\">while</span> Bls<span class=\"br0\">(</span>This<span class=\"br0\">)</span> /= Colour <span class=\"kw1\">loop</span><br/>               This\u00a0:= This + <span class=\"nu0\">1</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>; <span class=\"co1\">-- This is the first index &gt;= N with B(This) = Colour</span><br/>            Tmp\u00a0:= Bls<span class=\"br0\">(</span>N<span class=\"br0\">)</span>; Bls<span class=\"br0\">(</span>N<span class=\"br0\">)</span>\u00a0:= Bls<span class=\"br0\">(</span>This<span class=\"br0\">)</span>; Bls<span class=\"br0\">(</span>This<span class=\"br0\">)</span>\u00a0:= Tmp; <span class=\"co1\">-- swap</span><br/>            This\u00a0:= This + <span class=\"nu0\">1</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span>  Move_Colour_To_Top;<br/>\u00a0<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> Ball <span class=\"kw3\">in</span> Balls'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         <span class=\"co1\">-- count how often each colour is found</span><br/>         Col\u00a0:= Bls<span class=\"br0\">(</span>Ball<span class=\"br0\">)</span>;<br/>         Cnt<span class=\"br0\">(</span>Col<span class=\"br0\">)</span>\u00a0:= Cnt<span class=\"br0\">(</span>Col<span class=\"br0\">)</span> + <span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Move_Colour_To_Top<span class=\"br0\">(</span>Bls, Red,   Start =&gt; <span class=\"nu0\">1</span>,          Count =&gt; Cnt<span class=\"br0\">(</span>Red<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      Move_Colour_To_Top<span class=\"br0\">(</span>Bls, White, Start =&gt; <span class=\"nu0\">1</span>+Cnt<span class=\"br0\">(</span>Red<span class=\"br0\">)</span>, Count =&gt; Cnt<span class=\"br0\">(</span>White<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"co1\">-- all the remaining balls are blue</span><br/>   <span class=\"kw1\">end</span> Sort;<br/>\u00a0<br/>   A: Balls\u00a0:= Random_Balls;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Print<span class=\"br0\">(</span><span class=\"st0\">\"Original Order: \"</span>, A<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">pragma</span> Assert<span class=\"br0\">(</span><span class=\"kw2\">not</span> Is_Sorted<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span>;   <span class=\"co1\">-- Check if A is unsorted</span><br/>\u00a0<br/>   Sort<span class=\"br0\">(</span>A<span class=\"br0\">)</span>; <span class=\"co1\">-- A = ((Red**Cnt(Red)= &amp; (White**Cnt(White)) &amp; (Blue**Cnt(Blue)))</span><br/>\u00a0<br/>   <span class=\"kw3\">pragma</span> Assert<span class=\"br0\">(</span>Is_Sorted<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"br0\">)</span>;   <span class=\"co1\">-- Check if A is actually sorted</span><br/>\u00a0<br/>   Print<span class=\"br0\">(</span><span class=\"st0\">\"After Sorting:  \"</span>, A<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Dutch_National_Flag;</pre>"}, {"lang": "AutoHotkey", "loc": 14, "block": "<pre class=\"autohotkey highlighted_source\">RandGen<span class=\"br0\">(</span>MaxBalls<span class=\"br0\">)</span><span class=\"br0\">{</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span>k<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span>MaxBalls<br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>% k<span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span>k<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><br/>\to<span class=\"sy0\">.=</span>k<br/><span class=\"br0\">}</span><span class=\"kw1\">return</span> o<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">While</span><span class=\"br0\">(</span><span class=\"br0\">(</span>!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>o<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>||!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>o<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>||!<a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>o<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span>||!<a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>o<span class=\"sy0\">,</span><span class=\"st0\">\"\\b1+2+3+\\b\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\to<span class=\"sy0\">:=</span>RandGen<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>o<span class=\"br0\">)</span><br/>\tF<span class=\"sy0\">.=</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>o<span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\",\"</span><br/>F<span class=\"sy0\">:=</span>RTrim<span class=\"br0\">(</span>F<span class=\"sy0\">,</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span>F<span class=\"sy0\">,</span>N D`<span class=\"sy0\">,</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>% F<span class=\"sy0\">:=</span><a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/commands/RegExReplace.htm\"><span class=\"kw3\">RegExReplace</span></a><span class=\"br0\">(</span>F<span class=\"sy0\">,</span><span class=\"st0\">\"(1)\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Red\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"(2)\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"White\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"(3)\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"Blue\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "AutoIt", "loc": 26, "block": "<pre class=\"autoit highlighted_source\">\u00a0<br/><span class=\"kw5\">#include</span><span class=\"co1\"> &lt;Array.au3&gt;</span><br/>Dutch_Flag<span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> Dutch_Flag<span class=\"br0\">(</span><span class=\"re0\">$arrayitems</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$avArray</span><span class=\"br0\">[</span><span class=\"re0\">$arrayitems</span><span class=\"br0\">]</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/UBound.htm\"><span class=\"kw3\">UBound</span></a><span class=\"br0\">(</span><span class=\"re0\">$avArray</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"re0\">$avArray</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$low</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">$high</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$arraypos</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$p</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/UBound.htm\"><span class=\"kw3\">UBound</span></a><span class=\"br0\">(</span><span class=\"re0\">$avArray</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">While</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$p</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">if</span></a> <span class=\"re0\">$avArray</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$low</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t\t\t<span class=\"re0\">$arraypos</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw4\">_ArraySwap</span><span class=\"br0\">(</span><span class=\"re0\">$avArray</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$avArray</span><span class=\"br0\">[</span><span class=\"re0\">$arraypos</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">ElseIf</span></a> <span class=\"re0\">$avArray</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$high</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t\t\t<span class=\"kw4\">_ArraySwap</span><span class=\"br0\">(</span><span class=\"re0\">$avArray</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$avArray</span><span class=\"br0\">[</span><span class=\"re0\">$p</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"re0\">$p</span> <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a><br/>\t\t\t\t<span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">WEnd</span></a><br/>\t\t<span class=\"kw4\">_ArrayDisplay</span><span class=\"br0\">(</span><span class=\"re0\">$avArray</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a>   <span class=\"co0\">;==&gt;Dutch_Flag</span><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 49, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    weight<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = <span class=\"st0\">\"red\"</span>; weight<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> = <span class=\"st0\">\"white\"</span>; weight<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> = <span class=\"st0\">\"blue\"</span>;<br/>    <span class=\"co1\"># ballnr must be &gt;= 3. Using very high numbers here may make your computer</span><br/>    <span class=\"co1\"># run out of RAM. (10 millions balls ~= 2.5GiB RAM on x86_64)</span><br/>    ballnr = <span class=\"nu0\">10</span><br/>\u00a0<br/>    <span class=\"kw4\">srand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\"># Generating a random pool of balls. This python-like loop is actually</span><br/>    <span class=\"co1\"># a prettyfied one-liner</span><br/>    <span class=\"kw1\">do</span> <br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i = <span class=\"nu0\">1</span>; i <span class=\"sy2\">&lt;=</span> ballnr; i<span class=\"sy3\">++</span><span class=\"br0\">)</span>  <br/>            <span class=\"kw1\">do</span>  <br/>                balls<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy3\">*</span> <span class=\"kw4\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"co1\"># These conditions ensure the 3 first balls contains </span><br/>            <span class=\"co1\"># a white, blue and red ball. Removing 'i &lt; 4' would</span><br/>            <span class=\"co1\"># hit performance a lot.</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>i <span class=\"sy2\">&lt;</span> <span class=\"nu0\">4</span> <span class=\"sy1\">&amp;&amp;</span> i <span class=\"sy2\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&amp;&amp;</span> balls<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy2\">==</span> balls<span class=\"br0\">[</span>i <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">||</span> <br/>                    <span class=\"br0\">(</span>i <span class=\"sy2\">&lt;</span> <span class=\"nu0\">4</span> <span class=\"sy1\">&amp;&amp;</span> i <span class=\"sy2\">&gt;</span> <span class=\"nu0\">2</span> <span class=\"sy1\">&amp;&amp;</span> balls<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy2\">==</span> balls<span class=\"br0\">[</span>i <span class=\"sy3\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>is_dnf<span class=\"br0\">(</span>balls, ballnr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"BEFORE: \"</span><span class=\"br0\">)</span><br/>    print_balls<span class=\"br0\">(</span>balls, ballnr, weight<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\"># Using gawk default quicksort. Using variants of PROCINFO[\"sorted_in\"]</span><br/>    <span class=\"co1\"># wasn't faster than a simple call to asort().</span><br/>    asort<span class=\"br0\">(</span>balls<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>AFTER\u00a0: \"</span><span class=\"br0\">)</span><br/>    print_balls<span class=\"br0\">(</span>balls, ballnr, weight<span class=\"br0\">)</span><br/>\u00a0<br/>    sorting = is_dnf<span class=\"br0\">(</span>balls, ballnr<span class=\"br0\">)</span> <span class=\"sy5\">?</span> <span class=\"st0\">\"valid\"</span> <span class=\"sy5\">:</span> <span class=\"st0\">\"invalid\"</span><br/>    <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>Sorting is \"</span> sorting <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> print_balls<span class=\"br0\">(</span>balls, ballnr, weight      ,i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i = <span class=\"nu0\">1</span>; i <span class=\"sy2\">&lt;=</span> ballnr; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%-7s\"</span>, weight<span class=\"br0\">[</span>balls<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> is_dnf<span class=\"br0\">(</span>balls, ballnr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Checking if the balls are sorted in the Dutch national flag order,</span><br/>    <span class=\"co1\"># using a simple scan with weight comparison</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i = <span class=\"nu0\">2</span>; i <span class=\"sy2\">&lt;=</span> ballnr; i<span class=\"sy3\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>balls<span class=\"br0\">[</span>i <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy2\">&gt;</span> balls<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"kw6\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw6\">return</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BaCon", "loc": 9, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> color$<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"red\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"white\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"blue\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/>DOTIMES <span class=\"nu0\">16</span><br/>    ball$ <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckappend.shtml\"><span class=\"kw3\">APPEND</span></a>$<span class=\"br0\">(</span>ball$<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> color$<span class=\"br0\">[</span><a href=\"http://www.qbasicnews.com/qboho/qckrandom.shtml\"><span class=\"kw3\">RANDOM</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>DONE<br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Unsorted: \"</span><span class=\"sy0\">,</span> ball$<br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"  Sorted: \"</span><span class=\"sy0\">,</span> REPLACE$<span class=\"br0\">(</span>SORT$<span class=\"br0\">(</span>REPLACE$<span class=\"br0\">(</span>ball$<span class=\"sy0\">,</span> <span class=\"st0\">\"blue\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"z\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"z\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"blue\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "BBC BASIC", "loc": 38, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$+\"SORTLIB\"<br/>      Sort% = FN_sortinit(0,0)<br/>\u00a0<br/>      nBalls% = 12<br/>      DIM Balls$(nBalls%-1), Weight%(nBalls%-1), DutchFlag$(2)<br/>      DutchFlag$() = \"Red \", \"White \", \"Blue \"<br/>\u00a0<br/>      REM. Generate random list of balls, ensuring not sorted:<br/>      REPEAT<br/>        prev% = 0\u00a0: sorted% = TRUE<br/>        FOR ball% = 0 TO nBalls%-1<br/>          index% = RND(3) - 1<br/>          Balls$(ball%) = DutchFlag$(index%)<br/>          IF index% &lt; prev% THEN sorted% = FALSE<br/>          prev% = index%<br/>        NEXT<br/>      UNTIL NOT sorted%<br/>      PRINT \"Random list: \" SUM(Balls$())<br/>\u00a0<br/>      REM. Assign Dutch Flag weightings to ball colours:<br/>      DutchFlag$ = SUM(DutchFlag$())<br/>      FOR ball% = 0 TO nBalls%-1<br/>        Weight%(ball%) = INSTR(DutchFlag$, Balls$(ball%))<br/>      NEXT<br/>\u00a0<br/>      REM. Sort into Dutch Flag colour sequence:<br/>      C% = nBalls%<br/>      CALL Sort%, Weight%(0), Balls$(0)<br/>      PRINT \"Sorted list: \" SUM(Balls$())<br/>\u00a0<br/>      REM Final check:<br/>      prev% = 0\u00a0: sorted% = TRUE<br/>      FOR ball% = 0 TO nBalls%-1<br/>        weight% = INSTR(DutchFlag$, Balls$(ball%))<br/>        IF weight% &lt; prev% THEN sorted% = FALSE<br/>        prev% = weight%<br/>      NEXT<br/>      IF NOT sorted% PRINT \"Error: Balls are not in correct order!\"</pre>"}, {"lang": "C", "loc": 54, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt; //printf()</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt; //srand(), rand(), RAND_MAX, qsort()</span><br/><span class=\"co2\">#include &lt;stdbool.h&gt; //true, false</span><br/><span class=\"co2\">#include &lt;time.h&gt; //time()</span><br/>\u00a0<br/><span class=\"co2\">#define NUMBALLS 5 //NUMBALLS&gt;1</span><br/>\u00a0<br/><span class=\"kw4\">int</span> compar<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>b<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> c1<span class=\"sy0\">=*</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>a<span class=\"sy0\">,</span> c2<span class=\"sy0\">=*</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>b<span class=\"sy0\">;</span> <span class=\"co1\">//first cast void* to char*, then dereference</span><br/>\t<span class=\"kw1\">return</span> c1<span class=\"sy0\">-</span>c2<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>_Bool issorted<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>balls<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span>state<span class=\"sy0\">;</span><br/>\tstate<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>NUMBALLS<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>balls<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&lt;</span>state<span class=\"br0\">)</span><span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>balls<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">&gt;</span>state<span class=\"br0\">)</span>state<span class=\"sy0\">=</span>balls<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> printout<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>balls<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> str<span class=\"br0\">[</span>NUMBALLS<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>NUMBALLS<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>balls<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"sy0\">?</span><span class=\"st0\">'r'</span><span class=\"sy0\">:</span>balls<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span><span class=\"sy0\">?</span><span class=\"st0\">'w'</span><span class=\"sy0\">:</span><span class=\"st0\">'b'</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span>str<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> balls<span class=\"br0\">[</span>NUMBALLS<span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">//0=r, 1=w, 2=b</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/srand.html\"><span class=\"kw3\">srand</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/time.html\"><span class=\"kw3\">time</span></a><span class=\"br0\">(</span>NULL<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//not a good seed but good enough for the example</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//rand() always starts with the same values for certain seeds, making</span><br/>\t        <span class=\"co1\">//  testing pretty irritating</span><br/>\t<span class=\"co1\">// Generate balls</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>NUMBALLS<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>balls<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>RAND_MAX<span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span>issorted<span class=\"br0\">(</span>balls<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"co1\">//enforce that we start with non-sorted balls</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Accidentally still sorted: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tprintout<span class=\"br0\">(</span>balls<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>NUMBALLS<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>balls<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>RAND_MAX<span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Non-sorted: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tprintout<span class=\"br0\">(</span>balls<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/qsort.html\"><span class=\"kw3\">qsort</span></a><span class=\"br0\">(</span>balls<span class=\"sy0\">,</span>NUMBALLS<span class=\"sy0\">,</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>compar<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//sort them using quicksort (stdlib)</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>issorted<span class=\"br0\">(</span>balls<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"co1\">//unnecessary check but task enforces it</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Sorted: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tprintout<span class=\"br0\">(</span>balls<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Sort failed: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tprintout<span class=\"br0\">(</span>balls<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C_sharp", "loc": 76, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCode<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> QuickSort<span class=\"br0\">(</span>IComparable<span class=\"br0\">[</span><span class=\"br0\">]</span> elements, <span class=\"kw4\">int</span> left, <span class=\"kw4\">int</span> right<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> left, j <span class=\"sy0\">=</span> right<span class=\"sy0\">;</span><br/>            IComparable pivot <span class=\"sy0\">=</span> elements<span class=\"br0\">[</span>left <span class=\"sy0\">+</span> <span class=\"br0\">(</span>right <span class=\"sy0\">-</span> left<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;=</span> j<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">while</span> <span class=\"br0\">(</span>elements<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>pivot<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> i<span class=\"sy0\">++;</span><br/>                <span class=\"kw1\">while</span> <span class=\"br0\">(</span>elements<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>pivot<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> j<span class=\"sy0\">--;</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;=</span> j<span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"co1\">// Swap</span><br/>                    IComparable tmp <span class=\"sy0\">=</span> elements<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    elements<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> elements<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                    elements<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/>                    i<span class=\"sy0\">++;</span><br/>                    j<span class=\"sy0\">--;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"co1\">// Recursive calls</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>left <span class=\"sy0\">&lt;</span> j<span class=\"br0\">)</span> QuickSort<span class=\"br0\">(</span>elements, left, j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> right<span class=\"br0\">)</span> QuickSort<span class=\"br0\">(</span>elements, i, right<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">const</span> <span class=\"kw4\">int</span> NUMBALLS <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, <span class=\"kw4\">bool</span><span class=\"sy0\">&gt;</span> IsSorted <span class=\"sy0\">=</span> <span class=\"br0\">(</span>ballList<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw4\">int</span> state <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> NUMBALLS<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">Parse</span><span class=\"br0\">(</span>ballList<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> state<span class=\"br0\">)</span><br/>                            <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>                        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">Parse</span><span class=\"br0\">(</span>ballList<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> state<span class=\"br0\">)</span><br/>                            state <span class=\"sy0\">=</span> <span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">Parse</span><span class=\"br0\">(</span>ballList<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                    <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, <span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> PrintOut <span class=\"sy0\">=</span> <span class=\"br0\">(</span>ballList2<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>                <span class=\"br0\">{</span><br/>                    StringBuilder str <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> NUMBALLS<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                        str<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">Parse</span><span class=\"br0\">(</span>ballList2<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"r\"</span> <span class=\"sy0\">:</span> <span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">Parse</span><span class=\"br0\">(</span>ballList2<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"w\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"b\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">return</span> str<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">bool</span> continueLoop <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> balls <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">string</span><span class=\"br0\">[</span>NUMBALLS<span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// 0 = r, 1 = w, 2 = b</span><br/>            Random numberGenerator <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">do</span> <span class=\"co1\">// Enforce that we start with non-sorted balls</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"co1\">// Generate balls</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> NUMBALLS<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                    balls<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> numberGenerator<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                continueLoop <span class=\"sy0\">=</span> IsSorted<span class=\"br0\">(</span>balls<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>continueLoop<span class=\"br0\">)</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Accidentally still sorted: {0}\"</span>, PrintOut<span class=\"br0\">(</span>balls<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>continueLoop<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Non-sorted: {0}\"</span>, PrintOut<span class=\"br0\">(</span>balls<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            QuickSort<span class=\"br0\">(</span>balls, <span class=\"nu0\">0</span>, NUMBALLS <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Sort them using quicksort</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}: {1}\"</span>, IsSorted<span class=\"br0\">(</span>balls<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"Sorted\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"Sort failed\"</span>, PrintOut<span class=\"br0\">(</span>balls<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 41, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"co1\">// Dutch national flag problem</span><br/><span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> BidIt, <span class=\"kw2\">typename</span> T<span class=\"sy1\">&gt;</span><br/><span class=\"kw4\">void</span> dnf_partition<span class=\"br0\">(</span>BidIt first, BidIt last, <span class=\"kw4\">const</span> T<span class=\"sy3\">&amp;</span> low, <span class=\"kw4\">const</span> T<span class=\"sy3\">&amp;</span> high<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>BidIt next <span class=\"sy1\">=</span> first<span class=\"sy4\">;</span> next <span class=\"sy3\">!</span><span class=\"sy1\">=</span> last<span class=\"sy4\">;</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>next <span class=\"sy1\">&lt;</span> low<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            std<span class=\"sy4\">::</span><span class=\"me2\">iter_swap</span><span class=\"br0\">(</span>first<span class=\"sy2\">++</span>, next<span class=\"sy2\">++</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy3\">!</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>next <span class=\"sy1\">&lt;</span> high<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            std<span class=\"sy4\">::</span><span class=\"me2\">iter_swap</span><span class=\"br0\">(</span>next, <span class=\"sy2\">--</span>last<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"sy2\">++</span>next<span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">enum</span> Colors <span class=\"br0\">{</span> RED, WHITE, BLUE <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"kw4\">const</span> Colors <span class=\"sy2\">*</span>balls, <span class=\"kw4\">size_t</span> size<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy2\">*</span>label<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">\"red\"</span>, <span class=\"st0\">\"white\"</span>, <span class=\"st0\">\"blue\"</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Balls:\"</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> size<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> label<span class=\"br0\">[</span>balls<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>Sorted: \"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">boolalpha</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">is_sorted</span><span class=\"br0\">(</span>balls, balls <span class=\"sy2\">+</span> size<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    Colors balls<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span> RED, WHITE, BLUE, RED, WHITE, BLUE, RED, WHITE, BLUE <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    std<span class=\"sy4\">::</span><span class=\"me2\">random_shuffle</span><span class=\"br0\">(</span>balls, balls <span class=\"sy2\">+</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    print<span class=\"br0\">(</span>balls, <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    dnf_partition<span class=\"br0\">(</span>balls, balls <span class=\"sy2\">+</span> <span class=\"nu0\">9</span>, WHITE, BLUE<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    print<span class=\"br0\">(</span>balls, <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 82, "block": "<pre class=\"text highlighted_source\">import ceylon.random {<br/>\u00a0<br/>\tDefaultRandom<br/>}<br/>\u00a0<br/>abstract class Colour(name, ordinal) of red | white | blue  satisfies Comparable&lt;Colour&gt; {<br/>\tshared String name;<br/>\tshared Integer ordinal;<br/>\tstring =&gt; name;<br/>\tcompare(Colour other) =&gt; this.ordinal &lt;=&gt; other.ordinal;<br/>}<br/>\u00a0<br/>object red extends Colour(\"red\", 0) {}<br/>object white extends Colour(\"white\", 1) {}<br/>object blue extends Colour(\"blue\", 2) {}<br/>\u00a0<br/>Colour[] allColours = `Colour`.caseValues;<br/>\u00a0<br/>shared void run() {<br/>\u00a0<br/>\tfunction ordered({Colour*} colours) =&gt; <br/>\t\t\tcolours.paired.every(([c1, c2]) =&gt; c1 &lt;= c2);<br/>\u00a0<br/>\tvalue random = DefaultRandom();<br/>\u00a0<br/>\tfunction randomBalls(Integer length = 15) {<br/>\t\twhile (true) {<br/>\t\t\tvalue balls = random.elements(allColours).take(length);<br/>\t\t\tif (!ordered(balls)) {<br/>\t\t\t\treturn balls.sequence();<br/>\t\t\t}<br/>\t\t}<br/>\t}<br/>\u00a0<br/>\tfunction dutchSort({Colour*} balls, Colour mid = white) {<br/>\t\tvalue array = Array { *balls };<br/>\t\tif (array.empty) {<br/>\t\t\treturn [];<br/>\t\t}<br/>\t\tvariable value i = 0;<br/>\t\tvariable value j = 0;<br/>\t\tvariable value n = array.size - 1;<br/>\t\twhile (j &lt;= n) {<br/>\t\t\tassert (exists ball = array[j]);<br/>\t\t\tif (ball &lt; mid) {<br/>\t\t\t\tarray.swap(i, j);<br/>\t\t\t\ti ++;<br/>\t\t\t\tj ++;<br/>\t\t\t}<br/>\t\t\telse if (ball &gt; mid) {<br/>\t\t\t\tarray.swap(n, j);<br/>\t\t\t\tn --;<br/>\t\t\t}<br/>\t\t\telse {<br/>\t\t\t\tj ++;<br/>\t\t\t}<br/>\t\t}<br/>\t\treturn array;<br/>\t}<br/>\u00a0<br/>\tfunction idiomaticSort({Colour*} balls) =&gt;<br/>\t\t\tballs.sort(increasing);<br/>\u00a0<br/>    value initialBalls = randomBalls();<br/>\u00a0<br/>    \"the initial balls are not randomized\"<br/>    assert (!ordered(initialBalls));<br/>\u00a0<br/>    print(initialBalls);<br/>\u00a0<br/>    value sortedBalls1 = idiomaticSort(initialBalls);<br/>    value sortedBalls2 = dutchSort(initialBalls);<br/>\u00a0<br/>    \"the idiomatic sort didn't work\"<br/>    assert (ordered(sortedBalls1));<br/>\u00a0<br/>    \"the dutch sort didn't work\"<br/>    assert (ordered(sortedBalls2));<br/>\u00a0<br/>    print(sortedBalls1);<br/>    print(sortedBalls2);<br/>}</pre>"}, {"lang": "D", "loc": 31, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> DutchColors <span class=\"br0\">{</span> red<span class=\"sy0\">,</span> white<span class=\"sy0\">,</span> blue <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> dutchNationalFlagSort<span class=\"br0\">(</span>DutchColors<span class=\"br0\">[</span><span class=\"br0\">]</span> items<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> lo<span class=\"sy0\">,</span> mid<span class=\"sy0\">,</span> hi <span class=\"sy0\">=</span> items.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>mid <span class=\"sy0\">&lt;=</span> hi<span class=\"br0\">)</span><br/>        <span class=\"kw4\">final</span> <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>items<span class=\"br0\">[</span>mid<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> DutchColors.<span class=\"me1\">red</span><span class=\"sy0\">:</span><br/>                swap<span class=\"br0\">(</span>items<span class=\"br0\">[</span>lo<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> items<span class=\"br0\">[</span>mid<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> DutchColors.<span class=\"me1\">white</span><span class=\"sy0\">:</span><br/>                mid<span class=\"sy0\">++;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> DutchColors.<span class=\"me1\">blue</span><span class=\"sy0\">:</span><br/>                swap<span class=\"br0\">(</span>items<span class=\"br0\">[</span>mid<span class=\"br0\">]</span><span class=\"sy0\">,</span> items<span class=\"br0\">[</span>hi<span class=\"sy0\">--</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    DutchColors<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span> balls<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw2\">ref</span> ball<span class=\"sy0\">;</span> balls<span class=\"br0\">)</span><br/>        ball <span class=\"sy0\">=</span> uniform<span class=\"sy0\">!</span>DutchColors<span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Original Ball order:<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> balls<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    balls.<span class=\"me1\">dutchNationalFlagSort</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Sorted Ball Order:<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> balls<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>balls<span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">isSorted</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Balls not sorted.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 33, "block": "<pre class=\"text highlighted_source\">defmodule Dutch_national_flag do<br/>  defp ball(:red),   do: 1<br/>  defp ball(:white), do: 2<br/>  defp ball(:blue),  do: 3<br/>\u00a0<br/>  defp random_ball, do: Enum.random([:red,\u00a0:white,\u00a0:blue])<br/>\u00a0<br/>  defp random_ball(n), do: (for _ &lt;- 1..n, do: random_ball())<br/>\u00a0<br/>  defp is_dutch([]), do: true<br/>  defp is_dutch([_]), do: true<br/>  defp is_dutch([b,h|l]), do: ball(b) &lt; ball(h) and is_dutch([h|l])<br/>  defp is_dutch(_), do: false<br/>\u00a0<br/>  def  dutch(list), do: dutch([], [], [], list)<br/>\u00a0<br/>  defp dutch(r, w, b, []),              do: r ++ w ++ b<br/>  defp dutch(r, w, b, [:red   | list]), do: dutch([:red | r],  w,  b, list)<br/>  defp dutch(r, w, b, [:white | list]), do: dutch(r, [:white | w], b, list)<br/>  defp dutch(r, w, b, [:blue  | list]), do: dutch(r, w,  [:blue | b], list)<br/>\u00a0<br/>  def problem(n \\\\ 10) do<br/>    list = random_ball(n)<br/>    if is_dutch(list) do<br/>      IO.puts \"The random sequence #{inspect list} is already in the order of the Dutch flag!\"<br/>    else<br/>      IO.puts \"The starting random sequence is #{inspect list};\"<br/>      IO.puts \"The ordered sequence is #{inspect dutch(list)}.\"<br/>    end<br/>  end<br/>end<br/>\u00a0<br/>Dutch_national_flag.problem</pre>"}, {"lang": "Erlang", "loc": 26, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>dutch<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>random_balls<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> is_dutch<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> dutch<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">ball</span><span class=\"br0\">(</span>red<span class=\"br0\">)</span>   <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"re3\">ball</span><span class=\"br0\">(</span>white<span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/><span class=\"re3\">ball</span><span class=\"br0\">(</span>blue<span class=\"br0\">)</span>  <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">3</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">random_ball</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">nth</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>red<span class=\"sy1\">,</span> white<span class=\"sy1\">,</span> blue<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">random_balls</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span>   <span class=\"sy1\">-&gt;</span> <span class=\"re3\">random_balls</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">random_balls</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">L</span><span class=\"sy1\">;</span><br/><span class=\"re3\">random_balls</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>  <span class=\"re5\">B</span> <span class=\"sy3\">=</span> <span class=\"re3\">random_ball</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"re3\">random_balls</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">B</span>|L<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_dutch</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>        <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_dutch</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">_</span><span class=\"br0\">]</span><span class=\"br0\">)</span>       <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_dutch</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">B</span>|<span class=\"br0\">[</span><span class=\"re5\">H</span>|L<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re3\">ball</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"br0\">)</span> <span class=\"sy3\">&lt;</span> <span class=\"re3\">ball</span><span class=\"br0\">(</span><span class=\"re5\">H</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"re3\">is_dutch</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">H</span>|L<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_dutch</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"br0\">)</span>         <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">dutch</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">dutch</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">dutch</span><span class=\"br0\">(</span><span class=\"re5\">R</span><span class=\"sy1\">,</span> <span class=\"re5\">W</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>          <span class=\"sy1\">-&gt;</span> <span class=\"re5\">R</span> <span class=\"sy3\">++</span> <span class=\"re5\">W</span> <span class=\"sy3\">++</span> <span class=\"re5\">B</span><span class=\"sy1\">;</span><br/><span class=\"re3\">dutch</span><span class=\"br0\">(</span><span class=\"re5\">R</span><span class=\"sy1\">,</span> <span class=\"re5\">W</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>red   | <span class=\"re5\">L</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">dutch</span><span class=\"br0\">(</span><span class=\"br0\">[</span>red|R<span class=\"br0\">]</span><span class=\"sy1\">,</span>  <span class=\"re5\">W</span><span class=\"sy1\">,</span>  <span class=\"re5\">B</span><span class=\"sy1\">,</span>  <span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">dutch</span><span class=\"br0\">(</span><span class=\"re5\">R</span><span class=\"sy1\">,</span> <span class=\"re5\">W</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>white | <span class=\"re5\">L</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">dutch</span><span class=\"br0\">(</span><span class=\"re5\">R</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>white|W<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span>  <span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">dutch</span><span class=\"br0\">(</span><span class=\"re5\">R</span><span class=\"sy1\">,</span> <span class=\"re5\">W</span><span class=\"sy1\">,</span> <span class=\"re5\">B</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>blue  | <span class=\"re5\">L</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">dutch</span><span class=\"br0\">(</span><span class=\"re5\">R</span><span class=\"sy1\">,</span> <span class=\"re5\">W</span><span class=\"sy1\">,</span>   <span class=\"br0\">[</span>blue|B<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "F#", "loc": 34, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"co3\">(* Since the task description here does not impose Dijsktra's original restrictions<br/>    * Changing the order is only allowed by swapping 2 elements<br/>    * Every element must only be inspected once<br/>   we have several options ...<br/>   One way -- especially when we work with immutable data structures --<br/>   is to scan the unordered list, collect the different<br/>   colours on our way and append the 3 sub-lists in the correct order.<br/>*)</span><br/><span class=\"kw1\">let</span> rnd <span class=\"sy0\">=</span> System.<span class=\"me1\">Random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> color <span class=\"sy0\">=</span> | Red | White | Blue<br/>\u00a0<br/><span class=\"kw1\">let</span> isDutch s <span class=\"sy0\">=</span><br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">forall2</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> last this <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">match</span> <span class=\"br0\">(</span>last, this<span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>        | <span class=\"br0\">(</span>Red, Red<span class=\"br0\">)</span> | <span class=\"br0\">(</span>Red, White<span class=\"br0\">)</span> | <span class=\"br0\">(</span>White, White<span class=\"br0\">)</span> | <span class=\"br0\">(</span>White, Blue<span class=\"br0\">)</span> | <span class=\"br0\">(</span>Blue, Blue<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">true</span> | _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">false</span><br/>    <span class=\"br0\">)</span> s <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">skip</span> <span class=\"nu0\">1</span> s<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> getBallsToSort n s <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> sn <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">take</span> n s<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isDutch sn<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span>getBallsToSort n <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">skip</span> <span class=\"nu0\">1</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> sn<br/>    <span class=\"kw1\">let</span> balls <span class=\"sy0\">=</span> getBallsToSort n <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">initInfinite</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">match</span> <span class=\"br0\">(</span>rnd.<span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">with</span> | <span class=\"nu0\">0</span> <span class=\"sy0\">-&gt;</span> Red | <span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> White | _ <span class=\"sy0\">-&gt;</span> Blue<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    printfn <span class=\"st0\">\"Sort the sequence of\u00a0%i balls:\u00a0%A\"</span> n <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">toList</span> balls<span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> <span class=\"br0\">(</span>rs,ws,bs<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        balls<br/>        <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">fold</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>rs,ws,bs<span class=\"br0\">)</span> b <span class=\"sy0\">-&gt;</span><br/>            <span class=\"kw1\">match</span> b <span class=\"kw1\">with</span> | Red <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>b::rs,ws,bs<span class=\"br0\">)</span> | White <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>rs,b::ws,bs<span class=\"br0\">)</span> | Blue <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>rs,ws,b::bs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> sorted <span class=\"sy0\">=</span> rs @ ws @ bs<br/>    printfn <span class=\"st0\">\"The sequence\u00a0%A is sorted:\u00a0%b\"</span> sorted <span class=\"br0\">(</span>isDutch sorted<span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Forth", "loc": 149, "block": "<pre class=\"text highlighted_source\">\\ Dutch flag DEMO for CAMEL99 Forth<br/>\\ *SORTS IN PLACE FROM Video MEMORY*<br/>\u00a0<br/> INCLUDE DSK1.GRAFIX.F<br/> INCLUDE DSK1.RANDOM.F<br/> INCLUDE DSK1.CASE.F<br/>\u00a0<br/>\\ TMS9918 Video chip Specific code<br/>HEX<br/>FFFF FFFF FFFF FFFF PATTERN: SQUARE<br/>\u00a0<br/>\\ define colors and characters<br/>DECIMAL<br/>24 32 *  CONSTANT SIZE     \\ flag will fill GRAPHICS screen<br/>SIZE 3 / CONSTANT #256     \\ 256 chars per segment of flag<br/>1        CONSTANT REDSQR   \\ red character<br/>9        CONSTANT WHTSQR   \\ white character<br/>19       CONSTANT BLUSQR   \\ blue character<br/>\u00a0<br/>\\ color constants<br/>1        CONSTANT TRANS<br/>7        CONSTANT RED<br/>5        CONSTANT BLU<br/>16       CONSTANT WHT<br/>\u00a0<br/>SQUARE REDSQR CHARDEF<br/>SQUARE BLUSQR CHARDEF<br/>SQUARE WHTSQR CHARDEF<br/>\u00a0<br/>\\ charset  FG    BG<br/>  0        RED TRANS COLOR<br/>  1        WHT TRANS COLOR<br/>  2        BLU TRANS COLOR<br/>\u00a0<br/>\\ screen fillers<br/>: RNDI    ( -- n ) SIZE 1+ RND\u00a0; \\ return a random VDP screen address<br/>\u00a0<br/>: NOTRED    (  -- n ) \\ return rnd index that is not RED<br/>           BEGIN  <br/>              RNDI DUP <a class=\"__cf_email__\" data-cfemail=\"e8beaba8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> REDSQR = <br/>           WHILE DROP  <br/>           REPEAT\u00a0;<br/>\u00a0<br/>: NOTREDWHT    ( -- n ) \\ return rnd index that is not RED or WHITE<br/>           BEGIN  RNDI DUP<br/>              <a class=\"__cf_email__\" data-cfemail=\"e3b5a0a3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  DUP REDSQR =  <br/>              SWAP WHTSQR = OR<br/>           WHILE<br/>              DROP<br/>           REPEAT\u00a0;<br/>\u00a0<br/>: RNDRED  (  -- ) \\ Random RED on VDP screen<br/>          #256 0 DO   REDSQR NOTRED VC!   LOOP\u00a0;<br/>\u00a0<br/>: RNDWHT (  -- ) \\ place white where there is no red or white<br/>          #256 0 DO   WHTSQR NOTREDWHT VC!   LOOP\u00a0;<br/>\u00a0<br/>: BLUSCREEN ( -- )  <br/>           0 768 BLUSQR VFILL\u00a0;<br/>\u00a0<br/>\\ load the screen with random red,white&amp;blue squares<br/>: RNDSCREEN ( -- )<br/>            BLUSCREEN  RNDRED  RNDWHT\u00a0;<br/>\u00a0<br/>: CHECKERED  ( -- ) \\ red,wht,blue checker board<br/>         SIZE 0<br/>         DO<br/>            BLUSQR I VC!<br/>            WHTSQR I 1+ VC!<br/>            REDSQR I 2+ VC!<br/>         3 +LOOP\u00a0;<br/>\u00a0<br/>: RUSSIAN  \\ Russian flag<br/>            0  0 WHTSQR 256 HCHAR<br/>            0  8 BLUSQR 256 HCHAR<br/>            0 16 REDSQR 256 HCHAR\u00a0;<br/>\u00a0<br/>: FRENCH  \\ kind of a French flag<br/>           0  0 BLUSQR 256 VCHAR<br/>          10 16 WHTSQR 256 VCHAR<br/>          21  8 REDSQR 256 VCHAR\u00a0;<br/>\u00a0<br/>\\ =======================================================<br/>\\ Algorithm Dijkstra(A)  \\ A is an array of three colors<br/>\\ begin<br/>\\   r &lt;- 1; <br/>\\   b &lt;- n; <br/>\\   w &lt;- n;<br/>\\ while (w&gt;=r)<br/>\\       check the color of A[w]<br/>\\       case 1: red<br/>\\               swap(A[r],A [w]);<br/>\\                r&lt;-r+1;<br/>\\       case 2: white<br/>\\               w&lt;-w-1<br/>\\       case 3: blue<br/>\\               swap(A[w],A[b]);<br/>\\               w&lt;-w-1;<br/>\\               b&lt;-b-1;<br/>\\ end<br/>\u00a0<br/>\\ ======================================================<br/>\\ Dijkstra three color Algorithm in Forth<br/>\u00a0<br/>\\ screen address pointers<br/>VARIABLE R<br/>VARIABLE B<br/>VARIABLE W<br/>\u00a0<br/>: XCHG  ( vadr1 vadr2 -- ) \\ Exchange chars in Video RAM<br/>       OVER <a class=\"__cf_email__\" data-cfemail=\"90c6d3d0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> OVER <a class=\"__cf_email__\" data-cfemail=\"e7b1a4a7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>       ( -- addr1 addr2 char1 char2)<br/>       SWAP ROT VC! SWAP VC!\u00a0; \\ exchange chars in Video RAM<br/>\u00a0<br/>: DIJKSTRA ( -- )<br/>           0 R\u00a0!<br/>           SIZE 1- DUP  B\u00a0!  W\u00a0!<br/>           BEGIN<br/>               W @  R @  1- &gt;<br/>           WHILE<br/>               W @ <a class=\"__cf_email__\" data-cfemail=\"f3a5b0b3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  ( fetch Video char at pointer W)<br/>               CASE<br/>                 REDSQR OF  R @ W @  XCHG<br/>                            1 R +!           ENDOF<br/>\u00a0<br/>                 WHTSQR OF -1 W +!           ENDOF<br/>\u00a0<br/>                 BLUSQR OF  W @ B @  XCHG<br/>                           -1 W +!<br/>                           -1 B +!           ENDOF<br/>               ENDCASE<br/>           REPEAT\u00a0;<br/>\u00a0<br/>: WAIT ( -- )  11 11 AT-XY .\" Finished!\" 1500 MS\u00a0;<br/>\u00a0<br/>: RUN  ( -- ) <br/>         PAGE<br/>         CR .\" Dijkstra Dutch flag Demo\"  CR<br/>         CR .\" Sorted in-place in Video RAM\" CR<br/>         CR<br/>         CR .\" Using the 3 colour algorithm\" CR<br/>         CR .\" Press any key to begin\" KEY DROP<br/>         RNDSCREEN  DIJKSTRA WAIT<br/>         CHECKERED  DIJKSTRA WAIT<br/>         RUSSIAN    DIJKSTRA WAIT<br/>         FRENCH     DIJKSTRA WAIT<br/>         0 23 AT-XY<br/>         CR .\" Completed\"<br/>;<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 107, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>!-*- mode: compilation; default-directory: \"/tmp/\" -*-<br/>!Compilation started at Mon Jun  3 11:18:24<br/>!<br/>!a=./f &amp;&amp; make FFLAGS='-O0 -g' $a &amp;&amp; OMP_NUM_THREADS=2 $a &lt; unixdict.txt<br/>!gfortran -std=f2008 -O0 -g -Wall -fopenmp -ffree-form -fall-intrinsics -fimplicit-none f.f08 -o f<br/>! Original and flag sequences<br/>! WHITE RED   blue  blue  RED   WHITE WHITE WHITE blue  RED   RED   blue  <br/>! RED   RED   RED   RED   WHITE WHITE WHITE WHITE blue  blue  blue  blue  <br/>!          12 items,           8  swaps.<br/>!         999 items,         666  swaps.<br/>!        9999 items,        6666  swaps.<br/>!<br/>!Compilation finished at Mon Jun  3 11:18:24<br/>\u00a0<br/>program Netherlands<br/>\u00a0<br/>  character(len=6), parameter, dimension(3)\u00a0:: colors = (/'RED   ', 'WHITE ', 'blue  '/)<br/>  integer, dimension(12)\u00a0:: sort_me<br/>  integer, dimension(999), target\u00a0:: a999<br/>  integer, dimension(9999), target\u00a0:: a9999<br/>  integer, dimension(:), pointer \u00a0:: pi<br/>  integer\u00a0:: i, swaps<br/>  data sort_me/4*1,4*2,4*3/<br/>  call shuffle(sort_me, 5)<br/>  write(6,*)'Original and flag sequences'<br/>  write(6,*) (colors(sort_me(i)), i = 1, size(sort_me))<br/>  call partition3way(sort_me, 2, swaps)<br/>  write(6,*) (colors(sort_me(i)), i = 1, size(sort_me))<br/>  write(6,*) 12,'items,',swaps,' swaps.'<br/>  pi =&gt; a999<br/>  do i=1, size(pi)<br/>    pi(i) = 1 + L(size(pi)/3 .lt. i) + L(2*size(pi)/3 .lt. i)<br/>  end do<br/>  call shuffle(pi, size(pi)/3+1)<br/>  call partition3way(pi, 2, swaps)<br/>  write(6,*) size(pi),'items,',swaps,' swaps.'<br/>  pi =&gt; a9999<br/>  do i=1, size(pi)<br/>    pi(i) = 1 + L(size(pi)/3 .lt. i) + L(2*size(pi)/3 .lt. i)<br/>  end do<br/>  call shuffle(pi, size(pi)/3+1)<br/>  call partition3way(pi, 2, swaps)<br/>  write(6,*) size(pi),'items,',swaps,' swaps.'<br/>\u00a0<br/>contains<br/>\u00a0<br/>  integer function L(q)<br/>   \u00a0! In Ken Iverson's spirit, APL logicals are more useful as integers.<br/>    logical, intent(in)\u00a0:: q<br/>    if (q) then<br/>      L = 1<br/>    else<br/>      L = 0<br/>    end if<br/>  end function L<br/>\u00a0<br/>  subroutine swap(a,i,j)<br/>    integer, dimension(:), intent(inout)\u00a0:: a<br/>    integer, intent(in)\u00a0:: i, j<br/>    integer\u00a0:: t<br/>    t = a(i)<br/>    a(i) = a(j)<br/>    a(j) = t<br/>  end subroutine swap<br/>\u00a0<br/>  subroutine partition3way(a, pivot, swaps)<br/>    integer, dimension(:), intent(inout)\u00a0:: a<br/>    integer, intent(in)\u00a0:: pivot<br/>    integer, intent(out)\u00a0:: swaps<br/>    integer\u00a0:: i, j, k<br/>    swaps = 0<br/>    i = 0<br/>    j = 1<br/>    k = size(a) + 1<br/>    do while (j .lt. k)<br/>      if (pivot .eq. a(j)) then<br/>        j = j+1<br/>        swaps = swaps-1<br/>      else if (pivot .lt. a(j)) then<br/>        k = k-1<br/>        call swap(a, k, j)<br/>      else<br/>        i = i+1<br/>        call swap(a, i, j)<br/>        j = j+1<br/>      end if<br/>      swaps = swaps+1<br/>    end do<br/>  end subroutine partition3way<br/>\u00a0<br/>  subroutine shuffle(a, n)\u00a0! a rather specialized shuffle not for general use<br/>    integer, intent(inout), dimension(:)\u00a0:: a<br/>    integer, intent(in)\u00a0:: n<br/>    integer\u00a0:: i, j, k<br/>    real\u00a0:: harvest<br/>    do i=1, size(a)-1<br/>      call random_number(harvest)<br/>      harvest = harvest - epsilon(harvest)*L(harvest.eq.1)<br/>      k = L(i.eq.1)*(n-1) + i<br/>      j = i + int((size(a) - k) * harvest)<br/>      call swap(a, i, j)<br/>    end do<br/>  end subroutine shuffle<br/>\u00a0<br/>end program Netherlands<br/>\u00a0</pre>"}, {"lang": "Gambas", "loc": 26, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> Red <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> White <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> Blue <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"2\"</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> siCount <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/short\"><span class=\"kw4\">Short</span></a><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sColours <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/new\"><span class=\"kw1\">New</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sTemp <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">20</span><br/>  sColours.<span class=\"me1\">Add</span><span class=\"br0\">(</span>Rand<span class=\"br0\">(</span>Red, Blue<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"Random: - \"</span>;<br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> siCount <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">2</span><br/>  <a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> <a href=\"http://gambasdoc.org/help/lang/each\"><span class=\"kw1\">Each</span></a> sTemp <a href=\"http://gambasdoc.org/help/lang/in\"><span class=\"kw1\">In</span></a> sColours<br/>    <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> sTemp <span class=\"sy0\">=</span> Red <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"Red \"</span>;<br/>    <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> sTemp <span class=\"sy0\">=</span> White <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"White \"</span>;<br/>    <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> sTemp <span class=\"sy0\">=</span> Blue <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"Blue \"</span>;<br/>  <a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>  sColours.<span class=\"me1\">Sort</span><br/>  <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> siCount <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"Sorted: - \"</span>;<br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 88, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// constants define order of colors in Dutch national flag</span><br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>    red <span class=\"sy2\">=</span> iota<br/>    white<br/>    blue<br/>    nColors<br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// zero object of type is valid red ball.</span><br/><span class=\"kw1\">type</span> ball <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    color <span class=\"kw4\">int</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// order of balls based on DNF</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>b1 ball<span class=\"sy1\">)</span> lt<span class=\"sy1\">(</span>b2 ball<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> b1<span class=\"sy3\">.</span>color &lt; b2<span class=\"sy3\">.</span>color<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// type for arbitrary ordering of balls</span><br/><span class=\"kw1\">type</span> ordering <span class=\"sy1\">[]</span>ball<br/>\u00a0<br/><span class=\"co1\">// predicate tells if balls are ordered by DNF</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>o ordering<span class=\"sy1\">)</span> ordered<span class=\"sy1\">()</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> b0 ball<br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> b <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> o <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> b<span class=\"sy3\">.</span>lt<span class=\"sy1\">(</span>b0<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        b0 <span class=\"sy2\">=</span> b<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> init<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>Unix<span class=\"sy1\">())</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// constructor returns new ordering of balls which is randomized but</span><br/><span class=\"co1\">// guaranteed to be not in DNF order.  function panics for n &lt; 2.</span><br/><span class=\"kw4\">func</span> outOfOrder<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> ordering <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> n &lt; <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw3\">panic</span><span class=\"sy1\">(</span>fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"%d invalid\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/>    r <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>ordering<span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> _ <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> r <span class=\"sy1\">{</span><br/>            r<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>color <span class=\"sy2\">=</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span>nColors<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>r<span class=\"sy3\">.</span>ordered<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> r<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// O(n) algorithm</span><br/><span class=\"co1\">// http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Sort/Flag/</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>a ordering<span class=\"sy1\">)</span> sort3<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    lo<span class=\"sy1\">,</span> mid<span class=\"sy1\">,</span> hi <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>a<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> mid &lt;<span class=\"sy2\">=</span> hi <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">switch</span> a<span class=\"sy1\">[</span>mid<span class=\"sy1\">]</span><span class=\"sy3\">.</span>color <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">case</span> red<span class=\"sy1\">:</span><br/>            a<span class=\"sy1\">[</span>lo<span class=\"sy1\">],</span> a<span class=\"sy1\">[</span>mid<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> a<span class=\"sy1\">[</span>mid<span class=\"sy1\">],</span> a<span class=\"sy1\">[</span>lo<span class=\"sy1\">]</span><br/>            lo<span class=\"sy2\">++</span><br/>            mid<span class=\"sy2\">++</span><br/>        <span class=\"kw1\">case</span> white<span class=\"sy1\">:</span><br/>            mid<span class=\"sy2\">++</span><br/>        <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>            a<span class=\"sy1\">[</span>mid<span class=\"sy1\">],</span> a<span class=\"sy1\">[</span>hi<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> a<span class=\"sy1\">[</span>hi<span class=\"sy1\">],</span> a<span class=\"sy1\">[</span>mid<span class=\"sy1\">]</span><br/>            hi<span class=\"sy2\">--</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    f <span class=\"sy2\">:=</span> outOfOrder<span class=\"sy1\">(</span><span class=\"nu0\">12</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>f<span class=\"sy1\">)</span><br/>    f<span class=\"sy3\">.</span>sort3<span class=\"sy1\">()</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>f<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 26, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>sort<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random <span class=\"br0\">(</span>randomRIO<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a><span class=\"sy0\">.</span>Unsafe <span class=\"br0\">(</span>unsafePerformIO<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Color <span class=\"sy0\">=</span> Red <span class=\"sy0\">|</span> White <span class=\"sy0\">|</span> Blue <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Enum\"><span class=\"kw4\">Enum</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>dutch <span class=\"sy0\">::</span> <span class=\"br0\">[</span>Color<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>Color<span class=\"br0\">]</span><br/>dutch <span class=\"sy0\">=</span> sort<br/>\u00a0<br/>isDutch <span class=\"sy0\">::</span> <span class=\"br0\">[</span>Color<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>isDutch x <span class=\"sy0\">=</span> x <span class=\"sy0\">==</span> dutch x<br/>\u00a0<br/>randomBalls <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>Color<span class=\"br0\">]</span><br/>randomBalls <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>randomBalls n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:toEnum\"><span class=\"kw3\">toEnum</span></a> <span class=\"br0\">(</span>unsafePerformIO <span class=\"br0\">(</span>randomRIO <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromEnum\"><span class=\"kw3\">fromEnum</span></a> Red<span class=\"sy0\">,</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromEnum\"><span class=\"kw3\">fromEnum</span></a> Blue<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: randomBalls <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> a <span class=\"sy0\">=</span> randomBalls <span class=\"nu0\">20</span><br/>    <span class=\"kw1\">case</span> isDutch a <span class=\"kw1\">of</span><br/>        True <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"The random sequence \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> a <span class=\"sy0\">++</span><br/>            <span class=\"st0\">\" is already in the order of the Dutch national flag!\"</span><br/>        False <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>            <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"The starting random sequence is \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> a <span class=\"sy0\">++</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>            <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"The ordered sequence is \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>dutch a<span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 22, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    n <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>a<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"nu0\">20</span><br/>    <span class=\"kw1\">every</span> <span class=\"br0\">(</span>nr<span class=\"sy0\">|</span>nw<span class=\"sy0\">|</span>nb<span class=\"br0\">)</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">?</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    sIn <span class=\"sy0\">:=</span> <span class=\"kw4\">repl</span><span class=\"br0\">(</span><span class=\"st0\">\"r\"</span><span class=\"sy0\">,</span>nw<span class=\"br0\">)</span><span class=\"sy0\">||</span><span class=\"kw4\">repl</span><span class=\"br0\">(</span><span class=\"st0\">\"w\"</span><span class=\"sy0\">,</span>nb<span class=\"br0\">)</span><span class=\"sy0\">||</span><span class=\"kw4\">repl</span><span class=\"br0\">(</span><span class=\"st0\">\"b\"</span><span class=\"sy0\">,</span>nr<span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>sRand <span class=\"sy0\">:=</span> bestShuffle<span class=\"br0\">(</span>sIn<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>sOut <span class=\"sy0\">:=</span> <span class=\"kw4\">map</span><span class=\"br0\">(</span>csort<span class=\"br0\">(</span><span class=\"kw4\">map</span><span class=\"br0\">(</span>sRand<span class=\"sy0\">,</span><span class=\"st0\">\"rwb\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"123\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"123\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"rwb\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> sIn <span class=\"sy0\">~==</span> sOut <span class=\"kw1\">then</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Eh? Not in correct order!\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> bestShuffle<span class=\"br0\">(</span>s<span class=\"br0\">)</span>    <span class=\"co1\"># (Taken from the Best Shuffle task)</span><br/>    t <span class=\"sy0\">:=</span> s<br/>    <span class=\"kw1\">every</span> <span class=\"sy0\">!</span>t <span class=\"sy0\">:=:</span> <span class=\"sy0\">?</span>t    <span class=\"co1\"># Uncommented to get a random best shuffling</span><br/>    <span class=\"kw1\">every</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy0\">*</span>t <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">every</span> j <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy0\">*</span>t<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>           <span class=\"kw1\">if</span> <span class=\"br0\">(</span>t<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">~==</span> s<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">~==</span> t<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">break</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=:</span> t<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> t<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> csort<span class=\"br0\">(</span>w<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"br0\">(</span>s <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">||:=</span> <span class=\"br0\">(</span><span class=\"kw4\">find</span><span class=\"br0\">(</span>c <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span><span class=\"kw4\">cset</span><span class=\"br0\">(</span>w<span class=\"br0\">)</span><span class=\"sy0\">,</span>w<span class=\"br0\">)</span><span class=\"sy0\">,</span>c<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">i2b=: {&amp;<span class=\"sy0\">(</span>;:<span class=\"st_h\">'red white blue'</span><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 30, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Random</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> DutchNationalFlag <span class=\"br0\">{</span><br/>    <span class=\"kw1\">enum</span> DutchColors <span class=\"br0\">{</span><br/>        RED, WHITE, BLUE<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        DutchColors<span class=\"br0\">[</span><span class=\"br0\">]</span> balls <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> DutchColors<span class=\"br0\">[</span><span class=\"nu0\">12</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        DutchColors<span class=\"br0\">[</span><span class=\"br0\">]</span> values <span class=\"sy0\">=</span> DutchColors.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a> rand <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> balls.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            balls<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>values<span class=\"br0\">[</span>rand.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>values.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Before: \"</span> <span class=\"sy0\">+</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>balls<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>balls<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"After:  \"</span> <span class=\"sy0\">+</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>balls<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">boolean</span> sorted <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> balls.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>balls<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>balls<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                sorted<span class=\"sy0\">=</span><span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Correctly sorted: \"</span> <span class=\"sy0\">+</span> sorted<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 82, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">const</span> dutchNationalFlag <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/**<br/>   * Return the name of the given number in this way:<br/>   * 0 = Red<br/>   * 1 = White<br/>   * 2 = Blue<br/>   * @param {!number} e<br/>   */</span><br/>  <span class=\"kw1\">const</span> name <span class=\"sy0\">=</span> e <span class=\"sy0\">=&gt;</span> e <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">'Blue'</span> <span class=\"sy0\">:</span> e <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"st0\">'White'</span> <span class=\"sy0\">:</span> <span class=\"st0\">'Red'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/**<br/>   * Given an array of numbers return true if each number is bigger than<br/>   * or the same as the previous<br/>   * @param {!Array&lt;!number&gt;} arr<br/>   */</span><br/>  <span class=\"kw1\">const</span> isSorted <span class=\"sy0\">=</span> arr <span class=\"sy0\">=&gt;</span> arr.<span class=\"me1\">every</span><span class=\"br0\">(</span><span class=\"br0\">(</span>e<span class=\"sy0\">,</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> e <span class=\"sy0\">&gt;=</span> arr<span class=\"br0\">[</span><span class=\"kw4\">Math</span>.<span class=\"me1\">max</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/**<br/>   * Generator that keeps yielding a random int between 0(inclusive) and<br/>   * max(exclusive), up till n times, and then is done.<br/>   * @param max<br/>   * @param n<br/>   */</span><br/>  <span class=\"kw1\">function</span><span class=\"sy0\">*</span> randomGen <span class=\"br0\">(</span>max<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    let i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    while <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      yield <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> max<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/**<br/>   * An array of random integers between 0 and 3<br/>   * @type {[!number]}<br/>   */</span><br/>  <span class=\"kw1\">const</span> mixedBalls <span class=\"sy0\">=</span> <span class=\"br0\">[</span>...<span class=\"br0\">(</span>randomGen<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">22</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/**<br/>   * Sort the given array into 3 sub-arrays and then concatenate those.<br/>   */</span><br/>  <span class=\"kw1\">const</span> sortedBalls <span class=\"sy0\">=</span> mixedBalls<br/>    .<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span>c<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> p<span class=\"br0\">[</span>c<span class=\"br0\">]</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> p<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span>c<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> p.<span class=\"me1\">concat</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/**<br/>   * A verbatim implementation of the Wikipedia pseudo-code<br/>   * @param {!Array&lt;!number&gt;} A<br/>   * @param {!number} mid The value of the 'mid' number. In our case 1 as<br/>   * low is 0 and high is 2<br/>   */</span><br/>  <span class=\"kw1\">const</span> dutchSort <span class=\"sy0\">=</span> <span class=\"br0\">(</span>A<span class=\"sy0\">,</span> mid<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    let i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    let j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    let n <span class=\"sy0\">=</span> A.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    while<span class=\"br0\">(</span>j <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> mid<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> A<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>A<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> A<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        j <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> mid<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span>A<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> A<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>A<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">,</span> A<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        n <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span><br/>      <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        j <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  console.<span class=\"me1\">log</span><span class=\"br0\">(</span>`Mixed balls       <span class=\"sy0\">:</span> $<span class=\"br0\">{</span>mixedBalls.<span class=\"me1\">map</span><span class=\"br0\">(</span>name<span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span>`<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  console.<span class=\"me1\">log</span><span class=\"br0\">(</span>`Is sorted<span class=\"sy0\">:</span> $<span class=\"br0\">{</span>isSorted<span class=\"br0\">(</span>mixedBalls<span class=\"br0\">)</span><span class=\"br0\">}</span>`<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  console.<span class=\"me1\">log</span><span class=\"br0\">(</span>`Sorted balls      <span class=\"sy0\">:</span> $<span class=\"br0\">{</span>sortedBalls.<span class=\"me1\">map</span><span class=\"br0\">(</span>name<span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span>`<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  console.<span class=\"me1\">log</span><span class=\"br0\">(</span>`Is sorted<span class=\"sy0\">:</span> $<span class=\"br0\">{</span>isSorted<span class=\"br0\">(</span>sortedBalls<span class=\"br0\">)</span><span class=\"br0\">}</span>`<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// Only do the dutch sort now as it mutates the mixedBalls array in place.</span><br/>  dutchSort<span class=\"br0\">(</span>mixedBalls<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  console.<span class=\"me1\">log</span><span class=\"br0\">(</span>`Dutch Sorted balls<span class=\"sy0\">:</span> $<span class=\"br0\">{</span>mixedBalls.<span class=\"me1\">map</span><span class=\"br0\">(</span>name<span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span>`<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  console.<span class=\"me1\">log</span><span class=\"br0\">(</span>`Is sorted<span class=\"sy0\">:</span> $<span class=\"br0\">{</span>isSorted<span class=\"br0\">(</span>mixedBalls<span class=\"br0\">)</span><span class=\"br0\">}</span>`<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>dutchNationalFlag<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>const COLORS = [\"red\", \"white\", \"blue\"]<br/>\u00a0<br/>function dutchsort!(a::Array{ASCIIString,1}, lo=COLORS[1], hi=COLORS[end])<br/>    i = 1<br/>    j = 1<br/>    n = length(a)<br/>    while j &lt;= n<br/>        if a[j] == lo<br/>            a[i], a[j] = a[j], a[i]<br/>            i += 1<br/>            j += 1<br/>        elseif a[j] == hi<br/>            a[j], a[n] = a[n], a[j]<br/>            n -= 1<br/>        else<br/>            j += 1<br/>        end<br/>    end<br/>    return a<br/>end<br/>\u00a0<br/>function dutchsort(a::Array{ASCIIString,1}, lo=COLORS[1], hi=COLORS[end])<br/>    dutchsort!(copy(a), lo, hi)<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 53, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.4</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/>enum <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> DutchColors <span class=\"br0\">{</span> RED, WHITE, BLUE <span class=\"br0\">}</span><br/>\u00a0<br/>fun Array<span class=\"sy0\">&lt;</span>DutchColors<span class=\"sy0\">&gt;</span>.<span class=\"me1\">swap</span><span class=\"br0\">(</span>i<span class=\"sy0\">:</span> Int, j<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> temp <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun Array<span class=\"sy0\">&lt;</span>DutchColors<span class=\"sy0\">&gt;</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> lo <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> mid <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> hi <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">lastIndex</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>mid <span class=\"sy0\">&lt;=</span> hi<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        when <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>mid<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            DutchColors.<span class=\"me1\">RED</span>   -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">swap</span><span class=\"br0\">(</span>lo++, mid++<span class=\"br0\">)</span><br/>            DutchColors.<span class=\"me1\">WHITE</span> -<span class=\"sy0\">&gt;</span> mid++<br/>            DutchColors.<span class=\"me1\">BLUE</span>  -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">swap</span><span class=\"br0\">(</span>mid, hi--<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun Array<span class=\"sy0\">&lt;</span>DutchColors<span class=\"sy0\">&gt;</span>.<span class=\"me1\">isSorted</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span><span class=\"nu0\">1</span> until <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">none</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>it<span class=\"br0\">]</span>.<span class=\"me1\">ordinal</span> <span class=\"sy0\">&lt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>it - <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">ordinal</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> NUM<span class=\"sy0\">_</span>BALLS <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> balls  <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>NUM<span class=\"sy0\">_</span>BALLS<span class=\"br0\">)</span> <span class=\"br0\">{</span> DutchColors.<span class=\"me1\">RED</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> colors <span class=\"sy0\">=</span> DutchColors.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// give balls random colors whilst ensuring they're not already sorted</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until NUM<span class=\"sy0\">_</span>BALLS<span class=\"br0\">)</span> balls<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> colors<span class=\"br0\">[</span>r.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>balls.<span class=\"me1\">isSorted</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// print the colors of the balls before sorting</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Before sorting\u00a0: ${balls.contentToString()}\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// sort the balls in DutchColors order</span><br/>    balls.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// print the colors of the balls after sorting</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"After sorting \u00a0: ${balls.contentToString()}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 16, "block": "<pre class=\"text highlighted_source\">define orderdutchflag(a) =&gt; {<br/>\tlocal(r = array, w = array, b = array)<br/>\twith i in #a do =&gt; {<br/>\t\tmatch(#i) =&gt; {<br/>\t\t\tcase('Red')<br/>\t\t\t\t#r-&gt;insert(#i)<br/>\t\t\tcase('White')<br/>\t\t\t\t#w-&gt;insert(#i)<br/>\t\t\tcase('Blue')<br/>\t\t\t\t#b-&gt;insert(#i)<br/>\t\t} <br/>\t}<br/>\treturn #r + #w + #b<br/>}<br/>\u00a0<br/>orderdutchflag(array('Red', 'Red', 'Blue', 'Blue', 'Blue', 'Red', 'Red', 'Red', 'White', 'Blue'))</pre>"}, {"lang": "Logo", "loc": 68, "block": "<pre class=\"text highlighted_source\">; We'll just use words for the balls<br/>make \"colors {red white blue}<br/>\u00a0<br/>; to get a mapping from colors back to a numeric value,<br/>; we make variables out of the color names (e.g. the variable<br/>; \"red\" has value \"1\").<br/>foreach arraytolist\u00a0:colors [<br/>  make\u00a0? #<br/>]<br/>\u00a0<br/>; Make a random list of a given size<br/>to random_balls\u00a0:n<br/>  local \"balls<br/>  make \"balls array n<br/>  repeat n [<br/>    setitem #\u00a0:balls pick\u00a0:colors<br/>  ]<br/>  output\u00a0:balls<br/>end<br/>\u00a0<br/>; Test for Dutchness<br/>to dutch?\u00a0:array<br/>   output dutchlist? arraytolist\u00a0:array<br/>end<br/>\u00a0<br/>; List is easier than array to test<br/>to dutchlist?\u00a0:list<br/>  output cond [<br/>    [(less? count\u00a0:list 2) \"true]<br/>    [(greater? thing first\u00a0:list thing item 2\u00a0:list) \"false ]<br/>    [else dutchlist? butfirst\u00a0:list]<br/>  ]<br/>end<br/>\u00a0<br/>; But array is better for sorting algorithm<br/>to dutch\u00a0:array<br/>  local \"lo<br/>  make \"lo 0<br/>  local \"hi<br/>  make \"hi sum 1 count\u00a0:array<br/>  local \"i<br/>  make \"i 1<br/>  while [:i &lt;\u00a0:hi] [<br/>    case (item\u00a0:i\u00a0:array) [<br/>      [[red]<br/>         make \"lo sum\u00a0:lo 1<br/>         swap\u00a0:array\u00a0:lo\u00a0:i<br/>         make \"i sum\u00a0:i 1<br/>      ]<br/>      [[white]<br/>         make \"i sum\u00a0:i 1<br/>      ]<br/>      [[blue]<br/>         make \"hi difference\u00a0:hi 1<br/>         swap\u00a0:array\u00a0:hi\u00a0:i<br/>      ]<br/>    ]<br/>  ]<br/>  output\u00a0:array<br/>end<br/>\u00a0<br/>; utility routine to swap array elements<br/>to swap\u00a0:array\u00a0:a\u00a0:b<br/>  local \"temp<br/>  make \"temp item\u00a0:a\u00a0:array<br/>  setitem\u00a0:a\u00a0:array item\u00a0:b\u00a0:array<br/>  setitem\u00a0:b\u00a0:array\u00a0:temp<br/>end</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">flagSort[data_List]\u00a0:= Sort[data, (#1 === RED || #2 === BLUE) &amp;]</pre>"}, {"lang": "PARI/GP", "loc": 14, "block": "<pre class=\"parigp highlighted_source\">compare<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"sy0\">==</span>b<span class=\"sy0\">,</span><br/>    <span class=\"nu1\">0</span><br/>  <span class=\"sy0\">,</span><br/>   <span class=\"kw1\">if</span><span class=\"br0\">(</span>a<span class=\"sy0\">==</span><span class=\"st0\">\"red\"</span> <span class=\"sy0\">||</span> b<span class=\"sy0\">==</span><span class=\"st0\">\"blue\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"nu1\">1</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>r<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"red\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"white\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"blue\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>inorder<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>compare<span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"nu1\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>v<span class=\"sy0\">=</span>r<span class=\"br0\">(</span><span class=\"nu1\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">while</span><span class=\"br0\">(</span>inorder<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">,</span> v<span class=\"sy0\">=</span>r<span class=\"br0\">(</span><span class=\"nu1\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>v<span class=\"sy0\">=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span>compare<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>inorder<span class=\"br0\">(</span>v<span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 72, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> <span class=\"nu0\">5.010</span><span class=\"sy0\">;</span> <span class=\"co1\"># //</span><br/>\u00a0<br/><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> shuffle <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@colours</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> blue white red <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> are_ordered <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$balls</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$last</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$ball</span> <span class=\"br0\">(</span><span class=\"re0\">@$balls</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">if</span> <span class=\"re0\">$ball</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$last</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$last</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ball</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">sub</span> show <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$balls</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"re0\">$colours</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">@$balls</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">sub</span> debug <span class=\"br0\">{</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">unless</span> <span class=\"re0\">$ENV</span><span class=\"br0\">{</span>DEBUG<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$pos</span><span class=\"sy0\">,</span> <span class=\"re0\">$top</span><span class=\"sy0\">,</span> <span class=\"re0\">$bottom</span><span class=\"sy0\">,</span> <span class=\"re0\">$balls</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"co5\">$#</span><span class=\"re0\">$balls</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$prefix</span><span class=\"sy0\">,</span> <span class=\"re0\">$suffix</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> x <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"br0\">(</span><span class=\"re0\">$prefix</span><span class=\"sy0\">,</span> <span class=\"re0\">$suffix</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co2\">qw/( )/</span> <span class=\"kw1\">if</span> <span class=\"re0\">$i</span> <span class=\"sy0\">==</span> <span class=\"re0\">$pos</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$prefix</span>           <span class=\"sy0\">.=</span> <span class=\"st_h\">'&gt;'</span>     <span class=\"kw1\">if</span> <span class=\"re0\">$i</span> <span class=\"sy0\">==</span> <span class=\"re0\">$top</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$suffix</span>           <span class=\"sy0\">.=</span> <span class=\"st_h\">'&lt;'</span>     <span class=\"kw1\">if</span> <span class=\"re0\">$i</span> <span class=\"sy0\">==</span> <span class=\"re0\">$bottom</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"kw2\">STDERR</span> <span class=\"st0\">\" $prefix$colours[$balls-&gt;[$i]]$suffix\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"kw2\">STDERR</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"sy0\">//</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"$count: Not enough balls<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">if</span> <span class=\"re0\">$count</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$balls</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@$balls</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"nu0\">3</span> <span class=\"kw1\">until</span> <span class=\"re0\">@$balls</span> <span class=\"sy0\">==</span> <span class=\"re0\">$count</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">do</span> <span class=\"br0\">{</span> <span class=\"re0\">@$balls</span> <span class=\"sy0\">=</span> shuffle <span class=\"re0\">@$balls</span> <span class=\"br0\">}</span> <span class=\"kw1\">while</span> are_ordered<span class=\"br0\">(</span><span class=\"re0\">$balls</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>show<span class=\"br0\">(</span><span class=\"re0\">$balls</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$top</span>    <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$bottom</span> <span class=\"sy0\">=</span> <span class=\"co5\">$#</span><span class=\"re0\">$balls</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$bottom</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    debug<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$top</span><span class=\"sy0\">,</span> <span class=\"re0\">$bottom</span><span class=\"sy0\">,</span> <span class=\"re0\">$balls</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$col</span> <span class=\"sy0\">=</span> <span class=\"re0\">$colours</span><span class=\"br0\">[</span> <span class=\"re0\">$balls</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"st_h\">'red'</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$col</span> <span class=\"kw1\">and</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$bottom</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$balls</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"re0\">$bottom</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$balls</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$bottom</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$bottom</span><span class=\"sy0\">--;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span><span class=\"st_h\">'blue'</span> <span class=\"kw1\">eq</span> <span class=\"re0\">$col</span> <span class=\"kw1\">and</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$top</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$balls</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"re0\">$top</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$balls</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$top</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$top</span><span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$i</span><span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>debug<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$top</span><span class=\"sy0\">,</span> <span class=\"re0\">$bottom</span><span class=\"sy0\">,</span> <span class=\"re0\">$balls</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>show<span class=\"br0\">(</span><span class=\"re0\">$balls</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>are_ordered<span class=\"br0\">(</span><span class=\"re0\">$balls</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Incorrect<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 30, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">enum</span> NL <span class=\"sy0\">&lt;</span>red white blue<span class=\"sy0\">&gt;;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@colors</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> how<span class=\"st_h\">'bout (&amp;this-way) {<br/>    sub show {<br/>        say @colors;<br/>        say \"Ordered: \", [&lt;=] @colors;<br/>    }<br/>\u00a0<br/>    @colors = NL.roll(20);<br/>    show;<br/>    this-way;<br/>    show;<br/>    say '</span><span class=\"st_h\">';<br/>}<br/>\u00a0<br/>say \"Using functional sort\";<br/>how'</span>bout <span class=\"br0\">{</span> <span class=\"re0\">@colors</span> <span class=\"sy0\">=</span> <span class=\"kw3\">sort</span> <span class=\"sy0\">*.</span><span class=\"me1\">value</span><span class=\"sy0\">,</span> <span class=\"re0\">@colors</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Using in-place sort\"</span><span class=\"sy0\">;</span><br/>how<span class=\"st_h\">'bout { @colors .= sort: *.value }<br/>\u00a0<br/>say \"Using a Bag\";<br/>how'</span>bout <span class=\"br0\">{</span> <span class=\"re0\">@colors</span> <span class=\"sy0\">=</span> flat red<span class=\"sy0\">,</span> white<span class=\"sy0\">,</span> blue Zxx bag<span class=\"br0\">(</span><span class=\"re0\">@colors</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">key</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>red white blue<span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Using the classify method\"</span><span class=\"sy0\">;</span><br/>how<span class=\"st_h\">'bout { @colors = flat (.list for\u00a0%(@colors.classify: *.value){0,1,2}) }<br/>\u00a0<br/>say \"Using multiple greps\";<br/>how'</span>bout <span class=\"br0\">{</span> <span class=\"re0\">@colors</span> <span class=\"sy0\">=</span> flat <span class=\"br0\">(</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span>red<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span>white<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span>blue<span class=\"br0\">)</span> <span class=\"kw1\">given</span> <span class=\"re0\">@colors</span><span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 38, "block": "<pre class=\"text highlighted_source\">function three_way_partition(sequence s, integer mid)<br/>integer i=1, j=1, n = length(s)<br/>\u00a0<br/>    while j &lt; n do<br/>        if s[j] &lt; mid then<br/>            {s[i],s[j]} = {s[j],s[i]}<br/>            i += 1<br/>            j += 1<br/>        elsif s[j] &gt; mid then<br/>            {s[j],s[n]} = {s[n],s[j]}<br/>            n -= 1<br/>        else<br/>            j += 1<br/>        end if<br/>    end while<br/>    return s<br/>end function<br/>\u00a0<br/>constant colours = {\"red\",\"white\",\"blue\"}<br/>enum /*red,*/ white = 2, blue, maxc = blue<br/>\u00a0<br/>procedure show(string msg, sequence s)<br/>    for i=1 to length(s) do<br/>        s[i] = colours[s[i]]<br/>    end for<br/>    printf(1,\"%s:\u00a0%s\\n\",{msg,join(s)})<br/>end procedure<br/>\u00a0<br/>sequence unsorted, sorted<br/>    while 1 do<br/>        unsorted = sq_rand(repeat(maxc,12))<br/>--      sorted = sort(unsorted) -- (works just as well)<br/>        sorted = three_way_partition(unsorted, white)<br/>        if unsorted!=sorted then exit end if<br/>       \u00a0?\"oops\"<br/>    end while<br/>    show(\"Unsorted\",unsorted)<br/>    show(\"Sorted\",sorted)</pre>"}, {"lang": "PicoLisp", "loc": 13, "block": "<pre class=\"text highlighted_source\">(def 'Colors<br/>   (list<br/>      (def 'RED 1)<br/>      (def 'WHITE 2)<br/>      (def 'BLUE 3) ) )<br/>\u00a0<br/>(let (L (make (do 9 (link (get Colors (rand 1 3)))))  S (by val sort L))<br/>   (prin \"Original balls \")<br/>   (print L)<br/>   (prinl (unless (= L S) \" not sorted\"))<br/>   (prin \"Sorted balls   \")<br/>   (print S)<br/>   (prinl \" are sorted\") )</pre>"}, {"lang": "PowerShell", "loc": 18, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$Colors</span> <span class=\"sy0\">=</span> <span class=\"st0\">'red'</span><span class=\"sy0\">,</span> <span class=\"st0\">'white'</span><span class=\"sy0\">,</span><span class=\"st0\">'blue'</span><br/>\u00a0<br/><span class=\"co1\">#  Select 10 random colors</span><br/><span class=\"re0\">$RandomBalls</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">10</span> <span class=\"sy0\">|</span> <span class=\"kw3\">ForEach</span> <span class=\"br0\">{</span> <span class=\"re0\">$Colors</span> <span class=\"sy0\">|</span> Get<span class=\"sy0\">-</span>Random <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#  Ensure we aren't finished before we start. For some reason. It's in the task requirements.</span><br/><span class=\"kw3\">While</span> <span class=\"br0\">(</span> <span class=\"re0\">$RandomBalls</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$RandomBalls</span> <span class=\"sy0\">|</span> <span class=\"kw2\">Sort</span> <span class=\"br0\">{</span> <span class=\"re0\">$Colors</span>.IndexOf<span class=\"br0\">(</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <span class=\"re0\">$RandomBalls</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">10</span> <span class=\"sy0\">|</span> <span class=\"kw3\">ForEach</span> <span class=\"br0\">{</span> <span class=\"re0\">$Colors</span> <span class=\"sy0\">|</span> Get<span class=\"sy0\">-</span>Random <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#  Sort the colors</span><br/><span class=\"re0\">$SortedBalls</span> <span class=\"sy0\">=</span> <span class=\"re0\">$RandomBalls</span> <span class=\"sy0\">|</span> <span class=\"kw2\">Sort</span> <span class=\"br0\">{</span> <span class=\"re0\">$Colors</span>.IndexOf<span class=\"br0\">(</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#  Display the results</span><br/><span class=\"re0\">$RandomBalls</span><br/><span class=\"st0\">''</span><br/><span class=\"re0\">$SortedBalls</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 60, "block": "<pre class=\"prolog highlighted_source\">dutch_flag<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tlength<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">repeat</span></a><span class=\"sy4\">,</span><br/>\t  maplist<span class=\"br0\">(</span>init<span class=\"sy4\">,</span>L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"sy2\">\\+</span>is_dutch_flag<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy4\">,</span><br/>\twriteln<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\ttest_sorted<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsort_dutch_flag<span class=\"br0\">(</span>L<span class=\"sy4\">,</span> TmpFlag<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tappend<span class=\"br0\">(</span>TmpFlag<span class=\"sy4\">,</span> Flag<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\twriteln<span class=\"br0\">(</span>Flag<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\ttest_sorted<span class=\"br0\">(</span>Flag<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>sort_dutch_flag<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>sort_dutch_flag<span class=\"br0\">(</span><span class=\"br0\">[</span>blue <span class=\"sy5\">|</span> T<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>R<span class=\"sy4\">,</span> W<span class=\"sy4\">,</span> <span class=\"br0\">[</span>blue<span class=\"sy5\">|</span>B<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tsort_dutch_flag<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> <span class=\"br0\">[</span>R<span class=\"sy4\">,</span> W<span class=\"sy4\">,</span> B<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>sort_dutch_flag<span class=\"br0\">(</span><span class=\"br0\">[</span>red <span class=\"sy5\">|</span> T<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>red<span class=\"sy5\">|</span>R<span class=\"br0\">]</span><span class=\"sy4\">,</span> W<span class=\"sy4\">,</span> B<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tsort_dutch_flag<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> <span class=\"br0\">[</span>R<span class=\"sy4\">,</span> W<span class=\"sy4\">,</span> B<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>sort_dutch_flag<span class=\"br0\">(</span><span class=\"br0\">[</span>white <span class=\"sy5\">|</span> T<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>R<span class=\"sy4\">,</span> <span class=\"br0\">[</span>white <span class=\"sy5\">|</span> W<span class=\"br0\">]</span><span class=\"sy4\">,</span> B<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tsort_dutch_flag<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> <span class=\"br0\">[</span>R<span class=\"sy4\">,</span> W<span class=\"sy4\">,</span> B<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>init<span class=\"br0\">(</span>C<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tR <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> random<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tnth0<span class=\"br0\">(</span>R<span class=\"sy4\">,</span> <span class=\"br0\">[</span>blue<span class=\"sy4\">,</span> red<span class=\"sy4\">,</span> white<span class=\"br0\">]</span><span class=\"sy4\">,</span> C<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>test_sorted<span class=\"br0\">(</span>Flag<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"br0\">(</span>   is_dutch_flag<span class=\"br0\">(</span>Flag<span class=\"br0\">)</span><br/>\t<span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>  <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"st_h\">'it is a dutch flag'</span><span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span>   <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"st_h\">'it is not a dutch flag'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% First color must be red</span><br/>is_dutch_flag<span class=\"br0\">(</span><span class=\"br0\">[</span>red <span class=\"sy5\">|</span> T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tis_dutch_flag_red<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>is_dutch_flag_red<span class=\"br0\">(</span><span class=\"br0\">[</span>red<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tis_dutch_flag_red<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"co1\">% second color must be white</span><br/>\tT <span class=\"sy6\">=</span> <span class=\"br0\">[</span>white <span class=\"sy5\">|</span> T1<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\tis_dutch_flag_white<span class=\"br0\">(</span>T1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>is_dutch_flag_white<span class=\"br0\">(</span><span class=\"br0\">[</span>white <span class=\"sy5\">|</span> T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tis_dutch_flag_white<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"co1\">% last one must be blue</span><br/>\tT <span class=\"sy6\">=</span> <span class=\"br0\">[</span>blue <span class=\"sy5\">|</span> T1<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\tis_dutch_flag_blue<span class=\"br0\">(</span>T1<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>is_dutch_flag_blue<span class=\"br0\">(</span><span class=\"br0\">[</span>blue <span class=\"sy5\">|</span> T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tis_dutch_flag_blue<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>is_dutch_flag_blue<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 35, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">random</span><br/>\u00a0<br/>colours_in_order <span class=\"sy0\">=</span> <span class=\"st0\">'Red White Blue'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> dutch_flag_sort<span class=\"br0\">(</span>items<span class=\"sy0\">,</span> order<span class=\"sy0\">=</span>colours_in_order<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'return sort of items using the given order'</span><br/>    reverse_index <span class=\"sy0\">=</span> <span class=\"kw2\">dict</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span>x <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>order<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>items<span class=\"sy0\">,</span> key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> x: reverse_index<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> dutch_flag_check<span class=\"br0\">(</span>items<span class=\"sy0\">,</span> order<span class=\"sy0\">=</span>colours_in_order<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'Return True if each item of items is in the given order'</span><br/>    reverse_index <span class=\"sy0\">=</span> <span class=\"kw2\">dict</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span>x <span class=\"kw1\">in</span> <span class=\"kw2\">enumerate</span><span class=\"br0\">(</span>order<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    order_of_items <span class=\"sy0\">=</span> <span class=\"br0\">[</span>reverse_index<span class=\"br0\">[</span>item<span class=\"br0\">]</span> <span class=\"kw1\">for</span> item <span class=\"kw1\">in</span> items<span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span>x <span class=\"sy0\">&lt;=</span> y <span class=\"kw1\">for</span> x<span class=\"sy0\">,</span> y <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>order_of_items<span class=\"sy0\">,</span> order_of_items<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> random_balls<span class=\"br0\">(</span>mx<span class=\"sy0\">=</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'Select from 1 to mx balls of each colour, randomly'</span><br/>    balls <span class=\"sy0\">=</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span>colour<span class=\"br0\">]</span> * <span class=\"kw3\">random</span>.<span class=\"me1\">randint</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> mx<span class=\"br0\">)</span><br/>                 <span class=\"kw1\">for</span> colour <span class=\"kw1\">in</span> colours_in_order<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">random</span>.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span>balls<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> balls<br/>\u00a0<br/><span class=\"kw1\">def</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    <span class=\"co1\"># Ensure we start unsorted</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        balls <span class=\"sy0\">=</span> random_balls<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> dutch_flag_check<span class=\"br0\">(</span>balls<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">break</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Original Ball order:\"</span><span class=\"sy0\">,</span> balls<span class=\"br0\">)</span><br/>    sorted_balls <span class=\"sy0\">=</span> dutch_flag_sort<span class=\"br0\">(</span>balls<span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Sorted Ball Order:\"</span><span class=\"sy0\">,</span> sorted_balls<span class=\"br0\">)</span><br/>    <span class=\"kw1\">assert</span> dutch_flag_check<span class=\"br0\">(</span>sorted_balls<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">'Whoops. Not sorted!'</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 37, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define dutch-colors '(red white blue))<br/>\u00a0<br/>(define (dutch-order? balls)<br/> \u00a0;; drop each color from the front, should end up empty<br/>  (null? (for/fold ([r balls]) ([color dutch-colors])<br/>           (dropf r (curry eq? color)))))<br/>\u00a0<br/>(define (random-balls)<br/>  (define balls<br/>    (for/list ([i (random 20)])<br/>      (list-ref dutch-colors (random (length dutch-colors)))))<br/>  (if (dutch-order? balls) (random-balls) balls))<br/>\u00a0<br/>;; first method: use a key to map colors to integers<br/>(define (order-&gt;key order)<br/>  (let ([alist (for/list ([x order] [i (in-naturals)]) (cons x i))])<br/>    (\u03bb(b) (cdr (assq b alist)))))<br/>(define (sort-balls/key balls)<br/>  (sort balls &lt; #:key (order-&gt;key dutch-colors)))<br/>\u00a0<br/>;; second method: use a comparator built from the ordered list<br/>(define ((order&lt;? ord) x y)<br/>  (memq y (cdr (memq x ord))))<br/>(define (sort-balls/compare balls)<br/>  (sort balls (order&lt;? dutch-colors)))<br/>\u00a0<br/>(define (test sort)<br/>  (define balls (random-balls))<br/>  (define sorted (sort balls))<br/>  (printf \"Testing ~a:\\n  Random: ~s\\n  Sorted: ~s\\n      ==&gt; ~s\\n\"<br/>          (object-name sort)<br/>          balls sorted (if (dutch-order? sorted) 'OK 'BAD)))<br/>(for-each test (list sort-balls/key sort-balls/compare))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 32, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program reorders a set of random colored balls into a correct order, which is the*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 order of colors on the Dutch flag:  red white blue.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N colors                               <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> N=<span class=\"st0\">''</span> <span class=\"sy0\">|</span>  N=<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">15</span>                      <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> colors=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> colors= <span class=\"st0\">'red white blue'</span>      <span class=\"coMULTI\">/* \"      \"         \"   \"   \"      \"   */</span><br/>#=<span class=\"kw6\">words</span><span class=\"br0\">(</span>colors<span class=\"br0\">)</span>                                  <span class=\"coMULTI\">/*count the number of colors specified.*/</span><br/>@=<span class=\"kw6\">word</span><span class=\"br0\">(</span>colors, #<span class=\"br0\">)</span>    <span class=\"kw6\">word</span><span class=\"br0\">(</span>colors, <span class=\"nu0\">1</span><span class=\"br0\">)</span>             <span class=\"coMULTI\">/*ensure balls aren't already in order.*/</span><br/>\u00a0<br/>    <span class=\"kw1\">do</span> g=<span class=\"nu0\">3</span>  <span class=\"kw2\">to</span> N                                 <span class=\"coMULTI\">/*generate a random # of colored balls.*/</span><br/>    @<a class=\"__cf_email__\" data-cfemail=\"89b4c9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  <span class=\"kw6\">word</span><span class=\"br0\">(</span> colors, <span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, #<span class=\"br0\">)</span> <span class=\"br0\">)</span>            <span class=\"coMULTI\">/*append a random color to the  @ list.*/</span><br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*g*/</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'number of colored balls generated = '</span>   N      \u00a0;  <span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">' original ball order '</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>@<span class=\"br0\">)</span>, <span class=\"st0\">\"\u2500\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> @                                               \u00a0;  <span class=\"kw1\">say</span><br/>$=;                          <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #;<br/>                             _=<span class=\"kw6\">word</span><span class=\"br0\">(</span>colors, j<span class=\"br0\">)</span>;      $=$  <span class=\"kw6\">copies</span><span class=\"br0\">(</span>_<span class=\"st0\">' '</span>,   countWords<span class=\"br0\">(</span>_, @<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">' sorted  ball order '</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>@<span class=\"br0\">)</span>, <span class=\"st0\">\"\u2500\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"kw6\">space</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span><br/>    <span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span>  N                                <span class=\"coMULTI\">/*verify the balls are in correct order*/</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>$,k<span class=\"br0\">)</span>, colors<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span>= <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>$,k-<span class=\"nu0\">1</span><span class=\"br0\">)</span>, colors<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">\"The list of sorted balls isn't in proper order!\"</span>;         <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span><br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'The sorted colored ball list has been confirmed as being sorted correctly.'</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>countWords:  <span class=\"kw1\">procedure</span>;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span>\u00a0?,hay;  s=<span class=\"nu0\">1</span><br/>                  <span class=\"kw1\">do</span> r=<span class=\"nu0\">0</span>  <span class=\"kw2\">until</span> _==<span class=\"nu0\">0</span>;  _=<span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>?, hay, s<span class=\"br0\">)</span>;  s=_+<span class=\"nu0\">1</span>;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*r*/</span>;  <span class=\"kw1\">return</span> r</pre>"}, {"lang": "Ring", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Dutch national flag problem<br/>\u00a0<br/>flag = [\"Red\",\"White\",\"Blue\"]<br/>balls = list(10)<br/>\u00a0<br/>see \"Random: |\"<br/>for i = 1 to 10<br/>     color = random(2) + 1<br/>     balls[i] = flag[color]<br/>     see  balls[i] + \" |\"<br/>next <br/>see nl<br/>\u00a0<br/>see \"Sorted: |\"<br/>for i = 1 to 3<br/>     color = flag[i]<br/>     for j = 1 to 10<br/>          if balls[j] = color <br/>             see balls[j] + \" |\"<br/>          ok<br/>     next<br/>next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 26, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Ball<br/>  FLAG = <span class=\"br0\">{</span>red: <span class=\"nu0\">1</span>, white: <span class=\"nu0\">2</span>, blue: <span class=\"nu0\">3</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> initialize<br/>    <span class=\"re1\">@color</span> = FLAG.<span class=\"me1\">keys</span>.<span class=\"me1\">sample</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> color<br/>    <span class=\"re1\">@color</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> <span class=\"sy0\">&lt;=&gt;</span><span class=\"br0\">(</span>other<span class=\"br0\">)</span>  <span class=\"co1\"># needed for sort, results in -1 for &lt;, 0 for == and 1 for &gt;.</span><br/>    FLAG<span class=\"br0\">[</span><span class=\"kw2\">self</span>.<span class=\"me1\">color</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=&gt;</span> FLAG<span class=\"br0\">[</span>other.<span class=\"me1\">color</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> inspect<br/>    <span class=\"re1\">@color</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>balls = <span class=\"br0\">[</span><span class=\"br0\">]</span> <br/>balls = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">{</span>Ball.<span class=\"me1\">new</span><span class=\"br0\">}</span> <span class=\"kw1\">while</span> balls == balls.<span class=\"me1\">sort</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"Random: #{balls}\"</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"Sorted: #{balls.sort}\"</span><br/>\u00a0</pre>"}, {"lang": "Run BASIC", "loc": 18, "block": "<pre class=\"text highlighted_source\">flag$ = \"Red,White,Blue\"<br/>\u00a0<br/>print \"Random: |\";<br/>for i = 1 to 10<br/>color = rnd(0) * 3 + 1<br/>balls$(i) = word$(flag$,color,\",\")<br/>print  balls$(i);\" |\";<br/>next i<br/>\u00a0<br/>print\u00a0:print \"Sorted: |\";<br/>for i = 1 to 3<br/> color$ = word$(flag$,i,\",\")<br/> for j = 1 to 10<br/>  if balls$(j) = color$ then <br/>    print balls$(j);\" |\";<br/>  end if<br/>next j<br/>next i</pre>"}, {"lang": "Rust", "loc": 44, "block": "<pre class=\"text highlighted_source\">extern crate rand;<br/>\u00a0<br/>use rand::Rng;<br/>\u00a0<br/>// Color enums will be sorted by their top-to-bottom declaration order<br/>#[derive(Eq,Ord,PartialOrd,PartialEq,Debug)]<br/>enum Color {<br/>    Red,<br/>    White,<br/>    Blue<br/>}<br/>\u00a0<br/>fn is_sorted(list: &amp;Vec&lt;Color&gt;) -&gt; bool {<br/>    let mut state = &amp;Color::Red;<br/>    for current in list.iter() {<br/>        if current &lt; state { return false; }<br/>        if current &gt; state { state = current; }<br/>    }<br/>    true<br/>}<br/>\u00a0<br/>\u00a0<br/>fn main() {<br/>    let mut rng = rand::thread_rng();<br/>    let mut colors: Vec&lt;Color&gt; = Vec::new();<br/>\u00a0<br/>    for _ in 1..10 {<br/>        let r = rng.gen_range(0, 3);<br/>        if      r == 0 { colors.push(Color::Red); }<br/>        else if r == 1 { colors.push(Color::White); }<br/>        else if r == 2 { colors.push(Color::Blue); }<br/>    }<br/>\u00a0<br/>    while is_sorted(&amp;colors) {<br/>        rng.shuffle(&amp;mut colors);<br/>    }<br/>\u00a0<br/>    println!(\"Before: {:?}\", colors);<br/>    colors.sort();<br/>    println!(\"After:  {:?}\", colors);<br/>    if\u00a0!is_sorted(&amp;colors) {<br/>        println!(\"Oops, did not sort colors correctly!\");<br/>    }<br/>}</pre>"}, {"lang": "Scala", "loc": 11, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> FlagColor <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Enumeration <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">type</span></a> FlagColor <span class=\"sy0\">=</span> Value<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> Red, White, Blue <span class=\"sy0\">=</span> Value<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> genBalls <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> to <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> FlagColor<span class=\"br0\">(</span>scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span>.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>FlagColor.<span class=\"me1\">maxId</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sortedBalls <span class=\"sy0\">=</span> genBalls.<span class=\"me1\">sorted</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sorted <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>genBalls <span class=\"sy0\">==</span> sortedBalls<span class=\"br0\">)</span> <span class=\"st0\">\"sorted\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"not sorted\"</span><br/>\u00a0<br/>println<span class=\"br0\">(</span>s<span class=\"st0\">\"Generated balls (${genBalls mkString \"</span> <span class=\"st0\">\"}) are $sorted.\"</span><span class=\"br0\">)</span><br/>println<span class=\"br0\">(</span>s<span class=\"st0\">\"Sorted balls (${sortedBalls mkString \"</span> <span class=\"st0\">\"}) are sorted.\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "SQL", "loc": 35, "block": "<pre class=\"sql highlighted_source\"><span class=\"co1\">-- Create and populate tables</span><br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">TABLE</span> colours <span class=\"br0\">(</span>id <span class=\"kw1\">INTEGER</span> <span class=\"kw1\">PRIMARY</span> <span class=\"kw1\">KEY</span><span class=\"sy0\">,</span> name <span class=\"kw1\">VARCHAR</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> colours <span class=\"br0\">(</span>id<span class=\"sy0\">,</span> name<span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">'red'</span>  <span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> colours <span class=\"br0\">(</span>id<span class=\"sy0\">,</span> name<span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">'white'</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> colours <span class=\"br0\">(</span>id<span class=\"sy0\">,</span> name<span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">'blue'</span> <span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">TABLE</span> balls <span class=\"br0\">(</span> colour <span class=\"kw1\">INTEGER</span> <span class=\"kw1\">REFERENCES</span> colours <span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> balls <span class=\"br0\">(</span> colour <span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> balls <span class=\"br0\">(</span> colour <span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> balls <span class=\"br0\">(</span> colour <span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> balls <span class=\"br0\">(</span> colour <span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> balls <span class=\"br0\">(</span> colour <span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> balls <span class=\"br0\">(</span> colour <span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> balls <span class=\"br0\">(</span> colour <span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span>;<br/><span class=\"kw1\">INSERT</span> <span class=\"kw1\">INTO</span> balls <span class=\"br0\">(</span> colour <span class=\"br0\">)</span> <span class=\"kw1\">VALUES</span> <span class=\"br0\">(</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"co1\">-- Show the balls are unsorted</span><br/><span class=\"kw1\">SELECT</span><br/>\tcolours<span class=\"sy0\">.</span>name<br/><span class=\"kw1\">FROM</span><br/>\tballs<br/>\t<span class=\"kw1\">JOIN</span> colours <span class=\"kw1\">ON</span> balls<span class=\"sy0\">.</span>colour <span class=\"sy0\">=</span> colours<span class=\"sy0\">.</span>id;<br/>\u00a0<br/><span class=\"co1\">-- Show the balls in dutch flag order</span><br/><span class=\"kw1\">SELECT</span><br/>\tcolours<span class=\"sy0\">.</span>name<br/><span class=\"kw1\">FROM</span><br/>\tballs<br/>\t<span class=\"kw1\">JOIN</span> colours <span class=\"kw1\">ON</span> balls<span class=\"sy0\">.</span>colour <span class=\"sy0\">=</span> colours<span class=\"sy0\">.</span>id<br/><span class=\"kw1\">ORDER</span> <span class=\"kw1\">BY</span><br/>\tcolours<span class=\"sy0\">.</span>id;<br/>\u00a0<br/><span class=\"co1\">-- Tidy up</span><br/><span class=\"kw1\">DROP</span> <span class=\"kw1\">TABLE</span> balls;<br/><span class=\"kw1\">DROP</span> <span class=\"kw1\">TABLE</span> colours;</pre>"}, {"lang": "Tcl", "loc": 30, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># The comparison function</span><br/><span class=\"kw1\">proc</span> dutchflagcompare <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> colors <span class=\"br0\">{</span>red white blue<span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lsearch</span> <span class=\"re0\">$colors</span> <span class=\"re0\">$a</span><span class=\"br0\">]</span> - <span class=\"br0\">[</span><span class=\"kw2\">lsearch</span> <span class=\"re0\">$colors</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># The test function (evil shimmer of list to string!)</span><br/><span class=\"kw1\">proc</span> isFlagSorted lst <span class=\"br0\">{</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">regexp</span> <span class=\"br0\">{</span>blue.<span class=\"sy0\">*</span><span class=\"br0\">(</span>white|red<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"re0\">$lst</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"br0\">[</span><span class=\"kw2\">regexp</span> <span class=\"br0\">{</span>white.<span class=\"sy0\">*</span>red<span class=\"br0\">}</span> <span class=\"re0\">$lst</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># A ball generator</span><br/><span class=\"kw1\">proc</span> generateBalls n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"br0\">{</span>red white blue<span class=\"br0\">}</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>int<span class=\"br0\">(</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Do the challenge with 20 balls</span><br/><span class=\"kw1\">set</span> balls <span class=\"br0\">[</span>generateBalls <span class=\"nu0\">20</span><span class=\"br0\">]</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>isFlagSorted <span class=\"re0\">$balls</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">error</span> <span class=\"st0\">\"already a sorted flag\"</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> sorted <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -command dutchflagcompare <span class=\"re0\">$balls</span><span class=\"br0\">]</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>isFlagSorted <span class=\"re0\">$sorted</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"Sorted the flag<span class=\"es0\">\\n</span>$sorted\"</span><br/><span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"sort failed<span class=\"es0\">\\n</span>$sorted\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "UNIX Shell", "loc": 58, "block": "<pre class=\"bash highlighted_source\"><span class=\"re2\">COLORS</span>=<span class=\"br0\">(</span><span class=\"kw2\">red</span> white blue<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co0\"># to go from name to number, we make variables out of the color names </span><br/><span class=\"co0\"># (e.g. the variable \"$red\" has value \"1\").</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"re2\">i</span>=<span class=\"nu0\">0</span>; i<span class=\"sy0\">&lt;</span><span class=\"co1\">${#COLORS[@]}</span>; ++i <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>  <span class=\"kw3\">eval</span> <span class=\"co1\">${COLORS[i]}</span>=<span class=\"re1\">$i</span><br/><span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"co0\"># Make a random list</span><br/><span class=\"kw1\">function</span> random_balls <span class=\"br0\">{</span><br/>  <span class=\"kw3\">local</span> <span class=\"re5\">-i</span> <span class=\"re2\">n</span>=<span class=\"st0\">\"$1\"</span><br/>  <span class=\"kw3\">local</span> <span class=\"re5\">-i</span> i<br/>  <span class=\"kw3\">local</span> <span class=\"re2\">balls</span>=<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"re2\">i</span>=<span class=\"nu0\">0</span>; i <span class=\"sy0\">&lt;</span> n; ++i <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    balls+=<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es3\">${COLORS[RANDOM%${#COLORS[@]}</span>]}\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span><br/>  <span class=\"kw3\">echo</span> <span class=\"st0\">\"<span class=\"es3\">${balls[@]}</span>\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co0\"># Test for Dutchness</span><br/><span class=\"kw1\">function</span> dutch? <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"re4\">$#</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">then</span><br/>     <span class=\"kw3\">return</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw3\">local</span> <span class=\"re2\">first</span>=<span class=\"st0\">\"$1\"</span><br/>    <span class=\"kw3\">shift</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">eval</span> <span class=\"st0\">\"(( <span class=\"es2\">$first</span> &gt; $1 ))\"</span>; <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">else</span><br/>      dutch? <span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"8bafcb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span><br/>    <span class=\"kw1\">fi</span><br/>  <span class=\"kw1\">fi</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co0\"># Sort into order</span><br/><span class=\"kw1\">function</span> dutch <span class=\"br0\">{</span><br/>  <span class=\"kw3\">local</span> <span class=\"re5\">-i</span> <span class=\"re2\">lo</span>=-<span class=\"nu0\">1</span> <span class=\"re2\">hi</span>=<span class=\"re4\">$#</span> <span class=\"re2\">i</span>=<span class=\"nu0\">0</span><br/>  <span class=\"kw3\">local</span> <span class=\"re2\">a</span>=<span class=\"br0\">(</span><span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"634723\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> i <span class=\"sy0\">&lt;</span> hi <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">case</span> <span class=\"st0\">\"<span class=\"es3\">${a[i]}</span>\"</span> <span class=\"kw1\">in</span><br/>      <span class=\"kw2\">red</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">let</span> lo+=<span class=\"nu0\">1</span><br/>        <span class=\"kw3\">local</span> <span class=\"re2\">t</span>=<span class=\"st0\">\"<span class=\"es3\">${a[lo]}</span>\"</span><br/>        a<span class=\"br0\">[</span>lo<span class=\"br0\">]</span>=<span class=\"st0\">\"<span class=\"es3\">${a[i]}</span>\"</span><br/>        a<span class=\"br0\">[</span>i<span class=\"br0\">]</span>=<span class=\"st0\">\"<span class=\"es2\">$t</span>\"</span><br/>        <span class=\"kw3\">let</span> i+=<span class=\"nu0\">1</span><br/>        <span class=\"sy0\">;;</span><br/>      white<span class=\"br0\">)</span> <span class=\"kw3\">let</span> i+=<span class=\"nu0\">1</span><span class=\"sy0\">;;</span><br/>      blue<span class=\"br0\">)</span><br/>        <span class=\"kw3\">let</span> hi-=<span class=\"nu0\">1</span><br/>        <span class=\"kw3\">local</span> <span class=\"re2\">t</span>=<span class=\"st0\">\"<span class=\"es3\">${a[hi]}</span>\"</span><br/>        a<span class=\"br0\">[</span>hi<span class=\"br0\">]</span>=<span class=\"st0\">\"<span class=\"es3\">${a[i]}</span>\"</span><br/>        a<span class=\"br0\">[</span>i<span class=\"br0\">]</span>=<span class=\"st0\">\"<span class=\"es2\">$t</span>\"</span><br/>        <span class=\"sy0\">;;</span><br/>    <span class=\"kw1\">esac</span><br/>  <span class=\"kw1\">done</span><br/>  <span class=\"kw3\">echo</span> <span class=\"st0\">\"<span class=\"es3\">${a[@]}</span>\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBScript", "loc": 46, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"co1\">'Solution derived from http://www.geeksforgeeks.org/sort-an-array-of-0s-1s-and-2s/.<br/></span><br/><span class=\"co1\">'build an unsorted array with n elements<br/></span><span class=\"kw2\">Function</span> build_unsort(n)<br/>\tflag = Array(<span class=\"st0\">\"red\"</span>,<span class=\"st0\">\"white\"</span>,<span class=\"st0\">\"blue\"</span>)<br/>\t<span class=\"kw4\">Set</span> <span class=\"kw4\">random</span> = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"System.Random\"</span>)<br/>\t<span class=\"kw4\">Dim</span> arr()<br/>\t<span class=\"kw4\">ReDim</span> arr(n)<br/>\t<span class=\"kw3\">For</span> i = 0 <span class=\"kw3\">To</span> n<br/>\t\tarr(i) = flag(<span class=\"kw4\">random</span>.Next_2(0,3))<br/>\t<span class=\"kw3\">Next</span><br/>\tbuild_unsort = arr<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'sort routine<br/></span><span class=\"kw2\">Function</span> sort(arr)<br/>\tlo = 0<br/>\tmi = 0<br/>\thi = <span class=\"kw4\">UBound</span>(arr)<br/>\t<span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> mi &lt;= hi <br/>\t\t<span class=\"kw3\">Select</span> <span class=\"kw3\">Case</span> arr(mi)<br/>\t\t\t<span class=\"kw3\">Case</span> <span class=\"st0\">\"red\"</span><br/>\t\t\t\ttmp = arr(lo)<br/>\t\t\t\tarr(lo) = arr(mi)<br/>\t\t\t\tarr(mi) = tmp<br/>\t\t\t\tlo = lo + 1<br/>\t\t\t\tmi = mi + 1<br/>\t\t\t<span class=\"kw3\">Case</span> <span class=\"st0\">\"white\"</span><br/>\t\t\t\tmi = mi + 1<br/>\t\t\t<span class=\"kw3\">Case</span> <span class=\"st0\">\"blue\"</span><br/>\t\t\t\ttmp = arr(mi)<br/>\t\t\t\tarr(mi) = arr(hi)<br/>\t\t\t\tarr(hi) = tmp<br/>\t\t\t\thi = hi - 1<br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">Select</span> <br/>\t<span class=\"kw3\">Loop</span><br/>\tsort = Join(arr,<span class=\"st0\">\",\"</span>)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>unsort = build_unsort(11)<br/>WScript.StdOut.Write <span class=\"st0\">\"Unsorted: \"</span> &amp; Join(unsort,<span class=\"st0\">\",\"</span>)<br/>WScript.StdOut.WriteLine<br/>WScript.StdOut.Write <span class=\"st0\">\"Sorted: \"</span> &amp; sort(unsort)<br/>WScript.StdOut.WriteLine<br/>\u00a0</pre>"}, {"lang": "Visual FoxPro", "loc": 36, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>CLOSE DATABASES ALL<br/>LOCAL lcCollate As String, i As Integer, n As Integer<br/>lcCollate = SET(\"Collate\")<br/>SET COLLATE TO \"Machine\"<br/>*!* Colours table<br/>CREATE CURSOR colours (id I UNIQUE, colour V(5))<br/>INSERT INTO colours VALUES (1, \"Red\")<br/>INSERT INTO colours VALUES (2, \"White\")<br/>INSERT INTO colours VALUES (3, \"Blue\")<br/>*!* Balls table<br/>CREATE CURSOR balls (colour I, rowid I AUTOINC)<br/>INDEX ON colour TAG colour<br/>SET ORDER TO 0<br/>*!* Make sure there is at least 1 of each colour<br/>INSERT INTO balls (colour) VALUES(3)<br/>INSERT INTO balls (colour) VALUES(1)<br/>INSERT INTO balls (colour) VALUES(2)<br/>RAND(-1)\t&amp;&amp; Initialise random number generator<br/>n = 24<br/>FOR i = 4 TO n<br/>\tINSERT INTO balls (colour) VALUES (RanInt())<br/>ENDFOR<br/>*!* Show unsorted<br/>SELECT bb.rowid, cc.colour FROM colours cc JOIN balls bb ON cc.id = bb.colour  <br/>*!* Select by correct order<br/>SELECT bb.rowid, cc.colour FROM colours cc JOIN balls bb ON cc.id = bb.colour\u00a0;<br/>ORDER BY cc.id INTO CURSOR dutchflag <br/>*!* Show sorted records<br/>BROWSE NOMODIFY IN SCREEN <br/>SET COLLATE TO lcCollate<br/>\u00a0<br/>FUNCTION RanInt() As Integer<br/>RETURN INT(3*RAND()) + 1<br/>ENDFUNC<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 10, "block": "<pre class=\"text highlighted_source\">const RED=0, WHITE=1, BLUE=2; var BALLS=T(RED,WHITE,BLUE);<br/>fcn colorBalls(balls){ balls.apply(T(\"red\",\"white\",\"blue\").get).concat(\", \"); }<br/>\u00a0<br/>reg balls, sortedBalls;<br/>do{<br/>   balls=(0).pump(12,List,fcn{ BALLS[(0).random(3)] }); // create list of 12 random balls<br/>   sortedBalls=balls.sort(); // balls is read only, sort creates new list<br/>}while(balls==sortedBalls); // make sure sort does something<br/>println(\"Original ball order:\\n\", colorBalls(balls));<br/>println(\"\\nSorted ball order:\\n\", colorBalls(sortedBalls));</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 14, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> r$=<span class=\"st0\">\"Red\"</span>: <span class=\"kw1\">LET</span> w$=<span class=\"st0\">\"White\"</span>: <span class=\"kw1\">LET</span> b$=<span class=\"st0\">\"Blue\"</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> c$=<span class=\"st0\">\"RWB\"</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">DIM</span> b<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Random:\"</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">FOR</span> n=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">LET</span> b<span class=\"br0\">(</span>n<span class=\"br0\">)</span>=<span class=\"kw3\">INT</span> <span class=\"br0\">(</span><span class=\"kw3\">RND</span>*<span class=\"nu0\">3</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">PRINT</span> <span class=\"kw3\">VAL</span>$ <span class=\"br0\">(</span>c$<span class=\"br0\">(</span>b<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>+<span class=\"st0\">\"$\"</span><span class=\"br0\">)</span>;<span class=\"st0\">\" \"</span>;<br/><span class=\"nu0\">80</span> <span class=\"kw1\">NEXT</span> n<br/><span class=\"nu0\">90</span> <span class=\"kw1\">PRINT</span> <span class=\"co1\">''\"Sorted:\"</span><br/><span class=\"nu0\">100</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">3</span><br/><span class=\"nu0\">110</span> <span class=\"kw1\">FOR</span> j=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span><br/><span class=\"nu0\">120</span> <span class=\"kw1\">IF</span> b<span class=\"br0\">(</span>j<span class=\"br0\">)</span>=i <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"kw3\">VAL</span>$ <span class=\"br0\">(</span>c$<span class=\"br0\">(</span>i<span class=\"br0\">)</span>+<span class=\"st0\">\"$\"</span><span class=\"br0\">)</span>;<span class=\"st0\">\" \"</span>;<br/><span class=\"nu0\">130</span> <span class=\"kw1\">NEXT</span> j<br/><span class=\"nu0\">140</span> <span class=\"kw1\">NEXT</span> i</pre>"}]}