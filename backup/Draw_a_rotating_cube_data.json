{"task": "Draw_a_rotating_cube", "blocks": [{"lang": "C", "loc": 65, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include&lt;gl/freeglut.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> rot <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">float</span> matCol<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> display<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tglClear<span class=\"br0\">(</span>GL_COLOR_BUFFER_BIT<span class=\"sy0\">|</span>GL_DEPTH_BUFFER_BIT<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglPushMatrix<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglRotatef<span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglRotatef<span class=\"br0\">(</span>rot<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglMaterialfv<span class=\"br0\">(</span>GL_FRONT<span class=\"sy0\">,</span>GL_DIFFUSE<span class=\"sy0\">,</span>matCol<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglutWireCube<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglPopMatrix<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglFlush<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">void</span> onIdle<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\trot <span class=\"sy0\">+=</span> <span class=\"nu16\">0.1</span><span class=\"sy0\">;</span><br/>\tglutPostRedisplay<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> reshape<span class=\"br0\">(</span><span class=\"kw4\">int</span> w<span class=\"sy0\">,</span><span class=\"kw4\">int</span> h<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">float</span> ar <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">)</span> w <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw4\">float</span><span class=\"br0\">)</span> h <span class=\"sy0\">;</span><br/>\u00a0<br/>\tglViewport<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>GLsizei<span class=\"br0\">)</span>w<span class=\"sy0\">,</span><span class=\"br0\">(</span>GLsizei<span class=\"br0\">)</span>h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglTranslatef<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,-</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglMatrixMode<span class=\"br0\">(</span>GL_PROJECTION<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tgluPerspective<span class=\"br0\">(</span><span class=\"nu0\">70</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>GLfloat<span class=\"br0\">)</span>w<span class=\"sy0\">/</span><span class=\"br0\">(</span>GLfloat<span class=\"br0\">)</span>h<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglLoadIdentity<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglFrustum <span class=\"br0\">(</span> <span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">10.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">100.0</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>\tglMatrixMode<span class=\"br0\">(</span>GL_MODELVIEW<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglLoadIdentity<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> init<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">float</span> pos<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">float</span> white<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">float</span> shini<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">70</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tglClearColor<span class=\"br0\">(</span><span class=\"nu18\">.5</span><span class=\"sy0\">,</span><span class=\"nu18\">.5</span><span class=\"sy0\">,</span><span class=\"nu18\">.5</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglShadeModel<span class=\"br0\">(</span>GL_SMOOTH<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglLightfv<span class=\"br0\">(</span>GL_LIGHT0<span class=\"sy0\">,</span>GL_AMBIENT<span class=\"sy0\">,</span>white<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglLightfv<span class=\"br0\">(</span>GL_LIGHT0<span class=\"sy0\">,</span>GL_DIFFUSE<span class=\"sy0\">,</span>white<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglMaterialfv<span class=\"br0\">(</span>GL_FRONT<span class=\"sy0\">,</span>GL_SHININESS<span class=\"sy0\">,</span>shini<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglEnable<span class=\"br0\">(</span>GL_LIGHTING<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglEnable<span class=\"br0\">(</span>GL_LIGHT0<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglEnable<span class=\"br0\">(</span>GL_DEPTH_TEST<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argC<span class=\"sy0\">,</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> argV<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tglutInit<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>argC<span class=\"sy0\">,</span>argV<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglutInitDisplayMode<span class=\"br0\">(</span>GLUT_SINGLE<span class=\"sy0\">|</span>GLUT_RGB<span class=\"sy0\">|</span>GLUT_DEPTH<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglutInitWindowSize<span class=\"br0\">(</span><span class=\"nu0\">600</span><span class=\"sy0\">,</span><span class=\"nu0\">500</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglutCreateWindow<span class=\"br0\">(</span><span class=\"st0\">\"Rossetta's Rotating Cube\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tinit<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglutDisplayFunc<span class=\"br0\">(</span>display<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglutReshapeFunc<span class=\"br0\">(</span>reshape<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglutIdleFunc<span class=\"br0\">(</span>onIdle<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tglutMainLoop<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 97, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Drawing</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Drawing.Drawing2D</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Windows.Forms</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Windows.Threading</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RotatingCube<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">partial</span> <span class=\"kw4\">class</span> Form1 <span class=\"sy0\">:</span> Form<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> nodes <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>,<br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>,<br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> edges <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span>,<br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">5</span>, <span class=\"nu0\">7</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">7</span>, <span class=\"nu0\">6</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">6</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span>,<br/>            <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">6</span><span class=\"br0\">}</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Form1<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Width <span class=\"sy0\">=</span> Height <span class=\"sy0\">=</span> <span class=\"nu0\">640</span><span class=\"sy0\">;</span><br/>            StartPosition <span class=\"sy0\">=</span> FormStartPosition<span class=\"sy0\">.</span><span class=\"me1\">CenterScreen</span><span class=\"sy0\">;</span><br/>            SetStyle<span class=\"br0\">(</span><br/>                ControlStyles<span class=\"sy0\">.</span><span class=\"me1\">AllPaintingInWmPaint</span> <span class=\"sy0\">|</span><br/>                ControlStyles<span class=\"sy0\">.</span><span class=\"me1\">UserPaint</span> <span class=\"sy0\">|</span><br/>                ControlStyles<span class=\"sy0\">.</span><span class=\"me1\">DoubleBuffer</span>,<br/>                <span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            Scale<span class=\"br0\">(</span><span class=\"nu0\">100</span>, <span class=\"nu0\">100</span>, <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            RotateCuboid<span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">PI</span> <span class=\"sy0\">/</span> <span class=\"nu0\">4</span>, Math<span class=\"sy0\">.</span><span class=\"me1\">Atan</span><span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> timer <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> DispatcherTimer<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            timer<span class=\"sy0\">.</span><span class=\"me1\">Tick</span> <span class=\"sy0\">+=</span> <span class=\"br0\">(</span>s, e<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span> RotateCuboid<span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">PI</span> <span class=\"sy0\">/</span> <span class=\"nu0\">180</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> Refresh<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            timer<span class=\"sy0\">.</span><span class=\"me1\">Interval</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> TimeSpan<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">17</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            timer<span class=\"sy0\">.</span><span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> RotateCuboid<span class=\"br0\">(</span><span class=\"kw4\">double</span> angleX, <span class=\"kw4\">double</span> angleY<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> sinX <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sin</span><span class=\"br0\">(</span>angleX<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> cosX <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Cos</span><span class=\"br0\">(</span>angleX<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">double</span> sinY <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sin</span><span class=\"br0\">(</span>angleY<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> cosY <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Cos</span><span class=\"br0\">(</span>angleY<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> node <span class=\"kw1\">in</span> nodes<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">double</span> x <span class=\"sy0\">=</span> node<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">double</span> y <span class=\"sy0\">=</span> node<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">double</span> z <span class=\"sy0\">=</span> node<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                node<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> cosX <span class=\"sy0\">-</span> z <span class=\"sy0\">*</span> sinX<span class=\"sy0\">;</span><br/>                node<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> z <span class=\"sy0\">*</span> cosX <span class=\"sy0\">+</span> x <span class=\"sy0\">*</span> sinX<span class=\"sy0\">;</span><br/>\u00a0<br/>                z <span class=\"sy0\">=</span> node<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                node<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> y <span class=\"sy0\">*</span> cosY <span class=\"sy0\">-</span> z <span class=\"sy0\">*</span> sinY<span class=\"sy0\">;</span><br/>                node<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> z <span class=\"sy0\">*</span> cosY <span class=\"sy0\">+</span> y <span class=\"sy0\">*</span> sinY<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> Scale<span class=\"br0\">(</span><span class=\"kw4\">int</span> v1, <span class=\"kw4\">int</span> v2, <span class=\"kw4\">int</span> v3<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> item <span class=\"kw1\">in</span> nodes<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                item<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*=</span> v1<span class=\"sy0\">;</span><br/>                item<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*=</span> v2<span class=\"sy0\">;</span><br/>                item<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">*=</span> v3<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">protected</span> <span class=\"kw1\">override</span> <span class=\"kw4\">void</span> OnPaint<span class=\"br0\">(</span>PaintEventArgs args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> g <span class=\"sy0\">=</span> args<span class=\"sy0\">.</span><span class=\"me1\">Graphics</span><span class=\"sy0\">;</span><br/>            g<span class=\"sy0\">.</span><span class=\"me1\">SmoothingMode</span> <span class=\"sy0\">=</span> SmoothingMode<span class=\"sy0\">.</span><span class=\"me1\">HighQuality</span><span class=\"sy0\">;</span><br/>            g<span class=\"sy0\">.</span><span class=\"me1\">Clear</span><span class=\"br0\">(</span>Color<span class=\"sy0\">.</span><span class=\"me1\">White</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            g<span class=\"sy0\">.</span><span class=\"me1\">TranslateTransform</span><span class=\"br0\">(</span>Width <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, Height <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> edge <span class=\"kw1\">in</span> edges<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> xy1 <span class=\"sy0\">=</span> nodes<span class=\"br0\">[</span>edge<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> xy2 <span class=\"sy0\">=</span> nodes<span class=\"br0\">[</span>edge<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                g<span class=\"sy0\">.</span><span class=\"me1\">DrawLine</span><span class=\"br0\">(</span>Pens<span class=\"sy0\">.</span><span class=\"me1\">Black</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Round</span><span class=\"br0\">(</span>xy1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Round</span><span class=\"br0\">(</span>xy1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>,<br/>                        <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Round</span><span class=\"br0\">(</span>xy2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Round</span><span class=\"br0\">(</span>xy2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> node <span class=\"kw1\">in</span> nodes<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                g<span class=\"sy0\">.</span><span class=\"me1\">FillEllipse</span><span class=\"br0\">(</span>Brushes<span class=\"sy0\">.</span><span class=\"me1\">Black</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Round</span><span class=\"br0\">(</span>node<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">4</span>,<br/>                    <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Round</span><span class=\"br0\">(</span>node<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">4</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "FutureBasic", "loc": 56, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"Tlbx agl.incl\"<br/>include \"Tlbx glut.incl\"<br/>\u00a0<br/>output file \"Rotating Cube\"<br/>\u00a0<br/>local fn AnimateCube<br/>'~'1<br/>begin globals<br/>dim as double \u00a0sRotation<br/>end globals<br/>\u00a0<br/>// Speed of rotation<br/>sRotation += 2.9<br/>glMatrixMode( _GLMODELVIEW )<br/>\u00a0<br/>glLoadIdentity()<br/>glTranslated( 0.0, 0.0, 0.0 )<br/>glRotated( sRotation, -0.45, -0.8, -0.6 )<br/>glColor3d( 1.0, 0.0, 0.3 )<br/>glLineWidth( 1.5 )<br/>glutWireCube( 1.0 )<br/>end fn<br/>\u00a0<br/>// Main program<br/>dim as GLint \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0attrib(2)<br/>dim as CGrafPtr \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port<br/>dim as AGLPixelFormat \u00a0fmt<br/>dim as AGLContext \u00a0\u00a0\u00a0\u00a0\u00a0glContext<br/>dim as EventRecord \u00a0\u00a0\u00a0\u00a0ev<br/>dim as GLboolean \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0yesOK<br/>\u00a0<br/>window 1, @\"Rotating Cube\", (0,0) - (500,500)<br/>\u00a0<br/>attrib(0) = _AGLRGBA<br/>attrib(1) = _AGLDOUBLEBUFFER<br/>attrib(2) = _AGLNONE<br/>\u00a0<br/>fmt = fn aglChoosePixelFormat( 0, 0, attrib(0) )<br/>glContext = fn aglCreateContext( fmt, 0 )<br/>aglDestroyPixelFormat( fmt )<br/>\u00a0<br/>port = window( _wndPort )<br/>yesOK = fn aglSetDrawable( glContext, port )<br/>yesOK = fn aglSetCurrentContext( glContext )<br/>\u00a0<br/>glClearColor( 0.0, 0.0, 0.0, 0.0 )<br/>\u00a0<br/>poke long event - 8, 1<br/>do<br/>glClear( _GLCOLORBUFFERBIT )<br/>fn AnimateCube<br/>aglSwapBuffers( glContext )<br/>HandleEvents<br/>until gFBQuit<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 105, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"image\"</span><br/>\t<span class=\"st0\">\"image/color\"</span><br/>\t<span class=\"st0\">\"image/gif\"</span><br/>\t<span class=\"st0\">\"log\"</span><br/>\t<span class=\"st0\">\"math\"</span><br/>\t<span class=\"st0\">\"os\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>\twidth<span class=\"sy1\">,</span> height <span class=\"sy2\">=</span> <span class=\"nu0\">640</span><span class=\"sy1\">,</span> <span class=\"nu0\">640</span><br/>\toffset        <span class=\"sy2\">=</span> height <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><br/>\tfileName      <span class=\"sy2\">=</span> <span class=\"st0\">\"rotatingCube.gif\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> nodes <span class=\"sy2\">=</span> <span class=\"sy1\">[][]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{{</span><span class=\"sy3\">-</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">100</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">100</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">100</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">100</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"sy1\">,</span> <span class=\"nu0\">100</span><span class=\"sy1\">}}</span><br/><span class=\"kw1\">var</span> edges <span class=\"sy2\">=</span> <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span><span class=\"sy1\">{{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">3</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">},</span><br/>\t<span class=\"sy1\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">4</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">6</span><span class=\"sy1\">},</span> <span class=\"sy1\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">7</span><span class=\"sy1\">}}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">var</span> images <span class=\"sy1\">[]</span><span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=image.Paletted\"><span class=\"kw5\">image.<span class=\"me1\">Paletted</span></span></a><br/>\tfgCol <span class=\"sy2\">:=</span> color<span class=\"sy3\">.</span>RGBA<span class=\"sy1\">{</span><span class=\"nu0\">0xff</span><span class=\"sy1\">,</span> <span class=\"nu0\">0x00</span><span class=\"sy1\">,</span> <span class=\"nu0\">0xff</span><span class=\"sy1\">,</span> <span class=\"nu0\">0xff</span><span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">var</span> palette <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span>color<span class=\"sy3\">.</span>Color<span class=\"sy1\">{</span>color<span class=\"sy3\">.</span>RGBA<span class=\"sy1\">{</span><span class=\"nu0\">0x00</span><span class=\"sy1\">,</span> <span class=\"nu0\">0x00</span><span class=\"sy1\">,</span> <span class=\"nu0\">0x00</span><span class=\"sy1\">,</span> <span class=\"nu0\">0xff</span><span class=\"sy1\">},</span> fgCol<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">var</span> delays <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><br/>\u00a0<br/>\timgFile<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> os<span class=\"sy3\">.</span>Create<span class=\"sy1\">(</span>fileName<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\tlog<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">defer</span> imgFile<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>\u00a0<br/>\trotateCube<span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Pi<span class=\"sy3\">/</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> math<span class=\"sy3\">.</span>Atan<span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Sqrt<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">)))</span><br/>\t<span class=\"kw1\">var</span> frame <span class=\"kw4\">float64</span><br/>\t<span class=\"kw1\">for</span> frame <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> frame &lt; <span class=\"nu0\">360</span><span class=\"sy1\">;</span> frame<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>\t\timg <span class=\"sy2\">:=</span> image<span class=\"sy3\">.</span>NewPaletted<span class=\"sy1\">(</span>image<span class=\"sy3\">.</span>Rect<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> width<span class=\"sy1\">,</span> height<span class=\"sy1\">),</span> palette<span class=\"sy1\">)</span><br/>\t\timages <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>images<span class=\"sy1\">,</span> img<span class=\"sy1\">)</span><br/>\t\tdelays <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>delays<span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> edge <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> edges <span class=\"sy1\">{</span><br/>\t\t\txy1 <span class=\"sy2\">:=</span> nodes<span class=\"sy1\">[</span>edge<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]]</span><br/>\t\t\txy2 <span class=\"sy2\">:=</span> nodes<span class=\"sy1\">[</span>edge<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]]</span><br/>\t\t\tdrawLine<span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">(</span>xy1<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><span class=\"sy3\">+</span>offset<span class=\"sy1\">,</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>xy1<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><span class=\"sy3\">+</span>offset<span class=\"sy1\">,</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>xy2<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><span class=\"sy3\">+</span>offset<span class=\"sy1\">,</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>xy2<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><span class=\"sy3\">+</span>offset<span class=\"sy1\">,</span> img<span class=\"sy1\">,</span> fgCol<span class=\"sy1\">)</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\trotateCube<span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Pi<span class=\"sy3\">/</span><span class=\"nu0\">180</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">:=</span> gif<span class=\"sy3\">.</span>EncodeAll<span class=\"sy1\">(</span>imgFile<span class=\"sy1\">,</span> &amp;gif<span class=\"sy3\">.</span>GIF<span class=\"sy1\">{</span>Image<span class=\"sy1\">:</span> images<span class=\"sy1\">,</span> Delay<span class=\"sy1\">:</span> delays<span class=\"sy1\">});</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\timgFile<span class=\"sy3\">.</span>Close<span class=\"sy1\">()</span><br/>\t\tlog<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> rotateCube<span class=\"sy1\">(</span>angleX<span class=\"sy1\">,</span> angleY <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\tsinX <span class=\"sy2\">:=</span> math<span class=\"sy3\">.</span>Sin<span class=\"sy1\">(</span>angleX<span class=\"sy1\">)</span><br/>\tcosX <span class=\"sy2\">:=</span> math<span class=\"sy3\">.</span>Cos<span class=\"sy1\">(</span>angleX<span class=\"sy1\">)</span><br/>\tsinY <span class=\"sy2\">:=</span> math<span class=\"sy3\">.</span>Sin<span class=\"sy1\">(</span>angleY<span class=\"sy1\">)</span><br/>\tcosY <span class=\"sy2\">:=</span> math<span class=\"sy3\">.</span>Cos<span class=\"sy1\">(</span>angleY<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> node <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> nodes <span class=\"sy1\">{</span><br/>\t\tx <span class=\"sy2\">:=</span> node<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>\t\ty <span class=\"sy2\">:=</span> node<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>\t\tz <span class=\"sy2\">:=</span> node<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><br/>\t\tnode<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> x<span class=\"sy3\">*</span>cosX <span class=\"sy3\">-</span> z<span class=\"sy3\">*</span>sinX<br/>\t\tnode<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> z<span class=\"sy3\">*</span>cosX <span class=\"sy3\">+</span> x<span class=\"sy3\">*</span>sinX<br/>\t\tz <span class=\"sy2\">=</span> node<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span><br/>\t\tnode<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> y<span class=\"sy3\">*</span>cosY <span class=\"sy3\">-</span> z<span class=\"sy3\">*</span>sinY<br/>\t\tnode<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> z<span class=\"sy3\">*</span>cosY <span class=\"sy3\">+</span> y<span class=\"sy3\">*</span>sinY<br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> drawLine<span class=\"sy1\">(</span>x0<span class=\"sy1\">,</span> y0<span class=\"sy1\">,</span> x1<span class=\"sy1\">,</span> y1 <span class=\"kw4\">int</span><span class=\"sy1\">,</span> img <span class=\"sy3\">*</span><a href=\"http://golang.org/search?q=image.Paletted\"><span class=\"kw5\">image.<span class=\"me1\">Paletted</span></span></a><span class=\"sy1\">,</span> col color<span class=\"sy3\">.</span>RGBA<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\tdx <span class=\"sy2\">:=</span> abs<span class=\"sy1\">(</span>x1 <span class=\"sy3\">-</span> x0<span class=\"sy1\">)</span><br/>\tdy <span class=\"sy2\">:=</span> abs<span class=\"sy1\">(</span>y1 <span class=\"sy3\">-</span> y0<span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">var</span> sx<span class=\"sy1\">,</span> sy <span class=\"kw4\">int</span> <span class=\"sy2\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">if</span> x0 &lt; x1 <span class=\"sy1\">{</span><br/>\t\tsx <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">if</span> y0 &lt; y1 <span class=\"sy1\">{</span><br/>\t\tsy <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"sy1\">}</span><br/>\terr <span class=\"sy2\">:=</span> dx <span class=\"sy3\">-</span> dy<br/>\t<span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>\t\timg<span class=\"sy3\">.</span>Set<span class=\"sy1\">(</span>x0<span class=\"sy1\">,</span> y0<span class=\"sy1\">,</span> col<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">if</span> x0 <span class=\"sy3\">==</span> x1 &amp;&amp; y0 <span class=\"sy3\">==</span> y1 <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">break</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t\te2 <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span> <span class=\"sy3\">*</span> err<br/>\t\t<span class=\"kw1\">if</span> e2 &gt; <span class=\"sy3\">-</span>dy <span class=\"sy1\">{</span><br/>\t\t\terr <span class=\"sy2\">-=</span> dy<br/>\t\t\tx0 <span class=\"sy2\">+=</span> sx<br/>\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"kw1\">if</span> e2 &lt; dx <span class=\"sy1\">{</span><br/>\t\t\terr <span class=\"sy2\">+=</span> dx<br/>\t\t\ty0 <span class=\"sy2\">+=</span> sy<br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> abs<span class=\"sy1\">(</span>x <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> x &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"sy3\">-</span>x<br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> x<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 180, "block": "<pre class=\"haskell highlighted_source\"><span class=\"coMULTI\">{-# LANGUAGE RecursiveDo #-}</span> <br/><span class=\"kw1\">import</span> Reflex<span class=\"sy0\">.</span>Dom <br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Map <span class=\"kw1\">as</span> DM <span class=\"br0\">(</span>Map<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lookup\"><span class=\"kw3\">lookup</span></a><span class=\"sy0\">,</span> insert<span class=\"sy0\">,</span> empty<span class=\"sy0\">,</span> fromList<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Matrix <br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Time<span class=\"sy0\">.</span>Clock <br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><span class=\"sy0\">.</span>Trans <br/>\u00a0<br/>size <span class=\"sy0\">=</span> <span class=\"nu0\">500</span><br/>updateFrequency <span class=\"sy0\">=</span> <span class=\"nu0\">0.2</span><br/>rotationStep <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a><span class=\"sy0\">/</span><span class=\"nu0\">10</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Color <span class=\"sy0\">=</span> Red <span class=\"sy0\">|</span> Green <span class=\"sy0\">|</span> Blue <span class=\"sy0\">|</span> Yellow <span class=\"sy0\">|</span> Orange <span class=\"sy0\">|</span> Purple <span class=\"sy0\">|</span> Black <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Enum\"><span class=\"kw4\">Enum</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>zRot <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><br/>zRot rotation <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">let</span> c <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:cos\"><span class=\"kw3\">cos</span></a> rotation<br/>        s <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sin\"><span class=\"kw3\">sin</span></a> rotation<br/>    <span class=\"kw1\">in</span> fromLists <span class=\"br0\">[</span><span class=\"br0\">[</span> c<span class=\"sy0\">,</span>  s<span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>                 <span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"sy0\">-</span>s<span class=\"sy0\">,</span>  c<span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>                 <span class=\"sy0\">,</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>                 <span class=\"sy0\">,</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span> <span class=\"br0\">]</span><br/>                 <span class=\"br0\">]</span><br/>\u00a0<br/>xRot <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><br/>xRot rotation <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">let</span> c <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:cos\"><span class=\"kw3\">cos</span></a> rotation<br/>        s <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sin\"><span class=\"kw3\">sin</span></a> rotation<br/>    <span class=\"kw1\">in</span> fromLists <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>                 <span class=\"sy0\">,</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  c<span class=\"sy0\">,</span>  s<span class=\"sy0\">,</span>  <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>                 <span class=\"sy0\">,</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>s<span class=\"sy0\">,</span>  c<span class=\"sy0\">,</span>  <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>                 <span class=\"sy0\">,</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span> <span class=\"br0\">]</span><br/>                 <span class=\"br0\">]</span><br/>\u00a0<br/>yRot <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><br/>yRot rotation <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">let</span> c <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:cos\"><span class=\"kw3\">cos</span></a> rotation<br/>        s <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sin\"><span class=\"kw3\">sin</span></a> rotation<br/>    <span class=\"kw1\">in</span> fromLists <span class=\"br0\">[</span><span class=\"br0\">[</span> c<span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span>s<span class=\"sy0\">,</span>  <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>                 <span class=\"sy0\">,</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>                 <span class=\"sy0\">,</span><span class=\"br0\">[</span> s<span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  c<span class=\"sy0\">,</span>  <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>                 <span class=\"sy0\">,</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span> <span class=\"br0\">]</span><br/>                 <span class=\"br0\">]</span><br/>\u00a0<br/>translation <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><br/>translation <span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>z<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    fromLists  <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>               <span class=\"sy0\">,</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>               <span class=\"sy0\">,</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>               <span class=\"sy0\">,</span><span class=\"br0\">[</span> x<span class=\"sy0\">,</span>  y<span class=\"sy0\">,</span>  z<span class=\"sy0\">,</span>  <span class=\"nu0\">1</span> <span class=\"br0\">]</span><br/>               <span class=\"br0\">]</span><br/>\u00a0<br/>scale <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><br/>scale s <span class=\"sy0\">=</span><br/>    fromLists  <span class=\"br0\">[</span><span class=\"br0\">[</span> s<span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>               <span class=\"sy0\">,</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  s<span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>               <span class=\"sy0\">,</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  s<span class=\"sy0\">,</span>  <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>               <span class=\"sy0\">,</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span> <span class=\"br0\">]</span><br/>               <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- perspective transformation; </span><br/>perspective <span class=\"sy0\">::</span> Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><br/>perspective <span class=\"sy0\">=</span> <br/>    fromLists  <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>               <span class=\"sy0\">,</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span> <span class=\"br0\">]</span><br/>               <span class=\"sy0\">,</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span> <span class=\"br0\">]</span><br/>               <span class=\"sy0\">,</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>\u00a0<br/>transformPoints <span class=\"sy0\">::</span> Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"sy0\">,</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>transformPoints transform points <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">let</span> result4d <span class=\"sy0\">=</span> points `multStd2` transform<br/>        result2d <span class=\"sy0\">=</span> <span class=\"br0\">(</span>\\<span class=\"br0\">[</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>z<span class=\"sy0\">,</span>w<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>x<span class=\"sy0\">/</span>w<span class=\"sy0\">,</span>y<span class=\"sy0\">/</span>w<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> toLists result4d<br/>    <span class=\"kw1\">in</span> result2d<br/>\u00a0<br/>showRectangle <span class=\"sy0\">::</span> MonadWidget t m <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> Color <span class=\"sy0\">-&gt;</span> Dynamic t <span class=\"br0\">(</span>Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> m <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>showRectangle x0 y0 x1 y1 faceColor dFaceView <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> points <span class=\"sy0\">=</span> fromLists <span class=\"br0\">[</span><span class=\"br0\">[</span>x0<span class=\"sy0\">,</span>y0<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>x0<span class=\"sy0\">,</span>y1<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>x1<span class=\"sy0\">,</span>y1<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span>x1<span class=\"sy0\">,</span>y0<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        pointsToString <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> x <span class=\"sy0\">++</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> y <span class=\"sy0\">++</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <br/>    dAttrs <span class=\"sy0\">&lt;-</span> mapDyn <span class=\"br0\">(</span>\\fvk <span class=\"sy0\">-&gt;</span> DM<span class=\"sy0\">.</span>fromList <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"st0\">\"fill\"</span><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> faceColor<span class=\"br0\">)</span><br/>                                          <span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"st0\">\"points\"</span><span class=\"sy0\">,</span> pointsToString <span class=\"br0\">(</span>transformPoints fvk points<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                          <span class=\"br0\">]</span> <span class=\"br0\">)</span> dFaceView<br/>    elDynAttrSVG <span class=\"st0\">\"polygon\"</span> dAttrs <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>showUnitSquare <span class=\"sy0\">::</span> MonadWidget t m <span class=\"sy0\">=&gt;</span> Color <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> Dynamic t <span class=\"br0\">(</span>Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> m <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>showUnitSquare faceColor margin dFaceView <span class=\"sy0\">=</span> <br/>    showRectangle margin margin <span class=\"br0\">(</span><span class=\"nu0\">1.0</span> <span class=\"sy0\">-</span> margin<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1.0</span> <span class=\"sy0\">-</span> margin<span class=\"br0\">)</span> faceColor dFaceView<br/>\u00a0<br/><span class=\"co1\">-- show colored square on top of black square for outline effect</span><br/>showFace <span class=\"sy0\">::</span> MonadWidget t m <span class=\"sy0\">=&gt;</span> Color <span class=\"sy0\">-&gt;</span> Dynamic t <span class=\"br0\">(</span>Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> m <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>showFace faceColor dFaceView <span class=\"sy0\">=</span> <span class=\"kw1\">do</span>  <br/>    showUnitSquare Black <span class=\"nu0\">0</span> dFaceView<br/>    showUnitSquare faceColor <span class=\"nu0\">0.03</span> dFaceView<br/>\u00a0<br/>facingCamera <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>facingCamera viewPoint modelTransform <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> cross <span class=\"br0\">[</span>x0<span class=\"sy0\">,</span>y0<span class=\"sy0\">,</span>z0<span class=\"br0\">]</span> <span class=\"br0\">[</span>x1<span class=\"sy0\">,</span>y1<span class=\"sy0\">,</span>z1<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>y0<span class=\"sy0\">*</span>z1<span class=\"sy0\">-</span>z0<span class=\"sy0\">*</span>y1<span class=\"sy0\">,</span> z0<span class=\"sy0\">*</span>x1<span class=\"sy0\">-</span>x0<span class=\"sy0\">*</span>z1<span class=\"sy0\">,</span> x0<span class=\"sy0\">*</span>y1<span class=\"sy0\">-</span>y0<span class=\"sy0\">*</span>x1 <span class=\"br0\">]</span> <br/>        dot v0 v1 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum\"><span class=\"kw3\">sum</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> v0 v1<br/>        vMinus <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"br0\">)</span> <br/>\u00a0<br/>        untransformedPoints <span class=\"sy0\">=</span> fromLists <span class=\"br0\">[</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>   <span class=\"co1\">-- lower left </span><br/>                                        <span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>   <span class=\"co1\">-- lower right </span><br/>                                        <span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span> <span class=\"co1\">-- upper left </span><br/>\u00a0<br/>        transformedPoints <span class=\"sy0\">=</span> toLists <span class=\"sy0\">$</span> untransformedPoints `multStd2` modelTransform<br/>        pt00 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">3</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> transformedPoints         <span class=\"co1\">-- transformed lower left</span><br/>        pt10 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">3</span> <span class=\"sy0\">$</span> transformedPoints <span class=\"sy0\">!!</span> <span class=\"nu0\">1</span>         <span class=\"co1\">-- transformed upper right</span><br/>        pt01 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">3</span> <span class=\"sy0\">$</span> transformedPoints <span class=\"sy0\">!!</span> <span class=\"nu0\">2</span>         <span class=\"co1\">-- transformed upper left</span><br/>\u00a0<br/>        tVec<span class=\"sy0\">_</span>10<span class=\"sy0\">_</span>00 <span class=\"sy0\">=</span> pt10 `vMinus` pt00                <span class=\"co1\">-- lower right to lower left</span><br/>        tVec<span class=\"sy0\">_</span>01<span class=\"sy0\">_</span>00 <span class=\"sy0\">=</span> pt01 `vMinus` pt00                <span class=\"co1\">-- upper left to lower left</span><br/>        perpendicular <span class=\"sy0\">=</span> tVec<span class=\"sy0\">_</span>10<span class=\"sy0\">_</span>00 `cross` tVec<span class=\"sy0\">_</span>01<span class=\"sy0\">_</span>00  <span class=\"co1\">-- perpendicular to face</span><br/>        cameraToPlane <span class=\"sy0\">=</span> pt00 `vMinus` viewPoint        <span class=\"co1\">-- line of sight to face</span><br/>\u00a0<br/>        <span class=\"co1\">-- Perpendicular points away from surface;</span><br/>        <span class=\"co1\">-- Camera vector points towards surface</span><br/>        <span class=\"co1\">-- Opposed vectors means that face will be visible.</span><br/>    <span class=\"kw1\">in</span> cameraToPlane `dot` perpendicular <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>faceView <span class=\"sy0\">::</span> Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><span class=\"sy0\">,</span> Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span><br/>faceView modelOrientation faceOrientation <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">let</span> modelTransform <span class=\"sy0\">=</span>            translation <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\">-- unit square to origin + z offset</span><br/>                         `multStd2` faceOrientation             <span class=\"co1\">-- orientation specific to each face</span><br/>                         `multStd2` scale <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>                 <span class=\"co1\">-- shrink cube to fit in view.</span><br/>                         `multStd2` modelOrientation            <span class=\"co1\">-- position the entire cube</span><br/>\u00a0<br/>\u00a0<br/>        isFacingCamera <span class=\"sy0\">=</span> facingCamera <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> modelTransform   <span class=\"co1\">-- backface elimination</span><br/>\u00a0<br/>        <span class=\"co1\">-- combine to get single transform from 2d face to 2d display</span><br/>        viewTransform <span class=\"sy0\">=</span>            modelTransform<br/>                        `multStd2` perspective<br/>                        `multStd2` scale size                       <span class=\"co1\">-- scale up to svg box scale</span><br/>                        `multStd2` translation <span class=\"br0\">(</span>size<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> size<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>  <span class=\"co1\">-- move to center of svg box</span><br/>\u00a0<br/>    <span class=\"kw1\">in</span> <span class=\"br0\">(</span>isFacingCamera<span class=\"sy0\">,</span> viewTransform<span class=\"br0\">)</span><br/>\u00a0<br/>updateFaceViews <span class=\"sy0\">::</span> Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> Map Color <span class=\"br0\">(</span>Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>Color<span class=\"sy0\">,</span> Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Map Color <span class=\"br0\">(</span>Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span><br/>updateFaceViews modelOrientation prevCollection <span class=\"br0\">(</span>faceColor<span class=\"sy0\">,</span> faceOrientation<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>    <span class=\"kw1\">let</span> <span class=\"br0\">(</span>isVisible<span class=\"sy0\">,</span> newFaceView<span class=\"br0\">)</span> <span class=\"sy0\">=</span> faceView modelOrientation faceOrientation<br/>    <span class=\"kw1\">in</span>  <span class=\"kw1\">if</span> isVisible <br/>        <span class=\"kw1\">then</span> insert faceColor newFaceView prevCollection<br/>        <span class=\"kw1\">else</span> prevCollection<br/>\u00a0<br/>faceViews <span class=\"sy0\">::</span> Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> Map Color <span class=\"br0\">(</span>Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span><br/>faceViews modelOrientation  <span class=\"sy0\">=</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a> <span class=\"br0\">(</span>updateFaceViews modelOrientation<span class=\"br0\">)</span> empty <br/>          <span class=\"br0\">[</span> <span class=\"br0\">(</span>Purple <span class=\"sy0\">,</span> xRot <span class=\"br0\">(</span><span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>  <br/>          <span class=\"sy0\">,</span> <span class=\"br0\">(</span>Yellow <span class=\"sy0\">,</span> xRot <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>  <br/>          <span class=\"sy0\">,</span> <span class=\"br0\">(</span>Red    <span class=\"sy0\">,</span> yRot <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>  <br/>          <span class=\"sy0\">,</span> <span class=\"br0\">(</span>Green  <span class=\"sy0\">,</span> xRot <span class=\"br0\">(</span><span class=\"sy0\">-</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>  <br/>          <span class=\"sy0\">,</span> <span class=\"br0\">(</span>Blue   <span class=\"sy0\">,</span> yRot <span class=\"br0\">(</span><span class=\"sy0\">-</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>  <br/>          <span class=\"sy0\">,</span> <span class=\"br0\">(</span>Orange <span class=\"sy0\">,</span> xRot <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>          <span class=\"br0\">]</span><br/>\u00a0<br/>viewModel <span class=\"sy0\">::</span> MonadWidget t m <span class=\"sy0\">=&gt;</span> Dynamic t <span class=\"br0\">(</span>Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> m <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>viewModel modelOrientation <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    faceMap <span class=\"sy0\">&lt;-</span> mapDyn faceViews modelOrientation<br/>    listWithKey faceMap showFace<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>view <span class=\"sy0\">::</span> MonadWidget t m <span class=\"sy0\">=&gt;</span> Dynamic t <span class=\"br0\">(</span>Matrix <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> m <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>view modelOrientation <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    el <span class=\"st0\">\"h1\"</span> <span class=\"sy0\">$</span> text <span class=\"st0\">\"Rotating Cube\"</span><br/>    elDynAttrSVG <span class=\"st0\">\"svg\"</span> <br/>        <span class=\"br0\">(</span>constDyn <span class=\"sy0\">$</span>  DM<span class=\"sy0\">.</span>fromList <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"st0\">\"width\"</span><span class=\"sy0\">,</span>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> size<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"st0\">\"height\"</span><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> size<span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"br0\">)</span> <br/>        <span class=\"sy0\">$</span> viewModel modelOrientation<br/>\u00a0<br/>main <span class=\"sy0\">=</span> mainWidget <span class=\"sy0\">$</span> <span class=\"kw1\">do</span> <br/>    <span class=\"kw1\">let</span> initialOrientation <span class=\"sy0\">=</span> xRot <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a><span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> `multStd2` zRot <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:atan\"><span class=\"kw3\">atan</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        update <span class=\"sy0\">_</span> modelOrientation <span class=\"sy0\">=</span> modelOrientation `multStd2` <span class=\"br0\">(</span>yRot <span class=\"br0\">(</span>rotationStep<span class=\"br0\">)</span> <span class=\"br0\">)</span> <br/>\u00a0<br/>    tick <span class=\"sy0\">&lt;-</span> tickLossy  updateFrequency <span class=\"sy0\">=&lt;&lt;</span> liftIO getCurrentTime<br/>    rec<br/>        view modelOrientation<br/>        modelOrientation <span class=\"sy0\">&lt;-</span> foldDyn update initialOrientation tick<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- At end because of Rosetta Code handling of unmatched quotes.</span><br/>elDynAttrSVG a2 a3 a4 <span class=\"sy0\">=</span> <span class=\"kw1\">do</span> <br/>    elDynAttrNS<span class=\"st0\">' (Just \"http://www.w3.org/2000/svg\") a2 a3 a4<br/>    return ()</span></pre>"}, {"lang": "Java", "loc": 92, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.awt.event.ActionEvent</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">lang</span>.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"sy0\">*;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">javax.swing.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> RotatingCube <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajpanel+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JPanel</span></a> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> nodes <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> edges <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">2</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">5</span>, <span class=\"nu0\">7</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">7</span>, <span class=\"nu0\">6</span><span class=\"br0\">}</span>,<br/>    <span class=\"br0\">{</span><span class=\"nu0\">6</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">4</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"nu0\">5</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"nu0\">6</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> RotatingCube<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        setPreferredSize<span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Adimension+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Dimension</span></a><span class=\"br0\">(</span><span class=\"nu0\">640</span>, <span class=\"nu0\">640</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        setBackground<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acolor+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Color</span></a>.<span class=\"me1\">white</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        scale<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        rotateCube<span class=\"br0\">(</span>PI <span class=\"sy0\">/</span> <span class=\"nu0\">4</span>, atan<span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Atimer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Timer</span></a><span class=\"br0\">(</span><span class=\"nu0\">17</span>, <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aactionevent+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">ActionEvent</span></a> e<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>            rotateCube<span class=\"br0\">(</span>PI <span class=\"sy0\">/</span> <span class=\"nu0\">180</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">void</span> scale<span class=\"br0\">(</span><span class=\"kw4\">double</span> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> node <span class=\"sy0\">:</span> nodes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            node<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*=</span> s<span class=\"sy0\">;</span><br/>            node<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*=</span> s<span class=\"sy0\">;</span><br/>            node<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">*=</span> s<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">final</span> <span class=\"kw4\">void</span> rotateCube<span class=\"br0\">(</span><span class=\"kw4\">double</span> angleX, <span class=\"kw4\">double</span> angleY<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> sinX <span class=\"sy0\">=</span> sin<span class=\"br0\">(</span>angleX<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> cosX <span class=\"sy0\">=</span> cos<span class=\"br0\">(</span>angleX<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">double</span> sinY <span class=\"sy0\">=</span> sin<span class=\"br0\">(</span>angleY<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> cosY <span class=\"sy0\">=</span> cos<span class=\"br0\">(</span>angleY<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> node <span class=\"sy0\">:</span> nodes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> x <span class=\"sy0\">=</span> node<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> y <span class=\"sy0\">=</span> node<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span> z <span class=\"sy0\">=</span> node<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            node<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> cosX <span class=\"sy0\">-</span> z <span class=\"sy0\">*</span> sinX<span class=\"sy0\">;</span><br/>            node<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> z <span class=\"sy0\">*</span> cosX <span class=\"sy0\">+</span> x <span class=\"sy0\">*</span> sinX<span class=\"sy0\">;</span><br/>\u00a0<br/>            z <span class=\"sy0\">=</span> node<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            node<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> y <span class=\"sy0\">*</span> cosY <span class=\"sy0\">-</span> z <span class=\"sy0\">*</span> sinY<span class=\"sy0\">;</span><br/>            node<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> z <span class=\"sy0\">*</span> cosY <span class=\"sy0\">+</span> y <span class=\"sy0\">*</span> sinY<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> drawCube<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g.<span class=\"me1\">translate</span><span class=\"br0\">(</span>getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span>, getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> edge <span class=\"sy0\">:</span> edges<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> xy1 <span class=\"sy0\">=</span> nodes<span class=\"br0\">[</span>edge<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> xy2 <span class=\"sy0\">=</span> nodes<span class=\"br0\">[</span>edge<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">drawLine</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> round<span class=\"br0\">(</span>xy1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> round<span class=\"br0\">(</span>xy1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>,<br/>                    <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> round<span class=\"br0\">(</span>xy2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> round<span class=\"br0\">(</span>xy2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> node <span class=\"sy0\">:</span> nodes<span class=\"br0\">)</span> <br/>            g.<span class=\"me1\">fillOval</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> round<span class=\"br0\">(</span>node<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">4</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> round<span class=\"br0\">(</span>node<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">4</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>        <br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    @Override<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> paintComponent<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics</span></a> gg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">super</span>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a> g <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Agraphics2d+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Graphics2D</span></a><span class=\"br0\">)</span> gg<span class=\"sy0\">;</span><br/>        g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arenderinghints+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RenderingHints</span></a>.<span class=\"me1\">KEY_ANTIALIASING</span>,<br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arenderinghints+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">RenderingHints</span></a>.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        drawCube<span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aswingutilities+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">SwingUtilities</span></a>.<span class=\"me1\">invokeLater</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a> f <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setDefaultCloseOperation</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ajframe+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">JFrame</span></a>.<span class=\"me1\">EXIT_ON_CLOSE</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setTitle</span><span class=\"br0\">(</span><span class=\"st0\">\"Rotating Cube\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setResizable</span><span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> RotatingCube<span class=\"br0\">(</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aborderlayout+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BorderLayout</span></a>.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">pack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setLocationRelativeTo</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            f.<span class=\"me1\">setVisible</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 89, "block": "<pre class=\"javascript highlighted_source\"><span class=\"sy0\">&lt;!</span>DOCTYPE html<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>html lang<span class=\"sy0\">=</span><span class=\"st0\">\"en\"</span><span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>head<span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>meta charset<span class=\"sy0\">=</span><span class=\"st0\">\"UTF-8\"</span><span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>style<span class=\"sy0\">&gt;</span><br/>        canvas <span class=\"br0\">{</span><br/>            background<span class=\"sy0\">-</span>color<span class=\"sy0\">:</span> black<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"sy0\">&lt;/</span>style<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;/</span>head<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;</span>body<span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>canvas<span class=\"sy0\">&gt;&lt;/</span>canvas<span class=\"sy0\">&gt;</span><br/>    <span class=\"sy0\">&lt;</span>script<span class=\"sy0\">&gt;</span><br/>        <span class=\"kw1\">var</span> canvas <span class=\"sy0\">=</span> document.<span class=\"me1\">querySelector</span><span class=\"br0\">(</span><span class=\"st0\">\"canvas\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        canvas.<span class=\"me1\">width</span> <span class=\"sy0\">=</span> window.<span class=\"me1\">innerWidth</span><span class=\"sy0\">;</span><br/>        canvas.<span class=\"me1\">height</span> <span class=\"sy0\">=</span> window.<span class=\"me1\">innerHeight</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> g <span class=\"sy0\">=</span> canvas.<span class=\"me1\">getContext</span><span class=\"br0\">(</span><span class=\"st0\">\"2d\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> nodes <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> edges <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">function</span> scale<span class=\"br0\">(</span>factor0<span class=\"sy0\">,</span> factor1<span class=\"sy0\">,</span> factor2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            nodes.<span class=\"me1\">forEach</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>node<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                node<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*=</span> factor0<span class=\"sy0\">;</span><br/>                node<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*=</span> factor1<span class=\"sy0\">;</span><br/>                node<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">*=</span> factor2<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">function</span> rotateCuboid<span class=\"br0\">(</span>angleX<span class=\"sy0\">,</span> angleY<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> sinX <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>angleX<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> cosX <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>angleX<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> sinY <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>angleY<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> cosY <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>angleY<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            nodes.<span class=\"me1\">forEach</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>node<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> x <span class=\"sy0\">=</span> node<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">var</span> y <span class=\"sy0\">=</span> node<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">var</span> z <span class=\"sy0\">=</span> node<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                node<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> cosX <span class=\"sy0\">-</span> z <span class=\"sy0\">*</span> sinX<span class=\"sy0\">;</span><br/>                node<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> z <span class=\"sy0\">*</span> cosX <span class=\"sy0\">+</span> x <span class=\"sy0\">*</span> sinX<span class=\"sy0\">;</span><br/>\u00a0<br/>                z <span class=\"sy0\">=</span> node<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                node<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> y <span class=\"sy0\">*</span> cosY <span class=\"sy0\">-</span> z <span class=\"sy0\">*</span> sinY<span class=\"sy0\">;</span><br/>                node<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> z <span class=\"sy0\">*</span> cosY <span class=\"sy0\">+</span> y <span class=\"sy0\">*</span> sinY<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">function</span> drawCuboid<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            g.<span class=\"me1\">save</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            g.<span class=\"me1\">clearRect</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> canvas.<span class=\"me1\">width</span><span class=\"sy0\">,</span> canvas.<span class=\"me1\">height</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">translate</span><span class=\"br0\">(</span>canvas.<span class=\"me1\">width</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> canvas.<span class=\"me1\">height</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">strokeStyle</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"#FFFFFF\"</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">beginPath</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            edges.<span class=\"me1\">forEach</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>edge<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> p1 <span class=\"sy0\">=</span> nodes<span class=\"br0\">[</span>edge<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">var</span> p2 <span class=\"sy0\">=</span> nodes<span class=\"br0\">[</span>edge<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                g.<span class=\"me1\">moveTo</span><span class=\"br0\">(</span>p1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> p1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                g.<span class=\"me1\">lineTo</span><span class=\"br0\">(</span>p2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> p2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            g.<span class=\"me1\">closePath</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            g.<span class=\"me1\">stroke</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            g.<span class=\"me1\">restore</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        scale<span class=\"br0\">(</span><span class=\"nu0\">200</span><span class=\"sy0\">,</span> <span class=\"nu0\">200</span><span class=\"sy0\">,</span> <span class=\"nu0\">200</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        rotateCuboid<span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">PI</span> <span class=\"sy0\">/</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">atan</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        setInterval<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            rotateCuboid<span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">PI</span> <span class=\"sy0\">/</span> <span class=\"nu0\">180</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            drawCuboid<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">17</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"sy0\">&lt;/</span>script<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"sy0\">&lt;/</span>body<span class=\"sy0\">&gt;</span><br/><span class=\"sy0\">&lt;/</span>html<span class=\"sy0\">&gt;</span></pre>"}, {"lang": "Kotlin", "loc": 101, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">awt</span>.<span class=\"sy0\">*</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">swing</span>.<span class=\"sy0\">*</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> RotatingCube <span class=\"sy0\">:</span> JPanel<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nodes <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        doubleArrayOf<span class=\"br0\">(</span>-<span class=\"nu0\">1.0</span>, -<span class=\"nu0\">1.0</span>, -<span class=\"nu0\">1.0</span><span class=\"br0\">)</span>,<br/>        doubleArrayOf<span class=\"br0\">(</span>-<span class=\"nu0\">1.0</span>, -<span class=\"nu0\">1.0</span>,  <span class=\"nu0\">1.0</span><span class=\"br0\">)</span>,<br/>        doubleArrayOf<span class=\"br0\">(</span>-<span class=\"nu0\">1.0</span>,  <span class=\"nu0\">1.0</span>, -<span class=\"nu0\">1.0</span><span class=\"br0\">)</span>,<br/>        doubleArrayOf<span class=\"br0\">(</span>-<span class=\"nu0\">1.0</span>,  <span class=\"nu0\">1.0</span>,  <span class=\"nu0\">1.0</span><span class=\"br0\">)</span>,<br/>        doubleArrayOf<span class=\"br0\">(</span> <span class=\"nu0\">1.0</span>, -<span class=\"nu0\">1.0</span>, -<span class=\"nu0\">1.0</span><span class=\"br0\">)</span>,<br/>        doubleArrayOf<span class=\"br0\">(</span> <span class=\"nu0\">1.0</span>, -<span class=\"nu0\">1.0</span>,  <span class=\"nu0\">1.0</span><span class=\"br0\">)</span>,<br/>        doubleArrayOf<span class=\"br0\">(</span> <span class=\"nu0\">1.0</span>,  <span class=\"nu0\">1.0</span>, -<span class=\"nu0\">1.0</span><span class=\"br0\">)</span>,<br/>        doubleArrayOf<span class=\"br0\">(</span> <span class=\"nu0\">1.0</span>,  <span class=\"nu0\">1.0</span>,  <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> edges <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span>,<br/>        intArrayOf<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>\u00a0<br/>    init <span class=\"br0\">{</span><br/>        preferredSize <span class=\"sy0\">=</span> Dimension<span class=\"br0\">(</span><span class=\"nu0\">640</span>, <span class=\"nu0\">640</span><span class=\"br0\">)</span><br/>        background <span class=\"sy0\">=</span> Color.<span class=\"me1\">white</span><br/>        scale<span class=\"br0\">(</span><span class=\"nu0\">100.0</span><span class=\"br0\">)</span><br/>        rotateCube<span class=\"br0\">(</span>Math.<span class=\"me1\">PI</span> / <span class=\"nu0\">4.0</span>, Math.<span class=\"me1\">atan</span><span class=\"br0\">(</span>Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        Timer<span class=\"br0\">(</span><span class=\"nu0\">17</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            rotateCube<span class=\"br0\">(</span>Math.<span class=\"me1\">PI</span> / <span class=\"nu0\">180.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>            repaint<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun scale<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>node in nodes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            node<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*=</span> s<br/>            node<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">*=</span> s<br/>            node<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">*=</span> s<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun rotateCube<span class=\"br0\">(</span>angleX<span class=\"sy0\">:</span> Double, angleY<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sinX <span class=\"sy0\">=</span> Math.<span class=\"me1\">sin</span><span class=\"br0\">(</span>angleX<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cosX <span class=\"sy0\">=</span> Math.<span class=\"me1\">cos</span><span class=\"br0\">(</span>angleX<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sinY <span class=\"sy0\">=</span> Math.<span class=\"me1\">sin</span><span class=\"br0\">(</span>angleY<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cosY <span class=\"sy0\">=</span> Math.<span class=\"me1\">cos</span><span class=\"br0\">(</span>angleY<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>node in nodes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> node<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y <span class=\"sy0\">=</span> node<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> z <span class=\"sy0\">=</span> node<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>            node<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> cosX - z <span class=\"sy0\">*</span> sinX<br/>            node<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> z <span class=\"sy0\">*</span> cosX + x <span class=\"sy0\">*</span> sinX<br/>            z <span class=\"sy0\">=</span> node<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>            node<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> y <span class=\"sy0\">*</span> cosY - z <span class=\"sy0\">*</span> sinY<br/>            node<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> z <span class=\"sy0\">*</span> cosY + y <span class=\"sy0\">*</span> sinY<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> fun drawCube<span class=\"br0\">(</span>g<span class=\"sy0\">:</span> Graphics2D<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        g.<span class=\"me1\">translate</span><span class=\"br0\">(</span>width / <span class=\"nu0\">2</span>, height / <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>edge in edges<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> xy1 <span class=\"sy0\">=</span> nodes<span class=\"br0\">[</span>edge<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> xy2 <span class=\"sy0\">=</span> nodes<span class=\"br0\">[</span>edge<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>            g.<span class=\"me1\">drawLine</span><span class=\"br0\">(</span>Math.<span class=\"me1\">round</span><span class=\"br0\">(</span>xy1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, Math.<span class=\"me1\">round</span><span class=\"br0\">(</span>xy1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>                       Math.<span class=\"me1\">round</span><span class=\"br0\">(</span>xy2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, Math.<span class=\"me1\">round</span><span class=\"br0\">(</span>xy2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>node in nodes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            g.<span class=\"me1\">fillOval</span><span class=\"br0\">(</span>Math.<span class=\"me1\">round</span><span class=\"br0\">(</span>node<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">4</span>, Math.<span class=\"me1\">round</span><span class=\"br0\">(</span>node<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">4</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> public fun paintComponent<span class=\"br0\">(</span>gg<span class=\"sy0\">:</span> Graphics<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">super</span></a>.<span class=\"me1\">paintComponent</span><span class=\"br0\">(</span>gg<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> g <span class=\"sy0\">=</span> gg as Graphics2D<br/>        g.<span class=\"me1\">setRenderingHint</span><span class=\"br0\">(</span>RenderingHints.<span class=\"me1\">KEY_ANTIALIASING</span>, RenderingHints.<span class=\"me1\">VALUE_ANTIALIAS_ON</span><span class=\"br0\">)</span><br/>        g.<span class=\"me1\">color</span> <span class=\"sy0\">=</span> Color.<span class=\"me1\">blue</span><br/>        drawCube<span class=\"br0\">(</span>g<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    SwingUtilities.<span class=\"me1\">invokeLater</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f <span class=\"sy0\">=</span> JFrame<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        f.<span class=\"me1\">defaultCloseOperation</span> <span class=\"sy0\">=</span> JFrame.<span class=\"me1\">EXIT_ON_CLOSE</span><br/>        f.<span class=\"me1\">title</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Rotating cube\"</span><br/>        f.<span class=\"me1\">isResizable</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>        f.<span class=\"me1\">add</span><span class=\"br0\">(</span>RotatingCube<span class=\"br0\">(</span><span class=\"br0\">)</span>, BorderLayout.<span class=\"me1\">CENTER</span><span class=\"br0\">)</span><br/>        f.<span class=\"me1\">pack</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        f.<span class=\"me1\">setLocationRelativeTo</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>        f.<span class=\"me1\">isVisible</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Maple", "loc": 7, "block": "<pre class=\"text highlighted_source\">plots:-display( <br/>    seq( <br/>        plots:-display( <br/>            plottools[cuboid]( [0,0,0], [1,1,1] ), <br/>        axes=none, scaling=constrained, orientation=[0,45,i] ), <br/>    i = 0..360, 20 ), <br/>insequence=true );</pre>"}, {"lang": "Mathematica", "loc": 7, "block": "<pre class=\"text highlighted_source\">Dynamic[<br/>    Graphics3D[<br/>      GeometricTransformation[<br/>       GeometricTransformation[Cuboid[], RotationTransform[Pi/4, {1, 1, 0}]], <br/>       RotationTransform[Clock[2 Pi], {0, 0, 1}]<br/>      ], <br/>      Boxed -&gt; Falase]]</pre>"}, {"lang": "Perl 6", "loc": 94, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> lib <span class=\"st_h\">'lib'</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Terminal<span class=\"sy0\">::</span><span class=\"me2\">Caca</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">given</span> <span class=\"kw1\">my</span> <span class=\"re0\">$canvas</span> <span class=\"sy0\">=</span> Terminal<span class=\"sy0\">::</span><span class=\"me2\">Caca</span><span class=\"sy0\">.</span><span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>    <span class=\"sy0\">.</span><span class=\"me1\">title</span><span class=\"br0\">(</span><span class=\"st_h\">'Rosetta Code - Rotating cube - Press any key to exit'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> scale<span class=\"sy0\">-</span>and<span class=\"sy0\">-</span>translate<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span> <span class=\"nu0\">5</span> <span class=\"sy0\">+</span> <span class=\"re0\">$z</span> <span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">15</span> <span class=\"sy0\">+</span> <span class=\"nu0\">40</span><span class=\"sy0\">,</span><br/>        <span class=\"re0\">$y</span> <span class=\"sy0\">*</span> <span class=\"nu0\">5</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span> <span class=\"nu0\">5</span> <span class=\"sy0\">+</span> <span class=\"re0\">$z</span> <span class=\"br0\">)</span> <span class=\"sy0\">*</span>  <span class=\"nu0\">7</span> <span class=\"sy0\">+</span> <span class=\"nu0\">15</span><span class=\"sy0\">,</span><br/>        <span class=\"re0\">$z</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> rotate3d<span class=\"sy0\">-</span><span class=\"kw1\">x</span><span class=\"br0\">(</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"sy0\">,</span> <span class=\"re0\">$angle</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$cos</span>\u03b8<span class=\"sy0\">,</span> <span class=\"re0\">$sin</span>\u03b8<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">cis</span><span class=\"br0\">(</span> <span class=\"re0\">$angle</span> <span class=\"sy0\">*</span> \u03c0 <span class=\"sy0\">/</span> <span class=\"nu0\">180.0</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">reals</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$x</span><span class=\"sy0\">,</span><br/>        <span class=\"re0\">$y</span> <span class=\"sy0\">*</span> <span class=\"re0\">$cos</span>\u03b8 <span class=\"sy0\">-</span> <span class=\"re0\">$z</span> <span class=\"sy0\">*</span> <span class=\"re0\">$sin</span>\u03b8<span class=\"sy0\">,</span><br/>        <span class=\"re0\">$y</span> <span class=\"sy0\">*</span> <span class=\"re0\">$sin</span>\u03b8 <span class=\"sy0\">+</span> <span class=\"re0\">$z</span> <span class=\"sy0\">*</span> <span class=\"re0\">$cos</span>\u03b8<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> rotate3d<span class=\"sy0\">-</span>y<span class=\"br0\">(</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"sy0\">,</span> <span class=\"re0\">$angle</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$cos</span>\u03b8<span class=\"sy0\">,</span> <span class=\"re0\">$sin</span>\u03b8<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">cis</span><span class=\"br0\">(</span> <span class=\"re0\">$angle</span> <span class=\"sy0\">*</span> \u03c0 <span class=\"sy0\">/</span> <span class=\"nu0\">180.0</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">reals</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"re0\">$cos</span>\u03b8 <span class=\"sy0\">-</span> <span class=\"re0\">$z</span> <span class=\"sy0\">*</span> <span class=\"re0\">$sin</span>\u03b8<span class=\"sy0\">,</span><br/>        <span class=\"re0\">$y</span><span class=\"sy0\">,</span><br/>        <span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"re0\">$sin</span>\u03b8 <span class=\"sy0\">+</span> <span class=\"re0\">$z</span> <span class=\"sy0\">*</span> <span class=\"re0\">$cos</span>\u03b8<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> rotate3d<span class=\"sy0\">-</span>z<span class=\"br0\">(</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"sy0\">,</span> <span class=\"re0\">$angle</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$cos</span>\u03b8<span class=\"sy0\">,</span> <span class=\"re0\">$sin</span>\u03b8<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">cis</span><span class=\"br0\">(</span> <span class=\"re0\">$angle</span> <span class=\"sy0\">*</span> \u03c0 <span class=\"sy0\">/</span> <span class=\"nu0\">180.0</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">reals</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"re0\">$cos</span>\u03b8 <span class=\"sy0\">-</span> <span class=\"re0\">$y</span> <span class=\"sy0\">*</span> <span class=\"re0\">$sin</span>\u03b8<span class=\"sy0\">,</span><br/>        <span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"re0\">$cos</span>\u03b8 <span class=\"sy0\">+</span> <span class=\"re0\">$y</span> <span class=\"sy0\">*</span> <span class=\"re0\">$sin</span>\u03b8<span class=\"sy0\">,</span><br/>        <span class=\"re0\">$z</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Unit cube from polygon mesh, aligned to axes</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@mesh</span> <span class=\"sy0\">=</span><br/>      <span class=\"br0\">[</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"co1\"># far face</span><br/>      <span class=\"br0\">[</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>      <span class=\"br0\">[</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"co1\"># near face</span><br/>      <span class=\"br0\">[</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">@mesh</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"re0\">$_</span>\u00bb<span class=\"sy0\">.</span><span class=\"kw3\">rotate</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> <span class=\"re0\">@mesh</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\"># positive and</span><br/>      <span class=\"re0\">@mesh</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"re0\">$_</span>\u00bb<span class=\"sy0\">.</span><span class=\"kw3\">rotate</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> <span class=\"re0\">@mesh</span><span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\"># negative rotations</span><br/>\u00a0<br/>    <span class=\"co1\"># Rotate to correct orientation for task</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">@mesh</span> <span class=\"kw1\">X</span> <span class=\"sy0\">^</span><span class=\"re0\">@mesh</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$j</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@mesh</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> rotate3d<span class=\"sy0\">-</span><span class=\"kw1\">x</span> <span class=\"sy0\">|</span><span class=\"re0\">@mesh</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">45</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">@mesh</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> rotate3d<span class=\"sy0\">-</span>z <span class=\"sy0\">|</span><span class=\"re0\">@mesh</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">40</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@colors</span> <span class=\"sy0\">=</span> red<span class=\"sy0\">,</span> blue<span class=\"sy0\">,</span> green<span class=\"sy0\">,</span> cyan<span class=\"sy0\">,</span> magenta<span class=\"sy0\">,</span> yellow<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">loop</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"nu0\">359</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$angle</span> <span class=\"br0\">{</span><br/>            <span class=\"sy0\">.</span><span class=\"me1\">color</span><span class=\"br0\">(</span> white<span class=\"sy0\">,</span> white <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"sy0\">.</span><span class=\"me1\">clear</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\"># Flatten 3D into 2D and rotate for all faces</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">@faces</span><span class=\"sy0\">-</span>z<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$c</span><span class=\"sy0\">-</span><span class=\"kw3\">index</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"re0\">@mesh</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@triangle</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">my</span> <span class=\"re0\">@points</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">my</span> <span class=\"re0\">$sum</span><span class=\"sy0\">-</span>z <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"re0\">@triangle</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">@node</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$px</span><span class=\"sy0\">,</span> <span class=\"re0\">$py</span><span class=\"sy0\">,</span> <span class=\"re0\">$z</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> scale<span class=\"sy0\">-</span>and<span class=\"sy0\">-</span>translate <span class=\"sy0\">|</span>rotate3d<span class=\"sy0\">-</span>y <span class=\"sy0\">|</span><span class=\"re0\">@node</span><span class=\"sy0\">,</span> <span class=\"re0\">$angle</span><span class=\"sy0\">;</span><br/>                    <span class=\"re0\">@points</span><span class=\"sy0\">.</span><span class=\"me1\">append</span><span class=\"sy0\">:</span> <span class=\"re0\">$px</span><span class=\"sy0\">.</span><span class=\"me1\">Int</span><span class=\"sy0\">,</span> <span class=\"re0\">$py</span><span class=\"sy0\">.</span><span class=\"me1\">Int</span><span class=\"sy0\">;</span><br/>                    <span class=\"re0\">$sum</span><span class=\"sy0\">-</span>z <span class=\"sy0\">+=</span> <span class=\"re0\">$z</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"re0\">@faces</span><span class=\"sy0\">-</span>z<span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"sy0\">:</span> <span class=\"sy0\">%</span><span class=\"br0\">(</span><br/>                    color  <span class=\"sy0\">=&gt;</span> <span class=\"re0\">@colors</span><span class=\"br0\">[</span><span class=\"re0\">$c</span><span class=\"sy0\">-</span><span class=\"kw3\">index</span><span class=\"sy0\">++</span> <span class=\"kw1\">div</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                    points <span class=\"sy0\">=&gt;</span> <span class=\"re0\">@points</span><span class=\"sy0\">,</span><br/>                    avg<span class=\"sy0\">-</span>z  <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$sum</span><span class=\"sy0\">-</span>z <span class=\"sy0\">/</span> <span class=\"sy0\">+</span><span class=\"re0\">@points</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"co1\"># Draw all faces</span><br/>            <span class=\"co1\"># Sort by z to draw farthest first</span><br/>            <span class=\"kw1\">for</span> <span class=\"re0\">@faces</span><span class=\"sy0\">-</span>z<span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"br0\">(</span> <span class=\"sy0\">-*.&lt;</span>avg<span class=\"sy0\">-</span>z<span class=\"sy0\">&gt;</span> <span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">%face</span> <span class=\"br0\">{</span><br/>                <span class=\"co1\"># Draw filled triangle</span><br/>                <span class=\"sy0\">.</span><span class=\"me1\">color</span><span class=\"br0\">(</span> <span class=\"re0\">%face</span><span class=\"sy0\">&lt;</span>color<span class=\"sy0\">&gt;,</span> <span class=\"re0\">%face</span><span class=\"sy0\">&lt;</span>color<span class=\"sy0\">&gt;</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"sy0\">.</span><span class=\"me1\">fill</span><span class=\"sy0\">-</span>triangle<span class=\"br0\">(</span> <span class=\"sy0\">|</span><span class=\"re0\">%face</span><span class=\"sy0\">&lt;</span>points<span class=\"sy0\">&gt;</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"co1\"># And frame</span><br/>                <span class=\"sy0\">.</span><span class=\"me1\">color</span><span class=\"br0\">(</span> black<span class=\"sy0\">,</span> black <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"sy0\">.</span><span class=\"me1\">thin</span><span class=\"sy0\">-</span>triangle<span class=\"br0\">(</span> <span class=\"sy0\">|</span><span class=\"re0\">%face</span><span class=\"sy0\">&lt;</span>points<span class=\"sy0\">&gt;</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"sy0\">.</span><span class=\"me1\">refresh</span><span class=\"sy0\">;</span><br/>            exit <span class=\"kw1\">if</span> <span class=\"sy0\">.</span><span class=\"me1\">wait</span><span class=\"sy0\">-</span>for<span class=\"sy0\">-</span>event<span class=\"br0\">(</span>key<span class=\"sy0\">-</span>press<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Cleanup on scope exit</span><br/>    <span class=\"kw2\">LEAVE</span> <span class=\"br0\">{</span><br/>        <span class=\"sy0\">.</span><span class=\"me1\">cleanup</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 196, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo\\rosetta\\DrawRotatingCube.exw<br/>--<br/>include pGUI.e<br/>\u00a0<br/>Ihandle canvas<br/>cdCanvas cd_canvas<br/>\u00a0<br/>--<br/>-- define 8 corners equidistant from {0,0,0}:<br/>--<br/>--          6-----2<br/>--      5-----1   3<br/>--      8-----4  <br/>--<br/>-- ie the right face is 1-2-3-4 clockwise, and the left face<br/>--  is 5-6-7-8 counter-clockwise (unless using x-ray vision).<br/>--<br/>enum X, Y, Z<br/>constant l = 100<br/>constant corners = {{+l,+l,+l},<br/>                    {+l,+l,-l},<br/>                    {+l,-l,-l},<br/>                    {+l,-l,+l},<br/>                    {-l,+l,+l},<br/>                    {-l,+l,-l},<br/>                    {-l,-l,-l},<br/>                    {-l,-l,+l}}<br/>\u00a0<br/>constant faces = {{CD_RED,      1,2,3,4},   -- right<br/>                  {CD_YELLOW,   1,5,6,2},   -- top<br/>                  {CD_GREEN,    1,4,8,5},   -- front<br/>                  {CD_BLUE,     2,3,7,6},   -- back<br/>                  {CD_WHITE,    3,4,8,7},   -- btm<br/>                  {CD_ORANGE,   5,6,7,8}}   -- left<br/>\u00a0<br/>atom ry = 0 -- rotation angle, 0..359, on a timer<br/>\u00a0<br/>constant naxes = {{Y,Z},    -- (rotate about the X-axis)<br/>                  {X,Z},    -- (rotate about the Y-axis)<br/>                  {X,Y}}    -- (rotate about the Z-axis)<br/>\u00a0<br/>function rotate(sequence points, atom angle, integer axis)<br/>--<br/>-- rotate points by the specified angle about the given axis<br/>--<br/>    atom radians = angle*CD_DEG2RAD,<br/>         sin_t = sin(radians),<br/>         cos_t = cos(radians)<br/>    integer {nx,ny} = naxes[axis]<br/>    for i=1 to length(points) do<br/>        atom x = points[i][nx],<br/>             y = points[i][ny]<br/>        points[i][nx] = x * cos_t - y * sin_t<br/>        points[i][ny] = y * cos_t + x * sin_t<br/>    end for<br/>    return points<br/>end function<br/>\u00a0<br/>function projection(sequence points, atom d)<br/>--<br/>-- project points from {0,0,d} onto the perpendicular plane through {0,0,0}<br/>--<br/>    for i=1 to length(points) do<br/>        atom {x,y,z} = points[i]<br/>        points[i][X] = x/(1-z/d)<br/>        points[i][Y] = y/(1-z/d)<br/>    end for<br/>    return points<br/>end function<br/>\u00a0<br/>function nearest(sequence points)<br/>--<br/>-- return the index of the nearest point (highest z value)<br/>--<br/>    integer np = 1<br/>    atom maxz = points[1][Z]<br/>    for i=2 to length(points) do<br/>        atom piz = points[i][Z]<br/>        if piz&gt;maxz then<br/>            maxz = piz<br/>            np = i<br/>        end if<br/>    end for<br/>    return np<br/>end function<br/>\u00a0<br/>procedure vertices(integer wx, wh, sequence points, face)<br/>-- (common code for line/fill drawing)<br/>    for i=2 to length(face) do<br/>        integer fi = face[i]<br/>        cdCanvasVertex(cd_canvas,wx+points[fi][X],wh-points[fi][Y])<br/>    end for<br/>end procedure<br/>\u00a0<br/>procedure draw_cube(integer wx, wh)<br/>    sequence points = corners<br/>    points = rotate(points,45,X)    -- (cube should now look like a H)<br/>    atom zr = 90-arctan(sqrt(2))*CD_RAD2DEG -- (about 35 degrees)<br/>    points = rotate(points,zr,Z)    -- (cube should now look like an italic H)<br/>    points = rotate(points,ry,Y)    -- (timed, two corners should remain static)<br/>    points = projection(points,1000)<br/>    integer np = nearest(points)<br/>    --<br/>    -- find the three faces that contain the nearest point,<br/>    -- then order by/draw them furthest diag away first.<br/>    --  (one of them, and theoretically two but not at the<br/>    --   rotations in use, may be completely obscured, due <br/>    --   to the effects of the perspective projection.)<br/>    --<br/>    sequence faceset = {}<br/>    for i=1 to length(faces) do<br/>        sequence fi = faces[i]<br/>        integer k = find(np,fi)<br/>        if k then<br/>            integer diag = mod(k,4)+2<br/>            diag = fi[diag]<br/>            faceset = append(faceset,{points[diag][Z],i})<br/>        end if<br/>    end for<br/>    faceset = sort(faceset)<br/>    for i=1 to length(faceset) do<br/>        integer fdx = faceset[i][2]<br/>        sequence fi = faces[fdx]<br/>        cdCanvasSetForeground(cd_canvas,fi[1])<br/>        -- draw edges (anti-aliased)<br/>        cdCanvasBegin(cd_canvas,CD_CLOSED_LINES)<br/>        vertices(wx,wh,points,fi)<br/>        cdCanvasEnd(cd_canvas)<br/>        -- fill sides (else would get bresenham edges)<br/>        cdCanvasBegin(cd_canvas,CD_FILL)<br/>        vertices(wx,wh,points,fi)<br/>        cdCanvasEnd(cd_canvas)<br/>    end for<br/>end procedure<br/>\u00a0<br/>function canvas_action_cb(Ihandle canvas)<br/>    cdCanvasActivate(cd_canvas)<br/>    cdCanvasClear(cd_canvas)<br/>    integer {wx, wh} = sq_floor_div(IupGetIntInt(canvas, \"DRAWSIZE\"),2)<br/>    draw_cube(wx,wh)<br/>    cdCanvasFlush(cd_canvas)<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function canvas_map_cb(Ihandle canvas)<br/>    atom res = IupGetDouble(NULL, \"SCREENDPI\")/25.4<br/>    IupGLMakeCurrent(canvas)<br/>    cd_canvas = cdCreateCanvas(CD_GL, \"10x10\u00a0%g\", {res})<br/>    cdCanvasSetBackground(cd_canvas, CD_PARCHMENT)<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function canvas_unmap_cb(Ihandle canvas)<br/>    cdKillCanvas(cd_canvas)<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function canvas_resize_cb(Ihandle /*canvas*/)<br/>    integer {canvas_width, canvas_height} = IupGetIntInt(canvas, \"DRAWSIZE\")<br/>    atom res = IupGetDouble(NULL, \"SCREENDPI\")/25.4<br/>    cdCanvasSetAttribute(cd_canvas, \"SIZE\", \"%dx%d\u00a0%g\", {canvas_width, canvas_height, res})<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function esc_close(Ihandle /*ih*/, atom c)<br/>    if c=K_ESC then return IUP_CLOSE end if<br/>    return IUP_CONTINUE<br/>end function<br/>\u00a0<br/>function timer_cb(Ihandle /*ih*/)<br/>    ry = mod(ry+359,360)<br/>    IupRedraw(canvas)<br/>    return IUP_IGNORE<br/>end function<br/>\u00a0<br/>procedure main()<br/>    IupOpen()<br/>    IupImageLibOpen()<br/>    canvas = IupGLCanvas()<br/>    IupSetAttribute(canvas, \"RASTERSIZE\", \"640x480\")<br/>    IupSetCallback(canvas, \"ACTION\", Icallback(\"canvas_action_cb\"))<br/>    IupSetCallback(canvas, \"MAP_CB\", Icallback(\"canvas_map_cb\"))<br/>    IupSetCallback(canvas, \"UNMAP_CB\", Icallback(\"canvas_unmap_cb\"))<br/>    IupSetCallback(canvas, \"RESIZE_CB\", Icallback(\"canvas_resize_cb\"))<br/>    Ihandle dlg = IupDialog(IupVbox({canvas}))<br/>    IupSetAttribute(dlg,\"TITLE\",\"Draw a Rotating Cube\");<br/>    IupSetCallback(dlg, \"K_ANY\",  Icallback(\"esc_close\"))<br/>    IupShow(dlg)<br/>    IupSetAttribute(canvas, \"RASTERSIZE\", NULL)<br/>    Ihandle hTimer = IupTimer(Icallback(\"timer_cb\"), 40)<br/>    IupMainLoop()<br/>    IupClose()<br/>end procedure<br/>\u00a0<br/>main()</pre>"}, {"lang": "PostScript", "loc": 37, "block": "<pre class=\"text highlighted_source\">%!PS-Adobe-3.0<br/>%%BoundingBox: 0 0 400 400<br/>\u00a0<br/>/ed { exch def } def<br/>/roty { dup sin /s ed cos /c ed [[c 0 s neg] [0 1 0] [s 0 c]] } def<br/>/rotz { dup sin /s ed cos /c ed [[c s neg 0] [s c 0] [0 0 1]] } def<br/>/dot { /a ed /b ed<br/>\ta 0 get b 0 get mul<br/>\ta 1 get b 1 get mul<br/>\ta 2 get b 2 get mul<br/>\tadd add } def<br/>\u00a0<br/>/mmul {\t/v ed [exch {v dot} forall] } def<br/>/transall { /m ed [exch {m exch mmul}forall] } def<br/>\u00a0<br/>/vt<br/>\t[[1  1  1] [-1  1  1]<br/>\t [1 -1  1] [-1 -1  1]<br/>\t [1  1 -1] [-1  1 -1]<br/>\t [1 -1 -1] [-1 -1 -1]]<br/>\t-45 roty transall<br/>\t2 sqrt 1 atan rotz transall<br/>def<br/>\u00a0<br/>/xy { exch get {} forall pop } def<br/>/page {<br/>\t/a ed /v vt a roty transall def<br/>\t0 setlinewidth 100 100 scale 2 2 translate<br/>\t/edge { v xy moveto v xy lineto stroke } def<br/>\u00a0<br/>\t0 1 2 3 4 5 6 7 0 2 1 3 4 6 5 7 0 4 1 5 2 6 3 7<br/>\t1 1 12 { pop edge } for<br/>\tshowpage<br/>} def<br/>\u00a0<br/>0 {3.2 add dup page } loop<br/>%%EOF</pre>"}, {"lang": "Python", "loc": 19, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> visual <span class=\"kw1\">import</span> *<br/>scene.<span class=\"me1\">title</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"VPython: Draw a rotating cube\"</span><br/>\u00a0<br/>scene.<span class=\"kw2\">range</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>scene.<span class=\"me1\">autocenter</span> <span class=\"sy0\">=</span> <span class=\"kw2\">True</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Drag with right mousebutton to rotate view.\"</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Drag up+down with middle mousebutton to zoom.\"</span><br/>\u00a0<br/>deg45 <span class=\"sy0\">=</span> <span class=\"kw3\">math</span>.<span class=\"me1\">radians</span><span class=\"br0\">(</span><span class=\"nu0\">45.0</span><span class=\"br0\">)</span>  <span class=\"co1\"># 0.785398163397</span><br/>\u00a0<br/>cube <span class=\"sy0\">=</span> box<span class=\"br0\">(</span><span class=\"br0\">)</span>    <span class=\"co1\"># using defaults, see http://www.vpython.org/contents/docs/defaults.html </span><br/>cube.<span class=\"me1\">rotate</span><span class=\"br0\">(</span> angle<span class=\"sy0\">=</span>deg45<span class=\"sy0\">,</span> axis<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>cube.<span class=\"me1\">rotate</span><span class=\"br0\">(</span> angle<span class=\"sy0\">=</span>deg45<span class=\"sy0\">,</span> axis<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:                 <span class=\"co1\"># Animation-loop</span><br/>    rate<span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><br/>    cube.<span class=\"me1\">rotate</span><span class=\"br0\">(</span> angle<span class=\"sy0\">=</span><span class=\"nu0\">0.005</span><span class=\"sy0\">,</span> axis<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 70, "block": "<pre class=\"text highlighted_source\">#lang racket/gui<br/>(require math/matrix math/array)<br/>\u00a0<br/>(define (Rx \u03b8)<br/>  (matrix [[1.0    0.0        0.0]<br/>           [0.0 (cos \u03b8) (- (sin \u03b8))]<br/>           [0.0 (sin \u03b8)    (cos \u03b8)]]))<br/>\u00a0<br/>(define (Ry \u03b8)<br/>  (matrix [[   (cos \u03b8)  0.0 (sin \u03b8)]<br/>           [      0.0   1.0    0.0 ]<br/>           [(- (sin \u03b8)) 0.0 (cos \u03b8)]]))<br/>\u00a0<br/>(define (Rz \u03b8)<br/>  (matrix [[(cos \u03b8) (- (sin \u03b8)) 0.0]<br/>           [(sin \u03b8)    (cos \u03b8)  0.0]<br/>           [   0.0        0.0   1.0]]))<br/>\u00a0<br/>(define base-matrix<br/>  (matrix* (identity-matrix 3 100.0)<br/>           (Rx (- (/ pi 2) (atan (sqrt 2))))<br/>           (Rz (/ pi 4.0))))<br/>\u00a0<br/>(define (current-matrix)<br/>  (matrix* (Ry (/ (current-inexact-milliseconds) 1000.))<br/>           base-matrix))<br/>\u00a0<br/>(define corners <br/>  (for*/list ([x '(-1.0 1.0)]<br/>              [y '(-1.0 1.0)]<br/>              [z '(-1.0 1.0)])<br/>    (matrix [[x] [y] [z]])))<br/>\u00a0<br/>(define lines <br/>  '((0 1) (0 2) (0 4) (1 3) (1 5)<br/>    (2 3) (2 6) (3 7) (4 5) (4 6)<br/>    (5 7) (6 7)))<br/>\u00a0<br/>(define ox 200.)<br/>(define oy 200.)<br/>\u00a0<br/>(define (draw-line dc a b)<br/>  (send dc draw-line<br/>        (+ ox (array-ref a #(0 0)))<br/>        (+ oy (array-ref a #(1 0)))<br/>        (+ ox (array-ref b #(0 0)))<br/>        (+ oy (array-ref b #(1 0)))))<br/>\u00a0<br/>(define (draw-cube c dc)<br/>  (define-values (w h) (send dc get-size))<br/>  (set! ox (/ w 2))<br/>  (set! oy (/ h 2))<br/>  (define cs (for/vector ([c (in-list corners)]) <br/>               (matrix* (current-matrix) c)))<br/>  (for ([l (in-list lines)])<br/>    (match-define (list i j) l)<br/>    (draw-line dc (vector-ref cs i) (vector-ref cs j))))<br/>\u00a0<br/>(define f (new frame%  [label \"cube\"]))<br/>(define c (new canvas% [parent f] [min-width 400] [min-height 400] [paint-callback draw-cube]))<br/>(send f show #t)<br/>\u00a0<br/>(send* (send c get-dc)<br/>  (set-pen \"black\" 1 'solid)<br/>  (set-smoothing 'smoothed))<br/>\u00a0<br/>(define (refresh)<br/>  (send c refresh))<br/>\u00a0<br/>(define t (new timer% [notify-callback refresh] [interval 35] [just-once? #f]))</pre>"}, {"lang": "Tcl", "loc": 135, "block": "<pre class=\"tcl highlighted_source\">\u00a0<br/><span class=\"co1\"># matrix operation support:</span><br/><span class=\"kw2\">package</span> require math::<span class=\"me1\">linearalgebra</span><br/><span class=\"kw1\">namespace</span> import\u00a0::<span class=\"me1\">math</span>::<span class=\"me1\">linearalgebra</span>::<span class=\"me1\">matmul</span><br/><span class=\"kw1\">namespace</span> import\u00a0::<span class=\"me1\">math</span>::<span class=\"me1\">linearalgebra</span>::<span class=\"me1\">crossproduct</span><br/><span class=\"kw1\">namespace</span> import\u00a0::<span class=\"me1\">math</span>::<span class=\"me1\">linearalgebra</span>::<span class=\"me1\">dotproduct</span><br/><span class=\"kw1\">namespace</span> import\u00a0::<span class=\"me1\">math</span>::<span class=\"me1\">linearalgebra</span>::<span class=\"me1\">sub</span><br/>\u00a0<br/><span class=\"co1\"># returns a cube as a list of faces,</span><br/><span class=\"co1\"># where each face is a list of (3space) points</span><br/><span class=\"kw1\">proc</span> make_cube <span class=\"br0\">{</span><span class=\"br0\">{</span>radius <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> dirs <span class=\"br0\">{</span><br/>        A <span class=\"br0\">{</span> <span class=\"nu0\">1</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>        B <span class=\"br0\">{</span> <span class=\"nu0\">1</span>  <span class=\"nu0\">1</span> -<span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>        C <span class=\"br0\">{</span> <span class=\"nu0\">1</span> -<span class=\"nu0\">1</span> -<span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>        D <span class=\"br0\">{</span> <span class=\"nu0\">1</span> -<span class=\"nu0\">1</span>  <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>        E <span class=\"br0\">{</span>-<span class=\"nu0\">1</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>        F <span class=\"br0\">{</span>-<span class=\"nu0\">1</span>  <span class=\"nu0\">1</span> -<span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>        G <span class=\"br0\">{</span>-<span class=\"nu0\">1</span> -<span class=\"nu0\">1</span> -<span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>        H <span class=\"br0\">{</span>-<span class=\"nu0\">1</span> -<span class=\"nu0\">1</span>  <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> faces <span class=\"br0\">{</span><br/>        <span class=\"br0\">{</span>A B C D<span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>D C G H<span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>H G F E<span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>E F B A<span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>A D H E<span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>C B F G<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    lmap fa <span class=\"re0\">$faces</span> <span class=\"br0\">{</span><br/>        lmap dir <span class=\"re0\">$fa</span> <span class=\"br0\">{</span><br/>            lmap x <span class=\"br0\">[</span>dict get <span class=\"re0\">$dirs</span> <span class=\"re0\">$dir</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">1.0</span> <span class=\"sy0\">*</span> <span class=\"re0\">$x</span> <span class=\"sy0\">*</span> <span class=\"re0\">$radius</span><span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># a matrix constructor</span><br/><span class=\"kw1\">proc</span> Matrix <span class=\"br0\">{</span>m<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    tailcall lmap row <span class=\"re0\">$m</span> <span class=\"br0\">{</span><br/>        lmap e <span class=\"re0\">$row</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">expr</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$e</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> identity <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    Matrix <span class=\"br0\">{</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># some matrices useful for animation:</span><br/><span class=\"kw1\">proc</span> rotateZ <span class=\"br0\">{</span>theta<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    Matrix <span class=\"br0\">{</span><br/>        <span class=\"br0\">{</span> cos<span class=\"br0\">(</span><span class=\"re0\">$theta</span><span class=\"br0\">)</span> -sin<span class=\"br0\">(</span><span class=\"re0\">$theta</span><span class=\"br0\">)</span>  <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span> sin<span class=\"br0\">(</span><span class=\"re0\">$theta</span><span class=\"br0\">)</span>  cos<span class=\"br0\">(</span><span class=\"re0\">$theta</span><span class=\"br0\">)</span>  <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span> <span class=\"nu0\">0</span>            <span class=\"nu0\">0</span>            <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> rotateY <span class=\"br0\">{</span>theta<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    Matrix <span class=\"br0\">{</span><br/>        <span class=\"br0\">{</span> sin<span class=\"br0\">(</span><span class=\"re0\">$theta</span><span class=\"br0\">)</span>  <span class=\"nu0\">0</span>  cos<span class=\"br0\">(</span><span class=\"re0\">$theta</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span> <span class=\"nu0\">0</span>            <span class=\"nu0\">1</span>            <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span> cos<span class=\"br0\">(</span><span class=\"re0\">$theta</span><span class=\"br0\">)</span>  <span class=\"nu0\">0</span> -sin<span class=\"br0\">(</span><span class=\"re0\">$theta</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> rotateX <span class=\"br0\">{</span>theta<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    Matrix <span class=\"br0\">{</span><br/>        <span class=\"br0\">{</span> <span class=\"nu0\">1</span>            <span class=\"nu0\">0</span>            <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span> <span class=\"nu0\">0</span>  cos<span class=\"br0\">(</span><span class=\"re0\">$theta</span><span class=\"br0\">)</span> -sin<span class=\"br0\">(</span><span class=\"re0\">$theta</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span> <span class=\"nu0\">0</span>  sin<span class=\"br0\">(</span><span class=\"re0\">$theta</span><span class=\"br0\">)</span>  cos<span class=\"br0\">(</span><span class=\"re0\">$theta</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> camera <span class=\"br0\">{</span>flen<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    Matrix <span class=\"br0\">{</span><br/>        <span class=\"br0\">{</span> <span class=\"re0\">$flen</span>  <span class=\"nu0\">0</span>      <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span> <span class=\"nu0\">0</span>      <span class=\"re0\">$flen</span>  <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span> <span class=\"nu0\">0</span>      <span class=\"nu0\">0</span>      <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> render <span class=\"br0\">{</span>canvas object<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> W   <span class=\"br0\">[</span>winfo width  <span class=\"re0\">$canvas</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> H   <span class=\"br0\">[</span>winfo height <span class=\"re0\">$canvas</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> fl  <span class=\"nu0\">1.0</span><br/>    <span class=\"kw1\">set</span> t   <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">clock</span> microseconds<span class=\"br0\">]</span> / <span class=\"nu0\">1000000.0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> transform <span class=\"br0\">[</span>identity<span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> transform <span class=\"br0\">[</span>matmul <span class=\"re0\">$transform</span> <span class=\"br0\">[</span>rotateX <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>atan<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> transform <span class=\"br0\">[</span>matmul <span class=\"re0\">$transform</span> <span class=\"br0\">[</span>rotateZ <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>atan<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> transform <span class=\"br0\">[</span>matmul <span class=\"re0\">$transform</span> <span class=\"br0\">[</span>rotateY <span class=\"re0\">$t</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> transform <span class=\"br0\">[</span>matmul <span class=\"re0\">$transform</span> <span class=\"br0\">[</span>camera <span class=\"re0\">$fl</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> face <span class=\"re0\">$object</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># do transformations into screen space:</span><br/>        <span class=\"kw1\">set</span> points <span class=\"br0\">[</span>lmap p <span class=\"re0\">$face</span> <span class=\"br0\">{</span> matmul <span class=\"re0\">$p</span> <span class=\"re0\">$transform</span> <span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"co1\"># calculate a normal</span><br/>        <span class=\"kw1\">set</span> o       <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$points</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> v1 <span class=\"br0\">[</span>sub <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$points</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"re0\">$o</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> v2 <span class=\"br0\">[</span>sub <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$points</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"re0\">$o</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> normal <span class=\"br0\">[</span>crossproduct <span class=\"re0\">$v1</span> <span class=\"re0\">$v2</span><span class=\"br0\">]</span><br/>\u00a0<br/>        <span class=\"kw1\">set</span> cosi   <span class=\"br0\">[</span>dotproduct <span class=\"re0\">$normal</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> -<span class=\"nu0\">1.0</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$cosi</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span> <span class=\"sy0\">;</span><span class=\"co1\"># rear-facing!</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">set</span> points <span class=\"br0\">[</span>lmap p <span class=\"re0\">$points</span> <span class=\"br0\">{</span><br/>            lassign <span class=\"re0\">$p</span> x y<br/>            <span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> + <span class=\"re0\">$W</span>/<span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> + <span class=\"re0\">$H</span>/<span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> points <span class=\"br0\">[</span><span class=\"kw2\">concat</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$points</span><span class=\"br0\">]</span><br/>        <span class=\"re0\">$canvas</span> create poly <span class=\"re0\">$points</span> -outline black -fill red<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">package</span> require Tk<br/>pack <span class=\"br0\">[</span>canvas .c<span class=\"br0\">]</span> -expand yes -fill both <br/>\u00a0<br/><span class=\"kw1\">proc</span> tick <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    .c delete all<br/>    render .c <span class=\"sy0\">$</span>::<span class=\"me1\">world</span><br/>    after <span class=\"nu0\">50</span> tick<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span>\u00a0::<span class=\"me1\">world</span> <span class=\"br0\">[</span>make_cube <span class=\"nu0\">100</span><span class=\"br0\">]</span><br/>tick<br/>\u00a0</pre>"}, {"lang": "TI-83 BASIC", "loc": 23, "block": "<pre class=\"text highlighted_source\">:-1\u2192Xmin:1\u2192Xmax<br/>:-1\u2192Ymin:1\u2192Ymax<br/>:AxesOff<br/>:Degrees<br/>:While 1<br/>:For(X,0,359,5<br/>:sin(X-120\u2192I%<br/>:sin(X\u2192PV<br/>:sin(X+120\u2192FV<br/>:Line(0,1,I%,.3<br/>:Line(0,1,PV,.3<br/>:Line(0,1,FV,.3<br/>:Line(0,-1,-I%,-.3<br/>:Line(0,-1,-PV,-.3<br/>:Line(0,-1,-FV,-.3<br/>:Line(.3,I%,-.3,-PV<br/>:Line(.3,I%,-.3,-FV<br/>:Line(.3,PV,-.3,-I%<br/>:Line(.3,PV,-.3,-FV<br/>:Line(.3,FV,-.3,-I%<br/>:Line(.3,FV,-.3,-PV<br/>:End<br/>:End</pre>"}]}