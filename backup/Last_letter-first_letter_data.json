{"task": "Last_letter-first_letter", "blocks": [{"lang": "Ada", "loc": 79, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Indefinite_Vectors</span>, Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Lalefile <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">package</span> Word_Vec <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Indefinite_Vectors</span><br/>     <span class=\"br0\">(</span>Index_Type   =&gt; Positive,<br/>      Element_Type =&gt; String<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">use</span> <span class=\"kw3\">type</span> Word_Vec.<span class=\"me1\">Vector</span>, Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Count_Type</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Words_Type <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Character<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Word_Vec.<span class=\"me1\">Vector</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Read<span class=\"br0\">(</span>Words: <span class=\"kw3\">out</span> Words_Type<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      F: Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">File_Type</span>;<br/>   <span class=\"kw1\">begin</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Open</span><span class=\"br0\">(</span>File =&gt; F, <br/>                       Name =&gt; <span class=\"st0\">\"pokemon70.txt\"</span>,<br/>                       Mode =&gt; Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">In_File</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">declare</span><br/>            Word: String\u00a0:= Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Get_Line</span><span class=\"br0\">(</span>F<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">begin</span><br/>            <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Word = <span class=\"st0\">\"\"</span>;<br/>            Words<span class=\"br0\">(</span>Word<span class=\"br0\">(</span>Word'First<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">Append</span><span class=\"br0\">(</span>Word<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">exception</span><br/>      <span class=\"kw3\">when</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">End_Error</span> =&gt; <span class=\"kw3\">null</span>;<br/>   <span class=\"kw1\">end</span> Read;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Write <span class=\"br0\">(</span>List: Word_Vec.<span class=\"me1\">Vector</span>; Prefix: String\u00a0:= <span class=\"st0\">\"   \"</span><span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      Copy: Word_Vec.<span class=\"me1\">Vector</span>\u00a0:= List;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">loop</span><br/>         <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Copy.<span class=\"me1\">Is_Empty</span>;<br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>Prefix &amp; Copy.<span class=\"me1\">First_Element</span><span class=\"br0\">)</span>;<br/>         Copy.<span class=\"me1\">Delete_First</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Write;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Run<span class=\"br0\">(</span>Start: Character; Words: Words_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Word_Vec.<span class=\"me1\">Vector</span> <span class=\"kw1\">is</span><br/>      Result: Word_Vec.<span class=\"me1\">Vector</span>\u00a0:= Word_Vec.<span class=\"me1\">Empty_Vector</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Words<span class=\"br0\">(</span>Start<span class=\"br0\">)</span>.<span class=\"me1\">First_Index</span> .. <span class=\"me1\">Words</span><span class=\"br0\">(</span>Start<span class=\"br0\">)</span>.<span class=\"me1\">Last_Index</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">declare</span><br/>            Word: String\u00a0:= Words<span class=\"br0\">(</span>Start<span class=\"br0\">)</span>.<span class=\"me1\">Element</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span>;<br/>            Dupl: Words_Type\u00a0:= Words;<br/>            Alternative\u00a0: Word_Vec.<span class=\"me1\">Vector</span>;<br/>         <span class=\"kw1\">begin</span><br/>            Dupl<span class=\"br0\">(</span>Start<span class=\"br0\">)</span>.<span class=\"me1\">Delete</span><span class=\"br0\">(</span>I<span class=\"br0\">)</span>;<br/>            Alternative\u00a0:= Word &amp; Run<span class=\"br0\">(</span>Word<span class=\"br0\">(</span>Word'Last<span class=\"br0\">)</span>, Dupl<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">if</span> Alternative.<span class=\"me1\">Length</span> &gt; Result.<span class=\"me1\">Length</span> <span class=\"kw1\">then</span><br/>               Result\u00a0:= Alternative;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">end</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> Run;<br/>\u00a0<br/>   W: Words_Type;<br/>   A_Vector: Word_Vec.<span class=\"me1\">Vector</span>;<br/>   Best: Word_Vec.<span class=\"me1\">Vector</span>\u00a0:= Word_Vec.<span class=\"me1\">Empty_Vector</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Read<span class=\"br0\">(</span>W<span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"Processing \"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> Ch <span class=\"kw3\">in</span> Character <span class=\"kw3\">range</span> 'a' .. 'z' <span class=\"kw1\">loop</span><br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Ch &amp; <span class=\"st0\">\", \"</span><span class=\"br0\">)</span>;<br/>      A_Vector\u00a0:= Run<span class=\"br0\">(</span>Ch, W<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">if</span> A_Vector.<span class=\"me1\">Length</span> &gt; Best.<span class=\"me1\">Length</span> <span class=\"kw1\">then</span><br/>         Best\u00a0:= A_Vector;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"Length of longest Path:\"</span> &amp;<br/>                          Integer'Image<span class=\"br0\">(</span>Integer<span class=\"br0\">(</span>Best.<span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span><span class=\"st0\">\"One such path:\"</span><span class=\"br0\">)</span>;<br/>   Write<span class=\"br0\">(</span>Best<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Lalefile;</pre>"}, {"lang": "BaCon", "loc": 31, "block": "<pre class=\"freebasic highlighted_source\">all$ = <span class=\"st0\">\"audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon \"</span> \\<br/><span class=\"st0\">\"cresselia croagunk darmanitan deino emboar emolga exeggcute gabite \"</span> \\<br/><span class=\"st0\">\"girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan \"</span> \\<br/><span class=\"st0\">\"kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine \"</span> \\<br/><span class=\"st0\">\"nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2 \"</span> \\<br/><span class=\"st0\">\"porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking \"</span> \\<br/><span class=\"st0\">\"sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko \"</span> \\<br/><span class=\"st0\">\"tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask\"</span><br/>\u00a0<br/><span class=\"kw1\">SUB</span> check<span class=\"br0\">(</span>list$, rest$<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">LOCAL</span> x<br/>\u00a0<br/>    <span class=\"kw1\">FOR</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> AMOUNT<span class=\"br0\">(</span>rest$<span class=\"br0\">)</span><br/>        <span class=\"kw1\">IF</span> <span class=\"kw1\">RIGHT</span>$<span class=\"br0\">(</span>list$, <span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"kw1\">LEFT</span>$<span class=\"br0\">(</span>TOKEN$<span class=\"br0\">(</span>rest$, x<span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> check<span class=\"br0\">(</span><span class=\"kw1\">APPEND</span>$<span class=\"br0\">(</span>list$, <span class=\"nu0\">0</span>, TOKEN$<span class=\"br0\">(</span>rest$, x<span class=\"br0\">)</span><span class=\"br0\">)</span>, DEL$<span class=\"br0\">(</span>rest$, x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">NEXT</span><br/>\u00a0<br/>    <span class=\"kw1\">IF</span> AMOUNT<span class=\"br0\">(</span>list$<span class=\"br0\">)</span> &gt; total <span class=\"kw1\">THEN</span><br/>        total = AMOUNT<span class=\"br0\">(</span>list$<span class=\"br0\">)</span><br/>        result$ = list$<br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">SUB</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span> z = <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> AMOUNT<span class=\"br0\">(</span>all$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">CALL</span> check<span class=\"br0\">(</span>TOKEN$<span class=\"br0\">(</span>all$, z<span class=\"br0\">)</span>, DEL$<span class=\"br0\">(</span>all$,z<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/><span class=\"kw1\">PRINT</span> total, <span class=\"st0\">\": \"</span>, result$<br/>\u00a0<br/><span class=\"kw1\">PRINT</span> NL$, <span class=\"st0\">\"Speed: \"</span>, <span class=\"kw1\">TIMER</span>, <span class=\"st0\">\" msecs.\"</span></pre>"}, {"lang": "BASIC256", "loc": 58, "block": "<pre class=\"text highlighted_source\">dim names$(1)<br/>names$ = { \"audino\", \"bagon\", \"baltoy\", \"banette\", \"bidoof\", \"braviary\", \"bronzor\", \"carracosta\", \"charmeleon\", \"cresselia\", \"croagunk\", \"darmanitan\", \"deino\", \"emboar\", \"emolga\", \"exeggcute\", \"gabite\", \"girafarig\", \"gulpin\", \"haxorus\", \"heatmor\", \"heatran\", \"ivysaur\", \"jellicent\", \"jumpluff\", \"kangaskhan\", \"kricketune\", \"landorus\", \"ledyba\", \"loudred\", \"lumineon\", \"lunatone\", \"machamp\", \"magnezone\", \"mamoswine\", \"nosepass\", \"petilil\", \"pidgeotto\", \"pikachu\", \"pinsir\", \"poliwrath\", \"poochyena\", \"porygon2\", \"porygonz\", \"registeel\", \"relicanth\", \"remoraid\", \"rufflet\", \"sableye\", \"scolipede\", \"scrafty\", \"seaking\", \"sealeo\", \"silcoon\", \"simisear\", \"snivy\", \"snorlax\", \"spoink\", \"starly\", \"tirtouga\", \"trapinch\", \"treecko\", \"tyrogue\", \"vigoroth\", \"vulpix\", \"wailord\", \"wartortle\", \"whismur\", \"wingull\", \"yamask\" }<br/>\u00a0<br/>global names$, lnames, index, maxlen, first, last<br/>maxlen = 0<br/>\u00a0<br/>lnames = names$[?]-1<br/>dim index(names$[?])<br/>dim first(names$[?])<br/>dim last(names$[?])<br/>for t = 0 to lnames<br/>\tindex[t] = t<br/>\tlast[t] = asc(right(names$[t],1))<br/>\tfirst[t] = asc(left(names$[t],1))<br/>next t<br/>\u00a0<br/>\u00a0<br/># try each name as the first name on the list<br/>for t = 0 to lnames<br/>   call swapindex(0,t)<br/>   call downlevel(1)<br/>   call swapindex(0,t)<br/>next t<br/>\u00a0<br/>end<br/>\u00a0<br/>subroutine downlevel(lev)<br/>   #print n$[?] + \" \" + lev<br/>   if lev &lt;= lnames then<br/>      for t = lev to lnames<br/>         if last[index[lev-1]] = first[index[t]] then<br/>            call swapindex(lev,t)<br/>            if lev &gt;= maxlen then<br/>               maxlen = lev<br/>               call showsolution(lev)<br/>            end if<br/>            call downlevel(lev+1)<br/>            call swapindex(lev,t)<br/>         end if<br/>      next t<br/>   end if<br/>end subroutine<br/>\u00a0<br/>subroutine showsolution(l)<br/>   print l+1;<br/>   for t = 0 to l<br/>      print \" \" + names$[index[t]];<br/>   next t<br/>   print<br/>end subroutine<br/>\u00a0<br/>subroutine swapindex(a, b)<br/>   # swap element a and bin in the array index (used to swap names$)<br/>   t = index[a]<br/>   index[a] = index[b]<br/>   index[b] = t<br/>end subroutine<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 51, "block": "<pre class=\"text highlighted_source\">      DIM names$(69)<br/>      names$() = \"audino\", \"bagon\", \"baltoy\", \"banette\", \\<br/>      \\ \"bidoof\", \"braviary\", \"bronzor\", \"carracosta\", \"charmeleon\", \\<br/>      \\ \"cresselia\", \"croagunk\", \"darmanitan\", \"deino\", \"emboar\", \\<br/>      \\ \"emolga\", \"exeggcute\", \"gabite\", \"girafarig\", \"gulpin\", \\<br/>      \\ \"haxorus\", \"heatmor\", \"heatran\", \"ivysaur\", \"jellicent\", \\<br/>      \\ \"jumpluff\", \"kangaskhan\", \"kricketune\", \"landorus\", \"ledyba\", \\<br/>      \\ \"loudred\", \"lumineon\", \"lunatone\", \"machamp\", \"magnezone\", \\<br/>      \\ \"mamoswine\", \"nosepass\", \"petilil\", \"pidgeotto\", \"pikachu\", \\<br/>      \\ \"pinsir\", \"poliwrath\", \"poochyena\", \"porygon2\", \"porygonz\", \\<br/>      \\ \"registeel\", \"relicanth\", \"remoraid\", \"rufflet\", \"sableye\", \\<br/>      \\ \"scolipede\", \"scrafty\", \"seaking\", \"sealeo\", \"silcoon\", \\<br/>      \\ \"simisear\", \"snivy\", \"snorlax\", \"spoink\", \"starly\", \"tirtouga\", \\<br/>      \\ \"trapinch\", \"treecko\", \"tyrogue\", \"vigoroth\", \"vulpix\", \\<br/>      \\ \"wailord\", \"wartortle\", \"whismur\", \"wingull\", \"yamask\"<br/>\u00a0<br/>      maxPathLength% = 0<br/>      maxPathLengthCount% = 0<br/>      maxPathExample$ = \"\"<br/>\u00a0<br/>      FOR i% = 0 TO DIM(names$(),1)<br/>        SWAP names$(0), names$(i%)<br/>        PROClastfirst(names$(), 1)<br/>        SWAP names$(0), names$(i%)<br/>      NEXT<br/>      PRINT \"Maximum length = \"\u00a0; maxPathLength%<br/>      PRINT \"Number of solutions with that length = \"\u00a0; maxPathLengthCount%<br/>      PRINT \"One such solution: \" ' maxPathExample$<br/>      END<br/>\u00a0<br/>      DEF PROClastfirst(names$(), offset%)<br/>      LOCAL i%, l%<br/>      IF offset% &gt; maxPathLength% THEN<br/>        maxPathLength% = offset%<br/>        maxPathLengthCount% = 1<br/>      ELSE IF offset% = maxPathLength% THEN;<br/>        maxPathLengthCount% += 1<br/>        maxPathExample$ = \"\"<br/>        FOR i% = 0 TO offset%-1<br/>          maxPathExample$ += names$(i%) + CHR$13 + CHR$10<br/>        NEXT<br/>      ENDIF<br/>      l% = ASCRIGHT$(names$(offset% - 1))<br/>      FOR i% = offset% TO DIM(names$(),1)<br/>        IF ASCnames$(i%) = l% THEN<br/>          SWAP names$(i%), names$(offset%)<br/>          PROClastfirst(names$(), offset%+1)<br/>          SWAP names$(i%), names$(offset%)<br/>        ENDIF<br/>      NEXT<br/>      ENDPROC</pre>"}, {"lang": "Bracmat", "loc": 43, "block": "<pre class=\"text highlighted_source\">(   audino bagon baltoy banette bidoof braviary bronzor<br/>    carracosta charmeleon cresselia croagunk darmanitan deino<br/>    emboar emolga exeggcute gabite girafarig gulpin haxorus<br/>    heatmor heatran ivysaur jellicent jumpluff kangaskhan<br/>    kricketune landorus ledyba loudred lumineon lunatone machamp<br/>    magnezone mamoswine nosepass petilil pidgeotto pikachu<br/>    pinsir poliwrath poochyena porygon2 porygonz registeel<br/>    relicanth remoraid rufflet sableye scolipede scrafty seaking<br/>    sealeo silcoon simisear snivy snorlax spoink starly<br/>    tirtouga trapinch treecko tyrogue vigoroth vulpix wailord<br/>    wartortle whismur wingull yamask<br/> \u00a0:\u00a0?names<br/>&amp; 0:?max<br/>&amp;\u00a0:?sequence<br/>&amp; ( lalefile<br/>  =   done todo A M Z Length first<br/>    .  \u00a0!arg:(!done.)&amp;!done:?sequence<br/>      |  \u00a0!arg:(.?todo)<br/>        &amp; (  \u00a0!todo<br/>           \u00a0:  \u00a0?A<br/>               \u00a0%@?M<br/>                (?Z&amp;lalefile$(!M.!A\u00a0!Z)&amp;~)<br/>          | <br/>          )<br/>      |  \u00a0!arg:(@(%:? @?first)\u00a0?:?done.?todo)<br/>        &amp;\u00a0:?M<br/>        &amp; (  \u00a0!todo<br/>           \u00a0:  \u00a0?A<br/>                @(%:!first\u00a0?:?M)<br/>                (\u00a0?Z<br/>                &amp; lalefile$(!M\u00a0!done.!A\u00a0!Z)<br/>                &amp; ~<br/>                )<br/>          |  \u00a0!M:<br/>            &amp;\u00a0!done:? [?Length<br/>            &amp;\u00a0!Length:&gt;!max:?max<br/>            &amp;\u00a0!done:?sequence<br/>          | <br/>          )<br/>  )<br/>&amp; lalefile$(.!names)<br/>&amp; out$(\"Length:\"\u00a0!max \"Sequence:\"\u00a0!sequence)<br/>);</pre>"}, {"lang": "C", "loc": 114, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;inttypes.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">uint16_t</span> index<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> last_char<span class=\"sy0\">,</span> first_char<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> Ref<span class=\"sy0\">;</span><br/>\u00a0<br/>Ref<span class=\"sy0\">*</span> longest_path_refs<span class=\"sy0\">;</span><br/><span class=\"kw4\">size_t</span> longest_path_refs_len<span class=\"sy0\">;</span><br/>\u00a0<br/>Ref<span class=\"sy0\">*</span> refs<span class=\"sy0\">;</span><br/><span class=\"kw4\">size_t</span> refs_len<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">size_t</span> n_solutions<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">**</span> longest_path<span class=\"sy0\">;</span><br/><span class=\"kw4\">size_t</span> longest_path_len<span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">/// tally statistics</span><br/><span class=\"kw4\">void</span> search<span class=\"br0\">(</span><span class=\"kw4\">size_t</span> curr_len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>curr_len <span class=\"sy0\">==</span> longest_path_refs_len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        n_solutions<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>curr_len <span class=\"sy0\">&gt;</span> longest_path_refs_len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        n_solutions <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        longest_path_refs_len <span class=\"sy0\">=</span> curr_len<span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html\"><span class=\"kw3\">memcpy</span></a><span class=\"br0\">(</span>longest_path_refs<span class=\"sy0\">,</span> refs<span class=\"sy0\">,</span> curr_len <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>Ref<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// recursive search</span><br/>    <span class=\"kw4\">intptr_t</span> last_char <span class=\"sy0\">=</span> refs<span class=\"br0\">[</span>curr_len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">last_char</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy0\">=</span> curr_len<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> refs_len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>refs<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">first_char</span> <span class=\"sy0\">==</span> last_char<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Ref aux <span class=\"sy0\">=</span> refs<span class=\"br0\">[</span>curr_len<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            refs<span class=\"br0\">[</span>curr_len<span class=\"br0\">]</span> <span class=\"sy0\">=</span> refs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            refs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> aux<span class=\"sy0\">;</span><br/>            search<span class=\"br0\">(</span>curr_len <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            refs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> refs<span class=\"br0\">[</span>curr_len<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            refs<span class=\"br0\">[</span>curr_len<span class=\"br0\">]</span> <span class=\"sy0\">=</span> aux<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> find_longest_chain<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> items<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                        <span class=\"kw4\">size_t</span> items_len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    refs_len <span class=\"sy0\">=</span> items_len<span class=\"sy0\">;</span><br/>    refs <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>refs_len<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>Ref<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// enough space for all items</span><br/>    longest_path_refs_len <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    longest_path_refs <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>refs_len<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>Ref<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> items_len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">size_t</span> itemsi_len <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>items<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>itemsi_len <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        refs<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">index</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">uint16_t</span><span class=\"br0\">)</span>i<span class=\"sy0\">;</span><br/>        refs<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">last_char</span> <span class=\"sy0\">=</span> items<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>itemsi_len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        refs<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">first_char</span> <span class=\"sy0\">=</span> items<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// try each item as possible start</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> items_len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Ref aux <span class=\"sy0\">=</span> refs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        refs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> refs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        refs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> aux<span class=\"sy0\">;</span><br/>        search<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        refs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> refs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        refs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> aux<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    longest_path_len <span class=\"sy0\">=</span> longest_path_refs_len<span class=\"sy0\">;</span><br/>    longest_path <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>longest_path_len<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> longest_path_len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        longest_path<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> items<span class=\"br0\">[</span>longest_path_refs<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">index</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>longest_path_refs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>refs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy0\">*</span> pokemon<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"audino\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"bagon\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"baltoy\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"banette\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"bidoof\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"braviary\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"bronzor\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"carracosta\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"charmeleon\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"cresselia\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"croagunk\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"darmanitan\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"deino\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"emboar\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"emolga\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"exeggcute\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"gabite\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"girafarig\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"gulpin\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"haxorus\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"heatmor\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"heatran\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ivysaur\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"jellicent\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"jumpluff\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"kangaskhan\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"kricketune\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"landorus\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ledyba\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"loudred\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"lumineon\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"lunatone\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"machamp\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"magnezone\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"mamoswine\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"nosepass\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"petilil\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"pidgeotto\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"pikachu\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"pinsir\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"poliwrath\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"poochyena\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"porygon2\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"porygonz\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"registeel\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"relicanth\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"remoraid\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"rufflet\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sableye\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"scolipede\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"scrafty\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"seaking\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sealeo\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"silcoon\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"simisear\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"snivy\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"snorlax\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"spoink\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"starly\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"tirtouga\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"trapinch\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"treecko\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"tyrogue\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"vigoroth\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"vulpix\"</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">\"wailord\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"wartortle\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"whismur\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"wingull\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"yamask\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">size_t</span> pokemon_len <span class=\"sy0\">=</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>pokemon<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>pokemon<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    find_longest_chain<span class=\"br0\">(</span>pokemon<span class=\"sy0\">,</span> pokemon_len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Maximum path length:\u00a0%u<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> longest_path_len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Paths of that length:\u00a0%u<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> n_solutions<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Example path of that length:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> longest_path_len<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"  \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> j <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> j <span class=\"sy0\">&lt;</span> longest_path_len<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s \"</span><span class=\"sy0\">,</span> longest_path<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>longest_path<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 38, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> rosetta<span class=\"sy0\">-</span>code<span class=\"sy0\">.</span>last<span class=\"sy0\">-</span>letter<span class=\"sy0\">-</span>first<span class=\"sy0\">-</span>letter<br/>  <span class=\"br0\">(</span>:<span class=\"me1\">require</span> clojure<span class=\"sy0\">.</span>string<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> by<span class=\"sy0\">-</span>first<span class=\"sy0\">-</span>letter<br/>  <span class=\"st0\">\"Returns a map from letters to a set of words that start with that letter\"</span><br/>  <span class=\"br0\">[</span>words<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">into</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>k v<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>                  <span class=\"br0\">[</span>k <span class=\"br0\">(</span><span class=\"kw1\">set</span> v<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>group<span class=\"sy0\">-</span>by <span class=\"kw1\">first</span> words<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> longest<span class=\"sy0\">-</span>path<span class=\"sy0\">-</span>from<br/>  <span class=\"st0\">\"Find a longest path starting at word, using only words-by-first-letter for successive words.<br/>  Returns a pair of [length list-of-words] to describe the path.\"</span><br/>  <span class=\"br0\">[</span>word words<span class=\"sy0\">-</span>by<span class=\"sy0\">-</span>first<span class=\"sy0\">-</span>letter<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>words<span class=\"sy0\">-</span>without<span class=\"sy0\">-</span>word <span class=\"br0\">(</span>update words<span class=\"sy0\">-</span>by<span class=\"sy0\">-</span>first<span class=\"sy0\">-</span>letter <span class=\"br0\">(</span><span class=\"kw1\">first</span> word<span class=\"br0\">)</span><br/>                                   disj word<span class=\"br0\">)</span><br/>        next<span class=\"sy0\">-</span>words <span class=\"br0\">(</span>words<span class=\"sy0\">-</span>without<span class=\"sy0\">-</span>word <span class=\"br0\">(</span>last word<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> next<span class=\"sy0\">-</span>words<span class=\"br0\">)</span><br/>      <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"br0\">[</span>word<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>sub<span class=\"sy0\">-</span>paths <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span>longest<span class=\"sy0\">-</span>path<span class=\"sy0\">-</span>from <span class=\"sy0\">%</span> words<span class=\"sy0\">-</span>without<span class=\"sy0\">-</span>word<span class=\"br0\">)</span> next<span class=\"sy0\">-</span>words<span class=\"br0\">)</span><br/>            <span class=\"br0\">[</span>length words<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>path<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> max<span class=\"sy0\">-</span>key <span class=\"kw1\">first</span> sub<span class=\"sy0\">-</span>paths<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">inc</span> length<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> word words<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>path<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> longest<span class=\"sy0\">-</span>word<span class=\"sy0\">-</span>chain<br/>  <span class=\"st0\">\"Find a longest path among the words in word-list, by performing a longest path search<br/>  starting at each word in the list.\"</span><br/>  <span class=\"br0\">[</span>word<span class=\"sy0\">-</span>list<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>words<span class=\"sy0\">-</span>by<span class=\"sy0\">-</span>letter <span class=\"br0\">(</span>by<span class=\"sy0\">-</span>first<span class=\"sy0\">-</span>letter word<span class=\"sy0\">-</span>list<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">apply</span> max<span class=\"sy0\">-</span>key <span class=\"kw1\">first</span><br/>           <span class=\"br0\">(</span>pmap #<span class=\"br0\">(</span>longest<span class=\"sy0\">-</span>path<span class=\"sy0\">-</span>from <span class=\"sy0\">%</span> words<span class=\"sy0\">-</span>by<span class=\"sy0\">-</span>letter<span class=\"br0\">)</span><br/>                 word<span class=\"sy0\">-</span>list<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> word<span class=\"sy0\">-</span>list<span class=\"sy0\">-</span>from<span class=\"sy0\">-</span>file <span class=\"br0\">[</span>file<span class=\"sy0\">-</span>name<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>contents <span class=\"br0\">(</span>slurp file<span class=\"sy0\">-</span>name<span class=\"br0\">)</span><br/>        words <span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>string<span class=\"sy0\">/</span>split contents #<span class=\"st0\">\"[ <span class=\"es0\">\\n</span>]\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> words<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">time</span> <span class=\"br0\">(</span>longest<span class=\"sy0\">-</span>word<span class=\"sy0\">-</span>chain <span class=\"br0\">(</span>word<span class=\"sy0\">-</span>list<span class=\"sy0\">-</span>from<span class=\"sy0\">-</span>file <span class=\"st0\">\"pokemon.txt\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "C#", "loc": 65, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> ConsoleApplication1<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">string</span> pokemon_names <span class=\"sy0\">=</span> <span class=\"st_h\">@\"audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon<br/>cresselia croagunk darmanitan deino emboar emolga exeggcute gabite<br/>girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan<br/>kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine<br/>nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2<br/>porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking<br/>sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko<br/>tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> pokemon <span class=\"sy0\">=</span> pokemon_names<span class=\"sy0\">.</span><span class=\"me1\">Split</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"st0\">' '</span>,<span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            List<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> chain <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>pokemon<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> pokemon<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                swap<span class=\"br0\">(</span><span class=\"kw1\">ref</span> pokemon<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"kw1\">ref</span> pokemon<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Search<span class=\"br0\">(</span> pokemon, chain, <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span>               <br/>                swap<span class=\"br0\">(</span><span class=\"kw1\">ref</span> pokemon<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"kw1\">ref</span> pokemon<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span> s <span class=\"kw1\">in</span> chain<span class=\"br0\">)</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Search<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> pokemon, List<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> longest_chain, <span class=\"kw4\">int</span> len <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>len <span class=\"sy0\">&gt;</span> longest_chain<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                longest_chain<span class=\"sy0\">.</span><span class=\"me1\">Clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> len<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                    longest_chain<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>pokemon<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw4\">char</span> lastchar <span class=\"sy0\">=</span> pokemon<span class=\"br0\">[</span>len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>pokemon<span class=\"br0\">[</span>len<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> len<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> pokemon<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pokemon<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> lastchar<span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    swap<span class=\"br0\">(</span><span class=\"kw1\">ref</span> pokemon<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, <span class=\"kw1\">ref</span> pokemon<span class=\"br0\">[</span>len<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    Search<span class=\"br0\">(</span>pokemon, longest_chain, len <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    swap<span class=\"br0\">(</span><span class=\"kw1\">ref</span> pokemon<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, <span class=\"kw1\">ref</span> pokemon<span class=\"br0\">[</span>len<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> swap<span class=\"br0\">(</span><span class=\"kw1\">ref</span> <span class=\"kw4\">string</span> s1, <span class=\"kw1\">ref</span> <span class=\"kw4\">string</span> s2<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">string</span> tmp <span class=\"sy0\">=</span> s1<span class=\"sy0\">;</span><br/>            s1 <span class=\"sy0\">=</span> s2<span class=\"sy0\">;</span><br/>            s2 <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 118, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;;; return all the words that start with an initial letter</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> filter-with-init <span class=\"br0\">(</span>words init<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>remove-if-<span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">eql</span> init <span class=\"br0\">(</span><span class=\"kw1\">aref</span> word <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> words<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; produce a hash table whose key is the initial letter of a word and whose value is</span><br/><span class=\"co1\">;;; a list of the words that start with that initial letter</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> group-by-first-letter <span class=\"br0\">(</span>words<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>map_letters <span class=\"br0\">(</span>make-hash-table<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>inits <span class=\"br0\">(</span>remove-duplicates <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> word <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> words<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>init inits map_letters<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>gethash init map_letters<span class=\"br0\">)</span> <span class=\"br0\">(</span>filter-with-init words init<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; Get the last letter in a word or array</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> last-element <span class=\"br0\">(</span><span class=\"kw1\">array</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"kw1\">array</span> <span class=\"br0\">(</span>- <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"kw1\">array</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; Produce a hash table whose key is a word and whose value is a list of the</span><br/><span class=\"co1\">;;; words that can follow that word</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> get-followers <span class=\"br0\">(</span>words<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>map-word-to-followers <span class=\"br0\">(</span>make-hash-table <span class=\"sy0\">:</span><span class=\"me1\">test</span> '<span class=\"kw1\">equal</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>init_hash <span class=\"br0\">(</span>group-by-first-letter words<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>word words map-word-to-followers<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setf</span><br/>       <span class=\"br0\">(</span>gethash word map-word-to-followers<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>gethash <span class=\"br0\">(</span>last-element word<span class=\"br0\">)</span> init_hash<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; Retrieve all the keys from a hash table</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> keys <span class=\"br0\">(</span>hashtbl<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>allkeys <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>maphash #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>key val<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> allkeys <span class=\"br0\">(</span><span class=\"kw1\">cons</span> key allkeys<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> hashtbl<span class=\"br0\">)</span><br/>    allkeys<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; Find the words which can follow a word and haven't been used yet.  The parameters are:</span><br/><span class=\"co1\">;;;    word - word being tested</span><br/><span class=\"co1\">;;;    followers - the hash table returned from get-followers</span><br/><span class=\"co1\">;;;    available - hash table with word as key and boolean indicating whether that word</span><br/><span class=\"co1\">;;;                has been used previously as value</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> get-available-followers <span class=\"br0\">(</span>word followers available<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> word<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>keys followers<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>remove-if-<span class=\"kw1\">not</span> #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>word<span class=\"br0\">)</span> <span class=\"br0\">(</span>gethash word available<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>gethash word followers<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; Find the best in a list using an arbitrary test</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> best <span class=\"br0\">(</span>lst test<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>top <span class=\"br0\">(</span><span class=\"kw1\">car</span> lst<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span>rest <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> lst<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> rest<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null</span> rest<span class=\"br0\">)</span> top<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> test <span class=\"br0\">(</span><span class=\"kw1\">car</span> rest<span class=\"br0\">)</span> top<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> top <span class=\"br0\">(</span><span class=\"kw1\">car</span> rest<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; Find the best path in a list</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> best-list-path <span class=\"br0\">(</span>paths<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>best paths #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>path1 path2<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> path1<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> path2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; Find the best path given all the supporting information we need</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> best-path-from-available <span class=\"br0\">(</span>word followers available depth path available-followers<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>results<br/>         <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>new-word<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>dfs-recurse new-word followers available <span class=\"br0\">(</span>+ <span class=\"nu0\">1</span> depth<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> word path<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           available-followers<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>best-list-path results<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; Recurse to find the best available path - the meat of the algorithm</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> dfs-recurse <span class=\"br0\">(</span>word followers available depth path<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ret<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">; Mark the word as unavailable</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>gethash word available<span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">; Find the longest path starting with word</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>available-followers <span class=\"br0\">(</span>get-available-followers word followers available<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setf</span> ret<br/>         <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> available-followers<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">cons</span> word path<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>best-path-from-available word followers available depth path available-followers<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">; Mark the word as available again</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>gethash word available<span class=\"br0\">)</span> t<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">; Return our longest path</span><br/>    ret<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; Create the availability table</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> make-available-table <span class=\"br0\">(</span>words<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span>available <span class=\"br0\">(</span>make-hash-table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>word words available<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>gethash word available<span class=\"br0\">)</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; Find the best path for a set of words</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> best-path <span class=\"br0\">(</span>words<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span>followers <span class=\"br0\">(</span>get-followers words<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>available <span class=\"br0\">(</span>make-available-table words<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>dfs-recurse <span class=\"kw1\">nil</span> followers available <span class=\"nu0\">0</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; set up the words as a set of strings</span><br/><span class=\"br0\">(</span><span class=\"kw1\">setf</span> *words* <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'symbol-<span class=\"kw1\">name</span><br/>'<span class=\"br0\">(</span>audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon<br/>cresselia croagunk darmanitan deino emboar emolga exeggcute gabite<br/>girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan<br/>kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine<br/>nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2<br/>porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking<br/>sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko<br/>tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">setf</span> *path* <span class=\"br0\">(</span>best-path *words*<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 37, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> trySwap<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> items<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> <span class=\"kw4\">string</span> item<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> len<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> longest<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    swap<span class=\"br0\">(</span>items<span class=\"br0\">[</span>len<span class=\"br0\">]</span><span class=\"sy0\">,</span> item<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    search<span class=\"br0\">(</span>items<span class=\"sy0\">,</span> len <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> longest<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    swap<span class=\"br0\">(</span>items<span class=\"br0\">[</span>len<span class=\"br0\">]</span><span class=\"sy0\">,</span> item<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> search<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> items<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> len<span class=\"sy0\">,</span> <span class=\"kw2\">ref</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> longest<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>len <span class=\"sy0\">&gt;</span> longest.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>        longest <span class=\"sy0\">=</span> items<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">len</span><span class=\"br0\">]</span>.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> lastChar <span class=\"sy0\">=</span> items<span class=\"br0\">[</span>len <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>$ <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw2\">ref</span> item<span class=\"sy0\">;</span> items<span class=\"br0\">[</span>len <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>item<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> lastChar<span class=\"br0\">)</span><br/>            trySwap<span class=\"br0\">(</span>items<span class=\"sy0\">,</span> item<span class=\"sy0\">,</span> len<span class=\"sy0\">,</span> longest<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> pokemon <span class=\"sy0\">=</span> <span class=\"st0\">\"audino bagon baltoy banette bidoof braviary<br/>bronzor carracosta charmeleon cresselia croagunk darmanitan deino<br/>emboar emolga exeggcute gabite girafarig gulpin haxorus heatmor<br/>heatran ivysaur jellicent jumpluff kangaskhan kricketune landorus<br/>ledyba loudred lumineon lunatone machamp magnezone mamoswine nosepass<br/>petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2<br/>porygonz registeel relicanth remoraid rufflet sableye scolipede<br/>scrafty seaking sealeo silcoon simisear snivy snorlax spoink starly<br/>tirtouga trapinch treecko tyrogue vigoroth vulpix wailord wartortle<br/>whismur wingull yamask\"</span>.<span class=\"me1\">split</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> solution<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw2\">ref</span> name<span class=\"sy0\">;</span> pokemon<span class=\"br0\">)</span><br/>        trySwap<span class=\"br0\">(</span>pokemon<span class=\"sy0\">,</span> name<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> solution<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%-(%s<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> solution<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 277, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">unit</span> Unit1<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">interface</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  Windows<span class=\"sy1\">,</span> Messages<span class=\"sy1\">,</span> SysUtils<span class=\"sy1\">,</span> Variants<span class=\"sy1\">,</span> Classes<span class=\"sy1\">,</span> Graphics<span class=\"sy1\">,</span> Controls<span class=\"sy1\">,</span> Forms<span class=\"sy1\">,</span><br/>  Dialogs<span class=\"sy1\">,</span> StdCtrls<span class=\"sy1\">,</span> DBCtrls<span class=\"sy1\">,</span> DB<span class=\"sy1\">,</span> DBClient<span class=\"sy1\">,</span> Grids<span class=\"sy1\">,</span> DBGrids<span class=\"sy1\">,</span> ExtCtrls<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  TLastLFirstL <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><span class=\"br0\">(</span>TForm<span class=\"br0\">)</span><br/>    Panel1<span class=\"sy1\">:</span> TPanel<span class=\"sy1\">;</span><br/>    Button1<span class=\"sy1\">:</span> TButton<span class=\"sy1\">;</span><br/>    Memo1<span class=\"sy1\">:</span> TMemo<span class=\"sy1\">;</span><br/>    DataSource1<span class=\"sy1\">:</span> TDataSource<span class=\"sy1\">;</span><br/>    ClientDataSet1<span class=\"sy1\">:</span> TClientDataSet<span class=\"sy1\">;</span><br/>    ClientDataSet1Longitud<span class=\"sy1\">:</span> TIntegerField<span class=\"sy1\">;</span><br/>    ClientDataSet1Cantidad<span class=\"sy1\">:</span> TIntegerField<span class=\"sy1\">;</span><br/>    ClientDataSet1Lista<span class=\"sy1\">:</span> TMemoField<span class=\"sy1\">;</span><br/>    Panel2<span class=\"sy1\">:</span> TPanel<span class=\"sy1\">;</span><br/>    DBMemo1<span class=\"sy1\">:</span> TDBMemo<span class=\"sy1\">;</span><br/>    DBGrid1<span class=\"sy1\">:</span> TDBGrid<span class=\"sy1\">;</span><br/>    Splitter1<span class=\"sy1\">:</span> TSplitter<span class=\"sy1\">;</span><br/>    CheckBox1<span class=\"sy1\">:</span> TCheckBox<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">procedure</span> FormCreate<span class=\"br0\">(</span>Sender<span class=\"sy1\">:</span> <span class=\"kw4\">TObject</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">procedure</span> Button1Click<span class=\"br0\">(</span>Sender<span class=\"sy1\">:</span> <span class=\"kw4\">TObject</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">procedure</span> FormDestroy<span class=\"br0\">(</span>Sender<span class=\"sy1\">:</span> <span class=\"kw4\">TObject</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">private</span><br/>    <span class=\"coMULTI\">{ Private declarations }</span><br/>    FPokemons<span class=\"sy1\">:</span>TStrings<span class=\"sy1\">;</span> <span class=\"co1\">//internal list of words, taken from memo</span><br/>    FIndex<span class=\"sy1\">:</span>TStrings<span class=\"sy1\">;</span> <span class=\"co1\">//index of words, based on starting letter</span><br/>    FCurrList<span class=\"sy1\">:</span>TStrings<span class=\"sy1\">;</span> <span class=\"co1\">//current list of words being made</span><br/>    FMax<span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"sy1\">;</span> <span class=\"co1\">//max length of list found so far</span><br/>    FCount<span class=\"sy1\">:</span><span class=\"kw1\">array</span> <span class=\"kw1\">of</span> <span class=\"kw1\">array</span><span class=\"br0\">[</span><span class=\"kw4\">boolean</span><span class=\"br0\">]</span><span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span> <span class=\"co1\">//counting of lists length ocurrences</span><br/>  <span class=\"kw1\">protected</span><br/>    <span class=\"kw1\">procedure</span> BuildIndex<span class=\"sy1\">;</span> <span class=\"co1\">//build FIndex based on FPokemons contents</span><br/>    <span class=\"kw1\">procedure</span> ClearIndex<span class=\"sy1\">;</span> <span class=\"co1\">//empty FIndex</span><br/>    <span class=\"kw1\">procedure</span> PokeChain<span class=\"br0\">(</span>starting<span class=\"sy1\">:</span><span class=\"kw4\">Char</span><span class=\"sy1\">;</span>mylevel<span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">//recursive procedure that builds words lists</span><br/>    <span class=\"kw1\">procedure</span> BuildChains<span class=\"sy1\">;</span> <span class=\"co1\">//starts the lists building, by calling PokeChain for every FPokemons</span><br/>    <span class=\"kw1\">procedure</span> AddCurrList<span class=\"sy1\">;</span> <span class=\"co1\">//called each time a list is \"finished\" (no more words to add to it)</span><br/>  <span class=\"kw1\">public</span><br/>    <span class=\"coMULTI\">{ Public declarations }</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  LastLFirstL<span class=\"sy1\">:</span> TLastLFirstL<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">implementation</span><br/>\u00a0<br/><span class=\"co2\">{$R *.dfm}</span><br/>\u00a0<br/><span class=\"coMULTI\">{ TForm1 }</span><br/>\u00a0<br/><span class=\"coMULTI\">{ if the actual list is the longest found so far it is added to<br/>the dataset, otherwise its ocurrence is just counted}</span><br/><span class=\"kw1\">procedure</span> TLastLFirstL<span class=\"sy1\">.</span><span class=\"me1\">AddCurrList</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span>cc<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  foundit<span class=\"sy1\">:</span><span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">with</span> ClientDataSet1 <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>    cc <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FCurrList<span class=\"sy1\">.</span><span class=\"me1\">Count</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> cc &lt;<span class=\"sy3\">=</span> FMax <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span> <span class=\"co1\">//count it</span><br/>      foundit <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"kw3\">High</span><span class=\"br0\">(</span>FCount<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>        foundit <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FCount<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">false</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> cc<span class=\"sy1\">;</span><br/>        <span class=\"kw1\">if</span> foundit <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>          FCount<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">true</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FCount<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">true</span><span class=\"br0\">]</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>          break<span class=\"sy1\">;</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> foundit <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>        <span class=\"co1\">//length that we never add to the dataset</span><br/>        i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">High</span><span class=\"br0\">(</span>FCount<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw3\">SetLength</span><span class=\"br0\">(</span>FCount<span class=\"sy1\">,</span>i<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw3\">Inc</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        FCount<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">false</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cc<span class=\"sy1\">;</span><br/>        FCount<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">true</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      exit<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"co1\">//new longest list is FCurrList, add it to the dataset</span><br/>    FMax <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cc<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">SetLength</span><span class=\"br0\">(</span>FCount<span class=\"sy1\">,</span><span class=\"kw3\">High</span><span class=\"br0\">(</span>Fcount<span class=\"br0\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">//make room for ocurrence count</span><br/>    FCount<span class=\"br0\">[</span><span class=\"kw3\">High</span><span class=\"br0\">(</span>FCount<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">false</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cc<span class=\"sy1\">;</span><br/>    FCount<span class=\"br0\">[</span><span class=\"kw3\">High</span><span class=\"br0\">(</span>FCount<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">true</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    <span class=\"co1\">//actual dataset adding</span><br/>    Append<span class=\"sy1\">;</span><br/>    Fields<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">AsInteger</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> cc<span class=\"sy1\">;</span><br/>    Fields<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">AsInteger</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    Fields<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">AsString</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FCurrList<span class=\"sy1\">.</span><span class=\"me1\">Text</span><span class=\"sy1\">;</span> <span class=\"co1\">//first one is example one</span><br/>    Post<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{}</span><br/><span class=\"kw1\">procedure</span> TLastLFirstL<span class=\"sy1\">.</span><span class=\"me1\">BuildChains</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  stSeen<span class=\"sy1\">:</span><span class=\"kw1\">array</span> <span class=\"kw1\">of</span> <span class=\"kw1\">array</span><span class=\"br0\">[</span><span class=\"kw4\">boolean</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">char</span><span class=\"sy1\">;</span><br/>  poke<span class=\"sy1\">:</span><span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  tc<span class=\"sy1\">:</span><span class=\"kw4\">int64</span><span class=\"sy1\">;</span><br/>  filteqs<span class=\"sy1\">:</span><span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/>  k<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"co1\">//do some cleaning before starting</span><br/>  <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> ClientDataSet1<span class=\"sy1\">.</span><span class=\"me1\">IsEmpty</span> <span class=\"kw1\">do</span><br/>    ClientDataSet1<span class=\"sy1\">.</span><span class=\"me1\">Delete</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Finalize</span><span class=\"br0\">(</span>FCount<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  FMax <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  filteqs <span class=\"sy1\">:</span><span class=\"sy3\">=</span> CheckBox1<span class=\"sy1\">.</span><span class=\"me1\">Checked</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//measure time</span><br/>  tc <span class=\"sy1\">:</span><span class=\"sy3\">=</span> gettickcount<span class=\"sy1\">;</span><br/>  <span class=\"co1\">//each word is given the opportunity of starting a list</span><br/>  <span class=\"kw1\">if</span> filteqs <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>    <span class=\"co1\">//ignore words with same start and end as others already seen</span><br/>    filteqs <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">False</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> FPokemons<span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      poke <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FPokemons<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">for</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"kw3\">High</span><span class=\"br0\">(</span>stSeen<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>        filteqs <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>stSeen<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">false</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> poke<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span>stSeen<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">true</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> poke<span class=\"br0\">[</span><span class=\"kw3\">length</span><span class=\"br0\">(</span>poke<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">if</span> filteqs <span class=\"kw1\">then</span><br/>          break<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> filteqs <span class=\"kw1\">then</span> <span class=\"co1\">//already seen equivalent</span><br/>        continue<span class=\"sy1\">;</span><br/>      FPokemons<span class=\"sy1\">.</span><span class=\"me1\">Objects</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw4\">Pointer</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      FCurrList<span class=\"sy1\">.</span><span class=\"me1\">Clear</span><span class=\"sy1\">;</span> <span class=\"co1\">//new list of words</span><br/>      FCurrList<span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>poke<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      PokeChain<span class=\"br0\">(</span>poke<span class=\"br0\">[</span><span class=\"kw3\">length</span><span class=\"br0\">(</span>poke<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">//continue the list</span><br/>      <span class=\"co1\">//register as seen, for future equivalents</span><br/>      k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">High</span><span class=\"br0\">(</span>stSeen<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">SetLength</span><span class=\"br0\">(</span>stSeen<span class=\"sy1\">,</span>k<span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">Inc</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      stSeen<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">false</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> poke<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      stSeen<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">true</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> poke<span class=\"br0\">[</span><span class=\"kw3\">length</span><span class=\"br0\">(</span>poke<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      FPokemons<span class=\"sy1\">.</span><span class=\"me1\">Objects</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw1\">nil</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Finalize</span><span class=\"br0\">(</span>stSeen<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">else</span> <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> FPokemons<span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      poke <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FPokemons<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      FPokemons<span class=\"sy1\">.</span><span class=\"me1\">Objects</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw4\">Pointer</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      FCurrList<span class=\"sy1\">.</span><span class=\"me1\">Clear</span><span class=\"sy1\">;</span> <span class=\"co1\">//new list of words</span><br/>      FCurrList<span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>poke<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      PokeChain<span class=\"br0\">(</span>poke<span class=\"br0\">[</span><span class=\"kw3\">length</span><span class=\"br0\">(</span>poke<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">//continue the list</span><br/>      FPokemons<span class=\"sy1\">.</span><span class=\"me1\">Objects</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw1\">nil</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  tc <span class=\"sy1\">:</span><span class=\"sy3\">=</span> gettickcount <span class=\"sy3\">-</span> tc<span class=\"sy1\">;</span> <span class=\"co1\">//don't consider dataset counting as part of the process</span><br/>  <span class=\"co1\">//set actual counting of ocurrences on the dataset</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"kw3\">High</span><span class=\"br0\">(</span>FCount<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">with</span> ClientDataSet1 <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">if</span> Locate<span class=\"br0\">(</span><span class=\"st0\">'Longitud'</span><span class=\"sy1\">,</span>FCount<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">false</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      Edit<br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">begin</span><br/>      Append<span class=\"sy1\">;</span><br/>      Fields<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">AsInteger</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FCount<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">false</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      Fields<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">AsString</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'No example preserved'</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    Fields<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">AsInteger</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FCount<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw2\">true</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    Post<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  ClientDataSet1<span class=\"sy1\">.</span><span class=\"me1\">IndexFieldNames</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'Longitud'</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//show time taken</span><br/>  Panel1<span class=\"sy1\">.</span><span class=\"me1\">Caption</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">IntToStr</span><span class=\"br0\">(</span>tc <span class=\"kw1\">div</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"st0\">'.'</span> <span class=\"sy3\">+</span> <span class=\"kw3\">IntToStr</span><span class=\"br0\">(</span>tc <span class=\"sy3\">-</span> <span class=\"br0\">(</span>tc <span class=\"kw1\">div</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"st0\">' segs.'</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ builds an index based on the first letter of every word in consideration,<br/>because all we care about is the first and the last letter of every word.<br/>The index is a TStrings where each element is the starting letter and the<br/>corresponding object is a TList with all the indices of the words that<br/>starts with that letter. }</span><br/><span class=\"kw1\">procedure</span> TLastLFirstL<span class=\"sy1\">.</span><span class=\"me1\">BuildIndex</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span>ii<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  poke<span class=\"sy1\">:</span><span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  st<span class=\"sy1\">,</span>ed<span class=\"sy1\">:</span><span class=\"kw4\">char</span><span class=\"sy1\">;</span><br/>  List<span class=\"sy1\">:</span>TList<span class=\"sy1\">;</span><br/>  k<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  found<span class=\"sy1\">:</span><span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  ClearIndex<span class=\"sy1\">;</span> <span class=\"co1\">//just in case is not the first execution</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw3\">Assigned</span><span class=\"br0\">(</span>FIndex<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"co1\">// just in case IS the first execution</span><br/>    FIndex <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStringList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> FPokemons<span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>    poke <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FPokemons<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    st <span class=\"sy1\">:</span><span class=\"sy3\">=</span> poke<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    ed <span class=\"sy1\">:</span><span class=\"sy3\">=</span> poke<span class=\"br0\">[</span><span class=\"kw3\">Length</span><span class=\"br0\">(</span>poke<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    ii <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FIndex<span class=\"sy1\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>st<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> ii&lt;<span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"co1\">//first time we see this starting letter</span><br/>      ii <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FIndex<span class=\"sy1\">.</span><span class=\"me1\">AddObject</span><span class=\"br0\">(</span>st<span class=\"sy1\">,</span>TList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    List <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TList<span class=\"br0\">(</span>FIndex<span class=\"sy1\">.</span><span class=\"me1\">Objects</span><span class=\"br0\">[</span>ii<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    found <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> CheckBox1<span class=\"sy1\">.</span><span class=\"me1\">Checked</span> <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span> <span class=\"co1\">//ignore equivalent words (same start, same end)</span><br/>      <span class=\"co1\">//all the List are words with the same start, so lets check the end</span><br/>      <span class=\"kw1\">for</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> List<span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>        poke <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FPokemons<span class=\"br0\">[</span><span class=\"kw4\">integer</span><span class=\"br0\">(</span>List<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>        found <span class=\"sy1\">:</span><span class=\"sy3\">=</span> poke<span class=\"br0\">[</span><span class=\"kw3\">Length</span><span class=\"br0\">(</span>poke<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> ed<span class=\"sy1\">;</span><br/>        <span class=\"kw1\">if</span> found <span class=\"kw1\">then</span><br/>          break<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> found <span class=\"kw1\">then</span> <span class=\"co1\">// not checking equivalents, or firts time this end is seen</span><br/>      List<span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"kw4\">Pointer</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ do your thing! }</span><br/><span class=\"kw1\">procedure</span> TLastLFirstL<span class=\"sy1\">.</span><span class=\"me1\">Button1Click</span><span class=\"br0\">(</span>Sender<span class=\"sy1\">:</span> <span class=\"kw4\">TObject</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Panel1<span class=\"sy1\">.</span><span class=\"me1\">Caption</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'Calculating..'</span><span class=\"sy1\">;</span><br/>  FPokemons<span class=\"sy1\">.</span><span class=\"me1\">Assign</span><span class=\"br0\">(</span>Memo1<span class=\"sy1\">.</span><span class=\"me1\">Lines</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">//words in the game</span><br/>  BuildIndex<span class=\"sy1\">;</span><br/>  BuildChains<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ frees all the TList used by the index, clears the index }</span><br/><span class=\"kw1\">procedure</span> TLastLFirstL<span class=\"sy1\">.</span><span class=\"me1\">ClearIndex</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw3\">Assigned</span><span class=\"br0\">(</span>FIndex<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    exit<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> FIndex<span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>    TList<span class=\"br0\">(</span>FIndex<span class=\"sy1\">.</span><span class=\"me1\">Objects</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  FIndex<span class=\"sy1\">.</span><span class=\"me1\">Clear</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TLastLFirstL<span class=\"sy1\">.</span><span class=\"me1\">FormCreate</span><span class=\"br0\">(</span>Sender<span class=\"sy1\">:</span> <span class=\"kw4\">TObject</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  FPokemons <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStringList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  FCurrList <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TStringList<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TLastLFirstL<span class=\"sy1\">.</span><span class=\"me1\">FormDestroy</span><span class=\"br0\">(</span>Sender<span class=\"sy1\">:</span> <span class=\"kw4\">TObject</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  FCurrList<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  FPokemons<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  ClearIndex<span class=\"sy1\">;</span> <span class=\"co1\">//IMPORTANT!</span><br/>  FIndex<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{where the magic happens.<br/>Recursive procedure that adds a word to the current list of words.<br/>Receives the starting letter of the word to add, and the \"position\"<br/>of the word in the chain.<br/>The position is used to ensure a word is not used twice for the list. }</span><br/><span class=\"kw1\">procedure</span> TLastLFirstL<span class=\"sy1\">.</span><span class=\"me1\">PokeChain</span><span class=\"br0\">(</span>starting<span class=\"sy1\">:</span> <span class=\"kw4\">Char</span><span class=\"sy1\">;</span>mylevel<span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span>ii<span class=\"sy1\">,</span>plevel<span class=\"sy1\">:</span><span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  List<span class=\"sy1\">:</span>TList<span class=\"sy1\">;</span><br/>  didit<span class=\"sy1\">:</span><span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  application<span class=\"sy1\">.</span><span class=\"me1\">processMessages</span><span class=\"sy1\">;</span> <span class=\"co1\">//don't let the interface die..</span><br/>  didit <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">False</span><span class=\"sy1\">;</span> <span class=\"co1\">//if we can't add another word, then we have reached the maximun length for the list</span><br/>  ii <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FIndex<span class=\"sy1\">.</span><span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>starting<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> ii &gt;<span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span> <span class=\"co1\">//there are words with this starting letter</span><br/>    List <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TList<span class=\"br0\">(</span>FIndex<span class=\"sy1\">.</span><span class=\"me1\">Objects</span><span class=\"br0\">[</span>ii<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> List<span class=\"sy1\">.</span><span class=\"me1\">Count</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      ii <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>List<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      plevel <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>FPokemons<span class=\"sy1\">.</span><span class=\"me1\">Objects</span><span class=\"br0\">[</span>ii<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// if the integer stored in the Object property is lower than mylevel, then this word is already in the list</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>plevel &gt; mylevel<span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>plevel <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span> <span class=\"co1\">// you can use the word</span><br/>        <span class=\"co1\">//a try finally would be a good thing here, but...</span><br/>        FCurrList<span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>FPokemons<span class=\"br0\">[</span>ii<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">//add the word to the list</span><br/>        FPokemons<span class=\"sy1\">.</span><span class=\"me1\">Objects</span><span class=\"br0\">[</span>ii<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw4\">Pointer</span><span class=\"br0\">(</span>mylevel<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">//signal is already in the list</span><br/>        PokeChain<span class=\"br0\">(</span>FPokemons<span class=\"br0\">[</span>ii<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"kw3\">length</span><span class=\"br0\">(</span>FPokemons<span class=\"br0\">[</span>ii<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span>mylevel<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">//add more words to the list</span><br/>        FcurrList<span class=\"sy1\">.</span><span class=\"kw3\">Delete</span><span class=\"br0\">(</span>FCurrList<span class=\"sy1\">.</span><span class=\"me1\">Count</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">//already did my best, lets try with another word</span><br/>        FPokemons<span class=\"sy1\">.</span><span class=\"me1\">Objects</span><span class=\"br0\">[</span>ii<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw1\">nil</span><span class=\"sy1\">;</span> <span class=\"co1\">//unsignal it, so it can be used \"later\"</span><br/>        didit <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">True</span><span class=\"sy1\">;</span> <span class=\"co1\">//we did add one word to the list</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> didit <span class=\"kw1\">then</span> <span class=\"co1\">//there is no way of making the list longer, process it</span><br/>    AddCurrList<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Elixir", "loc": 38, "block": "<pre class=\"text highlighted_source\">defmodule LastLetter_FirstLetter do<br/>  def search(names) do<br/>    first = Enum.group_by(names, &amp;String.first/1)<br/>    sequences = Enum.reduce(names, [], fn name,acc -&gt; add_name(first, acc, [name]) end)<br/>    max = Enum.max_by(sequences, &amp;length/1) |&gt; length<br/>    max_seqs = Enum.filter(sequences, fn seq -&gt; length(seq) == max end)<br/>    IO.puts \"there are #{length(sequences)} possible sequences\"<br/>    IO.puts \"the longest is #{max} names long\"<br/>    IO.puts \"there are #{length(max_seqs)} such sequences. one is:\"<br/>    hd(max_seqs) |&gt; Enum.with_index |&gt;<br/>    Enum.each(fn {name, idx} -&gt;<br/>     \u00a0:io.fwrite \"  ~2w ~s~n\", [idx+1, name]<br/>    end)<br/>  end<br/>\u00a0<br/>  defp add_name(first, sequences, seq) do<br/>    last_letter = String.last(hd(seq))<br/>    potentials = Map.get(first, last_letter, []) -- seq<br/>    if potentials == [] do<br/>      [Enum.reverse(seq) | sequences]<br/>    else<br/>      Enum.reduce(potentials, sequences, fn name, acc -&gt; add_name(first, acc, [name | seq]) end)<br/>    end<br/>  end<br/>end<br/>\u00a0<br/>names = ~w(<br/>  audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon<br/>  cresselia croagunk darmanitan deino emboar emolga exeggcute gabite<br/>  girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan<br/>  kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine<br/>  nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2<br/>  porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking<br/>  sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko<br/>  tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask<br/>)<br/>\u00a0<br/>LastLetter_FirstLetter.search(names)</pre>"}, {"lang": "Erlang", "loc": 52, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> last_letter_first_letter <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>solve<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">solve</span><span class=\"br0\">(</span> <span class=\"re5\">Names</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Dict</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> dict_append<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">new</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Names</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Chains</span> <span class=\"sy3\">=</span> <span class=\"re3\">construct_chains_in_parallel</span><span class=\"br0\">(</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/><span class=\"co1\">%    Chains = [construct_chain_from_key(Dict, X) || X &lt;- dict:fetch_keys(Dict)],</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> construct_chain_longest<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Chains</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">solve</span><span class=\"br0\">(</span> <span class=\"kw4\">binary</span>:<span class=\"re3\">split</span><span class=\"br0\">(</span><span class=\"re3\">names</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"sy2\">&lt;&lt;</span><span class=\"st0\">\" \"</span><span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>global<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">construct_chains_in_parallel</span><span class=\"br0\">(</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">My_pid</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Pids</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">spawn</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">My_pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">construct_chain_from_key</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fetch_keys</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span><span class=\"kw1\">receive</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Chain</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Chain</span> <span class=\"kw1\">end</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Pids</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">construct_chain_from_key</span><span class=\"br0\">(</span> <span class=\"re5\">Dict</span><span class=\"sy1\">,</span> <span class=\"re5\">First_letter</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Names</span> <span class=\"sy3\">=</span> <span class=\"re3\">construct_chain_names</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">find</span><span class=\"br0\">(</span><span class=\"re5\">First_letter</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">construct_chain_from_names</span><span class=\"br0\">(</span> <span class=\"re5\">Names</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">construct_chain_from_names</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">_Dict</span><span class=\"sy1\">,</span> <span class=\"re5\">Best_chain</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Best_chain</span><span class=\"sy1\">;</span><br/><span class=\"re3\">construct_chain_from_names</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">Name</span><span class=\"sy1\">,</span> <span class=\"re5\">Last_letter</span><span class=\"br0\">}</span> | <span class=\"re5\">T</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"sy1\">,</span> <span class=\"re5\">Best_chain</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re5\">New_dict</span> <span class=\"sy3\">=</span> <span class=\"re3\">dict_delete</span><span class=\"br0\">(</span> <span class=\"re5\">Name</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"re5\">New_chain</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">Name</span> | <span class=\"re3\">construct_chain_from_key</span><span class=\"br0\">(</span> <span class=\"re5\">New_dict</span><span class=\"sy1\">,</span> <span class=\"re5\">Last_letter</span> <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">construct_chain_from_names</span><span class=\"br0\">(</span> <span class=\"re5\">T</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"sy1\">,</span> <span class=\"re3\">construct_chain_longest</span><span class=\"br0\">(</span><span class=\"re5\">Best_chain</span><span class=\"sy1\">,</span> <span class=\"re5\">New_chain</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">construct_chain_longest</span><span class=\"br0\">(</span> <span class=\"re5\">Chain1</span><span class=\"sy1\">,</span> <span class=\"re5\">Chain2</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Chain1</span><span class=\"br0\">)</span> <span class=\"sy3\">&gt;</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Chain2</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Chain1</span><span class=\"sy1\">;</span><br/><span class=\"re3\">construct_chain_longest</span><span class=\"br0\">(</span> <span class=\"re5\">_Chain1</span><span class=\"sy1\">,</span> <span class=\"re5\">Chain2</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Chain2</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">construct_chain_names</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Name</span><span class=\"sy1\">,</span> <span class=\"re5\">Last_letter</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">Name</span><span class=\"sy1\">,</span> <span class=\"re5\">Last_letter</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">construct_chain_names</span><span class=\"br0\">(</span>\t<span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">Values</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Values</span><span class=\"sy1\">;</span><br/><span class=\"re3\">construct_chain_names</span><span class=\"br0\">(</span> error <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">dict_append</span><span class=\"br0\">(</span> <span class=\"re5\">Name</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">First_letter</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Name</span><span class=\"sy1\">,</span> <span class=\"re5\">Last_letter</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">dict_item</span><span class=\"br0\">(</span> <span class=\"re5\">Name</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">append</span><span class=\"br0\">(</span> <span class=\"re5\">First_letter</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Name</span><span class=\"sy1\">,</span> <span class=\"re5\">Last_letter</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">dict_item</span><span class=\"br0\">(</span> <span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">First_letter</span><span class=\"sy1\">,</span> <span class=\"re5\">_T</span><span class=\"sy3\">/</span><span class=\"kw6\">binary</span><span class=\"sy2\">&gt;&gt;</span><span class=\"sy3\">=</span><span class=\"re5\">Name</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Until_last_letter</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"re3\">byte_size</span><span class=\"br0\">(</span> <span class=\"re5\">Name</span> <span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <br/>\t<span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">_H</span>:<span class=\"me2\">Until_last_letter</span><span class=\"sy3\">/</span><span class=\"kw4\">binary</span><span class=\"sy1\">,</span> <span class=\"re5\">Last_letter</span><span class=\"sy2\">&gt;&gt;</span> <span class=\"sy3\">=</span> <span class=\"re5\">Name</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">First_letter</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Name</span><span class=\"sy1\">,</span> <span class=\"re5\">Last_letter</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">dict_delete</span><span class=\"br0\">(</span> <span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">First_letter</span><span class=\"sy1\">,</span> <span class=\"re5\">_T</span><span class=\"sy3\">/</span><span class=\"kw6\">binary</span><span class=\"sy2\">&gt;&gt;</span><span class=\"sy3\">=</span><span class=\"re5\">Name</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Name_last_letters</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fetch</span><span class=\"br0\">(</span><span class=\"re5\">First_letter</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">store</span><span class=\"br0\">(</span> <span class=\"re5\">First_letter</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">keydelete</span><span class=\"br0\">(</span><span class=\"re5\">Name</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Name_last_letters</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">names</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"sy2\">&lt;&lt;</span><span class=\"st0\">\"audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon cresselia croagunk darmanitan deino emboar emolga exeggcute gabite girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2 porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask\"</span><span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 56, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> pokemon <span class=\"sy2\">=</span> <span class=\"co2\">`audino bagon baltoy...67 names omitted...`</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// split text into slice representing directed graph</span><br/>    <span class=\"kw1\">var</span> d <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> l <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> strings<span class=\"sy3\">.</span>Split<span class=\"sy1\">(</span>pokemon<span class=\"sy1\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        d <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>d<span class=\"sy1\">,</span> strings<span class=\"sy3\">.</span><span class=\"me1\">Fields</span><span class=\"sy1\">(</span>l<span class=\"sy1\">)</span><span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"searching\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>d<span class=\"sy1\">),</span> <span class=\"st0\">\"names...\"</span><span class=\"sy1\">)</span><br/>    <span class=\"co1\">// try each name as possible start</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> d <span class=\"sy1\">{</span><br/>        d<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> d<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>        search<span class=\"sy1\">(</span>d<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>d<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]))</span><br/>        d<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> d<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"maximum path length:\"</span><span class=\"sy1\">,</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>ex<span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"paths of that length:\"</span><span class=\"sy1\">,</span> nMax<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Print</span><span class=\"sy1\">(</span><span class=\"st0\">\"example path of that length:\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> n <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> ex <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span><span class=\"sy3\">%</span><span class=\"nu0\">6</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>   \"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Print</span><span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> ex <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><br/><span class=\"kw1\">var</span> nMax <span class=\"kw4\">int</span><br/>\u00a0<br/><span class=\"kw4\">func</span> search<span class=\"sy1\">(</span>d <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> ncPath <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// tally statistics</span><br/>    <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>ex<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        nMax<span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> &gt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>ex<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        nMax <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>        ex <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>ex<span class=\"sy1\">[:</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> d<span class=\"sy1\">[:</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// recursive search</span><br/>    lastName <span class=\"sy2\">:=</span> d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>    lastChar <span class=\"sy2\">:=</span> lastName<span class=\"sy1\">[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>lastName<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu2\">i</span><span class=\"sy1\">;</span> j &lt; <span class=\"kw3\">len</span><span class=\"sy1\">(</span>d<span class=\"sy1\">);</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> d<span class=\"sy1\">[</span>j<span class=\"sy1\">][</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> lastChar <span class=\"sy1\">{</span><br/>            d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> d<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> d<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>            search<span class=\"sy1\">(</span>d<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> ncPath<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy3\">+</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]))</span><br/>            d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> d<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> d<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 23, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>ByteString<span class=\"sy0\">.</span>Char8 <span class=\"kw1\">as</span> B<br/>\u00a0<br/>allPokemon <span class=\"sy0\">::</span> <span class=\"br0\">[</span>B<span class=\"sy0\">.</span>ByteString<span class=\"br0\">]</span><br/>allPokemon <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> B<span class=\"sy0\">.</span>pack <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:words\"><span class=\"kw3\">words</span></a> <br/>    <span class=\"st0\">\"audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon <span class=\"es0\">\\</span><br/>    <span class=\"es0\">\\c</span>resselia croagunk darmanitan deino emboar emolga exeggcute gabite <span class=\"es0\">\\</span><br/>    <span class=\"es0\">\\g</span>irafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan <span class=\"es0\">\\</span><br/>    <span class=\"es0\">\\k</span>ricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine <span class=\"es0\">\\</span><br/>    <span class=\"es0\">\\n</span>osepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2 <span class=\"es0\">\\</span><br/>    <span class=\"es0\">\\p</span>orygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking <span class=\"es0\">\\</span><br/>    <span class=\"es0\">\\s</span>ealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko <span class=\"es0\">\\</span><br/>    <span class=\"es0\">\\t</span>yrogue vigoroth vulpix wailord wartortle whismur wingull yamask\"</span><br/>\u00a0<br/>growChains <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>B<span class=\"sy0\">.</span>ByteString<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>B<span class=\"sy0\">.</span>ByteString<span class=\"br0\">]</span><br/>growChains pcs <br/>    <span class=\"sy0\">|</span> nextChainSet <span class=\"sy0\">==</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> pcs<br/>    <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> growChains nextChainSet<br/>  <span class=\"kw1\">where</span> nextChainSet <span class=\"sy0\">=</span> pcs <span class=\"sy0\">&gt;&gt;=</span> findLinks<br/>        findLinks pc <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>\\x <span class=\"sy0\">-&gt;</span> pc <span class=\"sy0\">++</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span>isLink <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:last\"><span class=\"kw3\">last</span></a> pc<span class=\"br0\">)</span> <span class=\"br0\">(</span>allPokemon \\\\ pc<span class=\"br0\">)</span><br/>        isLink pl pr <span class=\"sy0\">=</span> B<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:last\"><span class=\"kw3\">last</span></a> pl <span class=\"sy0\">==</span> B<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> pr<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> B<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> growChains <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>\\x <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span> allPokemon</pre>"}, {"lang": "Icon and Unicon", "loc": 24, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw2\">global</span> words<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    words <span class=\"sy0\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> word <span class=\"sy0\">:=</span> genwords<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"kw3\">input</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"sy0\">/</span>words<span class=\"br0\">[</span>word<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        <span class=\"kw4\">put</span><span class=\"br0\">(</span>words<span class=\"br0\">[</span>word<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> word<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    bP <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">every</span> p <span class=\"sy0\">:=</span> getPath<span class=\"br0\">(</span><span class=\"sy0\">!!</span>words<span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">if</span> <span class=\"sy0\">*\\</span>p <span class=\"sy0\">&gt;</span> <span class=\"sy0\">*</span>bP <span class=\"kw1\">then</span> bP <span class=\"sy0\">:=</span> <span class=\"kw4\">copy</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Longest: \"</span><span class=\"sy0\">,*</span>bP<span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>bP<span class=\"sy0\">||</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">|</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> getPath<span class=\"br0\">(</span>word<span class=\"sy0\">,</span> p<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> word <span class=\"sy0\">==</span> <span class=\"sy0\">!</span>p <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> p<br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">/</span>words<span class=\"br0\">[</span>word<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"kw1\">suspend</span> p <span class=\"sy0\">&lt;-</span> p <span class=\"sy0\">|||</span> <span class=\"br0\">[</span>word<span class=\"br0\">]</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">suspend</span> getPath<span class=\"br0\">(</span><span class=\"sy0\">!</span>words<span class=\"br0\">[</span>word<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> p <span class=\"sy0\">&lt;-</span> p <span class=\"sy0\">|||</span> <span class=\"br0\">[</span>word<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> genwords<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> l <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>f <span class=\"kw1\">do</span><br/>        l <span class=\"sy0\">?</span> <span class=\"kw1\">while</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"kw3\">letters</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">suspend</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span><span class=\"kw3\">letters</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 21, "block": "<pre class=\"j highlighted_source\">pokenames=:\u00a0;:<span class=\"nu0\">0</span>\u00a0:<span class=\"nu0\">0</span>-.LF<br/> audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon<br/> cresselia croagunk darmanitan deino emboar emolga exeggcute gabite<br/> girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan<br/> kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine<br/> nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2<br/> porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking<br/> sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko<br/> tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>seqs=: <span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  links=. &lt;@I. <span class=\"nu0\">_1</span> =/&amp;<span class=\"sy0\">(</span>{&amp;&gt;&amp;<span class=\"kw2\">y</span><span class=\"sy0\">)</span> <span class=\"nu0\">0</span>  <br/>  next=. ,.i.#links<br/>  <span class=\"kw1\">while.</span>#next <span class=\"kw1\">do.</span><br/>     r=. next<br/>     <span class=\"kw1\">assert.</span> <span class=\"nu0\">1e9</span>&gt;*/<span class=\"nu0\">8</span>,$r<br/>     next=. <span class=\"sy0\">(</span>#~ <span class=\"sy0\">(</span>-: ~.<span class=\"sy0\">)</span>\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span> &gt;;&lt;@<span class=\"sy0\">(</span>] &lt;@,\"<span class=\"nu0\">1</span> <span class=\"nu0\">0</span> links {::~ {:<span class=\"sy0\">)</span>\"<span class=\"nu0\">1</span> r<br/>  <span class=\"kw1\">end.</span><br/>  r<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 61, "block": "<pre class=\"java highlighted_source\"><span class=\"co1\">// derived from C</span><br/><span class=\"kw1\">final</span> <span class=\"kw1\">class</span> LastLetterFirstLetter <span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> maxPathLength <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> maxPathLengthCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astringbuffer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">StringBuffer</span></a> maxPathExample <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astringbuffer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">StringBuffer</span></a><span class=\"br0\">(</span><span class=\"nu0\">500</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> names <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"st0\">\"audino\"</span>, <span class=\"st0\">\"bagon\"</span>, <span class=\"st0\">\"baltoy\"</span>, <span class=\"st0\">\"banette\"</span>,<br/>        <span class=\"st0\">\"bidoof\"</span>, <span class=\"st0\">\"braviary\"</span>, <span class=\"st0\">\"bronzor\"</span>, <span class=\"st0\">\"carracosta\"</span>, <span class=\"st0\">\"charmeleon\"</span>,<br/>        <span class=\"st0\">\"cresselia\"</span>, <span class=\"st0\">\"croagunk\"</span>, <span class=\"st0\">\"darmanitan\"</span>, <span class=\"st0\">\"deino\"</span>, <span class=\"st0\">\"emboar\"</span>,<br/>        <span class=\"st0\">\"emolga\"</span>, <span class=\"st0\">\"exeggcute\"</span>, <span class=\"st0\">\"gabite\"</span>, <span class=\"st0\">\"girafarig\"</span>, <span class=\"st0\">\"gulpin\"</span>,<br/>        <span class=\"st0\">\"haxorus\"</span>, <span class=\"st0\">\"heatmor\"</span>, <span class=\"st0\">\"heatran\"</span>, <span class=\"st0\">\"ivysaur\"</span>, <span class=\"st0\">\"jellicent\"</span>,<br/>        <span class=\"st0\">\"jumpluff\"</span>, <span class=\"st0\">\"kangaskhan\"</span>, <span class=\"st0\">\"kricketune\"</span>, <span class=\"st0\">\"landorus\"</span>, <span class=\"st0\">\"ledyba\"</span>,<br/>        <span class=\"st0\">\"loudred\"</span>, <span class=\"st0\">\"lumineon\"</span>, <span class=\"st0\">\"lunatone\"</span>, <span class=\"st0\">\"machamp\"</span>, <span class=\"st0\">\"magnezone\"</span>,<br/>        <span class=\"st0\">\"mamoswine\"</span>, <span class=\"st0\">\"nosepass\"</span>, <span class=\"st0\">\"petilil\"</span>, <span class=\"st0\">\"pidgeotto\"</span>, <span class=\"st0\">\"pikachu\"</span>,<br/>        <span class=\"st0\">\"pinsir\"</span>, <span class=\"st0\">\"poliwrath\"</span>, <span class=\"st0\">\"poochyena\"</span>, <span class=\"st0\">\"porygon2\"</span>, <span class=\"st0\">\"porygonz\"</span>,<br/>        <span class=\"st0\">\"registeel\"</span>, <span class=\"st0\">\"relicanth\"</span>, <span class=\"st0\">\"remoraid\"</span>, <span class=\"st0\">\"rufflet\"</span>, <span class=\"st0\">\"sableye\"</span>,<br/>        <span class=\"st0\">\"scolipede\"</span>, <span class=\"st0\">\"scrafty\"</span>, <span class=\"st0\">\"seaking\"</span>, <span class=\"st0\">\"sealeo\"</span>, <span class=\"st0\">\"silcoon\"</span>,<br/>        <span class=\"st0\">\"simisear\"</span>, <span class=\"st0\">\"snivy\"</span>, <span class=\"st0\">\"snorlax\"</span>, <span class=\"st0\">\"spoink\"</span>, <span class=\"st0\">\"starly\"</span>, <span class=\"st0\">\"tirtouga\"</span>,<br/>        <span class=\"st0\">\"trapinch\"</span>, <span class=\"st0\">\"treecko\"</span>, <span class=\"st0\">\"tyrogue\"</span>, <span class=\"st0\">\"vigoroth\"</span>, <span class=\"st0\">\"vulpix\"</span>,<br/>        <span class=\"st0\">\"wailord\"</span>, <span class=\"st0\">\"wartortle\"</span>, <span class=\"st0\">\"whismur\"</span>, <span class=\"st0\">\"wingull\"</span>, <span class=\"st0\">\"yamask\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> recursive<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> part, <span class=\"kw4\">int</span> offset<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>offset <span class=\"sy0\">&gt;</span> maxPathLength<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            maxPathLength <span class=\"sy0\">=</span> offset<span class=\"sy0\">;</span><br/>            maxPathLengthCount <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>offset <span class=\"sy0\">==</span> maxPathLength<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            maxPathLengthCount<span class=\"sy0\">++;</span><br/>            maxPathExample.<span class=\"me1\">setLength</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> offset<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                maxPathExample.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">5</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>  \"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                maxPathExample.<span class=\"me1\">append</span><span class=\"br0\">(</span>part<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">final</span> <span class=\"kw4\">char</span> lastChar <span class=\"sy0\">=</span> part<span class=\"br0\">[</span>offset <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>part<span class=\"br0\">[</span>offset <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> offset<span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> part.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>part<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> lastChar<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> tmp <span class=\"sy0\">=</span> names<span class=\"br0\">[</span>offset<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                names<span class=\"br0\">[</span>offset<span class=\"br0\">]</span> <span class=\"sy0\">=</span> names<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                names<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/>                recursive<span class=\"br0\">(</span>names, offset<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                names<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> names<span class=\"br0\">[</span>offset<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                names<span class=\"br0\">[</span>offset<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> names.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> tmp <span class=\"sy0\">=</span> names<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            names<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> names<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            names<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/>            recursive<span class=\"br0\">(</span>names, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            names<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> names<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            names<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<span class=\"sy0\">;</span><br/>       <span class=\"br0\">}</span><br/>       <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"maximum path length       \u00a0: \"</span> <span class=\"sy0\">+</span> maxPathLength<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"paths of that length      \u00a0: \"</span> <span class=\"sy0\">+</span> maxPathLengthCount<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"example path of that length:\"</span> <span class=\"sy0\">+</span> maxPathExample<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 7, "block": "<pre class=\"text highlighted_source\"># convert a list of unique words to a dictionary<br/>def dictionary:<br/>  reduce .[] as $word ({}; .[$word[0:1]] += [$word])\u00a0;<br/>\u00a0<br/># remove \"word\" from the input dictionary assuming the key is already there:<br/>def remove(word):<br/> .[word[0:1]] -= [word];</pre>"}, {"lang": "Julia", "loc": 37, "block": "<pre class=\"text highlighted_source\">using IterTools.groupby<br/>\u00a0<br/>orderwords(words::Vector) = Dict(w[1][1] =&gt; Set(w) for w in groupby(first, words))<br/>longest(a, b) = ifelse(length(a) &gt; length(b), a, b)<br/>function linkfirst(byfirst::Dict, sofar::Vector)<br/>    @assert(!isempty(sofar))<br/>    chmatch = sofar[end][end]<br/>    if\u00a0! haskey(byfirst, chmatch) return sofar end<br/>    options = setdiff(byfirst[chmatch], sofar)<br/>    if isempty(options)<br/>        return sofar<br/>    else<br/>        alternatives = ( linkfirst(byfirst, vcat(sofar, word)) for word in options )<br/>        mx = reduce(longest, alternatives)<br/>        return mx<br/>    end<br/>end<br/>function llfl(words)<br/>    byfirst = orderwords(words)<br/>    alternatives = ( linkfirst(byfirst, [word]) for word in words )<br/>    return reduce(longest, alternatives)<br/>end<br/>\u00a0<br/>pokemon = String.(unique(split(\"\"\"<br/>    audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon<br/>    cresselia croagunk darmanitan deino emboar emolga exeggcute gabite<br/>    girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan<br/>    kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine<br/>    nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2<br/>    porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking<br/>    sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko<br/>    tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask<br/>    \"\"\")))<br/>\u00a0<br/>l = llfl(pokemon)<br/>println(\"Example of longest seq.:\\n\", join(l, \", \"))<br/>println(\"Max length: \", length(l)</pre>"}, {"lang": "Kotlin", "loc": 62, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> maxPathLength <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> maxPathLengthCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> maxPathExample <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"nu0\">500</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> names <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>    <span class=\"st0\">\"audino\"</span>, <span class=\"st0\">\"bagon\"</span>, <span class=\"st0\">\"baltoy\"</span>, <span class=\"st0\">\"banette\"</span>, <span class=\"st0\">\"bidoof\"</span>, <br/>    <span class=\"st0\">\"braviary\"</span>, <span class=\"st0\">\"bronzor\"</span>, <span class=\"st0\">\"carracosta\"</span>, <span class=\"st0\">\"charmeleon\"</span>, <span class=\"st0\">\"cresselia\"</span>, <br/>    <span class=\"st0\">\"croagunk\"</span>, <span class=\"st0\">\"darmanitan\"</span>, <span class=\"st0\">\"deino\"</span>, <span class=\"st0\">\"emboar\"</span>, <span class=\"st0\">\"emolga\"</span>, <br/>    <span class=\"st0\">\"exeggcute\"</span>, <span class=\"st0\">\"gabite\"</span>, <span class=\"st0\">\"girafarig\"</span>, <span class=\"st0\">\"gulpin\"</span>, <span class=\"st0\">\"haxorus\"</span>, <br/>    <span class=\"st0\">\"heatmor\"</span>, <span class=\"st0\">\"heatran\"</span>, <span class=\"st0\">\"ivysaur\"</span>, <span class=\"st0\">\"jellicent\"</span>, <span class=\"st0\">\"jumpluff\"</span>, <br/>    <span class=\"st0\">\"kangaskhan\"</span>, <span class=\"st0\">\"kricketune\"</span>, <span class=\"st0\">\"landorus\"</span>, <span class=\"st0\">\"ledyba\"</span>, <span class=\"st0\">\"loudred\"</span>, <br/>    <span class=\"st0\">\"lumineon\"</span>, <span class=\"st0\">\"lunatone\"</span>, <span class=\"st0\">\"machamp\"</span>, <span class=\"st0\">\"magnezone\"</span>, <span class=\"st0\">\"mamoswine\"</span>, <br/>    <span class=\"st0\">\"nosepass\"</span>, <span class=\"st0\">\"petilil\"</span>, <span class=\"st0\">\"pidgeotto\"</span>, <span class=\"st0\">\"pikachu\"</span>, <span class=\"st0\">\"pinsir\"</span>, <br/>    <span class=\"st0\">\"poliwrath\"</span>, <span class=\"st0\">\"poochyena\"</span>, <span class=\"st0\">\"porygon2\"</span>, <span class=\"st0\">\"porygonz\"</span>, <span class=\"st0\">\"registeel\"</span>, <br/>    <span class=\"st0\">\"relicanth\"</span>, <span class=\"st0\">\"remoraid\"</span>, <span class=\"st0\">\"rufflet\"</span>, <span class=\"st0\">\"sableye\"</span>, <span class=\"st0\">\"scolipede\"</span>, <br/>    <span class=\"st0\">\"scrafty\"</span>, <span class=\"st0\">\"seaking\"</span>, <span class=\"st0\">\"sealeo\"</span>, <span class=\"st0\">\"silcoon\"</span>, <span class=\"st0\">\"simisear\"</span>, <br/>    <span class=\"st0\">\"snivy\"</span>, <span class=\"st0\">\"snorlax\"</span>, <span class=\"st0\">\"spoink\"</span>, <span class=\"st0\">\"starly\"</span>, <span class=\"st0\">\"tirtouga\"</span>,<br/>    <span class=\"st0\">\"trapinch\"</span>, <span class=\"st0\">\"treecko\"</span>, <span class=\"st0\">\"tyrogue\"</span>, <span class=\"st0\">\"vigoroth\"</span>, <span class=\"st0\">\"vulpix\"</span>,<br/>    <span class=\"st0\">\"wailord\"</span>, <span class=\"st0\">\"wartortle\"</span>, <span class=\"st0\">\"whismur\"</span>, <span class=\"st0\">\"wingull\"</span>, <span class=\"st0\">\"yamask\"</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>fun search<span class=\"br0\">(</span>part<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span>, offset<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>offset <span class=\"sy0\">&gt;</span> maxPathLength<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        maxPathLength <span class=\"sy0\">=</span> offset<br/>        maxPathLengthCount <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>offset <span class=\"sy0\">==</span> maxPathLength<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        maxPathLengthCount++<br/>        maxPathExample.<span class=\"me1\">setLength</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until offset<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            maxPathExample.<span class=\"me1\">append</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">%</span> <span class=\"nu0\">5</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>  \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>            maxPathExample.<span class=\"me1\">append</span><span class=\"br0\">(</span>part<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span>    <br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lastChar <span class=\"sy0\">=</span> part<span class=\"br0\">[</span>offset - <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">last</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in offset until part.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>part<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> lastChar<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tmp <span class=\"sy0\">=</span> names<span class=\"br0\">[</span>offset<span class=\"br0\">]</span><br/>            names<span class=\"br0\">[</span>offset<span class=\"br0\">]</span> <span class=\"sy0\">=</span> names<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            names<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<br/>            search<span class=\"br0\">(</span>names, offset + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            names<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> names<span class=\"br0\">[</span>offset<span class=\"br0\">]</span><br/>            names<span class=\"br0\">[</span>offset<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until names.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tmp <span class=\"sy0\">=</span> names<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        names<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> names<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        names<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<br/>        search<span class=\"br0\">(</span>names, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        names<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> names<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        names<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> tmp<br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Maximum path length        \u00a0: $maxPathLength\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Paths of that length       \u00a0: $maxPathLengthCount\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Example path of that length\u00a0: $maxPathExample\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica", "loc": 21, "block": "<pre class=\"text highlighted_source\">longestChain[list_]\u00a0:= <br/>  NestWhileList[<br/>    Append @@@ <br/>      Select[DeleteDuplicatesBy[<br/>        Tuples[{#, list}], {#[[1, 1]], #[[2]]} &amp;],\u00a0! MemberQ @@ # &amp;&amp; <br/>         StringTake[#[[1, -1]], -1] == StringTake[#[[2]], 1] &amp;] &amp;, <br/>    List /@ list, #\u00a0!= {} &amp;][[-2, 1]];<br/>Print[longestChain[{\"audino\", \"bagon\", \"baltoy\", \"banette\", \"bidoof\", <br/>    \"braviary\", \"bronzor\", \"carracosta\", \"charmeleon\", \"cresselia\", <br/>    \"croagunk\", \"darmanitan\", \"deino\", \"emboar\", \"emolga\", <br/>    \"exeggcute\", \"gabite\", \"girafarig\", \"gulpin\", \"haxorus\", <br/>    \"heatmor\", \"heatran\", \"ivysaur\", \"jellicent\", \"jumpluff\", <br/>    \"kangaskhan\", \"kricketune\", \"landorus\", \"ledyba\", \"loudred\", <br/>    \"lumineon\", \"lunatone\", \"machamp\", \"magnezone\", \"mamoswine\", <br/>    \"nosepass\", \"petilil\", \"pidgeotto\", \"pikachu\", \"pinsir\", <br/>    \"poliwrath\", \"poochyena\", \"porygon2\", \"porygonz\", \"registeel\", <br/>    \"relicanth\", \"remoraid\", \"rufflet\", \"sableye\", \"scolipede\", <br/>    \"scrafty\", \"seaking\", \"sealeo\", \"silcoon\", \"simisear\", \"snivy\", <br/>    \"snorlax\", \"spoink\", \"starly\", \"tirtouga\", \"trapinch\", \"treecko\", <br/>    \"tyrogue\", \"vigoroth\", \"vulpix\", \"wailord\", \"wartortle\", <br/>    \"whismur\", \"wingull\", \"yamask\"}]];</pre>"}, {"lang": "ooRexx", "loc": 76, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/><span class=\"co1\">-- create the searcher and run it</span><br/>searcher = <span class=\"sy0\">.</span>chainsearcher~new<br/>\u00a0<br/>::class chainsearcher<br/>::method init<br/>  <span class=\"kw1\">expose</span> <span class=\"kw6\">max</span> searchsize currentlongest<br/>\u00a0<br/>  pokemon_names = <span class=\"st0\">\"audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon\"</span> -<br/>                  <span class=\"st0\">\"cresselia croagunk darmanitan deino emboar emolga exeggcute gabite\"</span> -<br/>                  <span class=\"st0\">\"girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan\"</span> -<br/>                  <span class=\"st0\">\"kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine\"</span> -<br/>                  <span class=\"st0\">\"nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2\"</span> -<br/>                  <span class=\"st0\">\"porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking\"</span> -<br/>                  <span class=\"st0\">\"sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko\"</span> -<br/>                  <span class=\"st0\">\"tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask\"</span><br/>\u00a0<br/>  pokemon = pokemon_names~makearray<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  searchsize = pokemon~items<br/>  currentlongest = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"searching\"</span> searchsize <span class=\"st0\">\"names...\"</span><br/>  longestchain = <span class=\"sy0\">.</span>array~new<br/>  <span class=\"co1\">-- run the sequence using each possible starting pokemon</span><br/>  <span class=\"kw1\">loop</span> i = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> pokemon~items<br/>      <span class=\"co1\">-- swap the ith name to the front of our list</span><br/>      self~swap<span class=\"br0\">(</span>pokemon, <span class=\"nu0\">1</span>, i<span class=\"br0\">)</span><br/>      <span class=\"co1\">-- run the chain from here</span><br/>      self~searchChain<span class=\"br0\">(</span>pokemon, longestchain, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"co1\">-- swap the name back so we have the list in original form</span><br/>      self~swap<span class=\"br0\">(</span>pokemon, <span class=\"nu0\">1</span>, i<span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"maximum path length:\"</span> longestchain~items<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"paths of that length:\"</span> <span class=\"kw6\">max</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"example path of that length:\"</span><br/>\u00a0<br/>  <span class=\"kw1\">loop</span> <span class=\"kw2\">name</span> <span class=\"kw2\">over</span> longestchain<br/>      <span class=\"kw1\">say</span> <span class=\"st0\">\"    \"</span><span class=\"kw2\">name</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/>::method swap<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> list, a, b<br/>  tmp = list<span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>  list<span class=\"br0\">[</span>a<span class=\"br0\">]</span> = list<span class=\"br0\">[</span>b<span class=\"br0\">]</span><br/>  list<span class=\"br0\">[</span>b<span class=\"br0\">]</span> = tmp<br/>\u00a0<br/><span class=\"co1\">-- recursive search routine for adding to the chain</span><br/>::method searchChain<br/>  <span class=\"kw1\">expose</span> <span class=\"kw6\">max</span> searchsize currentlongest<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> pokemon, longestchain, currentchain<br/>\u00a0<br/>  <span class=\"co1\">-- get the last character</span><br/>  lastchar = pokemon<span class=\"br0\">[</span>currentchain - <span class=\"nu0\">1</span><span class=\"br0\">]</span>~<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">-- now we search through all of the permutations of remaining</span><br/>  <span class=\"co1\">-- matches to see if we can find a longer chain</span><br/>  <span class=\"kw1\">loop</span> i = currentchain <span class=\"kw2\">to</span> searchsize<br/>      <span class=\"co1\">-- for every candidate name from here, recursively extend the chain.</span><br/>      <span class=\"kw1\">if</span> pokemon<span class=\"br0\">[</span>i<span class=\"br0\">]</span>~<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> == lastchar <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>          <span class=\"kw1\">if</span> currentchain == currentLongest <span class=\"kw3\">then</span> <span class=\"kw6\">max</span> += <span class=\"nu0\">1</span><br/>          <span class=\"co1\">-- have we now gone deeper than the current longest chain?</span><br/>          <span class=\"kw3\">else</span> <span class=\"kw1\">if</span> currentchain <span class=\"sy0\">&gt;</span> currentLongest <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>             <span class=\"co1\">-- chuck this result and refill with current set</span><br/>             longestchain~empty<br/>             longestchain~appendall<span class=\"br0\">(</span>pokemon~section<span class=\"br0\">(</span><span class=\"nu0\">1</span>, currentchain - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             longestchain~append<span class=\"br0\">(</span>pokemon<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>             <span class=\"kw6\">max</span> = <span class=\"nu0\">1</span><br/>             currentLongest = currentchain<br/>          <span class=\"kw3\">end</span><br/>          <span class=\"co1\">-- perform the swap again</span><br/>          self~swap<span class=\"br0\">(</span>pokemon, currentchain, i<span class=\"br0\">)</span><br/>          <span class=\"co1\">-- run the chain from here</span><br/>          self~searchChain<span class=\"br0\">(</span>pokemon, longestchain, currentchain + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"co1\">-- swap the name back so we have the list in original form</span><br/>          self~swap<span class=\"br0\">(</span>pokemon, currentchain, i<span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0</pre>"}, {"lang": "OpenEdge/Progress", "loc": 84, "block": "<pre class=\"progress highlighted_source\"><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> cpokemon <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span> <span class=\"kw4\">INITIAL</span> <span class=\"st0\">\"audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon ~<br/>cresselia croagunk darmanitan deino emboar emolga exeggcute gabite ~<br/>girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan ~<br/>kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine ~<br/>nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2 ~<br/>porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking ~<br/>sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko ~<br/>tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask\"</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">DEFINE TEMP-TABLE</span> tt <span class=\"kw1\">NO-UNDO</span><br/>   <span class=\"kw4\">FIELD</span> cname    <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span><br/>   <span class=\"kw4\">FIELD</span> cfirst   <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span><br/>   <span class=\"kw4\">FIELD</span> clast    <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span><br/>   <span class=\"kw4\">FIELD</span> lused    <span class=\"kw3\">AS</span> <span class=\"kw3\">LOGICAL</span><br/>   <span class=\"kw4\">FIELD</span> ilength  <span class=\"kw3\">AS</span> <span class=\"kw3\">INTEGER</span><br/>   <span class=\"kw4\">FIELD</span> imax     <span class=\"kw3\">AS</span> <span class=\"kw3\">INTEGER</span><br/>   <span class=\"kw4\">FIELD</span> cchain   <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span><br/><span class=\"kw3\">INDEX</span> ttname   cname<br/><span class=\"kw3\">INDEX</span> ttfirst  cfirst lused<br/><span class=\"kw3\">INDEX</span> ttlast   clast  lused<br/><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> ii <span class=\"kw3\">AS</span> <span class=\"kw3\">INTEGER</span> <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">DO</span>  ii <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">NUM-ENTRIES</span><span class=\"br0\">(</span> cpokemon<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>   <span class=\"kw1\">CREATE</span> tt<span class=\"sy0\">.</span><br/>   <span class=\"kw1\">ASSIGN</span><br/>      tt<span class=\"sy0\">.</span>cname    <span class=\"sy0\">=</span>  <span class=\"kw1\">ENTRY</span><span class=\"br0\">(</span> ii<span class=\"sy0\">,</span> cpokemon<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span><br/>      tt<span class=\"sy0\">.</span>cfirst   <span class=\"sy0\">=</span>  <span class=\"kw1\">SUBSTRING</span><span class=\"br0\">(</span> tt<span class=\"sy0\">.</span>cname<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>      tt<span class=\"sy0\">.</span>clast    <span class=\"sy0\">=</span>  <span class=\"kw1\">SUBSTRING</span><span class=\"br0\">(</span> tt<span class=\"sy0\">.</span>cname<span class=\"sy0\">,</span> <span class=\"kw3\">LENGTH</span><span class=\"br0\">(</span> tt<span class=\"sy0\">.</span>cname <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>      <span class=\"sy0\">.</span><br/><span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> getChain <span class=\"kw1\">RETURNS</span> <span class=\"kw3\">INTEGER</span> <span class=\"br0\">(</span><br/>   i_cname     <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span><span class=\"sy0\">,</span><br/>   i_clast     <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span><span class=\"sy0\">,</span><br/>   i_ilength   <span class=\"kw3\">AS</span> <span class=\"kw3\">INTEGER</span><span class=\"sy0\">,</span><br/>   i_cchain    <span class=\"kw3\">AS</span> <span class=\"kw4\">CHARACTER</span><br/><span class=\"br0\">)</span><span class=\"sy0\">:</span><br/>   <span class=\"kw1\">DEFINE BUFFER</span> tt <span class=\"kw1\">FOR</span> tt<span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> lend_of_chain <span class=\"kw3\">AS</span> <span class=\"kw3\">LOGICAL</span>     <span class=\"kw1\">NO-UNDO</span> <span class=\"kw4\">INITIAL</span> <span class=\"kw2\">TRUE</span><span class=\"sy0\">.</span><br/>\u00a0<br/>   <span class=\"kw1\">FOR</span> <span class=\"kw1\">EACH</span> tt<br/>      <span class=\"kw1\">WHERE</span> tt<span class=\"sy0\">.</span>cfirst   <span class=\"sy0\">=</span>  i_clast<br/>      <span class=\"kw1\">AND</span>   tt<span class=\"sy0\">.</span>lused    <span class=\"sy0\">=</span>  <span class=\"kw2\">FALSE</span><br/>      <span class=\"kw1\">OR</span>    i_clast     <span class=\"sy0\">=</span>  <span class=\"st0\">\"\"</span><br/>   <span class=\"sy0\">:</span><br/>      <span class=\"me0\">lend_of_chain</span> <span class=\"sy0\">=</span> <span class=\"kw2\">FALSE</span><span class=\"sy0\">.</span><br/>      tt<span class=\"sy0\">.</span>lused <span class=\"sy0\">=</span> <span class=\"kw2\">TRUE</span><span class=\"sy0\">.</span><br/>      getChain<span class=\"br0\">(</span> tt<span class=\"sy0\">.</span>cname<span class=\"sy0\">,</span> tt<span class=\"sy0\">.</span>clast<span class=\"sy0\">,</span> i_ilength <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> i_cchain <span class=\"sy0\">+</span> tt<span class=\"sy0\">.</span>cname <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>      tt<span class=\"sy0\">.</span>lused <span class=\"sy0\">=</span> <span class=\"kw2\">FALSE</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>   <span class=\"kw1\">IF</span> lend_of_chain <span class=\"kw1\">THEN</span> <span class=\"kw1\">DO</span><span class=\"sy0\">:</span><br/>      <span class=\"kw1\">FIND</span> tt <span class=\"kw1\">WHERE</span> tt<span class=\"sy0\">.</span>cname <span class=\"sy0\">=</span> <span class=\"kw1\">ENTRY</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> i_cchain<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>      <span class=\"kw1\">IF</span> i_ilength <span class=\"sy0\">=</span> tt<span class=\"sy0\">.</span>ilength <span class=\"kw1\">THEN</span><br/>         tt<span class=\"sy0\">.</span>imax <span class=\"sy0\">=</span> tt<span class=\"sy0\">.</span>imax <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>      <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span> i_ilength <span class=\"sy0\">&gt;</span> tt<span class=\"sy0\">.</span>ilength <span class=\"kw1\">THEN</span><br/>         <span class=\"kw1\">ASSIGN</span><br/>            tt<span class=\"sy0\">.</span>ilength  <span class=\"sy0\">=</span>  i_ilength<br/>            tt<span class=\"sy0\">.</span>cchain   <span class=\"sy0\">=</span>  i_cchain<br/>            tt<span class=\"sy0\">.</span>imax     <span class=\"sy0\">=</span>  <span class=\"nu0\">1</span><br/>            <span class=\"sy0\">.</span><br/>   <span class=\"kw1\">END</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span><span class=\"sy0\">.</span> <span class=\"coMULTI\">/* getChain */</span><br/>\u00a0<br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> itime      <span class=\"kw3\">AS</span> <span class=\"kw3\">INTEGER</span>     <span class=\"kw1\">NO-UNDO</span> <span class=\"kw4\">EXTENT</span> <span class=\"nu0\">2</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">DEFINE</span> <span class=\"kw3\">VARIABLE</span> lcontinue  <span class=\"kw3\">AS</span> <span class=\"kw3\">LOGICAL</span>     <span class=\"kw1\">NO-UNDO</span><span class=\"sy0\">.</span><br/>\u00a0<br/>itime<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">ETIME</span><span class=\"sy0\">.</span><br/>getChain<span class=\"br0\">(</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>itime<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">ETIME</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span> <span class=\"kw1\">EACH</span> tt <span class=\"kw3\">BY</span> tt<span class=\"sy0\">.</span>ilength DESCENDING<span class=\"sy0\">:</span><br/>   <span class=\"kw1\">MESSAGE</span><br/>      <span class=\"st0\">\"Maximum path length:\"</span>  tt<span class=\"sy0\">.</span>ilength <span class=\"kw1\">SKIP</span><br/>      <span class=\"st0\">\"Paths of that length:\"</span> tt<span class=\"sy0\">.</span>imax <span class=\"kw1\">SKIP</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"st0\">\"Example path of that length:\"</span> tt<span class=\"sy0\">.</span>cchain <span class=\"kw1\">SKIP</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"st0\">\"Time taken:\"</span> <span class=\"kw1\">STRING</span><span class=\"br0\">(</span> <span class=\"kw3\">INTEGER</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> itime<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> itime<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"HH:MM:SS\"</span> <span class=\"br0\">)</span><br/>   <span class=\"kw1\">VIEW-AS</span> <span class=\"kw1\">ALERT-BOX</span> BUTTONS YES<span class=\"sy0\">-</span>NO <span class=\"kw4\">TITLE</span> tt<span class=\"sy0\">.</span>cname <span class=\"kw1\">UPDATE</span> lcontinue<span class=\"sy0\">.</span><br/>   <span class=\"kw1\">IF</span> lcontinue <span class=\"sy0\">=</span> <span class=\"kw2\">FALSE</span> <span class=\"kw1\">THEN</span><br/>      <span class=\"kw1\">STOP</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">END</span><span class=\"sy0\">.</span></pre>"}, {"lang": "PicoLisp", "loc": 15, "block": "<pre class=\"text highlighted_source\">(de pokemonChain (File)<br/>   (let Names (make (in File (while (read) (link @))))<br/>      (for Name Names<br/>         (let C (last (chop Name))<br/>            (set Name<br/>               (filter '((Nm) (pre? C Nm)) Names) ) ) )<br/>      (let Res NIL<br/>         (for Name Names<br/>            (let Lst NIL<br/>               (recur (Name Lst)<br/>                  (if (or (memq Name Lst) (not (val (push 'Lst Name))))<br/>                     (when (&gt; (length Lst) (length Res))<br/>                        (setq Res Lst) )<br/>                     (mapc recurse (val Name) (circ Lst)) ) ) ) )<br/>         (flip Res) ) ) )</pre>"}, {"lang": "Perl", "loc": 27, "block": "<pre class=\"perl highlighted_source\"><span class=\"sy0\">/^</span><span class=\"br0\">(</span><span class=\"sy0\">.</span><span class=\"br0\">)</span><span class=\"sy0\">.*</span><span class=\"br0\">(</span><span class=\"sy0\">.</span><span class=\"br0\">)</span><span class=\"co5\">$/</span><span class=\"sy0\">,</span><span class=\"re0\">$f</span><span class=\"br0\">{</span><span class=\"co3\">$1</span><span class=\"br0\">}</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">=</span><span class=\"co3\">$2</span> <span class=\"kw1\">for</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span><br/>audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon<br/>cresselia croagunk darmanitan deino emboar emolga exeggcute gabite<br/>girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan<br/>kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine<br/>nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2<br/>porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking<br/>sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko<br/>tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask<br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> poke<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$h</span> <span class=\"sy0\">=</span> <span class=\"re0\">$f</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$w</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%$h</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$v</span> <span class=\"sy0\">=</span> <span class=\"re0\">$h</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"re0\">$w</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/delete.html\"><span class=\"kw3\">delete</span></a> <span class=\"re0\">$h</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"re0\">$w</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@w</span><span class=\"sy0\">,</span> <span class=\"re0\">$w</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/m.html\"><span class=\"kw3\">m</span></a> <span class=\"sy0\">=</span> <span class=\"re0\">@w</span> <span class=\"kw1\">if</span> <span class=\"re0\">@w</span> <span class=\"sy0\">&gt;</span> <span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/m.html\"><span class=\"kw3\">m</span></a><span class=\"sy0\">;</span><br/>\t\tpoke<span class=\"br0\">(</span><span class=\"re0\">$v</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/pop.html\"><span class=\"kw3\">pop</span></a> <span class=\"re0\">@w</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$h</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"re0\">$w</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$v</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>poke<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%f</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/m.html\"><span class=\"kw3\">m</span></a><span class=\"sy0\">.</span><span class=\"st0\">\": @m<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 48, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@names</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span><br/>    audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon<br/>    cresselia croagunk darmanitan deino emboar emolga exeggcute gabite<br/>    girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan<br/>    kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine<br/>    nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2<br/>    porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking<br/>    sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko<br/>    tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask<br/><span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"sy0\">@</span><span class=\"kw1\">last</span> <span class=\"sy0\">=</span> <span class=\"re0\">@names</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span><span class=\"sy0\">.</span><span class=\"kw3\">substr</span><span class=\"br0\">(</span><span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ord</span> <span class=\"br0\">}</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@succs</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">xx</span> <span class=\"nu0\">128</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"re0\">@names</span><span class=\"sy0\">.</span><span class=\"kw3\">kv</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$name</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$ix</span> <span class=\"sy0\">=</span> <span class=\"re0\">$name</span><span class=\"sy0\">.</span><span class=\"me1\">ord</span><span class=\"sy0\">;</span> <span class=\"co1\"># $name.substr(0,1).ord</span><br/>    <span class=\"kw3\">push</span> <span class=\"re0\">@succs</span><span class=\"br0\">[</span><span class=\"re0\">$ix</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$OUT</span> <span class=\"sy0\">=</span> open <span class=\"st0\">\"llfl.new\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>w <span class=\"kw1\">or</span> <span class=\"kw1\">die</span> <span class=\"st0\">\"Can't create llfl.new: $!\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$OUT</span><span class=\"sy0\">.</span><span class=\"kw3\">print</span><span class=\"sy0\">:</span> chr<span class=\"br0\">(</span><span class=\"re0\">$_</span> <span class=\"sy0\">+</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..^</span> <span class=\"re0\">@names</span><span class=\"sy0\">;</span><br/>close <span class=\"re0\">$OUT</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$new</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">@names</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$len</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"re0\">$new</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"Length { $len++ }: $new candidates\"</span><span class=\"sy0\">;</span><br/>    shell <span class=\"st_h\">'mv llfl.new llfl.known'</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$IN</span> <span class=\"sy0\">=</span> open <span class=\"st0\">\"llfl.known\"</span> <span class=\"kw1\">or</span> <span class=\"kw1\">die</span> <span class=\"st0\">\"Can't reopen llfl.known: $!\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$OUT</span> <span class=\"sy0\">=</span> open <span class=\"st0\">\"llfl.new\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>w <span class=\"kw1\">or</span> <span class=\"kw1\">die</span> <span class=\"st0\">\"Can't create llfl.new: $!\"</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$new</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">loop</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$cand</span> <span class=\"sy0\">=</span> <span class=\"re0\">$IN</span><span class=\"sy0\">.</span><span class=\"me1\">get</span> <span class=\"sy0\">//</span> <span class=\"kw1\">last</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"re0\">@succs</span><span class=\"br0\">[</span><span class=\"sy0\">@</span><span class=\"kw1\">last</span><span class=\"br0\">[</span><span class=\"re0\">$cand</span><span class=\"sy0\">.</span><span class=\"me1\">ord</span> <span class=\"sy0\">-</span> <span class=\"nu0\">32</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">my</span> <span class=\"re0\">$ic</span> <span class=\"sy0\">=</span> chr<span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$cand</span> <span class=\"sy0\">~~</span> <span class=\"co2\">/$ic/</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$OUT</span><span class=\"sy0\">.</span><span class=\"kw3\">print</span><span class=\"sy0\">:</span> <span class=\"re0\">$ic</span><span class=\"sy0\">,</span><span class=\"re0\">$cand</span><span class=\"sy0\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$new</span><span class=\"sy0\">++;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$IN</span><span class=\"sy0\">.</span><span class=\"me1\">close</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$OUT</span><span class=\"sy0\">.</span><span class=\"me1\">close</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$IN</span> <span class=\"sy0\">=</span> open <span class=\"st0\">\"llfl.known\"</span> <span class=\"kw1\">or</span> <span class=\"kw1\">die</span> <span class=\"st0\">\"Can't reopen llfl.known: $!\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$eg</span> <span class=\"sy0\">=</span> <span class=\"re0\">$IN</span><span class=\"sy0\">.</span><span class=\"me1\">lines</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Length of longest: \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$eg</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"kw3\">join</span> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <span class=\"re0\">$eg</span><span class=\"sy0\">.</span><span class=\"me1\">ords</span><span class=\"sy0\">.</span><span class=\"kw3\">reverse</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"re0\">@names</span><span class=\"br0\">[</span><span class=\"re0\">$_</span> <span class=\"sy0\">-</span> <span class=\"nu0\">32</span><span class=\"br0\">]</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 77, "block": "<pre class=\"text highlighted_source\">constant words = {\"audino\",\"bagon\",\"baltoy\",\"banette\",\"bidoof\",\"braviary\",\"bronzor\",\"carracosta\",\"charmeleon\",\"cresselia\",\"croagunk\",<br/>                  \"darmanitan\",\"deino\",\"emboar\",\"emolga\",\"exeggcute\",\"gabite\",\"girafarig\",\"gulpin\",\"haxorus\",\"heatmor\",\"heatran\",<br/>                  \"ivysaur\",\"jellicent\",\"jumpluff\",\"kangaskhan\",\"kricketune\",\"landorus\",\"ledyba\",\"loudred\",\"lumineon\",\"lunatone\",<br/>                  \"machamp\",\"magnezone\",\"mamoswine\",\"nosepass\",\"petilil\",\"pidgeotto\",\"pikachu\",\"pinsir\",\"poliwrath\",\"poochyena\",<br/>                  \"porygon2\",\"porygonz\",\"registeel\",\"relicanth\",\"remoraid\",\"rufflet\",\"sableye\",\"scolipede\",\"scrafty\",\"seaking\",<br/>                  \"sealeo\",\"silcoon\",\"simisear\",\"snivy\",\"snorlax\",\"spoink\",\"starly\",\"tirtouga\",\"trapinch\",\"treecko\",\"tyrogue\",<br/>                  \"vigoroth\",\"vulpix\",\"wailord\",\"wartortle\",\"whismur\",\"wingull\",\"yamask\"}<br/>\u00a0<br/>function word_chains()<br/>sequence first = repeat(0,256),             -- start of chains for a given letter<br/>                                            -- first['a']=1, first['b']=2, first['c']=8, etc.<br/>         snext = repeat(0,length(words))    -- chains of words starting with the same letter<br/>                                            -- a: snext[1]=0, b: snext[2..7]={3,4,5,6,7,0}, etc.<br/>    for i=1 to length(words) do<br/>        integer ch = words[i][1]<br/>        if first[ch]=0 then<br/>            first[ch] = i<br/>        end if<br/>        for j=i+1 to length(words) do<br/>            if words[j][1]=ch then<br/>                snext[i] = j<br/>                exit<br/>            end if<br/>        end for<br/>    end for<br/>    return {first,snext}<br/>end function<br/>\u00a0<br/>constant {first,snext} = word_chains()<br/>\u00a0<br/>-- maintain words already taken as a linked list:<br/>integer tstart<br/>sequence taken = repeat(0,length(words))    -- 0=no, -1=end of chain, +ve=next<br/>\u00a0<br/>-- and keep a copy of the best for later<br/>integer bstart<br/>sequence best<br/>integer maxn = 0<br/>integer count<br/>\u00a0<br/>procedure try(integer ch, integer last, integer n)<br/>    integer next = first[ch]<br/>    while next!=0 do<br/>        if taken[next]=0 then<br/>            taken[last] = next<br/>            taken[next] = -1<br/>            try(words[next][$],next,n+1)<br/>            taken[last] = -1<br/>            taken[next] = 0<br/>        end if<br/>        next = snext[next]<br/>    end while<br/>    if n&gt;maxn then<br/>        bstart = tstart<br/>        best = taken<br/>        maxn = n<br/>        count = 1<br/>    elsif n=maxn then<br/>        count += 1<br/>    end if<br/>end procedure<br/>\u00a0<br/>atom t0=time()<br/>\u00a0<br/>for i=1 to length(words) do<br/>    tstart = i<br/>    taken[i] = -1<br/>    try(words[i][$],i,1)<br/>    taken[i] = 0<br/>end for<br/>\u00a0<br/>printf(1,\"Runtime:\u00a0%2.3f seconds. Max length:%d, found\u00a0%d of such, one of which is:\\n\",{time()-t0,maxn,count})<br/>while 1 do<br/>    printf(1,\"%s \",words[bstart])<br/>    bstart = best[bstart]<br/>    if bstart=-1 then exit end if<br/>end while</pre>"}, {"lang": "Prolog", "loc": 77, "block": "<pre class=\"prolog highlighted_source\"><span class=\"sy1\">:-</span> use_module<span class=\"br0\">(</span>library<span class=\"br0\">(</span>lambda<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">dynamic</span></a> res<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"sy4\">.</span><br/>\u00a0<br/>last_first<span class=\"br0\">(</span>Len<span class=\"sy4\">,</span> Nb<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tretractall<span class=\"br0\">(</span>res<span class=\"br0\">(</span>_<span class=\"sy4\">,</span>_<span class=\"sy4\">,</span>_<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tassert<span class=\"br0\">(</span>res<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"co1\">% compute all the lists of connected words</span><br/>\tlast_first<span class=\"sy4\">,</span><br/>\tres<span class=\"br0\">(</span>Len<span class=\"sy4\">,</span> Nb<span class=\"sy4\">,</span> L1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"co1\">% to have only the words</span><br/>\tmaplist<span class=\"br0\">(</span>\\X^Y^<span class=\"br0\">(</span>X <span class=\"sy6\">=</span> <span class=\"br0\">[</span>Y<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> _<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> L1<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% create  the lists of connected words (initiate the first word)</span><br/>last_first <span class=\"sy1\">:-</span><br/>\tinit<span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tforall<span class=\"br0\">(</span>select<span class=\"br0\">(</span>Word<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> L1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t       <span class=\"sy2\">\\+</span>lance_p<span class=\"br0\">(</span><span class=\"br0\">[</span>Word <span class=\"sy5\">|</span> L1<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% compute all the lists beginning with a word</span><br/><span class=\"co1\">% memorize the longest</span><br/>lance_p<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tp<span class=\"br0\">(</span>LF<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">retract</span></a><span class=\"br0\">(</span>res<span class=\"br0\">(</span>Len<span class=\"sy4\">,</span> Nb<span class=\"sy4\">,</span> Lst<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tlength<span class=\"br0\">(</span>LF<span class=\"sy4\">,</span> Len1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>  Len1 <span class=\"sy6\">&gt;</span> Len<br/>\t<span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>  assert<span class=\"br0\">(</span>res<span class=\"br0\">(</span>Len1<span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> LF<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span>   Len1 <span class=\"sy6\">=</span> Len<br/>\t<span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>  Nb1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Nb <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t    assert<span class=\"br0\">(</span>res<span class=\"br0\">(</span>Len<span class=\"sy4\">,</span> Nb1<span class=\"sy4\">,</span> Lst<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"sy4\">;</span>   assert<span class=\"br0\">(</span>res<span class=\"br0\">(</span>Len<span class=\"sy4\">,</span> Nb<span class=\"sy4\">,</span> Lst<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">fail</span></a><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% describe the property of the list of connected words</span><br/>p<span class=\"br0\">(</span><span class=\"br0\">[</span>A <span class=\"sy5\">|</span> T<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>A <span class=\"sy5\">|</span> L<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tselect<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> L<span class=\"sy4\">,</span> L1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tp0<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tT <span class=\"sy6\">=</span> <span class=\"br0\">[</span>B <span class=\"sy5\">|</span> T1<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\tp<span class=\"br0\">(</span><span class=\"br0\">[</span>B <span class=\"sy5\">|</span> T1<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>B <span class=\"sy5\">|</span> L1<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% a list with one element is valid</span><br/>p<span class=\"br0\">(</span><span class=\"br0\">[</span>_<span class=\"br0\">]</span><span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">% are words conected\u00a0?</span><br/>p0<span class=\"br0\">(</span><span class=\"br0\">[</span>_<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> W<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>_<span class=\"sy4\">,</span> W<span class=\"sy4\">,</span> _<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% each word is associated with its first and last letters</span><br/><span class=\"co1\">% audino --&gt; [audino, a, o]</span><br/>init<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\u00a0<br/>\tL0 <span class=\"sy6\">=</span> <span class=\"br0\">[</span> audino<span class=\"sy4\">,</span> bagon<span class=\"sy4\">,</span> baltoy<span class=\"sy4\">,</span> banette<span class=\"sy4\">,</span> bidoof<span class=\"sy4\">,</span> braviary<span class=\"sy4\">,</span> bronzor<span class=\"sy4\">,</span><br/>\t     carracosta<span class=\"sy4\">,</span> charmeleon<span class=\"sy4\">,</span> cresselia<span class=\"sy4\">,</span> croagunk<span class=\"sy4\">,</span> darmanitan<span class=\"sy4\">,</span> deino<span class=\"sy4\">,</span><br/>\t     emboar<span class=\"sy4\">,</span> emolga<span class=\"sy4\">,</span> exeggcute<span class=\"sy4\">,</span> gabite<span class=\"sy4\">,</span> girafarig<span class=\"sy4\">,</span> gulpin<span class=\"sy4\">,</span> haxorus<span class=\"sy4\">,</span><br/>\t     heatmor<span class=\"sy4\">,</span> heatran<span class=\"sy4\">,</span> ivysaur<span class=\"sy4\">,</span> jellicent<span class=\"sy4\">,</span> jumpluff<span class=\"sy4\">,</span> kangaskhan<span class=\"sy4\">,</span><br/>\t     kricketune<span class=\"sy4\">,</span> landorus<span class=\"sy4\">,</span> ledyba<span class=\"sy4\">,</span> loudred<span class=\"sy4\">,</span> lumineon<span class=\"sy4\">,</span> lunatone<span class=\"sy4\">,</span><br/>\t     machamp<span class=\"sy4\">,</span> magnezone<span class=\"sy4\">,</span> mamoswine<span class=\"sy4\">,</span> nosepass<span class=\"sy4\">,</span> petilil<span class=\"sy4\">,</span> pidgeotto<span class=\"sy4\">,</span><br/>\t     pikachu<span class=\"sy4\">,</span> pinsir<span class=\"sy4\">,</span> poliwrath<span class=\"sy4\">,</span> poochyena<span class=\"sy4\">,</span> porygon2<span class=\"sy4\">,</span> porygonz<span class=\"sy4\">,</span><br/>\t     registeel<span class=\"sy4\">,</span> relicanth<span class=\"sy4\">,</span> remoraid<span class=\"sy4\">,</span> rufflet<span class=\"sy4\">,</span> sableye<span class=\"sy4\">,</span> scolipede<span class=\"sy4\">,</span><br/>\t     scrafty<span class=\"sy4\">,</span> seaking<span class=\"sy4\">,</span> sealeo<span class=\"sy4\">,</span> silcoon<span class=\"sy4\">,</span> simisear<span class=\"sy4\">,</span> snivy<span class=\"sy4\">,</span> snorlax<span class=\"sy4\">,</span><br/>\t     spoink<span class=\"sy4\">,</span> starly<span class=\"sy4\">,</span> tirtouga<span class=\"sy4\">,</span> trapinch<span class=\"sy4\">,</span> treecko<span class=\"sy4\">,</span> tyrogue<span class=\"sy4\">,</span> vigoroth<span class=\"sy4\">,</span><br/>\t     vulpix<span class=\"sy4\">,</span> wailord<span class=\"sy4\">,</span> wartortle<span class=\"sy4\">,</span> whismur<span class=\"sy4\">,</span> wingull<span class=\"sy4\">,</span> yamask<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>init_<span class=\"sy4\">,</span> L0<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% audino --&gt; [audino, a, o]</span><br/>init_<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> <span class=\"br0\">[</span>W<span class=\"sy4\">,</span> F<span class=\"sy4\">,</span> L<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tfirst_letter<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> F<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tlast_letter<span class=\"br0\">(</span>W<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>first_letter<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> F<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom_chars</span></a><span class=\"br0\">(</span>A<span class=\"sy4\">,</span> <span class=\"br0\">[</span>F <span class=\"sy5\">|</span> _<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>last_letter<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom_chars</span></a><span class=\"br0\">(</span>A<span class=\"sy4\">,</span> LC<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\treverse<span class=\"br0\">(</span>LC<span class=\"sy4\">,</span> <span class=\"br0\">[</span>L <span class=\"sy5\">|</span> _<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 47, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">collections</span> <span class=\"kw1\">import</span> defaultdict<br/>\u00a0<br/><span class=\"kw1\">def</span> order_words<span class=\"br0\">(</span>words<span class=\"br0\">)</span>:<br/>    byfirst <span class=\"sy0\">=</span> defaultdict<span class=\"br0\">(</span><span class=\"kw2\">set</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> word <span class=\"kw1\">in</span> words:<br/>        byfirst<span class=\"br0\">[</span>word<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">add</span><span class=\"br0\">(</span> word <span class=\"br0\">)</span><br/>    <span class=\"co1\">#byfirst = dict(byfirst)</span><br/>    <span class=\"kw1\">return</span> byfirst<br/>\u00a0<br/><span class=\"kw1\">def</span> linkfirst<span class=\"br0\">(</span>byfirst<span class=\"sy0\">,</span> sofar<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">'''<span class=\"es0\">\\</span><br/>    For all words matching last char of last word in sofar as FIRST char and not in sofar,<br/>    return longest chain as sofar + chain<br/>    '''</span><br/>\u00a0<br/>    <span class=\"kw1\">assert</span> sofar<br/>    chmatch <span class=\"sy0\">=</span> sofar<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    options <span class=\"sy0\">=</span> byfirst<span class=\"br0\">[</span>chmatch<span class=\"br0\">]</span> - <span class=\"kw2\">set</span><span class=\"br0\">(</span>sofar<span class=\"br0\">)</span><br/>    <span class=\"co1\">#print('  linkfirst options:\u00a0%r\u00a0%r'\u00a0% (chmatch, options))</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> options:<br/>        <span class=\"kw1\">return</span> sofar<br/>    <span class=\"kw1\">else</span>:<br/>        alternatives <span class=\"sy0\">=</span> <span class=\"br0\">(</span> linkfirst<span class=\"br0\">(</span>byfirst<span class=\"sy0\">,</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span>sofar<span class=\"br0\">)</span> + <span class=\"br0\">[</span>word<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                         <span class=\"kw1\">for</span> word <span class=\"kw1\">in</span> options <span class=\"br0\">)</span><br/>        mx <span class=\"sy0\">=</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span> alternatives<span class=\"sy0\">,</span> key<span class=\"sy0\">=</span><span class=\"kw2\">len</span> <span class=\"br0\">)</span><br/>        <span class=\"co1\">#input('linkfirst:\u00a0%r'\u00a0% mx)</span><br/>        <span class=\"kw1\">return</span> mx<br/>\u00a0<br/><span class=\"kw1\">def</span> llfl<span class=\"br0\">(</span>words<span class=\"br0\">)</span>:<br/>\u00a0<br/>    byfirst <span class=\"sy0\">=</span> order_words<span class=\"br0\">(</span>words<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>linkfirst<span class=\"br0\">(</span>byfirst<span class=\"sy0\">,</span> <span class=\"br0\">[</span>word<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> word <span class=\"kw1\">in</span> words<span class=\"br0\">)</span><span class=\"sy0\">,</span> key<span class=\"sy0\">=</span><span class=\"kw2\">len</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    pokemon <span class=\"sy0\">=</span> <span class=\"st0\">'''audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon<br/>cresselia croagunk darmanitan deino emboar emolga exeggcute gabite<br/>girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan<br/>kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine<br/>nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2<br/>porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking<br/>sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko<br/>tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask'''</span><br/>    pokemon <span class=\"sy0\">=</span> pokemon.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">lower</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    pokemon <span class=\"sy0\">=</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span><span class=\"kw2\">set</span><span class=\"br0\">(</span>pokemon<span class=\"br0\">)</span><span class=\"br0\">)</span>    <br/>    l <span class=\"sy0\">=</span> llfl<span class=\"br0\">(</span>pokemon<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span>: <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>l<span class=\"br0\">[</span>i:i+<span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 31, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define names \"<br/>  audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon<br/>  cresselia croagunk darmanitan deino emboar emolga exeggcute gabite girafarig<br/>  gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan<br/>  kricketune landorus ledyba loudred lumineon lunatone machamp magnezone<br/>  mamoswine nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena<br/>  porygon2 porygonz registeel relicanth remoraid rufflet sableye scolipede<br/>  scrafty seaking sealeo silcoon simisear snivy snorlax spoink starly tirtouga<br/>  trapinch treecko tyrogue vigoroth vulpix wailord wartortle whismur wingull<br/>  yamask\")<br/>\u00a0<br/>(struct word (first last string) #:prefab)<br/>(define words<br/>  (for/list ([str (string-split names)])<br/>    (word (string-&gt;symbol (substring str 0 1))<br/>          (string-&gt;symbol (substring str (sub1 (string-length str))))<br/>          str)))<br/>\u00a0<br/>(define (find-longest last words)<br/>  (for/fold ([best '()])<br/>            ([w (in-list words)]<br/>             #:when (or (not last) (eq? last (word-first w))))<br/>    (define long (cons w (find-longest (word-last w) (remq w words))))<br/>    (if (&gt; (length long) (length best)) long best)))<br/>\u00a0<br/>(define longest (find-longest #f words))<br/>(printf \"Longest chain found has ~a words:\\n  ~a\\n\"<br/>        (length longest) (string-join (map word-string longest) \" -&gt; \"))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 43, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program finds the  longest path of word's   last\u2500letter \u2500\u2500\u2500\u25ba first-letter.       */</span><br/>@=<span class=\"st0\">'audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon cresselia croagunk darmanitan'</span>,<br/>  <span class=\"st0\">'deino emboar emolga exeggcute gabite girafarig gulpin haxorus heatmor heatran ivysaur jellicent'</span>,<br/>  <span class=\"st0\">'jumpluff kangaskhan kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine'</span>,<br/>  <span class=\"st0\">'nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2 porygonz registeel relicanth'</span>,<br/>  <span class=\"st0\">'remoraid rufflet sableye scolipede scrafty seaking sealeo silcoon simisear snivy snorlax spoink'</span>,<br/>  <span class=\"st0\">'starly tirtouga trapinch treecko tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask'</span><br/>#=<span class=\"kw6\">words</span><span class=\"br0\">(</span>@<span class=\"br0\">)</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> limit <span class=\"sy0\">.</span>;  <span class=\"kw1\">if</span> limit<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> #=limit  <span class=\"coMULTI\">/*allow user to specify a scan limit.  */</span><br/>@<span class=\"sy0\">.</span>=;  $$$=                                       <span class=\"coMULTI\">/*nullify array; and also longest path.*/</span><br/>                  <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #                  <span class=\"coMULTI\">/*build a stemmed array from the list. */</span><br/>                  @<span class=\"sy0\">.</span>i=<span class=\"kw6\">word</span><span class=\"br0\">(</span>@, i<span class=\"br0\">)</span><br/>                  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*i*/</span><br/>MP=<span class=\"nu0\">0</span>;  MPL=<span class=\"nu0\">0</span>                                     <span class=\"coMULTI\">/*the initial   Maximum Path Length.   */</span><br/>                  <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #                  <span class=\"coMULTI\">/*              \u2500       \u2500    \u2500         */</span><br/>                  <span class=\"kw1\">parse</span>  <span class=\"kw2\">value</span>  @<span class=\"sy0\">.</span>1 @<span class=\"sy0\">.</span>j   <span class=\"kw2\">with</span>   @<span class=\"sy0\">.</span>j @<span class=\"sy0\">.</span>1;    <span class=\"kw1\">call</span> scan $$$, <span class=\"nu0\">2</span><br/>                  <span class=\"kw1\">parse</span>  <span class=\"kw2\">value</span>  @<span class=\"sy0\">.</span>1 @<span class=\"sy0\">.</span>j   <span class=\"kw2\">with</span>   @<span class=\"sy0\">.</span>j @<span class=\"sy0\">.</span>1<br/>                  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>g=<span class=\"kw6\">words</span><span class=\"br0\">(</span>$$$<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'Of'</span>    #    <span class=\"st0\">\"words,\"</span>    MP    <span class=\"st0\">'path'</span>s<span class=\"br0\">(</span>MP<span class=\"br0\">)</span>    <span class=\"st0\">\"have the maximum path length of\"</span>   g<span class=\"st0\">'.'</span><br/><span class=\"kw1\">say</span>;    <span class=\"kw1\">say</span> <span class=\"st0\">'One example path of that length is: '</span>   <span class=\"kw6\">word</span><span class=\"br0\">(</span>$$$, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">do</span> m=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> g;      <span class=\"kw1\">say</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"nu0\">36</span><span class=\"br0\">)</span>      <span class=\"kw6\">word</span><span class=\"br0\">(</span>$$$, m<span class=\"br0\">)</span>;       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*m*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>s:    <span class=\"kw1\">if</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>;    <span class=\"kw1\">return</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"st0\">'s'</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>   <span class=\"coMULTI\">/*a pluralizer.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>scan: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span> MP # MPL $$$;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> $$$,!;                      p=! - <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  @<span class=\"sy0\">.</span>p  <span class=\"st0\">''</span>  -<span class=\"nu0\">1</span>  LC                 <span class=\"coMULTI\">/*obtain last character of previous @. */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  PARSE obtains first char of @.i*/</span><br/>        <span class=\"kw1\">do</span> i=!  <span class=\"kw2\">to</span> #;  <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>  @<span class=\"sy0\">.</span>i  p  <span class=\"nu0\">2</span>      <span class=\"coMULTI\">/* [\u2193]  scan for the longest word path.*/</span><br/>        <span class=\"kw1\">if</span> p==LC  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>                        <span class=\"coMULTI\">/*is the  first\u2500char  \u2261  last\u2500char\u00a0?   */</span><br/>                       <span class=\"kw1\">if</span>\u00a0!==MPL  <span class=\"kw3\">then</span> MP=MP+<span class=\"nu0\">1</span>   <span class=\"coMULTI\">/*bump the  Maximum Paths  counter.    */</span><br/>                                  <span class=\"kw3\">else</span> <span class=\"kw1\">if</span>\u00a0!<span class=\"sy0\">&gt;</span>MPL  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <a class=\"__cf_email__\" data-cfemail=\"f5d1d1d1c8b5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>1           <span class=\"coMULTI\">/*rebuild. */</span><br/>                                                              <span class=\"kw1\">do</span> n=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span>\u00a0!-<span class=\"nu0\">1</span>;  $$$=$$$ @<span class=\"sy0\">.</span>n<br/>                                                              <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*n*/</span><br/>                                                           $$$=$$$   @<span class=\"sy0\">.</span>i     <span class=\"coMULTI\">/*add last.*/</span><br/>                                                           MP=<span class=\"nu0\">1</span>;     MPL=!   <span class=\"coMULTI\">/*new path.*/</span><br/>                                                      <span class=\"kw3\">end</span><br/>                        <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span>  @<span class=\"sy0\">.</span>! @<span class=\"sy0\">.</span>i   <span class=\"kw2\">with</span>   @<span class=\"sy0\">.</span>i @<span class=\"sy0\">.</span>!;          <span class=\"kw1\">call</span> scan $$$,\u00a0!+<span class=\"nu0\">1</span><br/>                        <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span>  @<span class=\"sy0\">.</span>! @<span class=\"sy0\">.</span>i   <span class=\"kw2\">with</span>   @<span class=\"sy0\">.</span>i @<span class=\"sy0\">.</span>!<br/>                       <span class=\"kw3\">end</span><br/>         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*i*/</span><br/>      <span class=\"kw1\">return</span>                                     <span class=\"coMULTI\">/*exhausted this particular word scan. */</span></pre>"}, {"lang": "Ring", "loc": 69, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Last letter-first letter<br/>\u00a0<br/>ready = []<br/>names = [\"audino\", \"bagon\", \"baltoy\", \"banette\", <br/>               \"bidoof\", \"braviary\", \"bronzor\", \"carracosta\", \"charmeleon\", <br/>               \"cresselia\", \"croagunk\", \"darmanitan\", \"deino\", \"emboar\", <br/>               \"emolga\", \"exeggcute\", \"gabite\", \"girafarig\", \"gulpin\", <br/>               \"haxorus\", \"heatmor\", \"heatran\", \"ivysaur\", \"jellicent\", <br/>               \"jumpluff\", \"kangaskhan\", \"kricketune\", \"landorus\", \"ledyba\", <br/>               \"loudred\", \"lumineon\", \"lunatone\", \"machamp\", \"magnezone\", <br/>               \"mamoswine\", \"nosepass\", \"petilil\", \"pidgeotto\", \"pikachu\", <br/>               \"pinsir\", \"poliwrath\", \"poochyena\", \"porygon2\", \"porygonz\", <br/>               \"registeel\", \"relicanth\", \"remoraid\", \"rufflet\", \"sableye\", <br/>               \"scolipede\", \"scrafty\", \"seaking\", \"sealeo\", \"silcoon\", <br/>               \"simisear\", \"snivy\", \"snorlax\", \"spoink\", \"starly\", \"tirtouga\", <br/>               \"trapinch\", \"treecko\", \"tyrogue\", \"vigoroth\", \"vulpix\", <br/>               \"wailord\", \"wartortle\", \"whismur\", \"wingull\", \"yamask\"]<br/>strbegin = \"gabite\"<br/>strdir = \"first\"<br/>nr = 1<br/>add(ready,strbegin)<br/>see strbegin + nl<br/>while true<br/>          if strdir = \"first\"<br/>             strc = right(strbegin, 1)<br/>             flag = 1<br/>             nr = nr + 1<br/>             if nr &lt;= len(names) <br/>                if left(names[nr],1) = strc<br/>                   for n = 1 to len(ready)<br/>                         if names[nr] = ready[n]<br/>                            flag = 0<br/>                         ok<br/>                   next<br/>                   if flag = 1<br/>                      add(ready,names[nr])<br/>                      see names[nr] + nl<br/>                      strbegin = names[nr]<br/>                      nr = 0<br/>                      strdir = \"last\"<br/>                      loop<br/>                   ok<br/>                ok<br/>              ok<br/>          else<br/>             strc = right(strbegin, 1)<br/>             flag = 1<br/>             nr = nr + 1<br/>             if nr &lt;= len(names)<br/>                if left(names[nr],1) = strc<br/>                   for n = 1 to len(ready)<br/>                         if names[nr] = ready[n]<br/>                            flag = 0<br/>                         ok<br/>                   next<br/>                   if flag = 1<br/>                      add(ready,names[nr])<br/>                      see names[nr] + nl<br/>                      strbegin = names[nr]<br/>                      nr = 0<br/>                      strdir = \"first\"<br/>                      loop<br/>                   ok<br/>                ok<br/>             ok<br/>          ok<br/>end<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 41, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> LastL_FirstL<br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>names<span class=\"br0\">)</span><br/>    <span class=\"re1\">@names</span> = names.<span class=\"me1\">dup</span><br/>    <span class=\"re1\">@first</span> = names.<span class=\"me1\">group_by</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>name<span class=\"sy0\">|</span> name<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"re1\">@sequences</span> = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> add_name<span class=\"br0\">(</span>seq<span class=\"br0\">)</span><br/>    last_letter = seq<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    potentials = <span class=\"re1\">@first</span>.<span class=\"kw1\">include</span>?<span class=\"br0\">(</span>last_letter<span class=\"br0\">)</span>\u00a0? <span class=\"br0\">(</span>@first<span class=\"br0\">[</span>last_letter<span class=\"br0\">]</span> <span class=\"sy0\">-</span> seq<span class=\"br0\">)</span>\u00a0: <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> potentials.<span class=\"me1\">empty</span>?<br/>      <span class=\"re1\">@sequences</span> <span class=\"sy0\">&lt;&lt;</span> seq<br/>    <span class=\"kw1\">else</span><br/>      potentials.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>name<span class=\"sy0\">|</span> add_name<span class=\"br0\">(</span>seq <span class=\"sy0\">+</span> <span class=\"br0\">[</span>name<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> search<br/>    <span class=\"re1\">@names</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>name<span class=\"sy0\">|</span> add_name <span class=\"br0\">[</span>name<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    max = <span class=\"re1\">@sequences</span>.<span class=\"me1\">max_by</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>seq<span class=\"sy0\">|</span> seq.<span class=\"me1\">length</span><span class=\"br0\">}</span>.<span class=\"me1\">length</span><br/>    max_seqs = <span class=\"re1\">@sequences</span>.<span class=\"kw3\">select</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>seq<span class=\"sy0\">|</span> seq.<span class=\"me1\">length</span> == max<span class=\"br0\">}</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"there are #{@sequences.length} possible sequences\"</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"the longest is #{max} names long\"</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"there are #{max_seqs.length} such sequences. one is:\"</span><br/>    max_seqs.<span class=\"me1\">last</span>.<span class=\"me1\">each_with_index</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>name, idx<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\" \u00a0%2d\u00a0%s\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>idx<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, name<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>names = <span class=\"sy0\">%</span>w<span class=\"br0\">{</span><br/>  audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon<br/>  cresselia croagunk darmanitan deino emboar emolga exeggcute gabite<br/>  girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan<br/>  kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine<br/>  nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2<br/>  porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking<br/>  sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko<br/>  tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask<br/><span class=\"br0\">}</span><br/>\u00a0<br/>lf = LastL_FirstL.<span class=\"me1\">new</span><span class=\"br0\">(</span>names<span class=\"br0\">)</span><br/>lf.<span class=\"me1\">search</span></pre>"}, {"lang": "Scala", "loc": 21, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> LastLetterFirstLetterNaive <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> solve<span class=\"br0\">(</span>names<span class=\"sy0\">:</span> Set<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> extend<span class=\"br0\">(</span>solutions<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>List<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>List<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> more <span class=\"sy0\">=</span> solutions.<span class=\"me1\">flatMap</span><span class=\"br0\">{</span>solution <span class=\"sy0\">=&gt;</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lastLetter <span class=\"sy0\">=</span> solution.<span class=\"me1\">head</span> takeRight <span class=\"nu0\">1</span><br/>        <span class=\"br0\">(</span>names -- solution<span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> equalsIgnoreCase lastLetter<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">::</span> solution<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>more.<span class=\"me1\">isEmpty</span><span class=\"br0\">)</span> solutions <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> extend<span class=\"br0\">(</span>more<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    extend<span class=\"br0\">(</span>names.<span class=\"me1\">toList</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>List<span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">reverse</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> names70 <span class=\"sy0\">=</span> Set<span class=\"br0\">(</span><span class=\"st0\">\"audino\"</span>, <span class=\"st0\">\"bagon\"</span>, <span class=\"st0\">\"baltoy\"</span>, <span class=\"st0\">\"banette\"</span>, <span class=\"st0\">\"bidoof\"</span>, <span class=\"st0\">\"braviary\"</span>, <span class=\"st0\">\"bronzor\"</span>, <span class=\"st0\">\"carracosta\"</span>, <span class=\"st0\">\"charmeleon\"</span>, <span class=\"st0\">\"cresselia\"</span>, <span class=\"st0\">\"croagunk\"</span>, <span class=\"st0\">\"darmanitan\"</span>, <span class=\"st0\">\"deino\"</span>, <span class=\"st0\">\"emboar\"</span>, <span class=\"st0\">\"emolga\"</span>, <span class=\"st0\">\"exeggcute\"</span>, <span class=\"st0\">\"gabite\"</span>, <span class=\"st0\">\"girafarig\"</span>, <span class=\"st0\">\"gulpin\"</span>, <span class=\"st0\">\"haxorus\"</span>, <span class=\"st0\">\"heatmor\"</span>, <span class=\"st0\">\"heatran\"</span>, <span class=\"st0\">\"ivysaur\"</span>, <span class=\"st0\">\"jellicent\"</span>, <span class=\"st0\">\"jumpluff\"</span>, <span class=\"st0\">\"kangaskhan\"</span>, <span class=\"st0\">\"kricketune\"</span>, <span class=\"st0\">\"landorus\"</span>, <span class=\"st0\">\"ledyba\"</span>, <span class=\"st0\">\"loudred\"</span>, <span class=\"st0\">\"lumineon\"</span>, <span class=\"st0\">\"lunatone\"</span>, <span class=\"st0\">\"machamp\"</span>, <span class=\"st0\">\"magnezone\"</span>, <span class=\"st0\">\"mamoswine\"</span>, <span class=\"st0\">\"nosepass\"</span>, <span class=\"st0\">\"petilil\"</span>, <span class=\"st0\">\"pidgeotto\"</span>, <span class=\"st0\">\"pikachu\"</span>, <span class=\"st0\">\"pinsir\"</span>, <span class=\"st0\">\"poliwrath\"</span>, <span class=\"st0\">\"poochyena\"</span>, <span class=\"st0\">\"porygon2\"</span>, <span class=\"st0\">\"porygonz\"</span>, <span class=\"st0\">\"registeel\"</span>, <span class=\"st0\">\"relicanth\"</span>, <span class=\"st0\">\"remoraid\"</span>, <span class=\"st0\">\"rufflet\"</span>, <span class=\"st0\">\"sableye\"</span>, <span class=\"st0\">\"scolipede\"</span>, <span class=\"st0\">\"scrafty\"</span>, <span class=\"st0\">\"seaking\"</span>, <span class=\"st0\">\"sealeo\"</span>, <span class=\"st0\">\"silcoon\"</span>, <span class=\"st0\">\"simisear\"</span>, <span class=\"st0\">\"snivy\"</span>, <span class=\"st0\">\"snorlax\"</span>, <span class=\"st0\">\"spoink\"</span>, <span class=\"st0\">\"starly\"</span>, <span class=\"st0\">\"tirtouga\"</span>, <span class=\"st0\">\"trapinch\"</span>, <span class=\"st0\">\"treecko\"</span>, <span class=\"st0\">\"tyrogue\"</span>, <span class=\"st0\">\"vigoroth\"</span>, <span class=\"st0\">\"vulpix\"</span>, <span class=\"st0\">\"wailord\"</span>, <span class=\"st0\">\"wartortle\"</span>, <span class=\"st0\">\"whismur\"</span>, <span class=\"st0\">\"wingull\"</span>, <span class=\"st0\">\"yamask\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> solutions <span class=\"sy0\">=</span> solve<span class=\"br0\">(</span>names70<span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Maximum path length: ${solutions.head.length}\"</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Paths of that length: ${solutions.size}\"</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"Example path of that length:\"</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>solutions.<span class=\"me1\">head</span>.<span class=\"me1\">sliding</span><span class=\"br0\">(</span><span class=\"nu0\">7</span>,<span class=\"nu0\">7</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"st0\">\"  \"</span>+<span class=\"sy0\">_</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 70, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>var integer: maxPathLength is 0;<br/>var integer: maxPathLengthCount is 0;<br/>var string: maxPathExample is \"\";<br/>\u00a0<br/>var array string: names is [] (<br/>    \"audino\", \"bagon\", \"baltoy\", \"banette\", \"bidoof\", \"braviary\", \"bronzor\",<br/>    \"carracosta\", \"charmeleon\", \"cresselia\", \"croagunk\", \"darmanitan\", \"deino\",<br/>    \"emboar\", \"emolga\", \"exeggcute\", \"gabite\", \"girafarig\", \"gulpin\", \"haxorus\",<br/>    \"heatmor\", \"heatran\", \"ivysaur\", \"jellicent\", \"jumpluff\", \"kangaskhan\",<br/>    \"kricketune\", \"landorus\", \"ledyba\", \"loudred\", \"lumineon\", \"lunatone\",<br/>    \"machamp\", \"magnezone\", \"mamoswine\", \"nosepass\", \"petilil\", \"pidgeotto\",<br/>    \"pikachu\", \"pinsir\", \"poliwrath\", \"poochyena\", \"porygon2\", \"porygonz\",<br/>    \"registeel\", \"relicanth\", \"remoraid\", \"rufflet\", \"sableye\", \"scolipede\",<br/>    \"scrafty\", \"seaking\", \"sealeo\", \"silcoon\", \"simisear\", \"snivy\", \"snorlax\",<br/>    \"spoink\", \"starly\", \"tirtouga\", \"trapinch\", \"treecko\", \"tyrogue\", \"vigoroth\",<br/>    \"vulpix\", \"wailord\", \"wartortle\", \"whismur\", \"wingull\", \"yamask\");<br/>\u00a0<br/>const proc: recursive (in array string: part, in integer: offset) is func<br/>  local<br/>    var integer: index is 0;<br/>    var char: lastChar is ' ';<br/>    var string: tmp is \"\";<br/>  begin<br/>    if pred(offset) &gt; maxPathLength then<br/>      maxPathLength\u00a0:= pred(offset);<br/>      maxPathLengthCount\u00a0:= 1;<br/>    elsif pred(offset) = maxPathLength then<br/>      incr(maxPathLengthCount);<br/>      maxPathExample\u00a0:= \"\";<br/>      for index range 1 to pred(offset) do<br/>        if pred(index) rem 5 = 0 then<br/>          maxPathExample &amp;:= \"\\n  \";<br/>        else<br/>          maxPathExample &amp;:= \" \";<br/>        end if;<br/>        maxPathExample &amp;:= part[index];<br/>      end for;<br/>    end if;<br/>    lastChar\u00a0:= part[pred(offset)][length(part[pred(offset)])];<br/>    for index range offset to length(part) do<br/>      if part[index][1] = lastChar then<br/>        tmp\u00a0:= names[offset];<br/>        names[offset]\u00a0:= names[index];<br/>        names[index]\u00a0:= tmp;<br/>        recursive(names, succ(offset));<br/>        names[index]\u00a0:= names[offset];<br/>        names[offset]\u00a0:= tmp;<br/>      end if;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var integer: index is 0;<br/>    var string: tmp is \"\";<br/>  begin<br/>    for index range 1 to length(names) do<br/>      tmp\u00a0:= names[1];<br/>      names[1]\u00a0:= names[index];<br/>      names[index]\u00a0:= tmp;<br/>      recursive(names, 2);<br/>      names[index]\u00a0:= names[1];<br/>      names[1]\u00a0:= tmp;<br/>    end for;<br/>    writeln(\"maximum path length:  \" &lt;&amp; maxPathLength lpad 4);<br/>    writeln(\"paths of that length: \" &lt;&amp; maxPathLengthCount lpad 4);<br/>    writeln(\"example path of that length:\"  &lt;&amp; maxPathExample);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 49, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> LLFL<span class=\"br0\">(</span><span class=\"kw3\">Array</span> words<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    has f = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    method init <span class=\"br0\">{</span><br/>        words.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>w<span class=\"sy0\">|</span><br/>            var m = w.<span class=\"me1\">match</span><span class=\"br0\">(</span><span class=\"sy0\">/</span>^<span class=\"br0\">(</span>.<span class=\"br0\">)</span>.<span class=\"sy0\">*</span><span class=\"br0\">(</span>.<span class=\"br0\">)</span>$<span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>            f<span class=\"br0\">{</span>m<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">{</span>w<span class=\"br0\">}</span> = m<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    method longest_chain <span class=\"br0\">{</span><br/>\u00a0<br/>        var stack   = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        var longest = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>        func poke<span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            var h = f<span class=\"br0\">{</span>c<span class=\"br0\">}</span><br/>\u00a0<br/>            h.<span class=\"me1\">each_k</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>word<span class=\"sy0\">|</span><br/>                var v = h.<span class=\"me1\">delete</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><br/>                stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>word<span class=\"br0\">)</span><br/>                longest<span class=\"br0\">[</span><span class=\"br0\">]</span> = stack<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>stack.<span class=\"me1\">len</span> <span class=\"sy0\">&gt;</span> longest.<span class=\"me1\">len</span><span class=\"br0\">)</span><br/>                __FUNC__<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"kw1\">if</span> f.<span class=\"me1\">exists</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>                stack.<span class=\"me1\">pop</span><br/>                h<span class=\"br0\">{</span>word<span class=\"br0\">}</span> = v<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        f.<span class=\"me1\">each_k</span> <span class=\"br0\">{</span> poke<span class=\"br0\">(</span>_<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <span class=\"kw2\">return</span> longest<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var words = <span class=\"sy0\">%</span>w<span class=\"br0\">(</span><br/>  audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon<br/>  cresselia croagunk darmanitan deino emboar emolga exeggcute gabite<br/>  girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan<br/>  kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine<br/>  nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2<br/>  porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking<br/>  sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko<br/>  tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask<br/><span class=\"br0\">)</span><br/>\u00a0<br/>var obj = LLFL<span class=\"br0\">(</span>words<span class=\"br0\">)</span><br/>var longest = obj.<span class=\"me1\">longest_chain</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>say <span class=\"st0\">\"#{longest.len}: #{longest.join(' ')}\"</span></pre>"}, {"lang": "Tcl", "loc": 40, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> search <span class=\"br0\">{</span>path arcs<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> solutions <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> c <span class=\"br0\">[</span><span class=\"kw2\">string</span> index <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$path</span> end<span class=\"br0\">]</span> end<span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> i -<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">foreach</span> arc <span class=\"re0\">$arcs</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">incr</span> i<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> index <span class=\"re0\">$arc</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> ne <span class=\"re0\">$c</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t<span class=\"kw1\">set</span> soln <span class=\"br0\">[</span>search <span class=\"br0\">[</span><span class=\"kw2\">concat</span> <span class=\"re0\">$path</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$arc</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">lreplace</span> <span class=\"re0\">$arcs</span> <span class=\"re0\">$i</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">lappend</span> solutions <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$soln</span><span class=\"br0\">]</span> <span class=\"re0\">$soln</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$solutions</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -integer -decreasing -index <span class=\"nu0\">0</span> <span class=\"re0\">$solutions</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"re0\">$path</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> firstlast names <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> solutions <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> i -<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">foreach</span> initial <span class=\"re0\">$names</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">incr</span> i<br/>\t<span class=\"kw1\">set</span> soln <span class=\"br0\">[</span>search <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$initial</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">lreplace</span> <span class=\"re0\">$names</span> <span class=\"re0\">$i</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">lappend</span> solutions <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$soln</span><span class=\"br0\">]</span> <span class=\"re0\">$soln</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -integer -decreasing -index <span class=\"nu0\">0</span> <span class=\"re0\">$solutions</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> names <span class=\"br0\">{</span><br/>    audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon<br/>    cresselia croagunk darmanitan deino emboar emolga exeggcute gabite<br/>    girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff<br/>    kangaskhan kricketune landorus ledyba loudred lumineon lunatone machamp<br/>    magnezone mamoswine nosepass petilil pidgeotto pikachu pinsir poliwrath<br/>    poochyena porygon2 porygonz registeel relicanth remoraid rufflet sableye<br/>    scolipede scrafty seaking sealeo silcoon simisear snivy snorlax spoink<br/>    starly tirtouga trapinch treecko tyrogue vigoroth vulpix wailord wartortle<br/>    whismur wingull yamask<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> path <span class=\"br0\">[</span>firstlast <span class=\"re0\">$names</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Path (length: [llength $path]): $path\"</span></pre>"}, {"lang": "Ursala", "loc": 19, "block": "<pre class=\"text highlighted_source\">#import std<br/>\u00a0<br/>mon = <br/>\u00a0<br/>~&amp;*~ sep`  mat`  -[<br/>   audino bagon baltoy banette bidoof braviary bronzor carracosta charmeleon<br/>   cresselia croagunk darmanitan deino emboar emolga exeggcute gabite<br/>   girafarig gulpin haxorus heatmor heatran ivysaur jellicent jumpluff kangaskhan<br/>   kricketune landorus ledyba loudred lumineon lunatone machamp magnezone mamoswine<br/>   nosepass petilil pidgeotto pikachu pinsir poliwrath poochyena porygon2<br/>   porygonz registeel relicanth remoraid rufflet sableye scolipede scrafty seaking<br/>   sealeo silcoon simisear snivy snorlax spoink starly tirtouga trapinch treecko<br/>   tyrogue vigoroth vulpix wailord wartortle whismur wingull yamask]-<br/>\u00a0<br/>poke = @iiDrzhK16rlXOASK24PiX ~&amp;llrHiFPrYX^=rxS^|\\~&amp;iNCS *=+ ~&amp;rlwNrlCQ^*D/~&amp;+ @h<br/>\u00a0<br/>#show+<br/>\u00a0<br/>example = ~&amp;h poke mon</pre>"}, {"lang": "zkl", "loc": 22, "block": "<pre class=\"text highlighted_source\">pokemon:=(\"audino bagon baltoy banette bidoof braviary \"<br/>   \"bronzor carracosta charmeleon cresselia croagunk darmanitan deino \"<br/>   ...<br/>   \"whismur wingull yamask\").split();<br/>\u00a0<br/>tree:=pokemon.pump(Dictionary(),'wrap(name){ //--&gt; Hash(\"aB\":(\"Bc\",\"Bd\",,,) )<br/>   T( name, pokemon.filter('wrap(nm){ name[-1]==nm[0] }) ) <br/>});<br/>\u00a0<br/>fcn maxPath([(a,_)]ab,[(c,_)]cd){ if(a&gt;c) ab else cd }<br/>fcn walk(name,pathLen,path,tree){  //--&gt;longest path for name<br/>   names:=tree.find(name,T); tree[name]=T; // nuke cycle<br/>   np:=names.reduce('wrap(np,name){<br/>      maxPath(np,walk(name,pathLen+1,String(path,\" \",name),tree));<br/>   },T(0,\"\"));<br/>   tree[name]=names;<br/>   if(np[0]&gt;pathLen) return(np);<br/>   return(pathLen,path);<br/>}<br/>\u00a0<br/>pokemon.reduce('wrap(np,name){ maxPath(walk(name,1,name,tree),np) },T(0,\"\"))<br/>.println();</pre>"}]}