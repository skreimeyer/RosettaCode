{"task": "Continued_fraction", "blocks": [{"lang": "Ada", "loc": 6, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">type</span> Scalar <span class=\"kw1\">is</span> <span class=\"kw3\">digits</span> &lt;&gt;;<br/>\u00a0<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> A <span class=\"br0\">(</span>N\u00a0: <span class=\"kw3\">in</span> Natural<span class=\"br0\">)</span>  <span class=\"kw1\">return</span> Natural;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> B <span class=\"br0\">(</span>N\u00a0: <span class=\"kw3\">in</span> Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural;<br/><span class=\"kw3\">function</span> Continued_Fraction <span class=\"br0\">(</span>Steps\u00a0: <span class=\"kw3\">in</span> Natural<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Scalar;</pre>"}, {"lang": "ALGOL 68", "loc": 27, "block": "<pre class=\"algol68 highlighted_source\">\u00a0<br/><span class=\"kw4\">PROC</span> cf <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> steps<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span><span class=\"br0\">)</span> <span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span><span class=\"br0\">)</span> <span class=\"kw3\">INT</span> b<span class=\"br0\">)</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>  <span class=\"kw3\">REAL</span> result<span class=\"sy1\">;</span><br/>  result <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> n <span class=\"kw2\">FROM</span> steps <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 1 <span class=\"kw2\">DO</span><br/>      result <span class=\"sy1\">:=</span> b<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy1\">+</span> result<span class=\"br0\">)</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  a<span class=\"br0\">(</span>0<span class=\"br0\">)</span> <span class=\"sy1\">+</span> result<br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> asqr2 <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span>n <span class=\"sy1\">=</span> 0 <span class=\"sy1\">|</span> 1 <span class=\"sy1\">|</span> 2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> bsqr2 <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span> 1<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> anap <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span>n <span class=\"sy1\">=</span> 0 <span class=\"sy1\">|</span> 2 <span class=\"sy1\">|</span> n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> bnap <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span>n <span class=\"sy1\">=</span> 1 <span class=\"sy1\">|</span> 1 <span class=\"sy1\">|</span> n <span class=\"sy1\">-</span> 1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> api <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span>n <span class=\"sy1\">=</span> 0 <span class=\"sy1\">|</span> 3 <span class=\"sy1\">|</span> 6<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> bpi <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span>n <span class=\"sy1\">=</span> 1 <span class=\"sy1\">|</span> 1 <span class=\"sy1\">|</span> <span class=\"br0\">(</span>2 <span class=\"sy1\">*</span> n <span class=\"sy1\">-</span> 1<span class=\"br0\">)</span> <span class=\"sy1\">**</span> 2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">INT</span> precision <span class=\"sy1\">=</span> 10000<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Precision: \"</span><span class=\"sy1\">,</span> precision<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Sqr(2):    \"</span><span class=\"sy1\">,</span> cf<span class=\"br0\">(</span>precision<span class=\"sy1\">,</span> asqr2<span class=\"sy1\">,</span> bsqr2<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Napier:    \"</span><span class=\"sy1\">,</span> cf<span class=\"br0\">(</span>precision<span class=\"sy1\">,</span> anap<span class=\"sy1\">,</span> bnap<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Pi:        \"</span><span class=\"sy1\">,</span> cf<span class=\"br0\">(</span>precision<span class=\"sy1\">,</span> api<span class=\"sy1\">,</span> bpi<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "ATS", "loc": 70, "block": "<pre class=\"text highlighted_source\">#include<br/>\"share/atspre_staload.hats\"<br/>//<br/>(* ****** ****** *)<br/>//<br/>(*<br/>** a coefficient function creates double values from in paramters<br/>*)<br/>typedef coeff_f = int -&gt; double<br/>//<br/>(*<br/>** a continued fraction is described by a record of two coefficent<br/>** functions a and b<br/>*)<br/>typedef frac = @{a= coeff_f, b= coeff_f}<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>fun calc<br/>(<br/>  f: frac, n: int<br/>)\u00a0: double = let<br/>//<br/>(*<br/>** recursive definition of the approximation<br/>*)<br/>fun loop<br/>(<br/>  n: int, r: double<br/>)\u00a0: double =<br/>(<br/>if n = 0<br/>  then f.a(0) + r<br/>  else loop (n - 1, f.b(n) / (f.a(n) + r))<br/>// end of [if]<br/>)<br/>//<br/>in<br/>  loop (n, 0.0)<br/>end // end of [calc]<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>val sqrt2 = @{<br/>  a= lam (n: int): double =&gt; if n = 0 then 1.0 else 2.0<br/>,<br/>  b= lam (n: int): double =&gt; 1.0<br/>} (* end of [val] *)<br/>\u00a0<br/>val napier = @{<br/>  a= lam (n: int): double =&gt; if n = 0 then 2.0 else 1.0 * n<br/>,<br/>  b= lam (n: int): double =&gt; if n = 1 then 1.0 else n - 1.0<br/>} (* end of [val] *)<br/>\u00a0<br/>val pi = @{<br/>  a= lam (n: int): double =&gt; if n = 0 then 3.0 else 6.0<br/>,<br/>  b= lam (n: int): double =&gt; let val x = 2.0 * n - 1 in x * x end<br/>}<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>main0 () =<br/>(<br/>  println! (\"sqrt2  = \", calc(sqrt2,  100));<br/>  println! (\"napier = \", calc(napier, 100));<br/>  println! (\"  pi   = \", calc(  pi  , 100));<br/>) (* end of [main0] *)</pre>"}, {"lang": "AutoHotkey", "loc": 47, "block": "<pre class=\"autohotkey highlighted_source\">sqrt2_a<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"co1\">; function definition is as simple as that</span><br/><span class=\"br0\">{</span><br/><span class=\"kw1\">return</span> n?<span class=\"nu0\">2.0</span>:<span class=\"nu0\">1.0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>sqrt2_b<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/><span class=\"kw1\">return</span> <span class=\"nu0\">1.0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>napier_a<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/><span class=\"kw1\">return</span> n?n:<span class=\"nu0\">2.0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>napier_b<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/><span class=\"kw1\">return</span> n<span class=\"sy0\">&gt;</span><span class=\"nu0\">1.0</span>?n<span class=\"sy0\">-</span><span class=\"nu0\">1.0</span>:<span class=\"nu0\">1.0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>pi_a<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/><span class=\"kw1\">return</span> n?<span class=\"nu0\">6.0</span>:<span class=\"nu0\">3.0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>pi_b<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/><span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"sy0\">*</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2.0</span> <span class=\"co1\">; exponentiation operator</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>calc<span class=\"br0\">(</span>f<span class=\"sy0\">,</span>expansions<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>r<span class=\"sy0\">:=</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>i<span class=\"sy0\">:=</span>expansions<br/><span class=\"co1\">; A nasty trick: the names of the two coefficient functions are generated dynamically</span><br/><span class=\"co1\">; a dot surrounded by spaces means string concatenation</span><br/>f_a<span class=\"sy0\">:=</span>f <span class=\"sy0\">.</span> <span class=\"st0\">\"_a\"</span><span class=\"sy0\">,</span>f_b<span class=\"sy0\">:=</span>f <span class=\"sy0\">.</span> <span class=\"st0\">\"_b\"</span><br/>\u00a0<br/><span class=\"kw1\">while</span> i<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"br0\">{</span><br/><span class=\"co1\">; You can see two dynamic function calls here</span><br/>r<span class=\"sy0\">:=</span><span class=\"re0\">%f_b%</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"re0\">%f_a%</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span>r<span class=\"br0\">)</span><br/>i<span class=\"sy0\">--</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">return</span> <span class=\"re0\">%f_a%</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>r<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"sqrt 2 = \"</span> <span class=\"sy0\">.</span> calc<span class=\"br0\">(</span><span class=\"st0\">\"sqrt2\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"`ne = \"</span> <span class=\"sy0\">.</span> calc<span class=\"br0\">(</span><span class=\"st0\">\"napier\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"`npi = \"</span> <span class=\"sy0\">.</span> calc<span class=\"br0\">(</span><span class=\"st0\">\"pi\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span></pre>"}, {"lang": "Axiom", "loc": 4, "block": "<pre class=\"text highlighted_source\">get(obj) == convergents(obj).1000 -- utility to extract the 1000th value<br/>get continuedFraction(1, repeating [1], repeating [2])\u00a0:: Float<br/>get continuedFraction(2, cons(1,[i for i in 1..]), [i for i in 1..])\u00a0:: Float<br/>get continuedFraction(3, [i^2 for i in 1.. by 2], repeating [6])\u00a0:: Float</pre>"}, {"lang": "BBC BASIC", "loc": 16, "block": "<pre class=\"text highlighted_source\">      *FLOAT64<br/>      @% = &amp;1001010<br/>\u00a0<br/>      PRINT \"SQR(2) = \"\u00a0; FNcontfrac(1, 1, \"2\", \"1\")<br/>      PRINT \"     e = \"\u00a0; FNcontfrac(2, 1, \"N\", \"N\")<br/>      PRINT \"    PI = \"\u00a0; FNcontfrac(3, 1, \"6\", \"(2*N+1)^2\")<br/>      END<br/>\u00a0<br/>      REM a$ and b$ are functions of N<br/>      DEF FNcontfrac(a0, b1, a$, b$)<br/>      LOCAL N, expr$<br/>      REPEAT<br/>        N += 1<br/>        expr$ += STR$(EVAL(a$)) + \"+\" + STR$(EVAL(b$)) + \"/(\"<br/>      UNTIL LEN(expr$) &gt; (65500 - N)<br/>      = a0 + b1 / EVAL (expr$ + \"1\" + STRING$(N, \")\"))</pre>"}, {"lang": "C", "loc": 71, "block": "<pre class=\"c highlighted_source\"><span class=\"coMULTI\">/* calculate approximations for continued fractions */</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* kind of function that returns a series of coefficients */</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">double</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>coeff_func<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* calculates the specified number of expansions of the continued fraction<br/> * described by the coefficient series f_a and f_b */</span><br/><span class=\"kw4\">double</span> calc<span class=\"br0\">(</span>coeff_func f_a<span class=\"sy0\">,</span> coeff_func f_b<span class=\"sy0\">,</span> <span class=\"kw4\">unsigned</span> expansions<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> r<span class=\"sy0\">;</span><br/>\ta <span class=\"sy0\">=</span> b <span class=\"sy0\">=</span> r <span class=\"sy0\">=</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">unsigned</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> expansions<span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ta <span class=\"sy0\">=</span> f_a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tb <span class=\"sy0\">=</span> f_b<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tr <span class=\"sy0\">=</span> b <span class=\"sy0\">/</span> <span class=\"br0\">(</span>a <span class=\"sy0\">+</span> r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\ta <span class=\"sy0\">=</span> f_a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> a <span class=\"sy0\">+</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* series for sqrt(2) */</span><br/><span class=\"kw4\">double</span> sqrt2_a<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> n <span class=\"sy0\">?</span> <span class=\"nu16\">2.0</span> <span class=\"sy0\">:</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> sqrt2_b<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* series for the napier constant */</span><br/><span class=\"kw4\">double</span> napier_a<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> n <span class=\"sy0\">?</span> n <span class=\"sy0\">:</span> <span class=\"nu16\">2.0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> napier_b<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu16\">1.0</span> <span class=\"sy0\">?</span> n <span class=\"sy0\">-</span> <span class=\"nu16\">1.0</span> <span class=\"sy0\">:</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* series for pi */</span><br/><span class=\"kw4\">double</span> pi_a<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> n <span class=\"sy0\">?</span> <span class=\"nu16\">6.0</span> <span class=\"sy0\">:</span> <span class=\"nu16\">3.0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">double</span> pi_b<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> c <span class=\"sy0\">=</span> <span class=\"nu16\">2.0</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">-</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> c <span class=\"sy0\">*</span> c<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> sqrt2<span class=\"sy0\">,</span> napier<span class=\"sy0\">,</span> pi<span class=\"sy0\">;</span><br/>\u00a0<br/>\tsqrt2  <span class=\"sy0\">=</span> calc<span class=\"br0\">(</span>sqrt2_a<span class=\"sy0\">,</span>  sqrt2_b<span class=\"sy0\">,</span>  <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tnapier <span class=\"sy0\">=</span> calc<span class=\"br0\">(</span>napier_a<span class=\"sy0\">,</span> napier_b<span class=\"sy0\">,</span> <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tpi     <span class=\"sy0\">=</span> calc<span class=\"br0\">(</span>pi_a<span class=\"sy0\">,</span>     pi_b<span class=\"sy0\">,</span>     <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%12.10g<span class=\"es1\">\\n</span>%12.10g<span class=\"es1\">\\n</span>%12.10g<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> sqrt2<span class=\"sy0\">,</span> napier<span class=\"sy0\">,</span> pi<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 42, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iomanip&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;tuple&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">tuple</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span>,<span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> coeff_t<span class=\"sy4\">;</span> <span class=\"co1\">// coefficients type</span><br/><span class=\"kw4\">typedef</span> coeff_t <span class=\"br0\">(</span><span class=\"sy2\">*</span>func_t<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// callback function type</span><br/>\u00a0<br/><span class=\"kw4\">double</span> calc<span class=\"br0\">(</span>func_t func, <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">double</span> a, b, temp <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy4\">;</span> n <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> <span class=\"sy2\">--</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">tie</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy1\">=</span> func<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        temp <span class=\"sy1\">=</span> b <span class=\"sy2\">/</span> <span class=\"br0\">(</span>a <span class=\"sy2\">+</span> temp<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">tie</span><span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy1\">=</span> func<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> a <span class=\"sy2\">+</span> temp<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>coeff_t sqrt2<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> coeff_t<span class=\"br0\">(</span>n <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy4\">?</span> <span class=\"nu0\">2</span> <span class=\"sy4\">:</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>coeff_t napier<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> coeff_t<span class=\"br0\">(</span>n <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy4\">?</span> n <span class=\"sy4\">:</span> <span class=\"nu0\">2</span>, n <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy4\">?</span> n <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"sy4\">:</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>coeff_t pi<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> coeff_t<span class=\"br0\">(</span>n <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy4\">?</span> <span class=\"nu0\">6</span> <span class=\"sy4\">:</span> <span class=\"nu0\">3</span>, <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy2\">*</span> n <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy2\">*</span> n <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">streamsize</span> old_prec <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span>.<span class=\"me1\">precision</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// set output digits</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <br/>        <span class=\"sy1\">&lt;&lt;</span> calc<span class=\"br0\">(</span>sqrt2, <span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><br/>        <span class=\"sy1\">&lt;&lt;</span> calc<span class=\"br0\">(</span>napier, <span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><br/>        <span class=\"sy1\">&lt;&lt;</span> calc<span class=\"br0\">(</span>pi, <span class=\"nu0\">10000</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><br/>        <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setprecision</span><span class=\"br0\">(</span>old_prec<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// reset precision</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 10, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> cfrac<br/>  <span class=\"br0\">[</span>a b n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">letfn</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>cfrac<span class=\"sy0\">-</span>iter <span class=\"br0\">[</span><span class=\"br0\">[</span>x k<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>a k<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>b <span class=\"br0\">(</span><span class=\"kw1\">inc</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">dec</span> k<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">ffirst</span> <span class=\"br0\">(</span><span class=\"kw1\">take</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">drop</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">iterate</span> cfrac<span class=\"sy0\">-</span>iter <span class=\"br0\">[</span><span class=\"nu0\">1</span> n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> sq2 <span class=\"br0\">(</span>cfrac #<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"nu0\">1.0</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>constantly <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> e <span class=\"br0\">(</span>cfrac #<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"nu0\">2.0</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> #<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"nu0\">1.0</span> <span class=\"br0\">(</span>double <span class=\"br0\">(</span><span class=\"kw1\">dec</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> pi <span class=\"br0\">(</span>cfrac #<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"nu0\">3.0</span> <span class=\"nu0\">6.0</span><span class=\"br0\">)</span> #<span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>x <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2.0</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> x x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">900000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 186, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> show-continued-fractions<span class=\"sy0\">.</span><br/>\u00a0<br/>       environment <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">configuration</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       repository<span class=\"sy0\">.</span><br/>           <span class=\"kw3\">function</span> continued-fractions<br/>           <span class=\"kw3\">function</span> <span class=\"kw3\">all</span> intrinsic<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       fractions-<span class=\"kw1\">main</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw2\">display</span> <span class=\"st0\">\"Square root 2 approximately  \u00a0: \"</span><br/>               continued-fractions<span class=\"br0\">(</span><span class=\"st0\">\"sqrt-2-alpha\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"sqrt-2-beta\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>       <span class=\"kw2\">display</span> <span class=\"st0\">\"Napier constant approximately\u00a0: \"</span><br/>               continued-fractions<span class=\"br0\">(</span><span class=\"st0\">\"napier-alpha\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"napier-beta\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span><br/>       <span class=\"kw2\">display</span> <span class=\"st0\">\"Pi approximately             \u00a0: \"</span><br/>               continued-fractions<span class=\"br0\">(</span><span class=\"st0\">\"pi-alpha\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"pi-beta\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span><br/>\u00a0<br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> show-continued-fractions<span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; **************************************************************<br/>       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       function-id<span class=\"sy0\">.</span> continued-fractions<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> alpha-<span class=\"kw3\">function</span>       <span class=\"kw3\">usage</span> program-<span class=\"kw3\">pointer</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> beta-<span class=\"kw3\">function</span>        <span class=\"kw3\">usage</span> program-<span class=\"kw3\">pointer</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> alpha                <span class=\"kw3\">usage</span> float-long<span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> beta                 <span class=\"kw3\">usage</span> float-long<span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> running              <span class=\"kw3\">usage</span> float-long<span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> i                    <span class=\"kw3\">usage</span> binary-long<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">linkage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> alpha-name           <span class=\"kw3\">pic</span> x <span class=\"kw3\">any</span> <span class=\"kw4\">length</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> beta-name            <span class=\"kw3\">pic</span> x <span class=\"kw3\">any</span> <span class=\"kw4\">length</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> iterations           <span class=\"kw3\">pic</span> <span class=\"nu0\">9</span> <span class=\"kw3\">any</span> <span class=\"kw4\">length</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> approximation        <span class=\"kw3\">usage</span> float-long<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span> <span class=\"kw3\">using</span><br/>           alpha-name beta-name iterations<br/>           returning approximation<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">set</span> alpha-<span class=\"kw3\">function</span> <span class=\"kw2\">to</span> entry alpha-name<br/>       <span class=\"kw1\">if</span> alpha-<span class=\"kw3\">function</span> <span class=\"sy0\">=</span> <span class=\"kw3\">null</span> <span class=\"kw3\">then</span><br/>           <span class=\"kw2\">display</span> <span class=\"st0\">\"error: no \"</span> alpha-name <span class=\"st0\">\" function\"</span> <span class=\"kw3\">upon</span> syserr<br/>           goback<br/>       end-<span class=\"kw1\">if</span><br/>       <span class=\"kw3\">set</span> beta-<span class=\"kw3\">function</span> <span class=\"kw2\">to</span> entry beta-name<br/>       <span class=\"kw1\">if</span> beta-<span class=\"kw3\">function</span> <span class=\"sy0\">=</span> <span class=\"kw3\">null</span> <span class=\"kw3\">then</span><br/>           <span class=\"kw2\">display</span> <span class=\"st0\">\"error: no \"</span> beta-name <span class=\"st0\">\" function\"</span> <span class=\"kw3\">upon</span> syserr<br/>           goback<br/>       end-<span class=\"kw1\">if</span><br/>\u00a0<br/>       <span class=\"kw2\">move</span> <span class=\"nu0\">0</span> <span class=\"kw2\">to</span> alpha beta running<br/>       <span class=\"kw2\">perform</span> <span class=\"kw2\">varying</span> i <span class=\"kw3\">from</span> iterations <span class=\"kw3\">by</span> -<span class=\"nu0\">1</span> <span class=\"kw2\">until</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>           <span class=\"kw2\">call</span> alpha-<span class=\"kw3\">function</span> <span class=\"kw3\">using</span> i returning alpha<br/>           <span class=\"kw2\">call</span> beta-<span class=\"kw3\">function</span> <span class=\"kw3\">using</span> i returning beta<br/>           <span class=\"kw2\">compute</span> running <span class=\"sy0\">=</span> beta<span class=\"sy0\"> / </span><span class=\"br0\">(</span>alpha<span class=\"sy0\"> + </span>running<span class=\"br0\">)</span><br/>       end-<span class=\"kw2\">perform</span><br/>       <span class=\"kw2\">call</span> alpha-<span class=\"kw3\">function</span> <span class=\"kw3\">using</span> <span class=\"nu0\">0</span> returning alpha<br/>       <span class=\"kw2\">compute</span> approximation <span class=\"sy0\">=</span> alpha<span class=\"sy0\"> + </span>running<br/>\u00a0<br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">function</span> continued-fractions<span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; ******************************<br/>       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> sqrt-<span class=\"nu0\">2</span>-alpha<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> result               <span class=\"kw3\">usage</span> float-long<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">linkage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> iteration            <span class=\"kw3\">usage</span> binary-long unsigned<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span> <span class=\"kw3\">using</span> iteration returning result<span class=\"sy0\">.</span><br/>       <span class=\"kw1\">if</span> iteration <span class=\"kw3\">equal</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>           <span class=\"kw2\">move</span> <span class=\"nu0\">1.0</span> <span class=\"kw2\">to</span> result<br/>       <span class=\"kw3\">else</span><br/>           <span class=\"kw2\">move</span> <span class=\"nu0\">2.0</span> <span class=\"kw2\">to</span> result<br/>       end-<span class=\"kw1\">if</span><br/>\u00a0<br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> sqrt-<span class=\"nu0\">2</span>-alpha<span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; ******************************<br/>       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> sqrt-<span class=\"nu0\">2</span>-beta<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> result               <span class=\"kw3\">usage</span> float-long<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">linkage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> iteration            <span class=\"kw3\">usage</span> binary-long unsigned<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span> <span class=\"kw3\">using</span> iteration returning result<span class=\"sy0\">.</span><br/>       <span class=\"kw2\">move</span> <span class=\"nu0\">1.0</span> <span class=\"kw2\">to</span> result<br/>\u00a0<br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> sqrt-<span class=\"nu0\">2</span>-beta<span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; ******************************<br/>       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> napier-alpha<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> result               <span class=\"kw3\">usage</span> float-long<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">linkage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> iteration            <span class=\"kw3\">usage</span> binary-long unsigned<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span> <span class=\"kw3\">using</span> iteration returning result<span class=\"sy0\">.</span><br/>       <span class=\"kw1\">if</span> iteration <span class=\"kw3\">equal</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>           <span class=\"kw2\">move</span> <span class=\"nu0\">2.0</span> <span class=\"kw2\">to</span> result<br/>       <span class=\"kw3\">else</span><br/>           <span class=\"kw2\">move</span> iteration <span class=\"kw2\">to</span> result<br/>       end-<span class=\"kw1\">if</span><br/>\u00a0<br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> napier-alpha<span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; ******************************<br/>       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> napier-beta<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> result               <span class=\"kw3\">usage</span> float-long<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">linkage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> iteration            <span class=\"kw3\">usage</span> binary-long unsigned<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span> <span class=\"kw3\">using</span> iteration returning result<span class=\"sy0\">.</span><br/>       <span class=\"kw1\">if</span> iteration <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>           <span class=\"kw2\">move</span> <span class=\"nu0\">1.0</span> <span class=\"kw2\">to</span> result<br/>       <span class=\"kw3\">else</span><br/>           <span class=\"kw2\">compute</span> result <span class=\"sy0\">=</span> iteration<span class=\"sy0\"> - </span><span class=\"nu0\">1.0</span><br/>       end-<span class=\"kw1\">if</span><br/>\u00a0<br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> napier-beta<span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; ******************************<br/>       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> pi-alpha<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> result               <span class=\"kw3\">usage</span> float-long<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">linkage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> iteration            <span class=\"kw3\">usage</span> binary-long unsigned<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span> <span class=\"kw3\">using</span> iteration returning result<span class=\"sy0\">.</span><br/>       <span class=\"kw1\">if</span> iteration <span class=\"kw3\">equal</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>           <span class=\"kw2\">move</span> <span class=\"nu0\">3.0</span> <span class=\"kw2\">to</span> result<br/>       <span class=\"kw3\">else</span><br/>           <span class=\"kw2\">move</span> <span class=\"nu0\">6.0</span> <span class=\"kw2\">to</span> result<br/>       end-<span class=\"kw1\">if</span><br/>\u00a0<br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> pi-alpha<span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; ******************************<br/>       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> pi-beta<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> result               <span class=\"kw3\">usage</span> float-long<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">linkage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> iteration            <span class=\"kw3\">usage</span> binary-long unsigned<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span> <span class=\"kw3\">using</span> iteration returning result<span class=\"sy0\">.</span><br/>       <span class=\"kw2\">compute</span> result <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\"> * </span>iteration<span class=\"sy0\"> - </span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\"> ** </span><span class=\"nu0\">2</span><br/>\u00a0<br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> pi-beta<span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 35, "block": "<pre class=\"coffeescript highlighted_source\"><span class=\"co1\"># Compute a continuous fraction of the form</span><br/><span class=\"co1\"># a0 + b1 / (a1 + b2 / (a2 + b3 / ...</span><br/>continuous_fraction = <span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  a = f.<span class=\"me1\">a</span><br/>  b = f.<span class=\"me1\">b</span><br/>  c = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">100000</span>..<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    c = b<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>a<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">+</span> c<span class=\"br0\">)</span><br/>  a<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> c<br/>\u00a0<br/><span class=\"co1\"># A little helper.</span><br/>p = <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  console.<span class=\"me1\">log</span> a<br/>  console.<span class=\"me1\">log</span> b<br/>  console.<span class=\"me1\">log</span> <span class=\"st0\">\"---\"</span><br/>\u00a0<br/>do <span class=\"sy0\">-&gt;</span><br/>  fsqrt2 =<br/>    a<span class=\"sy0\">:</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> n <span class=\"kw2\">is</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> <span class=\"nu0\">2</span><br/>    b<span class=\"sy0\">:</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span><br/>  p Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> continuous_fraction<span class=\"br0\">(</span>fsqrt2<span class=\"br0\">)</span><br/>\u00a0<br/>  fnapier =<br/>    a<span class=\"sy0\">:</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> n <span class=\"kw2\">is</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"nu0\">2</span> <span class=\"kw1\">else</span> n<br/>    b<span class=\"sy0\">:</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> n <span class=\"kw2\">is</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  p Math.<span class=\"me1\">E</span><span class=\"sy0\">,</span> continuous_fraction<span class=\"br0\">(</span>fnapier<span class=\"br0\">)</span><br/>\u00a0<br/>  fpi =<br/>    a<span class=\"sy0\">:</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">3</span> <span class=\"kw1\">if</span> n <span class=\"kw2\">is</span> <span class=\"nu0\">0</span><br/>      <span class=\"nu0\">6</span><br/>    b<span class=\"sy0\">:</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>      x = <span class=\"nu0\">2</span><span class=\"sy0\">*</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>      x <span class=\"sy0\">*</span> x<br/>  p Math.<span class=\"me1\">PI</span><span class=\"sy0\">,</span> continuous_fraction<span class=\"br0\">(</span>fpi<span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 24, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> estimate-continued-fraction <span class=\"br0\">(</span>generator n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>temp <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for n1 from n downto <span class=\"nu0\">1</span><br/>       <span class=\"kw1\">do</span> <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>a b<span class=\"br0\">)</span> <br/>\t      <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> generator n1<span class=\"br0\">)</span><br/>\t    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> temp <span class=\"br0\">(</span>/ b <span class=\"br0\">(</span>+ a temp<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> generator <span class=\"nu0\">0</span><span class=\"br0\">)</span> temp<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"sqrt(2) = ~a~%\"</span> <span class=\"br0\">(</span>coerce <span class=\"br0\">(</span>estimate-continued-fraction<br/>\t\t\t\t    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t\t\t\t      <span class=\"br0\">(</span>values <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>\t\t\t\t   'double-<span class=\"kw1\">float</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"napier's = ~a~%\"</span> <span class=\"br0\">(</span>coerce <span class=\"br0\">(</span>estimate-continued-fraction<br/>\t\t\t\t     <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t\t\t\t       <span class=\"br0\">(</span>values <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t\t\t\t       <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>\t\t\t\t    'double-<span class=\"kw1\">float</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>format t <span class=\"st0\">\"pi = ~a~%\"</span> <span class=\"br0\">(</span>coerce <span class=\"br0\">(</span>estimate-continued-fraction<br/>\t\t\t       <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t\t\t\t <span class=\"br0\">(</span>values <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">6</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\t\t\t\t\t <span class=\"br0\">(</span>* <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t    <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span><br/>\t\t\t      'double-<span class=\"kw1\">float</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Chapel", "loc": 35, "block": "<pre class=\"text highlighted_source\">proc calc(f, n) {<br/>        var r = 0.0;<br/>\u00a0<br/>        for k in 1..n by -1 {<br/>                var v = f.pair(k);<br/>                r = v(2) / (v(1) + r);<br/>        }<br/>\u00a0<br/>        return f.pair(0)(1) + r;<br/>}<br/>\u00a0<br/>record Sqrt2 {<br/>        proc pair(n) {<br/>                return (if n == 0 then 1 else 2, <br/>                        1);<br/>        }<br/>}<br/>\u00a0<br/>record Napier {<br/>        proc pair(n) {<br/>                return (if n == 0 then 2 else n,<br/>                        if n == 1 then 1 else n - 1);<br/>        }<br/>}<br/>record Pi {<br/>        proc pair(n) {<br/>                return (if n == 0 then 3 else 6,<br/>                        (2*n - 1)**2);<br/>        }<br/>}<br/>\u00a0<br/>config const n = 200;<br/>writeln(calc(new Sqrt2(), n));<br/>writeln(calc(new Napier(), n));<br/>writeln(calc(new Pi(), n));</pre>"}, {"lang": "D", "loc": 31, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">functional</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">;</span><br/>\u00a0<br/>FP calc<span class=\"br0\">(</span>FP<span class=\"sy0\">,</span> F<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> F fun<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isCallable<span class=\"sy0\">!</span>F<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    FP temp <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach_reverse</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> ni<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">n</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> p <span class=\"sy0\">=</span> fun<span class=\"br0\">(</span>ni<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        temp <span class=\"sy0\">=</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>FP<span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> temp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> fun<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> temp<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> fSqrt2<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">2</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> fNapier<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> n <span class=\"sy0\">:</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span>   n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> fPi<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">6</span> <span class=\"sy0\">:</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span>   <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">alias</span> print <span class=\"sy0\">=</span> curry<span class=\"sy0\">!</span><span class=\"br0\">(</span>writefln<span class=\"sy0\">,</span> <span class=\"st0\">\"%.19f\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    calc<span class=\"sy0\">!</span><span class=\"kw4\">real</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>fSqrt2<span class=\"sy0\">,</span> <span class=\"nu0\">200</span><span class=\"br0\">)</span>.<span class=\"me1\">print</span><span class=\"sy0\">;</span><br/>    calc<span class=\"sy0\">!</span><span class=\"kw4\">real</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>fNapier<span class=\"sy0\">,</span> <span class=\"nu0\">200</span><span class=\"br0\">)</span>.<span class=\"me1\">print</span><span class=\"sy0\">;</span><br/>    calc<span class=\"sy0\">!</span><span class=\"kw4\">real</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>fPi<span class=\"sy0\">,</span> <span class=\"nu0\">200</span><span class=\"br0\">)</span>.<span class=\"me1\">print</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Erlang", "loc": 45, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>continued<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">compile</span><span class=\"br0\">(</span><span class=\"br0\">[</span>export_all<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">pi_a</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span><br/><span class=\"re3\">pi_a</span> <span class=\"br0\">(</span><span class=\"re5\">_N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">6</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">pi_b</span> <span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">sqrt2_a</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sqrt2_a</span> <span class=\"br0\">(</span><span class=\"re5\">_N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"nu0\">2</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">sqrt2_b</span> <span class=\"br0\">(</span><span class=\"re5\">_N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"nu0\">1</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">nappier_a</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/><span class=\"re3\">nappier_a</span> <span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">N</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">nappier_b</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"re3\">nappier_b</span> <span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">continued_fraction</span><span class=\"br0\">(</span><span class=\"re5\">FA</span><span class=\"sy1\">,</span><span class=\"re5\">_FB</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">FA</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">continued_fraction</span><span class=\"br0\">(</span><span class=\"re5\">FA</span><span class=\"sy1\">,</span><span class=\"re5\">FB</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">continued_fraction</span><span class=\"br0\">(</span><span class=\"re5\">FA</span><span class=\"sy1\">,</span><span class=\"re5\">FB</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">FB</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"re5\">FA</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">continued_fraction</span><span class=\"br0\">(</span><span class=\"re5\">FA</span><span class=\"sy1\">,</span><span class=\"re5\">_FB</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">FA</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"re5\">Acc</span><span class=\"sy1\">;</span><br/><span class=\"re3\">continued_fraction</span><span class=\"br0\">(</span><span class=\"re5\">FA</span><span class=\"sy1\">,</span><span class=\"re5\">FB</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">continued_fraction</span><span class=\"br0\">(</span><span class=\"re5\">FA</span><span class=\"sy1\">,</span><span class=\"re5\">FB</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">FB</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"sy3\">/</span> <span class=\"br0\">(</span><span class=\"re5\">FA</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">test_pi</span> <span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">continued_fraction</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> pi_a<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"kw1\">fun</span> pi_b<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"sy1\">.</span>                                                                                                                                                                                                                                                                              <br/>\u00a0<br/><span class=\"re3\">test_sqrt2</span> <span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">continued_fraction</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> sqrt2_a<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"kw1\">fun</span> sqrt2_b<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">test_nappier</span> <span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">continued_fraction</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> nappier_a<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"kw1\">fun</span> nappier_b<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 63, "block": "<pre class=\"text highlighted_source\">USING: arrays combinators io kernel locals math math.functions<br/>  math.ranges prettyprint sequences\u00a0;<br/>IN: rosetta.cfrac<br/>\u00a0<br/>! Every continued fraction must implement these two words.<br/>GENERIC: cfrac-a ( n cfrac -- a )<br/>GENERIC: cfrac-b ( n cfrac -- b )<br/>\u00a0<br/>! square root of 2<br/>SINGLETON: sqrt2<br/>M: sqrt2 cfrac-a<br/>   \u00a0! If n is 1, then a_n is 1, else a_n is 2.<br/>    drop { { 1 [ 1 ] } [ drop 2 ] } case\u00a0;<br/>M: sqrt2 cfrac-b<br/>   \u00a0! Always b_n is 1.<br/>    2drop 1\u00a0;<br/>\u00a0<br/>! Napier's constant<br/>SINGLETON: napier<br/>M: napier cfrac-a<br/>   \u00a0! If n is 1, then a_n is 2, else a_n is n - 1. <br/>    drop { { 1 [ 2 ] } [ 1 - ] } case\u00a0;<br/>M: napier cfrac-b<br/>   \u00a0! If n is 1, then b_n is 1, else b_n is n - 1.<br/>    drop { { 1 [ 1 ] } [ 1 - ] } case\u00a0;<br/>\u00a0<br/>SINGLETON: pi<br/>M: pi cfrac-a<br/>   \u00a0! If n is 1, then a_n is 3, else a_n is 6.<br/>    drop { { 1 [ 3 ] } [ drop 6 ] } case\u00a0;<br/>M: pi cfrac-b<br/>   \u00a0! Always b_n is (n * 2 - 1)^2.<br/>    drop 2 * 1 - 2 ^\u00a0;<br/>\u00a0<br/>:: cfrac-estimate ( cfrac terms -- number )<br/>    terms cfrac cfrac-a            \u00a0! top = last a_n<br/>    terms 1 - 1 [a,b] [\u00a0:&gt; n<br/>        n cfrac cfrac-b swap /     \u00a0! top = b_n / top<br/>        n cfrac cfrac-a +          \u00a0! top = top + a_n<br/>    ] each\u00a0;<br/>\u00a0<br/>:: decimalize ( rational prec -- string )<br/>    rational 1 /mod            \u00a0! split whole, fractional parts<br/>    prec 10^ *                 \u00a0! multiply fraction by 10 ^ prec<br/>    [ &gt;integer unparse ] <a class=\"__cf_email__\" data-cfemail=\"aeccc7ee\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>   \u00a0! convert digits to strings<br/>   \u00a0:&gt; fraction<br/>    \".\"                        \u00a0! push decimal point<br/>    prec fraction length -<br/>    dup 0 &lt; [ drop 0 ] when<br/>    \"0\" &lt;repetition&gt; concat    \u00a0! push padding zeros<br/>    fraction 4array concat\u00a0;<br/>\u00a0<br/>&lt;PRIVATE<br/>: main ( -- )<br/>    \" Square root of 2: \" write<br/>    sqrt2 50 cfrac-estimate 30 decimalize print<br/>    \"Napier's constant: \" write<br/>    napier 50 cfrac-estimate 30 decimalize print<br/>    \"               Pi: \" write<br/>    pi 950 cfrac-estimate 10 decimalize print\u00a0;<br/>PRIVATE&gt;<br/>\u00a0<br/>MAIN: main</pre>"}, {"lang": "Felix", "loc": 27, "block": "<pre class=\"text highlighted_source\">fun pi (n:int)\u00a0: (double*double) =&gt;<br/>    let a = match n with | 0 =&gt; 3.0 | _ =&gt; 6.0 endmatch in <br/>    let b = pow(2.0 * n.double - 1.0, 2.0) in<br/>    (a,b);<br/>\u00a0<br/>fun sqrt_2 (n:int)\u00a0: (double*double) =&gt;<br/>    let a = match n with | 0 =&gt; 1.0 | _ =&gt; 2.0 endmatch in<br/>    let b = 1.0 in<br/>    (a,b);<br/>\u00a0<br/>fun napier (n:int)\u00a0: (double*double) =&gt;<br/>    let a = match n with | 0 =&gt; 2.0 | _ =&gt; n.double endmatch in<br/>    let b = match n with | 1 =&gt; 1.0 | _ =&gt; (n.double - 1.0) endmatch in<br/>    (a,b);<br/>\u00a0<br/>fun cf_iter (steps:int) (f:int -&gt; double*double)  = {<br/>    var acc = 0.0;<br/>    for var n in steps downto 0 do<br/>        var a, b = f(n);<br/>        acc = if (n &gt; 0) then (b / (a + acc)) else (acc + a);<br/>    done<br/>    return acc;<br/>}<br/>\u00a0<br/>println$ cf_iter 200 sqrt_2; // =&gt; 1.41421<br/>println$ cf_iter 200 napier; // =&gt; 2.71818<br/>println$ cf_iter 1000 pi; // =&gt; 3.14159</pre>"}, {"lang": "Forth", "loc": 9, "block": "<pre class=\"text highlighted_source\">: fsqrt2 1 s&gt;f 0&gt; if 2 s&gt;f else fdup then\u00a0;<br/>: fnapier dup dup 1 &gt; if 1- else drop 1 then s&gt;f dup 1 &lt; if drop 2 then s&gt;f\u00a0;<br/>: fpi dup 2* 1- dup * s&gt;f 0&gt; if 6 else 3 then s&gt;f\u00a0;<br/>                                       ( n -- f1 f2)<br/>: cont.fraction                        ( xt n -- f)<br/>  1 swap 1+ 0 s&gt;f                      \\ calculate for 1 .. n<br/>  do i over execute frot f+ f/ -1 +loop<br/>  0 swap execute fnip f+               \\ calcucate for 0<br/>;</pre>"}, {"lang": "Fortran", "loc": 99, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> continued_fractions<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">long</span> <span class=\"sy0\">=</span> <span class=\"kw4\">selected_real_kind</span><span class=\"br0\">(</span><span class=\"nu0\">7</span>,<span class=\"nu0\">99</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw3\">type</span> continued_fraction<br/>    <span class=\"kw3\">integer</span>                            <span class=\"sy0\">::</span> <span class=\"me2\">a0</span>, b1<br/>    <span class=\"kw1\">procedure</span><span class=\"br0\">(</span>series<span class=\"br0\">)</span>, <span class=\"kw3\">pointer</span>, nopass <span class=\"sy0\">::</span> <span class=\"me2\">a</span>, b<br/>  <span class=\"kw1\">end</span> <span class=\"kw3\">type</span><br/>\u00a0<br/>  <span class=\"kw1\">interface</span><br/>    pure <span class=\"kw1\">function</span> series <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>      <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>      <span class=\"kw3\">integer</span>             <span class=\"sy0\">::</span> <span class=\"me2\">series</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">interface</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  pure <span class=\"kw1\">function</span> define_cf <span class=\"br0\">(</span>a0,a,b1,b<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>           <span class=\"sy0\">::</span> <span class=\"me2\">a0</span><br/>    <span class=\"kw1\">procedure</span><span class=\"br0\">(</span>series<span class=\"br0\">)</span>             <span class=\"sy0\">::</span> <span class=\"me2\">a</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>, <span class=\"kw3\">optional</span> <span class=\"sy0\">::</span> <span class=\"me2\">b1</span><br/>    <span class=\"kw1\">procedure</span><span class=\"br0\">(</span>series<span class=\"br0\">)</span>,   <span class=\"kw3\">optional</span> <span class=\"sy0\">::</span> <span class=\"me2\">b</span><br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>continued_fraction<span class=\"br0\">)</span>      <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>    x<span class=\"sy0\">%</span>a0 <span class=\"sy0\">=</span> a0<br/>    x<span class=\"sy0\">%</span>a <span class=\"sy0\">=</span>&gt; a<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw4\">present</span><span class=\"br0\">(</span>b1<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>       x<span class=\"sy0\">%</span>b1 <span class=\"sy0\">=</span> b1<br/>    <span class=\"kw1\">else</span><br/>       x<span class=\"sy0\">%</span>b1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw4\">present</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>       x<span class=\"sy0\">%</span>b <span class=\"sy0\">=</span>&gt; b<br/>    <span class=\"kw1\">else</span><br/>       x<span class=\"sy0\">%</span>b <span class=\"sy0\">=</span>&gt; const_1<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> define_cf<br/>\u00a0<br/>  pure <span class=\"kw3\">integer</span> <span class=\"kw1\">function</span> const_1<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    const_1 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>  <br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>  pure <span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw3\">kind</span><span class=\"sy0\">=</span>long<span class=\"br0\">)</span> <span class=\"kw1\">function</span> output<span class=\"br0\">(</span>x,iterations<span class=\"br0\">)</span><br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>continued_fraction<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>    <span class=\"kw3\">integer</span>,                  <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">iterations</span><br/>    <span class=\"kw3\">integer</span>                              <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>    output <span class=\"sy0\">=</span> x<span class=\"sy0\">%</span>a<span class=\"br0\">(</span>iterations<span class=\"br0\">)</span><br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> iterations<span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      output <span class=\"sy0\">=</span> x<span class=\"sy0\">%</span>a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>x<span class=\"sy0\">%</span>b<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> output<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    output <span class=\"sy0\">=</span> x<span class=\"sy0\">%</span>a0 <span class=\"sy0\">+</span> <span class=\"br0\">(</span>x<span class=\"sy0\">%</span>b1 <span class=\"sy0\">/</span> output<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> output<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> continued_fractions<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">program</span> examples<br/>  <span class=\"kw3\">use</span> continued_fractions<br/>\u00a0<br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>continued_fraction<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">sqr2</span>,napier,pi<br/>\u00a0<br/>  sqr2   <span class=\"sy0\">=</span> define_cf<span class=\"br0\">(</span><span class=\"nu0\">1</span>,a_sqr2<span class=\"br0\">)</span><br/>  napier <span class=\"sy0\">=</span> define_cf<span class=\"br0\">(</span><span class=\"nu0\">2</span>,a_napier,<span class=\"nu0\">1</span>,b_napier<span class=\"br0\">)</span><br/>  pi     <span class=\"sy0\">=</span> define_cf<span class=\"br0\">(</span><span class=\"nu0\">3</span>,a<span class=\"sy0\">=</span>a_pi,b<span class=\"sy0\">=</span>b_pi<span class=\"br0\">)</span><br/>\u00a0<br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> output<span class=\"br0\">(</span>sqr2,<span class=\"nu0\">10000</span><span class=\"br0\">)</span><br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> output<span class=\"br0\">(</span>napier,<span class=\"nu0\">10000</span><span class=\"br0\">)</span><br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> output<span class=\"br0\">(</span>pi,<span class=\"nu0\">10000</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  pure <span class=\"kw3\">integer</span> <span class=\"kw1\">function</span> a_sqr2<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    a_sqr2 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>  pure <span class=\"kw3\">integer</span> <span class=\"kw1\">function</span> a_napier<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    a_napier <span class=\"sy0\">=</span> n<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>  pure <span class=\"kw3\">integer</span> <span class=\"kw1\">function</span> b_napier<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    b_napier <span class=\"sy0\">=</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>  pure <span class=\"kw3\">integer</span> <span class=\"kw1\">function</span> a_pi<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    a_pi <span class=\"sy0\">=</span> <span class=\"nu0\">6</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>  pure <span class=\"kw3\">integer</span> <span class=\"kw1\">function</span> b_pi<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    b_pi <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> examples</pre>"}, {"lang": "Go", "loc": 53, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> cfTerm <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    a<span class=\"sy1\">,</span> b <span class=\"kw4\">int</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// follows subscript convention of mathworld and WP where there is no b(0).</span><br/><span class=\"co1\">// cf[0].b is unused in this representation.</span><br/><span class=\"kw1\">type</span> cf <span class=\"sy1\">[]</span>cfTerm<br/>\u00a0<br/><span class=\"kw4\">func</span> cfSqrt2<span class=\"sy1\">(</span>nTerms <span class=\"kw4\">int</span><span class=\"sy1\">)</span> cf <span class=\"sy1\">{</span><br/>    f <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>cf<span class=\"sy1\">,</span> nTerms<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> f <span class=\"sy1\">{</span><br/>        f<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> cfTerm<span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    f<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>a <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">return</span> f<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> cfNap<span class=\"sy1\">(</span>nTerms <span class=\"kw4\">int</span><span class=\"sy1\">)</span> cf <span class=\"sy1\">{</span><br/>    f <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>cf<span class=\"sy1\">,</span> nTerms<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> f <span class=\"sy1\">{</span><br/>        f<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> cfTerm<span class=\"sy1\">{</span>n<span class=\"sy1\">,</span> n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    f<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>a <span class=\"sy2\">=</span> <span class=\"nu0\">2</span><br/>    f<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>b <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">return</span> f<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> cfPi<span class=\"sy1\">(</span>nTerms <span class=\"kw4\">int</span><span class=\"sy1\">)</span> cf <span class=\"sy1\">{</span><br/>    f <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>cf<span class=\"sy1\">,</span> nTerms<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> f <span class=\"sy1\">{</span><br/>        g <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span>n <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><br/>        f<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> cfTerm<span class=\"sy1\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> g <span class=\"sy3\">*</span> g<span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    f<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>a <span class=\"sy2\">=</span> <span class=\"nu0\">3</span><br/>    <span class=\"kw1\">return</span> f<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>f cf<span class=\"sy1\">)</span> <span class=\"kw3\">real</span><span class=\"sy1\">()</span> <span class=\"sy1\">(</span>r <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>f<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> n &gt; <span class=\"nu0\">0</span><span class=\"sy1\">;</span> n<span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>        r <span class=\"sy2\">=</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>f<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span><span class=\"sy3\">.</span>b<span class=\"sy1\">)</span> <span class=\"sy3\">/</span> <span class=\"sy1\">(</span><span class=\"kw4\">float64</span><span class=\"sy1\">(</span>f<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span><span class=\"sy3\">.</span>a<span class=\"sy1\">)</span> <span class=\"sy3\">+</span> r<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> r <span class=\"sy3\">+</span> <span class=\"kw4\">float64</span><span class=\"sy1\">(</span>f<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>a<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"sqrt2:\"</span><span class=\"sy1\">,</span> cfSqrt2<span class=\"sy1\">(</span><span class=\"nu0\">20</span><span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"kw3\">real</span><span class=\"sy1\">())</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"nap:  \"</span><span class=\"sy1\">,</span> cfNap<span class=\"sy1\">(</span><span class=\"nu0\">20</span><span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"kw3\">real</span><span class=\"sy1\">())</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"pi:   \"</span><span class=\"sy1\">,</span> cfPi<span class=\"sy1\">(</span><span class=\"nu0\">20</span><span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"kw3\">real</span><span class=\"sy1\">())</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 24, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>unfoldr<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"br0\">(</span>intToDigit<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- continued fraction represented as a (possibly infinite) list of pairs</span><br/>sqrt2<span class=\"sy0\">,</span> napier<span class=\"sy0\">,</span> myPi <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>sqrt2 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">(</span><span class=\"nu0\">1</span>\u00a0: <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>napier <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">(</span><span class=\"nu0\">2</span>\u00a0: <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>\u00a0: <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>myPi <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">(</span><span class=\"nu0\">3</span>\u00a0: <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- approximate a continued fraction after certain number of iterations</span><br/>approxCF <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> b<br/>approxCF t <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr\"><span class=\"kw3\">foldr</span></a> <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> z <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> a <span class=\"sy0\">+</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> b <span class=\"sy0\">/</span> z<span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> t<br/>\u00a0<br/><span class=\"co1\">-- infinite decimal representation of a real number</span><br/>decString <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:RealFrac\"><span class=\"kw4\">RealFrac</span></a> a <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>decString frac <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> i <span class=\"sy0\">++</span> <span class=\"st0\">'.'</span>\u00a0: decString<span class=\"st0\">' f where<br/>  (i,f) = properFraction frac<br/>  decString'</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> intToDigit <span class=\"sy0\">.</span> unfoldr <span class=\"br0\">(</span>Just <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:properFraction\"><span class=\"kw3\">properFraction</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">200</span> <span class=\"sy0\">.</span> decString <span class=\"sy0\">.</span><br/>              <span class=\"br0\">(</span>approxCF <span class=\"nu0\">950</span> <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Rational\"><span class=\"kw4\">Rational</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">[</span>sqrt2<span class=\"sy0\">,</span> napier<span class=\"sy0\">,</span> myPi<span class=\"br0\">]</span></pre>"}, {"lang": "J", "loc": 14, "block": "<pre class=\"j highlighted_source\">   cfrac=: +`% / <span class=\"co1\">NB. Evaluate a list as a continued fraction</span><br/>\u00a0<br/>   sqrt2=: cfrac <span class=\"nu0\">1</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">200</span>$<span class=\"nu0\">2</span> <span class=\"nu0\">1x</span><br/>   pi=:cfrac <span class=\"nu0\">3</span>, , ,&amp;<span class=\"nu0\">6</span>\"<span class=\"nu0\">0</span> *:&lt;:+:&gt;:i.<span class=\"nu0\">100x</span><br/>   e=: cfrac <span class=\"nu0\">2</span> <span class=\"nu0\">1</span>, , ,~\"<span class=\"nu0\">0</span> &gt;:i.<span class=\"nu0\">100x</span><br/>\u00a0<br/>   <span class=\"co1\">NB. translate from fraction to decimal string</span><br/>   <span class=\"co1\">NB. translated from factor</span><br/>   dec =: <span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"3d107d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:[ <span class=\"sy0\">(</span>}.,<span class=\"st_h\">'.'</span>,{.<span class=\"sy0\">)</span> \":@:&lt;<a class=\"__cf_email__\" data-cfemail=\"93bdd3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:<span class=\"sy0\">(</span>* <span class=\"nu0\">10x</span>&amp;^<span class=\"sy0\">)</span>~<span class=\"sy0\">)</span>\"<span class=\"nu0\">0</span><br/>\u00a0<br/>   <span class=\"nu0\">100</span> <span class=\"nu0\">10</span> <span class=\"nu0\">100</span> dec sqrt2, pi, e<br/><span class=\"nu0\">1.4142135623730950488016887242096980785696718753769480731766797379907324784621205551109457595775322165</span><br/><span class=\"nu0\">3.1415924109</span>                                                                                          <br/><span class=\"nu0\">2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274</span></pre>"}, {"lang": "Java", "loc": 25, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">lang</span>.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.function.Function</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Test <span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> calc<span class=\"br0\">(</span>Function<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> f, <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> temp <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> ni <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span> ni <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> ni<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> p <span class=\"sy0\">=</span> f.<span class=\"me1\">apply</span><span class=\"br0\">(</span>ni<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            temp <span class=\"sy0\">=</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> temp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> f.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> temp<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        List<span class=\"sy0\">&lt;</span>Function<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;&gt;</span> fList <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        fList.<span class=\"me1\">add</span><span class=\"br0\">(</span>n <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">2</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        fList.<span class=\"me1\">add</span><span class=\"br0\">(</span>n <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> n <span class=\"sy0\">:</span> <span class=\"nu0\">2</span>, n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        fList.<span class=\"me1\">add</span><span class=\"br0\">(</span>n <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"nu0\">6</span> <span class=\"sy0\">:</span> <span class=\"nu0\">3</span>, <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> pow<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>Function<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> f <span class=\"sy0\">:</span> fList<span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>calc<span class=\"br0\">(</span>f, <span class=\"nu0\">200</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># \"first\" is the first triple,<br/># e.g. [1,a,b]; count specifies the number of terms to use.<br/>def continued_fraction( first; next; count ):<br/>  # input: [i, a, b]]<br/>  def cf:<br/>      if .[0] == count then 0<br/>      else next as $ab<br/>      | .[1] + (.[2] / ($ab | cf))<br/>      end\u00a0;<br/>  first | cf;<br/>\u00a0<br/># \"first\" and \"next\" are as above;<br/># if delta is 0 then continue until there is no detectable change.<br/>def continued_fraction_delta(first; next; delta):<br/>  def abs: if . &lt; 0 then -. else . end;<br/>  def cf:<br/>    # state: [n, prev]<br/>    .[0] as $n | .[1] as $prev<br/>    |  continued_fraction(first; next; $n+1) as $this<br/>    | if $prev == null then [$n+1, $this] | cf<br/>      elif delta &lt;= 0 and ($prev == $this) then $this<br/>      elif (($prev - $this)|abs) &lt;= delta then $this<br/>      else [$n+1, $this] | cf<br/>      end;<br/>  [2,null] | cf;<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 36, "block": "<pre class=\"text highlighted_source\">function _sqrt(a::Bool, n)<br/>    if a<br/>        return n &gt; 0\u00a0? 2.0\u00a0: 1.0<br/>    else<br/>        return 1.0<br/>    end<br/>end<br/>\u00a0<br/>function _napier(a::Bool, n)<br/>    if a<br/>        return n &gt; 0\u00a0? Float64(n)\u00a0: 2.0<br/>    else<br/>        return n &gt; 1\u00a0? n - 1.0\u00a0: 1.0<br/>    end<br/>end<br/>\u00a0<br/>function _pi(a::Bool, n)<br/>    if a<br/>        return n &gt; 0\u00a0? 6.0\u00a0: 3.0<br/>    else<br/>        return (2.0 * n - 1.0) ^ 2.0 # exponentiation operator<br/>    end<br/>end<br/>\u00a0<br/>function calc(f::Function, expansions::Integer)<br/>    a, b = true, false<br/>    r = 0.0<br/>    for i in expansions:-1:1<br/>        r = f(b, i) / (f(a, i) + r)<br/>    end<br/>    return f(a, 0) + r<br/>end<br/>\u00a0<br/>for (v, f) in ((\"\u221a2\", _sqrt), (\"e\", _napier), (\"\u03c0\", _pi))<br/>    @printf(\"%3s =\u00a0%f\\n\", v, calc(f, 1000))<br/>end</pre>"}, {"lang": "Klong", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>cf::{[f g i];f::x;g::y;i::z;<br/>     f(0)+z{i::i-1;g(i+1)%f(i+1)+x}:*0}<br/>cf({:[0=x;1;2]};{x;1};1000)<br/>cf({:[0=x;2;x]};{:[x&gt;1;x-1;x]};1000)<br/>cf({:[0=x;3;6]};{((2*x)-1)^2};1000)<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 21, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>typealias Func <span class=\"sy0\">=</span> <span class=\"br0\">(</span>Int<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> IntArray<br/>\u00a0<br/>fun calc<span class=\"br0\">(</span>f<span class=\"sy0\">:</span> Func, n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> temp <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in n downTo <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>        temp <span class=\"sy0\">=</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> / <span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> + temp<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> f<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> + temp<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pList <span class=\"sy0\">=</span> listOf<span class=\"sy0\">&lt;</span>Pair<span class=\"sy0\">&lt;</span>String, Func<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><br/>        <span class=\"st0\">\"sqrt(2)\"</span> to <span class=\"br0\">{</span> n -<span class=\"sy0\">&gt;</span> intArrayOf<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>,<br/>        <span class=\"st0\">\"e      \"</span> to <span class=\"br0\">{</span> n -<span class=\"sy0\">&gt;</span> intArrayOf<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> n <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">2</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> n - <span class=\"nu0\">1</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>,<br/>        <span class=\"st0\">\"pi     \"</span> to <span class=\"br0\">{</span> n -<span class=\"sy0\">&gt;</span> intArrayOf<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">6</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">3</span>, <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> n - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>pair in pList<span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"${pair.first} = ${calc(pair.second, 200)}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Maple", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>contfrac:=n-&gt;evalf(Value(NumberTheory:-ContinuedFraction(n)));<br/>contfrac(2^(0.5));<br/>contfrac(Pi);<br/>contfrac(exp(1));<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 6, "block": "<pre class=\"text highlighted_source\">sqrt2=Function[n,{1,<a class=\"__cf_email__\" data-cfemail=\"a3f7d1c2cdd0d3ccd0c6e3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{Array[2&amp;,n],Array[1&amp;,n]}}];<br/>napier=Function[n,{2,<a class=\"__cf_email__\" data-cfemail=\"b5e1c7d4dbc6c5dac6d0f5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{Range[n],Prepend[Range[n-1],1]}}];<br/>pi=Function[n,{3,<a class=\"__cf_email__\" data-cfemail=\"530721323d20233c203613\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{Array[6&amp;,n],Array[(2#-1)^2&amp;,n]}}];<br/>approx=Function[l,<br/>\tN[<a class=\"__cf_email__\" data-cfemail=\"13577a657a777653\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@<a class=\"__cf_email__\" data-cfemail=\"c88ea1babbbc888ea7a4ac\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[{{#2.#[[;;,1]],#2.#[[;;,2]]},#[[1]]}&amp;,{{l[[2,1,1]]l[[1]]+l[[2,1,2]],l[[2,1,1]]},{l[[1]],1}},l[[2,2;;]]],10]];<br/>r2=approx/@{<a class=\"__cf_email__\" data-cfemail=\"196a686b6d2b59\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#,<a class=\"__cf_email__\" data-cfemail=\"aac4cbdac3cfd8ea\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#,<a class=\"__cf_email__\" data-cfemail=\"a8d8c1e8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#}&amp;@10000;r2//TableForm</pre>"}, {"lang": "Maxima", "loc": 23, "block": "<pre class=\"text highlighted_source\">cfeval(x)\u00a0:= block([a, b, n, z], a: x[1], b: x[2], n: length(a), z: 0,<br/>   for i from n step -1 thru 2 do z: b[i]/(a[i] + z), a[1] + z)$<br/>\u00a0<br/>cf_sqrt2(n)\u00a0:= [cons(1, makelist(2, i, 2, n)), cons(0, makelist(1, i, 2, n))]$<br/>\u00a0<br/>cf_e(n)\u00a0:= [cons(2, makelist(i, i, 1, n - 1)), append([0, 1], makelist(i, i, 1, n - 2))]$<br/>\u00a0<br/>cf_pi(n)\u00a0:= [cons(3, makelist(6, i, 2, n)), cons(0, makelist((2*i - 1)^2, i, 1, n - 1))]$<br/>\u00a0<br/>cfeval(cf_sqrt2(20)), numer;   /* 1.414213562373097 */<br/>% - sqrt(2), numer;            /* 1.3322676295501878*10^-15 */<br/>\u00a0<br/>cfeval(cf_e(20)), numer;       /* 2.718281828459046 */<br/>% -\u00a0%e, numer;                 /* 4.4408920985006262*10^-16 */<br/>\u00a0<br/>cfeval(cf_pi(20)), numer;      /* 3.141623806667839 */<br/>% -\u00a0%pi, numer;                /* 3.115307804568701*10^-5 */<br/>\u00a0<br/>\u00a0<br/>/* convergence is much slower for pi */<br/>fpprec: 20$<br/>x: cfeval(cf_pi(10000))$<br/>bfloat(x -\u00a0%pi);               /* 2.4999999900104930006b-13 */</pre>"}, {"lang": "NetRexx", "loc": 53, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* REXX ***************************************************************<br/>* Derived from REXX ... Derived from PL/I with a little \"massage\"<br/>* SQRT2=  1.41421356237309505              &lt;- PL/I Result<br/>*         1.41421356237309504880168872421  &lt;- NetRexx Result 30 digits<br/>* NAPIER= 2.71828182845904524<br/>*         2.71828182845904523536028747135<br/>* PI=     3.14159262280484695<br/>*         3.14159262280484694855146925223<br/>* 07.09.2012 Walter Pachl<br/>* 08.09.2012 Walter Pachl simplified (with the help of a friend)<br/>**********************************************************************/</span><br/>options replace format comments java crossref savelog symbols<br/>  <span class=\"kw1\">class</span> CFB <span class=\"kw2\">public</span><br/>\u00a0<br/><span class=\"kw1\">properties</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">Numeric</span> Digits <span class=\"nu0\">30</span><br/>  Sqrt2 =<span class=\"nu0\">1</span><br/>  napier=<span class=\"nu0\">2</span><br/>  pi    =<span class=\"nu0\">3</span><br/>  a     =<span class=\"nu0\">0</span><br/>  b     =<span class=\"nu0\">0</span><br/>\u00a0<br/>method main<span class=\"br0\">(</span>args = String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'SQRT2='</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>  calc<span class=\"br0\">(</span>sqrt2,  <span class=\"nu0\">200</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'NAPIER='</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> calc<span class=\"br0\">(</span>napier, <span class=\"nu0\">200</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'PI='</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>     calc<span class=\"br0\">(</span>pi,     <span class=\"nu0\">200</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Return</span><br/>\u00a0<br/>method get_Coeffs<span class=\"br0\">(</span>form,n<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">select</span><br/>    <span class=\"kw3\">when</span> form=Sqrt2 <span class=\"kw3\">Then</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> a = <span class=\"nu0\">2</span>; <span class=\"kw3\">else</span> a = <span class=\"nu0\">1</span><br/>      b = <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">when</span> form=Napier <span class=\"kw3\">Then</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> a = n; <span class=\"kw3\">else</span> a = <span class=\"nu0\">2</span><br/>      <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> b = n - <span class=\"nu0\">1</span>; <span class=\"kw3\">else</span> b = <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">when</span> form=pi <span class=\"kw3\">Then</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> a = <span class=\"nu0\">6</span>; <span class=\"kw3\">else</span> a = <span class=\"nu0\">3</span><br/>      b = <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">Return</span><br/>\u00a0<br/>method calc<span class=\"br0\">(</span>form,n<span class=\"br0\">)</span>  <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>  temp=<span class=\"nu0\">0</span><br/>  <span class=\"kw1\">loop</span> ni = n to <span class=\"nu0\">1</span> by -<span class=\"nu0\">1</span><br/>    Get_Coeffs<span class=\"br0\">(</span>form,ni<span class=\"br0\">)</span><br/>    temp = b<span class=\"sy0\">/</span><span class=\"br0\">(</span>a + temp<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span><br/>  Get_Coeffs<span class=\"br0\">(</span>form,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span>a + temp<span class=\"br0\">)</span></pre>"}, {"lang": "OCaml", "loc": 14, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> pi <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>, <span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/><span class=\"kw1\">and</span> nap <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, <span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmax\"><span class=\"kw3\">max</span></a> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, n<span class=\"br0\">)</span><br/><span class=\"kw1\">and</span> root2 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw1\">fun</span> n <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>\u00a0<br/><span class=\"kw1\">let</span> eval <span class=\"br0\">(</span>i,f<span class=\"br0\">)</span> k <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> frac n <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> a, b <span class=\"sy0\">=</span> f n <span class=\"kw1\">in</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> a <span class=\"sy0\">/.</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> b <span class=\"sy0\">+.</span><br/>      <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;=</span> k <span class=\"kw1\">then</span> <span class=\"nu0\">0.0</span> <span class=\"kw1\">else</span> frac <span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> i <span class=\"sy0\">+.</span> frac <span class=\"nu0\">1</span> <span class=\"kw1\">in</span><br/>\u00a0<br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"sqrt(2)\\t=\u00a0%.15f\\n\"</span> <span class=\"br0\">(</span>eval root2 <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"e\\t=\u00a0%.15f\\n\"</span> <span class=\"br0\">(</span>eval nap <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"pi\\t=\u00a0%.15f\\n\"</span> <span class=\"br0\">(</span>eval pi <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"parigp highlighted_source\">back<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>t<span class=\"sy0\">=</span><span class=\"kw1\">contfracpnqn</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>t<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">/</span>t<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"nu1\">1</span>.<br/><span class=\"me1\">back</span><span class=\"br0\">(</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">100</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">-</span><span class=\"br0\">(</span>i<span class=\"sy0\">==</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 10, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> continued_fraction <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">//</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> continued_fraction<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"sy0\">,</span> <span class=\"re0\">$b</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"\u221a2  \u2248\u00a0%.9f<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> continued_fraction <span class=\"kw1\">do</span> <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"re0\">$n</span><span class=\"sy0\">++</span> <span class=\"sy0\">?</span> <span class=\"nu0\">2</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"e   \u2248\u00a0%.9f<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> continued_fraction <span class=\"kw1\">do</span> <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"re0\">$n</span><span class=\"sy0\">++</span> <span class=\"sy0\">||</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"re0\">$n</span><span class=\"sy0\">++</span> <span class=\"sy0\">||</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"\u03c0   \u2248\u00a0%.9f<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> continued_fraction <span class=\"kw1\">do</span> <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"re0\">$n</span><span class=\"sy0\">++</span> <span class=\"sy0\">?</span> <span class=\"nu0\">6</span> <span class=\"sy0\">:</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"re0\">*$n</span><span class=\"sy0\">++</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span>_000<span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"\u03c0/2 \u2248\u00a0%.9f<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> continued_fraction <span class=\"kw1\">do</span> <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">++</span> <span class=\"sy0\">||</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span>_000<span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 10, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> continued<span class=\"sy0\">-</span>fraction<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"re0\">@a</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">@b</span><span class=\"sy0\">,</span> Int <span class=\"sy0\">:</span><span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">@a</span><span class=\"br0\">[</span><span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">@a</span><span class=\"br0\">[</span><span class=\"re0\">$_</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">@b</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> <span class=\"re0\">$x</span> <span class=\"kw1\">for</span> <span class=\"kw3\">reverse</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..^</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">printf</span> <span class=\"st0\">\"\u221a2 \u2248%.9f<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> continued<span class=\"sy0\">-</span>fraction<span class=\"br0\">(</span><span class=\"sy0\">:</span>a<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"kw1\">xx</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>b<span class=\"br0\">(</span>Nil<span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">xx</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">printf</span> <span class=\"st0\">\"e  \u2248%.9f<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> continued<span class=\"sy0\">-</span>fraction<span class=\"br0\">(</span><span class=\"sy0\">:</span>a<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>b<span class=\"br0\">(</span>Nil<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">printf</span> <span class=\"st0\">\"\u03c0  \u2248%.9f<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> continued<span class=\"sy0\">-</span>fraction<span class=\"br0\">(</span><span class=\"sy0\">:</span>a<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"nu0\">6</span> <span class=\"kw1\">xx</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>b<span class=\"br0\">(</span>Nil<span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">X</span><span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 23, "block": "<pre class=\"text highlighted_source\">function continued_fraction(integer steps, integer rid_a, integer rid_b)<br/>atom res = 0<br/>  for n=steps to 1 by -1 do<br/>     res\u00a0:= call_func(rid_b,{n}) / (call_func(rid_a,{n}) + res)<br/>  end for<br/>  return call_func(rid_a,{0}) + res<br/>end function<br/>\u00a0<br/>function sqr2_a(integer n) return iff(n=0?1:2) end function<br/>function sqr2_b(integer n) return 1 end function<br/>\u00a0<br/>function nap_a(integer n) return iff(n=0?2:n) end function<br/>function nap_b(integer n) return iff(n=1?1:n-1) end function<br/>\u00a0<br/>function pi_a(integer n) return iff(n=0?3:6) end function<br/>function pi_b(integer n) return iff(n=1?1:power(2*n-1,2)) end function<br/>\u00a0<br/>constant precision = 10000<br/>\u00a0<br/>printf(1,\"Precision:\u00a0%d\\n\", {precision})<br/>printf(1,\"Sqr(2):   \u00a0%.10g\\n\", {continued_fraction(precision, routine_id(\"sqr2_a\"), routine_id(\"sqr2_b\"))})<br/>printf(1,\"Napier:   \u00a0%.10g\\n\", {continued_fraction(precision, routine_id(\"nap_a\"), routine_id(\"nap_b\"))})<br/>printf(1,\"Pi:       \u00a0%.10g\\n\", {continued_fraction(precision, routine_id(\"pi_a\"), routine_id(\"pi_b\"))})</pre>"}, {"lang": "PL/I", "loc": 14, "block": "<pre class=\"pli highlighted_source\"><span class=\"coMULTI\">/* Version for SQRT(2) */</span><br/>test<span class=\"sy0\">:</span> <span class=\"kw1\">proc</span> <span class=\"kw1\">options</span> <span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> n <span class=\"kw1\">fixed</span><span class=\"sy0\">;</span><br/>\u00a0<br/>denom<span class=\"sy0\">:</span> <span class=\"kw1\">procedure</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">recursive</span> <span class=\"kw1\">returns</span> <span class=\"br0\">(</span><span class=\"kw1\">float</span> <span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">declare</span> n <span class=\"kw1\">fixed</span><span class=\"sy0\">;</span><br/>   n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">100</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span>denom<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> denom<span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">put</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span>denom<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span> test<span class=\"sy0\">;</span></pre>"}, {"lang": "Prolog", "loc": 43, "block": "<pre class=\"prolog highlighted_source\">continued_fraction <span class=\"sy1\">:-</span><br/>\t<span class=\"co1\">% square root 2</span><br/>\tcontinued_fraction<span class=\"br0\">(</span><span class=\"nu0\">200</span><span class=\"sy4\">,</span> sqrt_2_ab<span class=\"sy4\">,</span> V1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'sqrt(2) = ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>V1<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% napier</span><br/>\tcontinued_fraction<span class=\"br0\">(</span><span class=\"nu0\">200</span><span class=\"sy4\">,</span> napier_ab<span class=\"sy4\">,</span> V2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'e       = ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>V2<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% pi</span><br/>\tcontinued_fraction<span class=\"br0\">(</span><span class=\"nu0\">200</span><span class=\"sy4\">,</span> pi_ab<span class=\"sy4\">,</span> V3<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'pi      = ~w~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>V3<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">% code for continued fractions</span><br/>continued_fraction<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Compute_ab<span class=\"sy4\">,</span> V<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tcontinued_fraction<span class=\"br0\">(</span>N<span class=\"sy4\">,</span>  Compute_ab<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>continued_fraction<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span>  Compute_ab<span class=\"sy4\">,</span> Temp<span class=\"sy4\">,</span> V<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"br0\">(</span>Compute_ab<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> A<span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tV <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> A <span class=\"sy3\">+</span> Temp<span class=\"sy4\">.</span><br/>\u00a0<br/>continued_fraction<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Compute_ab<span class=\"sy4\">,</span> Tmp<span class=\"sy4\">,</span> V<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"br0\">(</span>Compute_ab<span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> A<span class=\"sy4\">,</span> B<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tTmp1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> B <span class=\"sy3\">/</span> <span class=\"br0\">(</span>A <span class=\"sy3\">+</span> Tmp<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tN1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\tcontinued_fraction<span class=\"br0\">(</span>N1<span class=\"sy4\">,</span> Compute_ab<span class=\"sy4\">,</span> Tmp1<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% specific codes for examples</span><br/><span class=\"co1\">% definitions for square root of 2</span><br/>sqrt_2_ab<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>sqrt_2_ab<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% definitions for napier</span><br/>napier_ab<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>napier_ab<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>napier_ab<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> V<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tV <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% definitions for pi</span><br/>pi_ab<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">3</span><span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>pi_ab<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> <span class=\"nu0\">6</span><span class=\"sy4\">,</span> V<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tV <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy3\">*</span> N <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy3\">*</span> N <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "Python", "loc": 67, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> fractions <span class=\"kw1\">import</span> Fraction<br/><span class=\"kw1\">import</span> <span class=\"kw3\">itertools</span><br/><span class=\"kw1\">try</span>: <span class=\"kw2\">zip</span> <span class=\"sy0\">=</span> <span class=\"kw3\">itertools</span>.<span class=\"me1\">izip</span><br/><span class=\"kw1\">except</span>: <span class=\"kw1\">pass</span><br/>\u00a0<br/><span class=\"co1\"># The Continued Fraction</span><br/><span class=\"kw1\">def</span> CF<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> t<span class=\"br0\">)</span>:<br/>  terms <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"kw3\">itertools</span>.<span class=\"me1\">islice</span><span class=\"br0\">(</span><span class=\"kw2\">zip</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">,</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  z <span class=\"sy0\">=</span> Fraction<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> a<span class=\"sy0\">,</span> b <span class=\"kw1\">in</span> <span class=\"kw2\">reversed</span><span class=\"br0\">(</span>terms<span class=\"br0\">)</span>:<br/>    z <span class=\"sy0\">=</span> a + b / z<br/>  <span class=\"kw1\">return</span> z<br/>\u00a0<br/><span class=\"co1\"># Approximates a fraction to a string</span><br/><span class=\"kw1\">def</span> pRes<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> d<span class=\"br0\">)</span>:<br/>  q<span class=\"sy0\">,</span> x <span class=\"sy0\">=</span> <span class=\"kw2\">divmod</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  res <span class=\"sy0\">=</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span>q<span class=\"br0\">)</span><br/>  res +<span class=\"sy0\">=</span> <span class=\"st0\">\".\"</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span>:<br/>    x *<span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>    q<span class=\"sy0\">,</span> x <span class=\"sy0\">=</span> <span class=\"kw2\">divmod</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    res +<span class=\"sy0\">=</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span>q<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> res<br/>\u00a0<br/><span class=\"co1\"># Test the Continued Fraction for sqrt2</span><br/><span class=\"kw1\">def</span> sqrt2_a<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">yield</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw3\">itertools</span>.<span class=\"me1\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">yield</span> x<br/>\u00a0<br/><span class=\"kw1\">def</span> sqrt2_b<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw3\">itertools</span>.<span class=\"me1\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">yield</span> x<br/>\u00a0<br/>cf <span class=\"sy0\">=</span> CF<span class=\"br0\">(</span>sqrt2_a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> sqrt2_b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">950</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>pRes<span class=\"br0\">(</span>cf<span class=\"sy0\">,</span> <span class=\"nu0\">200</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">#1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623091229702492483605585073721264412149709993583141322266592750559275579995050115278206057147</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\"># Test the Continued Fraction for Napier's Constant</span><br/><span class=\"kw1\">def</span> Napier_a<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">yield</span> <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw3\">itertools</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">yield</span> x<br/>\u00a0<br/><span class=\"kw1\">def</span> Napier_b<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">yield</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw3\">itertools</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">yield</span> x<br/>\u00a0<br/>cf <span class=\"sy0\">=</span> CF<span class=\"br0\">(</span>Napier_a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Napier_b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">950</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>pRes<span class=\"br0\">(</span>cf<span class=\"sy0\">,</span> <span class=\"nu0\">200</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">#2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901</span><br/>\u00a0<br/><span class=\"co1\"># Test the Continued Fraction for Pi</span><br/><span class=\"kw1\">def</span> Pi_a<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">yield</span> <span class=\"nu0\">3</span><br/>  <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw3\">itertools</span>.<span class=\"me1\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">yield</span> x<br/>\u00a0<br/><span class=\"kw1\">def</span> Pi_b<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>  <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw3\">itertools</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">yield</span> x*x<br/>\u00a0<br/>cf <span class=\"sy0\">=</span> CF<span class=\"br0\">(</span>Pi_a<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> Pi_b<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">950</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>pRes<span class=\"br0\">(</span>cf<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">#3.1415926532</span></pre>"}, {"lang": "Racket", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (calc cf n)<br/>  (match/values (cf 0)<br/>    [(a0 b0)<br/>     (+ a0<br/>        (for/fold ([t 0.0]) ([i (in-range (+ n 1) 0 -1)])<br/>          (match/values (cf i)<br/>                        [(a b) (/ b (+ a t))])))]))<br/>\u00a0<br/>(define (cf-sqrt i)   (values  (if (&gt; i 0) 2 1)  1))<br/>(define (cf-napier i) (values  (if (&gt; i 0) i 2)  (if (&gt; i 1) (- i 1) 1)))<br/>(define (cf-pi i)     (values  (if (&gt; i 0) 6 3)  (sqr (- (* 2 i) 1))))<br/>\u00a0<br/>(calc cf-sqrt   200)<br/>(calc cf-napier 200)<br/>(calc cf-pi     200)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 43, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  calculates and displays  values of  various  continued fractions.       */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> terms digs <span class=\"sy0\">.</span><br/><span class=\"kw1\">if</span> terms==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> terms==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> terms=<span class=\"nu0\">500</span><br/><span class=\"kw1\">if</span>  digs==<span class=\"st0\">''</span> <span class=\"sy0\">|</span>  digs==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span>  digs=<span class=\"nu0\">100</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> digs                              <span class=\"coMULTI\">/*use  100  decimal digits for display.*/</span><br/>b<span class=\"sy0\">.</span>=<span class=\"nu0\">1</span>                                             <span class=\"coMULTI\">/*omitted \u00df terms are assumed to be  1.*/</span><br/><span class=\"coMULTI\">/*\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550*/</span><br/>a<span class=\"sy0\">.</span>=<span class=\"nu0\">2</span>;                                                           <span class=\"kw1\">call</span> tell <span class=\"st0\">'\u221a2'</span>,      cf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550*/</span><br/>a<span class=\"sy0\">.</span>=<span class=\"nu0\">1</span>;  <span class=\"kw1\">do</span> N=<span class=\"nu0\">2</span>  <span class=\"kw2\">by</span>  <span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> terms; a<span class=\"sy0\">.</span>N=<span class=\"nu0\">2</span>; <span class=\"kw3\">end</span>;                     <span class=\"kw1\">call</span> tell <span class=\"st0\">'\u221a3'</span>,      cf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/*also:  2\u2219sin(\u03c0/3) */</span><br/><span class=\"coMULTI\">/*\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550*/</span><br/>a<span class=\"sy0\">.</span>=<span class=\"nu0\">2</span>                  <span class=\"coMULTI\">/*              ___ */</span><br/>      <span class=\"kw1\">do</span> N=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">17</span>   <span class=\"coMULTI\">/*generalized  \u221a N  */</span><br/>      b<span class=\"sy0\">.</span>=N-<span class=\"nu0\">1</span>;                          NN=<span class=\"kw6\">right</span><span class=\"br0\">(</span>N, <span class=\"nu0\">2</span><span class=\"br0\">)</span>;          <span class=\"kw1\">call</span> tell <span class=\"st0\">'gen \u221a'</span>NN, cf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*N*/</span><br/><span class=\"coMULTI\">/*\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550*/</span><br/>a<span class=\"sy0\">.</span>=<span class=\"nu0\">2</span>;   b<span class=\"sy0\">.</span>=-<span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>;                                                <span class=\"kw1\">call</span> tell <span class=\"st0\">'gen \u221a \u00bd'</span>, cf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550*/</span><br/>  <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> terms; a<span class=\"sy0\">.</span>j=j;  <span class=\"kw1\">if</span> j<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>   <span class=\"kw3\">then</span> b<span class=\"sy0\">.</span>j=a<span class=\"sy0\">.</span>p; p=j; <span class=\"kw3\">end</span>;    <span class=\"kw1\">call</span> tell <span class=\"st0\">'e'</span>,       cf<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550*/</span><br/>a<span class=\"sy0\">.</span>=<span class=\"nu0\">1</span>;                                                           <span class=\"kw1\">call</span> tell <span class=\"st0\">'\u03c6, phi'</span>,  cf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550*/</span><br/>a<span class=\"sy0\">.</span>=<span class=\"nu0\">1</span>;    <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> terms;  <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"nu0\">2</span>  <span class=\"kw3\">then</span> a<span class=\"sy0\">.</span>j=j;        <span class=\"kw3\">end</span>;    <span class=\"kw1\">call</span> tell <span class=\"st0\">'tan(1)'</span>,  cf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550*/</span><br/>         <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> terms;                a<span class=\"sy0\">.</span>j=<span class=\"nu0\">2</span><span class=\"sy0\">*</span>j+<span class=\"nu0\">1</span>;    <span class=\"kw3\">end</span>;    <span class=\"kw1\">call</span> tell <span class=\"st0\">'coth(1)'</span>, cf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550*/</span><br/>         <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span> <span class=\"kw2\">for</span> terms;                a<span class=\"sy0\">.</span>j=<span class=\"nu0\">4</span><span class=\"sy0\">*</span>j+<span class=\"nu0\">2</span>;    <span class=\"kw3\">end</span>;    <span class=\"kw1\">call</span> tell <span class=\"st0\">'coth(\u00bd)'</span>, cf<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>    <span class=\"coMULTI\">/*also:  [e+1]\u00f7[e-1] */</span><br/><span class=\"coMULTI\">/*\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550*/</span><br/>                     terms=<span class=\"nu0\">100000</span><br/>a<span class=\"sy0\">.</span>=<span class=\"nu0\">6</span>;    <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> terms;  b<span class=\"sy0\">.</span>j=<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>j-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span>;            <span class=\"kw3\">end</span>;    <span class=\"kw1\">call</span> tell <span class=\"st0\">'\u03c0, pi'</span>,   cf<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>cf:      <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> a<span class=\"sy0\">.</span> b<span class=\"sy0\">.</span> terms;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> C;    \u00a0!=<span class=\"nu0\">0</span>;    <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">9</span>+<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                                          <span class=\"kw1\">do</span> k=terms  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> terms;  d=a<span class=\"sy0\">.</span>k+!; \u00a0!=b<span class=\"sy0\">.</span>k<span class=\"sy0\">/</span>d<br/>                                          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>         <span class=\"kw1\">return</span>\u00a0!+C<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>tell:    <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span>\u00a0?,v;   $=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"kw6\">format</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>+<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;    w=<span class=\"nu0\">50</span>    <span class=\"coMULTI\">/*50 bytes of terms*/</span><br/>         aT=;     <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>;  _=<span class=\"kw6\">space</span><span class=\"br0\">(</span>aT a<span class=\"sy0\">.</span>k<span class=\"br0\">)</span>;  <span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span>w  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>;  aT=_;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*k*/</span><br/>         bT=;     <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>;  _=<span class=\"kw6\">space</span><span class=\"br0\">(</span>bT b<span class=\"sy0\">.</span>k<span class=\"br0\">)</span>;  <span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span>w  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>;  bT=_;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*k*/</span><br/>                          <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>?,<span class=\"nu0\">8</span><span class=\"br0\">)</span>   <span class=\"st0\">\"=\"</span>    $     <span class=\"st0\">'  \u03b1 terms='</span>aT  <span class=\"sy0\">...</span><br/>         <span class=\"kw1\">if</span> b<span class=\"sy0\">.</span>1<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span>,<span class=\"nu0\">12</span>+<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"st0\">'  \u00df terms='</span>bT  <span class=\"sy0\">...</span><br/>         a=;   b<span class=\"sy0\">.</span>=<span class=\"nu0\">1</span>;  <span class=\"kw1\">return</span>       <span class=\"coMULTI\">/*only 50 bytes of  \u03b1 &amp; \u00df terms  \u2191   are displayed.  */</span></pre>"}, {"lang": "Ring", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Continued fraction<br/>\u00a0<br/>see \"SQR(2) = \" + contfrac(1, 1, \"2\", \"1\") + nl<br/>see \"        e = \" + contfrac(2, 1, \"n\", \"n\") + nl<br/>see \"       PI = \" + contfrac(3, 1, \"6\", \"(2*n+1)^2\") + nl<br/>\u00a0<br/>func contfrac(a0, b1, a, b)<br/>        expr = \"\"<br/>        n = 0<br/>        while len(expr) &lt; (700 - n)<br/>                 n = n + 1<br/>                 eval(\"temp1=\" + a)<br/>                 eval(\"temp2=\" + b)<br/>                 expr = expr + string(temp1) + char(43) + string(temp2) + \"/(\"<br/>        end <br/>        str = copy(\")\",n)<br/>        eval(\"temp3=\" + expr + \"1\" + str)<br/>        return a0 + b1 / temp3<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 47, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'bigdecimal'</span><br/>\u00a0<br/><span class=\"co1\"># square root of 2</span><br/>sqrt2 = <span class=\"kw4\">Object</span>.<span class=\"me1\">new</span><br/><span class=\"kw1\">def</span> sqrt2.<span class=\"me1\">a</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>; n == <span class=\"nu0\">1</span>\u00a0? <span class=\"nu0\">1</span>\u00a0: <span class=\"nu0\">2</span>; <span class=\"kw1\">end</span><br/><span class=\"kw1\">def</span> sqrt2.<span class=\"me1\">b</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>; <span class=\"nu0\">1</span>; <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># Napier's constant</span><br/>napier = <span class=\"kw4\">Object</span>.<span class=\"me1\">new</span><br/><span class=\"kw1\">def</span> napier.<span class=\"me1\">a</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>; n == <span class=\"nu0\">1</span>\u00a0? <span class=\"nu0\">2</span>\u00a0: n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>; <span class=\"kw1\">end</span><br/><span class=\"kw1\">def</span> napier.<span class=\"me1\">b</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>; n == <span class=\"nu0\">1</span>\u00a0? <span class=\"nu0\">1</span>\u00a0: n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>; <span class=\"kw1\">end</span><br/>\u00a0<br/>pi = <span class=\"kw4\">Object</span>.<span class=\"me1\">new</span><br/><span class=\"kw1\">def</span> pi.<span class=\"me1\">a</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>; n == <span class=\"nu0\">1</span>\u00a0? <span class=\"nu0\">3</span>\u00a0: <span class=\"nu0\">6</span>; <span class=\"kw1\">end</span><br/><span class=\"kw1\">def</span> pi.<span class=\"me1\">b</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>; <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span>; <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># Estimates the value of a continued fraction _cfrac_, to _prec_</span><br/><span class=\"co1\"># decimal digits of precision. Returns a BigDecimal. _cfrac_ must</span><br/><span class=\"co1\"># respond to _cfrac.a(n)_ and _cfrac.b(n)_ for integer _n_ &gt;= 1.</span><br/><span class=\"kw1\">def</span> estimate<span class=\"br0\">(</span>cfrac, prec<span class=\"br0\">)</span><br/>  last_result = <span class=\"kw2\">nil</span><br/>  terms = prec<br/>\u00a0<br/>  <span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>    <span class=\"co1\"># Estimate continued fraction for _n_ from 1 to _terms_.</span><br/>    result = cfrac.<span class=\"me1\">a</span><span class=\"br0\">(</span>terms<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>terms <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">downto</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>      a = BigDecimal cfrac.<span class=\"me1\">a</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>      b = BigDecimal cfrac.<span class=\"me1\">b</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>      digits = <span class=\"br0\">[</span>b.<span class=\"me1\">div</span><span class=\"br0\">(</span>result, <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">exponent</span> <span class=\"sy0\">+</span> prec, <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">max</span><br/>      result = a <span class=\"sy0\">+</span> b.<span class=\"me1\">div</span><span class=\"br0\">(</span>result, digits<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    result = result.<span class=\"me1\">round</span><span class=\"br0\">(</span>prec<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> result == last_result<br/>      <span class=\"kw2\">return</span> result<br/>    <span class=\"kw1\">else</span><br/>      <span class=\"co1\"># Double _terms_ and try again.</span><br/>      last_result = result<br/>      terms <span class=\"sy0\">*</span>= <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> estimate<span class=\"br0\">(</span>sqrt2, <span class=\"nu0\">50</span><span class=\"br0\">)</span>.<span class=\"me1\">to_s</span><span class=\"br0\">(</span><span class=\"st0\">'F'</span><span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span> estimate<span class=\"br0\">(</span>napier, <span class=\"nu0\">50</span><span class=\"br0\">)</span>.<span class=\"me1\">to_s</span><span class=\"br0\">(</span><span class=\"st0\">'F'</span><span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span> estimate<span class=\"br0\">(</span>pi, <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">to_s</span><span class=\"br0\">(</span><span class=\"st0\">'F'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Rust", "loc": 47, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>use std::iter;<br/>\u00a0<br/>// Calculating a continued fraction is quite easy with iterators, however<br/>// writing a proper iterator adapter is less so. We settle for a macro which<br/>// for most purposes works well enough.<br/>//<br/>// One limitation with this iterator based approach is that we cannot reverse<br/>// input iterators since they are not usually DoubleEnded. To circumvent this<br/>// we can collect the elements and then reverse them, however this isn't ideal<br/>// as we now have to store elements equal to the number of iterations.<br/>//<br/>// Another is that iterators cannot be resused once consumed, so it is often<br/>// required to make many clones of iterators.<br/>macro_rules! continued_fraction {<br/>    ($a:expr, $b:expr\u00a0; $iterations:expr) =&gt; (<br/>        ($a).zip($b)<br/>            .take($iterations)<br/>            .collect::&lt;Vec&lt;_&gt;&gt;().iter()<br/>            .rev()<br/>            .fold(0 as f64, |acc: f64, &amp;(x, y)| {<br/>                x as f64 + (y as f64 / acc)<br/>            })<br/>    );<br/>\u00a0<br/>    ($a:expr, $b:expr) =&gt; (continued_fraction!($a, $b\u00a0; 1000));<br/>}<br/>\u00a0<br/>fn main() {<br/>    // Sqrt(2)<br/>    let sqrt2a = (1..2).chain(iter::repeat(2));<br/>    let sqrt2b = iter::repeat(1);<br/>    println!(\"{}\", continued_fraction!(sqrt2a, sqrt2b));<br/>\u00a0<br/>\u00a0<br/>    // Napier's Constant<br/>    let napiera = (2..3).chain(1..);<br/>    let napierb = (1..2).chain(1..);<br/>    println!(\"{}\", continued_fraction!(napiera, napierb));<br/>\u00a0<br/>\u00a0<br/>    // Pi<br/>    let pia = (3..4).chain(iter::repeat(6));<br/>    let pib = (1i64..).map(|x| (2 * x - 1).pow(2));<br/>    println!(\"{}\", continued_fraction!(pia, pib));<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 31, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> CF <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> Stream.<span class=\"sy0\">_</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sqrt2 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">#::</span> from<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span> zip from<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> napier <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">#::</span> from<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> zip <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">#::</span> from<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pi <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"sy0\">#::</span> from<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span> zip <span class=\"br0\">(</span>from<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span> map <span class=\"br0\">{</span>x<span class=\"sy0\">=&gt;</span>x<span class=\"sy0\">*</span>x<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">// reference values, source: wikipedia</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> refPi     <span class=\"sy0\">=</span> <span class=\"st0\">\"3.14159265358979323846264338327950288419716939937510\"</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> refNapier <span class=\"sy0\">=</span> <span class=\"st0\">\"2.71828182845904523536028747135266249775724709369995\"</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> refSQRT2  <span class=\"sy0\">=</span> <span class=\"st0\">\"1.41421356237309504880168872420969807856967187537694\"</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> calc<span class=\"br0\">(</span>cf<span class=\"sy0\">:</span> Stream<span class=\"br0\">[</span><span class=\"br0\">(</span>Int, Int<span class=\"br0\">)</span><span class=\"br0\">]</span>, numberOfIters<span class=\"sy0\">:</span> Int<span class=\"sy0\">=</span><span class=\"nu0\">200</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> BigDecimal <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span>cf take numberOfIters toList<span class=\"br0\">)</span>.<span class=\"me1\">foldRight</span><span class=\"br0\">[</span>BigDecimal<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a, z<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a.<span class=\"sy0\">_</span>1+a.<span class=\"sy0\">_</span>2/z<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> approx<span class=\"br0\">(</span>cfV<span class=\"sy0\">:</span> BigDecimal, cfRefV<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p<span class=\"sy0\">:</span> Pair<span class=\"br0\">[</span>Char,Char<span class=\"br0\">]</span> <span class=\"sy0\">=&gt;</span> Boolean <span class=\"sy0\">=</span> pair <span class=\"sy0\">=&gt;</span><span class=\"br0\">(</span>pair.<span class=\"sy0\">_</span>1<span class=\"sy0\">==</span>pair.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>cfV.<span class=\"me1\">toString</span>+<span class=\"st0\">\" \"</span><span class=\"sy0\">*</span><span class=\"nu0\">34</span><span class=\"br0\">)</span>.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">34</span><span class=\"br0\">)</span> zip cfRefV.<span class=\"me1\">toString</span>.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">34</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      .<span class=\"me1\">takeWhile</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span>.<span class=\"me1\">foldRight</span><span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">:</span>Pair<span class=\"br0\">[</span>Char,Char<span class=\"br0\">]</span>,z<span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span>a.<span class=\"sy0\">_</span>1+z<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  List<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"sqrt2\"</span>,sqrt2,<span class=\"nu0\">50</span>,refSQRT2<span class=\"br0\">)</span>,<span class=\"br0\">(</span><span class=\"st0\">\"napier\"</span>,napier,<span class=\"nu0\">50</span>,refNapier<span class=\"br0\">)</span>,<span class=\"br0\">(</span><span class=\"st0\">\"pi\"</span>,pi,<span class=\"nu0\">3000</span>,refPi<span class=\"br0\">)</span><span class=\"br0\">)</span> foreach <span class=\"br0\">{</span>t<span class=\"sy0\">=&gt;</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>name,cf,iters,refV<span class=\"br0\">)</span> <span class=\"sy0\">=</span> t<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cfV <span class=\"sy0\">=</span> calc<span class=\"br0\">(</span>cf,iters<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>name+<span class=\"st0\">\":\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"ref value: \"</span>+refV.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">34</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"cf value:  \"</span>+<span class=\"br0\">(</span>cfV.<span class=\"me1\">toString</span>+<span class=\"st0\">\" \"</span><span class=\"sy0\">*</span><span class=\"nu0\">34</span><span class=\"br0\">)</span>.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">34</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"precision: \"</span>+approx<span class=\"br0\">(</span>cfV,refV<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 50, "block": "<pre class=\"scheme highlighted_source\">#<span class=\"sy0\">!</span>r6rs<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>rnrs base <span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>srfi\u00a0:<span class=\"nu0\">41</span> streams<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> nats <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">cons</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> x <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> nats<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>build<span class=\"sy0\">-</span>stream fn<span class=\"br0\">)</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">map</span> fn nats<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>cycle <span class=\"kw1\">s</span> . <span class=\"kw1\">S</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">null?</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"kw1\">S</span><span class=\"br0\">)</span><span class=\"br0\">)</span> stream<span class=\"sy0\">-</span>null<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">car</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span>apply stream<span class=\"sy0\">-</span>cycle <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"kw1\">S</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">cdr</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>cf<span class=\"sy0\">-</span><span class=\"kw1\">floor</span> cf<span class=\"br0\">)</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">car</span> cf<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>cf<span class=\"sy0\">-</span>num cf<span class=\"br0\">)</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">cdr</span> cf<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>cf<span class=\"sy0\">-</span>denom cf<span class=\"br0\">)</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">cdr</span> cf<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>cf<span class=\"sy0\">-</span><span class=\"kw1\">integer?</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">null?</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">cdr</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>cf<span class=\"sy0\">-&gt;</span>real x<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> refine <span class=\"br0\">(</span><span class=\"br0\">(</span>x x<span class=\"br0\">)</span> <span class=\"br0\">(</span>n <span class=\"nu0\">65536</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span>inf.0<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span>cf<span class=\"sy0\">-</span><span class=\"kw1\">integer?</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span>cf<span class=\"sy0\">-</span><span class=\"kw1\">floor</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>cf<span class=\"sy0\">-</span><span class=\"kw1\">floor</span> x<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>cf<span class=\"sy0\">-</span>num x<span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>refine <span class=\"br0\">(</span>cf<span class=\"sy0\">-</span>denom x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>real<span class=\"sy0\">-&gt;</span>cf x<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>let<span class=\"sy0\">-</span>values <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>integer<span class=\"sy0\">-</span>part fractional<span class=\"sy0\">-</span>part<span class=\"br0\">)</span> <span class=\"br0\">(</span>div<span class=\"sy0\">-</span>and<span class=\"sy0\">-</span>mod x <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> fractional<span class=\"sy0\">-</span>part <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>stream <span class=\"br0\">(</span>exact integer<span class=\"sy0\">-</span>part<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">cons</span><br/>         <span class=\"br0\">(</span>exact integer<span class=\"sy0\">-</span>part<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">cons</span><br/>          <span class=\"nu0\">1</span><br/>          <span class=\"br0\">(</span>real<span class=\"sy0\">-&gt;</span>cf <span class=\"br0\">(</span><span class=\"sy0\">/</span> fractional<span class=\"sy0\">-</span>part<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> sqrt2 <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">cons</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>constant <span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> napier<br/>  <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span>stream <span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>cycle <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">cdr</span> nats<span class=\"br0\">)</span> <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">cdr</span> nats<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> pi<br/>  <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span><span class=\"kw1\">cons</span> <span class=\"nu0\">3</span><br/>               <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>cycle <span class=\"br0\">(</span>build<span class=\"sy0\">-</span>stream <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                             <span class=\"br0\">(</span>stream<span class=\"sy0\">-</span>constant <span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 29, "block": "<pre class=\"ruby highlighted_source\">func continued_fraction<span class=\"br0\">(</span>a, _, <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>func continued_fraction<span class=\"br0\">(</span>a, b, n=<span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    a<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>b<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> continued_fraction<span class=\"br0\">(</span>a, b, n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var f = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><br/>    <span class=\"st0\">\"\u221a2\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span> var n = <span class=\"nu0\">0</span>; <span class=\"br0\">{</span> n<span class=\"sy0\">++</span>\u00a0? <span class=\"nu0\">2</span>\u00a0: <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span>,<br/>        <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">]</span>,<br/>    <span class=\"st0\">\"e\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span> var n = <span class=\"nu0\">0</span>; <span class=\"br0\">{</span> n<span class=\"sy0\">++</span> <span class=\"sy0\">||</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span>,<br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span> var n = <span class=\"nu0\">0</span>; <span class=\"br0\">{</span> n<span class=\"sy0\">++</span> <span class=\"sy0\">||</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span>,<br/>    <span class=\"br0\">]</span>,<br/>    <span class=\"st0\">\"\u03c0\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span> var n = <span class=\"nu0\">0</span>; <span class=\"br0\">{</span> n<span class=\"sy0\">++</span>\u00a0? <span class=\"nu0\">6</span>\u00a0: <span class=\"nu0\">3</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span>,<br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span> var n = <span class=\"nu0\">0</span>; <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span>,<br/>        <span class=\"nu0\">1</span>_000,<br/>    <span class=\"br0\">]</span>,<br/>    <span class=\"st0\">\"\u03c0/2\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><br/>        <span class=\"kw1\">do</span> <span class=\"br0\">{</span> var n = <span class=\"nu0\">0</span>; <span class=\"br0\">{</span> <span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>n<span class=\"sy0\">++</span> <span class=\"sy0\">||</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span>,<br/>        <span class=\"br0\">{</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span>,<br/>        <span class=\"nu0\">1</span>_000,<br/>    <span class=\"br0\">]</span><br/><span class=\"br0\">)</span>;<br/>\u00a0<br/>f.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>k,v<span class=\"sy0\">|</span><br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%3s \u2248\u00a0%.9f<span class=\"es0\">\\n</span>\"</span>, k, continued_fraction<span class=\"br0\">(</span>v...<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 41, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/><span class=\"co1\"># Term generators; yield list of pairs</span><br/><span class=\"kw1\">proc</span> r2 <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    yield <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span>yield <span class=\"br0\">{</span><span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> e <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    yield <span class=\"br0\">{</span><span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span>yield <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> n<span class=\"br0\">]</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> pi <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> n <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> a <span class=\"nu0\">3</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\tyield <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$a</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> n<span class=\"br0\">]</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> a <span class=\"nu0\">6</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Continued fraction calculator</span><br/><span class=\"kw1\">proc</span> cf <span class=\"br0\">{</span>generator <span class=\"br0\">{</span>termCount <span class=\"nu0\">50</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Get the chunk of terms we want to work with</span><br/>    <span class=\"kw1\">set</span> terms <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span>coroutine cf.c <span class=\"re0\">$generator</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$terms</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$termCount</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> terms <span class=\"br0\">[</span>cf.c<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">rename</span> cf.c <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Merge the terms to compute the result</span><br/>    <span class=\"kw1\">set</span> val <span class=\"nu0\">0.0</span><br/>    <span class=\"kw1\">foreach</span> pair <span class=\"br0\">[</span>lreverse <span class=\"re0\">$terms</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\tlassign <span class=\"re0\">$pair</span> a b<br/>\t<span class=\"kw1\">set</span> val <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$a</span> + <span class=\"re0\">$b</span>/<span class=\"re0\">$val</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$val</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Demonstration</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>cf r2<span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>cf e<span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>cf pi <span class=\"nu0\">250</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\"># Converges more slowly</span></pre>"}, {"lang": "XPL0", "loc": 25, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;<br/>int     N;<br/>real    A, B, F;<br/>[Format(1, 15);<br/>A:= 2.0;  B:= 1.0;  N:= 16;<br/>IntOut(0, N); CrLf(0);<br/>F:= 0.0;<br/>while N&gt;=1 do [F:= B/(A+F);  N:= N-1];<br/>RlOut(0, 1.0+F);  CrLf(0);<br/>RlOut(0, sqrt(2.0));  CrLf(0);<br/>\u00a0<br/>N:= 13;<br/>IntOut(0, N); CrLf(0);<br/>F:= 0.0;<br/>while N&gt;=2 do [F:= float(N-1)/(float(N)+F);  N:= N-1];<br/>RlOut(0, 2.0 + 1.0/(1.0+F));  CrLf(0);<br/>RlOut(0, Exp(1.0));  CrLf(0);<br/>\u00a0<br/>N:= 10000;<br/>IntOut(0, N); CrLf(0);<br/>F:= 0.0;<br/>while N&gt;=1 do [F:= float(sq(2*N-1))/(6.0+F);  N:= N-1];<br/>RlOut(0, 3.0+F);  CrLf(0);<br/>RlOut(0, ACos(-1.0));  CrLf(0);<br/>]</pre>"}, {"lang": "zkl", "loc": 4, "block": "<pre class=\"text highlighted_source\">fcn cf(fa,fb,a0){fcn(fa,fb,a0,n){<br/>   a0 + [n..1,-1].reduce(<br/>        'wrap(p,n){ fb(n)/(fa(n)+p) },0.0) }.fp(fa,fb,a0)<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 11, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> a0=<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> b1=<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> a$=<span class=\"st0\">\"2\"</span>: <span class=\"kw1\">LET</span> b$=<span class=\"st0\">\"1\"</span>: <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"SQR(2) = \"</span>;: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> a0=<span class=\"nu0\">2</span>: <span class=\"kw1\">LET</span> b1=<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> a$=<span class=\"st0\">\"N\"</span>: <span class=\"kw1\">LET</span> b$=<span class=\"st0\">\"N\"</span>: <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"e = \"</span>;: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">LET</span> a0=<span class=\"nu0\">3</span>: <span class=\"kw1\">LET</span> b1=<span class=\"nu0\">1</span>: <span class=\"kw1\">LET</span> a$=<span class=\"st0\">\"6\"</span>: <span class=\"kw1\">LET</span> b$=<span class=\"st0\">\"(2*N+1)^2\"</span>: <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"PI = \"</span>;: <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">1000</span><br/><span class=\"nu0\">100</span> STOP <br/><span class=\"nu0\">1000</span> <span class=\"kw1\">LET</span> n=<span class=\"nu0\">0</span>: <span class=\"kw1\">LET</span> e$=<span class=\"st0\">\"\"</span>: <span class=\"kw1\">LET</span> p$=<span class=\"st0\">\"\"</span><br/><span class=\"nu0\">1010</span> <span class=\"kw1\">LET</span> n=n+<span class=\"nu0\">1</span><br/><span class=\"nu0\">1020</span> <span class=\"kw1\">LET</span> e$=e$+<span class=\"kw3\">STR</span>$ <span class=\"kw3\">VAL</span> a$+<span class=\"st0\">\"+\"</span>+<span class=\"kw3\">STR</span>$ <span class=\"kw3\">VAL</span> b$+<span class=\"st0\">\"/(\"</span><br/><span class=\"nu0\">1030</span> <span class=\"kw1\">IF</span> <span class=\"kw3\">LEN</span> e$&lt;<span class=\"br0\">(</span><span class=\"nu0\">4000</span>-n<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1010</span><br/><span class=\"nu0\">1035</span> <span class=\"kw1\">FOR</span> i=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n: <span class=\"kw1\">LET</span> p$=p$+<span class=\"st0\">\")\"</span>: <span class=\"kw1\">NEXT</span> i<br/><span class=\"nu0\">1040</span> <span class=\"kw1\">PRINT</span> a0+b1/<span class=\"kw3\">VAL</span> <span class=\"br0\">(</span>e$+<span class=\"st0\">\"1\"</span>+p$<span class=\"br0\">)</span><br/><span class=\"nu0\">1050</span> <span class=\"kw1\">RETURN</span></pre>"}]}