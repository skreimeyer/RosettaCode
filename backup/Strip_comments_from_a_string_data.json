{"task": "Strip_comments_from_a_string", "blocks": [{"lang": "Ada", "loc": 20, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">procedure</span> Program <span class=\"kw1\">is</span><br/>   Comment_Characters\u00a0: String\u00a0:= <span class=\"st0\">\"#;\"</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">declare</span><br/>\t Line\u00a0: String\u00a0:= Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Get_Line</span>;<br/>      <span class=\"kw1\">begin</span><br/>\t <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Line'Length = <span class=\"nu0\">0</span>;<br/>\t Outer_Loop\u00a0: <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Line'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>\t    <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> Comment_Characters'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>\t       <span class=\"kw1\">if</span> Comment_Characters<span class=\"br0\">(</span>J<span class=\"br0\">)</span> = Line<span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\t  Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span><span class=\"br0\">(</span>Line<span class=\"br0\">(</span>Line'First .. <span class=\"me1\">I</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\t\t  <span class=\"kw3\">exit</span> Outer_Loop;<br/>\t       <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>\t    <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span> Outer_Loop;<br/>      <span class=\"kw1\">end</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Program;</pre>"}, {"lang": "ALGOL 68", "loc": 26, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\">#!/usr/local/bin/a68g --script #</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> trim comment <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> line<span class=\"sy1\">,</span> <span class=\"kw3\">CHAR</span> marker<span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw3\">INT</span> index <span class=\"sy1\">:=</span> <span class=\"kw8\">UPB</span> line<span class=\"sy1\">+</span>1<span class=\"sy1\">;</span><br/>  <span class=\"kw26\">char in string</span><span class=\"br0\">(</span>marker<span class=\"sy1\">,</span> index<span class=\"sy1\">,</span> line<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> index<span class=\"sy1\">-</span>1 <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> <span class=\"kw8\">LWB</span> line<br/>  <span class=\"kw2\">WHILE</span> line<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">=</span><span class=\"st0\">\" \"</span> <span class=\"kw2\">DO</span> index <span class=\"sy1\">:=</span> i <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  line<span class=\"br0\">[</span><span class=\"sy1\">:</span>index<span class=\"sy1\">-</span>1<span class=\"br0\">]</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">CHAR</span> q <span class=\"sy1\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><br/>  q<span class=\"sy1\">,</span> trim comment<span class=\"br0\">(</span><span class=\"st0\">\"apples, pears # and bananas\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"#\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> q<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"sy1\">,</span><br/>  q<span class=\"sy1\">,</span> trim comment<span class=\"br0\">(</span><span class=\"st0\">\"apples, pears\u00a0; and bananas\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\";\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> q<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"sy1\">,</span><br/>  q<span class=\"sy1\">,</span> trim comment<span class=\"br0\">(</span><span class=\"st0\">\"apples, pears and bananas  \"</span><span class=\"sy1\">,</span> <span class=\"st0\">\";\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> q<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"sy1\">,</span><br/>  q<span class=\"sy1\">,</span> trim comment<span class=\"br0\">(</span><span class=\"st0\">\"    \"</span><span class=\"sy1\">,</span> <span class=\"st0\">\";\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> q<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"sy1\">,</span> <span class=\"coMULTI\"># blank string #</span><br/>  q<span class=\"sy1\">,</span> trim comment<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\";\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> q<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span>  <span class=\"coMULTI\"># empty string #</span><br/><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>CO Alternatively Algol68g has available <span class=\"st0\">\"grep\"</span><br/><span class=\"sy1\">;</span><span class=\"kw3\">STRING</span> re marker <span class=\"sy1\">:=</span> <span class=\"st0\">\" *#\"</span><span class=\"sy1\">,</span> line <span class=\"sy1\">:=</span> <span class=\"st0\">\"apples, pears # and bananas\"</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">INT</span> index <span class=\"sy1\">:=</span> <span class=\"kw8\">UPB</span> line<span class=\"sy1\">;</span><br/>  grep in string<span class=\"br0\">(</span>re marker<span class=\"sy1\">,</span> line<span class=\"sy1\">,</span> index<span class=\"sy1\">,</span> <span class=\"kw7\">NIL</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>q<span class=\"sy1\">,</span> line<span class=\"br0\">[</span><span class=\"sy1\">:</span>index<span class=\"sy1\">-</span>1<span class=\"br0\">]</span><span class=\"sy1\">,</span> q<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">END</span> CO</pre>"}, {"lang": "ALGOL W", "loc": 43, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% determines the non-comment portion of the string s, startPos and endPos are  \u00a0%<br/>   \u00a0% returned set to the beginning and ending character positions (indexed from 0)\u00a0%<br/>   \u00a0% of the non-comment text in s. If there is no non-comment text in s, startPos \u00a0%<br/>   \u00a0% will be greater than endPos                                                  \u00a0%<br/>   \u00a0% note that in Algol W, strings can be at most 256 characters long             \u00a0%<br/>    procedure stripComments ( string(256) value s; integer result startPos, endPos )\u00a0;<br/>    begin<br/>        integer MAX_LENGTH;<br/>        MAX_LENGTH\u00a0:= 256;<br/>        startPos  \u00a0:=  0;<br/>        endPos    \u00a0:= -1;<br/>       \u00a0% find the first non-blank character in s\u00a0%<br/>        while startPos &lt; MAX_LENGTH and s( startPos // 1 ) = \" \" do startPos\u00a0:= startPos + 1;<br/>        if startPos &lt; MAX_LENGTH then begin<br/>           \u00a0% have a non-blank character in the string\u00a0%<br/>            if s( startPos // 1 ) not = \"#\" and s( startPos // 1 ) not = \";\" then begin<br/>               \u00a0% the non-blank character is not a comment delimiter\u00a0%<br/>                integer cPos;<br/>                cPos\u00a0:= endPos\u00a0:= startPos;<br/>                while cPos &lt; MAX_LENGTH and s( cPos // 1 ) not = \"#\" and s( cPos // 1 ) not = \";\" do begin<br/>                    if s( cPos // 1 ) not = \" \" then endPos\u00a0:= cPos;<br/>                    cPos\u00a0:= cPos + 1<br/>                end while_not_a_comment<br/>            end if_not_a_comment<br/>        end if_startPos_lt_MAX_LENGTH<br/>    end stripComments\u00a0;<br/>   \u00a0% tests the stripComments procedure                                            \u00a0%<br/>    procedure testStripComments( string(256) value s )\u00a0;<br/>    begin<br/>        integer startPos, endPos;<br/>        stripComments( s, startPos, endPos );<br/>        write( \"\"\"\" );<br/>        for cPos\u00a0:= startPos until endPos do writeon( s( cPos // 1 ) );<br/>        writeon( \"\"\"\" )<br/>    end testStripComments\u00a0;<br/>    begin\u00a0% test cases - should all print \"apples, pears\"                          \u00a0%<br/>        testStripComments( \"apples, pears # and bananas\" );<br/>        testStripComments( \"apples, pears\u00a0; and bananas\" );<br/>        testStripComments( \"apples, pears \"              );<br/>        testStripComments( \"              apples, pears\" )<br/>    end<br/>end.</pre>"}, {"lang": "Applesoft BASIC", "loc": 26, "block": "<pre class=\"text highlighted_source\">10 LET C$ = \";#\"<br/>20 S$(1)=\"APPLES, PEARS # AND BANANAS\"<br/>30 S$(2)=\"APPLES, PEARS\u00a0; AND BANANAS\"<br/>40 FOR Q = 1 TO 2<br/>50     LET S$ = S$(Q)<br/>60     GOSUB 100\"STRIP COMMENTS<br/>70     PRINT S$<br/>80 NEXT Q<br/>90 END<br/>\u00a0<br/>100 IF S$ = \"\" THEN RETURN<br/>110 FOR I = 1 TO LEN(S$)<br/>120     LET A$ = MID$(S$, I, 1)<br/>130     FOR J = 1 TO LEN(C$)<br/>140         LET F$ = MID$(C$, J, 1)<br/>150         IF A$ &lt;&gt; F$ THEN NEXT J<br/>160     IF A$ = F$ THEN 200<br/>170 NEXT I<br/>200 LET I = I - 1<br/>210 GOSUB 260\"STRIP<br/>220 IF S$ = \"\" THEN RETURN<br/>230 FOR I = I TO 0 STEP -1<br/>240     LET A$ = MID$(S$, I, 1)<br/>250     IF A$ = \" \" THEN NEXT I<br/>260 LET S$ = MID$(S$, 1, I)<br/>270 RETURN</pre>"}, {"lang": "AutoHotkey", "loc": 19, "block": "<pre class=\"autohotkey highlighted_source\">Delims <span class=\"sy0\">:=</span> <span class=\"st0\">\"#;\"</span><br/>str <span class=\"sy0\">:=</span> <span class=\"st0\">\"apples, pears # and bananas\"</span><br/>str2<span class=\"sy0\">:=</span> <span class=\"st0\">\"apples, pears, `; and bananas\"</span> <span class=\"co1\">; needed to escape the\u00a0; since that is AHK's comment marker</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% StripComments<span class=\"br0\">(</span>Str<span class=\"sy0\">,</span>Delims<span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% StripComments<span class=\"br0\">(</span>Str2<span class=\"sy0\">,</span>Delims<span class=\"br0\">)</span><br/><span class=\"co1\">; The\u00a0% forces expression mode.</span><br/>\u00a0<br/>\u00a0<br/>StripComments<span class=\"br0\">(</span>String1<span class=\"sy0\">,</span>Delims<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> parse<span class=\"sy0\">,</span> delims<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">If</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Instr</span></a><span class=\"br0\">(</span>String1<span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span><br/>            EndPosition <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">InStr</span></a><span class=\"br0\">(</span>String1<span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Else</span><br/>            EndPosition <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>String1<span class=\"br0\">)</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/StringLeft.htm\"><span class=\"kw3\">StringLeft</span></a><span class=\"sy0\">,</span> String1<span class=\"sy0\">,</span> String1<span class=\"sy0\">,</span> EndPosition<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> String1<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AutoIt", "loc": 19, "block": "<pre class=\"autoit highlighted_source\">\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Dim</span></a> <span class=\"re0\">$Line1</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"apples, pears # and bananas\"</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Dim</span></a> <span class=\"re0\">$Line2</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"apples, pears\u00a0; and bananas\"</span><br/>\u00a0<br/>_StripAtMarker<span class=\"br0\">(</span><span class=\"re0\">$Line1</span><span class=\"br0\">)</span><br/>_StripAtMarker<span class=\"br0\">(</span><span class=\"re0\">$Line2</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> _StripAtMarker<span class=\"br0\">(</span><span class=\"re0\">$_Line</span><span class=\"sy0\">,</span> <span class=\"re0\">$sMarker</span><span class=\"sy0\">=</span><span class=\"st0\">'#\u00a0;'</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$aMarker</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringSplit.htm\"><span class=\"kw3\">StringSplit</span></a><span class=\"br0\">(</span><span class=\"re0\">$sMarker</span><span class=\"sy0\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$iPos</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"re0\">$aMarker</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\t\t<span class=\"re0\">$iPos</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringInStr.htm\"><span class=\"kw3\">StringInStr</span></a><span class=\"br0\">(</span><span class=\"re0\">$_Line</span><span class=\"sy0\">,</span> <span class=\"re0\">$aMarker</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$iPos</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"re0\">$_Line</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringStripWS.htm\"><span class=\"kw3\">StringStripWS</span></a><span class=\"br0\">(</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringLeft.htm\"><span class=\"kw3\">StringLeft</span></a><span class=\"br0\">(</span><span class=\"re0\">$_Line</span><span class=\"sy0\">,</span> <span class=\"re0\">$iPos</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a>  <span class=\"co0\">;==&gt;_StripAtMarker</span><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 5, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/local/bin/awk -f</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw4\">sub</span><span class=\"br0\">(</span><span class=\"st0\">\"[ <span class=\"es0\">\\t</span>]*[#;].*$\"</span>,<span class=\"st0\">\"\"</span>,<span class=\"re0\">$0</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw5\">print</span>;  <br/><span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 15, "block": "<pre class=\"text highlighted_source\">      marker$ = \"#;\"<br/>      PRINT FNstripcomment(\"apples, pears # and bananas\", marker$)<br/>      PRINT FNstripcomment(\"apples, pears\u00a0; and bananas\", marker$)<br/>      PRINT FNstripcomment(\"   apples, pears   \", marker$)<br/>      END<br/>\u00a0<br/>      DEF FNstripcomment(text$, delim$)<br/>      LOCAL I%, D%<br/>      FOR I% = 1 TO LEN(delim$)<br/>        D% = INSTR(text$, MID$(delim$, I%, 1))<br/>        IF D% text$ = LEFT$(text$, D%-1)<br/>      NEXT I%<br/>      WHILE ASC(text$) = 32 text$ = MID$(text$,2)\u00a0: ENDWHILE<br/>      WHILE LEFT$(text$) = \" \" text$ = RIGHT$(text$)\u00a0: ENDWHILE<br/>      = text$</pre>"}, {"lang": "Bracmat", "loc": 21, "block": "<pre class=\"text highlighted_source\">(   \"    apples, pears # and bananas<br/>       oranges, mangos\u00a0; and a durian\"<br/> \u00a0:\u00a0?text<br/>&amp;\u00a0:?newText<br/>&amp; ( non-blank<br/>  =\u00a0%@:~(\" \"|\\t|\\r|\\n)<br/>  )<br/>&amp; ( cleanUp<br/>  =<br/>    .   @(!arg:?arg (\"#\"|\";\")\u00a0?)<br/>      &amp; @(rev$!arg:? (!non-blank\u00a0?:?arg))<br/>      &amp; @(rev$!arg:? (!non-blank\u00a0?:?arg))<br/>      &amp;\u00a0!arg    {You could write &amp; \"[\"\u00a0!arg \"]\" to prove that the blanks are stripped.}<br/>  )<br/>&amp;   whl<br/>  ' ( @(!text:?line (\\r|\\n)\u00a0?text)<br/>    &amp;\u00a0!newText \\n cleanUp$!line:?newText<br/>    )<br/>&amp;\u00a0!newText \\n cleanUp$!text:?newText<br/>&amp; out$(str$!newText)<br/>);</pre>"}, {"lang": "C", "loc": 26, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include&lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> ch<span class=\"sy0\">,</span> str<span class=\"br0\">[</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">do</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Enter the string\u00a0:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fgets.html\"><span class=\"kw3\">fgets</span></a><span class=\"br0\">(</span>str<span class=\"sy0\">,</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span>stdin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=</span><span class=\"nu8\">00</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">'#'</span><span class=\"sy0\">||</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">';'</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\tstr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu8\">00</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>The modified string is\u00a0:\u00a0%s\"</span><span class=\"sy0\">,</span>str<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Do you want to repeat (y/n): \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%c\"</span><span class=\"sy0\">,&amp;</span>ch<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fflush.html\"><span class=\"kw3\">fflush</span></a><span class=\"br0\">(</span>stdin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><span class=\"kw1\">while</span><span class=\"br0\">(</span>ch<span class=\"sy0\">==</span><span class=\"st0\">'y'</span><span class=\"sy0\">||</span>ch<span class=\"sy0\">==</span><span class=\"st0\">'Y'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 23, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> strip_white<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy3\">&amp;</span> input<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw4\">size_t</span> b <span class=\"sy1\">=</span> input.<span class=\"me1\">find_first_not_of</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy1\">==</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">::</span><span class=\"me2\">npos</span><span class=\"br0\">)</span> b <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> input.<span class=\"me1\">substr</span><span class=\"br0\">(</span>b, input.<span class=\"me1\">find_last_not_of</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy2\">-</span> b<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">string</span> strip_comments<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy3\">&amp;</span> input, <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy3\">&amp;</span> delimiters<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span> strip_white<span class=\"br0\">(</span>input.<span class=\"me1\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, input.<span class=\"me1\">find_first_of</span><span class=\"br0\">(</span>delimiters<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> input<span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> delimiters<span class=\"br0\">(</span><span class=\"st0\">\"#;\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   <span class=\"kw1\">while</span> <span class=\"br0\">(</span> getline<span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cin</span>, input<span class=\"br0\">)</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>input.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> strip_comments<span class=\"br0\">(</span>input, delimiters<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 11, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text.RegularExpressions</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">string</span> RemoveComments<span class=\"br0\">(</span><span class=\"kw4\">string</span> str, <span class=\"kw4\">string</span> delimiter<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"co1\">//regular expression to find a character (delimiter) and </span><br/>            <span class=\"co1\">//      replace it and everything following it with an empty string.</span><br/>            <span class=\"co1\">//.Trim() will remove all beginning and ending white space.</span><br/>            <span class=\"kw1\">return</span> Regex<span class=\"sy0\">.</span><span class=\"me1\">Replace</span><span class=\"br0\">(</span>str, delimiter <span class=\"sy0\">+</span> <span class=\"st0\">\".+\"</span>, <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">Empty</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Trim</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"clojure highlighted_source\"><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span><span class=\"kw1\">take-while</span> #<span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>#<span class=\"br0\">{</span>\\# \\<span class=\"co1\">;}\u00a0%)) \"apples # comment\"))</span><br/><span class=\"st0\">\"apples \"</span></pre>"}, {"lang": "Common Lisp", "loc": 6, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> strip-comments <span class=\"br0\">(</span>s cs<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Truncate s at the first occurrence of a character in cs.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">defun</span> comment-char-p <span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>some #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span>char<span class=\"sy0\">=</span> x c<span class=\"br0\">)</span><span class=\"br0\">)</span> cs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>pos <span class=\"br0\">(</span>position-<span class=\"kw1\">if</span> #'comment-char-p s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>subseq s <span class=\"nu0\">0</span> pos<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 13, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">regex</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">string</span> remove1LineComment<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span> s<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">string</span> pat<span class=\"sy0\">=</span><span class=\"st0\">\";#\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> re <span class=\"sy0\">=</span> <span class=\"st0\">\"([^\"</span> <span class=\"sy0\">~</span> pat <span class=\"sy0\">~</span> <span class=\"st0\">\"]*)([\"</span> <span class=\"sy0\">~</span> pat <span class=\"sy0\">~</span> <span class=\"st_h\">`])[^\\n\\r]*([\\n\\r]|$)`</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> s.<span class=\"me1\">replace</span><span class=\"br0\">(</span>regex<span class=\"br0\">(</span>re<span class=\"sy0\">,</span> <span class=\"st0\">\"gm\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"$1$3\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"apples, pears # and bananas<br/>apples, pears\u00a0; and bananas \"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writeln<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>====&gt;<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> s.<span class=\"me1\">remove1LineComment</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 18, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> StripComments<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  SysUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> DoStripComments<span class=\"br0\">(</span><span class=\"kw1\">const</span> InString<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span> <span class=\"kw1\">const</span> CommentMarker<span class=\"sy1\">:</span> <span class=\"kw4\">Char</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Trim</span><span class=\"br0\">(</span><span class=\"kw3\">Copy</span><span class=\"br0\">(</span>InString<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"kw3\">Pos</span><span class=\"br0\">(</span>CommentMarker<span class=\"sy1\">,</span>InString<span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'apples, pears # and bananas --&gt; '</span> <span class=\"sy3\">+</span> DoStripComments<span class=\"br0\">(</span><span class=\"st0\">'apples, pears # and bananas'</span><span class=\"sy1\">,</span><span class=\"st0\">'#'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'apples, pears\u00a0; and bananas --&gt; '</span> <span class=\"sy3\">+</span> DoStripComments<span class=\"br0\">(</span><span class=\"st0\">'apples, pears\u00a0; and bananas'</span><span class=\"sy1\">,</span><span class=\"st0\">';'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Readln<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "DWScript", "loc": 10, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">function</span> StripComments<span class=\"br0\">(</span>s <span class=\"sy1\">:</span> <span class=\"kw4\">String</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw4\">String</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">var</span> p <span class=\"sy1\">:</span><span class=\"sy3\">=</span> FindDelimiter<span class=\"br0\">(</span><span class=\"st0\">'#;'</span><span class=\"sy1\">,</span> s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">if</span> p&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Trim</span><span class=\"br0\">(</span><span class=\"kw3\">Copy</span><span class=\"br0\">(</span>s<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> p<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">else</span> Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">Trim</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>PrintLn<span class=\"br0\">(</span>StripComments<span class=\"br0\">(</span><span class=\"st0\">'apples, pears # and bananas'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>PrintLn<span class=\"br0\">(</span>StripComments<span class=\"br0\">(</span><span class=\"st0\">'apples, pears\u00a0; and bananas'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Erlang", "loc": 18, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> strip_comments_from_string <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~s~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">keep_until_comment</span><span class=\"br0\">(</span><span class=\"st0\">\"apples, pears and bananas\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~s~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">keep_until_comment</span><span class=\"br0\">(</span><span class=\"st0\">\"apples, pears # and bananas\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~s~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">keep_until_comment</span><span class=\"br0\">(</span><span class=\"st0\">\"apples, pears\u00a0; and bananas\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">keep_until_comment</span><span class=\"br0\">(</span> <span class=\"re5\">String</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span>\t<a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">takewhile</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> not_comment<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">String</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">not_comment</span><span class=\"br0\">(</span> $# <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span><br/><span class=\"re3\">not_comment</span><span class=\"br0\">(</span> $<span class=\"sy1\">;</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span><br/><span class=\"re3\">not_comment</span><span class=\"br0\">(</span> <span class=\"re5\">_</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 5, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> stripComments s <span class=\"sy0\">=</span><br/>    s<br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">takeWhile</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> c <span class=\"sy0\">-&gt;</span> c <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">'#'</span> &amp;&amp; c <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">';'</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> System.<span class=\"me1\">Char</span>.<span class=\"me1\">ToString</span><br/>    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">fold</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> <span class=\"st0\">\"\"</span></pre>"}, {"lang": "Factor", "loc": 3, "block": "<pre class=\"text highlighted_source\">USE: sequences.extras<br/>: strip-comments ( str -- str' )<br/>    [ \"#;\" member? not ] take-while \"\" like\u00a0;</pre>"}, {"lang": "Fantom", "loc": 19, "block": "<pre class=\"text highlighted_source\">class Main<br/>{<br/>  static Str removeComment (Str str)<br/>  {<br/>    regex\u00a0:= Regex &lt;|(;|#)|&gt; <br/>    matcher\u00a0:= regex.matcher (str)<br/>    if (matcher.find)<br/>      return str[0..&lt;matcher.start]<br/>    else<br/>      return str<br/>  }<br/>\u00a0<br/>  public static Void main ()<br/>  {<br/>    echo (removeComment (\"String with comment here\"))<br/>    echo (removeComment (\"String with comment # here\"))<br/>    echo (removeComment (\"String with comment\u00a0; here\"))<br/>  }<br/>}</pre>"}, {"lang": "Forth", "loc": 24, "block": "<pre class=\"text highlighted_source\">\\ Rosetta Code Strip Comment<br/>\u00a0<br/>: LASTCHAR ( addr len -- addr len c) 2DUP + 1- <a class=\"__cf_email__\" data-cfemail=\"1d5e5d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0;<br/>\u00a0<br/>: COMMENT? ( char --\u00a0? )  S\" #;\"  ROT SCAN NIP\u00a0; \\ is char '#' or ';'<br/>\u00a0<br/>: -COMMENT   ( addr len -- addr len') \\ removes # or\u00a0; comments<br/>            BEGIN  <br/>              LASTCHAR COMMENT? 0= <br/>             WHILE                    \\ while not a comment char...            <br/>                1-                    \\ reduce length by 1<br/>            REPEAT <br/>            1- \u00a0;                     \\ remove 1 more (the comment char)<br/>\u00a0<br/>\\ -TRAILING is resident in desktop Forth systems like Swift Forth<br/>\\ shown here for demonstration<br/>: -TRAILING  ( adr len -- adr len')    \\ remove trailing spaces<br/>             BEGIN  <br/>               LASTCHAR BL =  <br/>             WHILE                     \\ while lastchar = blank char<br/>               1-                      \\ reduce length by 1<br/>             REPEAT \u00a0;<br/>\u00a0<br/>: COMMENT-STRIP ( addr len -- addr 'len)  -COMMENT  -TRAILING\u00a0;</pre>"}, {"lang": "Fortran", "loc": 44, "block": "<pre class=\"fortran highlighted_source\"><span class=\"co1\">!****************************************************</span><br/> <span class=\"kw1\">module</span> string_routines<br/><span class=\"co1\">!****************************************************</span><br/> <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/> <span class=\"kw3\">private</span><br/> <span class=\"kw3\">public</span> <span class=\"sy0\">::</span> <span class=\"me2\">strip_comments</span><br/> <span class=\"kw1\">contains</span><br/><span class=\"co1\">!****************************************************</span><br/>\u00a0<br/>\t <span class=\"kw1\">function</span> strip_comments<span class=\"br0\">(</span>str,c<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>str2<span class=\"br0\">)</span><br/>\t <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\t <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">str</span><br/>\t <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">c</span> <span class=\"co1\">!comment character</span><br/>\t <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"kw4\">len</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">str2</span><br/>\u00a0<br/>\t <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>\t i <span class=\"sy0\">=</span> <span class=\"kw4\">index</span><span class=\"br0\">(</span>str,c<span class=\"br0\">)</span><br/>\t <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>\t\tstr2 <span class=\"sy0\">=</span> str<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t <span class=\"kw1\">else</span><br/>\t\tstr2 <span class=\"sy0\">=</span> str<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> strip_comments<br/>\u00a0<br/><span class=\"co1\">!****************************************************</span><br/> <span class=\"kw1\">end</span> <span class=\"kw1\">module</span> string_routines<br/><span class=\"co1\">!****************************************************</span><br/>\u00a0<br/><span class=\"co1\">!****************************************************</span><br/> <span class=\"kw1\">program</span> main<br/><span class=\"co1\">!****************************************************</span><br/><span class=\"co1\">! Example use of strip_comments function</span><br/><span class=\"co1\">!****************************************************</span><br/> <span class=\"kw3\">use</span> string_routines, <span class=\"kw1\">only</span><span class=\"sy0\">:</span> strip_comments<br/> <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/> write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> strip_comments<span class=\"br0\">(</span><span class=\"st0\">'apples, pears # and bananas'</span>, <span class=\"st0\">'#'</span><span class=\"br0\">)</span><br/> write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> strip_comments<span class=\"br0\">(</span><span class=\"st0\">'apples, pears\u00a0; and bananas'</span>, <span class=\"st0\">';'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">!****************************************************</span><br/> <span class=\"kw1\">end</span> <span class=\"kw1\">program</span> main<br/><span class=\"co1\">!****************************************************</span></pre>"}, {"lang": "FreeBASIC", "loc": 27, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> stripComment<span class=\"br0\">(</span>s <span class=\"kw1\">As</span> <span class=\"kw1\">String</span>, commentMarkers <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> s = <span class=\"st0\">\"\"</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><br/>  <span class=\"kw1\">Dim</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">Instr</span><span class=\"br0\">(</span>s, Any commentMarkers<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> i &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <br/>    s = <span class=\"kw1\">Left</span><span class=\"br0\">(</span>s, i - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    s = <span class=\"kw1\">Trim</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"co1\">'' removes both leading and trailing whitespace</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> s<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = _ <br/><span class=\"br0\">{</span> _<br/>  <span class=\"st0\">\"apples, pears # and bananas\"</span>, _<br/>  <span class=\"st0\">\"apples, pears\u00a0; and bananas\"</span>, _<br/>  <span class=\"st0\">\"# this is a comment\"</span>, _<br/>  <span class=\"st0\">\"  # this is a comment with leading whitespace\"</span> _<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">4</span><br/>  stripComment<span class=\"br0\">(</span>s<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"st0\">\"#;\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Print</span> s<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"st0\">\" =&gt; Length =\"</span>; <span class=\"kw1\">Len</span><span class=\"br0\">(</span>s<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 27, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"strings\"</span><br/>\t<span class=\"st0\">\"unicode\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> commentChars <span class=\"sy2\">=</span> <span class=\"st0\">\"#;\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> stripComment<span class=\"sy1\">(</span>source <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> cut <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>IndexAny<span class=\"sy1\">(</span>source<span class=\"sy1\">,</span> commentChars<span class=\"sy1\">);</span> cut &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">return</span> strings<span class=\"sy3\">.</span>TrimRightFunc<span class=\"sy1\">(</span>source<span class=\"sy1\">[:</span>cut<span class=\"sy1\">],</span> unicode<span class=\"sy3\">.</span>IsSpace<span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> source<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>\t\t<span class=\"st0\">\"apples, pears # and bananas\"</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"st0\">\"apples, pears\u00a0; and bananas\"</span><span class=\"sy1\">,</span><br/>\t\t<span class=\"st0\">\"no bananas\"</span><span class=\"sy1\">,</span><br/>\t<span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"source:  \u00a0%q<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>\t\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"stripped:\u00a0%q<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> stripComment<span class=\"sy1\">(</span>s<span class=\"sy1\">))</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> stripComments <span class=\"sy0\">=</span> <span class=\"br0\">{</span> it.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span>/\\s<span class=\"sy0\">*</span><span class=\"br0\">[</span><span class=\"co3\">#;].*$/, '') }</span></pre>"}, {"lang": "Haskell", "loc": 4, "block": "<pre class=\"haskell highlighted_source\">ms <span class=\"sy0\">=</span> <span class=\"st0\">\";#\"</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:getContents\"><span class=\"kw3\">getContents</span></a> <span class=\"sy0\">&gt;&gt;=</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> takeWhile <span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:notElem\"><span class=\"kw3\">notElem</span></a>` ms<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lines\"><span class=\"kw3\">lines</span></a></pre>"}, {"lang": "Icon and Unicon", "loc": 12, "block": "<pre class=\"icon highlighted_source\"><span class=\"co1\"># strip_comments: </span><br/><span class=\"co1\"># return part of string up to first character in 'markers', </span><br/><span class=\"co1\"># or else the whole string if no comment marker is present</span><br/><span class=\"kw1\">procedure</span> strip_comments <span class=\"br0\">(</span>str<span class=\"sy1\">,</span> markers<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> str <span class=\"sy1\">?</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span>markers<span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span>strip_comments <span class=\"br0\">(</span><span class=\"st0\">\"apples, pears   and bananas\"</span><span class=\"sy1\">,</span> <span class=\"kw4\">cset</span> <span class=\"br0\">(</span><span class=\"st0\">\"#;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span>strip_comments <span class=\"br0\">(</span><span class=\"st0\">\"apples, pears # and bananas\"</span><span class=\"sy1\">,</span> <span class=\"kw4\">cset</span> <span class=\"br0\">(</span><span class=\"st0\">\"#;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span>strip_comments <span class=\"br0\">(</span><span class=\"st0\">\"apples, pears\u00a0; and bananas\"</span><span class=\"sy1\">,</span> <span class=\"kw4\">cset</span> <span class=\"br0\">(</span><span class=\"st0\">\"#;\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Inform 7", "loc": 11, "block": "<pre class=\"text highlighted_source\">Home is a room.<br/>\u00a0<br/>When play begins:<br/>\tstrip comments from \"apples, pears # and bananas\";<br/>\tstrip comments from \"apples, pears\u00a0; and bananas\";<br/>\tend the story.<br/>\u00a0<br/>To strip comments from (T - indexed text):<br/>\tsay \"[T] -&gt; \";<br/>\treplace the regular expression \"&lt;#;&gt;.*$\" in T with \"\";<br/>\tsay \"[T][line break]\".</pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">strip=: <a class=\"__cf_email__\" data-cfemail=\"17737b637557\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span>#~  *./\\@:<a class=\"__cf_email__\" data-cfemail=\"c7eae987a2e9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&amp;<span class=\"st_h\">';#'</span><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 23, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> StripLineComments<span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> args.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Usage: java StripLineComments StringToProcess\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span><span class=\"br0\">{</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> inputFile <span class=\"sy0\">=</span> args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> input <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">try</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a> reader <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Abufferedreader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">BufferedReader</span></a><span class=\"br0\">(</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Afilereader+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">FileReader</span></a><span class=\"br0\">(</span> inputFile <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> line <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"br0\">(</span>line <span class=\"sy0\">=</span> reader.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span> line.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"[#;]\"</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">catch</span><span class=\"br0\">(</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Exception</span></a> e <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\te.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 12, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> stripComments<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">var</span> re1 <span class=\"sy0\">=</span> <span class=\"co2\">/^\\s+|\\s+$/g</span><span class=\"sy0\">;</span>  <span class=\"co1\">// Strip leading and trailing spaces</span><br/>  <span class=\"kw1\">var</span> re2 <span class=\"sy0\">=</span> <span class=\"co2\">/\\s*[#;].+$/g</span><span class=\"sy0\">;</span> <span class=\"co1\">// Strip everything after # or\u00a0; to the end of the line, including preceding spaces</span><br/>  <span class=\"kw1\">return</span> s.<span class=\"me1\">replace</span><span class=\"br0\">(</span>re1<span class=\"sy0\">,</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span>re2<span class=\"sy0\">,</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">var</span> s1 <span class=\"sy0\">=</span> <span class=\"st0\">'apples, pears # and bananas'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> s2 <span class=\"sy0\">=</span> <span class=\"st0\">'apples, pears\u00a0; and bananas'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>alert<span class=\"br0\">(</span>stripComments<span class=\"br0\">(</span>s1<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span> <span class=\"sy0\">+</span> stripComments<span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">sub(\"[#;].*\";\"\") | sub(\"^\\\\s+\";\"\") |  sub(\"\\\\s+$\";\"\")</pre>"}, {"lang": "Julia", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function striplinecomment{T&lt;:String,U&lt;:String}(a::T, cchars::U=\"#;\")<br/>    b = strip(a)<br/>    0 &lt; length(cchars) || return b<br/>    for c in cchars<br/>        r = Regex(@sprintf \"\\\\%c.*\" c)<br/>        b = replace(b, r, \"\")<br/>    end<br/>    strip(b)<br/>end<br/>\u00a0<br/>tests = {\"apples, pears # and bananas\",<br/>         \"apples, pears\u00a0; and bananas\",<br/>         \"  apples, pears &amp; bananas   \",<br/>         \" # \"}<br/>\u00a0<br/>for t in tests<br/>    s = striplinecomment(t)<br/>    println(\"Testing \\\"\", t, \"\\\":\")<br/>    println(\"    \\\"\", s, \"\\\"\")<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 15, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> Regex<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"(/<span class=\"es0\">\\*</span>.*<span class=\"es0\">\\*</span>/|//.*$)\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun stripComments<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> s.<span class=\"me1\">replace</span><span class=\"br0\">(</span>r, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">trim</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> strings <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        <span class=\"st0\">\"apples, pears // and bananas\"</span>,<br/>        <span class=\"st0\">\"   apples, pears /* and bananas */\"</span>,<br/>        <span class=\"st0\">\"/* oranges */ apples // pears and bananas  \"</span>,<br/>        <span class=\"st0\">\" <span class=\"es1\">\\t</span>oranges /*apples/*, pears*/*/and bananas\"</span> <br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>string in strings<span class=\"br0\">)</span> println<span class=\"br0\">(</span>stripComments<span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 16, "block": "<pre class=\"lb highlighted_source\">string1$ <span class=\"sy0\">=</span> <span class=\"st0\">\"apples, pears # and bananas\"</span><br/>string2$ <span class=\"sy0\">=</span> <span class=\"st0\">\"pears;, \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">chr$</span><span class=\"br0\">(</span><span class=\"nu0\">34</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"apples\u00a0; \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">chr$</span><span class=\"br0\">(</span><span class=\"nu0\">34</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" an;d bananas\"</span><br/>commentMarker$ <span class=\"sy0\">=</span> <span class=\"st0\">\"; #\"</span><br/><span class=\"kw1\">Print</span> parse$<span class=\"br0\">(</span>string2$<span class=\"sy0\">,</span> commentMarker$<span class=\"br0\">)</span><br/><span class=\"kw1\">End</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> parse$<span class=\"br0\">(</span>string$<span class=\"sy0\">,</span> commentMarker$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>string$<span class=\"br0\">)</span><br/>        charIn$ <span class=\"sy0\">=</span> <span class=\"kw2\">Mid$</span><span class=\"br0\">(</span>string$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> charIn$ <span class=\"sy0\">=</span> <span class=\"kw2\">Chr$</span><span class=\"br0\">(</span><span class=\"nu0\">34</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>            inQuotes <span class=\"sy0\">=</span> <span class=\"kw2\">Not</span><span class=\"br0\">(</span>inQuotes<span class=\"br0\">)</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        <span class=\"kw1\">If</span> <span class=\"kw2\">Instr</span><span class=\"br0\">(</span>commentMarker$<span class=\"sy0\">,</span> charIn$<span class=\"br0\">)</span> <span class=\"kw1\">And</span> <span class=\"br0\">(</span>inQuotes <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>    <span class=\"kw1\">next</span> i<br/>    parse$ <span class=\"sy0\">=</span> <span class=\"kw2\">Left$</span><span class=\"br0\">(</span>string$<span class=\"sy0\">,</span> <span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span></pre>"}, {"lang": "Lua", "loc": 7, "block": "<pre class=\"lua highlighted_source\">comment_symbols <span class=\"sy0\">=</span> <span class=\"st0\">\";#\"</span><br/>\u00a0<br/>s1 <span class=\"sy0\">=</span> <span class=\"st0\">\"apples, pears # and bananas\"</span><br/>s2 <span class=\"sy0\">=</span> <span class=\"st0\">\"apples, pears\u00a0; and bananas\"</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"br0\">(</span> <span class=\"kw3\">string</span><span class=\"sy0\">.</span>match<span class=\"br0\">(</span> s1<span class=\"sy0\">,</span> <span class=\"st0\">\"[^\"</span><span class=\"sy0\">..</span>comment_symbols<span class=\"sy0\">..</span><span class=\"st0\">\"]+\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw3\">print</span> <span class=\"br0\">(</span> <span class=\"kw3\">string</span><span class=\"sy0\">.</span>match<span class=\"br0\">(</span> s2<span class=\"sy0\">,</span> <span class=\"st0\">\"[^\"</span><span class=\"sy0\">..</span>comment_symbols<span class=\"sy0\">..</span><span class=\"st0\">\"]+\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 2, "block": "<pre class=\"text highlighted_source\">&gt; use StringTools in map( <a class=\"__cf_email__\" data-cfemail=\"4b1f3922260b1f2a202e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, [ \"\\t\\t   apples, pears \\t# and bananas\", \" apples, pears\u00a0; and bananas  \\t\" ], \"#;\" ) end; <br/>                            [\"apples, pears\", \"apples, pears\"]</pre>"}, {"lang": "Mathematica", "loc": 4, "block": "<pre class=\"text highlighted_source\">a = \"apples, pears # and bananas<br/>  apples, pears\u00a0; and bananas\";<br/>b = StringReplace[a, RegularExpression[\"[ ]+[#;].+[\\n]\"] -&gt; \"\\n\"];<br/>StringReplace[b, RegularExpression[\"[ ]+[#;].+$\"] -&gt; \"\"] // FullForm</pre>"}, {"lang": "MATLAB / Octave", "loc": 9, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/line.html\"><span class=\"kw2\">line</span></a> = stripcomment<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/line.html\"><span class=\"kw2\">line</span></a><span class=\"br0\">)</span> <br/>   e = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/min.html\"><span class=\"kw2\">min</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/line.html\"><span class=\"kw2\">line</span></a>==<span class=\"co2\">'#'</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/line.html\"><span class=\"kw2\">line</span></a>==<span class=\"co2\">';'</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;    <br/>   <span class=\"kw1\">if</span> ~isempty<span class=\"br0\">(</span>e<span class=\"br0\">)</span><br/>      e = e-<span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">while</span> isspace<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/line.html\"><span class=\"kw2\">line</span></a><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span> e = e - <span class=\"nu0\">1</span>; <span class=\"kw1\">end</span>; \t\t<br/>      <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/line.html\"><span class=\"kw2\">line</span></a> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/line.html\"><span class=\"kw2\">line</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>:e<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span>; \t<br/><span class=\"kw1\">end</span>;<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 7, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>proc removeComments(line, sep): string =<br/>  line.split(sep)[0].strip(leading = false)<br/>\u00a0<br/>echo removeComments(\"apples, pears # and bananas\", '#')<br/>echo removeComments(\"apples, pears\u00a0; and bananas\", ';')</pre>"}, {"lang": "Objeck", "loc": 29, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">use</span> System.IO.File<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> StripComments <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    reader <span class=\"sy0\">:</span> FileReader<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>args<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      reader <span class=\"sy0\">:=</span> FileReader<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      line <span class=\"sy0\">:=</span> reader<span class=\"sy0\">-&gt;</span><span class=\"me1\">ReadString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">while</span><span class=\"br0\">(</span>line <span class=\"sy0\">&lt;&gt;</span> <span class=\"kw2\">Nil</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        index <span class=\"sy0\">:=</span> line<span class=\"sy0\">-&gt;</span><span class=\"me1\">FindLast</span><span class=\"br0\">(</span>'<span class=\"sy0\">;</span>'<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>index <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          index <span class=\"sy0\">:=</span> line<span class=\"sy0\">-&gt;</span><span class=\"me1\">FindLast</span><span class=\"br0\">(</span>'<span class=\"co1\">#');</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>index <span class=\"sy0\">&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          line<span class=\"sy0\">-&gt;</span><span class=\"me1\">SubString</span><span class=\"br0\">(</span>index<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        line <span class=\"sy0\">:=</span> reader<span class=\"sy0\">-&gt;</span><span class=\"me1\">ReadString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    leaving <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>reader <span class=\"sy0\">&lt;&gt;</span> <span class=\"kw2\">Nil</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        reader<span class=\"sy0\">-&gt;</span><span class=\"me1\">Close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 20, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> strip_comments str <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> len <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length str <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux print i <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> i <span class=\"sy0\">&gt;=</span> len <span class=\"kw1\">then</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">match</span> str<span class=\"sy0\">.</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">with</span><br/>    <span class=\"sy0\">|</span> <span class=\"sy0\">'#'</span> <span class=\"sy0\">|</span> <span class=\"sy0\">';'</span> <span class=\"sy0\">-&gt;</span><br/>        aux <span class=\"kw1\">false</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> i<span class=\"br0\">)</span><br/>    <span class=\"sy0\">|</span> <span class=\"sy0\">'</span>\\n<span class=\"sy0\">'</span> <span class=\"sy0\">-&gt;</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_char\"><span class=\"kw3\">print_char</span></a> <span class=\"sy0\">'</span>\\n<span class=\"sy0\">';</span><br/>        aux <span class=\"kw1\">true</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> i<span class=\"br0\">)</span><br/>    <span class=\"sy0\">|</span> c <span class=\"sy0\">-&gt;</span><br/>        <span class=\"kw1\">if</span> print <span class=\"kw1\">then</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_char\"><span class=\"kw3\">print_char</span></a> c<span class=\"sy0\">;</span><br/>        aux print <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  aux <span class=\"kw1\">true</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  strip_comments <span class=\"st0\">\"apples, pears # and bananas\\n\"</span><span class=\"sy0\">;</span><br/>  strip_comments <span class=\"st0\">\"apples, pears\u00a0; and bananas\\n\"</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "Oforth", "loc": 4, "block": "<pre class=\"text highlighted_source\">: stripComments(s, markers)<br/>| firstMarker |<br/>   markers map(#[ s indexOf ]) reduce(#min) -&gt;firstMarker<br/>   s firstMarker ifNotNull: [ left(firstMarker 1 - ) ] strip\u00a0;</pre>"}, {"lang": "Pascal", "loc": 7, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"co2\">s/[#;].*$//s</span><span class=\"sy0\">;</span> <span class=\"co1\"># remove comment</span><br/>    <span class=\"co2\">s/^\\s+//</span><span class=\"sy0\">;</span>     <span class=\"co1\"># remove leading whitespace</span><br/>    <span class=\"co2\">s/\\s+$//</span><span class=\"sy0\">;</span>     <span class=\"co1\"># remove trailing whitespace</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a><br/>  <span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 7, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"co2\">s/[#;].*$//s</span><span class=\"sy0\">;</span> <span class=\"co1\"># remove comment</span><br/>    <span class=\"co2\">s/^\\s+//</span><span class=\"sy0\">;</span>     <span class=\"co1\"># remove leading whitespace</span><br/>    <span class=\"co2\">s/\\s+$//</span><span class=\"sy0\">;</span>     <span class=\"co1\"># remove trailing whitespace</span><br/>    <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a><br/>  <span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"re0\">$*IN</span><span class=\"sy0\">.</span><span class=\"me1\">slurp</span><span class=\"sy0\">.</span><span class=\"kw3\">subst</span><span class=\"br0\">(</span><span class=\"co2\">/ \\h* &lt;[ #\u00a0; ]&gt; \\N* /</span><span class=\"sy0\">,</span> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>g<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">print</span></pre>"}, {"lang": "Phix", "loc": 17, "block": "<pre class=\"text highlighted_source\">function strip_comments(string s, sequence comments={\"#\",\";\"})<br/>    for i=1 to length(comments) do<br/>        integer k = match(comments[i],s)<br/>        if k then<br/>            s = s[1..k-1]<br/>            s = trim_tail(s)<br/>        end if<br/>    end for<br/>    return s<br/>end function<br/>\u00a0<br/>?strip_comments(\"apples, pears # and bananas\")<br/>?strip_comments(\"apples, pears\u00a0; and bananas\")<br/>?strip_comments(\"apples, pears and bananas  \")<br/>?strip_comments(\"    WS_CAPTION = #00C00000, -- = WS_BORDER+WS_DLGFRAME\")<br/>?strip_comments(\"    WS_CAPTION = #00C00000, -- = WS_BORDER+WS_DLGFRAME\",{\"--\"})<br/>?strip_comments(\"  title = \\\"--Title--\\\"\",{\"--\"})</pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">(for Str '(\"apples, pears # and bananas\" \"apples, pears\u00a0; and bananas\")<br/>   (prinl (car (split (chop Str) \"#\" \";\"))) )</pre>"}, {"lang": "PL/I", "loc": 3, "block": "<pre class=\"text highlighted_source\">k = search(text, '#;');<br/>if k = 0 then put skip list (text);<br/>         else put skip list (substr(text, 1, k-1));</pre>"}, {"lang": "Prolog", "loc": 11, "block": "<pre class=\"prolog highlighted_source\">stripcomment<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> stripcomment<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>B<span class=\"sy4\">,</span>a<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>stripcomment<span class=\"br0\">(</span><span class=\"br0\">[</span>A<span class=\"sy5\">|</span>AL<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>A<span class=\"sy5\">|</span>BL<span class=\"br0\">]</span><span class=\"sy4\">,</span>a<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"sy2\">\\+</span> A<span class=\"sy6\">=</span><span class=\"nu0\">0</span><span class=\"st_h\">';, \\+ A=0'</span># <span class=\"sy4\">,</span> <span class=\"sy2\">\\+</span> A<span class=\"sy6\">=</span><span class=\"nu0\">10</span><span class=\"sy4\">,</span> <span class=\"sy2\">\\+</span> A<span class=\"sy6\">=</span><span class=\"nu0\">13</span> <span class=\"sy4\">,</span> stripcomment<span class=\"br0\">(</span>AL<span class=\"sy4\">,</span>BL<span class=\"sy4\">,</span>a<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>stripcomment<span class=\"br0\">(</span><span class=\"br0\">[</span>A<span class=\"sy5\">|</span>AL<span class=\"br0\">]</span><span class=\"sy4\">,</span>   BL <span class=\"sy4\">,</span>a<span class=\"br0\">)</span> <span class=\"sy1\">:-</span>  <span class=\"br0\">(</span> A<span class=\"sy6\">=</span><span class=\"nu0\">0</span><span class=\"st_h\">';;    A=0'</span>#<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy2\">\\+</span> A<span class=\"sy6\">=</span><span class=\"nu0\">10</span><span class=\"sy4\">,</span> <span class=\"sy2\">\\+</span> A<span class=\"sy6\">=</span><span class=\"nu0\">13</span> <span class=\"sy4\">,</span> stripcomment<span class=\"br0\">(</span>AL<span class=\"sy4\">,</span>BL<span class=\"sy4\">,</span>b<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>stripcomment<span class=\"br0\">(</span><span class=\"br0\">[</span>A<span class=\"sy5\">|</span>AL<span class=\"br0\">]</span><span class=\"sy4\">,</span>   BL <span class=\"sy4\">,</span>b<span class=\"br0\">)</span> <span class=\"sy1\">:-</span>                      <span class=\"sy2\">\\+</span> A<span class=\"sy6\">=</span><span class=\"nu0\">10</span><span class=\"sy4\">,</span> <span class=\"sy2\">\\+</span> A<span class=\"sy6\">=</span><span class=\"nu0\">13</span> <span class=\"sy4\">,</span> stripcomment<span class=\"br0\">(</span>AL<span class=\"sy4\">,</span>BL<span class=\"sy4\">,</span>b<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>stripcomment<span class=\"br0\">(</span><span class=\"br0\">[</span>A<span class=\"sy5\">|</span>AL<span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span>A<span class=\"sy5\">|</span>BL<span class=\"br0\">]</span><span class=\"sy4\">,</span>_M<span class=\"br0\">)</span><span class=\"sy1\">:-</span>                       <span class=\"br0\">(</span> A<span class=\"sy6\">=</span><span class=\"nu0\">10</span><span class=\"sy4\">;</span>    A<span class=\"sy6\">=</span><span class=\"nu0\">13</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> stripcomment<span class=\"br0\">(</span>AL<span class=\"sy4\">,</span>BL<span class=\"sy4\">,</span>a<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>stripcomment<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span>_M<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>start <span class=\"sy1\">:-</span><br/>In <span class=\"sy6\">=</span> \"apples<span class=\"sy4\">,</span> pears <span class=\"sy4\">;</span> and bananas<br/>apples<span class=\"sy4\">,</span> pears # and bananas\"<span class=\"sy4\">,</span><br/>    stripcomment<span class=\"br0\">(</span>In<span class=\"sy4\">,</span>Out<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    format<span class=\"br0\">(</span>\"~s~n\"<span class=\"sy4\">,</span><span class=\"br0\">[</span>Out<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 17, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.s Strip_comments<span class=\"br0\">(</span><span class=\"kw2\">Str</span>$<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> result$<span class=\"sy0\">=</span><span class=\"kw2\">Str</span>$, l, l1, l2<br/>  l1 <span class=\"sy0\">=</span><span class=\"kw2\">FindString</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span>$,<span class=\"st0\">\"#\"</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  l2 <span class=\"sy0\">=</span><span class=\"kw2\">FindString</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span>$,<span class=\"st0\">\";\"</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"co1\">; See if any comment sign was found, prioritizing '#'</span><br/>  <span class=\"kw1\">If</span> l1<br/>    l<span class=\"sy0\">=</span>l1<br/>  <span class=\"kw1\">ElseIf</span> l2<br/>    l<span class=\"sy0\">=</span>l2<br/>  <span class=\"kw1\">EndIf</span><br/>  l<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">If</span> l<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>    result$<span class=\"sy0\">=</span><span class=\"kw2\">Left</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span>$,l<span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">ProcedureReturn</span> result$<br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 11, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> remove_comments<span class=\"br0\">(</span>line<span class=\"sy0\">,</span> sep<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> sep:<br/>        i <span class=\"sy0\">=</span> line.<span class=\"me1\">find</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span>:<br/>            line <span class=\"sy0\">=</span> line<span class=\"br0\">[</span>:i<span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> line.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># test</span><br/><span class=\"kw1\">print</span> remove_comments<span class=\"br0\">(</span><span class=\"st0\">'apples\u00a0; pears # and bananas'</span><span class=\"sy0\">,</span> <span class=\"st0\">';#'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> remove_comments<span class=\"br0\">(</span><span class=\"st0\">'apples\u00a0; pears # and bananas'</span><span class=\"sy0\">,</span> <span class=\"st0\">'!'</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "R", "loc": 5, "block": "<pre class=\"text highlighted_source\">strip_comments &lt;- function(str)<br/>{<br/>  if(!require(stringr)) stop(\"you need to install the stringr package\")<br/>  str_trim(str_split_fixed(str, \"#|;\", 2)[, 1])<br/>}</pre>"}, {"lang": "Racket", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang at-exp racket<br/>\u00a0<br/>(define comment-start-rx \"[;#]\")<br/>\u00a0<br/>(define text<br/>  @~a{apples, pears # and bananas<br/>      apples, pears\u00a0; and bananas<br/>      })<br/>\u00a0<br/>(define (strip-comments text [rx comment-start-rx])<br/>  (string-join<br/>   (for/list ([line (string-split text \"\\n\")])<br/>     (string-trim line (pregexp (~a \"\\\\s*\" rx \".*\")) #:left? #f))<br/>   \"\\n\"))<br/>\u00a0<br/>;; Alternatively, do it in a single regexp operation<br/>(define (strip-comments2 text [rx comment-start-rx])<br/>  (regexp-replace* (pregexp (~a \"(?m:\\\\s*\" rx \".*)\")) text \"\"))<br/>\u00a0<br/>(strip-comments2 text)\u00a0; -&gt; \"apples, pears\\napples, pears\"<br/>\u00a0</pre>"}, {"lang": "Red", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt;&gt; parse s: \"apples, pears\u00a0; and bananas\" [to [any space \";\"] remove thru end]<br/>== true<br/>&gt;&gt; s<br/>== \"apples, pears\"<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 41, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  strips  a string  delineated  by a  hash (#)   or   a  semicolon (;).   */</span><br/>old1= <span class=\"st0\">' apples, pears # and bananas'</span>     \u00a0;      <span class=\"kw1\">say</span> <span class=\"st0\">'                 old \u2500\u2500\u2500\u25ba'</span>old1<span class=\"st0\">\"\u25c4\u2500\u2500\u2500\"</span><br/>new1= stripCom1<span class=\"br0\">(</span>old1<span class=\"br0\">)</span>                    \u00a0;      <span class=\"kw1\">say</span> <span class=\"st0\">'     1st version new \u2500\u2500\u2500\u25ba'</span>new1<span class=\"st0\">\"\u25c4\u2500\u2500\u2500\"</span><br/>new2= stripCom2<span class=\"br0\">(</span>old1<span class=\"br0\">)</span>                    \u00a0;      <span class=\"kw1\">say</span> <span class=\"st0\">'     2nd version new \u2500\u2500\u2500\u25ba'</span>new2<span class=\"st0\">\"\u25c4\u2500\u2500\u2500\"</span><br/>new3= stripCom3<span class=\"br0\">(</span>old1<span class=\"br0\">)</span>                    \u00a0;      <span class=\"kw1\">say</span> <span class=\"st0\">'     3rd version new \u2500\u2500\u2500\u25ba'</span>new3<span class=\"st0\">\"\u25c4\u2500\u2500\u2500\"</span><br/>new4= stripCom4<span class=\"br0\">(</span>old1<span class=\"br0\">)</span>                    \u00a0;      <span class=\"kw1\">say</span> <span class=\"st0\">'     4th version new \u2500\u2500\u2500\u25ba'</span>new4<span class=\"st0\">\"\u25c4\u2500\u2500\u2500\"</span><br/>                                                 <span class=\"kw1\">say</span>  <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2592'</span>, <span class=\"nu0\">62</span><span class=\"br0\">)</span><br/>old2= <span class=\"st0\">' apples, pears\u00a0; and bananas'</span>     \u00a0;      <span class=\"kw1\">say</span> <span class=\"st0\">'                 old \u2500\u2500\u2500\u25ba'</span>old2<span class=\"st0\">\"\u25c4\u2500\u2500\u2500\"</span><br/>new1= stripCom1<span class=\"br0\">(</span>old2<span class=\"br0\">)</span>                    \u00a0;      <span class=\"kw1\">say</span> <span class=\"st0\">'     1st version new \u2500\u2500\u2500\u25ba'</span>new1<span class=\"st0\">\"\u25c4\u2500\u2500\u2500\"</span><br/>new2= stripCom2<span class=\"br0\">(</span>old2<span class=\"br0\">)</span>                    \u00a0;      <span class=\"kw1\">say</span> <span class=\"st0\">'     2nd version new \u2500\u2500\u2500\u25ba'</span>new2<span class=\"st0\">\"\u25c4\u2500\u2500\u2500\"</span><br/>new3= stripCom3<span class=\"br0\">(</span>old2<span class=\"br0\">)</span>                    \u00a0;      <span class=\"kw1\">say</span> <span class=\"st0\">'     3rd version new \u2500\u2500\u2500\u25ba'</span>new3<span class=\"st0\">\"\u25c4\u2500\u2500\u2500\"</span><br/>new4= stripCom4<span class=\"br0\">(</span>old2<span class=\"br0\">)</span>                    \u00a0;      <span class=\"kw1\">say</span> <span class=\"st0\">'     4th version new \u2500\u2500\u2500\u25ba'</span>new4<span class=\"st0\">\"\u25c4\u2500\u2500\u2500\"</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>stripCom1: <span class=\"kw1\">procedure</span>;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x              <span class=\"coMULTI\">/*obtain the argument (the  X  string).*/</span><br/>           x=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>x, <span class=\"st0\">'#'</span>, <span class=\"st0\">\";\"</span><span class=\"br0\">)</span>              <span class=\"coMULTI\">/*translate semicolons to a hash (#).  */</span><br/>           <span class=\"kw1\">parse</span>  <span class=\"kw2\">var</span>  x    x  <span class=\"st0\">'#'</span>               <span class=\"coMULTI\">/*parse the X string,  ending in hash. */</span><br/>           <span class=\"kw1\">return</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>                       <span class=\"coMULTI\">/*return the stripped shortened string.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>stripCom2: <span class=\"kw1\">procedure</span>;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x              <span class=\"coMULTI\">/*obtain the argument (the  X  string).*/</span><br/>           d= <span class=\"st0\">';#'</span>                               <span class=\"coMULTI\">/*this is the delimiter list to be used*/</span><br/>           d1=<span class=\"kw6\">left</span><span class=\"br0\">(</span>d,<span class=\"nu0\">1</span><span class=\"br0\">)</span>                          <span class=\"coMULTI\">/*get the first character in delimiter.*/</span><br/>           x=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>x,<span class=\"kw6\">copies</span><span class=\"br0\">(</span>d1,<span class=\"kw6\">length</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span>,d<span class=\"br0\">)</span> <span class=\"coMULTI\">/*translates delimiters \u2500\u2500\u25ba  1st delim.*/</span><br/>           <span class=\"kw1\">parse</span>  <span class=\"kw2\">var</span>  x    x  <span class=\"br0\">(</span>d1<span class=\"br0\">)</span>              <span class=\"coMULTI\">/*parse the string,  ending in a hash. */</span><br/>           <span class=\"kw1\">return</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>                       <span class=\"coMULTI\">/*return the stripped shortened string.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>stripCom3: <span class=\"kw1\">procedure</span>;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x              <span class=\"coMULTI\">/*obtain the argument (the  X  string).*/</span><br/>           d= <span class=\"st0\">';#'</span>                               <span class=\"coMULTI\">/*this is the delimiter list to be used*/</span><br/>                           <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"coMULTI\">/*process each of the delimiters singly*/</span><br/>                           _=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>d,j,<span class=\"nu0\">1</span><span class=\"br0\">)</span>       <span class=\"coMULTI\">/*use only one delimiter at a time.    */</span><br/>                           <span class=\"kw1\">parse</span>  <span class=\"kw2\">var</span>  x  x  <span class=\"br0\">(</span>_<span class=\"br0\">)</span> <span class=\"coMULTI\">/*parse the  X  string for each delim. */</span><br/>                           <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>           <span class=\"coMULTI\">/* [\u2191]    (_)  means stop parsing at _ */</span><br/>           <span class=\"kw1\">return</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>                       <span class=\"coMULTI\">/*return the stripped shortened string.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>stripCom4: <span class=\"kw1\">procedure</span>;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x              <span class=\"coMULTI\">/*obtain the argument (the  X  string).*/</span><br/>           d= <span class=\"st0\">';#'</span>                               <span class=\"coMULTI\">/*this is the delimiter list to be used*/</span><br/>                    <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span>        <span class=\"coMULTI\">/*process each of the delimiters singly*/</span><br/>                    p=<span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>d,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span>, x<span class=\"br0\">)</span>      <span class=\"coMULTI\">/*see if a delimiter is in the X string*/</span><br/>                    <span class=\"kw1\">if</span> p<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> x=<span class=\"kw6\">left</span><span class=\"br0\">(</span>x,p-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*shorten the X string by one character*/</span><br/>                    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                  <span class=\"coMULTI\">/* [\u2191]  If p==0, then char wasn't found*/</span><br/>           <span class=\"kw1\">return</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>                       <span class=\"coMULTI\">/*return the stripped shortened string.*/</span></pre>"}, {"lang": "Ring", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>aList = 'apples, pears # and bananas'<br/>see aList + nl<br/>see stripComment(aList) + nl<br/>aList = 'apples, pears // and bananas'<br/>see aList + nl<br/>see stripComment(aList) + nl<br/>\u00a0<br/>func stripComment bList <br/>     nr = substr(bList,\"#\")<br/>     if nr &gt; 0 cList = substr(bList,1,nr-1) ok<br/>     nr = substr(bList,\"//\")<br/>     if nr &gt; 0 cList = substr(bList,1,nr-1) ok<br/>     return cList <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 19, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> <span class=\"kw3\">String</span><br/>  <span class=\"kw1\">def</span> strip_comment<span class=\"br0\">(</span> markers = <span class=\"br0\">[</span><span class=\"st0\">'#'</span>,<span class=\"st0\">';'</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>    re = <span class=\"kw4\">Regexp</span>.<span class=\"me1\">union</span><span class=\"br0\">(</span> markers <span class=\"br0\">)</span> <span class=\"co1\"># construct a regular expression which will match any of the markers</span><br/>    <span class=\"kw1\">if</span> index = <span class=\"br0\">(</span><span class=\"kw2\">self</span> =~ re<span class=\"br0\">)</span><br/>      <span class=\"kw2\">self</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>, index<span class=\"br0\">]</span>.<span class=\"me1\">rstrip</span>      <span class=\"co1\"># slice the string where the regular expression matches, and return it.</span><br/>    <span class=\"kw1\">else</span><br/>      rstrip<br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> <span class=\"st0\">'apples, pears # and bananas'</span>.<span class=\"me1\">strip_comment</span><br/>str = <span class=\"st0\">'apples, pears\u00a0; and bananas'</span><br/><span class=\"kw3\">p</span> str.<span class=\"me1\">strip_comment</span><br/>str = <span class=\"st0\">'apples, pears and bananas '</span><br/><span class=\"kw3\">p</span> str.<span class=\"me1\">strip_comment</span><br/><span class=\"kw3\">p</span> str.<span class=\"me1\">strip_comment</span><span class=\"br0\">(</span><span class=\"st0\">'and'</span><span class=\"br0\">)</span><br/><span class=\"kw3\">p</span> <span class=\"st0\">\" <span class=\"es0\">\\t</span> <span class=\"es0\">\\n</span>\u00a0;\"</span>.<span class=\"me1\">strip_comment</span><br/><span class=\"kw3\">p</span> <span class=\"st0\">\"\"</span>.<span class=\"me1\">strip_comment</span></pre>"}, {"lang": "Scala", "loc": 23, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> StripComments <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> stripComments1<span class=\"br0\">(</span>s<span class=\"sy0\">:</span>String, markers<span class=\"sy0\">:</span>String <span class=\"sy0\">=</span><span class=\"st0\">\";#\"</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>s takeWhile <span class=\"br0\">(</span><span class=\"sy0\">!</span>markers.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"sy0\">_</span><span class=\"br0\">)</span><span class=\"br0\">)</span> trim<br/>\u00a0<br/>  <span class=\"co1\">// using regex and pattern matching</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> stripComments2<span class=\"br0\">(</span>s<span class=\"sy0\">:</span>String, markers<span class=\"sy0\">:</span>String <span class=\"sy0\">=</span><span class=\"st0\">\";#\"</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> R<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"st0\">\"(.*?)[\"</span> + markers + <span class=\"st0\">\"].*\"</span><span class=\"br0\">)</span>.<span class=\"me1\">r</span><br/>    <span class=\"br0\">(</span>s <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> R<span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> line<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> s<br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span> trim<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> print<span class=\"br0\">(</span>s<span class=\"sy0\">:</span>String<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"'\"</span>+s+<span class=\"st0\">\"' =&gt;\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"   '\"</span>+stripComments1<span class=\"br0\">(</span>s<span class=\"br0\">)</span>+<span class=\"st0\">\"'\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"   '\"</span>+stripComments2<span class=\"br0\">(</span>s<span class=\"br0\">)</span>+<span class=\"st0\">\"'\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"apples, pears # and bananas\"</span><span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"apples, pears\u00a0; and bananas\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 8, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>use<span class=\"sy0\">-</span>modules <span class=\"br0\">(</span>ice<span class=\"sy0\">-</span><span class=\"nu0\">9</span> regex<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>strip<span class=\"sy0\">-</span>comments <span class=\"kw1\">s</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>regexp<span class=\"sy0\">-</span>substitute #f<br/>        <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>match <span class=\"st0\">\"[ <span class=\"es0\">\\t</span><span class=\"es0\">\\r</span><span class=\"es0\">\\n</span><span class=\"es0\">\\v</span><span class=\"es0\">\\f</span>]*[#;].*\"</span> <span class=\"kw1\">s</span><span class=\"br0\">)</span> 'pre <span class=\"st0\">\"\"</span> 'post<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>strip<span class=\"sy0\">-</span>comments <span class=\"st0\">\"apples, pears # and bananas\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>strip<span class=\"sy0\">-</span>comments <span class=\"st0\">\"apples, pears\u00a0; and bananas\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span></pre>"}, {"lang": "sed", "loc": 3, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#!/bin/sh</span><br/><span class=\"co0\"># Strip comments</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"$1\"</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sed</span> <span class=\"st_h\">'s/ *[#;].*$//g'</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sed</span> <span class=\"st_h\">'s/^ *//'</span></pre>"}, {"lang": "Seed7", "loc": 31, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func string: stripComment (in string: line) is func<br/>  result<br/>    var string: lineWithoutComment is \"\";<br/>  local<br/>    var integer: lineEnd is 0;<br/>    var integer: pos is 0;<br/>  begin<br/>    lineEnd\u00a0:= length(line);<br/>    for pos range 1 to length(line) do<br/>      if line[pos] in {'#', ';'} then<br/>        lineEnd\u00a0:= pred(pos);<br/>        pos\u00a0:= length(line);<br/>      end if;<br/>    end for;<br/>    lineWithoutComment\u00a0:= line[.. lineEnd];<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var string: stri is \"apples, pears # and bananas\\n\\<br/>                        \\apples, pears\u00a0; and bananas\";<br/>    var string: line is \"\"<br/>  begin<br/>    writeln(stri);<br/>    writeln(\"====&gt;\");<br/>    for line range split(stri, '\\n') do<br/>      writeln(stripComment(line));<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 9, "block": "<pre class=\"ruby highlighted_source\">func strip_comment<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span>s <span class=\"sy0\">-</span> <span class=\"sy0\">%</span>r<span class=\"st0\">'[#;].*'</span><span class=\"br0\">)</span>.<span class=\"me1\">strip</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"st0\">\" apples, pears # and bananas\"</span>,<br/> <span class=\"st0\">\" apples, pears\u00a0; and bananas\"</span>,<br/> <span class=\"st0\">\" apples, pears \"</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>s<span class=\"sy0\">|</span><br/>    say strip_comment<span class=\"br0\">(</span>s<span class=\"br0\">)</span>.<span class=\"me1\">dump</span>;<br/><span class=\"br0\">}</span>;</pre>"}, {"lang": "Tcl", "loc": 6, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> stripLineComments <span class=\"br0\">{</span>inputString <span class=\"br0\">{</span>commentChars <span class=\"st0\">\";#\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Switch the RE engine into line-respecting mode instead of the default whole-string mode</span><br/>    <span class=\"kw2\">regsub</span> -all -line <span class=\"st0\">\"<span class=\"es0\">\\[</span>$commentChars<span class=\"es0\">\\]</span>.*$\"</span> <span class=\"re0\">$inputString</span> <span class=\"st0\">\"\"</span> commentStripped<br/>    <span class=\"co1\"># Now strip the whitespace</span><br/>    <span class=\"kw2\">regsub</span> -all -line <span class=\"br0\">{</span>^<span class=\"br0\">[</span> \\t\\r<span class=\"br0\">]</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>.<span class=\"sy0\">*</span>\\S<span class=\"br0\">)</span><span class=\"sy0\">?</span><span class=\"br0\">[</span> \\t\\r<span class=\"br0\">]</span><span class=\"sy0\">*$</span><span class=\"br0\">}</span> <span class=\"re0\">$commentStripped</span> <span class=\"br0\">{</span>\\<span class=\"nu0\">1</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TUSCRIPT", "loc": 11, "block": "<pre class=\"text highlighted_source\">$$ MODE TUSCRIPT<br/>strngcomment=*<br/>DATA apples, pears # and bananas<br/>DATA apples, pears\u00a0; and bananas<br/>\u00a0<br/>BUILD S_TABLE comment_char=\"|#|;|\"<br/>\u00a0<br/>LOOP s=strngcomment<br/>x=SPLIT (s,comment_char,string,comment)<br/>PRINT string<br/>ENDLOOP</pre>"}, {"lang": "UNIX Shell", "loc": 7, "block": "<pre class=\"bash highlighted_source\"><span class=\"co4\">bash$ </span><span class=\"re2\">a</span>=<span class=\"st_h\">'apples, pears\u00a0; and bananas'</span><br/><span class=\"co4\">bash$ </span><span class=\"re2\">b</span>=<span class=\"st_h\">'apples, pears # and bananas'</span><br/><span class=\"co4\">bash$ </span><span class=\"kw3\">echo</span> <span class=\"co1\">${a%%;*}</span><br/>apples, pears<br/><span class=\"co4\">bash$ </span><span class=\"kw3\">echo</span> <span class=\"co1\">${b%%#*}</span><br/>apples, pears<br/><span class=\"co4\">bash$</span></pre>"}, {"lang": "VBScript", "loc": 13, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> strip_comments(s,char)<br/>\t<span class=\"kw3\">If</span> InStr(1,s,char) &gt; 0 <span class=\"kw3\">Then</span><br/>\t\tarr = Split(s,char)<br/>\t\tstrip_comments = RTrim(arr(0))<br/>\t<span class=\"kw3\">Else</span><br/>\t\tstrip_comments = s<br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.StdOut.WriteLine strip_comments(<span class=\"st0\">\"apples, pears # and bananas\"</span>,<span class=\"st0\">\"#\"</span>)<br/>WScript.StdOut.WriteLine strip_comments(<span class=\"st0\">\"apples, pears\u00a0; and bananas\"</span>,<span class=\"st0\">\";\"</span>)<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">fcn strip(text,c){  // if c in text, remove it and following text<br/>   if (Void!=(n:=text.find(c))) text=text[0,n];<br/>   text.strip()\t\t// remove leading and trailing white space<br/>}<br/>fcn stripper(text,a,b,c,etc){ // strip a,b,c,etc from text<br/>   foreach c in (vm.arglist[1,*]){ text=strip(text,c) }<br/>   text<br/>}</pre>"}]}