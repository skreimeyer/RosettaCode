{"task": "List_comprehensions", "blocks": [{"lang": "ABAP", "loc": 49, "block": "<pre class=\"abap highlighted_source\">\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPCLASS.htm\"><span class=\"kw3\">CLASS</span></a> lcl_pythagorean_triplet <span class=\"kw4\">DEFINITION</span> <span class=\"kw9\">CREATE PUBLIC</span><span class=\"sy0\">.</span><br/>  <span class=\"kw8\"><span class=\"kw4\">PUBLIC</span> SECTION</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPTYPES.htm\"><span class=\"kw2\">TYPES</span></a><span class=\"sy0\">:</span> <span class=\"kw9\">BEGIN OF</span> ty_triplet<span class=\"sy0\">,</span><br/>             x <span class=\"kw4\">TYPE</span> i<span class=\"sy0\">,</span><br/>             y <span class=\"kw4\">TYPE</span> i<span class=\"sy0\">,</span><br/>             <span class=\"kw4\">z</span> <span class=\"kw4\">TYPE</span> i<span class=\"sy0\">,</span><br/>           <span class=\"kw9\">END OF</span> ty_triplet<span class=\"sy0\">,</span><br/>           tty_triplets <span class=\"kw4\">TYPE</span> <span class=\"kw9\">STANDARD <span class=\"kw4\">TABLE</span> OF</span> ty_triplet <span class=\"kw4\">WITH</span> NON<span class=\"sy0\">-</span><span class=\"kw4\">UNIQUE</span> EMPTY <span class=\"kw4\">KEY</span><span class=\"sy0\">.</span><br/>\u00a0<br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPCLASS-METHODS.htm\"><span class=\"kw3\">CLASS-METHODS</span></a><span class=\"sy0\">:</span><br/>      get_triplets<br/>        <span class=\"kw4\">IMPORTING</span><br/>          n                 <span class=\"kw4\">TYPE</span> i<br/>        <span class=\"kw4\">RETURNING</span><br/>          <span class=\"kw4\">VALUE</span><span class=\"br0\">(</span>r_triplets<span class=\"br0\">)</span> <span class=\"kw4\">TYPE</span> tty_triplets<span class=\"sy0\">.</span><br/>\u00a0<br/>  <span class=\"kw8\">PRIVATE SECTION</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPCLASS-METHODS.htm\"><span class=\"kw3\">CLASS-METHODS</span></a><span class=\"sy0\">:</span><br/>      _is_pythagorean<br/>        <span class=\"kw4\">IMPORTING</span><br/>          i_triplet               <span class=\"kw4\">TYPE</span> ty_triplet<br/>        <span class=\"kw4\">RETURNING</span><br/>          <span class=\"kw4\">VALUE</span><span class=\"br0\">(</span>r_is_pythagorean<span class=\"br0\">)</span> <span class=\"kw4\">TYPE</span> abap_bool<span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDCLASS.htm\"><span class=\"kw3\">ENDCLASS</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPCLASS.htm\"><span class=\"kw3\">CLASS</span></a> lcl_pythagorean_triplet <span class=\"kw4\">IMPLEMENTATION</span><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPMETHOD.htm\"><span class=\"kw3\">METHOD</span></a> get_triplets<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">DATA</span></a><span class=\"br0\">(</span>triplets<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"kw4\">VALUE</span> tty_triplets<span class=\"br0\">(</span> <span class=\"kw4\">FOR</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw4\">THEN</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <a href=\"http://help.sap.com/abapdocu/en/ABAPWHILE.htm\"><span class=\"kw1\">WHILE</span></a> x <span class=\"sy1\">&lt;=</span> n<br/>                                         <span class=\"kw4\">FOR</span> y <span class=\"sy1\">=</span> x <span class=\"kw4\">THEN</span> y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <a href=\"http://help.sap.com/abapdocu/en/ABAPWHILE.htm\"><span class=\"kw1\">WHILE</span></a> y <span class=\"sy1\">&lt;=</span> n<br/>                                         <span class=\"kw4\">FOR</span> <span class=\"kw4\">z</span> <span class=\"sy1\">=</span> y <span class=\"kw4\">THEN</span> <span class=\"kw4\">z</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <a href=\"http://help.sap.com/abapdocu/en/ABAPWHILE.htm\"><span class=\"kw1\">WHILE</span></a> <span class=\"kw4\">z</span> <span class=\"sy1\">&lt;=</span> n<br/>                                            <span class=\"br0\">(</span> x <span class=\"sy1\">=</span> x y <span class=\"sy1\">=</span> y <span class=\"kw4\">z</span> <span class=\"sy1\">=</span> <span class=\"kw4\">z</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>    <span class=\"kw7\"><a href=\"http://help.sap.com/abapdocu/en/ABAPLOOP.htm\"><span class=\"kw1\">LOOP</span></a> AT</span> triplets <span class=\"kw4\">ASSIGNING</span> FIELD<span class=\"sy0\">-</span>SYMBOL<span class=\"br0\">(</span><span class=\"sy1\">&lt;</span>triplet<span class=\"sy1\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">IF</span></a> _is_pythagorean<span class=\"br0\">(</span> <span class=\"sy1\">&lt;</span>triplet<span class=\"sy1\">&gt;</span> <span class=\"br0\">)</span> <span class=\"sy1\">=</span> abap_true<span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPINSERT.htm\"><span class=\"kw3\">INSERT</span></a> <span class=\"sy1\">&lt;</span>triplet<span class=\"sy1\">&gt;</span> <span class=\"kw4\">INTO</span> <span class=\"kw4\">TABLE</span> r_triplets<span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">ENDIF</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDLOOP.htm\"><span class=\"kw1\">ENDLOOP</span></a><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDMETHOD.htm\"><span class=\"kw3\">ENDMETHOD</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPMETHOD.htm\"><span class=\"kw3\">METHOD</span></a> _is_pythagorean<span class=\"sy0\">.</span><br/>    r_is_pythagorean <span class=\"sy1\">=</span> COND #<span class=\"br0\">(</span> <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> i_triplet<span class=\"sy0\">-</span>x <span class=\"sy0\">*</span> i_triplet<span class=\"sy0\">-</span>x <span class=\"sy0\">+</span> i_triplet<span class=\"sy0\">-</span>y <span class=\"sy0\">*</span> i_triplet<span class=\"sy0\">-</span>y <span class=\"sy1\">=</span> i_triplet<span class=\"sy0\">-</span><span class=\"kw4\">z</span> <span class=\"sy0\">*</span> i_triplet<span class=\"sy0\">-</span><span class=\"kw4\">z</span> <span class=\"kw4\">THEN</span> abap_true<br/>                               <a href=\"http://help.sap.com/abapdocu/en/ABAPELSE.htm\"><span class=\"kw1\">ELSE</span></a> abap_false <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDMETHOD.htm\"><span class=\"kw3\">ENDMETHOD</span></a><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDCLASS.htm\"><span class=\"kw3\">ENDCLASS</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPSTART-OF-SELECTION.htm\"><span class=\"kw3\">START-OF-SELECTION</span></a><span class=\"sy0\">.</span><br/>  cl_demo_output<span class=\"sy0\">=&gt;</span><span class=\"me2\">display</span><span class=\"br0\">(</span> lcl_pythagorean_triplet<span class=\"sy0\">=&gt;</span><span class=\"me2\">get_triplets</span><span class=\"br0\">(</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">20</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 46, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Doubly_Linked_Lists</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Pythagore_Set <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Triangles <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Positive;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> Triangle_Lists <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Doubly_Linked_Lists</span> <span class=\"br0\">(</span><br/>      Triangles<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">use</span> Triangle_Lists;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Find_List <span class=\"br0\">(</span>Upper_Bound\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> List <span class=\"kw1\">is</span><br/>      L\u00a0: List\u00a0:= Empty_List;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> A <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">Upper_Bound</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">for</span> B <span class=\"kw3\">in</span> A + <span class=\"nu0\">1</span> .. <span class=\"me1\">Upper_Bound</span> <span class=\"kw1\">loop</span><br/>            <span class=\"kw1\">for</span> C <span class=\"kw3\">in</span> B + <span class=\"nu0\">1</span> .. <span class=\"me1\">Upper_Bound</span> <span class=\"kw1\">loop</span><br/>               <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>A * A + B * B<span class=\"br0\">)</span> = C * C<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                  Append <span class=\"br0\">(</span>L, <span class=\"br0\">(</span>A, B, C<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> L;<br/>   <span class=\"kw1\">end</span> Find_List;<br/>\u00a0<br/>   Triangle_List\u00a0: List;<br/>   C            \u00a0: Cursor;<br/>   T            \u00a0: Triangles;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Triangle_List\u00a0:= Find_List <span class=\"br0\">(</span>Upper_Bound =&gt; <span class=\"nu0\">20</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   C\u00a0:= First <span class=\"br0\">(</span>Triangle_List<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">while</span> Has_Element <span class=\"br0\">(</span>C<span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>      T\u00a0:= Element <span class=\"br0\">(</span>C<span class=\"br0\">)</span>;<br/>      Put<br/>        <span class=\"br0\">(</span><span class=\"st0\">\"(\"</span> &amp;<br/>         Integer'Image <span class=\"br0\">(</span>T <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp;<br/>         Integer'Image <span class=\"br0\">(</span>T <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp;<br/>         Integer'Image <span class=\"br0\">(</span>T <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp;<br/>         <span class=\"st0\">\") \"</span><span class=\"br0\">)</span>;<br/>      Next <span class=\"br0\">(</span>C<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Pythagore_Set;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 15, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> XYZ <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">INT</span> x<span class=\"sy1\">,</span>y<span class=\"sy1\">,</span>z<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"sy1\">+:=</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span><span class=\"br0\">]</span>XYZ lhs<span class=\"sy1\">,</span> XYZ rhs<span class=\"br0\">)</span><span class=\"kw4\">FLEX</span><span class=\"br0\">[</span><span class=\"br0\">]</span>XYZ<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span><span class=\"kw8\">UPB</span> lhs<span class=\"sy1\">+</span>1<span class=\"br0\">]</span>XYZ out<span class=\"sy1\">;</span><br/>  out<span class=\"br0\">[</span><span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> lhs<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> lhs<span class=\"sy1\">;</span><br/>  out<span class=\"br0\">[</span><span class=\"kw8\">UPB</span> out<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> rhs<span class=\"sy1\">;</span><br/>  lhs <span class=\"sy1\">:=</span> out<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">INT</span> n <span class=\"sy1\">=</span> 20<span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>XYZ<span class=\"br0\">(</span><br/>  <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>0<span class=\"br0\">]</span>XYZ xyz<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> x <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span> <span class=\"kw2\">FOR</span> y <span class=\"kw2\">FROM</span> x<span class=\"sy1\">+</span>1 <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span> <span class=\"kw2\">FOR</span> z <span class=\"kw2\">FROM</span> y<span class=\"sy1\">+</span>1 <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span> <span class=\"kw2\">IF</span> x<span class=\"sy1\">*</span>x <span class=\"sy1\">+</span> y<span class=\"sy1\">*</span>y <span class=\"sy1\">=</span> z<span class=\"sy1\">*</span>z <span class=\"kw2\">THEN</span> xyz <span class=\"sy1\">+:=</span> XYZ<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>y<span class=\"sy1\">,</span>z<span class=\"br0\">)</span> <span class=\"kw2\">FI</span> <span class=\"kw2\">OD</span> <span class=\"kw2\">OD</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  xyz<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><br/><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 92, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- List comprehension by direct and unsugared use of list monad</span><br/>\u00a0<br/><span class=\"co1\">-- pythagoreanTriples\u00a0:: Int -&gt; [(Int, Int, Int)]</span><br/><span class=\"kw3\">on</span> pythagoreanTriples<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> x<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span> y<br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>                    <span class=\"kw3\">script</span> z<br/>                        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>                            <span class=\"kw3\">if</span> x <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> y <span class=\"sy0\">*</span> y <span class=\"sy0\">=</span> z <span class=\"sy0\">*</span> z <span class=\"kw3\">then</span><br/>                                <span class=\"br0\">[</span><span class=\"br0\">[</span>x, y, z<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>                            <span class=\"kw3\">else</span><br/>                                <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>                            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>                        <span class=\"kw3\">end</span> |\u03bb|<br/>                    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>                    |&gt;<span class=\"sy0\">&gt;=</span>|<span class=\"br0\">(</span>enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> y, n<span class=\"br0\">)</span>, z<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>            |&gt;<span class=\"sy0\">&gt;=</span>|<span class=\"br0\">(</span>enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> x, n<span class=\"br0\">)</span>, y<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    |&gt;<span class=\"sy0\">&gt;=</span>|<span class=\"br0\">(</span>enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, n<span class=\"br0\">)</span>, x<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> pythagoreanTriples<br/>\u00a0<br/><span class=\"co1\">-- TEST -----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"co1\">--   Pythagorean triples drawn from integers in the range [1..n]</span><br/>    <span class=\"co1\">--  {(x, y, z) | x &lt;- [1..n], y &lt;- [x+1..n], z &lt;- [y+1..n], (x^2 + y^2 = z^2)}</span><br/>\u00a0<br/>    pythagoreanTriples<span class=\"br0\">(</span><span class=\"nu0\">25</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">--&gt; {{3, 4, 5}, {5, 12, 13}, {6, 8, 10}, {7, 24, 25}, {8, 15, 17}, </span><br/>    <span class=\"co1\">--   {9, 12, 15}, {12, 16, 20}, {15, 20, 25}}</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- Monadic (&gt;&gt;=) (or 'bind') for lists is simply flip concatMap</span><br/><span class=\"co1\">-- (concatMap with arguments reversed)</span><br/><span class=\"co1\">-- It applies a function f directly to each value in the list,</span><br/><span class=\"co1\">-- and returns the set of results as a concat-flattened list</span><br/>\u00a0<br/><span class=\"co1\">-- The concatenation eliminates any empty lists,</span><br/><span class=\"co1\">-- combining list-wrapped results into a single results list</span><br/>\u00a0<br/><span class=\"co1\">-- (&gt;&gt;=)\u00a0:: Monad m =&gt; m a -&gt; (a -&gt; m b) -&gt; m b</span><br/><span class=\"kw3\">on</span> |&gt;<span class=\"sy0\">&gt;=</span>|<span class=\"br0\">(</span>xs, f<span class=\"br0\">)</span><br/>    concatMap<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> |&gt;<span class=\"sy0\">&gt;=</span>|<br/>\u00a0<br/><span class=\"co1\">-- concatMap\u00a0:: (a -&gt; [b]) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> concatMap<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> x <span class=\"kw3\">in</span> xs<br/>            <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> acc <span class=\"sy0\">&amp;</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">contents</span> <span class=\"kw3\">of</span> x<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/>    <span class=\"kw3\">return</span> acc<br/><span class=\"kw3\">end</span> concatMap<br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">&lt;</span> m <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "AutoHotkey", "loc": 70, "block": "<pre class=\"autohotkey highlighted_source\">\u00a0<br/>comprehend<span class=\"br0\">(</span><span class=\"st0\">\"show\"</span><span class=\"sy0\">,</span> range<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"triples\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/>comprehend<span class=\"br0\">(</span>doToVariable<span class=\"sy0\">,</span> inSet<span class=\"sy0\">,</span> satisfying<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  set <span class=\"sy0\">:=</span> <span class=\"re0\">%satisfying%</span><span class=\"br0\">(</span>inSet<span class=\"sy0\">.</span>begin<span class=\"sy0\">,</span> inSet<span class=\"sy0\">.</span><span class=\"kw6\">end</span><span class=\"br0\">)</span><br/>  index <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">While</span>\u00a0% set<span class=\"br0\">[</span>index<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">{</span><br/>    item <span class=\"sy0\">:=</span> set<span class=\"br0\">[</span>index<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">.</span> set<span class=\"br0\">[</span>index<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">.</span> set<span class=\"br0\">[</span>index<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>    <span class=\"re0\">%doToVariable%</span><span class=\"br0\">(</span>item<span class=\"br0\">)</span><br/>    index <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gui.htm#Show\"><span class=\"kw7\">show</span></a><span class=\"br0\">(</span>var<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% var<br/><span class=\"br0\">}</span><br/>\u00a0<br/>range<span class=\"br0\">(</span>begin<span class=\"sy0\">,</span> <span class=\"kw6\">end</span><span class=\"br0\">)</span><br/> <span class=\"br0\">{</span><br/>   set <span class=\"sy0\">:=</span> object<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   set<span class=\"sy0\">.</span>begin <span class=\"sy0\">:=</span> begin<br/>   set<span class=\"sy0\">.</span><span class=\"kw6\">end</span> <span class=\"sy0\">:=</span> <span class=\"kw6\">end</span><br/>   <span class=\"kw1\">return</span> set<br/> <span class=\"br0\">}</span><br/>\u00a0<br/>!r::<a href=\"http://www.autohotkey.com/docs/commands/Reload.htm\"><span class=\"kw3\">reload</span></a><br/>!q::<a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">exitapp</span></a><br/>\u00a0<br/>triples<span class=\"br0\">(</span>begin<span class=\"sy0\">,</span> <span class=\"kw6\">end</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\u00a0<br/>  set <span class=\"sy0\">:=</span> object<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  index <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>  range <span class=\"sy0\">:=</span> <span class=\"kw6\">end</span> <span class=\"sy0\">-</span> begin<br/>\u00a0<br/>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% range<br/>  <span class=\"br0\">{</span><br/>    x <span class=\"sy0\">:=</span> begin <span class=\"sy0\">+</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% range<br/>    <span class=\"br0\">{</span><br/>      y <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> x <br/>      <span class=\"kw1\">if</span> y <span class=\"sy0\">&gt;</span> <span class=\"nu0\">20</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">break</span></a><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><span class=\"sy0\">,</span>\u00a0% range<br/><span class=\"br0\">{</span><br/>  z <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> y <br/>  <span class=\"kw1\">if</span> z <span class=\"sy0\">&gt;</span> <span class=\"nu0\">20</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">break</span></a><br/>  isTriple <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy0\">**</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> y <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> z <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> isTriple<br/>  <span class=\"br0\">{</span><br/>    set<span class=\"br0\">[</span>index<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> x <br/>    set<span class=\"br0\">[</span>index<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> y<br/>    set<span class=\"br0\">[</span>index<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> z<br/>    index <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>  <span class=\"co1\">; msgbox\u00a0% \"triple: \"  x . y . z</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">return</span> set<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/> \u00a0:?py                         { Initialize the accumulating result list. }<br/>&amp; (     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20   { This is the subject }<br/>   \u00a0:  \u00a0?                      { Here starts the pattern }<br/>       \u00a0%@?x<br/>       \u00a0?<br/>       \u00a0%@?y<br/>       \u00a0?<br/>       \u00a0%@?z<br/>        (\u00a0?<br/>        &amp; -1*!z^2+!x^2+!y^2:0<br/>        &amp; (!x,!y,!z)\u00a0!py:?py<br/>        &amp; ~                    { This 'failure' expression forces backtracking }<br/>        )                      { Here ends the pattern }<br/>  | out$!py                    { You get here when backtracking has <br/>                                 exhausted all combinations of x, y and z }<br/>  );</pre>"}, {"lang": "C", "loc": 3, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> f <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> t<span class=\"sy0\">;</span> i <span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> e <span class=\"sy0\">=</span> e<span class=\"sy0\">-&gt;</span>nx <span class=\"sy0\">=</span> listNew<span class=\"br0\">(</span><span class=\"kw4\">sizeof</span> i<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 18, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> ts <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">from</span> a <span class=\"kw1\">in</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">from</span> b <span class=\"kw1\">in</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span>a, <span class=\"nu0\">21</span> <span class=\"sy0\">-</span> a<span class=\"br0\">)</span><br/>      <span class=\"kw1\">from</span> c <span class=\"kw1\">in</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span>b, <span class=\"nu0\">21</span> <span class=\"sy0\">-</span> b<span class=\"br0\">)</span><br/>      <span class=\"kw1\">where</span> a <span class=\"sy0\">*</span> a <span class=\"sy0\">+</span> b <span class=\"sy0\">*</span> b <span class=\"sy0\">==</span> c <span class=\"sy0\">*</span> c<br/>      <span class=\"kw1\">select</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"br0\">{</span> a, b, c <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> t <span class=\"kw1\">in</span> ts<span class=\"br0\">)</span><br/>        <span class=\"kw5\">System</span><span class=\"sy0\">.</span><span class=\"me1\">Console</span><span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}, {1}, {2}\"</span>, t<span class=\"sy0\">.</span><span class=\"me1\">a</span>, t<span class=\"sy0\">.</span><span class=\"me1\">b</span>, t<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 32, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;cmath&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> list_comprehension<span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy3\">&amp;</span> , <span class=\"kw4\">int</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> triangles <span class=\"sy4\">;</span><br/>   list_comprehension<span class=\"br0\">(</span> triangles , <span class=\"nu0\">20</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span> triangles.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , triangles.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> ,<br/>\t std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> , <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> list_comprehension<span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> <span class=\"sy3\">&amp;</span> numbers , <span class=\"kw4\">int</span> upper_border <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> a <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy4\">;</span> a <span class=\"sy1\">&lt;</span> upper_border <span class=\"sy4\">;</span> a<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> b <span class=\"sy1\">=</span> a <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy4\">;</span> b <span class=\"sy1\">&lt;</span> upper_border <span class=\"sy4\">;</span> b<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t <span class=\"kw4\">double</span> c <span class=\"sy1\">=</span> <span class=\"kw3\">pow</span><span class=\"br0\">(</span> a <span class=\"sy2\">*</span> a <span class=\"sy2\">+</span> b <span class=\"sy2\">*</span> b , <span class=\"nu16\">0.5</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> <span class=\"co1\">//remembering Mr. Pythagoras</span><br/>\t <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> c <span class=\"sy2\">*</span> c <span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> <span class=\"kw3\">pow</span><span class=\"br0\">(</span> upper_border , <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> c <span class=\"sy1\">==</span> <span class=\"kw3\">floor</span><span class=\"br0\">(</span> c <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t       numbers.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> a <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\t       numbers.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> b <span class=\"br0\">)</span> <span class=\"sy4\">;</span>\t      <br/>\t       numbers.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> c <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 6, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defn pythagorean-triples <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>for <span class=\"br0\">[</span>x <span class=\"br0\">(</span>range <span class=\"nu0\">1</span> <span class=\"br0\">(</span>inc n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\ty <span class=\"br0\">(</span>range x <span class=\"br0\">(</span>inc n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\tz <span class=\"br0\">(</span>range y <span class=\"br0\">(</span>inc n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"sy0\">:</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* x x<span class=\"br0\">)</span> <span class=\"br0\">(</span>* y y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>* z z<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span>x y z<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 10, "block": "<pre class=\"coffeescript highlighted_source\">flatten = <span class=\"br0\">(</span>arr<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> arr.<span class=\"me1\">reduce</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>memo<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> memo.<span class=\"me1\">concat</span> b<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>pyth = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  flatten <span class=\"br0\">(</span><span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">]</span><br/>    flatten <span class=\"br0\">(</span><span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"br0\">[</span>x..<span class=\"me1\">n</span><span class=\"br0\">]</span><br/>      <span class=\"kw1\">for</span> z <span class=\"kw1\">in</span> <span class=\"br0\">[</span>y..<span class=\"me1\">n</span><span class=\"br0\">]</span> <span class=\"kw1\">when</span> x<span class=\"sy0\">*</span>x <span class=\"sy0\">+</span> y<span class=\"sy0\">*</span>y <span class=\"kw2\">is</span> z<span class=\"sy0\">*</span>z<br/>        <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"br0\">]</span><br/>    <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>console.<span class=\"me1\">dir</span> pyth <span class=\"nu0\">20</span></pre>"}, {"lang": "Common Lisp", "loc": 6, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> pythagorean-triples <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for x from <span class=\"nu0\">1</span> to n<br/>        <span class=\"kw1\">append</span> <span class=\"br0\">(</span>loop for y from x to n<br/>                     <span class=\"kw1\">append</span> <span class=\"br0\">(</span>loop for z from y to n<br/>                                  <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* x x<span class=\"br0\">)</span> <span class=\"br0\">(</span>* y y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>* z z<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                  collect <span class=\"br0\">(</span><span class=\"kw1\">list</span> x y z<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 34, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typetuple</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/>TA<span class=\"br0\">[</span><span class=\"br0\">]</span> select<span class=\"br0\">(</span>TA<span class=\"sy0\">,</span> TI1<span class=\"sy0\">,</span> TC1<span class=\"sy0\">,</span> TI2<span class=\"sy0\">,</span> TC2<span class=\"sy0\">,</span> TI3<span class=\"sy0\">,</span> TC3<span class=\"sy0\">,</span> TP<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw2\">lazy</span> TA mapper<span class=\"sy0\">,</span><br/>            <span class=\"kw2\">ref</span> TI1 iter1<span class=\"sy0\">,</span> TC1 items1<span class=\"sy0\">,</span><br/>            <span class=\"kw2\">ref</span> TI2 iter2<span class=\"sy0\">,</span> <span class=\"kw2\">lazy</span> TC2 items2<span class=\"sy0\">,</span><br/>            <span class=\"kw2\">ref</span> TI3 iter3<span class=\"sy0\">,</span> <span class=\"kw2\">lazy</span> TC3 items3<span class=\"sy0\">,</span><br/>            <span class=\"kw2\">lazy</span> TP where<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  Appender<span class=\"sy0\">!</span><span class=\"br0\">(</span>TA<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> result<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">auto</span> iters <span class=\"sy0\">=</span> TypeTuple<span class=\"sy0\">!</span><span class=\"br0\">(</span>iter1<span class=\"sy0\">,</span> iter2<span class=\"sy0\">,</span> iter3<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>el1<span class=\"sy0\">;</span> items1<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    iter1 <span class=\"sy0\">=</span> el1<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>el2<span class=\"sy0\">;</span> items2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      iter2 <span class=\"sy0\">=</span> el2<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>el3<span class=\"sy0\">;</span> items3<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        iter3 <span class=\"sy0\">=</span> el3<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>where<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          result <span class=\"sy0\">~=</span> mapper<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  TypeTuple<span class=\"sy0\">!</span><span class=\"br0\">(</span>iter1<span class=\"sy0\">,</span> iter2<span class=\"sy0\">,</span> iter3<span class=\"br0\">)</span> <span class=\"sy0\">=</span> iters<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> result.<span class=\"me1\">data</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">enum</span> <span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">21</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">auto</span> r <span class=\"sy0\">=</span> select<span class=\"br0\">(</span><span class=\"br0\">[</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>z<span class=\"br0\">]</span><span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> iota<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> z<span class=\"sy0\">,</span><br/>                  iota<span class=\"br0\">(</span>y<span class=\"sy0\">,</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> x<span class=\"sy0\">*</span>x <span class=\"sy0\">+</span> y<span class=\"sy0\">*</span>y <span class=\"sy0\">==</span> z<span class=\"sy0\">*</span>z<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  writeln<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 3, "block": "<pre class=\"e highlighted_source\">pragma.<span class=\"me1\">enable</span><span class=\"br0\">(</span><span class=\"st0\">\"accumulator\"</span><span class=\"br0\">)</span> <span class=\"co1\"># considered experimental</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> x <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">1</span>..<span class=\"me1\">n</span> <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> y <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> x..<span class=\"me1\">n</span> <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> z <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> y..<span class=\"me1\">n</span> <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> y<span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">&lt;=&gt;</span> z<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> _.<span class=\"me1\">with</span><span class=\"br0\">(</span><span class=\"br0\">[</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>z<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 10, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"co1\">;; copied from Racket</span><br/>\u00a0<br/><span class=\"br0\">(</span>for*/<span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>x <span class=\"br0\">(</span>in-range <span class=\"nu0\">1</span> <span class=\"nu0\">21</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span>y <span class=\"br0\">(</span>in-range x <span class=\"nu0\">21</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span>z <span class=\"br0\">(</span>in-range y <span class=\"nu0\">21</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>#<span class=\"sy0\">:</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* x x<span class=\"br0\">)</span> <span class=\"br0\">(</span>* y y<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>* z z<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">list</span> x y z<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span> <span class=\"nu0\">12</span> <span class=\"nu0\">13</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">6</span> <span class=\"nu0\">8</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">8</span> <span class=\"nu0\">15</span> <span class=\"nu0\">17</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span> <span class=\"nu0\">12</span> <span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">12</span> <span class=\"nu0\">16</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Efene", "loc": 12, "block": "<pre class=\"text highlighted_source\">pythag = fn (N) {<br/>    [(A, B, C) for A in lists.seq(1, N) \\<br/>         for B in lists.seq(A, N) \\<br/>         for C in lists.seq(B, N) \\<br/>         if A + B + C &lt;= N and A * A + B * B == C * C]<br/>}<br/>\u00a0<br/>@public <br/>run = fn () {<br/>    io.format(\"~p~n\", [pythag(20)])<br/>}<br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 1, "block": "<pre class=\"text highlighted_source\">pyth n = [(x,y,z) \\\\ x &lt;- [1..n], y &lt;- [x..n], z &lt;- [y..n] | x**2 + y**2 == z**2]</pre>"}, {"lang": "Elixir", "loc": 1, "block": "<pre>iex(30)&gt; pytha3 = fn(n) -&gt;\n...(30)&gt;   for x &lt;- 1..n, y &lt;- x..n, z &lt;- y..n, x*x+y*y == z*z, do: {x,y,z}\n...(30)&gt; end\n#Function&lt;6.90072148/1 in\u00a0:erl_eval.expr/5&gt;\niex(31)&gt; pytha3.(20)\n[{3, 4, 5}, {5, 12, 13}, {6, 8, 10}, {8, 15, 17}, {9, 12, 15}, {12, 16, 20}]\n</pre>"}, {"lang": "Erlang", "loc": 6, "block": "<pre class=\"erlang highlighted_source\"><span class=\"re3\">pythag</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span> <span class=\"br0\">{</span><span class=\"re5\">A</span><span class=\"sy1\">,</span><span class=\"re5\">B</span><span class=\"sy1\">,</span><span class=\"re5\">C</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">A</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                 <span class=\"re5\">B</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                 <span class=\"re5\">C</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"re5\">B</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                 <span class=\"re5\">A</span><span class=\"sy3\">+</span><span class=\"re5\">B</span><span class=\"sy3\">+</span><span class=\"re5\">C</span> <span class=\"sy3\">=&lt;</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span><br/>                 <span class=\"re5\">A</span><span class=\"sy3\">*</span><span class=\"re5\">A</span><span class=\"sy3\">+</span><span class=\"re5\">B</span><span class=\"sy3\">*</span><span class=\"re5\">B</span> <span class=\"sy3\">==</span> <span class=\"re5\">C</span><span class=\"sy3\">*</span><span class=\"re5\">C</span> <span class=\"br0\">]</span><span class=\"sy1\">.</span></pre>"}, {"lang": "F#", "loc": 4, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> pyth n <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"kw1\">for</span> a <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>               <span class=\"kw1\">for</span> b <span class=\"kw1\">in</span> <span class=\"br0\">[</span>a..<span class=\"me1\">n</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>               <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> <span class=\"br0\">[</span>b..<span class=\"me1\">n</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>               <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a<span class=\"sy0\">*</span>a<span class=\"sy0\">+</span>b<span class=\"sy0\">*</span>b <span class=\"sy0\">=</span> c<span class=\"sy0\">*</span>c<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">yield</span> <span class=\"br0\">(</span>a,b,c<span class=\"br0\">)</span><span class=\"br0\">]</span></pre>"}, {"lang": "Fortran", "loc": 33, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">!-*- mode: compilation; default-directory: \"/tmp/\" -*-</span><br/><span class=\"co1\">!Compilation started at Fri Jun  7 23:39:20</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!a=./f &amp;&amp; make $a &amp;&amp; $a</span><br/><span class=\"co1\">!gfortran -std=f2008 -Wall -fopenmp -ffree-form -fall-intrinsics -fimplicit-none f.f08 -o f</span><br/><span class=\"co1\">!   3   4   5</span><br/><span class=\"co1\">!   5  12  13</span><br/><span class=\"co1\">!   6   8  10</span><br/><span class=\"co1\">!   8  15  17</span><br/><span class=\"co1\">!   9  12  15</span><br/><span class=\"co1\">!  12  16  20</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">!Compilation finished at Fri Jun  7 23:39:20</span><br/>\u00a0<br/><span class=\"kw1\">program</span> list_comprehension<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">m</span> <span class=\"sy0\">=</span> n<span class=\"sy0\">*</span><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>  <span class=\"kw3\">complex</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><br/>  <span class=\"kw3\">real</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">b</span><br/>  <span class=\"kw3\">logical</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">c</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>, m<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">d</span><br/>  a <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw4\">cmplx</span><span class=\"br0\">(</span>i,j<span class=\"br0\">)</span>, i<span class=\"sy0\">=</span>j,n<span class=\"br0\">)</span>, j<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,n<span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"co1\">! list comprehension, implicit do loop</span><br/>  b <span class=\"sy0\">=</span> <span class=\"kw4\">abs</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  c <span class=\"sy0\">=</span> <span class=\"br0\">(</span>b <span class=\"kw2\">.<span class=\"me1\">eq</span>.</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"br0\">(</span>b <span class=\"kw2\">.<span class=\"me1\">le</span>.</span> n<span class=\"br0\">)</span><br/>  i <span class=\"sy0\">=</span> sum<span class=\"br0\">(</span><span class=\"kw4\">merge</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  d<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"sy0\">:</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"kw3\">real</span><span class=\"br0\">(</span><span class=\"kw4\">pack</span><span class=\"br0\">(</span>a, c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">! list comprehensions: array</span><br/>  d<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"sy0\">:</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span>imag<span class=\"br0\">(</span><span class=\"kw4\">pack</span><span class=\"br0\">(</span>a, c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">! assignments and operations.</span><br/>  d<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"sy0\">:</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span><span class=\"kw4\">pack</span><span class=\"br0\">(</span>b,c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  print <span class=\"st0\">'(3i4)'</span>,d<span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> list_comprehension<br/>\u00a0</pre>"}, {"lang": "FunL", "loc": 3, "block": "<pre class=\"text highlighted_source\">def triples( n ) = [(a, b, c) | a &lt;- 1..n-2, b &lt;- a+1..n-1, c &lt;- b+1..n if a^2 + b^2 == c^2]<br/>\u00a0<br/>println( triples(20) )</pre>"}, {"lang": "GAP", "loc": 10, "block": "<pre class=\"text highlighted_source\"># We keep only primitive pythagorean triples<br/>pyth\u00a0:= n -&gt;<br/>  Filtered(Cartesian([1 .. n], [1 .. n], [1 .. n]),<br/>  u -&gt; u[3]^2 = u[1]^2 + u[2]^2 and u[1] &lt; u[2] <br/>  and GcdInt(u[1], u[2]) = 1);<br/>\u00a0<br/>pyth(100);<br/># [ [ 3, 4, 5 ], [ 5, 12, 13 ], [ 7, 24, 25 ], [ 8, 15, 17 ], [ 9, 40, 41 ], [ 11, 60, 61 ], [ 12, 35, 37 ], <br/>#   [ 13, 84, 85 ], [ 16, 63, 65 ], [ 20, 21, 29 ], [ 28, 45, 53 ], [ 33, 56, 65 ], [ 36, 77, 85 ], [ 39, 80, 89 ], <br/>#   [ 48, 55, 73 ], [ 65, 72, 97 ] ]</pre>"}, {"lang": "Haskell", "loc": 7, "block": "<pre class=\"haskell highlighted_source\">pyth <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>pyth n <span class=\"sy0\">=</span><br/>  <span class=\"br0\">[</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> x <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> n<span class=\"br0\">]</span> <br/>  <span class=\"sy0\">,</span> y <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span>x <span class=\"sy0\">..</span> n<span class=\"br0\">]</span> <br/>  <span class=\"sy0\">,</span> z <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span>y <span class=\"sy0\">..</span> n<span class=\"br0\">]</span> <br/>  <span class=\"sy0\">,</span> x <span class=\"sy0\">^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> y <span class=\"sy0\">^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> z <span class=\"sy0\">^</span> <span class=\"nu0\">2</span> <span class=\"br0\">]</span></pre>"}, {"lang": "Hy", "loc": 10, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> triples <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>list<span class=\"sy0\">-</span>comp <span class=\"br0\">(</span>, a b c<span class=\"br0\">)</span> <span class=\"br0\">[</span>a <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">inc</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        b <span class=\"br0\">(</span><span class=\"kw1\">range</span> a <span class=\"br0\">(</span><span class=\"kw1\">inc</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        c <span class=\"br0\">(</span><span class=\"kw1\">range</span> b <span class=\"br0\">(</span><span class=\"kw1\">inc</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>             <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>pow c <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>pow a <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>pow b <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span>triples <span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">; [(3, 4, 5), (5, 12, 13), (6, 8, 10), (9, 12, 15)]</span></pre>"}, {"lang": "Icon and unicon", "loc": 3, "block": "<pre class=\"unicon highlighted_source\">\u00a0<br/>    <span class=\"sy0\">|</span><span class=\"br0\">(</span>x <span class=\"sy0\">:=</span> <span class=\"kw4\">seq</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> x<span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> x<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Ioke", "loc": 7, "block": "<pre class=\"text highlighted_source\">for(<br/>  x &lt;- 1..20, <br/>  y &lt;- x..20, <br/>  z &lt;- y..20,<br/>  x * x + y * y == z * z,<br/>  [x, y, z]<br/>)</pre>"}, {"lang": "J", "loc": 5, "block": "<pre class=\"j highlighted_source\">require<span class=\"st_h\">'stats'</span><br/>buildSet=:conjunction def <span class=\"st_h\">'(#~ v) u y'</span><br/>triples=: <span class=\"nu0\">1</span> + <span class=\"nu0\">3</span>&amp;comb<br/>isPyth=: <span class=\"nu0\">2</span>&amp;{\"<span class=\"nu0\">1</span> = <span class=\"nu0\">1</span>&amp;{\"<span class=\"nu0\">1</span> +&amp;.:*: <span class=\"nu0\">0</span>&amp;{\"<span class=\"nu0\">1</span><br/>pythTr=: triples buildSet isPyth</pre>"}, {"lang": "Java", "loc": 34, "block": "<pre class=\"java highlighted_source\"><span class=\"co1\">// Boilerplate</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">util</span>.<span class=\"me1\">function</span>.<span class=\"me1\">Function</span>.<span class=\"me1\">identity</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">util</span>.<span class=\"me1\">stream</span>.<span class=\"me1\">Collectors</span>.<span class=\"me1\">toList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">util</span>.<span class=\"me1\">stream</span>.<span class=\"me1\">IntStream</span>.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">interface</span> PythagComp<span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>... <span class=\"me1\">args</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>run<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;&gt;</span> run<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span><br/>            <span class=\"co1\">// Here comes the list comprehension bit</span><br/>            <span class=\"co1\">// input stream - bit clunky</span><br/>            range<span class=\"br0\">(</span><span class=\"nu0\">1</span>, n<span class=\"br0\">)</span>.<span class=\"me1\">mapToObj</span><span class=\"br0\">(</span><br/>                x <span class=\"sy0\">-&gt;</span> range<span class=\"br0\">(</span>x, n<span class=\"br0\">)</span>.<span class=\"me1\">mapToObj</span><span class=\"br0\">(</span><br/>                    y <span class=\"sy0\">-&gt;</span> range<span class=\"br0\">(</span>y, n<span class=\"br0\">)</span>.<span class=\"me1\">mapToObj</span><span class=\"br0\">(</span><br/>                        z <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>x, y, z<span class=\"br0\">}</span><br/>                    <span class=\"br0\">)</span><br/>                <span class=\"br0\">)</span><br/>            <span class=\"br0\">)</span><br/>                .<span class=\"me1\">flatMap</span><span class=\"br0\">(</span>identity<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">flatMap</span><span class=\"br0\">(</span>identity<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"co1\">// predicate</span><br/>                .<span class=\"me1\">filter</span><span class=\"br0\">(</span>a <span class=\"sy0\">-&gt;</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"co1\">// output expression</span><br/>                .<span class=\"me1\">map</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a><span class=\"sy0\">::</span>asList<span class=\"br0\">)</span><br/>                <span class=\"co1\">// the result is a list</span><br/>                .<span class=\"me1\">collect</span><span class=\"br0\">(</span>toList<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "JavaScript", "loc": 32, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">// USING A LIST MONAD DIRECTLY, WITHOUT SPECIAL SYNTAX FOR LIST COMPREHENSIONS</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> mb<span class=\"br0\">(</span>r<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>     n<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span>  <span class=\"co1\">// x &lt;- [1..n]</span><br/>    <span class=\"kw1\">return</span> mb<span class=\"br0\">(</span>r<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> x<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"br0\">{</span>  <span class=\"co1\">// y &lt;- [1+x..n]</span><br/>    <span class=\"kw1\">return</span> mb<span class=\"br0\">(</span>r<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> y<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>z<span class=\"br0\">)</span> <span class=\"br0\">{</span>  <span class=\"co1\">// z &lt;- [1+y..n]</span><br/>\u00a0<br/>       <span class=\"kw1\">return</span> x <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> y <span class=\"sy0\">*</span> y <span class=\"sy0\">===</span> z <span class=\"sy0\">*</span> z <span class=\"sy0\">?</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">// LIBRARY FUNCTIONS</span><br/>\u00a0<br/>    <span class=\"co1\">// Monadic bind for lists</span><br/>    <span class=\"kw1\">function</span> mb<span class=\"br0\">(</span>xs<span class=\"sy0\">,</span> f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Monadic return for lists is simply lambda x -&gt; [x]</span><br/>    <span class=\"co1\">// as in [[x, y, z]]\u00a0: [] above</span><br/>\u00a0<br/>    <span class=\"co1\">// Integer range [m..n]</span><br/>    <span class=\"kw1\">function</span> r<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">Array</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> m <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> m <span class=\"sy0\">+</span> x<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 5, "block": "<pre class=\"text highlighted_source\">def triples(n):<br/>  range(1;n+1) as $x | range($x;n+1) as $y | range($y;n+1) as $z<br/>  | select($x*$x + $y*$y == $z*$z)<br/>  | [$x, $y, $z]\u00a0;<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>julia&gt; n = 20<br/>20<br/>\u00a0<br/>julia&gt; [(x, y, z) for x = 1:n for y = x:n for z = y:n if x^2 + y^2 == z^2]<br/>6-element Array{Tuple{Int64,Int64,Int64},1}:<br/> (3,4,5)<br/> (5,12,13)<br/> (6,8,10)<br/> (8,15,17)<br/> (9,12,15)<br/> (12,16,20)<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 14, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun pythagoreanTriples<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">flatMap</span> <span class=\"br0\">{</span> <br/>        x -<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>x..<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">flatMap</span> <span class=\"br0\">{</span> <br/>            y -<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>y..<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span> <span class=\"br0\">{</span><br/>                z -<span class=\"sy0\">&gt;</span>  x <span class=\"sy0\">*</span> x + y <span class=\"sy0\">*</span> y <span class=\"sy0\">==</span> z <span class=\"sy0\">*</span> z <br/>            <span class=\"br0\">}</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> Triple<span class=\"br0\">(</span>x, y, it<span class=\"br0\">)</span> <span class=\"br0\">}</span> <br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>pythagoreanTriples<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 11, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/lasso9<br/>\u00a0<br/>local(n = 20)<br/>local(triples = <br/>  with x in generateSeries(1, #n),<br/>       y in generateSeries(#x, #n),<br/>       z in generateSeries(#y, #n)<br/>    where #x*#x + #y*#y == #z*#z<br/>  select (:#x, #y, #z)<br/>)<br/>#triples-&gt;join('\\n')</pre>"}, {"lang": "Lua", "loc": 36, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/>LC<span class=\"sy0\">=</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/>LC<span class=\"sy0\">.</span>__index <span class=\"sy0\">=</span> LC<br/>\u00a0<br/><span class=\"kw1\">function</span> LC<span class=\"sy0\">:</span>new<span class=\"br0\">(</span>o<span class=\"br0\">)</span><br/>  o <span class=\"sy0\">=</span> o <span class=\"kw2\">or</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span>o<span class=\"sy0\">,</span> self<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> o<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> LC<span class=\"sy0\">:</span>add_iter<span class=\"br0\">(</span>func<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> prev_iter <span class=\"sy0\">=</span> self<span class=\"sy0\">.</span>iter<br/>  self<span class=\"sy0\">.</span>iter <span class=\"sy0\">=</span> <span class=\"kw3\">coroutine.wrap</span><span class=\"br0\">(</span><br/>    <span class=\"br0\">(</span>prev_iter <span class=\"sy0\">==</span> <span class=\"kw4\">nil</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> func<span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> arg <span class=\"kw2\">in</span> prev_iter <span class=\"kw1\">do</span> func<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> self<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> maybe_call<span class=\"br0\">(</span>maybe_func<span class=\"sy0\">,</span> arg<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw3\">type</span><span class=\"br0\">(</span>maybe_func<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"function\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> maybe_func<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> maybe_func<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> LC<span class=\"sy0\">:</span>range<span class=\"br0\">(</span>key<span class=\"sy0\">,</span> first<span class=\"sy0\">,</span> last<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> self<span class=\"sy0\">:</span>add_iter<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> value<span class=\"sy0\">=</span>maybe_call<span class=\"br0\">(</span>first<span class=\"sy0\">,</span> arg<span class=\"br0\">)</span><span class=\"sy0\">,</span> maybe_call<span class=\"br0\">(</span>last<span class=\"sy0\">,</span> arg<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      arg<span class=\"br0\">[</span>key<span class=\"br0\">]</span> <span class=\"sy0\">=</span> value<br/>      <span class=\"kw3\">coroutine.yield</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> LC<span class=\"sy0\">:</span>where<span class=\"br0\">(</span>pred<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> self<span class=\"sy0\">:</span>add_iter<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw1\">if</span> pred<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw3\">coroutine.yield</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">Select[Tuples[Range[100], 3], #1[[1]]^2 + #1[[2]]^2 == #1[[3]]^2 &amp;]</pre>"}, {"lang": "MATLAB / Octave", "loc": 5, "block": "<pre class=\"matlab highlighted_source\">N = <span class=\"nu0\">20</span><br/><span class=\"br0\">[</span>a,b<span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/meshgrid.html\"><span class=\"kw2\">meshgrid</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span>:N, <span class=\"nu0\">1</span>:N<span class=\"br0\">)</span>;<br/>c = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sqrt.html\"><span class=\"kw2\">sqrt</span></a><span class=\"br0\">(</span>a.^<span class=\"nu0\">2</span> + b.^<span class=\"nu0\">2</span><span class=\"br0\">)</span>; <br/><span class=\"br0\">[</span>x,y<span class=\"br0\">]</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/find.html\"><span class=\"kw2\">find</span></a><span class=\"br0\">(</span>c == <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fix.html\"><span class=\"kw2\">fix</span></a><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html\"><span class=\"kw2\">disp</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>x, y, <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sqrt.html\"><span class=\"kw2\">sqrt</span></a><span class=\"br0\">(</span>x.^<span class=\"nu0\">2</span> + y.^<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mercury", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>:- module pythtrip.<br/>:- interface.<br/>:- import_module io.<br/>:- import_module int.<br/>\u00a0<br/>:- type triple ---&gt; triple(int, int, int).<br/>\u00a0<br/>:- pred pythTrip(int::in,triple::out) is nondet.<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>:- import_module list.<br/>:- import_module solutions.<br/>:- import_module math.<br/>\u00a0<br/>pythTrip(Limit,triple(X,Y,Z))\u00a0:-<br/>    nondet_int_in_range(1,Limit,X),<br/>    nondet_int_in_range(X,Limit,Y),<br/>    nondet_int_in_range(Y,Limit,Z),<br/>    pow(Z,2) = pow(X,2) + pow(Y,2).<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>     solutions((pred(Triple::out) is nondet\u00a0:- pythTrip(20,Triple)),Result),<br/>     write(Result,!IO).<br/>\u00a0</pre>"}, {"lang": "Nemerle", "loc": 39, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>using System.Collections.Generic;<br/>\u00a0<br/>module Program<br/>{<br/>\u00a0<br/>    PythTriples(n\u00a0: int)\u00a0: list[int * int * int]<br/>    {<br/>        $[ (x, y, z) | x in [1..n], y in [x..n], z in [y..n], ((x**2) + (y**2)) == (z**2) ]<br/>    }<br/>\u00a0<br/>    GetPythTriples(n\u00a0: int)\u00a0: IEnumerable[int * int * int]<br/>    {<br/>        foreach (x in [1..n])<br/>        {<br/>            foreach (y in [x..n])<br/>            {<br/>                foreach (z in [y..n])<br/>                {<br/>                    when (((x**2) + (y**2)) == (z**2))<br/>                    {<br/>                        yield (x, y, z)<br/>                    }<br/>                }<br/>            }<br/>        }<br/>    }<br/>\u00a0<br/>    Main()\u00a0: void<br/>    {<br/>        WriteLine(\"Pythagorean triples up to x = 20: {0}\", PythTriples(20));<br/>\u00a0<br/>        foreach (triple in GetPythTriples(20))<br/>        {<br/>            Write(triple)<br/>        }<br/>    }<br/>}</pre>"}, {"lang": "Nim", "loc": 50, "block": "<pre class=\"text highlighted_source\">import macros<br/>\u00a0<br/>type ListComprehension = object<br/>var lc*: ListComprehension<br/>\u00a0<br/>macro `[]`*(lc: ListComprehension, x, t): expr =<br/>  expectLen(x, 3)<br/>  expectKind(x, nnkInfix)<br/>  expectKind(x[0], nnkIdent)<br/>  assert($x[0].ident == \"|\")<br/>\u00a0<br/>  result = newCall(<br/>    newDotExpr(<br/>      newIdentNode(\"result\"),<br/>      newIdentNode(\"add\")),<br/>    x[1])<br/>\u00a0<br/>  for i in countdown(x[2].len-1, 0):<br/>    let y = x[2][i]<br/>    expectKind(y, nnkInfix)<br/>    expectMinLen(y, 1)<br/>    if y[0].kind == nnkIdent and $y[0].ident == \"&lt;-\":<br/>      expectLen(y, 3)<br/>      result = newNimNode(nnkForStmt).add(y[1], y[2], result)<br/>    else:<br/>      result = newIfStmt((y, result))<br/>\u00a0<br/>  result = newNimNode(nnkCall).add(<br/>    newNimNode(nnkPar).add(<br/>      newNimNode(nnkLambda).add(<br/>        newEmptyNode(),<br/>        newEmptyNode(),<br/>        newEmptyNode(),<br/>        newNimNode(nnkFormalParams).add(<br/>          newNimNode(nnkBracketExpr).add(<br/>            newIdentNode(\"seq\"),<br/>            t)),<br/>        newEmptyNode(),<br/>        newEmptyNode(),<br/>        newStmtList(<br/>          newAssignment(<br/>            newIdentNode(\"result\"),<br/>            newNimNode(nnkPrefix).add(<br/>              newIdentNode(\"@\"),<br/>              newNimNode(nnkBracket))),<br/>          result))))<br/>\u00a0<br/>const n = 20<br/>echo lc[(x,y,z) | (x &lt;- 1..n, y &lt;- x..n, z &lt;- y..n, x*x + y*y == z*z),<br/>        tuple[a,b,c: int]]</pre>"}, {"lang": "OCaml", "loc": 2, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span>   <span class=\"br0\">[</span>? <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> x <span class=\"sy0\">|</span> x <span class=\"sy0\">&lt;-</span> <span class=\"nu0\">0</span> <span class=\"sy0\">--</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALmax_int\"><span class=\"kw3\">max_int</span></a> <span class=\"sy0\">;</span> x <span class=\"sy0\">*</span> x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;;</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> Enum<span class=\"sy0\">.</span>t <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>abstr<span class=\"sy0\">&gt;</span></pre>"}, {"lang": "Oz", "loc": 20, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">functor</span><br/><span class=\"kw1\">import</span><br/>   LazyList<br/>   Application<br/>   System<br/><span class=\"kw1\">define</span><br/>\u00a0<br/>   <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Pyth</span> N<span class=\"br0\">}</span><br/>      <span class=\"sy0\">&lt;&lt;</span>list <span class=\"br0\">[</span>X Y Z<span class=\"br0\">]</span> with<br/>\t X <span class=\"sy0\">&lt;-</span> <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>number 1 N 1<span class=\"br0\">}</span><br/>\t Y <span class=\"sy0\">&lt;-</span> <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>number X N 1<span class=\"br0\">}</span><br/>\t Z <span class=\"sy0\">&lt;-</span> <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>number Y N 1<span class=\"br0\">}</span><br/>\t where X<span class=\"sy0\">*</span>X <span class=\"sy0\">+</span> Y<span class=\"sy0\">*</span>Y <span class=\"sy0\">==</span> Z<span class=\"sy0\">*</span>Z<br/>      <span class=\"sy0\">&gt;&gt;</span><br/>   <span class=\"kw1\">end</span><br/>\u00a0<br/>   <span class=\"br0\">{</span>ForAll <span class=\"br0\">{</span>Pyth 20<span class=\"br0\">}</span> System<span class=\"sy0\">.</span>show<span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"br0\">{</span>Application<span class=\"sy0\">.</span>exit 0<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">f<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">[</span>v<span class=\"sy0\">|</span>v<span class=\"sy0\">&lt;-</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span>n<span class=\"sy0\">^</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">3</span><span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>i<span class=\"sy0\">\\</span>n<span class=\"sy0\">^</span><span class=\"br0\">(</span>j<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">norml2</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"nu1\">2</span><span class=\"sy0\">*</span>v<span class=\"br0\">[</span><span class=\"nu1\">3</span><span class=\"br0\">]</span><span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"br0\">]</span></pre>"}, {"lang": "Perl", "loc": 4, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> triples <span class=\"br0\">(</span><span class=\"co5\">$)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$x</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"re0\">$y</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"co5\">$_</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"br0\">}</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$n</span> <span class=\"br0\">}</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$n</span> <span class=\"br0\">}</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 8, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span><br/>gather <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$n</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$x</span> <span class=\"br0\">{</span><br/>         <span class=\"kw1\">for</span> <span class=\"re0\">$x</span><span class=\"sy0\">..</span><span class=\"re0\">$n</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$y</span> <span class=\"br0\">{</span><br/>           <span class=\"kw1\">for</span> <span class=\"re0\">$y</span><span class=\"sy0\">..</span><span class=\"re0\">$n</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$z</span> <span class=\"br0\">{</span><br/>             take <span class=\"re0\">$x</span><span class=\"sy0\">,</span><span class=\"re0\">$y</span><span class=\"sy0\">,</span><span class=\"re0\">$z</span> <span class=\"kw1\">if</span> <span class=\"re0\">$x</span><span class=\"sy0\">*</span><span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$y</span><span class=\"sy0\">*</span><span class=\"re0\">$y</span> <span class=\"sy0\">==</span> <span class=\"re0\">$z</span><span class=\"sy0\">*</span><span class=\"re0\">$z</span><span class=\"sy0\">;</span><br/>           <span class=\"br0\">}</span><br/>         <span class=\"br0\">}</span><br/>       <span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 10, "block": "<pre class=\"text highlighted_source\">global function new_dict(integer pool_only=0)<br/>global procedure destroy_dict(integer tid, integer justclear=0)<br/>global procedure setd(object key, object data, integer tid=1)<br/>global function getd(object key, integer tid=1)<br/>global procedure destroy_dict(integer tid, integer justclear=0)<br/>global function getd_index(object key, integer tid=1)<br/>global function getd_by_index(integer node, integer tid=1)<br/>global procedure deld(object key, integer tid=1)<br/>global procedure traverse_dict(integer rid, object user_data=0, integer tid=1)<br/>global function dict_size(integer tid=1)</pre>"}, {"lang": "PicoLisp", "loc": 13, "block": "<pre class=\"text highlighted_source\">(de pythag (N)<br/>   (job '((X . 1) (Y . 1) (Z . 0))<br/>      (loop<br/>         (when (&gt; (inc 'Z) N)<br/>            (when (&gt; (inc 'Y) N)<br/>               (setq Y (inc 'X)) )<br/>            (setq Z Y) )<br/>         (T (&gt; X N))<br/>         (T (= (+ (* X X) (* Y Y)) (* Z Z))<br/>            (list X Y Z) ) ) ) )<br/>\u00a0<br/>(while (pythag 20)<br/>   (println @) )</pre>"}, {"lang": "Prolog", "loc": 33, "block": "<pre class=\"prolog highlighted_source\"><span class=\"co1\">% We need operators</span><br/><span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">op</span></a><span class=\"br0\">(</span><span class=\"nu0\">700</span><span class=\"sy4\">,</span> xfx<span class=\"sy4\">,</span> <span class=\"sy6\">&lt;</span><span class=\"sy3\">-</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/><span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">op</span></a><span class=\"br0\">(</span><span class=\"nu0\">450</span><span class=\"sy4\">,</span> xfx<span class=\"sy4\">,</span> <span class=\"sy4\">..</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/><span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">op</span></a><span class=\"br0\">(</span><span class=\"nu0\">1100</span><span class=\"sy4\">,</span> yfx<span class=\"sy4\">,</span> <span class=\"sy5\">&amp;</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% use for explicit list usage</span><br/>my_bind<span class=\"br0\">(</span>V<span class=\"sy4\">,</span> <span class=\"br0\">[</span>H<span class=\"sy5\">|</span>_<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> V <span class=\"sy6\">=</span> H<span class=\"sy4\">.</span><br/>my_bind<span class=\"br0\">(</span>V<span class=\"sy4\">,</span> <span class=\"br0\">[</span>_<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> my_bind<span class=\"br0\">(</span>V<span class=\"sy4\">,</span> T<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% we need to define the intervals of numbers</span><br/>Vs <span class=\"sy6\">&lt;</span><span class=\"sy3\">-</span> M<span class=\"sy4\">..</span>N <span class=\"sy1\">:-</span><br/>        <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">integer</span></a><span class=\"br0\">(</span>M<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">integer</span></a><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tM <span class=\"sy6\">=&lt;</span> N<span class=\"sy4\">,</span><br/>\tbetween<span class=\"br0\">(</span>M<span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> Vs<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% for explicit list comprehension like Vs &lt;- [1,2,3]</span><br/>Vs <span class=\"sy6\">&lt;</span><span class=\"sy3\">-</span> Xs <span class=\"sy1\">:-</span><br/>\tis_list<span class=\"br0\">(</span>Xs<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmy_bind<span class=\"br0\">(</span>Vs<span class=\"sy4\">,</span> Xs<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% finally we define list comprehension</span><br/><span class=\"co1\">% prototype is Vs &lt;- {Var, Dec, Pred} where</span><br/><span class=\"co1\">% Var is the list of variables to output</span><br/><span class=\"co1\">% Dec is the list of intervals of the variables</span><br/><span class=\"co1\">% Pred is the list of predicates</span><br/>Vs <span class=\"sy6\">&lt;</span><span class=\"sy3\">-</span> <span class=\"br0\">{</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a> <span class=\"sy5\">&amp;</span> Dec <span class=\"sy5\">&amp;</span> Pred<span class=\"br0\">}</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">findall</span></a><span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"sy4\">,</span>  maplist<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Dec<span class=\"sy4\">,</span> Pred<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Vs<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/><span class=\"co1\">% for list comprehension without Pred</span><br/>Vs <span class=\"sy6\">&lt;</span><span class=\"sy3\">-</span> <span class=\"br0\">{</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a> <span class=\"sy5\">&amp;</span> Dec<span class=\"br0\">}</span> <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">findall</span></a><span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Var</span></a><span class=\"sy4\">,</span> maplist<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">call</span></a><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Dec<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Vs<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 1, "block": "<pre class=\"python highlighted_source\"><span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">,</span>z<span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>n+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>n+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> z <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span>y<span class=\"sy0\">,</span>n+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> x**<span class=\"nu0\">2</span> + y**<span class=\"nu0\">2</span> <span class=\"sy0\">==</span> z**<span class=\"nu0\">2</span><span class=\"br0\">]</span></pre>"}, {"lang": "R", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>x = (0:10)<br/>&gt; x^2<br/> [1]   0   1   4   9  16  25  36  49  64  81 100<br/>&gt; Reduce(function(y,z){return (y+z)},x)<br/>[1] 55<br/>&gt; x[x[(0:length(x))]\u00a0%% 2==0]<br/>[1]  0  2  4  6  8 10<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(for*/list ([x (in-range 1 21)]<br/>            [y (in-range x 21)]<br/>            [z (in-range y 21)]<br/>            #:when (= (+ (* x x) (* y y)) (* z z)))<br/>  (list x y z))<br/>\u00a0</pre>"}, {"lang": "Rascal", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>public list[tuple[int, int, int]]  PythTriples(int n) = [&lt;a, b, c&gt; | a &lt;- [1..n], b &lt;- [1..n], c &lt;- [1 .. n], a*a + b*b == c*c];<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 17, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program displays a vertical list of Pythagorean triples up to a specified number.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n <span class=\"sy0\">.</span>                                    <span class=\"coMULTI\">/*obtain optional argument from the CL.*/</span><br/><span class=\"kw1\">if</span> n==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> n==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> n=<span class=\"nu0\">100</span>                    <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">'Pythagorean triples  (a\u00b2 + b\u00b2 = c\u00b2,   c \u2264'</span>  n<span class=\"st0\">\"):\"</span>     <span class=\"coMULTI\">/*display the list's title. */</span><br/>$=                                               <span class=\"coMULTI\">/*assign a  null  to the triples list. */</span><br/>            <span class=\"kw1\">do</span>     a=<span class=\"nu0\">1</span>   <span class=\"kw2\">for</span> n-<span class=\"nu0\">2</span>;  aa=a<span class=\"sy0\">*</span>a        <span class=\"coMULTI\">/*Note:  A*A is faster than A**2, but  */</span><br/>              <span class=\"kw1\">do</span>   b=a+<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> n-<span class=\"nu0\">1</span>;  aabb=aa + b<span class=\"sy0\">*</span>b <span class=\"coMULTI\">/*                     \u00b7\u00b7\u00b7 not by much.*/</span><br/>                <span class=\"kw1\">do</span> c=b+<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> n<br/>                <span class=\"kw1\">if</span> aabb==c<span class=\"sy0\">*</span>c  <span class=\"kw3\">then</span> $=$  <span class=\"st0\">'{'</span>a<span class=\"st0\">\",\"</span>   <span class=\"sy0\">||</span>   b<span class=\"st0\">','</span>c<span class=\"st0\">\"}\"</span><br/>                <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span><br/>              <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*b*/</span><br/>            <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*a*/</span><br/>#=<span class=\"kw6\">words</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span><br/>            <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #<br/>            <span class=\"kw1\">say</span>  <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span>      <span class=\"kw6\">word</span><span class=\"br0\">(</span>$, j<span class=\"br0\">)</span>    <span class=\"coMULTI\">/*display  a  member  of the list,     */</span><br/>            <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*j*/</span>                      <span class=\"coMULTI\">/* [\u2191]   list the members vertically.  */</span><br/><span class=\"kw1\">say</span> #  <span class=\"st0\">'members listed.'</span>                         <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>for  x = 1 to 20 <br/>     for  y = x to 20 <br/>          for  z = y to 20<br/>               if pow(x,2) + pow(y,2) = pow(z,2)<br/>                  see \"[\" + x + \",\" + y + \",\" + z + \"]\" + nl ok<br/>          next <br/>     next<br/>next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 9, "block": "<pre class=\"ruby highlighted_source\">n = <span class=\"nu0\">20</span><br/>\u00a0<br/><span class=\"co1\"># select Pythagorean triplets</span><br/>r = <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">flat_map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>x<span class=\"sy0\">|</span><br/>       <span class=\"br0\">(</span>x..<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">flat_map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>y<span class=\"sy0\">|</span><br/>         <span class=\"br0\">(</span>y..<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">flat_map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>z<span class=\"sy0\">|</span><br/>           <span class=\"br0\">[</span><span class=\"br0\">[</span>x, y, z<span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">keep_if</span> <span class=\"br0\">{</span> x <span class=\"sy0\">*</span> x <span class=\"sy0\">+</span> y <span class=\"sy0\">*</span> y == z <span class=\"sy0\">*</span> z <span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">p</span> r <span class=\"co1\"># print the array _r_</span></pre>"}, {"lang": "Run BASIC", "loc": 7, "block": "<pre class=\"text highlighted_source\">for  x = 1 to 20 <br/> for  y = x to 20 <br/>  for  z = y to 20<br/>   if x^2 + y^2 = z^2 then  print \"[\";x;\",\";y;\",\";z;\"]\"<br/>  next z<br/> next y<br/>next x</pre>"}, {"lang": "Scala", "loc": 6, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> pythagoranTriangles<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">{</span><br/>  x <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to <span class=\"nu0\">21</span><br/>  y <span class=\"sy0\">&lt;</span>- x to <span class=\"nu0\">21</span><br/>  z <span class=\"sy0\">&lt;</span>- y to <span class=\"nu0\">21</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> x <span class=\"sy0\">*</span> x + y <span class=\"sy0\">*</span> y <span class=\"sy0\">==</span> z <span class=\"sy0\">*</span> z<br/><span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> <span class=\"br0\">(</span>x, y, z<span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 7, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>list<span class=\"sy0\">-</span>ec <span class=\"br0\">(</span>:range x <span class=\"nu0\">1</span> <span class=\"nu0\">21</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>:range y x <span class=\"nu0\">21</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>:range z y <span class=\"nu0\">21</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> z z<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> x x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> y y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">list</span> x y z<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">var n = <span class=\"nu0\">20</span><br/>say gather <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"br0\">(</span>x .. <span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>           <span class=\"kw1\">for</span> z <span class=\"kw1\">in</span> <span class=\"br0\">(</span>y .. <span class=\"me1\">n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>             take<span class=\"br0\">(</span><span class=\"br0\">[</span>x,y,z<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"sy0\">*</span>x <span class=\"sy0\">+</span> y<span class=\"sy0\">*</span>y == z<span class=\"sy0\">*</span>z<span class=\"br0\">)</span><br/>           <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Smalltalk", "loc": 18, "block": "<pre class=\"smalltalk highlighted_source\">\u00a0<br/>|<span class=\"re3\"> test </span>|<br/>\u00a0<br/><span class=\"re6\">test</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">a</span>\u00a0:<span class=\"re5\">b</span>\u00a0:<span class=\"re5\">c</span> | a*<span class=\"re5\">a</span>+<span class=\"br0\">(</span><span class=\"re5\">b</span>*<span class=\"re5\">b</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"re5\">c</span>*<span class=\"re5\">c</span><span class=\"br0\">)</span> <span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"re5\">1</span> to: <span class=\"re5\">20</span><span class=\"br0\">)</span> <br/>    combinations: <span class=\"re5\">3</span> atATimeDo: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">x</span> | <br/>        <span class=\"br0\">(</span><span class=\"re5\">test</span> valueWithArguments: <span class=\"re5\">x</span><span class=\"br0\">)</span> <br/>            ifTrue: <span class=\"br0\">[</span> <span class=\"st0\">':-)'</span> logCr: <span class=\"re5\">x</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"coMULTI\">\"output on Transcript:<br/>#(3 4 5)<br/>#(5 12 13)<br/>#(6 8 10)<br/>#(8 15 17)<br/>#(9 12 15)<br/>#(12 16 20)\"</span><br/>\u00a0</pre>"}, {"lang": "Stata", "loc": 8, "block": "<pre class=\"text highlighted_source\">function grid(n,p) {<br/>\treturn(colshape(J(p,1,1..n)',1),J(n,1,1::p))<br/>}<br/>\u00a0<br/>n = 20<br/>a = grid(n,n)<br/>a = a,sqrt(a[.,1]:^2+a[.,2]:^2)<br/>a[selectindex(floor(a[.,3]):==a[.,3]\u00a0:&amp; a[.,3]:&lt;=n),]</pre>"}, {"lang": "SuperCollider", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>var pyth = { |n|<br/>  all {: [x,y,z],<br/>    x &lt;- (1..n),<br/>    y &lt;- (x..n),<br/>    z &lt;- (y..n),<br/>    (x**2) + (y**2) == (z**2)<br/>    }<br/>};<br/>\u00a0<br/>pyth.(20) // example call</pre>"}, {"lang": "Tcl", "loc": 45, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"co1\"># from http://wiki.tcl.tk/12574 </span><br/><span class=\"kw1\">proc</span> lcomp <span class=\"br0\">{</span>expression args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Check the number of arguments.</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$args</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">error</span> <span class=\"st0\">\"wrong # args: should be <span class=\"es0\">\\\"</span>lcomp expression var1 list1<span class=\"es0\">\\</span><br/>           \u00a0?... varN listN?\u00a0?condition?<span class=\"es0\">\\\"</span>\"</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Extract condition from $args, or use default.</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$args</span><span class=\"br0\">]</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> condition <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$args</span> end<span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> args <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$args</span> <span class=\"nu0\">0</span> end-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> condition <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Collect all var/list pairs and store in reverse order.</span><br/>    <span class=\"kw1\">set</span> varlst <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>var lst<span class=\"br0\">}</span> <span class=\"re0\">$args</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> varlst <span class=\"br0\">[</span><span class=\"kw2\">concat</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$var</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$lst</span><span class=\"br0\">]</span> <span class=\"re0\">$varlst</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Actual command to be executed, repeatedly.</span><br/>    <span class=\"kw1\">set</span> script <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span><span class=\"kw2\">subst</span> <span class=\"re0\">$expression</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># If necessary, make $script conditional.</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$condition</span> ne <span class=\"st0\">\"1\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> script <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw1\">if</span> <span class=\"re0\">$condition</span> <span class=\"re0\">$script</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Apply layers of foreach constructs around $script.</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>var lst<span class=\"br0\">}</span> <span class=\"re0\">$varlst</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> script <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw1\">foreach</span> <span class=\"re0\">$var</span> <span class=\"re0\">$lst</span> <span class=\"re0\">$script</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Do it!</span><br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><span class=\"re0\">$script</span> <span class=\"sy0\">;</span><span class=\"co1\"># Change to \"eval $script\" if using Tcl 8.4 or older.</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> range <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> <span class=\"nu0\">11</span> <span class=\"nu0\">12</span> <span class=\"nu0\">13</span> <span class=\"nu0\">14</span> <span class=\"nu0\">15</span> <span class=\"nu0\">16</span> <span class=\"nu0\">17</span> <span class=\"nu0\">18</span> <span class=\"nu0\">19</span> <span class=\"nu0\">20</span><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>lcomp <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"re0\">$y</span> <span class=\"re0\">$z</span><span class=\"br0\">}</span> x <span class=\"re0\">$range</span> y <span class=\"re0\">$range</span> z <span class=\"re0\">$range</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$x</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> + <span class=\"re0\">$y</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> == <span class=\"re0\">$z</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span></pre>"}, {"lang": "TI-89 BASIC", "loc": 2, "block": "<pre class=\"text highlighted_source\">{1, 2, 3, 4} \u2192 a<br/>seq(a[i]^2, i, 1, dim(a))</pre>"}, {"lang": "Visual Basic .NET", "loc": 13, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Module</span> ListComp<br/>    <span class=\"kw1\">Sub</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Dim</span> ts <span class=\"sy0\">=</span> <span class=\"kw5\">From</span> a <span class=\"kw1\">In</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span> _<br/>                 <span class=\"kw5\">From</span> b <span class=\"kw1\">In</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span>a, <span class=\"nu0\">21</span> <span class=\"sy0\">-</span> a<span class=\"br0\">)</span> _<br/>                 <span class=\"kw5\">From</span> c <span class=\"kw1\">In</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span>b, <span class=\"nu0\">21</span> <span class=\"sy0\">-</span> b<span class=\"br0\">)</span> _<br/>                 <span class=\"kw5\">Where</span> a <span class=\"sy0\">*</span> a <span class=\"sy0\">+</span> b <span class=\"sy0\">*</span> b <span class=\"sy0\">=</span> c <span class=\"sy0\">*</span> c _<br/>                 <span class=\"kw1\">Select</span> <span class=\"kw1\">New</span> <span class=\"kw1\">With</span> <span class=\"br0\">{</span> a, b, c <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">For</span> <span class=\"kw1\">Each</span> t <span class=\"kw1\">In</span> ts<br/>            System<span class=\"sy0\">.</span><span class=\"me1\">Console</span><span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}, {1}, {2}\"</span>, t<span class=\"sy0\">.</span><span class=\"me1\">a</span>, t<span class=\"sy0\">.</span><span class=\"me1\">b</span>, t<span class=\"sy0\">.</span><span class=\"me1\">c</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Module</span></pre>"}, {"lang": "Visual Prolog", "loc": 28, "block": "<pre class=\"visualprolog highlighted_source\">\u00a0<br/><span class=\"re1\">implement</span> main<br/>    <span class=\"kw1\">open</span> core, std<br/>\u00a0<br/><span class=\"kw1\">domains</span><br/>    pythtrip <span class=\"sy0\">=</span> pt<span class=\"br0\">(</span>integer, integer, integer<span class=\"br0\">)</span>.<br/>\u00a0<br/><span class=\"re1\">class</span> <span class=\"kw1\">predicates</span><br/>    pythTrips <span class=\"sy0\">:</span> <span class=\"br0\">(</span>integer<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> pythtrip <span class=\"kw2\">nondeterm</span> <span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<br/>\u00a0<br/><span class=\"kw1\">clauses</span><br/>    pythTrips<span class=\"br0\">(</span><span class=\"re0\">Limit</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> pt<span class=\"br0\">(</span><span class=\"re0\">X</span>,<span class=\"re0\">Y</span>,<span class=\"re0\">Z</span><span class=\"br0\">)</span> <span class=\"sy0\">:-</span><br/>        <span class=\"re0\">X</span> <span class=\"sy0\">=</span> fromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"re0\">Limit</span><span class=\"br0\">)</span>,<br/>        <span class=\"re0\">Y</span> <span class=\"sy0\">=</span> fromTo<span class=\"br0\">(</span><span class=\"re0\">X</span>,<span class=\"re0\">Limit</span><span class=\"br0\">)</span>,<br/>        <span class=\"re0\">Z</span> <span class=\"sy0\">=</span> fromTo<span class=\"br0\">(</span><span class=\"re0\">Y</span>,<span class=\"re0\">Limit</span><span class=\"br0\">)</span>,<br/>        <span class=\"re0\">Z</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"re0\">X</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"re0\">Y</span><span class=\"sy0\">^</span><span class=\"nu0\">2</span>.<br/>\u00a0<br/>    run<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:-</span><br/>        console<span class=\"sy0\">::</span><span class=\"me1\">init</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>        <span class=\"re0\">Triples</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"re0\">X</span> || <span class=\"re0\">X</span> <span class=\"sy0\">=</span> pythTrips<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"br0\">]</span>,<br/>        console<span class=\"sy0\">::</span><span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"re0\">Triples</span><span class=\"br0\">)</span>,<br/>        <span class=\"re0\">Junk</span> <span class=\"sy0\">=</span> console<span class=\"sy0\">::</span><span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>        succeed<span class=\"br0\">(</span><span class=\"br0\">)</span>. <br/><span class=\"re1\">end implement</span> main<br/>\u00a0<br/><span class=\"kw1\">goal</span><br/>    mainExe<span class=\"sy0\">::</span><span class=\"me1\">run</span><span class=\"br0\">(</span>main<span class=\"sy0\">::</span><span class=\"me1\">run</span><span class=\"br0\">)</span>.<br/>\u00a0</pre>"}, {"lang": "Wrapl", "loc": 1, "block": "<pre class=\"text highlighted_source\">ALL WITH x &lt;- 1:to(n), y &lt;- x:to(n), z &lt;- y:to(n) DO (x^2 + y^2 = z^2) &amp; [x, y, z];</pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">var n=20;<br/>[[(x,y,z); [1..n]; {[x..n]}; {[y..n]},{ x*x + y*y == z*z }; _]]<br/>//--&gt;L(L(3,4,5),L(5,12,13),L(6,8,10),L(8,15,17),L(9,12,15),L(12,16,20))</pre>"}]}