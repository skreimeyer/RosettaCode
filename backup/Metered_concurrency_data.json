{"task": "Metered_concurrency", "blocks": [{"lang": "Ada", "loc": 9, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">package</span> Semaphores <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">protected</span> <span class=\"kw3\">type</span> Counting_Semaphore<span class=\"br0\">(</span>Max\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">entry</span> Acquire;<br/>      <span class=\"kw3\">procedure</span> Release;<br/>      <span class=\"kw3\">function</span> Count <span class=\"kw1\">return</span> Natural;<br/>   <span class=\"kw3\">private</span><br/>      Lock_Count\u00a0: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/>   <span class=\"kw1\">end</span> Counting_Semaphore;<br/><span class=\"kw1\">end</span> Semaphores;</pre>"}, {"lang": "ALGOL 68", "loc": 13, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw3\">SEMA</span> sem <span class=\"sy1\">=</span> <span class=\"kw8\">LEVEL</span> 1<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> job <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>   <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\" Job \"</span>d<span class=\"st0\">\" acquired Semaphore ...\"</span>$<span class=\"sy1\">,</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw2\">TO</span> 10000000 <span class=\"kw2\">DO</span> <span class=\"kw7\">SKIP</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>   <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\" Job \"</span>d<span class=\"st0\">\" releasing Semaphore\"</span>l$<span class=\"sy1\">,</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw2\">PAR</span> <span class=\"br0\">(</span><br/>  <span class=\"br0\">(</span> <span class=\"kw8\">DOWN</span> sem <span class=\"sy1\">;</span> job<span class=\"br0\">(</span>1<span class=\"br0\">)</span> <span class=\"sy1\">;</span> <span class=\"kw8\">UP</span> sem <span class=\"br0\">)</span> <span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span> <span class=\"kw8\">DOWN</span> sem <span class=\"sy1\">;</span> job<span class=\"br0\">(</span>2<span class=\"br0\">)</span> <span class=\"sy1\">;</span> <span class=\"kw8\">UP</span> sem <span class=\"br0\">)</span> <span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span> <span class=\"kw8\">DOWN</span> sem <span class=\"sy1\">;</span> job<span class=\"br0\">(</span>3<span class=\"br0\">)</span> <span class=\"sy1\">;</span> <span class=\"kw8\">UP</span> sem <span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "BBC BASIC", "loc": 61, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$+\"TIMERLIB\"<br/>      DIM tID%(6)<br/>\u00a0<br/>      REM Two workers may be concurrent<br/>      DIM Semaphore%(2)<br/>\u00a0<br/>      tID%(6) = FN_ontimer(11, PROCtimer6, 1)<br/>      tID%(5) = FN_ontimer(10, PROCtimer5, 1)<br/>      tID%(4) = FN_ontimer(11, PROCtimer4, 1)<br/>      tID%(3) = FN_ontimer(10, PROCtimer3, 1)<br/>      tID%(2) = FN_ontimer(11, PROCtimer2, 1)<br/>      tID%(1) = FN_ontimer(10, PROCtimer1, 1)<br/>\u00a0<br/>      ON CLOSE PROCcleanup\u00a0: QUIT<br/>      ON ERROR PRINT REPORT$\u00a0: PROCcleanup\u00a0: END<br/>\u00a0<br/>      sc% = 0<br/>      REPEAT<br/>        oldsc% = sc%<br/>        sc% = -SUM(Semaphore%())<br/>        IF sc%&lt;&gt;oldsc% PRINT \"Semaphore count now \";sc%<br/>        WAIT 0<br/>      UNTIL FALSE<br/>\u00a0<br/>      DEF PROCtimer1\u00a0: PROCtask(1)\u00a0: ENDPROC<br/>      DEF PROCtimer2\u00a0: PROCtask(2)\u00a0: ENDPROC<br/>      DEF PROCtimer3\u00a0: PROCtask(3)\u00a0: ENDPROC<br/>      DEF PROCtimer4\u00a0: PROCtask(4)\u00a0: ENDPROC<br/>      DEF PROCtimer5\u00a0: PROCtask(5)\u00a0: ENDPROC<br/>      DEF PROCtimer6\u00a0: PROCtask(6)\u00a0: ENDPROC<br/>\u00a0<br/>      DEF PROCtask(n%)<br/>      LOCAL i%, temp%<br/>      PRIVATE delay%(), sem%()<br/>      DIM delay%(6), sem%(6)<br/>      IF delay%(n%) THEN<br/>        delay%(n%) -= 1<br/>        IF delay%(n%) = 0 THEN<br/>          SWAP Semaphore%(sem%(n%)),temp%<br/>          delay%(n%) = -1<br/>          PRINT \"Task \"\u00a0; n% \" released semaphore\"<br/>        ENDIF<br/>        ENDPROC<br/>      ENDIF<br/>      FOR i% = 1 TO DIM(Semaphore%(),1)<br/>        temp% = TRUE<br/>        SWAP Semaphore%(i%),temp%<br/>        IF NOT temp% EXIT FOR<br/>      NEXT<br/>      IF temp% THEN ENDPROC\u00a0: REM Waiting to acquire semaphore<br/>      sem%(n%) = i%<br/>      delay%(n%) = 200<br/>      PRINT \"Task \"; n% \" acquired semaphore\"<br/>      ENDPROC<br/>\u00a0<br/>      DEF PROCcleanup<br/>      LOCAL i%<br/>      FOR i% = 1 TO 6<br/>        PROC_killtimer(tID%(i%))<br/>      NEXT<br/>      ENDPROC</pre>"}, {"lang": "C", "loc": 51, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;semaphore.h&gt;</span><br/><span class=\"co2\">#include &lt;pthread.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;unistd.h&gt;</span><br/>\u00a0<br/>sem_t sem<span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* the whole point of a semaphore is that you don't count it:<br/> * p/v are atomic.  Unless it's locked while you are doing<br/> * something with the count, the value is only informative */</span><br/><span class=\"co2\">#define getcount() count</span><br/><span class=\"kw4\">void</span> acquire<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tsem_wait<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>sem<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tcount<span class=\"sy0\">--;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> release<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tcount<span class=\"sy0\">++;</span><br/>\tsem_post<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>sem<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span><span class=\"sy0\">*</span> work<span class=\"br0\">(</span><span class=\"kw4\">void</span> <span class=\"sy0\">*</span> id<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>i<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tacquire<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"#%d acquired sema at\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>id<span class=\"sy0\">,</span> getcount<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tusleep<span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">4000000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* sleep 2 sec on average */</span><br/>\t\trelease<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tusleep<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* effectively yield */</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tpthread_t th<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> ids<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tsem_init<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>sem<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> count<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--;</span><span class=\"br0\">)</span> pthread_create<span class=\"br0\">(</span>th <span class=\"sy0\">+</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> work<span class=\"sy0\">,</span> ids <span class=\"sy0\">+</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--;</span><span class=\"br0\">)</span> pthread_join<span class=\"br0\">(</span>th<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"all workers done<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> sem_destroy<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>sem<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 29, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Threading</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Threading.Tasks</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> RosettaCode<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">internal</span> <span class=\"kw1\">sealed</span> <span class=\"kw4\">class</span> Program<br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Worker<span class=\"br0\">(</span><span class=\"kw4\">object</span> arg, <span class=\"kw4\">int</span> id<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">var</span> sem <span class=\"sy0\">=</span> arg <span class=\"kw1\">as</span> SemaphoreSlim<span class=\"sy0\">;</span><br/>      sem<span class=\"sy0\">.</span><span class=\"me1\">Wait</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Thread {0} has a semaphore &amp; is now working.\"</span>, id<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Thread<span class=\"sy0\">.</span><span class=\"me1\">Sleep</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"#{0} done.\"</span>, id<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      sem<span class=\"sy0\">.</span><span class=\"me1\">Release</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw1\">var</span> semaphore <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> SemaphoreSlim<span class=\"br0\">(</span>Environment<span class=\"sy0\">.</span><span class=\"me1\">ProcessorCount</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span>, <span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">MaxValue</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"You have {0} processors availiabe\"</span>, Environment<span class=\"sy0\">.</span><span class=\"me1\">ProcessorCount</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"This program will use {0} semaphores.<span class=\"es0\">\\n</span>\"</span>, semaphore<span class=\"sy0\">.</span><span class=\"me1\">CurrentCount</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      Parallel<span class=\"sy0\">.</span><span class=\"kw1\">For</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, Environment<span class=\"sy0\">.</span><span class=\"me1\">ProcessorCount</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span>, y <span class=\"sy0\">=&gt;</span> Worker<span class=\"br0\">(</span>semaphore, y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 49, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">module</span> meteredconcurrency <span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span> <span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">thread</span> <span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">c</span>.<span class=\"me1\">time</span> <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Semaphore <span class=\"br0\">{</span><br/>  <span class=\"kw4\">private</span> <span class=\"kw4\">int</span> lockCnt<span class=\"sy0\">,</span> maxCnt <span class=\"sy0\">;</span><br/>  <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> count<span class=\"br0\">)</span> <span class=\"br0\">{</span> maxCnt <span class=\"sy0\">=</span> lockCnt <span class=\"sy0\">=</span> count <span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>  <span class=\"kw4\">void</span> acquire<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>lockCnt <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> maxCnt <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Negative Lock or Zero init. Lock\"</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>lockCnt <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      Thread.<span class=\"me1\">getThis</span>.<span class=\"me1\">yield</span> <span class=\"sy0\">;</span> <span class=\"co1\">// let other threads release lock</span><br/>    <span class=\"kw4\">synchronized</span> lockCnt<span class=\"sy0\">--</span> <span class=\"sy0\">;</span>  <br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw4\">void</span> release<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">synchronized</span> <br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>lockCnt <span class=\"sy0\">&lt;</span> maxCnt<span class=\"br0\">)</span><br/>        lockCnt<span class=\"sy0\">++</span> <span class=\"sy0\">;</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Release lock before acquire\"</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span>    <br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw4\">int</span> getCnt<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw4\">synchronized</span> <span class=\"kw1\">return</span> lockCnt <span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Worker <span class=\"sy0\">:</span> Thread <span class=\"br0\">{</span><br/>  <span class=\"kw4\">private</span> <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> Id <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">;</span><br/>  <span class=\"kw4\">private</span> Semaphore lock <span class=\"sy0\">;</span><br/>  <span class=\"kw4\">private</span> <span class=\"kw4\">int</span> myId <span class=\"sy0\">;</span><br/>  <span class=\"kw2\">this</span> <span class=\"br0\">(</span>Semaphore l<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">super</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span> lock <span class=\"sy0\">=</span> l <span class=\"sy0\">;</span> myId <span class=\"sy0\">=</span> Id<span class=\"sy0\">++</span> <span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"kw4\">override</span> <span class=\"kw4\">int</span> run<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    lock.<span class=\"me1\">acquire</span> <span class=\"sy0\">;</span>  <br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"Worker\u00a0%d got a lock(%d left).\"</span><span class=\"sy0\">,</span> myId<span class=\"sy0\">,</span> lock.<span class=\"me1\">getCnt</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>    msleep<span class=\"br0\">(</span><span class=\"nu0\">2000</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span>  <span class=\"co1\">// wait 2.0 sec</span><br/>    lock.<span class=\"me1\">release</span> <span class=\"sy0\">;</span> <br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"Worker\u00a0%d released a lock(%d left).\"</span><span class=\"sy0\">,</span> myId<span class=\"sy0\">,</span> lock.<span class=\"me1\">getCnt</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  Worker<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> crew <span class=\"sy0\">;</span><br/>  Semaphore lock <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Semaphore<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"kw2\">inout</span> c <span class=\"sy0\">;</span> crew<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>c <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Worker<span class=\"br0\">(</span>lock<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">start</span> <span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"kw2\">inout</span> c <span class=\"sy0\">;</span> crew<span class=\"br0\">)</span><br/>    c.<span class=\"me1\">wait</span> <span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 39, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeSemaphore<span class=\"br0\">(</span>maximum <span class=\"sy0\">:</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/int\"><span class=\"kw6\">int</span></a> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> current <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> waiters <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;</span>elib<span class=\"sy0\">:</span>vat.<span class=\"me1\">makeQueue</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> notify<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>current <span class=\"sy0\">&lt;</span> maximum <span class=\"sy0\">&amp;&amp;</span> waiters.<span class=\"me1\">hasMoreElements</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            current <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>            waiters.<span class=\"me1\">optDequeue</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">resolve</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> released<span class=\"br0\">)</span><br/>            when <span class=\"br0\">(</span>released<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>                current <span class=\"sy0\">-=</span> <span class=\"nu0\">1</span><br/>                notify<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> semaphore <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> acquire<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            waiters.<span class=\"me1\">enqueue</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> response<span class=\"br0\">)</span><br/>            notify<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            return response<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> count<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return current <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    return semaphore<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> work<span class=\"br0\">(</span>label<span class=\"sy0\">,</span> interval<span class=\"sy0\">,</span> semaphore<span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/timer\"><span class=\"kw7\">timer</span></a><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    when <span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> releaser <span class=\"sy0\">:=</span> semaphore <span class=\"sy0\">&lt;-</span> acquire<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">`$label: I have acquired the lock.`</span><span class=\"br0\">)</span><br/>        releaser.<span class=\"me1\">resolve</span><span class=\"br0\">(</span><br/>            <a href=\"http://wiki.erights.org/wiki/timer\"><span class=\"kw7\">timer</span></a>.<span class=\"me1\">whenPast</span><span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/timer\"><span class=\"kw7\">timer</span></a>.<span class=\"me1\">now</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> interval<span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> <span class=\"br0\">{</span><br/>                <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"st0\">`$label: I will have released the lock.`</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> semaphore <span class=\"sy0\">:=</span> makeSemaphore<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> i <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> <span class=\"nu0\">1</span>..<span class=\"nu0\">5</span> <span class=\"br0\">{</span><br/>    work<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">2000</span><span class=\"sy0\">,</span> semaphore<span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/timer\"><span class=\"kw7\">timer</span></a><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 15, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>require 'tasks<span class=\"br0\">)</span> <span class=\"co1\">;; tasks library</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>task id<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>wait <span class=\"kw1\">S</span><span class=\"br0\">)</span> <span class=\"co1\">;; acquire, p-op</span><br/>\t<span class=\"br0\">(</span>printf <span class=\"st0\">\"task\u00a0%d acquires semaphore @\u00a0%a\"</span> id <span class=\"br0\">(</span>date<span class=\"sy0\">-&gt;</span>time<span class=\"sy0\">-</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span>current<span class=\"sy0\">-</span>date<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>sleep <span class=\"nu0\">2000</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>signal <span class=\"kw1\">S</span><span class=\"br0\">)</span> <span class=\"co1\">;; release, v-op</span><br/>\tid<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">S</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>semaphore <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; semaphore with init count 4</span><br/>\u00a0<br/><span class=\"co1\">;; run 10 // tasks</span><br/><span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">[</span>i <span class=\"nu0\">10</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>task<span class=\"sy0\">-</span>run <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>task task i <span class=\"br0\">)</span> <span class=\"br0\">(</span>random <span class=\"nu0\">500</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 69, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>metered<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">compile</span><span class=\"br0\">(</span>export_all<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">create_semaphore</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw3\">spawn</span><span class=\"br0\">(</span>?<span class=\"re4\">MODULE</span><span class=\"sy1\">,</span> sem_loop<span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">sem_loop</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"re5\">Max</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Resources exhausted~n\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"kw1\">receive</span><br/>        <span class=\"br0\">{</span>release<span class=\"sy1\">,</span> <span class=\"re5\">PID</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re5\">PID</span> <span class=\"sy3\">!</span> released<span class=\"sy1\">,</span><br/>            <span class=\"re3\">sem_loop</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Max</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"br0\">{</span>stop<span class=\"sy1\">,</span> <span class=\"re5\">_PID</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"me1\">ok</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sem_loop</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">receive</span><br/>        <span class=\"br0\">{</span>acquire<span class=\"sy1\">,</span> <span class=\"re5\">PID</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re5\">PID</span> <span class=\"sy3\">!</span> acquired<span class=\"sy1\">,</span><br/>            <span class=\"re3\">sem_loop</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"br0\">{</span>stop<span class=\"sy1\">,</span> <span class=\"re5\">_PID</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"me1\">ok</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"re3\">sem_loop</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">Max</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"kw1\">receive</span><br/>        <span class=\"br0\">{</span>release<span class=\"sy1\">,</span> <span class=\"re5\">PID</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re5\">PID</span> <span class=\"sy3\">!</span> released<span class=\"sy1\">,</span><br/>            <span class=\"re3\">sem_loop</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Max</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"br0\">{</span>acquire<span class=\"sy1\">,</span> <span class=\"re5\">PID</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re5\">PID</span> <span class=\"sy3\">!</span> acquired<span class=\"sy1\">,</span><br/>            <span class=\"re3\">sem_loop</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">Max</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"br0\">{</span>stop<span class=\"sy1\">,</span> <span class=\"re5\">_PID</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"me1\">ok</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">release</span><span class=\"br0\">(</span><span class=\"re5\">Sem</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Sem</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>release<span class=\"sy1\">,</span> <span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>    <span class=\"kw1\">receive</span><br/>        released <span class=\"sy1\">-&gt;</span><br/>            <span class=\"me1\">ok</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/><span class=\"re3\">acquire</span><span class=\"br0\">(</span><span class=\"re5\">Sem</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Sem</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>acquire<span class=\"sy1\">,</span> <span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>    <span class=\"kw1\">receive</span><br/>        acquired <span class=\"sy1\">-&gt;</span><br/>            <span class=\"me1\">ok</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">create_semaphore</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">stop</span><span class=\"br0\">(</span><span class=\"re5\">Sem</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Sem</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>stop<span class=\"sy1\">,</span> <span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">worker</span><span class=\"br0\">(</span><span class=\"re5\">P</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">Sem</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">acquire</span><span class=\"br0\">(</span><span class=\"re5\">Sem</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Worker ~b has the acquired semaphore~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">N</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"kw3\">time</span>r:<span class=\"re3\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">500</span> <span class=\"sy3\">*</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">release</span><span class=\"br0\">(</span><span class=\"re5\">Sem</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Worker ~b has released the semaphore~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">N</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">P</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>done<span class=\"sy1\">,</span> <span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">test</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Sem</span> <span class=\"sy3\">=</span> <span class=\"re3\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Pids</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">map</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>                             <span class=\"kw3\">spawn</span><span class=\"br0\">(</span>?<span class=\"re4\">MODULE</span><span class=\"sy1\">,</span> worker<span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">Sem</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                     <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foreach</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">P</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"kw1\">receive</span> <span class=\"br0\">{</span>done<span class=\"sy1\">,</span> <span class=\"re5\">P</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">ok</span> <span class=\"kw1\">end</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Pids</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">stop</span><span class=\"br0\">(</span><span class=\"re5\">Sem</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 65, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw2\">sequence</span> sems<br/>sems <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">constant</span> COUNTER <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span> QUEUE <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><br/>\u00a0<br/><span class=\"kw1\">function</span> semaphore<span class=\"br0\">(</span><span class=\"kw2\">integer</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> n &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        sems <span class=\"sy1\">=</span> <span class=\"kw2\">append</span><span class=\"br0\">(</span>sems<span class=\"sy2\">,</span><span class=\"br0\">{</span>n<span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>sems<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> acquire<span class=\"br0\">(</span><span class=\"kw2\">integer</span> id<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> sems<span class=\"br0\">[</span>id<span class=\"br0\">]</span><span class=\"br0\">[</span>COUNTER<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw2\">task_suspend</span><span class=\"br0\">(</span><span class=\"kw2\">task_self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        sems<span class=\"br0\">[</span>id<span class=\"br0\">]</span><span class=\"br0\">[</span>QUEUE<span class=\"br0\">]</span> <span class=\"sy1\">&amp;=</span> <span class=\"kw2\">task_self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">task_yield</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    sems<span class=\"br0\">[</span>id<span class=\"br0\">]</span><span class=\"br0\">[</span>COUNTER<span class=\"br0\">]</span> <span class=\"sy1\">-=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">procedure</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> release<span class=\"br0\">(</span><span class=\"kw2\">integer</span> id<span class=\"br0\">)</span><br/>    sems<span class=\"br0\">[</span>id<span class=\"br0\">]</span><span class=\"br0\">[</span>COUNTER<span class=\"br0\">]</span> <span class=\"sy1\">+=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>sems<span class=\"br0\">[</span>id<span class=\"br0\">]</span><span class=\"br0\">[</span>QUEUE<span class=\"br0\">]</span><span class=\"br0\">)</span>&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw2\">task_schedule</span><span class=\"br0\">(</span>sems<span class=\"br0\">[</span>id<span class=\"br0\">]</span><span class=\"br0\">[</span>QUEUE<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy2\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        sems<span class=\"br0\">[</span>id<span class=\"br0\">]</span><span class=\"br0\">[</span>QUEUE<span class=\"br0\">]</span> <span class=\"sy1\">=</span> sems<span class=\"br0\">[</span>id<span class=\"br0\">]</span><span class=\"br0\">[</span>QUEUE<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span>..$<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">procedure</span><br/>\u00a0<br/><span class=\"kw1\">function</span> count<span class=\"br0\">(</span><span class=\"kw2\">integer</span> id<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> sems<span class=\"br0\">[</span>id<span class=\"br0\">]</span><span class=\"br0\">[</span>COUNTER<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> delay<span class=\"br0\">(</span><span class=\"kw2\">atom</span> delaytime<span class=\"br0\">)</span><br/>    <span class=\"kw2\">atom</span> t<br/>    t <span class=\"sy1\">=</span> <span class=\"kw2\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-</span> t &lt; delaytime <span class=\"kw1\">do</span><br/>        <span class=\"kw2\">task_yield</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">procedure</span><br/>\u00a0<br/><span class=\"kw2\">integer</span> sem<br/>\u00a0<br/><span class=\"kw1\">procedure</span> worker<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    acquire<span class=\"br0\">(</span>sem<span class=\"br0\">)</span><br/>        <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"- Task\u00a0%d acquired semaphore.<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span><span class=\"kw2\">task_self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        delay<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    release<span class=\"br0\">(</span>sem<span class=\"br0\">)</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"+ Task\u00a0%d released semaphore.<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span><span class=\"kw2\">task_self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">procedure</span><br/>\u00a0<br/><span class=\"kw2\">integer</span> task<br/>\u00a0<br/>sem <span class=\"sy1\">=</span> semaphore<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span><br/>    task <span class=\"sy1\">=</span> <span class=\"kw2\">task_create</span><span class=\"br0\">(</span><span class=\"kw2\">routine_id</span><span class=\"br0\">(</span><span class=\"st0\">\"worker\"</span><span class=\"br0\">)</span><span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">task_schedule</span><span class=\"br0\">(</span>task<span class=\"sy2\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">task_yield</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span><span class=\"kw2\">task_list</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>&gt;<span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw2\">task_yield</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">while</span></pre>"}, {"lang": "Go", "loc": 45, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"log\"</span><br/>    <span class=\"st0\">\"os\"</span><br/>    <span class=\"st0\">\"sync\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// counting semaphore implemented with a buffered channel</span><br/><span class=\"kw1\">type</span> sem <span class=\"kw4\">chan</span> <span class=\"kw4\">struct</span><span class=\"sy1\">{}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s sem<span class=\"sy1\">)</span> acquire<span class=\"sy1\">()</span>   <span class=\"sy1\">{</span> s &lt;<span class=\"sy3\">-</span> <span class=\"kw4\">struct</span><span class=\"sy1\">{}{}</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s sem<span class=\"sy1\">)</span> release<span class=\"sy1\">()</span>   <span class=\"sy1\">{</span> &lt;<span class=\"sy3\">-</span>s <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>s sem<span class=\"sy1\">)</span> count<span class=\"sy1\">()</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">cap</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// log package serializes output</span><br/><span class=\"kw1\">var</span> fmt <span class=\"sy2\">=</span> log<span class=\"sy3\">.</span>New<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Stdout<span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"co1\">// library analogy per WP article</span><br/><span class=\"kw1\">const</span> nRooms <span class=\"sy2\">=</span> <span class=\"nu0\">10</span><br/><span class=\"kw1\">const</span> nStudents <span class=\"sy2\">=</span> <span class=\"nu0\">20</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    rooms <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span>sem<span class=\"sy1\">,</span> nRooms<span class=\"sy1\">)</span><br/>    <span class=\"co1\">// WaitGroup used to wait for all students to have studied</span><br/>    <span class=\"co1\">// before terminating program</span><br/>    <span class=\"kw1\">var</span> studied sync<span class=\"sy3\">.</span>WaitGroup<br/>    studied<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span>nStudents<span class=\"sy1\">)</span><br/>    <span class=\"co1\">// nStudents run concurrently</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; nStudents<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">go</span> student<span class=\"sy1\">(</span>rooms<span class=\"sy1\">,</span> &amp;studied<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    studied<span class=\"sy3\">.</span>Wait<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> student<span class=\"sy1\">(</span>rooms sem<span class=\"sy1\">,</span> studied <span class=\"sy3\">*</span>sync<span class=\"sy3\">.</span>WaitGroup<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    rooms<span class=\"sy3\">.</span>acquire<span class=\"sy1\">()</span><br/>    <span class=\"co1\">// report per task descrption.  also exercise count operation</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"Room entered.  Count is\u00a0%d.  Studying...<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>        rooms<span class=\"sy3\">.</span>count<span class=\"sy1\">())</span><br/>    time<span class=\"sy3\">.</span>Sleep<span class=\"sy1\">(</span><span class=\"nu0\">2</span> <span class=\"sy3\">*</span> time<span class=\"sy3\">.</span>Second<span class=\"sy1\">)</span> <span class=\"co1\">// sleep per task description</span><br/>    rooms<span class=\"sy3\">.</span><span class=\"me1\">release</span><span class=\"sy1\">()</span><br/>    studied<span class=\"sy3\">.</span><span class=\"me1\">Done</span><span class=\"sy1\">()</span> <span class=\"co1\">// signal that student is done</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 18, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> CountingSemaphore <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20private\"><span class=\"kw2\">private</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20private\"><span class=\"kw2\">private</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20max\"><span class=\"kw5\">max</span></a><br/>\u00a0<br/>    CountingSemaphore<span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20max\"><span class=\"kw5\">max</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20max\"><span class=\"kw5\">max</span></a> <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20max\"><span class=\"kw5\">max</span></a> <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20synchronized\"><span class=\"kw2\">synchronized</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> acquire<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a> <span class=\"sy0\">&gt;=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20max\"><span class=\"kw5\">max</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span> wait<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <span class=\"sy0\">++</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20synchronized\"><span class=\"kw2\">synchronized</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> release<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span> count<span class=\"sy0\">--;</span> notifyAll<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20synchronized\"><span class=\"kw2\">synchronized</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> getCount<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20count\"><span class=\"kw5\">count</span></a> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 19, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Concurrent<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/>\u00a0<br/>worker <span class=\"sy0\">::</span> QSem <span class=\"sy0\">-&gt;</span> MVar <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>worker q m n <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    waitQSem q<br/>    putMVar m <span class=\"sy0\">$</span> <span class=\"st0\">\"Worker \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> n <span class=\"sy0\">++</span> <span class=\"st0\">\" has acquired the lock.\"</span><br/>    threadDelay <span class=\"nu0\">2000000</span> <span class=\"co1\">-- microseconds!</span><br/>    signalQSem q<br/>    putMVar m <span class=\"sy0\">$</span> <span class=\"st0\">\"Worker \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> n <span class=\"sy0\">++</span> <span class=\"st0\">\" has released the lock.\"</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    q <span class=\"sy0\">&lt;-</span> newQSem <span class=\"nu0\">3</span><br/>    m <span class=\"sy0\">&lt;-</span> newEmptyMVar<br/>    <span class=\"kw1\">let</span> workers <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>        prints  <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> workers<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span>forkIO <span class=\"sy0\">.</span> worker q m<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>workers<span class=\"br0\">]</span><br/>    replicateM<span class=\"sy0\">_</span> prints <span class=\"sy0\">$</span> takeMVar m <span class=\"sy0\">&gt;&gt;=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a></pre>"}, {"lang": "Icon and Unicon", "loc": 17, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    n <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span>    <span class=\"co1\"># Max. number of active tasks</span><br/>    m <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>    <span class=\"co1\"># Number of visits by each task</span><br/>    k <span class=\"sy0\">:=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">|</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span>    <span class=\"co1\"># Number of tasks</span><br/>    sem <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"sy0\">:</span> <span class=\"sy0\">|</span>mutex<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>n <span class=\"sy0\">:</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>threads <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> k<span class=\"sy0\">,</span> thread<br/>              <span class=\"kw1\">every</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> m <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>                 <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"unit \"</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"st0\">\" ready\"</span><span class=\"br0\">)</span><br/>                 <span class=\"kw1\">until</span> flag <span class=\"sy0\">:=</span> trylock<span class=\"br0\">(</span><span class=\"sy0\">!</span>sem<span class=\"br0\">)</span><br/>                 <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"unit \"</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"st0\">\" running\"</span><span class=\"br0\">)</span><br/>                 <span class=\"kw4\">delay</span><span class=\"br0\">(</span><span class=\"nu0\">2000</span><span class=\"br0\">)</span><br/>                 <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"unit \"</span><span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"st0\">\" done\"</span><span class=\"br0\">)</span><br/>                 unlock<span class=\"br0\">(</span>flag<span class=\"br0\">)</span><br/>                 <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">every</span> wait<span class=\"br0\">(</span><span class=\"sy0\">!</span>threads<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Java", "loc": 59, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> CountingSemaphore<span class=\"br0\">{</span><br/>   <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> lockCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> maxCount<span class=\"sy0\">;</span><br/>\u00a0<br/>   CountingSemaphore<span class=\"br0\">(</span><span class=\"kw4\">int</span> Max<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      maxCount <span class=\"sy0\">=</span> Max<span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw1\">public</span> <span class=\"kw1\">synchronized</span> <span class=\"kw4\">void</span> acquire<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainterruptedexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InterruptedException</span></a><span class=\"br0\">{</span><br/>      <span class=\"kw1\">while</span><span class=\"br0\">(</span> lockCount <span class=\"sy0\">&gt;=</span> maxCount<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>         wait<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      lockCount<span class=\"sy0\">++;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> <span class=\"kw1\">synchronized</span> <span class=\"kw4\">void</span> release<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>lockCount <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>         lockCount<span class=\"sy0\">--;</span><br/>         notifyAll<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> <span class=\"kw1\">synchronized</span> <span class=\"kw4\">int</span> getCount<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> lockCount<span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Worker <span class=\"kw1\">extends</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Athread+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Thread</span></a><span class=\"br0\">{</span><br/>   <span class=\"kw1\">private</span> CountingSemaphore lock<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> id<span class=\"sy0\">;</span><br/>\u00a0<br/>   Worker<span class=\"br0\">(</span>CountingSemaphore coordinator, <span class=\"kw4\">int</span> num<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      lock <span class=\"sy0\">=</span> coordinator<span class=\"sy0\">;</span><br/>      id <span class=\"sy0\">=</span> num<span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   Worker<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> run<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">try</span><span class=\"br0\">{</span><br/>         lock.<span class=\"me1\">acquire</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Worker \"</span> <span class=\"sy0\">+</span> id <span class=\"sy0\">+</span> <span class=\"st0\">\" has acquired the lock.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         sleep<span class=\"br0\">(</span><span class=\"nu0\">2000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">catch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainterruptedexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">InterruptedException</span></a> e<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">finally</span><span class=\"br0\">{</span><br/>         lock.<span class=\"me1\">release</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      CountingSemaphore lock <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> CountingSemaphore<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Worker crew<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      crew <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Worker<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>         crew<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Worker<span class=\"br0\">(</span>lock, i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         crew<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 20, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.51</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">concurrent</span>.<span class=\"me1\">Semaphore</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> kotlin.<span class=\"me1\">concurrent</span>.<span class=\"me1\">thread</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> numPermits <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> numThreads <span class=\"sy0\">=</span> <span class=\"nu0\">9</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> semaphore <span class=\"sy0\">=</span> Semaphore<span class=\"br0\">(</span>numPermits<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"me1\">numThreads</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        thread <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> name <span class=\"sy0\">=</span> <span class=\"st0\">\"Unit #$i\"</span><br/>            semaphore.<span class=\"me1\">acquire</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"$name has acquired the semaphore\"</span><span class=\"br0\">)</span><br/>            Thread.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">2000</span><span class=\"br0\">)</span><br/>            semaphore.<span class=\"me1\">release</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"$name has released the semaphore\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Logtalk", "loc": 59, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(metered_concurrency).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw2\">threaded</span>.<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(run<span class=\"sy1\">/</span><span class=\"nu0\">2</span>).<br/>    run(<span class=\"re0\">Workers</span>, <span class=\"re0\">Max</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"co1\">% start the semaphore and the workers</span><br/>        <span class=\"kw4\">threaded_ignore</span>(semaphore(<span class=\"re0\">Max</span>, <span class=\"re0\">Max</span>)),<br/>        <span class=\"kw4\">forall</span>(<br/>            integer<span class=\"sy1\">::</span>between(<span class=\"nu0\">1</span>, <span class=\"re0\">Workers</span>, <span class=\"re0\">Worker</span>),<br/>            <span class=\"kw4\">threaded_call</span>(worker(<span class=\"re0\">Worker</span>))<br/>        ),<br/>        <span class=\"co1\">% wait for the workers to finish</span><br/>        <span class=\"kw4\">forall</span>(<br/>            integer<span class=\"sy1\">::</span>between(<span class=\"nu0\">1</span>, <span class=\"re0\">Workers</span>, <span class=\"re0\">Worker</span>),<br/>            <span class=\"kw4\">threaded_exit</span>(worker(<span class=\"re0\">Worker</span>))<br/>        ),<br/>        <span class=\"co1\">% tell the semaphore thread to stop</span><br/>        <span class=\"kw4\">threaded_notify</span>(worker(stop, <span class=\"re0\">_</span>)).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(run<span class=\"sy1\">/</span><span class=\"nu0\">0</span>).<br/>    run <span class=\"sy2\">:-</span><br/>        <span class=\"co1\">% default values: 7 workers, 2 concurrent workers</span><br/>        run(<span class=\"nu0\">7</span>, <span class=\"nu0\">2</span>).<br/>\u00a0<br/>    semaphore(<span class=\"re0\">N</span>, <span class=\"re0\">Max</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"kw4\">threaded_wait</span>(worker(<span class=\"re0\">Action</span>, <span class=\"re0\">Worker</span>)),<br/>        (   <span class=\"re0\">Action</span> <span class=\"sy1\">==</span> acquire, <span class=\"re0\">N</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re0\">M</span> <span class=\"kw5\">is</span> <span class=\"re0\">N</span> <span class=\"sy1\">-</span> <span class=\"nu0\">1</span>,<br/>            <span class=\"kw4\">threaded_notify</span>(semaphore(acquired, <span class=\"re0\">Worker</span>)),<br/>            semaphore(<span class=\"re0\">M</span>, <span class=\"re0\">Max</span>)<br/>        <span class=\"sy1\">;</span>   <span class=\"re0\">Action</span> <span class=\"sy1\">==</span> release <span class=\"sy1\">-&gt;</span><br/>            <span class=\"re0\">M</span> <span class=\"kw5\">is</span> <span class=\"re0\">N</span> <span class=\"sy1\">+</span> <span class=\"nu0\">1</span>,<br/>            <span class=\"kw4\">threaded_notify</span>(semaphore(released, <span class=\"re0\">Worker</span>)),<br/>            semaphore(<span class=\"re0\">M</span>, <span class=\"re0\">Max</span>)<br/>        <span class=\"sy1\">;</span>   <span class=\"re0\">Action</span> <span class=\"sy1\">==</span> stop <span class=\"sy1\">-&gt;</span><br/>            <span class=\"kw5\">true</span><br/>        <span class=\"sy1\">;</span>   <span class=\"co1\">% Action == acquire, N =:= 0,</span><br/>            <span class=\"kw4\">threaded_wait</span>(worker(release, <span class=\"re0\">OtherWorker</span>)),<br/>            <span class=\"kw4\">threaded_notify</span>(semaphore(released, <span class=\"re0\">OtherWorker</span>)),<br/>            <span class=\"kw4\">threaded_notify</span>(semaphore(acquired, <span class=\"re0\">Worker</span>)),<br/>            semaphore(<span class=\"re0\">N</span>, <span class=\"re0\">Max</span>)<br/>        ).<br/>\u00a0<br/>    worker(<span class=\"re0\">Worker</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"co1\">% use a random setup time for the worker</span><br/>        random<span class=\"sy1\">::</span>random(<span class=\"nu0\">0.0</span>, <span class=\"nu0\">2.0</span>, <span class=\"re0\">Setup</span>),<br/>        thread_sleep(<span class=\"re0\">Setup</span>),<br/>        <span class=\"kw4\">threaded_notify</span>(worker(acquire, <span class=\"re0\">Worker</span>)),<br/>        <span class=\"kw4\">threaded_wait</span>(semaphore(acquired, <span class=\"re0\">Worker</span>)),<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'Worker '</span>), <span class=\"kw4\">write</span>(<span class=\"re0\">Worker</span>), <span class=\"kw4\">write</span>(<span class=\"st0\">' acquired semaphore<span class=\"es1\">\\n</span>'</span>),<br/>        thread_sleep(<span class=\"nu0\">2</span>),<br/>        <span class=\"kw4\">threaded_notify</span>(worker(release, <span class=\"re0\">Worker</span>)),<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'Worker '</span>), <span class=\"kw4\">write</span>(<span class=\"re0\">Worker</span>), <span class=\"kw4\">write</span>(<span class=\"st0\">' releasing semaphore<span class=\"es1\">\\n</span>'</span>),<br/>        <span class=\"kw4\">threaded_wait</span>(semaphore(released, <span class=\"re0\">Worker</span>)).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0</pre>"}, {"lang": "Oforth", "loc": 10, "block": "<pre class=\"text highlighted_source\">import: parallel<br/>\u00a0<br/>Object Class new: Semaphore(ch)<br/>\u00a0<br/>Semaphore method: initialize(n)<br/>   Channel newSize(n) dup\u00a0:= ch<br/>   #[ 1 over send drop ] times(n) drop\u00a0;<br/>\u00a0<br/>Semaphore method: acquire  @ch receive drop\u00a0;<br/>Semaphore method: release  1 @ch send drop\u00a0;</pre>"}, {"lang": "Oz", "loc": 60, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">NewSemaphore</span> N<span class=\"br0\">}</span><br/>     sem<span class=\"br0\">(</span>max:N count:<span class=\"br0\">{</span>NewCell 0<span class=\"br0\">}</span> <span class=\"st0\">'lock'</span>:<span class=\"br0\">{</span>NewLock<span class=\"br0\">}</span> sync:<span class=\"br0\">{</span>NewCell _<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">Acquire</span> Sem=sem<span class=\"br0\">(</span>max:N count:C <span class=\"st0\">'lock'</span>:L sync:S<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>     Sync<br/>     Acquired<br/>  <span class=\"kw1\">in</span><br/>     <span class=\"kw1\">lock</span> L <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">@</span>C <span class=\"sy0\">&lt;</span> N <span class=\"kw1\">then</span><br/>         C <span class=\"sy0\">:=</span> <span class=\"sy0\">@</span>C <span class=\"sy0\">+</span> 1<br/>         Acquired = <span class=\"kw1\">true</span><br/>        <span class=\"kw1\">else</span><br/>         Sync = <span class=\"sy0\">@</span>S<br/>         Acquired = <span class=\"kw1\">false</span><br/>        <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">if</span> <span class=\"br0\">{</span>Not Acquired<span class=\"br0\">}</span> <span class=\"kw1\">then</span><br/>        <span class=\"br0\">{</span>Wait Sync<span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>Acquire Sem<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">Release</span> sem<span class=\"br0\">(</span>count:C <span class=\"st0\">'lock'</span>:L sync:S <span class=\"sy0\">...</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">lock</span> L <span class=\"kw1\">then</span><br/>        C <span class=\"sy0\">:=</span> <span class=\"sy0\">@</span>C <span class=\"sy0\">-</span> 1<br/>        <span class=\"sy0\">@</span>S = <span class=\"kw1\">unit</span> <span class=\"co1\">%% wake up waiting threads</span><br/>        S <span class=\"sy0\">:=</span> _ <span class=\"co1\">%% prepare for new waiters</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">WithSemaphore</span> Sem Proc<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Acquire Sem<span class=\"br0\">}</span><br/>     <span class=\"kw1\">try</span><br/>        <span class=\"br0\">{</span>Proc<span class=\"br0\">}</span><br/>     <span class=\"kw1\">finally</span><br/>        <span class=\"br0\">{</span>Release Sem<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  S = <span class=\"br0\">{</span>NewSemaphore 4<span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">StartWorker</span> Name<span class=\"br0\">}</span><br/>     <span class=\"kw1\">thread</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw1\">do</span><br/>\t   <span class=\"br0\">{</span>WithSemaphore S<br/>\t    <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">$</span><span class=\"br0\">}</span><br/>\t       <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo Name<span class=\"sy0\">#</span><span class=\"st0\">\" acquired semaphore\"</span><span class=\"br0\">}</span><br/>\t       <span class=\"br0\">{</span>Delay 2000<span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">end</span><br/>\t   <span class=\"br0\">}</span><br/>\t   <span class=\"br0\">{</span>Delay 100<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> I <span class=\"kw1\">in</span> 1<span class=\"sy0\">..</span>10 <span class=\"kw1\">do</span><br/>     <span class=\"br0\">{</span>StartWorker I<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span></pre>"}, {"lang": "Perl", "loc": 23, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> Semaphore <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">tickets</span> <span class=\"sy0\">=</span> Channel<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">method</span> <span class=\"kw2\">new</span> <span class=\"br0\">(</span><span class=\"re0\">$max</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> self<span class=\"sy0\">.</span><span class=\"me1\">bless</span><span class=\"sy0\">;</span> <br/>        <span class=\"re0\">$s</span><span class=\"sy0\">.</span><span class=\"me1\">tickets</span><span class=\"sy0\">.</span><span class=\"me1\">send</span><span class=\"br0\">(</span><span class=\"kw1\">True</span><span class=\"br0\">)</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$max</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$s</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">method</span> acquire <span class=\"br0\">{</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">tickets</span><span class=\"sy0\">.</span><span class=\"me1\">receive</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">method</span> release <span class=\"br0\">{</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">tickets</span><span class=\"sy0\">.</span><span class=\"me1\">send</span><span class=\"br0\">(</span><span class=\"kw1\">True</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> MAIN <span class=\"br0\">(</span><span class=\"re0\">$units</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$sem</span> <span class=\"sy0\">=</span> Semaphore<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">$max</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@units</span> <span class=\"sy0\">=</span> <span class=\"kw1\">do</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$units</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$u</span> <span class=\"br0\">{</span><br/>        start <span class=\"br0\">{</span><br/>            <span class=\"re0\">$sem</span><span class=\"sy0\">.</span><span class=\"me1\">acquire</span><span class=\"sy0\">;</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"unit $u acquired\"</span><span class=\"sy0\">;</span><br/>            sleep <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$sem</span><span class=\"sy0\">.</span><span class=\"me1\">release</span><span class=\"sy0\">;</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"unit $u released\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    await <span class=\"re0\">@units</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 23, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> Semaphore <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">tickets</span> <span class=\"sy0\">=</span> Channel<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">method</span> <span class=\"kw2\">new</span> <span class=\"br0\">(</span><span class=\"re0\">$max</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> self<span class=\"sy0\">.</span><span class=\"me1\">bless</span><span class=\"sy0\">;</span> <br/>        <span class=\"re0\">$s</span><span class=\"sy0\">.</span><span class=\"me1\">tickets</span><span class=\"sy0\">.</span><span class=\"me1\">send</span><span class=\"br0\">(</span><span class=\"kw1\">True</span><span class=\"br0\">)</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$max</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$s</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">method</span> acquire <span class=\"br0\">{</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">tickets</span><span class=\"sy0\">.</span><span class=\"me1\">receive</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">method</span> release <span class=\"br0\">{</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">tickets</span><span class=\"sy0\">.</span><span class=\"me1\">send</span><span class=\"br0\">(</span><span class=\"kw1\">True</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> MAIN <span class=\"br0\">(</span><span class=\"re0\">$units</span> <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$sem</span> <span class=\"sy0\">=</span> Semaphore<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"re0\">$max</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@units</span> <span class=\"sy0\">=</span> <span class=\"kw1\">do</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$units</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$u</span> <span class=\"br0\">{</span><br/>        start <span class=\"br0\">{</span><br/>            <span class=\"re0\">$sem</span><span class=\"sy0\">.</span><span class=\"me1\">acquire</span><span class=\"sy0\">;</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"unit $u acquired\"</span><span class=\"sy0\">;</span><br/>            sleep <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$sem</span><span class=\"sy0\">.</span><span class=\"me1\">release</span><span class=\"sy0\">;</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"unit $u released\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    await <span class=\"re0\">@units</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 69, "block": "<pre class=\"text highlighted_source\">sequence sems = {}<br/>constant COUNTER = 1, QUEUE = 2<br/>\u00a0<br/>function semaphore(integer n)<br/>    if n&gt;0 then<br/>        sems = append(sems,{n,{}})<br/>        return length(sems)<br/>    else<br/>        return 0<br/>    end if<br/>end function<br/>\u00a0<br/>procedure acquire(integer id)<br/>    if sems[id][COUNTER]=0 then<br/>        task_suspend(task_self())<br/>        sems[id][QUEUE] &amp;= task_self()<br/>        task_yield()<br/>    end if<br/>    sems[id][COUNTER] -= 1<br/>end procedure<br/>\u00a0<br/>procedure release(integer id)<br/>    sems[id][COUNTER] += 1<br/>    if length(sems[id][QUEUE])&gt;0 then<br/>        task_schedule(sems[id][QUEUE][1],1)<br/>        sems[id][QUEUE] = sems[id][QUEUE][2..$]<br/>    end if<br/>end procedure<br/>\u00a0<br/>function count(integer id)<br/>    return sems[id][COUNTER]<br/>end function<br/>\u00a0<br/>procedure delay(atom delaytime)<br/>atom t = time()<br/>    while time()-t&lt;delaytime do<br/>        task_yield()<br/>    end while<br/>end procedure<br/>\u00a0<br/>integer sem = semaphore(4)<br/>\u00a0<br/>procedure worker()<br/>    acquire(sem)<br/>    printf(1,\"- Task\u00a0%d acquired semaphore.\\n\",task_self())<br/>    delay(2)<br/>    release(sem)<br/>    printf(1,\"+ Task\u00a0%d released semaphore.\\n\",task_self())<br/>end procedure<br/>\u00a0<br/>for i=1 to 10 do<br/>    integer task = task_create(routine_id(\"worker\"),{})<br/>    task_schedule(task,1)<br/>    task_yield()<br/>end for<br/>\u00a0<br/>integer sc = 0<br/>atom t0 = time()+1<br/>while length(task_list())&gt;1 do<br/>    task_yield()<br/>    integer scnew = count(sem)<br/>    if scnew!=sc<br/>    or time()&gt;t0 then<br/>        sc = scnew<br/>        printf(1,\"Semaphore count now\u00a0%d\\n\",{sc})<br/>        t0 = time()+2<br/>    end if<br/>end while<br/>?\"done\"</pre>"}, {"lang": "PicoLisp", "loc": 8, "block": "<pre class=\"text highlighted_source\">(let Sem (tmp \"sem\")<br/>   (for U 4  # Create 4 concurrent units<br/>      (unless (fork)<br/>         (ctl Sem<br/>            (prinl \"Unit \" U \" aquired the semaphore\")<br/>            (wait 2000)<br/>            (prinl \"Unit \" U \" releasing the semaphore\") )<br/>         (bye) ) ) )</pre>"}, {"lang": "PureBasic", "loc": 24, "block": "<pre class=\"purebasic highlighted_source\">#Threads<span class=\"sy0\">=</span><span class=\"nu0\">10</span><br/>#Parallels<span class=\"sy0\">=</span><span class=\"nu0\">3</span><br/><span class=\"kw1\">Global</span> Semaphore<span class=\"sy0\">=</span>CreateSemaphore<span class=\"br0\">(</span>#Parallels<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Worker<span class=\"br0\">(</span><span class=\"sy0\">*</span>arg.i<span class=\"br0\">)</span><br/>  WaitSemaphore<span class=\"br0\">(</span>Semaphore<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Debug</span> <span class=\"st0\">\"Thread #\"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>arg<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" active.\"</span><br/>  <span class=\"kw2\">Delay</span><span class=\"br0\">(</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span><span class=\"nu0\">2000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  SignalSemaphore<span class=\"br0\">(</span>Semaphore<span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">; Start a multi-thread based work</span><br/><span class=\"kw1\">Dim</span> thread<span class=\"br0\">(</span>#Threads<span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> #Threads<br/>  thread<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw2\">CreateThread</span><span class=\"br0\">(</span>@Worker<span class=\"br0\">(</span><span class=\"br0\">)</span>,i<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span> <br/><span class=\"kw1\">Debug</span> <span class=\"st0\">\"Launcher done.\"</span><br/>\u00a0<br/><span class=\"co1\">; Wait for all threads to finish before closing down</span><br/><span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> #Threads<br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">IsThread</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw2\">WaitThread</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">Next</span></pre>"}, {"lang": "Python", "loc": 37, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">time</span><br/><span class=\"kw1\">import</span> <span class=\"kw3\">threading</span><br/>\u00a0<br/><span class=\"co1\"># Only 4 workers can run in the same time</span><br/>sem <span class=\"sy0\">=</span> <span class=\"kw3\">threading</span>.<span class=\"me1\">Semaphore</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/>workers <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>running <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> worker<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    me <span class=\"sy0\">=</span> <span class=\"kw3\">threading</span>.<span class=\"me1\">currentThread</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span>:<br/>        sem.<span class=\"me1\">acquire</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">try</span>:<br/>            <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> running:<br/>                <span class=\"kw1\">break</span><br/>            <span class=\"kw1\">print</span> <span class=\"st0\">'%s acquired semaphore'</span>\u00a0% me.<span class=\"me1\">getName</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">time</span>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">finally</span>:<br/>            sem.<span class=\"me1\">release</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">time</span>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">0.01</span><span class=\"br0\">)</span> <span class=\"co1\"># Let others acquire</span><br/>\u00a0<br/><span class=\"co1\"># Start 10 workers</span><br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>:<br/>    t <span class=\"sy0\">=</span> <span class=\"kw3\">threading</span>.<span class=\"me1\">Thread</span><span class=\"br0\">(</span>name<span class=\"sy0\">=</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span> target<span class=\"sy0\">=</span>worker<span class=\"br0\">)</span><br/>    workers.<span class=\"me1\">append</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    t.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\"># Main loop</span><br/><span class=\"kw1\">try</span>:<br/>    <span class=\"kw1\">while</span> <span class=\"nu0\">1</span>:<br/>        <span class=\"kw3\">time</span>.<span class=\"me1\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">0.1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">except</span> <span class=\"kw2\">KeyboardInterrupt</span>:<br/>    running <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> t <span class=\"kw1\">in</span> workers:<br/>        t.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define sema (make-semaphore 4))\u00a0; allow 4 concurrent jobs<br/>\u00a0<br/>;; start 20 jobs and wait for all of them to end<br/>(for-each<br/> thread-wait<br/> (for/list ([i 20])<br/>   (thread (\u03bb() (semaphore-wait sema)<br/>                (printf \"Job #~a acquired semaphore\\n\" i)<br/>                (sleep 2)<br/>                (printf \"Job #~a done\\n\" i)<br/>                (semaphore-post sema)))))<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 17, "block": "<pre class=\"text highlighted_source\"># four workers may be concurrent<br/>4 semaphore as sem<br/>\u00a0<br/>thread worker<br/>    5 each as i<br/>        sem acquire<br/>        # tid is thread id<br/>        tid \"%d acquired semaphore\\n\" print<br/>        2000 ms<br/>        sem release<br/>        # let others acquire<br/>        100 ms<br/>\u00a0<br/># start 10 threads<br/>group<br/>    10 each drop worker<br/>list as workers</pre>"}, {"lang": "Ruby", "loc": 47, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw3\">require</span> <span class=\"st0\">'thread'</span><br/>\u00a0<br/><span class=\"co1\"># Simple Semaphore implementation</span><br/><span class=\"kw1\">class</span> Semaphore<br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>size = <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"re1\">@queue</span> = <span class=\"kw4\">SizedQueue</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span><br/>    size.<span class=\"me1\">times</span> <span class=\"br0\">{</span> acquire <span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> acquire<br/>    tap <span class=\"br0\">{</span> <span class=\"re1\">@queue</span>.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw2\">nil</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> release<br/>    tap <span class=\"br0\">{</span> <span class=\"re1\">@queue</span>.<span class=\"me1\">pop</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># @return [Integer]</span><br/>  <span class=\"kw1\">def</span> count<br/>    <span class=\"re1\">@queue</span>.<span class=\"me1\">length</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> synchronize<br/>    release<br/>    <span class=\"kw1\">yield</span><br/>  <span class=\"kw1\">ensure</span><br/>    acquire<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> foo<span class=\"br0\">(</span>id, sem<span class=\"br0\">)</span><br/>  sem.<span class=\"me1\">synchronize</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"Thread #{id} Acquired lock\"</span><br/>    <span class=\"kw3\">sleep</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>threads = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>n = <span class=\"nu0\">5</span><br/>s = Semaphore.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>n.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>  threads <span class=\"sy0\">&lt;&lt;</span> <span class=\"kw4\">Thread</span>.<span class=\"me1\">new</span> <span class=\"br0\">{</span> foo i, s <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>threads.<span class=\"me1\">each</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:join<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 30, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> CountingSemaphore<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> maxCount<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> lockCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> acquire<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span> <span class=\"br0\">{</span><br/>      lockCount <span class=\"sy0\">&gt;=</span> maxCount<br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span> wait<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    lockCount +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> release<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>lockCount <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      lockCount -<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>      notifyAll<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> getCount<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> lockCount<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Worker <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>lock, crew<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> CountingSemaphore<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Array<span class=\"br0\">[</span>Worker<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">{</span> i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until <span class=\"nu0\">5</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>      crew<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Worker<span class=\"br0\">(</span>lock, i<span class=\"br0\">)</span><br/>      crew<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 66, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/><span class=\"kw2\">package</span> require Thread<br/>\u00a0<br/><span class=\"co1\"># Create the global shared state of the semaphore</span><br/><span class=\"kw1\">set</span> handle semaphore0<br/>tsv::<span class=\"kw1\">set</span> <span class=\"re0\">$handle</span> mutex <span class=\"br0\">[</span>thread::<span class=\"me1\">mutex</span> create<span class=\"br0\">]</span><br/>tsv::<span class=\"kw1\">set</span> <span class=\"re0\">$handle</span> cv <span class=\"br0\">[</span>thread::<span class=\"me1\">cond</span> create<span class=\"br0\">]</span><br/>tsv::<span class=\"kw1\">set</span> <span class=\"re0\">$handle</span> count <span class=\"nu0\">0</span><br/>tsv::<span class=\"kw1\">set</span> <span class=\"re0\">$handle</span> max <span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"co1\"># Make five worker tasks</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">5</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">lappend</span> threads <span class=\"br0\">[</span>thread::<span class=\"me1\">create</span> -preserved <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># Not bothering to wrap this in an object for demonstration</span><br/>\t<span class=\"kw1\">proc</span> init <span class=\"br0\">{</span>handle<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">global</span> mutex cv count max<br/>\t    <span class=\"kw1\">set</span> mutex <span class=\"br0\">[</span>tsv::<span class=\"me1\">object</span> <span class=\"re0\">$handle</span> mutex<span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> cv <span class=\"br0\">[</span>tsv::<span class=\"me1\">object</span> <span class=\"re0\">$handle</span> cv<span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> count <span class=\"br0\">[</span>tsv::<span class=\"me1\">object</span> <span class=\"re0\">$handle</span> count<span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> max <span class=\"br0\">[</span>tsv::<span class=\"me1\">get</span> <span class=\"re0\">$handle</span> max<span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">proc</span> acquire <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">global</span> mutex cv count max<br/>\t    thread::<span class=\"me1\">mutex</span> lock <span class=\"br0\">[</span><span class=\"re0\">$mutex</span> get<span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re0\">$count</span> get<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>= <span class=\"re0\">$max</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\tthread::<span class=\"me1\">cond</span> wait <span class=\"br0\">[</span><span class=\"re0\">$cv</span> get<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"re0\">$mutex</span> get<span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"re0\">$count</span> <span class=\"kw2\">incr</span><br/>\t    thread::<span class=\"me1\">mutex</span> unlock <span class=\"br0\">[</span><span class=\"re0\">$mutex</span> get<span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">proc</span> release <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">global</span> mutex cv count max<br/>\t    thread::<span class=\"me1\">mutex</span> lock <span class=\"br0\">[</span><span class=\"re0\">$mutex</span> get<span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re0\">$count</span> get<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$count</span> <span class=\"kw2\">incr</span> -<span class=\"nu0\">1</span><br/>\t\tthread::<span class=\"me1\">cond</span> notify <span class=\"br0\">[</span><span class=\"re0\">$cv</span> get<span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t    thread::<span class=\"me1\">mutex</span> unlock <span class=\"br0\">[</span><span class=\"re0\">$mutex</span> get<span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\"># The core task of the worker</span><br/>\t<span class=\"kw1\">proc</span> run <span class=\"br0\">{</span>handle id<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    init <span class=\"re0\">$handle</span><br/>\t    acquire<br/>\t    <span class=\"kw2\">puts</span> <span class=\"st0\">\"worker $id has acquired the lock\"</span><br/>\t    after <span class=\"nu0\">2000</span><br/>\t    release<br/>\t    <span class=\"kw2\">puts</span> <span class=\"st0\">\"worker $id is done\"</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\"># Wait for further instructions from the main thread</span><br/>\tthread::<span class=\"me1\">wait</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Start the workers doing useful work, giving each a unique id for pretty printing</span><br/><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><br/><span class=\"kw1\">foreach</span> t <span class=\"re0\">$threads</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"starting thread [incr i]\"</span><br/>    thread::<span class=\"me1\">send</span> -async <span class=\"re0\">$t</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> run <span class=\"re0\">$handle</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Wait for all the workers to finish</span><br/><span class=\"kw1\">foreach</span> t <span class=\"re0\">$threads</span> <span class=\"br0\">{</span><br/>    thread::<span class=\"me1\">release</span> -wait <span class=\"re0\">$t</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "UnixPipes", "loc": 19, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw2\">rm</span> <span class=\"re5\">-f</span> sem\u00a0; <span class=\"kw2\">mkfifo</span> sem<br/>\u00a0<br/>acquire<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"re2\">x</span>=<span class=\"st_h\">''</span>;<span class=\"kw1\">while</span> <span class=\"kw3\">test</span> <span class=\"re5\">-z</span> <span class=\"st0\">\"<span class=\"es2\">$x</span>\"</span>; <span class=\"kw1\">do</span> <span class=\"kw2\">read</span> x; <span class=\"kw1\">done</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>release<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw3\">echo</span> <span class=\"st_h\">'1'</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>job<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"re2\">n</span>=<span class=\"re4\">$1</span>; <span class=\"kw3\">echo</span> <span class=\"st0\">\"Job <span class=\"es2\">$n</span> acquired Semaphore\"</span><span class=\"sy0\">&gt;&amp;</span><span class=\"nu0\">2</span>\u00a0; <span class=\"kw2\">sleep</span> <span class=\"nu0\">2</span>; <span class=\"kw3\">echo</span> <span class=\"st0\">\"Job <span class=\"es2\">$n</span> released Semaphore\"</span><span class=\"sy0\">&gt;&amp;</span><span class=\"nu0\">2</span>\u00a0;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">(</span> acquire <span class=\"sy0\">&lt;</span> sem\u00a0; job <span class=\"nu0\">1</span>\u00a0; release <span class=\"sy0\">&gt;</span> sem <span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span><br/><span class=\"br0\">(</span> acquire <span class=\"sy0\">&lt;</span> sem\u00a0; job <span class=\"nu0\">2</span>\u00a0; release <span class=\"sy0\">&gt;</span> sem <span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span><br/><span class=\"br0\">(</span> acquire <span class=\"sy0\">&lt;</span> sem\u00a0; job <span class=\"nu0\">3</span>\u00a0; release <span class=\"sy0\">&gt;</span> sem <span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span><br/>\u00a0<br/><span class=\"kw3\">echo</span> <span class=\"st_h\">'Initialize Jobs'</span> <span class=\"sy0\">&gt;&amp;</span><span class=\"nu0\">2</span>\u00a0; <span class=\"kw3\">echo</span> <span class=\"st_h\">'1'</span> <span class=\"sy0\">&gt;</span> sem</pre>"}, {"lang": "Visual Basic .NET", "loc": 4, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Dim</span> sem <span class=\"kw1\">As</span> <span class=\"kw1\">New</span> Semaphore<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"co1\">'Indicates that up to 5 resources can be aquired</span><br/>sem<span class=\"sy0\">.</span><span class=\"me1\">WaitOne</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">'Blocks until a resouce can be aquired</span><br/><span class=\"kw1\">Dim</span> oldCount <span class=\"sy0\">=</span> sem<span class=\"sy0\">.</span><span class=\"me1\">Release</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">'Returns a resource to the pool</span><br/><span class=\"co1\">'oldCount has the Semaphore's count before Release was called</span></pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">fcn job(name,sem){<br/>   name.println(\" wait\"); sem.acquire(); <br/>   name.println(\" go\"); Atomic.sleep(2); <br/>   sem.release(); name.println(\" done\")<br/>}<br/>   // start 3 threads using the same semphore<br/>s:=Thread.Semaphore(1);<br/>job.launch(\"1\",s); job.launch(\"2\",s); job.launch(\"3\",s);</pre>"}]}