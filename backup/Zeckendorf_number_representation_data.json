{"task": "Zeckendorf_number_representation", "blocks": [{"lang": "360 Assembly", "loc": 67, "block": "<pre class=\"text highlighted_source\">*        Zeckendorf number representation  04/04/2017<br/>ZECKEN   CSECT<br/>         USING  ZECKEN,R13         base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    save previous context<br/>         ST     R13,4(R15)         link backward<br/>         ST     R15,8(R13)         link forward<br/>         LR     R13,R15            set addressability<br/>         LA     R6,0               i=0<br/>       DO WHILE=(C,R6,LE,=A(20))   do i=0 to 20<br/>         MVC    PG,=CL80'xx\u00a0: '      init buffer<br/>         LA     R10,PG               pgi=0<br/>         XDECO  R6,XDEC              i<br/>         MVC    0(2,R10),XDEC+10     output i<br/>         LA     R10,5(R10)           pgi+=5<br/>         MVC    FIB,=A(1)            fib(1)=1<br/>         MVC    FIB+4,=A(2)          fib(2)=2<br/>         LA     R7,2                 j=2<br/>         LR     R1,R7                j<br/>         SLA    R1,2                 @fib(j)<br/>       DO WHILE=(C,R6,GT,FIB-4(R1)   do while fib(j)&lt;i<br/>         LA     R7,1(R7)               j++<br/>         LR     R1,R7                  j<br/>         SLA    R1,2                   ~<br/>         L      R2,FIB-8(R1)           fib(j-1)<br/>         A      R2,FIB-12(R1)          fib(j-2)<br/>         ST     R2,FIB-4(R1)           fib(j)=fib(j-1)+fib(j-2)<br/>         LR     R1,R7                  j<br/>         SLA    R1,2                   @fib(j)<br/>       ENDDO    ,                    enddo j<br/>         LR     R8,R6                k=i<br/>         MVI    BB,X'00'             bb=false<br/>       DO WHILE=(C,R7,GE,=A(1))      do j=j to 1 by -1<br/>         LR     R1,R7                  j<br/>         SLA    R1,2                   ~<br/>       IF C,R8,GE,FIB-4(R1) THEN       if fib(j)&lt;=k then<br/>         MVI    BB,X'01'                 bb=true<br/>         MVC    0(1,R10),=C'1'           output '1'<br/>         LA     R10,1(R10)               pgi+=1<br/>         LR     R1,R7                    j<br/>         SLA    R1,2                     ~<br/>         S      R8,FIB-4(R1)             k=k-fib(j)<br/>       ELSE     ,                      else<br/>       IF CLI,BB,EQ,X'01' THEN           if bb then<br/>         MVC    0(1,R10),=C'0'             output '0'<br/>         LA     R10,1(R10)                 pgi+=1<br/>       ENDIF    ,                        endif<br/>       ENDIF    ,                      endif<br/>         BCTR   R7,0                   j--<br/>       ENDDO    ,                    enddo j<br/>       IF CLI,BB,NE,X'01' THEN       if not bb then<br/>         MVC    0(1,R10),=C'0'         output '0'<br/>       ENDIF    ,                    endif<br/>         XPRNT  PG,L'PG              print buffer<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         L      R13,4(0,R13)       restore previous savearea pointer<br/>         LM     R14,R12,12(R13)    restore previous context<br/>         XR     R15,R15            rc=0<br/>         BR     R14                exit<br/>FIB      DS     32F                Fibonnacci table<br/>BB       DS     X                  flag<br/>PG       DS     CL80               buffer<br/>XDEC     DS     CL12               temp<br/>         YREGS<br/>         END    ZECKEN</pre>"}, {"lang": "Ada", "loc": 26, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Print_Zeck <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Zeck_Increment<span class=\"br0\">(</span>Z: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> Z=<span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> <br/>\t <span class=\"kw1\">return</span> <span class=\"st0\">\"1\"</span>;<br/>      <span class=\"kw1\">elsif</span> Z<span class=\"br0\">(</span>Z'Last<span class=\"br0\">)</span> = '<span class=\"nu0\">1</span>' <span class=\"kw1\">then</span><br/>\t <span class=\"kw1\">return</span> Zeck_Increment<span class=\"br0\">(</span>Z<span class=\"br0\">(</span>Z'First .. <span class=\"me1\">Z</span>'Last-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; '<span class=\"nu0\">0</span>';<br/>      <span class=\"kw1\">elsif</span> Z<span class=\"br0\">(</span>Z'Last-<span class=\"nu0\">1</span><span class=\"br0\">)</span> = '<span class=\"nu0\">0</span>' <span class=\"kw1\">then</span><br/>\t <span class=\"kw1\">return</span> Z<span class=\"br0\">(</span>Z'First .. <span class=\"me1\">Z</span>'Last-<span class=\"nu0\">1</span><span class=\"br0\">)</span> &amp; '<span class=\"nu0\">1</span>';<br/>      <span class=\"kw1\">else</span> <span class=\"co1\">-- Z has at least two digits and ends with \"10\"</span><br/>\t <span class=\"kw1\">return</span> Zeck_Increment<span class=\"br0\">(</span>Z<span class=\"br0\">(</span>Z'First .. <span class=\"me1\">Z</span>'Last-<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"00\"</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Zeck_Increment;<br/>\u00a0<br/>   <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>;<br/>   Current: Unbounded_String\u00a0:= Null_Unbounded_String;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">20</span> <span class=\"kw1\">loop</span><br/>      Current\u00a0:= To_Unbounded_String<span class=\"br0\">(</span>Zeck_Increment<span class=\"br0\">(</span>To_String<span class=\"br0\">(</span>Current<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>To_String<span class=\"br0\">(</span>Current<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" \"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;   <br/><span class=\"kw1\">end</span> Print_Zeck;</pre>"}, {"lang": "ALGOL 68", "loc": 60, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># print some Zeckendorf number representations                             #</span><br/>\u00a0<br/><span class=\"coMULTI\"># We handle 32-bit numbers, the maximum fibonacci number that can fit in a #</span><br/><span class=\"coMULTI\"># 32 bit number is F(45)                                                   #</span><br/>\u00a0<br/><span class=\"coMULTI\"># build a table of 32-bit fibonacci numbers                                #</span><br/><span class=\"br0\">[</span> 45 <span class=\"br0\">]</span><span class=\"kw3\">INT</span> fibonacci<span class=\"sy1\">;</span><br/>fibonacci<span class=\"br0\">[</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>fibonacci<span class=\"br0\">[</span> 2 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 2<span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 3 <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> fibonacci <span class=\"kw2\">DO</span> fibonacci<span class=\"br0\">[</span> i <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> fibonacci<span class=\"br0\">[</span> i <span class=\"sy1\">-</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">+</span> fibonacci<span class=\"br0\">[</span> i <span class=\"sy1\">-</span> 2 <span class=\"br0\">]</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns the Zeckendorf representation of n or \"?\" if one cannot be found #</span><br/><span class=\"kw4\">PROC</span> to zeckendorf <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">IF</span> n <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span><br/>        <span class=\"st0\">\"0\"</span><br/>     <span class=\"kw2\">ELSE</span><br/>        <span class=\"kw3\">STRING</span> result <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span>    f pos  <span class=\"sy1\">:=</span> <span class=\"kw8\">UPB</span> fibonacci<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">INT</span>    rest   <span class=\"sy1\">:=</span> <span class=\"kw8\">ABS</span> n<span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># find the first non-zero Zeckendorf digit                        #</span><br/>        <span class=\"kw2\">WHILE</span> f pos <span class=\"sy1\">&gt;</span> <span class=\"kw8\">LWB</span> fibonacci <span class=\"kw16\">AND</span> rest <span class=\"sy1\">&lt;</span> fibonacci<span class=\"br0\">[</span> f pos <span class=\"br0\">]</span> <span class=\"kw2\">DO</span><br/>            f pos <span class=\"sy1\">-:=</span> 1<br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># if we found a digit, build the representation                   #</span><br/>        <span class=\"kw2\">IF</span> f pos <span class=\"sy1\">&gt;=</span> <span class=\"kw8\">LWB</span> fibonacci <span class=\"kw2\">THEN</span><br/>            <span class=\"coMULTI\"># have a digit                                                #</span><br/>            <span class=\"kw3\">BOOL</span> skip digit <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>            <span class=\"kw2\">WHILE</span> f pos <span class=\"sy1\">&gt;=</span> <span class=\"kw8\">LWB</span> fibonacci <span class=\"kw2\">DO</span><br/>                <span class=\"kw2\">IF</span>   rest <span class=\"sy1\">&lt;=</span> 0 <span class=\"kw2\">THEN</span><br/>                    result    <span class=\"sy1\">+:=</span> <span class=\"st0\">\"0\"</span><br/>                <span class=\"kw2\">ELIF</span> skip digit <span class=\"kw2\">THEN</span><br/>                    <span class=\"coMULTI\"># we used the previous digit                          #</span><br/>                    skip digit <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>                    result    <span class=\"sy1\">+:=</span> <span class=\"st0\">\"0\"</span><br/>                <span class=\"kw2\">ELIF</span> rest <span class=\"sy1\">&lt;</span> fibonacci<span class=\"br0\">[</span> f pos <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>                    <span class=\"coMULTI\"># can't use the digit at f pos                        #</span><br/>                    skip digit <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>                    result    <span class=\"sy1\">+:=</span> <span class=\"st0\">\"0\"</span><br/>                <span class=\"kw2\">ELSE</span><br/>                    <span class=\"coMULTI\"># can use this digit                                  #</span><br/>                    skip digit <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>                    result    <span class=\"sy1\">+:=</span> <span class=\"st0\">\"1\"</span><span class=\"sy1\">;</span><br/>                    rest      <span class=\"sy1\">-:=</span> fibonacci<span class=\"br0\">[</span> f pos <span class=\"br0\">]</span><br/>                <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                f pos <span class=\"sy1\">-:=</span> 1<br/>            <span class=\"kw2\">OD</span><br/>        <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> rest <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span><br/>            <span class=\"coMULTI\"># found a representation                                      #</span><br/>            result<br/>        <span class=\"kw2\">ELSE</span><br/>            <span class=\"coMULTI\"># can't find a representation                                 #</span><br/>            <span class=\"st0\">\"?\"</span><br/>        <span class=\"kw2\">FI</span><br/>     <span class=\"kw2\">FI</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># to zeckendorf #</span><br/>\u00a0<br/><span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">TO</span> 20 <span class=\"kw2\">DO</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> i<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>3 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> to zeckendorf<span class=\"br0\">(</span> i <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">OD</span><br/>\u00a0</pre>"}, {"lang": "AppleScript", "loc": 160, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- ZECKENDORF NUMBERS --------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- zeckendorf\u00a0:: Int -&gt; String</span><br/><span class=\"kw3\">on</span> zeckendorf<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> f<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>n, x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> n <span class=\"sy0\">&lt;</span> x <span class=\"kw3\">then</span><br/>                <span class=\"br0\">[</span>n, <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>            <span class=\"kw3\">else</span><br/>                <span class=\"br0\">[</span>n <span class=\"sy0\">-</span> x, <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw1\">item</span> <span class=\"nu0\">2</span> <span class=\"kw3\">of</span> mapAccumL<span class=\"br0\">(</span>f, n, |reverse|<span class=\"br0\">(</span>just <span class=\"kw3\">of</span> tailMay<span class=\"br0\">(</span>fibUntil<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">string</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> zeckendorf<br/>\u00a0<br/><span class=\"co1\">-- fibUntil\u00a0:: Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> fibUntil<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> xs <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> limit <span class=\"kw3\">to</span> n<br/>\u00a0<br/>    <span class=\"kw3\">script</span> atLimit<br/>        <span class=\"kw3\">property</span> ceiling\u00a0: limit<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"nu0\">2</span> <span class=\"kw3\">of</span> x<span class=\"br0\">)</span> &gt; <span class=\"br0\">(</span>atLimit<span class=\"co2\">'</span>s ceiling<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> nextPair<br/>        <span class=\"kw3\">property</span> series\u00a0: xs<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span><span class=\"br0\">[</span>a, b<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> nextPair<span class=\"co2\">'</span>s series <span class=\"kw3\">to</span> nextPair<span class=\"co2\">'</span>s series <span class=\"sy0\">&amp;</span> b<br/>            <span class=\"br0\">[</span>b, a <span class=\"sy0\">+</span> b<span class=\"br0\">]</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    |<span class=\"kw3\">until</span>|<span class=\"br0\">(</span>atLimit, nextPair, <span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">return</span> nextPair<span class=\"co2\">'</span>s series<br/><span class=\"kw3\">end</span> fibUntil<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>    intercalate<span class=\"br0\">(</span>linefeed, \u00ac<br/>        map<span class=\"br0\">(</span>zeckendorf, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> m &gt; n <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- 'The mapAccumL function behaves like a combination of map and foldl; </span><br/><span class=\"co1\">-- it applies a function to each element of a list, passing an </span><br/><span class=\"co1\">-- accumulating parameter from left to right, and returning a final </span><br/><span class=\"co1\">-- value of this accumulator together with the new list.' (see Hoogle)</span><br/>\u00a0<br/><span class=\"co1\">-- mapAccumL\u00a0:: (acc -&gt; x -&gt; (acc, y)) -&gt; acc -&gt; [x] -&gt; (acc, [y])</span><br/><span class=\"kw3\">on</span> mapAccumL<span class=\"br0\">(</span>f, acc, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"kw3\">to</span> <span class=\"kw3\">set</span> pair <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> a, x<span class=\"br0\">)</span><br/>            <span class=\"br0\">[</span><span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> pair, <span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"nu0\">2</span> <span class=\"kw3\">of</span> a<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"kw1\">item</span> <span class=\"nu0\">2</span> <span class=\"kw3\">of</span> pair<span class=\"br0\">]</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    foldl<span class=\"br0\">(</span><span class=\"kw1\">result</span>, <span class=\"br0\">[</span>acc, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> mapAccumL<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">-- reverse\u00a0:: [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> |reverse|<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> xs <span class=\"kw3\">is</span> <span class=\"kw1\">text</span> <span class=\"kw3\">then</span><br/>        <span class=\"br0\">(</span>reverse <span class=\"kw3\">of</span> characters <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">else</span><br/>        reverse <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> |reverse|<br/>\u00a0<br/><span class=\"co1\">-- tailMay\u00a0:: [a] -&gt; Maybe [a]</span><br/><span class=\"kw3\">on</span> tailMay<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>        <span class=\"br0\">{</span>nothing:<span class=\"kw1\">false</span>, just:<span class=\"kw1\">items</span> <span class=\"nu0\">2</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span>nothing:<span class=\"kw1\">true</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> tailMay<br/>\u00a0<br/><span class=\"co1\">-- until\u00a0:: (a -&gt; Bool) -&gt; (a -&gt; a) -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> |<span class=\"kw3\">until</span>|<span class=\"br0\">(</span>p, f, x<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> mp <span class=\"kw3\">to</span> mReturn<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> x<br/>\u00a0<br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">until</span> mp<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/>    <span class=\"kw3\">return</span> v<br/><span class=\"kw3\">end</span> |<span class=\"kw3\">until</span>|</pre>"}, {"lang": "AutoHotkey", "loc": 24, "block": "<pre class=\"autohotkey highlighted_source\">Fib <span class=\"sy0\">:=</span> NStepSequence<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">21</span> <span class=\"br0\">{</span><br/>\ti <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t<span class=\"sy0\">,</span> Out <span class=\"sy0\">.=</span> i <span class=\"st0\">\":`t\"</span><span class=\"sy0\">,</span> n <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% Fib<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tx <span class=\"sy0\">:=</span> Fib<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>Fib<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> i<span class=\"br0\">)</span><br/>\t\t\tn <span class=\"sy0\">.=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> i <span class=\"sy0\">-=</span> Fib<span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\tn <span class=\"sy0\">.=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"br0\">}</span><br/>\tOut <span class=\"sy0\">.=</span> <span class=\"br0\">(</span>n\u00a0? LTrim<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">\"`n\"</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% Out<br/>\u00a0<br/>NStepSequence<span class=\"br0\">(</span>v1<span class=\"sy0\">,</span> v2<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    a <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>v1<span class=\"sy0\">,</span> v2<span class=\"br0\">]</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% k <span class=\"sy0\">-</span> <span class=\"nu0\">2</span> <span class=\"br0\">{</span><br/>\t\ta<span class=\"br0\">[</span>j <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% j <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">2</span>\u00a0? j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\u00a0: n<br/>\t\t\ta<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">+=</span> a<span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> a<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AutoIt", "loc": 44, "block": "<pre class=\"autoit highlighted_source\">\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">20</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">&amp;</span><span class=\"st0\">\": \"</span><span class=\"sy0\">&amp;</span> Zeckendorf<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span><a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@CRLF</span></span></a><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> Zeckendorf<span class=\"br0\">(</span><span class=\"re0\">$int</span><span class=\"sy0\">,</span> <span class=\"re0\">$Fibarray</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Not</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/IsArray.htm\"><span class=\"kw3\">IsArray</span></a><span class=\"br0\">(</span><span class=\"re0\">$Fibarray</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <span class=\"re0\">$Fibarray</span> <span class=\"sy0\">=</span> Fibonacci<span class=\"br0\">(</span><span class=\"re0\">$int</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Local</span></a> <span class=\"re0\">$ret</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/UBound.htm\"><span class=\"kw3\">UBound</span></a><span class=\"br0\">(</span><span class=\"re0\">$Fibarray</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Step</span></a> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$Fibarray</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$int</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">And</span></a> <span class=\"re0\">$ret</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">ContinueLoop</span></a> <span class=\"co0\">; dont use Leading  Zeros</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$Fibarray</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$int</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t\t<span class=\"re0\">$ret</span> <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\"0\"</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/StringRight.htm\"><span class=\"kw3\">StringRight</span></a><span class=\"br0\">(</span><span class=\"re0\">$ret</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span>  <span class=\"st0\">\"1\"</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t\t\t<span class=\"re0\">$ret</span> <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\"1\"</span><br/>\t\t\t\t<span class=\"re0\">$int</span> <span class=\"sy0\">-=</span> <span class=\"re0\">$Fibarray</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a><br/>\t\t\t\t<span class=\"re0\">$ret</span> <span class=\"sy0\">&amp;=</span> <span class=\"st0\">\"0\"</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$ret</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <span class=\"re0\">$ret</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"re0\">$ret</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a>   <span class=\"co0\">;==&gt;Zeckendorf</span><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> Fibonacci<span class=\"br0\">(</span><span class=\"re0\">$max</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$AList</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/ObjCreate.htm\"><span class=\"kw3\">ObjCreate</span></a><span class=\"br0\">(</span><span class=\"st0\">\"System.Collections.ArrayList\"</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$AList</span><span class=\"sy0\">.</span><span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>\t<span class=\"re0\">$current</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">While</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">True</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$current</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t\t<span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <span class=\"re0\">$AList</span><span class=\"sy0\">.</span><span class=\"me1\">Count</span><br/>\t\t\t<span class=\"re0\">$current</span> <span class=\"sy0\">=</span> <span class=\"re0\">$AList</span><span class=\"sy0\">.</span><span class=\"me1\">Item</span><span class=\"br0\">(</span><span class=\"re0\">$count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"re0\">$current</span> <span class=\"sy0\">=</span> <span class=\"re0\">$current</span> <span class=\"sy0\">+</span> <span class=\"re0\">$AList</span><span class=\"sy0\">.</span><span class=\"me1\">Item</span><span class=\"br0\">(</span><span class=\"re0\">$count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a><br/>\t\t\t<span class=\"re0\">$current</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\t\t<span class=\"re0\">$AList</span><span class=\"sy0\">.</span><span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"re0\">$current</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <span class=\"re0\">$current</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$max</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">ExitLoop</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">WEnd</span></a><br/>\t<span class=\"re0\">$Array</span> <span class=\"sy0\">=</span> <span class=\"re0\">$AList</span><span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <span class=\"re0\">$Array</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a>   <span class=\"co0\">;==&gt;Fibonacci</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 27, "block": "<pre class=\"text highlighted_source\">      FOR n% = 0 TO 20<br/>        PRINT n% RIGHT$(\"       \" + FNzeckendorf(n%), 8)<br/>      NEXT<br/>      PRINT '\"Checking numbers up to 10000...\"<br/>      FOR n% = 21 TO 10000<br/>        IF INSTR(FNzeckendorf(n%), \"11\") STOP<br/>      NEXT<br/>      PRINT \"No Zeckendorf numbers contain consecutive 1's\"<br/>      END<br/>\u00a0<br/>      DEF FNzeckendorf(n%)<br/>      LOCAL i%, o$, fib%()\u00a0: DIM fib%(45)<br/>      fib%(0) = 1\u00a0: fib%(1) = 1\u00a0: i% = 1<br/>      REPEAT<br/>        i% += 1<br/>        fib%(i%) = fib%(i%-1) + fib%(i%-2)<br/>      UNTIL fib%(i%) &gt; n%<br/>      REPEAT<br/>        i% -= 1<br/>        IF n% &gt;= fib%(i%) THEN<br/>          o$ += \"1\"<br/>          n% -= fib%(i%)<br/>        ELSE<br/>          o$ += \"0\"<br/>        ENDIF<br/>      UNTIL i% = 1<br/>      = o$</pre>"}, {"lang": "Befunge", "loc": 7, "block": "<pre class=\"text highlighted_source\">45*83p0&gt;:::.0`\"0\"v<br/>v53210p 39+!:,,9+&lt;<br/>&gt;858+37 *66g\"7Y\":v<br/>&gt;3g`#@_^   v\\g39$&lt;<br/>^8:+1,+5_5&lt;&gt;-:0\\`|<br/>v:-\\g39_^#:&lt;*:p39&lt;<br/>&gt;0\\`:!\"0\"+#^ ,#$_^</pre>"}, {"lang": "C", "loc": 58, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> u64<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co2\">#define FIB_INVALID (~(u64)0)</span><br/>\u00a0<br/>u64 fib<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\t<span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"nu0\">21</span><span class=\"sy0\">,</span> <span class=\"nu0\">34</span><span class=\"sy0\">,</span> <span class=\"nu0\">55</span><span class=\"sy0\">,</span> <span class=\"nu0\">89</span><span class=\"sy0\">,</span> <span class=\"nu0\">144</span><span class=\"sy0\">,</span> <span class=\"nu0\">233</span><span class=\"sy0\">,</span> <span class=\"nu0\">377</span><span class=\"sy0\">,</span> <span class=\"nu0\">610</span><span class=\"sy0\">,</span> <span class=\"nu0\">987</span><span class=\"sy0\">,</span> <span class=\"nu0\">1597</span><span class=\"sy0\">,</span><br/>\t<span class=\"nu0\">2584</span><span class=\"sy0\">,</span> <span class=\"nu0\">4181</span><span class=\"sy0\">,</span> <span class=\"nu0\">6765</span><span class=\"sy0\">,</span> <span class=\"nu0\">10946</span><span class=\"sy0\">,</span> <span class=\"nu0\">17711</span><span class=\"sy0\">,</span> <span class=\"nu0\">28657</span><span class=\"sy0\">,</span> <span class=\"nu0\">46368</span><span class=\"sy0\">,</span> <span class=\"nu0\">75025</span><span class=\"sy0\">,</span> <span class=\"nu0\">121393</span><span class=\"sy0\">,</span> <span class=\"nu0\">196418</span><span class=\"sy0\">,</span><br/>\t<span class=\"nu0\">317811</span><span class=\"sy0\">,</span> <span class=\"nu0\">514229</span><span class=\"sy0\">,</span> <span class=\"nu0\">832040</span><span class=\"sy0\">,</span> <span class=\"nu0\">1346269</span><span class=\"sy0\">,</span> <span class=\"nu0\">2178309</span><span class=\"sy0\">,</span> <span class=\"nu0\">3524578</span><span class=\"sy0\">,</span> <span class=\"nu0\">5702887</span><span class=\"sy0\">,</span> <span class=\"nu0\">9227465</span><span class=\"sy0\">,</span><br/>\t<span class=\"nu0\">14930352</span><span class=\"sy0\">,</span> <span class=\"nu0\">24157817</span><span class=\"sy0\">,</span> <span class=\"nu0\">39088169</span><span class=\"sy0\">,</span> <span class=\"nu0\">63245986</span><span class=\"sy0\">,</span> <span class=\"nu0\">102334155</span><span class=\"sy0\">,</span> <span class=\"nu0\">165580141</span><span class=\"sy0\">,</span><br/>\t<span class=\"nu0\">267914296</span><span class=\"sy0\">,</span> <span class=\"nu0\">433494437</span><span class=\"sy0\">,</span> <span class=\"nu0\">701408733</span><span class=\"sy0\">,</span> <span class=\"nu0\">1134903170</span><span class=\"sy0\">,</span> <span class=\"nu0\">1836311903</span><span class=\"sy0\">,</span><br/>\t2971215073ULL<span class=\"sy0\">,</span> 4807526976ULL<span class=\"sy0\">,</span> 7778742049ULL<span class=\"sy0\">,</span> 12586269025ULL<span class=\"sy0\">,</span><br/>\t20365011074ULL<span class=\"sy0\">,</span> 32951280099ULL<span class=\"sy0\">,</span> 53316291173ULL<span class=\"sy0\">,</span> 86267571272ULL<span class=\"sy0\">,</span><br/>\t139583862445ULL<span class=\"sy0\">,</span> 225851433717ULL<span class=\"sy0\">,</span> 365435296162ULL<span class=\"sy0\">,</span> 591286729879ULL<span class=\"sy0\">,</span><br/>\t956722026041ULL<span class=\"sy0\">,</span> 1548008755920ULL<span class=\"sy0\">,</span> 2504730781961ULL<span class=\"sy0\">,</span> 4052739537881ULL<span class=\"sy0\">,</span><br/>\t6557470319842ULL<span class=\"sy0\">,</span> 10610209857723ULL<span class=\"sy0\">,</span> 17167680177565ULL<span class=\"sy0\">,</span><br/>\u00a0<br/>\t27777890035288ULL <span class=\"co1\">// this 65-th one is for range check</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>u64 fibbinary<span class=\"br0\">(</span>u64 n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> fib<span class=\"br0\">[</span><span class=\"nu0\">64</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> FIB_INVALID<span class=\"sy0\">;</span><br/>\u00a0<br/>\tu64 ret <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">64</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--;</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&gt;=</span> fib<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tret <span class=\"sy0\">|=</span> 1ULL <span class=\"sy0\">&lt;&lt;</span> i<span class=\"sy0\">;</span><br/>\t\t\tn <span class=\"sy0\">-=</span> fib<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> ret<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> bprint<span class=\"br0\">(</span>u64 n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> width<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>width <span class=\"sy0\">&gt;</span> <span class=\"nu0\">64</span><span class=\"br0\">)</span> width <span class=\"sy0\">=</span> <span class=\"nu0\">64</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tu64 b<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>b <span class=\"sy0\">=</span> 1ULL <span class=\"sy0\">&lt;&lt;</span> <span class=\"br0\">(</span>width <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> b<span class=\"sy0\">;</span> b <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span>b <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>n<br/>\t\t\t<span class=\"sy0\">?</span> <span class=\"st0\">'0'</span><br/>\t\t\t<span class=\"sy0\">:</span> b <span class=\"sy0\">&gt;</span> n\t<span class=\"sy0\">?</span> <span class=\"st0\">' '</span><br/>\t\t\t\t<span class=\"sy0\">:</span> b <span class=\"sy0\">&amp;</span> n <span class=\"sy0\">?</span> <span class=\"st0\">'1'</span> <span class=\"sy0\">:</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%2d:\"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">,</span> bprint<span class=\"br0\">(</span>fibbinary<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 37, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co1\">// For a class N which implements Zeckendorf numbers:</span><br/><span class=\"co1\">// I define an increment operation ++()</span><br/><span class=\"co1\">// I define a comparison operation &lt;=(other N)</span><br/><span class=\"co1\">// Nigel Galloway October 22nd., 2012</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"kw2\">class</span> N <span class=\"br0\">{</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>  <span class=\"kw4\">int</span> dVal <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, dLen<span class=\"sy4\">;</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  N<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"kw4\">const</span><span class=\"sy2\">*</span> x <span class=\"sy1\">=</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span>, q <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy4\">;</span> x<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i<span class=\"sy2\">++</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>dLen <span class=\"sy1\">=</span> <span class=\"sy2\">--</span>i<span class=\"sy2\">/</span><span class=\"nu0\">2</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i<span class=\"sy2\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      dVal<span class=\"sy2\">+</span><span class=\"sy1\">=</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy2\">-</span><span class=\"nu0\">48</span><span class=\"br0\">)</span><span class=\"sy2\">*</span>q<span class=\"sy4\">;</span><br/>      q<span class=\"sy2\">*</span><span class=\"sy1\">=</span><span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw4\">const</span> N<span class=\"sy3\">&amp;</span> operator<span class=\"sy2\">++</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dLen <span class=\"sy1\">&lt;</span> i<span class=\"br0\">)</span> dLen <span class=\"sy1\">=</span> i<span class=\"sy4\">;</span><br/>      <span class=\"kw1\">switch</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy1\">&gt;&gt;</span> <span class=\"br0\">(</span>i<span class=\"sy2\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">0</span><span class=\"sy4\">:</span> dVal <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>i<span class=\"sy2\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span> dVal <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>i<span class=\"sy2\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>dVal <span class=\"sy1\">&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy2\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"sy2\">*</span><span class=\"kw3\">this</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy4\">:</span> dVal <span class=\"sy3\">&amp;</span><span class=\"sy1\">=</span> ~<span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span>i<span class=\"sy2\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw4\">const</span> <span class=\"kw4\">bool</span> operator<span class=\"sy1\">&lt;=</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> N<span class=\"sy3\">&amp;</span> other<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> dVal <span class=\"sy1\">&lt;=</span> other.<span class=\"me1\">dVal</span><span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>  <span class=\"kw2\">friend</span> std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span> operator<span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span><span class=\"sy3\">&amp;</span>, <span class=\"kw4\">const</span> N<span class=\"sy3\">&amp;</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>N operator <span class=\"st0\">\"\"</span> N<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"kw4\">const</span><span class=\"sy2\">*</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> N<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span> <span class=\"sy3\">&amp;</span>operator<span class=\"sy1\">&lt;&lt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">ostream</span> <span class=\"sy3\">&amp;</span>os, <span class=\"kw4\">const</span> N <span class=\"sy3\">&amp;</span>G<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">const</span> <span class=\"kw4\">static</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> dig<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"st0\">\"00\"</span>,<span class=\"st0\">\"01\"</span>,<span class=\"st0\">\"10\"</span><span class=\"br0\">}</span>, dig1<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"st0\">\"\"</span>,<span class=\"st0\">\"1\"</span>,<span class=\"st0\">\"10\"</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>G.<span class=\"me1\">dVal</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> os <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"0\"</span><span class=\"sy4\">;</span><br/>  os <span class=\"sy1\">&lt;&lt;</span> dig1<span class=\"br0\">[</span><span class=\"br0\">(</span>G.<span class=\"me1\">dVal</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"br0\">(</span>G.<span class=\"me1\">dLen</span><span class=\"sy2\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> G.<span class=\"me1\">dLen</span><span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i<span class=\"sy2\">--</span><span class=\"br0\">)</span> os <span class=\"sy1\">&lt;&lt;</span> dig<span class=\"br0\">[</span><span class=\"br0\">(</span>G.<span class=\"me1\">dVal</span> <span class=\"sy1\">&gt;&gt;</span> <span class=\"br0\">(</span>i<span class=\"sy2\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">&amp;</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> os<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 67, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> Zeckendorf<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">uint</span> Fibonacci<span class=\"br0\">(</span><span class=\"kw4\">uint</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> Fibonacci<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> Fibonacci<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> Zeckendorf<span class=\"br0\">(</span><span class=\"kw4\">uint</span> num<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            IList<span class=\"sy0\">&lt;</span><span class=\"kw4\">uint</span><span class=\"sy0\">&gt;</span> fibonacciNumbers <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">uint</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">uint</span> fibPosition <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">uint</span> currentFibonaciNum <span class=\"sy0\">=</span> Fibonacci<span class=\"br0\">(</span>fibPosition<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">do</span><br/>            <span class=\"br0\">{</span><br/>                fibonacciNumbers<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>currentFibonaciNum<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                currentFibonaciNum <span class=\"sy0\">=</span> Fibonacci<span class=\"br0\">(</span><span class=\"sy0\">++</span>fibPosition<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>currentFibonaciNum <span class=\"sy0\">&lt;=</span> num<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">uint</span> temp <span class=\"sy0\">=</span> num<span class=\"sy0\">;</span><br/>            StringBuilder output <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span> item <span class=\"kw1\">in</span> fibonacciNumbers<span class=\"sy0\">.</span><span class=\"me1\">Reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>item <span class=\"sy0\">&lt;=</span> temp<span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    output<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    temp <span class=\"sy0\">-=</span> item<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">else</span><br/>                <span class=\"br0\">{</span><br/>                    output<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> output<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">string</span> zeckendorfRepresentation <span class=\"sy0\">=</span> Zeckendorf<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}\u00a0: {1}\"</span>, i, zeckendorfRepresentation<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 13, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">def</span> fibs <span class=\"br0\">(</span><span class=\"kw1\">lazy-cat</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"sy0\">+</span> fibs <span class=\"br0\">(</span><span class=\"kw1\">rest</span> fibs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> z <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> n<span class=\"br0\">)</span><br/>    <span class=\"st0\">\"0\"</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>ps <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> fibs <span class=\"br0\">(</span><span class=\"kw1\">take-while</span> #<span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"sy0\">%</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">rest</span> <span class=\"kw1\">reverse</span><span class=\"br0\">)</span><br/>          fz <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>s n<span class=\"br0\">]</span> p<span class=\"br0\">]</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> n p<span class=\"br0\">)</span><br/>                  <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">conj</span> s <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> n p<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>                  <span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">conj</span> s <span class=\"nu0\">0</span><span class=\"br0\">)</span> n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> ps <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> fz <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span> n<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">first</span> <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">str</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>n <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">0</span> <span class=\"nu0\">21</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>println n <span class=\"br0\">(</span>z n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 15, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> zeckendorf <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>   <span class=\"st0\">\"returns zeckendorf integer of n (see OEIS A003714)\"</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>fib '<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"co1\">;; extend Fibonacci sequence long enough</span><br/>\t<span class=\"br0\">(</span>loop while <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> fib<span class=\"br0\">)</span> n<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t      <span class=\"br0\">(</span>push <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">car</span> fib<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> fib<span class=\"br0\">)</span><span class=\"br0\">)</span> fib<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>loop with r <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> for f in fib <span class=\"kw1\">do</span><br/>\t      <span class=\"br0\">(</span><span class=\"kw1\">setf</span> r <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t      <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> n f<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> n <span class=\"br0\">(</span>- n f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t     <span class=\"br0\">(</span>incf r<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t      finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; task requirement</span><br/><span class=\"br0\">(</span>loop for i from <span class=\"nu0\">0</span> to <span class=\"nu0\">20</span> <span class=\"kw1\">do</span><br/>      <span class=\"br0\">(</span>format t <span class=\"st0\">\"~2D: ~2R~%\"</span> i <span class=\"br0\">(</span>zeckendorf i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 10, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">functional</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">size_t</span><br/>    .<span class=\"me1\">max</span><br/>    .<span class=\"me1\">iota</span><br/>    .<span class=\"me1\">filter</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>a <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    .<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">21</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">binaryReverseArgs</span><span class=\"sy0\">!</span>writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%b<span class=\"es1\">\\n</span>%)\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 29, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; special fib's starting with 1 2 3 5 ...</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>fibonacci n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>fibonacci <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>fibonacci <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>remember 'fibonacci #<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>constant \u03a6 <span class=\"br0\">(</span><span class=\"sy0\">//</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>constant <span class=\"kw1\">log</span>\u03a6 <span class=\"br0\">(</span><span class=\"kw1\">log</span> \u03a6<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">;; find i\u00a0: fib(i) &gt;= n</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>iFib n<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">floor</span> <span class=\"br0\">(</span><span class=\"sy0\">//</span> <span class=\"br0\">(</span><span class=\"kw1\">log</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> n \u03a6<span class=\"br0\">)</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">log</span>\u03a6<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; left trim zeroes</span><br/><span class=\"br0\">(</span>string<span class=\"sy0\">-</span>delimiter <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>zeck<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> digits<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span>first digits<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>            <span class=\"br0\">(</span>string<span class=\"sy0\">-</span>join digits <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <br/>            <span class=\"br0\">(</span>zeck<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span>rest digits<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>Zeck n<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"sy0\">&lt;</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">\"no negative zeck\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">inexact?</span> n<span class=\"br0\">)</span> <span class=\"st0\">\"no floating zeck\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">zero?</span> n<span class=\"br0\">)</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span>zeck<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span><br/>                <span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">s</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span>take fibonacci <span class=\"br0\">(</span>iFib n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"sy0\">&gt;</span> <span class=\"kw1\">s</span> n<span class=\"br0\">)</span> <span class=\"nu0\">0</span> <br/>                    <span class=\"br0\">(</span><span class=\"kw1\">begin</span> <span class=\"br0\">(</span><span class=\"sy0\">-=</span> n <span class=\"kw1\">s</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 64, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import system'collections.<br/>import system'text.<br/>import extensions.<br/>\u00a0<br/>extension op<br/>{<br/>    fibonacci<br/>    [<br/>        if (self &lt; 2)<br/>        [ <br/>            ^ self<br/>        ];<br/>        [<br/>            ^ (self - 1) fibonacci + (self - 2) fibonacci.<br/>        ].<br/>    ]<br/>\u00a0<br/>    zeckendorf<br/>    [<br/>        var fibonacciNumbers\u00a0:= list&lt;IntNumber&gt;(10).<br/>\u00a0<br/>        int num\u00a0:= self.<br/>        int fibPosition\u00a0:= 2.<br/>        int currentFibonaciNum\u00a0:= fibPosition fibonacci.<br/>\u00a0<br/>        while (currentFibonaciNum &lt;= num)<br/>        [<br/>            fibonacciNumbers append:currentFibonaciNum.<br/>\u00a0<br/>            fibPosition\u00a0:= fibPosition + 1.<br/>            currentFibonaciNum\u00a0:= fibPosition fibonacci.<br/>        ].<br/>\u00a0<br/>        textbuffer output\u00a0:= TextBuilder new.<br/>        int temp\u00a0:= num.<br/>\u00a0<br/>        fibonacciNumbers sequenceReverse; forEach(:item)<br/>        [<br/>            if (item &lt;= temp)<br/>            [<br/>                output &lt;&lt; \"1\".<br/>                temp\u00a0:= temp - item.<br/>            ];<br/>            [<br/>                output &lt;&lt; \"0\".<br/>            ].<br/>        ].<br/>\u00a0<br/>        ^ output literal.<br/>    ]<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    1 to:20 do(:i)<br/>    [<br/>        var zeckendorfRepresentation\u00a0:= i zeckendorf.<br/>\u00a0<br/>        console printFormatted(\"{0}\u00a0: {1}\",i,i zeckendorf); writeLine.<br/>    ].<br/>\u00a0<br/>    console readChar.<br/>].</pre>"}, {"lang": "Elixir", "loc": 13, "block": "<pre class=\"text highlighted_source\">defmodule Zeckendorf do<br/>  def number do<br/>    Stream.unfold(0, fn n -&gt; zn_loop(n) end)<br/>  end<br/>\u00a0<br/>  defp zn_loop(n) do<br/>    bin = Integer.to_string(n, 2)<br/>    if String.match?(bin, ~r/11/), do: zn_loop(n+1), else: {bin, n+1}<br/>  end<br/>end<br/>\u00a0<br/>Zeckendorf.number |&gt; Enum.take(21) |&gt; Enum.with_index<br/>|&gt; Enum.each(fn {zn, i} -&gt; IO.puts \"#{i}: #{zn}\" end)</pre>"}, {"lang": "F#", "loc": 14, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> fib <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">unfold</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Some<span class=\"br0\">(</span>x, <span class=\"br0\">(</span>y, x <span class=\"sy0\">+</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> zeckendorf n <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"br0\">[</span><span class=\"st0\">\"0\"</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">let</span> folder k state <span class=\"sy0\">=</span><br/>            <span class=\"kw1\">let</span> <span class=\"br0\">(</span>n, z<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">fst</span> state<span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"kw3\">snd</span> state<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;=</span> k <span class=\"kw1\">then</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> k, <span class=\"st0\">\"1\"</span>\u00a0:: z<span class=\"br0\">)</span><br/>            <span class=\"kw1\">else</span> <span class=\"br0\">(</span>n, <span class=\"st0\">\"0\"</span>\u00a0:: z<span class=\"br0\">)</span><br/>        <span class=\"kw1\">let</span> fb <span class=\"sy0\">=</span> fib <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">takeWhile</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span> i<span class=\"sy0\">&lt;=</span>n<span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">toList</span><br/>        <span class=\"kw3\">snd</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">foldBack</span> folder fb <span class=\"br0\">(</span>n, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">rev</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"nu0\">0</span> .. <span class=\"nu0\">20</span> <span class=\"kw1\">do</span> printfn <span class=\"st0\">\"%2d:\u00a0%8s\"</span> i <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">concat</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">(</span>zeckendorf i<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 11, "block": "<pre class=\"text highlighted_source\">USING: formatting kernel locals make math sequences\u00a0;<br/>\u00a0<br/>:: fib&lt;= ( n -- seq )<br/>    1 2 [ [ dup n &lt;= ] [ 2dup + [ , ] 2dip ] while drop , ]<br/>    { } make\u00a0;<br/>\u00a0<br/>:: zeck ( n -- str )<br/>    0\u00a0:&gt; s! n fib&lt;= &lt;reversed&gt;<br/>    [ dup s + n &lt;= [ s + s! 49 ] [ drop 48 ] if ] \"\" map-as\u00a0;<br/>\u00a0<br/>21 &lt;iota&gt; [ dup zeck \"%2d:\u00a0%6s\\n\" printf ] each</pre>"}, {"lang": "Forth", "loc": 15, "block": "<pre class=\"text highlighted_source\">: fib&lt;= ( n -- n )<br/>    &gt;r 0 1 BEGIN dup <a class=\"__cf_email__\" data-cfemail=\"700230\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt;= WHILE  tuck +  REPEAT  drop rdrop\u00a0;<br/>\u00a0<br/>: z. ( n -- )<br/>   dup fib&lt;= dup . -<br/>   BEGIN\u00a0?dup WHILE<br/>      dup fib&lt;= dup [char] + emit space . -<br/>   REPEAT\u00a0;<br/>\u00a0<br/>: tab  9 emit\u00a0;<br/>\u00a0<br/>: zeckendorf ( -- )<br/>    21 0 DO<br/>        cr i 2 .r tab i z.<br/>    LOOP\u00a0;</pre>"}, {"lang": "Fortran", "loc": 1, "block": "<pre class=\"fortran highlighted_source\">F<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"kw4\">SQRT</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">**</span>N <span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span> <span class=\"kw4\">SQRT</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">**</span>N<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"kw4\">SQRT</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">**</span>N<span class=\"br0\">)</span></pre>"}, {"lang": "FreeBASIC", "loc": 68, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 17-10-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co2\">#Define max 92 ' max for Fibonacci number</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">Shared</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> fib<span class=\"br0\">(</span>max<span class=\"br0\">)</span><br/>\u00a0<br/>fib<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>fib<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">For</span> x <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> max<br/>  fib<span class=\"br0\">(</span>x<span class=\"br0\">)</span> = fib<span class=\"br0\">(</span>x-<span class=\"nu0\">1</span><span class=\"br0\">)</span> + fib<span class=\"br0\">(</span>x-<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> num2zeck<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/><span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"Error: no negative numbers allowed\"</span><br/>  <span class=\"kw1\">Beep</span>\u00a0: <span class=\"kw1\">Sleep</span> <span class=\"nu0\">5000</span>,<span class=\"nu0\">1</span>\u00a0: <span class=\"kw1\">End</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/><span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> zeckendorf<br/>\u00a0<br/>  <span class=\"kw1\">For</span> x <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = max <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> -<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> fib<span class=\"br0\">(</span>x<span class=\"br0\">)</span> &lt;= n <span class=\"kw1\">Then</span><br/>      zeckendorf = zeckendorf + <span class=\"st0\">\"1\"</span><br/>      n = n - fib<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Else</span><br/>      zeckendorf = zeckendorf + <span class=\"st0\">\"0\"</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"kw1\">LTrim</span><span class=\"br0\">(</span>zeckendorf, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"co1\">' get rid of leading zeroes</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> x, e<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> zeckendorf<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"number       zeckendorf\"</span><br/>\u00a0<br/><span class=\"kw1\">For</span> x = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">200000</span><br/>\u00a0<br/>  zeckendorf = num2zeck<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> x &lt;= <span class=\"nu0\">20</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> x, zeckendorf<br/>\u00a0<br/>  <span class=\"co1\">' check for two consecutive Fibonacci numbers</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw1\">InStr</span><span class=\"br0\">(</span>zeckendorf, <span class=\"st0\">\"11\"</span><span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\" Error: two consecutive Fibonacci numbers \"</span>; x, zeckendorf<br/>    e = e +<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">If</span> e = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\" No Zeckendorf numbers with two consecutive Fibonacci numbers found\"</span><br/><span class=\"kw1\">Else</span><br/>  <span class=\"kw1\">Print</span> e; <span class=\"st0\">\" error(s) found\"</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 31, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">20</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%2d\u00a0%7b<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> zeckendorf<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> zeckendorf<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// initial arguments of fib0 = 1 and fib1 = 1 will produce</span><br/>    <span class=\"co1\">// the Fibonacci sequence {1, 2, 3,..} on the stack as successive</span><br/>    <span class=\"co1\">// values of fib1.</span><br/>    _<span class=\"sy1\">,</span> set <span class=\"sy2\">:=</span> zr<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> set<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> zr<span class=\"sy1\">(</span>fib0<span class=\"sy1\">,</span> fib1<span class=\"sy1\">,</span> n <span class=\"kw4\">int</span><span class=\"sy1\">,</span> bit <span class=\"kw4\">uint</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>remaining<span class=\"sy1\">,</span> set <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> fib1 &gt; n <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> n<span class=\"sy1\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// recurse.</span><br/>    <span class=\"co1\">// construct sequence on the way in, construct ZR on the way out.</span><br/>    remaining<span class=\"sy1\">,</span> set <span class=\"sy2\">=</span> zr<span class=\"sy1\">(</span>fib1<span class=\"sy1\">,</span> fib0<span class=\"sy3\">+</span>fib1<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> bit<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> fib1 &lt;<span class=\"sy2\">=</span> remaining <span class=\"sy1\">{</span><br/>        set <span class=\"sy2\">|=</span> <span class=\"nu0\">1</span> &lt;&lt; bit<br/>        remaining <span class=\"sy2\">-=</span> fib1<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 9, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Bits<br/><span class=\"kw1\">import</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Numeric.html\"><span class=\"kw2\">Numeric</span></a><br/>\u00a0<br/>zeckendorf <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> b <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> ones <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"br0\">]</span> <span class=\"kw1\">where</span><br/>\tones <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>\tones x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">==</span> x <span class=\"sy0\">.</span>&amp;<span class=\"sy0\">.</span> <span class=\"br0\">(</span>x `shiftR` <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\tb x <span class=\"sy0\">=</span> showIntAtBase <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"st0\">\"01\"</span><span class=\"sy0\">!!</span><span class=\"br0\">)</span> x <span class=\"st0\">\"\"</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">21</span> zeckendorf</pre>"}, {"lang": "J", "loc": 31, "block": "<pre class=\"j highlighted_source\">\u00a0<br/>fib=: <span class=\"nu0\">3</span>\u00a0: <span class=\"nu0\">0</span> \" <span class=\"nu0\">0</span><br/> mp=. +/ .*<br/> {.{: mp/ mp~^:<span class=\"sy0\">(</span>I.|.#:<span class=\"kw2\">y</span><span class=\"sy0\">)</span> <span class=\"nu0\">2</span> <span class=\"nu0\">2</span>$<span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1x</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>phi=: -:<span class=\"nu0\">1</span>+%:<span class=\"nu0\">5</span><br/>\u00a0<br/>fi =: <span class=\"nu0\">3</span>\u00a0: <span class=\"st_h\">'n - y&lt;fib n=. 0&gt;.(1=y)-~&gt;.(phi^.%:5)+phi^.y'</span><br/>\u00a0<br/>fsum=: <span class=\"nu0\">3</span>\u00a0: <span class=\"nu0\">0</span><br/> z=. <span class=\"nu0\">0</span>$r=. <span class=\"kw2\">y</span><br/> <span class=\"kw1\">while.</span> <span class=\"nu0\">3</span>&lt;r <span class=\"kw1\">do.</span><br/>  <span class=\"kw2\">m</span>=. fib fi r<br/>  z=. z,<span class=\"kw2\">m</span><br/>  r=. r-<span class=\"kw2\">m</span><br/> <span class=\"kw1\">end.</span><br/> z,r$~<span class=\"sy0\">(</span>*r<span class=\"sy0\">)</span>+.<span class=\"nu0\">0</span>=<span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>Filter=: <span class=\"sy0\">(</span>#~`<span class=\"sy0\">)(</span>`:<span class=\"nu0\">6</span><span class=\"sy0\">)</span><br/>\u00a0<br/><span class=\"st_h\">' '</span>&amp;~:<a class=\"__cf_email__\" data-cfemail=\"b5f3dcd9c1d0c7f5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:\":@:#:@:#<a class=\"__cf_email__\" data-cfemail=\"f9d7b9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:<span class=\"sy0\">((</span>|. fib <span class=\"nu0\">2</span>+i.<span class=\"nu0\">8</span><span class=\"sy0\">)</span> e. fsum<span class=\"sy0\">)</span>&amp;.&gt;i.<span class=\"nu0\">3</span> <span class=\"nu0\">7</span><br/>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510<br/>\u2502<span class=\"nu0\">0</span>     \u2502<span class=\"nu0\">1</span>     \u2502<span class=\"nu0\">10</span>    \u2502<span class=\"nu0\">100</span>   \u2502<span class=\"nu0\">101</span>   \u2502<span class=\"nu0\">1000</span>  \u2502<span class=\"nu0\">1001</span>  \u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">1010</span>  \u2502<span class=\"nu0\">10000</span> \u2502<span class=\"nu0\">10001</span> \u2502<span class=\"nu0\">10010</span> \u2502<span class=\"nu0\">10100</span> \u2502<span class=\"nu0\">10101</span> \u2502<span class=\"nu0\">100000</span>\u2502<br/>\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2524<br/>\u2502<span class=\"nu0\">100001</span>\u2502<span class=\"nu0\">100010</span>\u2502<span class=\"nu0\">100100</span>\u2502<span class=\"nu0\">100101</span>\u2502<span class=\"nu0\">101000</span>\u2502<span class=\"nu0\">101001</span>\u2502<span class=\"nu0\">101010</span>\u2502<br/>\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518<br/>\u00a0</pre>"}, {"lang": "Java", "loc": 33, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Zeckendorf<br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> getZeckendorf<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">;</span><br/>    List<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> fibNumbers <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    fibNumbers.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> nextFib <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>nextFib <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      fibNumbers.<span class=\"me1\">add</span><span class=\"br0\">(</span>nextFib<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      nextFib <span class=\"sy0\">+=</span> fibNumbers.<span class=\"me1\">get</span><span class=\"br0\">(</span>fibNumbers.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    StringBuilder sb <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> fibNumbers.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">int</span> fibNumber <span class=\"sy0\">=</span> fibNumbers.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      sb.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">(</span>fibNumber <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fibNumber <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span><br/>        n <span class=\"sy0\">-=</span> fibNumber<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> sb.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Z(\"</span> <span class=\"sy0\">+</span> i <span class=\"sy0\">+</span> <span class=\"st0\">\")=\"</span> <span class=\"sy0\">+</span> getZeckendorf<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 135, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">const</span> main <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        unlines<span class=\"br0\">(</span><br/>            map<span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> concat<span class=\"br0\">(</span>zeckendorf<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// zeckendorf\u00a0:: Int -&gt; String</span><br/>    <span class=\"kw1\">const</span> zeckendorf <span class=\"sy0\">=</span> n <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> go <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>            n <span class=\"sy0\">&lt;</span> x <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>                Tuple<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">)</span> <span class=\"sy0\">:</span> Tuple<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> x<span class=\"sy0\">,</span> <span class=\"st0\">'1'</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>            snd<span class=\"br0\">(</span>mapAccumL<span class=\"br0\">(</span><br/>                go<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span><br/>                reverse<span class=\"br0\">(</span>fibUntil<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"st0\">'0'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// fibUntil\u00a0:: Int -&gt; [Int]</span><br/>    <span class=\"kw1\">const</span> fibUntil <span class=\"sy0\">=</span> n <span class=\"sy0\">=&gt;</span><br/>        cons<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> takeWhile<span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">&gt;=</span> x<span class=\"sy0\">,</span><br/>            map<span class=\"br0\">(</span>snd<span class=\"sy0\">,</span> iterateUntil<span class=\"br0\">(</span><br/>                tpl <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">&lt;=</span> fst<span class=\"br0\">(</span>tpl<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                tpl <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">const</span> x <span class=\"sy0\">=</span> snd<span class=\"br0\">(</span>tpl<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">return</span> Tuple<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> x <span class=\"sy0\">+</span> fst<span class=\"br0\">(</span>tpl<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                Tuple<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// GENERIC FUNCTIONS ----------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// Tuple (,)\u00a0:: a -&gt; b -&gt; (a, b)</span><br/>    <span class=\"kw1\">const</span> Tuple <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">{</span><br/>        type<span class=\"sy0\">:</span> <span class=\"st0\">'Tuple'</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">'0'</span><span class=\"sy0\">:</span> a<span class=\"sy0\">,</span><br/>        <span class=\"st0\">'1'</span><span class=\"sy0\">:</span> b<span class=\"sy0\">,</span><br/>        length<span class=\"sy0\">:</span> <span class=\"nu0\">2</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// concat\u00a0:: [[a]] -&gt; [a]</span><br/>    <span class=\"co1\">// concat\u00a0:: [String] -&gt; String</span><br/>    <span class=\"kw1\">const</span> concat <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span><br/>        <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span> xs.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">const</span> unit <span class=\"sy0\">=</span> <span class=\"st0\">'string'</span> <span class=\"sy0\">!==</span> <span class=\"kw1\">typeof</span> xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>                <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"st0\">''</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> unit.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span>unit<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// cons\u00a0:: a -&gt; [a] -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> cons <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        <span class=\"kw4\">Array</span>.<span class=\"me1\">isArray</span><span class=\"br0\">(</span>xs<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>            <span class=\"br0\">[</span>x<span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">(</span>x <span class=\"sy0\">+</span> xs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/>    <span class=\"kw1\">const</span> enumFromTo <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        m <span class=\"sy0\">&lt;=</span> n <span class=\"sy0\">?</span> iterateUntil<span class=\"br0\">(</span><br/>            x <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">&lt;=</span> x<span class=\"sy0\">,</span><br/>            x <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> x<span class=\"sy0\">,</span><br/>            m<br/>        <span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// fst\u00a0:: (a, b) -&gt; a</span><br/>    <span class=\"kw1\">const</span> fst <span class=\"sy0\">=</span> tpl <span class=\"sy0\">=&gt;</span> tpl<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// iterateUntil\u00a0:: (a -&gt; Bool) -&gt; (a -&gt; a) -&gt; a -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> iterateUntil <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> vs <span class=\"sy0\">=</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        let h <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>        while <span class=\"br0\">(</span><span class=\"sy0\">!</span>p<span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span>h <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"sy0\">,</span> vs.<span class=\"me1\">push</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> vs<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/>    <span class=\"kw1\">const</span> map <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// 'The mapAccumL function behaves like a combination of map and foldl;</span><br/>    <span class=\"co1\">// it applies a function to each element of a list, passing an accumulating</span><br/>    <span class=\"co1\">// parameter from left to right, and returning a final value of this</span><br/>    <span class=\"co1\">// accumulator together with the new list.' (See Hoogle)</span><br/>\u00a0<br/>    <span class=\"co1\">// mapAccumL\u00a0:: (acc -&gt; x -&gt; (acc, y)) -&gt; acc -&gt; [x] -&gt; (acc, [y])</span><br/>    <span class=\"kw1\">const</span> mapAccumL <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> acc<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        xs.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">const</span> pair <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> x<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> Tuple<span class=\"br0\">(</span>pair<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>pair<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> Tuple<span class=\"br0\">(</span>acc<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// reverse\u00a0:: [a] -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> reverse <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span><br/>        <span class=\"st0\">'string'</span> <span class=\"sy0\">!==</span> <span class=\"kw1\">typeof</span> xs <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>            xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span> <span class=\"sy0\">:</span> xs.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// snd\u00a0:: (a, b) -&gt; b</span><br/>    <span class=\"kw1\">const</span> snd <span class=\"sy0\">=</span> tpl <span class=\"sy0\">=&gt;</span> tpl<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// tail\u00a0:: [a] -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> tail <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span> xs.<span class=\"me1\">length</span> <span class=\"sy0\">?</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// takeWhile\u00a0:: (a -&gt; Bool) -&gt; [a] -&gt; [a]</span><br/>    <span class=\"co1\">// takeWhile\u00a0:: (Char -&gt; Bool) -&gt; String -&gt; String</span><br/>    <span class=\"kw1\">const</span> takeWhile <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> lng <span class=\"sy0\">=</span> xs.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&lt;</span> lng <span class=\"sy0\">?</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><br/>            <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>            until<span class=\"br0\">(</span><br/>                i <span class=\"sy0\">=&gt;</span> i <span class=\"sy0\">===</span> lng <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>p<span class=\"br0\">(</span>xs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                i <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> i<span class=\"sy0\">,</span><br/>                <span class=\"nu0\">0</span><br/>            <span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// unlines\u00a0:: [String] -&gt; String</span><br/>    <span class=\"kw1\">const</span> unlines <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// until\u00a0:: (a -&gt; Bool) -&gt; (a -&gt; a) -&gt; a -&gt; a</span><br/>    <span class=\"kw1\">const</span> until <span class=\"sy0\">=</span> <span class=\"br0\">(</span>p<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        let v <span class=\"sy0\">=</span> x<span class=\"sy0\">;</span><br/>        while <span class=\"br0\">(</span><span class=\"sy0\">!</span>p<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span> v <span class=\"sy0\">=</span> f<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> v<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// MAIN ---</span><br/>    <span class=\"kw1\">return</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 23, "block": "<pre class=\"text highlighted_source\">def zeckendorf:<br/>  # rfibs(n) returns an array of fibonnaci numbers up to n,<br/>  # beginning with 1, 2, ..., in reverse order<br/>  def rfibs(n):<br/>    # input: [f(i-2), f(i-1)]<br/>    [1,1] | [recurse( if .[1] &gt;= n then empty<br/>                      else [.[1], add]<br/>                      end ) | .[1]] | reverse;<br/>\u00a0<br/>  . as $n<br/>  # [n, rfibs, digit ]<br/>  | [$n, rfibs($n), \"\" ]<br/>  | [ recurse( .[0] as $n | .[1] as $f<br/>               | if ($f|length) == 0 then empty<br/>                 else<br/>                   $f[0] as $next<br/>                 | if $n &gt;= $next then [ ( $n - $next), $f[1:], \"1\"]<br/>\t\t   else [ $n, $f[1:], \"0\"]<br/>                   end<br/>                 end )<br/>      | .[2] ]<br/>  | if .[1] == \"0\" then .[2:] else . end  # remove leading 0 if any<br/>  | join(\"\")\u00a0;</pre>"}, {"lang": "Julia", "loc": 6, "block": "<pre class=\"text highlighted_source\">function zeck(n)<br/>    n &lt;= 0 &amp;&amp; return 0<br/>    fib = [2,1]; while fib[1] &lt; n unshift!(fib,sum(fib[1:2])) end<br/>    dig = Int[]; for f in fib f &lt;= n\u00a0? (push!(dig,1); n = n-f;)\u00a0: push!(dig,0) end<br/>    return dig[1] == 0\u00a0? dig[2:end]\u00a0: dig<br/>end</pre>"}, {"lang": "Kotlin", "loc": 39, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> LIMIT <span class=\"sy0\">=</span> <span class=\"nu0\">46</span>  <span class=\"co1\">// to stay within range of signed 32 bit integer</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fibs <span class=\"sy0\">=</span> fibonacci<span class=\"br0\">(</span>LIMIT<span class=\"br0\">)</span><br/>\u00a0<br/>fun fibonacci<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> IntArray <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">!</span>in <span class=\"nu0\">2</span>..<span class=\"me1\">LIMIT</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"n must be between 2 and $LIMIT\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fibs <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    fibs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    fibs<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">2</span> until n<span class=\"br0\">)</span> fibs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> fibs<span class=\"br0\">[</span>i - <span class=\"nu0\">1</span><span class=\"br0\">]</span> + fibs<span class=\"br0\">[</span>i - <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> fibs<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun zeckendorf<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"n must be non-negative\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> lastFibIndex <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">2</span>..<span class=\"me1\">LIMIT</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>fibs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            lastFibIndex <span class=\"sy0\">=</span> i - <span class=\"nu0\">1</span><br/>            break<br/>        <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nn <span class=\"sy0\">=</span> n - fibs<span class=\"br0\">[</span>lastFibIndex--<span class=\"br0\">]</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> zr <span class=\"sy0\">=</span> StringBuilder<span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in lastFibIndex downTo <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>fibs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> nn<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            zr.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">'1'</span><span class=\"br0\">)</span><br/>            nn -<span class=\"sy0\">=</span> fibs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>            zr.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> zr.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\" n   z\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">20</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"${\"</span><span class=\"sy0\">%</span>2d<span class=\"st0\">\".format(i)}\u00a0: ${zeckendorf(i)}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lingo", "loc": 29, "block": "<pre class=\"text highlighted_source\">-- Return the distinct Fibonacci numbers not greater than 'n'<br/>on fibsUpTo (n)<br/>    fibList = []<br/>    last = 1<br/>    current = 1<br/>    repeat while current &lt;= n<br/>        fibList.add(current)<br/>        nxt = last + current<br/>        last = current<br/>        current = nxt    <br/>    end repeat<br/>    return fibList<br/>end<br/>\u00a0<br/>-- Return the Zeckendorf representation of 'n'<br/>on zeckendorf (n)<br/>    fib = fibsUpTo(n)<br/>    zeck = \"\"<br/>    repeat with pos = fib.count down to 1<br/>        if n &gt;= fib[pos] then<br/>            zeck = zeck &amp; \"1\"<br/>            n = n - fib[pos]<br/>        else<br/>            zeck = zeck &amp; \"0\"<br/>        end if<br/>    end repeat<br/>    if zeck = \"\" then return \"0\"<br/>    return zeck<br/>end</pre>"}, {"lang": "Logo", "loc": 51, "block": "<pre class=\"text highlighted_source\">; return the (N+1)th Fibonacci number (1,2,3,5,8,13,...)<br/>to fib m<br/>  local \"n<br/>  make \"n sum\u00a0:m 1<br/>  if [lessequal?\u00a0:n 0] [output difference fib sum\u00a0:n 2 fib sum\u00a0:n 1]<br/>  global \"_fib<br/>  if [not name? \"_fib] [<br/>    make \"_fib [1 1]<br/>  ]<br/>  local \"length<br/>  make \"length count\u00a0:_fib<br/>  while [greater?\u00a0:n\u00a0:length] [<br/>    make \"_fib (lput (sum (last\u00a0:_fib) (last (butlast\u00a0:_fib)))\u00a0:_fib)<br/>    make \"length sum\u00a0:length 1<br/>  ]<br/>  output item\u00a0:n\u00a0:_fib<br/>end<br/>\u00a0<br/>; return the binary Zeckendorf representation of a nonnegative number<br/>to zeckendorf n<br/>  if [less?\u00a0:n 0] [(throw \"error [Number must be nonnegative.])]<br/>  (local \"i \"f \"result)<br/>  make \"i\u00a0:n<br/>  make \"f fib\u00a0:i<br/>  while [less?\u00a0:f\u00a0:n] [make \"i sum\u00a0:i 1 make \"f fib\u00a0:i]<br/>\u00a0<br/>  make \"result \"||<br/>  while [greater?\u00a0:i 0] [<br/>    ifelse [greaterequal?\u00a0:n\u00a0:f] [<br/>      make \"result lput 1\u00a0:result<br/>      make \"n difference\u00a0:n\u00a0:f<br/>    ] [<br/>      if [not empty?\u00a0:result] [<br/>        make \"result lput 0\u00a0:result<br/>      ]<br/>    ]<br/>    make \"i difference\u00a0:i 1<br/>    make \"f fib\u00a0:i<br/>  ]<br/>  if [equal?\u00a0:result \"||] [<br/>    make \"result 0<br/>  ]<br/>  output\u00a0:result<br/>end<br/>\u00a0<br/>type zeckendorf 0<br/>repeat 20 [<br/>  type word \"| | zeckendorf repcount<br/>]<br/>print []<br/>bye</pre>"}, {"lang": "Lua", "loc": 33, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Return the distinct Fibonacci numbers not greater than 'n'</span><br/><span class=\"kw1\">function</span> fibsUpTo <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> fibList<span class=\"sy0\">,</span> last<span class=\"sy0\">,</span> current<span class=\"sy0\">,</span> nxt <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> current <span class=\"sy0\">&lt;=</span> n <span class=\"kw1\">do</span><br/>        <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>fibList<span class=\"sy0\">,</span> current<span class=\"br0\">)</span><br/>        nxt <span class=\"sy0\">=</span> last <span class=\"sy0\">+</span> current<br/>        last <span class=\"sy0\">=</span> current<br/>        current <span class=\"sy0\">=</span> nxt    <br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> fibList<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Return the Zeckendorf representation of 'n'</span><br/><span class=\"kw1\">function</span> zeckendorf <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> fib<span class=\"sy0\">,</span> zeck <span class=\"sy0\">=</span> fibsUpTo<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">for</span> pos <span class=\"sy0\">=</span> <span class=\"sy0\">#</span>fib<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy0\">&gt;=</span> fib<span class=\"br0\">[</span>pos<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>            zeck <span class=\"sy0\">=</span> zeck <span class=\"sy0\">..</span> <span class=\"st0\">\"1\"</span><br/>            n <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> fib<span class=\"br0\">[</span>pos<span class=\"br0\">]</span><br/>        <span class=\"kw1\">else</span><br/>            zeck <span class=\"sy0\">=</span> zeck <span class=\"sy0\">..</span> <span class=\"st0\">\"0\"</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> zeck <span class=\"sy0\">==</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"0\"</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> zeck<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Main procedure</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" n<span class=\"es1\">\\t</span>| Zeckendorf(n)\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"kw3\">string.rep</span><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy0\">..</span> n<span class=\"sy0\">,</span> <span class=\"st0\">\"| \"</span> <span class=\"sy0\">..</span> zeckendorf<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 7, "block": "<pre class=\"text highlighted_source\">zeckendorf[0] = 0;<br/>zeckendorf[n_Integer]\u00a0:= <br/>  10^(# - 1) + zeckendorf[n - Fibonacci[# + 1]] &amp;@<br/>   LengthWhile[<br/>    Fibonacci /@ <br/>     Range[2, <a class=\"__cf_email__\" data-cfemail=\"87c4e2eeebeee9e0c7cbe8e0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[GoldenRatio, n <a class=\"__cf_email__\" data-cfemail=\"62311310162257\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]], # &lt;= n &amp;];<br/>zeckendorf /@ Range[0, 20]</pre>"}, {"lang": "Nim", "loc": 19, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>proc z(n): string =<br/>  if n == 0: return \"0\"<br/>  var fib = @[2,1]<br/>  var n = n<br/>  while fib[0] &lt; n: fib.insert(fib[0] + fib[1])<br/>  result = \"\"<br/>  for f in fib:<br/>    if f &lt;= n:<br/>      result.add '1'<br/>      n -= f<br/>    else:<br/>      result.add '0'<br/>  if result[0] == '0':<br/>    result = result[1..result.high]<br/>\u00a0<br/>for i in 0 .. 20:<br/>  echo align($i, 3),\" \",align(z(i), 8)</pre>"}, {"lang": "PARI/GP", "loc": 2, "block": "<pre class=\"parigp highlighted_source\">Z<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>n<span class=\"sy0\">,</span><span class=\"kw1\">print1</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>my<span class=\"br0\">(</span>k<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"kw1\">fibonacci</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">&lt;=</span>n<span class=\"sy0\">,</span>k<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">forstep</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span>k<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">,-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"kw1\">print1</span><span class=\"br0\">(</span><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">fibonacci</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">&lt;=</span>n<span class=\"sy0\">,</span>n<span class=\"sy0\">-=</span><span class=\"kw1\">fibonacci</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">print</span><br/><span class=\"kw1\">for</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">20</span><span class=\"sy0\">,</span>Z<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 24, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@fib</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> fib <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$fib</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"sy0\">//=</span> fib<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>fib<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> zeckendorf <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st0\">\"0\"</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$i</span><span class=\"sy0\">++</span> <span class=\"kw1\">while</span> fib<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$z</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"sy0\">--</span><span class=\"re0\">$i</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$z</span> <span class=\"sy0\">.=</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> fib<span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$z</span> <span class=\"sy0\">.=</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">-=</span> fib<span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$z</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%4d:\u00a0%8s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> zeckendorf<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">20</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 10, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">printf</span> <span class=\"st0\">\"%2d:\u00a0%8s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span><span class=\"sy0\">,</span> zeckendorf<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> zeckendorf<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"st_h\">'0'</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> zeckendorf<span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw1\">is</span> copy<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">constant</span> FIBS <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">*+*</span> <span class=\"sy0\">...</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">cache</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">[</span><span class=\"sy0\">~</span><span class=\"br0\">]</span> <span class=\"kw3\">map</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$n</span> <span class=\"sy0\">-=</span> <span class=\"re0\">$_</span> <span class=\"kw1\">if</span> <span class=\"kw1\">my</span> <span class=\"re0\">$digit</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$_</span><span class=\"sy0\">;</span><br/>        <span class=\"sy0\">+</span><span class=\"re0\">$digit</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"kw3\">reverse</span> FIBS <span class=\"sy0\">...^</span> <span class=\"sy0\">*</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 17, "block": "<pre class=\"text highlighted_source\">function zeckendorf(integer n)<br/>integer r = 0, c<br/>sequence fib = {1,1}<br/>    while fib[$]&lt;n do<br/>        fib &amp;= fib[$] + fib[$-1]<br/>    end while<br/>    for i=length(fib) to 2 by -1 do<br/>        c = n&gt;=fib[i]<br/>        r += r+c<br/>        n -= c*fib[i]<br/>    end for<br/>    return r<br/>end function<br/>\u00a0<br/>for i=0 to 20 do<br/>    printf(1,\"%2d:\u00a0%7b\\n\",{i,zeckendorf(i)})<br/>end for</pre>"}, {"lang": "PHP", "loc": 24, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$F</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$F</span><span class=\"br0\">[</span><a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$F</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$m</span><span class=\"br0\">)</span><br/>   <span class=\"re0\">$F</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$F</span><span class=\"br0\">[</span><a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$F</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$F</span><span class=\"br0\">[</span><a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$F</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$m</span><span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$F</span><span class=\"br0\">[</span><a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$F</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <a href=\"http://www.php.net/array_pop\"><span class=\"kw3\">array_pop</span></a><span class=\"br0\">(</span><span class=\"re0\">$F</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"re0\">$l</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$F</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">print</span> <span class=\"st0\">\"<span class=\"es4\">$n</span>: \"</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$F</span><span class=\"br0\">[</span><span class=\"re0\">$l</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">-</span> <span class=\"re0\">$F</span><span class=\"br0\">[</span><span class=\"re0\">$l</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">print</span> <span class=\"st_h\">'1'</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">print</span> <span class=\"st_h\">'0'</span><span class=\"sy0\">;</span><br/>      <span class=\"sy0\">--</span><span class=\"re0\">$l</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">print</span> <a href=\"http://www.php.net/str_repeat\"><span class=\"kw3\">str_repeat</span></a><span class=\"br0\">(</span><span class=\"st_h\">'0'</span><span class=\"sy0\">,</span><span class=\"re0\">$l</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">print</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"sy1\">?&gt;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 31, "block": "<pre class=\"text highlighted_source\">(de fib (N)<br/>   (let Fibs (1 1)<br/>      (while (&gt;= N (+ (car Fibs) (cadr Fibs)))<br/>         (push 'Fibs (+ (car Fibs) (cadr Fibs))) )<br/>      (uniq Fibs) ) )<br/>\u00a0<br/>(de zecken1 (N)<br/>   (make<br/>      (for I (fib N)<br/>         (if (&gt; I N)<br/>            (link 0)<br/>            (link 1)<br/>            (dec 'N I) ) ) ) )<br/>\u00a0<br/>(de zecken2 (N)<br/>   (make<br/>      (when (=0 N) (link 0))<br/>      (for I (fib N)<br/>         (when (&lt;= I N)<br/>            (link I)<br/>            (dec 'N I) ) ) ) )<br/>\u00a0<br/>(for (N 0 (&gt; 21 N) (inc N))<br/>   (tab (2 4 6 2 -10)<br/>      N <br/>      \" -&gt; \"<br/>      (zecken1 N)<br/>      \"  \"<br/>      (glue \" + \" (zecken2 N)) ) ) <br/>\u00a0<br/>(bye)</pre>"}, {"lang": "Plain TeX", "loc": 37, "block": "<pre class=\"text highlighted_source\">\\def\\genfibolist#1{% #creates the fibo list which sum&gt;=#1<br/>\t\\let\\fibolist\\empty\\def\\targetsum{#1}\\def\\fibosum{0}%<br/>\t\\genfibolistaux1,1\\relax<br/>}<br/>\\def\\genfibolistaux#1,#2\\relax{%<br/>\t\\ifnum\\fibosum&lt;\\targetsum\\relax<br/>\t\t\\edef\\fibosum{\\number\\numexpr\\fibosum+#2}%<br/>\t\t\\edef\\fibolist{#2,\\fibolist}%<br/>\t\t\\edef\\tempfibo{\\noexpand\\genfibolistaux#2,\\number\\numexpr#1+#2\\relax\\relax}%<br/>\t\t\\expandafter\\tempfibo<br/>\t\\fi<br/>}<br/>\\def\\zeckendorf#1{\\expandafter\\zeckendorfaux\\fibolist,\\relax#1\\relax\\relax0}<br/>\\def\\zeckendorfaux#1,#2\\relax#3\\relax#4\\relax#5{%<br/>\t\\ifx\\relax#2\\relax<br/>\t\t#4%<br/>\t\\else<br/>\t\t\\ifnum#3&lt;#1<br/>\t\t\t\\edef\\temp{#2\\relax#3\\relax#4\\ifnum#5=1 0\\fi\\relax#5}%<br/>\t\t\\else<br/>\t\t\t\\edef\\temp{#2\\relax\\number\\numexpr#3-#1\\relax\\relax#41\\relax1}%<br/>\t\t\\fi<br/>\t\t\\expandafter\\expandafter\\expandafter\\zeckendorfaux\\expandafter\\temp<br/>\t\\fi<br/>}<br/>\\newcount\\ii<br/>\\def\\listzeckendorf#1{%<br/>\t\\genfibolist{#1}%<br/>\t\\ii=0<br/>\t\\loop<br/>\t\t\\ifnum\\ii&lt;#1<br/>\t\t\\advance\\ii1<br/>\t\t\\number\\ii: \\zeckendorf\\ii\\endgraf<br/>\t\\repeat<br/>}<br/>\\listzeckendorf{20}% any integer accepted<br/>\\bye</pre>"}, {"lang": "PowerShell", "loc": 28, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>ZeckendorfNumber <span class=\"br0\">(</span> <span class=\"re0\">$N</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"co1\">#  Calculate relevant portation of Fibonacci series</span><br/>    <span class=\"re0\">$Fib</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>    <span class=\"kw3\">While</span> <span class=\"br0\">(</span> <span class=\"re0\">$Fib</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$N</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$Fib</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$Fib</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$Fib</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">#  Start with 0</span><br/>    <span class=\"re0\">$ZeckendorfNumber</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"co1\">#  For each number in the relevant portion of Fibonacci series</span><br/>    <span class=\"kw3\">For</span> <span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Fib</span>.Count <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-gt</span> <span class=\"nu0\">0</span>; <span class=\"re0\">$i</span><span class=\"sy0\">--</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"co1\">#  If Fibonacci number is less than or equal to remainder of N</span><br/>        <span class=\"kw3\">If</span> <span class=\"br0\">(</span> <span class=\"re0\">$Fib</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$N</span> <span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>            <span class=\"co1\">#  Double Z number and add 1 (equivalent to adding a '1' to the end of a binary number)</span><br/>            <span class=\"re0\">$ZeckendorfNumber</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ZeckendorfNumber</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            <span class=\"co1\">#  Reduce N by Fibonacci number, skip next Fibonacci number</span><br/>            <span class=\"re0\">$N</span> <span class=\"sy0\">-=</span> <span class=\"re0\">$Fib</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">--</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"co1\">#  If were aren't finished yet, double Z number</span><br/>        <span class=\"co1\">#  (equivalent to adding a '0' to the end of a binary number)</span><br/>        <span class=\"kw3\">If</span> <span class=\"br0\">(</span> <span class=\"re0\">$i</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$ZeckendorfNumber</span> <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$ZeckendorfNumber</span><br/>    <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 26, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.s zeck<span class=\"br0\">(</span>n.i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> f.i<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Define</span> i.i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>, o$<br/>  f<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span>\u00a0: f<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span> <br/>  <span class=\"kw1\">While</span> f<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>n <br/>    i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>\u00a0: <span class=\"kw1\">ReDim</span> f<span class=\"br0\">(</span>ArraySize<span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0: f<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>f<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>f<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <br/>  <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span>i <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span>    <br/>    <span class=\"kw1\">If</span> n<span class=\"sy0\">&gt;=</span>f<span class=\"br0\">(</span>i<span class=\"br0\">)</span>\u00a0: o$<span class=\"sy0\">+</span><span class=\"st0\">\"1\"</span>\u00a0: n<span class=\"sy0\">-</span>f<span class=\"br0\">(</span>i<span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Else</span>\u00a0: o$<span class=\"sy0\">+</span><span class=\"st0\">\"0\"</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>o$<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>\u00a0: o$<span class=\"sy0\">=</span><span class=\"kw2\">LTrim</span><span class=\"br0\">(</span>o$,<span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> o$<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Define</span> n.i, t$<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"st0\">\"Zeckendorf number representation\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"\\tNr.\\tZeckendorf\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">For</span> n<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">20</span><br/>  t$<span class=\"sy0\">=</span>zeck<span class=\"br0\">(</span>n<span class=\"br0\">)</span>  <br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">FindString</span><span class=\"br0\">(</span>t$,<span class=\"st0\">\"11\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Error: n= \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">+~</span><span class=\"st0\">\"\\tZeckendorf= \"</span><span class=\"sy0\">+</span>t$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Break</span><br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"\\t\"</span><span class=\"sy0\">+</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>,<span class=\"nu0\">3</span>,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">+~</span><span class=\"st0\">\"\\t\"</span><span class=\"sy0\">+</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span>t$,<span class=\"nu0\">7</span>,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>    <br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 34, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> fib<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    memo <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        memo.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"kw2\">sum</span><span class=\"br0\">(</span>memo<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">yield</span> memo.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> sequence_down_from_n<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> seq_generator<span class=\"br0\">)</span>:<br/>    seq <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> seq_generator<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>        seq.<span class=\"me1\">append</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> s <span class=\"sy0\">&gt;=</span> n: <span class=\"kw1\">break</span><br/>    <span class=\"kw1\">return</span> seq<span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> zeckendorf<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    seq <span class=\"sy0\">=</span> sequence_down_from_n<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> fib<span class=\"br0\">)</span><br/>    digits<span class=\"sy0\">,</span> nleft <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> n<br/>    <span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> seq:<br/>        <span class=\"kw1\">if</span> s <span class=\"sy0\">&lt;=</span> nleft:<br/>            digits.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            nleft -<span class=\"sy0\">=</span> s<br/>        <span class=\"kw1\">else</span>:<br/>            digits.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">assert</span> nleft <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">'Check all of n is accounted for'</span><br/>    <span class=\"kw1\">assert</span> <span class=\"kw2\">sum</span><span class=\"br0\">(</span>x*y <span class=\"kw1\">for</span> x<span class=\"sy0\">,</span>y <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>digits<span class=\"sy0\">,</span> seq<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> n<span class=\"sy0\">,</span> <span class=\"st0\">'Assert digits are correct'</span><br/>    <span class=\"kw1\">while</span> digits<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>        <span class=\"co1\"># Remove any zeroes padding L.H.S.</span><br/>        digits.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> digits<br/>\u00a0<br/>n <span class=\"sy0\">=</span> <span class=\"nu0\">20</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'Fibonacci digit multipliers:\u00a0%r'</span>\u00a0% sequence_down_from_n<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> fib<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'%3i:\u00a0%8s'</span>\u00a0% <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span> <span class=\"kw1\">for</span> d <span class=\"kw1\">in</span> zeckendorf<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 44, "block": "<pre class=\"text highlighted_source\">zeckendorf &lt;- function(number) {<br/>\u00a0<br/>  # Get an upper limit on Fibonacci numbers needed to cover number<br/>  indexOfFibonacciNumber &lt;- function(n) {<br/>    if (n &lt; 1) {<br/>      2<br/>    } else {<br/>      Phi &lt;- (1 + sqrt(5)) / 2<br/>      invertClosedFormula &lt;- log(n * sqrt(5)) / log(Phi)<br/>      ceiling(invertClosedFormula)<br/>    }<br/>  }<br/>\u00a0<br/>  upperLimit &lt;- indexOfFibonacciNumber(number)<br/>\u00a0<br/>  # Return the sequence as digits, sorted descending<br/>  fibonacciSequenceDigits &lt;- function(n) {<br/>    fibGenerator &lt;- function(f, ...) { c(f[2], sum(f)) }<br/>    fibSeq &lt;- Reduce(fibGenerator, 1:n, c(0,1), accumulate=TRUE)<br/>\u00a0<br/>    fibNums &lt;- unlist(lapply(fibSeq, head, n=1))<br/>\u00a0<br/>    # drop last F0 and F1 and reverse sequence<br/>    rev(fibNums[-2:-1])<br/>  }<br/>\u00a0<br/>  digits &lt;- fibonacciSequenceDigits(upperLimit)<br/>\u00a0<br/>  isInNumber &lt;- function(digit) {<br/>    if (number &gt;= digit) {<br/>      number &lt;&lt;- number - digit<br/>      1<br/>    } else {<br/>      0<br/>    }<br/>  }<br/>\u00a0<br/>  zeckSeq &lt;- Map(isInNumber, digits)<br/>\u00a0<br/>  # drop leading 0 and convert to String<br/>  gsub(\"^0+1\", \"1\", paste(zeckSeq, collapse=\"\"))<br/>}<br/>\u00a0<br/>print(unlist(lapply(0:20, zeckendorf)))</pre>"}, {"lang": "Racket", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket (require math)<br/>\u00a0<br/>(define (fibs n)<br/>  (reverse<br/>   (for/list ([i (in-naturals 2)] #:break (&gt; (fibonacci i) n))<br/>     (fibonacci i))))<br/>\u00a0<br/>(define (zechendorf n)<br/>  (match/values<br/>   (for/fold ([n n] [xs '()]) ([f (fibs n)])<br/>     (if (&gt; f n)<br/>         (values n       (cons 0 xs))<br/>         (values (- n f) (cons 1 xs))))<br/>   [(_ xs) (reverse xs)]))<br/>\u00a0<br/>(for/list ([n 21])<br/>  (list n (zechendorf n)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 23, "block": "<pre class=\"rexx highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* REXX ***************************************************************<br/>* 11.10.2012 Walter Pachl                                              <br/>**********************************************************************/</span><br/>fib=<span class=\"st0\">'13 8 5 3 2 1'</span>                                                   <br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">6</span> <span class=\"kw2\">To</span> <span class=\"nu0\">1</span> <span class=\"kw2\">By</span> -<span class=\"nu0\">1</span>                   <span class=\"coMULTI\">/* Prepare Fibonacci Numbers     */</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> fib f<span class=\"sy0\">.</span>i fib             <span class=\"coMULTI\">/* f.1 ... f.7                   */</span><br/>  <span class=\"kw3\">End</span>                                                                  <br/><span class=\"kw1\">Do</span> n=<span class=\"nu0\">0</span> <span class=\"kw2\">To</span> <span class=\"nu0\">20</span>                        <span class=\"coMULTI\">/* for all numbers in the task   */</span><br/>  m=n                               <span class=\"coMULTI\">/* copy of number                */</span><br/>  r=<span class=\"st0\">''</span>                              <span class=\"coMULTI\">/* result for n                  */</span><br/>  <span class=\"kw1\">Do</span> i=<span class=\"nu0\">6</span> <span class=\"kw2\">To</span> <span class=\"nu0\">1</span> <span class=\"kw2\">By</span> -<span class=\"nu0\">1</span>                 <span class=\"coMULTI\">/* loop through numbers          */</span><br/>    <span class=\"kw1\">If</span> m<span class=\"sy0\">&gt;</span>=f<span class=\"sy0\">.</span>i <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>               <span class=\"coMULTI\">/* f.i must be used              */</span><br/>      r=r<span class=\"sy0\">||</span><span class=\"nu0\">1</span>                        <span class=\"coMULTI\">/* 1 into result                 */</span><br/>      m=m-f<span class=\"sy0\">.</span>i                       <span class=\"coMULTI\">/* subtract                      */</span><br/>      <span class=\"kw3\">End</span>                                                              <br/>    <span class=\"kw3\">Else</span>                            <span class=\"coMULTI\">/* f.i is larger than the rest   */</span><br/>      r=r<span class=\"sy0\">||</span><span class=\"nu0\">0</span>                        <span class=\"coMULTI\">/* 0 into result                 */</span><br/>    <span class=\"kw3\">End</span>                                                                <br/>  r=<span class=\"kw6\">strip</span><span class=\"br0\">(</span>r,<span class=\"st0\">'L'</span>,<span class=\"st0\">'0'</span><span class=\"br0\">)</span>                <span class=\"coMULTI\">/* strip leading zeros           */</span><br/>  <span class=\"kw1\">If</span> r=<span class=\"st0\">''</span> <span class=\"kw3\">Then</span> r=<span class=\"st0\">'0'</span>                <span class=\"coMULTI\">/* take care of 0                */</span><br/>  <span class=\"kw1\">Say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>n,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"st0\">':  '</span><span class=\"kw6\">right</span><span class=\"br0\">(</span>r,<span class=\"nu0\">6</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/* show result                   */</span><br/>  <span class=\"kw3\">End</span></pre>"}, {"lang": "Ring", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Zeckendorf number representation<br/>\u00a0<br/>see \"0 0\" + nl<br/>for n = 1 to 20<br/>     see \"\" + n + \" \" + zeckendorf(n) + nl<br/>next<br/>\u00a0<br/>func zeckendorf(n)<br/>       fib = list(45)<br/>       fib[1] = 1<br/>       fib[2] = 1<br/>       i = 2<br/>       o = \"\"<br/>       while fib[i] &lt;= n<br/>               i = i + 1<br/>               fib[i] = fib[i-1] + fib[i-2]<br/>       end<br/>       while i\u00a0!= 2<br/>               i = i - 1<br/>               if n &gt;= fib[i]<br/>                   o = o + \"1\"<br/>                   n = n - fib[i]<br/>               else<br/>                   o = o + \"0\"<br/>               ok<br/>        end<br/>        return o<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 12, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> zeckendorf<br/>  <span class=\"kw2\">return</span> to_enum<span class=\"br0\">(</span>__method__<span class=\"br0\">)</span> <span class=\"kw1\">unless</span> block_given?<br/>  x = <span class=\"nu0\">0</span><br/>  <span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>    bin = x.<span class=\"me1\">to_s</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">yield</span> bin <span class=\"kw1\">unless</span> bin.<span class=\"kw1\">include</span>?<span class=\"br0\">(</span><span class=\"st0\">\"11\"</span><span class=\"br0\">)</span> <br/>    x <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>zeckendorf.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">21</span><span class=\"br0\">)</span>.<span class=\"me1\">each_with_index</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>x,i<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\"%3d:\u00a0%8s\"</span><span class=\"sy0\">%</span> <span class=\"br0\">[</span>i, x<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 30, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> zNum<span class=\"br0\">(</span> n<span class=\"sy0\">:</span>BigInt <span class=\"br0\">)</span> <span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"0\"</span>\t<span class=\"co1\">// Short-circuit this and return zero if we were given zero</span><br/>\u00a0<br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> v <span class=\"sy0\">=</span> n.<span class=\"me1\">abs</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fibs <span class=\"sy0\">:</span> Stream<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> series<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>BigInt,j<span class=\"sy0\">:</span>BigInt<span class=\"br0\">)</span><span class=\"sy0\">:</span>Stream<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i <span class=\"sy0\">#::</span> series<span class=\"br0\">(</span>j, i+j<span class=\"br0\">)</span><span class=\"sy0\">;</span> series<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">tail</span>.<span class=\"me1\">tail</span>.<span class=\"me1\">tail</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> z<span class=\"br0\">(</span> v<span class=\"sy0\">:</span>BigInt <span class=\"br0\">)</span> <span class=\"sy0\">:</span> List<span class=\"br0\">[</span>BigInt<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>v <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> List<span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> fibs<span class=\"br0\">(</span>fibs.<span class=\"me1\">indexWhere</span><span class=\"br0\">(</span><span class=\"sy0\">_&gt;</span>v<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> m <span class=\"sy0\">::</span> z<span class=\"br0\">(</span>v-m<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> zv <span class=\"sy0\">=</span> z<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">// Walk the list of fibonacci numbers from the number that matches the most significant down to 1,</span><br/>  <span class=\"co1\">// if the zeckendorf matchs then yield '1' otherwise '0'</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> i <span class=\"sy0\">&lt;</span>- <span class=\"br0\">(</span>fibs.<span class=\"me1\">indexWhere</span><span class=\"br0\">(</span><span class=\"sy0\">_==</span>zv<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> to <span class=\"nu0\">0</span> by -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span> zv.<span class=\"me1\">contains</span><span class=\"br0\">(</span>fibs<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"1\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"0\"</span><br/>\u00a0<br/>  <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"st0\">\"-\"</span> + s\t\t<span class=\"co1\">// Using a negative-sign instead of twos-complement </span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> s<br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">// A little test...</span><br/><span class=\"br0\">(</span><span class=\"nu0\">0</span> to <span class=\"nu0\">20</span><span class=\"br0\">)</span> foreach<span class=\"br0\">(</span> i <span class=\"sy0\">=&gt;</span> print<span class=\"br0\">(</span> zNum<span class=\"br0\">(</span>i<span class=\"br0\">)</span> + <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 31, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>import <span class=\"br0\">(</span>rnrs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>getFibList maxNum n1 n2 fibs<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n2 maxNum<span class=\"br0\">)</span><br/>      fibs<br/>      <span class=\"br0\">(</span>getFibList maxNum n2 <span class=\"br0\">(</span><span class=\"sy0\">+</span> n1 n2<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> n2 fibs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>getZeckendorf num<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> num <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"st0\">\"0\"</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>fibs <span class=\"br0\">(</span>getFibList num <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>getZeckString <span class=\"st0\">\"\"</span> num fibs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>getZeckString zeck num fibs<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>curFib <span class=\"br0\">(</span><span class=\"kw1\">car</span> fibs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>placeZeck <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> num curFib<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>outString <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> zeck <span class=\"br0\">(</span><span class=\"kw1\">if</span> placeZeck <span class=\"st0\">\"1\"</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>outNum <span class=\"br0\">(</span><span class=\"kw1\">if</span> placeZeck <span class=\"br0\">(</span><span class=\"sy0\">-</span> num curFib<span class=\"br0\">)</span> num<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> fibs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        outString<br/>        <span class=\"br0\">(</span>getZeckString outString outNum <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> fibs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> i <span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">for-each</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>item<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">display</span> item<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"st0\">\"Z(\"</span> i <span class=\"st0\">\"):<span class=\"es0\">\\t</span>\"</span> <span class=\"br0\">(</span>getZeckendorf i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"sy0\">+</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 21, "block": "<pre class=\"ruby highlighted_source\">func fib<span class=\"br0\">(</span>n<span class=\"br0\">)</span> is cached <span class=\"br0\">{</span><br/>    n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>\u00a0? <span class=\"nu0\">1</span><br/>         \u00a0: <span class=\"br0\">(</span>fib<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> fib<span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func zeckendorf<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    n == <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw2\">return</span> <span class=\"st0\">'0'</span><br/>    var i = <span class=\"nu0\">1</span><br/>    <span class=\"sy0\">++</span>i <span class=\"kw1\">while</span> <span class=\"br0\">(</span>fib<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span>= n<span class=\"br0\">)</span><br/>    gather <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">--</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            var f = fib<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>            f <span class=\"sy0\">&gt;</span> n\u00a0? <span class=\"br0\">(</span>take <span class=\"st0\">'0'</span><span class=\"br0\">)</span><br/>                 \u00a0: <span class=\"br0\">(</span>take <span class=\"st0\">'1'</span>; n <span class=\"sy0\">-</span>= f<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span>.<span class=\"me1\">join</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> n <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%4d:\u00a0%8s<span class=\"es0\">\\n</span>\"</span>, n, zeckendorf<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Simula", "loc": 37, "block": "<pre class=\"text highlighted_source\">BEGIN<br/>   INTEGER N, F0, F1, F2, D;<br/>   N\u00a0:= 20;<br/>   COMMENT CALCULATE D FROM ANY GIVEN N\u00a0;<br/>   F1\u00a0:= 1; F2\u00a0:= 2; F0\u00a0:= F1 + F2; D\u00a0:= 2;<br/>   WHILE F0 &lt; N DO BEGIN<br/>      F1\u00a0:= F2; F2\u00a0:= F0; F0\u00a0:= F1 + F2; D\u00a0:= D + 1;<br/>   END;<br/>   BEGIN<br/>      COMMENT Sinclair ZX81 BASIC Solution\u00a0;<br/>      TEXT Z1, S1;<br/>      INTEGER I, J, Z;<br/>      INTEGER ARRAY F(1:D);                 \u00a0!  10 dim f(6)\u00a0;<br/>      F(1)\u00a0:= 1;                            \u00a0!  20 let f(1)=1\u00a0;<br/>      F(2)\u00a0:= 2;                            \u00a0!  30 let f(2)=2\u00a0;<br/>      FOR I\u00a0:= 3 STEP 1 UNTIL D DO BEGIN    \u00a0!  40 for i=3 to 6\u00a0;<br/>         F(I)\u00a0:= F(I-2) + F(I-1);           \u00a0!  50 let f(i)=f(i-2)+f(i-1)\u00a0;<br/>      END;                                  \u00a0!  60 next i\u00a0;<br/>      FOR I\u00a0:= 0 STEP 1 UNTIL N DO BEGIN    \u00a0!  70 for i=0 to 20\u00a0;<br/>         Z1\u00a0:- \"\";                          \u00a0!  80 let z$=\"\"\u00a0;<br/>         S1\u00a0:- \" \";                         \u00a0!  90 let s$=\" \"\u00a0;<br/>         Z\u00a0:= I;                            \u00a0! 100 let z=i\u00a0;<br/>         FOR J\u00a0:= D STEP -1 UNTIL 1 DO BEGIN\u00a0! 110 for j=6 to 1 step -1\u00a0;<br/>            IF J=1 THEN S1\u00a0:- \"0\";          \u00a0! 120 if j=1 then let s$=\"0\"\u00a0;<br/>            IF NOT (Z&lt;F(J)) THEN BEGIN      \u00a0! 130 if z&lt;f(j) then goto 180\u00a0;<br/>               Z1\u00a0:- Z1 &amp; \"1\";              \u00a0! 140 let z$=z$+\"1\"\u00a0;<br/>               Z\u00a0:= Z-F(J);                 \u00a0! 150 let z=z-f(j)\u00a0;<br/>               S1\u00a0:- \"0\";                   \u00a0! 160 let s$=\"0\"\u00a0;<br/>            END ELSE                        \u00a0! 170 goto 190\u00a0;<br/>               Z1\u00a0:- Z1 &amp; S1;               \u00a0! 180 let z$=z$+s$\u00a0;<br/>         END;                               \u00a0! 190 next j\u00a0;<br/>         OUTINT(I, 0); OUTCHAR(' ');        \u00a0! 200 print i\u00a0;\u00a0!\" \";\u00a0!;<br/>         IF I&lt;10 THEN OUTCHAR(' ');         \u00a0! 210 if i&lt;10 then print \" \";\u00a0!;<br/>         OUTTEXT(Z1); OUTIMAGE;             \u00a0! 220 print z$\u00a0;<br/>      END;                                  \u00a0! 230 next i\u00a0;<br/>   END;<br/>END</pre>"}, {"lang": "Sinclair ZX81 BASIC", "loc": 23, "block": "<pre class=\"text highlighted_source\"> 10 DIM F(6)<br/> 20 LET F(1)=1<br/> 30 LET F(2)=2<br/> 40 FOR I=3 TO 6<br/> 50 LET F(I)=F(I-2)+F(I-1)<br/> 60 NEXT I<br/> 70 FOR I=0 TO 20<br/> 80 LET Z$=\"\"<br/> 90 LET S$=\" \"<br/>100 LET Z=I<br/>110 FOR J=6 TO 1 STEP -1<br/>120 IF J=1 THEN LET S$=\"0\"<br/>130 IF Z&lt;F(J) THEN GOTO 180<br/>140 LET Z$=Z$+\"1\"<br/>150 LET Z=Z-F(J)<br/>160 LET S$=\"0\"<br/>170 GOTO 190<br/>180 LET Z$=Z$+S$<br/>190 NEXT J<br/>200 PRINT I;\" \";<br/>210 IF I&lt;10 THEN PRINT \" \";<br/>220 PRINT Z$<br/>230 NEXT I</pre>"}, {"lang": "Tcl", "loc": 29, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"co1\"># Generates the Fibonacci sequence (starting at 1) up to the largest item that</span><br/><span class=\"co1\"># is no larger than the target value. Could use tricks to precompute, but this</span><br/><span class=\"co1\"># is actually a pretty cheap linear operation.</span><br/><span class=\"kw1\">proc</span> fibseq target <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> seq <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> prev <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> fib <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> n <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$fib</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$target</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    lassign <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$fib</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> fib <span class=\"re0\">$prev</span><span class=\"br0\">]</span><span class=\"br0\">]</span> prev fib<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$fib</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$target</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> seq <span class=\"re0\">$fib</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$seq</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Produce the given Zeckendorf number.</span><br/><span class=\"kw1\">proc</span> zeckendorf n <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Special case: only value that begins with 0</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> zs <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">foreach</span> f <span class=\"br0\">[</span>lreverse <span class=\"br0\">[</span>fibseq <span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">lappend</span> zs <span class=\"br0\">[</span><span class=\"kw1\">set</span> z <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$f</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$z</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> n <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>-<span class=\"re0\">$f</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$zs</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "uBasic/4tH", "loc": 39, "block": "<pre class=\"text highlighted_source\">For x = 0 to 20                        ' Print Zeckendorf numbers 0 - 20<br/>  Print x,<br/>  Push x\u00a0: Gosub _Zeckendorf           ' get Zeckendorf number repres.<br/>  Print                                ' terminate line<br/>Next<br/>\u00a0<br/>End<br/>\u00a0<br/>_Fibonacci<br/>  Push Tos()                           ' duplicate TOS()<br/>  @(0) = 0                             ' This function returns the<br/>  @(1) = 1                             ' Fibonacci number which is smaller<br/>                                       ' or equal to TOS()<br/>  Do While @(1) &lt; Tos() + 1<br/>     Push (@(1))<br/>     @(1) = @(0) + @(1)                ' get next Fibonacci number<br/>     @(0) = Pop()<br/>  Loop                                 ' loop if not exceeded TOS()<br/>\u00a0<br/>  Gosub _Drop                          ' clear TOS()<br/>  Push @(0)                            ' return Fibonacci number<br/>Return<br/>\u00a0<br/>_Zeckendorf<br/>  GoSub _Fibonacci                     ' This function breaks TOS() up<br/>  Print Tos();                         ' into its Zeckendorf components<br/>  Push -(Pop() - Pop())                ' first digit is always there<br/>                                       ' the remainder to resolve<br/>  Do While Tos()                       ' now go for the next digits<br/>    GoSub _Fibonacci<br/>    Print \" + \";Tos();                 ' print the next digit<br/>    Push -(Pop() - Pop())<br/>  Loop<br/>\u00a0<br/>  Gosub _Drop                          ' clear TOS()<br/>Return                                 ' and return<br/>\u00a0<br/>_Drop<br/>  If Pop()%1 = 0 Then Return           ' This function clears TOS()</pre>"}, {"lang": "VBScript", "loc": 27, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> Zeckendorf(n)<br/>\tnum = n<br/>\t<span class=\"kw4\">Set</span> fibonacci = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"System.Collections.Arraylist\"</span>)<br/>\tfibonacci.Add 1\u00a0: fibonacci.Add 2<br/>\ti = 1<br/>\t<span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> fibonacci(i) &lt; num<br/>\t\tfibonacci.Add fibonacci(i) + fibonacci(i-1)<br/>\t\ti = i + 1<br/>\t<span class=\"kw3\">Loop</span><br/>\ttmp = <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw3\">For</span> j = fibonacci.Count-1 <span class=\"kw3\">To</span> 0 <span class=\"kw3\">Step</span> -1<br/>\t\t<span class=\"kw3\">If</span> fibonacci(j) &lt;= num <span class=\"kw3\">And</span> (tmp = <span class=\"st0\">\"\"</span> <span class=\"kw3\">Or</span> Left(tmp,1) &lt;&gt; <span class=\"st0\">\"1\"</span>) <span class=\"kw3\">Then</span><br/>\t\t\ttmp = tmp &amp; <span class=\"st0\">\"1\"</span><br/>\t\t\tnum = num - fibonacci(j)<br/>\t\t<span class=\"kw3\">Else</span><br/>\t\t\ttmp = tmp &amp; <span class=\"st0\">\"0\"</span><br/>\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t<span class=\"kw3\">Next</span><br/>\tZeckendorf = CLng(tmp)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'testing the function<br/></span><span class=\"kw3\">For</span> k = 0 <span class=\"kw3\">To</span> 20<br/>\tWScript.StdOut.WriteLine k &amp; <span class=\"st0\">\": \"</span> &amp; Zeckendorf(k)<br/><span class=\"kw3\">Next</span><br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 20, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>\u00a0<br/>proc Zeckendorf(N);             \\Display Zeckendorf number (N &lt;= 20)<br/>int N;<br/>int Fib, LZ, I;<br/>[Fib:= [1, 2, 3, 5, 8, 13];     \\Fibonacci sequence<br/>LZ:= true;                      \\suppress leading zeros<br/>for I:= 5 downto 1 do<br/>        [if N &gt;= Fib(I) then [N:= N-Fib(I);  ChOut(0, ^1);  LZ:= false]<br/>        else ChOut(0, if LZ then ^  else ^0);<br/>        ];<br/>ChOut(0, N+^0);                 \\output final digit, which can be 0<br/>];<br/>\u00a0<br/>int N;<br/>[for N:= 0 to 20 do<br/>        [if N&lt;10 then ChOut(0,^ );  IntOut(0, N);  Text(0, \": \");<br/>        Zeckendorf(N);  CrLf(0);<br/>        ];<br/>]</pre>"}, {"lang": "Yabasic", "loc": 16, "block": "<pre class=\"text highlighted_source\">sub Zeckendorf(n)<br/>\tlocal i, n$, c<br/>\u00a0<br/>\tdo<br/>\t\tn$ = bin$(i)<br/>\t\tif not instr(n$,\"11\") then<br/>\t\t\tprint c,\":\\t\",n$<br/>\t\t\tif c = n break<br/>\t\t\tc = c + 1\t\t\t<br/>\t\tend if<br/>\t\ti = i + 1<br/>\tloop<br/>end sub<br/>\u00a0<br/>Zeckendorf(20)<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 9, "block": "<pre class=\"text highlighted_source\">    // return powers (0|1) of fib sequence (1,2,3,5,8...) that sum to n<br/>fcn zeckendorf(n){ //--&gt;String of 1s &amp; 0s, no consecutive 1's<br/>   if(n&lt;=0) return(\"0\");<br/>   fibs:=fcn(ab){ ab.append(ab.sum()).pop(0) }.fp(L(1,2));<br/>   (0).pump(*,List,fibs,'wrap(fib){ if(fib&gt;n)Void.Stop else fib })<br/>   .reverse()<br/>   .pump(String,fcn(fib,rn){<br/>      if(fib&gt;rn.value)\"0\" else { rn.set(rn.value-fib); \"1\" } }.fp1(Ref(n)))<br/>}</pre>"}]}