{"task": "Record_sound", "blocks": [{"lang": "AutoHotkey", "loc": 36, "block": "<pre class=\"autohotkey highlighted_source\">name <span class=\"sy0\">:=</span> <span class=\"st0\">\"sample\"</span><br/>waitsec <span class=\"sy0\">:=</span> <span class=\"nu0\">5</span><br/><a href=\"http://www.autohotkey.com/docs/commands/ToolTip.htm\"><span class=\"kw3\">Tooltip</span></a> Recording <span class=\"re0\">%name%</span><span class=\"sy0\">.</span>wav<br/>MCI_SendString<span class=\"br0\">(</span><span class=\"st0\">\"close all wait\"</span><span class=\"br0\">)</span><br/>MCI_SendString<span class=\"br0\">(</span><span class=\"st0\">\"open new type waveaudio alias \"</span> <span class=\"sy0\">.</span> name<span class=\"br0\">)</span><br/>MCI_SendString<span class=\"br0\">(</span><span class=\"st0\">\"set \"</span> <span class=\"sy0\">.</span> name <span class=\"sy0\">.</span> <span class=\"st0\">\" time format ms wait\"</span><span class=\"br0\">)</span><br/><span class=\"co1\">;MCI_SendString(\"set \" . name . \" bitspersample 16 wait\")</span><br/><span class=\"co1\">;MCI_SendString(\"set \" . name . \" channels 1 wait\")</span><br/><span class=\"co1\">;MCI_SendString(\"set \" . name . \" samplespersec 16000 wait\")</span><br/><span class=\"co1\">;MCI_SendString(\"set \" . name . \" alignment 1 wait\")</span><br/><span class=\"co1\">;MCI_SendString(\"set \" . name . \" bytespersec 8000 wait\")</span><br/>MCI_SendString<span class=\"br0\">(</span><span class=\"st0\">\"record \"</span> <span class=\"sy0\">.</span> name<span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Sleep.htm\"><span class=\"kw3\">Sleep</span></a> waitsec<span class=\"sy0\">*</span><span class=\"nu0\">1000</span><br/>MCI_SendString<span class=\"br0\">(</span><span class=\"st0\">\"stop \"</span> <span class=\"sy0\">.</span> name <span class=\"sy0\">.</span> <span class=\"st0\">\" wait\"</span><span class=\"br0\">)</span><br/>MCI_SendString<span class=\"br0\">(</span><span class=\"st0\">\"save \"</span> <span class=\"sy0\">.</span> name <span class=\"sy0\">.</span> <span class=\"st0\">\" \"</span><span class=\"st0\">\"\"</span> <span class=\"sy0\">.</span> name <span class=\"sy0\">.</span> <span class=\"st0\">\".wav\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/ToolTip.htm\"><span class=\"kw3\">Tooltip</span></a> Finished <span class=\"sy0\">...</span> Playing<br/>MCI_SendString<span class=\"br0\">(</span><span class=\"st0\">\"delete \"</span> <span class=\"sy0\">.</span> name<span class=\"br0\">)</span><br/>MCI_SendString<span class=\"br0\">(</span><span class=\"st0\">\"close \"</span> <span class=\"sy0\">.</span> name <span class=\"sy0\">.</span> <span class=\"st0\">\" wait\"</span><span class=\"br0\">)</span><br/>MCI_SendString<span class=\"br0\">(</span><span class=\"st0\">\"open \"</span><span class=\"st0\">\"\"</span> <span class=\"sy0\">.</span> name <span class=\"sy0\">.</span> <span class=\"st0\">\".wav\"</span><span class=\"st0\">\" type waveaudio alias \"</span> <span class=\"sy0\">.</span> name<span class=\"br0\">)</span><br/>MCI_SendString<span class=\"br0\">(</span><span class=\"st0\">\"play \"</span> <span class=\"sy0\">.</span> name <span class=\"sy0\">.</span> <span class=\"st0\">\" wait\"</span><span class=\"br0\">)</span><br/>MCI_SendString<span class=\"br0\">(</span><span class=\"st0\">\"close \"</span> <span class=\"sy0\">.</span> name <span class=\"sy0\">.</span> <span class=\"st0\">\" wait\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/ToolTip.htm\"><span class=\"kw3\">Tooltip</span></a><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>MCI_SendString<span class=\"br0\">(</span>p_lpszCommand<span class=\"sy0\">,</span>ByRef r_lpszReturnString<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span>p_hwndCallback<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>r_lpszReturnString<span class=\"sy0\">,</span><span class=\"nu0\">512</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">Return</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"winmm.dll\\mciSendString\"</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"re3\">A_IsUnicode</span>\u00a0? <span class=\"st0\">\"W\"</span>:<span class=\"st0\">\"A\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"sy0\">,</span><span class=\"st0\">\"Str\"</span><span class=\"sy0\">,</span>p_lpszCommand\t\t\t\t\t\t<span class=\"co1\">;-- lpszCommand</span><br/>\t\t<span class=\"sy0\">,</span><span class=\"st0\">\"Str\"</span><span class=\"sy0\">,</span>r_lpszReturnString\t\t\t\t\t<span class=\"co1\">;-- lpszReturnString</span><br/>\t\t<span class=\"sy0\">,</span><span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span><span class=\"nu0\">512</span>\t\t\t\t\t\t\t\t\t<span class=\"co1\">;-- cchReturn</span><br/>\t\t<span class=\"sy0\">,</span><span class=\"re3\">A_PtrSize</span>\u00a0? <span class=\"st0\">\"Ptr\"</span>:<span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span>p_hwndCallback\t<span class=\"co1\">;-- hwndCallback</span><br/>\t\t<span class=\"sy0\">,</span><span class=\"st0\">\"Cdecl Int\"</span><span class=\"br0\">)</span>\t\t\t\t\t\t\t\t<span class=\"co1\">;-- Return type</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">; For more intuitive functions, see the MCI library by jballi.</span><br/><span class=\"co1\">; doc: http://www.autohotkey.net/~jballi/MCI/v1.1/MCI.html</span><br/><span class=\"co1\">; download: http://www.autohotkey.net/~jballi/MCI/v1.1/MCI.ahk</span></pre>"}, {"lang": "BBC BASIC", "loc": 36, "block": "<pre class=\"text highlighted_source\">      wavfile$ = @dir$ + \"capture.wav\"<br/>      bitspersample% = 16<br/>      channels% = 2<br/>      samplespersec% = 44100<br/>\u00a0<br/>      alignment% = bitspersample% * channels% / 8<br/>      bytespersec% = alignment% * samplespersec%<br/>\u00a0<br/>      params$ = \" bitspersample \" + STR$(bitspersample%) + \\<br/>      \\         \" channels \" + STR$(channels%) + \\<br/>      \\         \" alignment \" + STR$(alignment%) + \\<br/>      \\         \" samplespersec \" + STR$(samplespersec%) + \\<br/>      \\         \" bytespersec \" + STR$(bytespersec%)<br/>\u00a0<br/>      SYS \"mciSendString\", \"close all\", 0, 0, 0<br/>      SYS \"mciSendString\", \"open new type waveaudio alias capture\", 0, 0, 0<br/>      SYS \"mciSendString\", \"set capture\" + params$, 0, 0, 0 TO res%<br/>      IF res% ERROR 100, \"Couldn't set capture parameters: \" + STR$(res% AND &amp;FFFF)<br/>\u00a0<br/>      PRINT \"Press SPACE to start recording...\"<br/>      REPEAT UNTIL INKEY(1) = 32<br/>\u00a0<br/>      SYS \"mciSendString\", \"record capture\", 0, 0, 0 TO res%<br/>      IF res% ERROR 100, \"Couldn't start audio capture: \" + STR$(res% AND &amp;FFFF)<br/>\u00a0<br/>      PRINT \"Recording, press SPACE to stop...\"<br/>      REPEAT UNTIL INKEY(1) = 32<br/>\u00a0<br/>      SYS \"mciSendString\", \"stop capture\", 0, 0, 0<br/>      SYS \"mciSendString\", \"save capture \" + wavfile$, 0, 0, 0 TO res%<br/>      IF res% ERROR 100, \"Couldn't save to WAV file: \" + STR$(res% AND &amp;FFFF)<br/>\u00a0<br/>      SYS \"mciSendString\", \"delete capture\", 0, 0, 0<br/>      SYS \"mciSendString\", \"close capture\", 0, 0, 0<br/>\u00a0<br/>      PRINT \"Captured audio is stored in \" wavfile$</pre>"}, {"lang": "C", "loc": 30, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;unistd.h&gt;</span><br/><span class=\"co2\">#include &lt;sys/types.h&gt;</span><br/><span class=\"co2\">#include &lt;fcntl.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> <span class=\"sy0\">*</span> record<span class=\"br0\">(</span><span class=\"kw4\">size_t</span> bytes<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> fd<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>fd <span class=\"sy0\">=</span> open<span class=\"br0\">(</span><span class=\"st0\">\"/dev/dsp\"</span><span class=\"sy0\">,</span> O_RDONLY<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">void</span> <span class=\"sy0\">*</span>a <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>bytes<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tread<span class=\"br0\">(</span>fd<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> bytes<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tclose<span class=\"br0\">(</span>fd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> play<span class=\"br0\">(</span><span class=\"kw4\">void</span> <span class=\"sy0\">*</span>buf<span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span> len<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> fd<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>fd <span class=\"sy0\">=</span> open<span class=\"br0\">(</span><span class=\"st0\">\"/dev/dsp\"</span><span class=\"sy0\">,</span> O_WRONLY<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\twrite<span class=\"br0\">(</span>fd<span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> len<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tclose<span class=\"br0\">(</span>fd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">void</span> <span class=\"sy0\">*</span>p <span class=\"sy0\">=</span> record<span class=\"br0\">(</span><span class=\"nu0\">65536</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tplay<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> <span class=\"nu0\">65536</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 95, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;windows.h&gt;</span><br/><span class=\"co2\">#include &lt;mmsystem.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#pragma comment ( lib, \"winmm.lib\" )</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> recorder<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> start<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tpaused <span class=\"sy1\">=</span> rec <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span> action <span class=\"sy1\">=</span> <span class=\"st0\">\"IDLE\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"==\"</span> <span class=\"sy1\">&lt;&lt;</span> action <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"==\"</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"1) Record\"</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"2) Play\"</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"3) Pause\"</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"4) Stop\"</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"5) Quit\"</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t    <span class=\"kw4\">char</span> c<span class=\"sy4\">;</span> <span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> c<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> c <span class=\"sy1\">&gt;</span> <span class=\"st0\">'0'</span> <span class=\"sy3\">&amp;&amp;</span> c <span class=\"sy1\">&lt;</span> <span class=\"st0\">'6'</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> c <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">case</span> <span class=\"st0\">'1'</span><span class=\"sy4\">:</span> record<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">case</span> <span class=\"st0\">'2'</span><span class=\"sy4\">:</span> play<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>   <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">case</span> <span class=\"st0\">'3'</span><span class=\"sy4\">:</span> pause<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>  <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">case</span> <span class=\"st0\">'4'</span><span class=\"sy4\">:</span> stop<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>   <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">case</span> <span class=\"st0\">'5'</span><span class=\"sy4\">:</span> stop<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>   <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">void</span> record<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> mciExecute<span class=\"br0\">(</span> <span class=\"st0\">\"open new type waveaudio alias my_sound\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span> <br/>\t    mciExecute<span class=\"br0\">(</span> <span class=\"st0\">\"record my_sound\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>\t    action <span class=\"sy1\">=</span> <span class=\"st0\">\"RECORDING\"</span><span class=\"sy4\">;</span> rec <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span> <br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> play<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> paused <span class=\"br0\">)</span><br/>\t    mciExecute<span class=\"br0\">(</span> <span class=\"st0\">\"play my_sound\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">else</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> mciExecute<span class=\"br0\">(</span> <span class=\"st0\">\"open tmp.wav alias my_sound\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\tmciExecute<span class=\"br0\">(</span> <span class=\"st0\">\"play my_sound\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\taction <span class=\"sy1\">=</span> <span class=\"st0\">\"PLAYING\"</span><span class=\"sy4\">;</span><br/>\tpaused <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> pause<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> rec <span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy4\">;</span><br/>\tmciExecute<span class=\"br0\">(</span> <span class=\"st0\">\"pause my_sound\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tpaused <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span> action <span class=\"sy1\">=</span> <span class=\"st0\">\"PAUSED\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">void</span> stop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> rec <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    mciExecute<span class=\"br0\">(</span> <span class=\"st0\">\"stop my_sound\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    mciExecute<span class=\"br0\">(</span> <span class=\"st0\">\"save my_sound tmp.wav\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    mciExecute<span class=\"br0\">(</span> <span class=\"st0\">\"close my_sound\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    action <span class=\"sy1\">=</span> <span class=\"st0\">\"IDLE\"</span><span class=\"sy4\">;</span> rec <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span><br/>\t<span class=\"br0\">{</span><br/>\t    mciExecute<span class=\"br0\">(</span> <span class=\"st0\">\"stop my_sound\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    mciExecute<span class=\"br0\">(</span> <span class=\"st0\">\"close my_sound\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    action <span class=\"sy1\">=</span> <span class=\"st0\">\"IDLE\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw4\">bool</span> mciExecute<span class=\"br0\">(</span> string cmd <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> mciSendString<span class=\"br0\">(</span> cmd.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"kw2\">NULL</span>, <span class=\"nu0\">0</span>, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Can't do this: \"</span> <span class=\"sy1\">&lt;&lt;</span> cmd <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> paused, rec<span class=\"sy4\">;</span><br/>    string action<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    recorder r<span class=\"sy4\">;</span> r.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "ChucK", "loc": 23, "block": "<pre class=\"c highlighted_source\"><span class=\"co1\">// chuck this with other shreds to record to file</span><br/><span class=\"co1\">// example&gt; chuck foo.ck bar.ck rec </span><br/>\u00a0<br/><span class=\"co1\">// arguments: rec:&lt;filename&gt;</span><br/>\u00a0<br/><span class=\"co1\">// get name</span><br/>me.<span class=\"me1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> string filename<span class=\"sy0\">;</span><br/><span class=\"kw1\">if</span><span class=\"br0\">(</span> filename.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"st0\">\"foo.wav\"</span> <span class=\"sy0\">=&gt;</span> filename<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// pull samples from the dac</span><br/>dac <span class=\"sy0\">=&gt;</span> Gain g <span class=\"sy0\">=&gt;</span> WvOut w <span class=\"sy0\">=&gt;</span> blackhole<span class=\"sy0\">;</span><br/><span class=\"co1\">// this is the output file name</span><br/>filename <span class=\"sy0\">=&gt;</span> w.<span class=\"me1\">wavFilename</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">&lt;&lt;&lt;</span><span class=\"st0\">\"writing to file:\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"'\"</span> <span class=\"sy0\">+</span> w.<span class=\"me1\">filename</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"'\"</span><span class=\"sy0\">&gt;&gt;&gt;;</span><br/><span class=\"co1\">// any gain you want for the output</span><br/><span class=\"nu18\">.5</span> <span class=\"sy0\">=&gt;</span> g.<span class=\"me1\">gain</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// temporary workaround to automatically close file on remove-shred</span><br/><span class=\"kw2\">null</span> @<span class=\"sy0\">=&gt;</span> w<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// infinite time loop...</span><br/><span class=\"co1\">// ctrl-c will stop it, or modify to desired duration</span><br/><span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"kw2\">true</span> <span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"sy0\">::</span><span class=\"me2\">second</span> <span class=\"sy0\">=&gt;</span> now<span class=\"sy0\">;</span></pre>"}, {"lang": "Common Lisp", "loc": 13, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> record <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>with-open-file <span class=\"br0\">(</span>in <span class=\"st0\">\"/dev/dsp\"</span> <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> '<span class=\"br0\">(</span>unsigned-byte <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop repeat n collect <span class=\"br0\">(</span>read-byte in<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> play <span class=\"br0\">(</span>byte-<span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>with-open-file <span class=\"br0\">(</span>out <span class=\"st0\">\"/dev/dsp\"</span> <span class=\"sy0\">:</span><span class=\"me1\">direction</span> <span class=\"sy0\">:</span><span class=\"me1\">output</span> <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> '<span class=\"br0\">(</span>unsigned-byte <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">if-exists</span> <span class=\"sy0\">:</span><span class=\"kw1\">append</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"br0\">(</span>write-byte b out<span class=\"br0\">)</span><span class=\"br0\">)</span> byte-<span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><br/><span class=\"br0\">(</span>play <span class=\"br0\">(</span>record <span class=\"nu0\">65536</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "GUISS", "loc": 1, "block": "<pre class=\"text highlighted_source\">Start,Programs,Accessories,Sound Recorder,Button:Record</pre>"}, {"lang": "Julia", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using PortAudio, LibSndFile<br/>\u00a0<br/>stream = PortAudioStream(\"Microphone (USB Microphone)\", 1, 0) # 44100 samples/sec<br/>buf = read(stream, 441000)<br/>save(\"recorded10sec.wav\", buf)<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 45, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"me1\">File</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">sound</span>.<span class=\"me1\">sampled</span>.<span class=\"sy0\">*</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> RECORD<span class=\"sy0\">_</span>TIME <span class=\"sy0\">=</span> 20000L <span class=\"co1\">// twenty seconds say</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> wavFile <span class=\"sy0\">=</span> File<span class=\"br0\">(</span><span class=\"st0\">\"RecordAudio.wav\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fileType <span class=\"sy0\">=</span> AudioFileFormat.<span class=\"me1\">Type</span>.<span class=\"me1\">WAVE</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> format <span class=\"sy0\">=</span> AudioFormat<span class=\"br0\">(</span>16000.0f, <span class=\"nu0\">16</span>, <span class=\"nu0\">2</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> info <span class=\"sy0\">=</span> DataLine.<span class=\"me1\">Info</span><span class=\"br0\">(</span>TargetDataLine<span class=\"sy0\">::</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a>.<span class=\"me1\">java</span>, format<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> line <span class=\"sy0\">=</span> AudioSystem.<span class=\"me1\">getLine</span><span class=\"br0\">(</span>info<span class=\"br0\">)</span> as TargetDataLine<br/>\u00a0<br/>    <span class=\"co1\">// Creates a new thread that waits for 'RECORD_TIME' before stopping</span><br/>    Thread<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a><span class=\"sy0\">:</span> Runnable <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun run<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>                Thread.<span class=\"me1\">sleep</span><span class=\"br0\">(</span>RECORD<span class=\"sy0\">_</span>TIME<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">(</span>ie<span class=\"sy0\">:</span> InterruptedException<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                println<span class=\"br0\">(</span>ie.<span class=\"me1\">message</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">finally</span></a> <span class=\"br0\">{</span><br/>                line.<span class=\"me1\">stop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                line.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"Finished\"</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// Captures the sound and saves it in a WAV file             </span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>AudioSystem.<span class=\"me1\">isLineSupported</span><span class=\"br0\">(</span>info<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            line.<span class=\"me1\">open</span><span class=\"br0\">(</span>format<span class=\"br0\">)</span><br/>            line.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"Recording started\"</span><span class=\"br0\">)</span><br/>            AudioSystem.<span class=\"me1\">write</span><span class=\"br0\">(</span>AudioInputStream<span class=\"br0\">(</span>line<span class=\"br0\">)</span>, fileType, wavFile<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> println<span class=\"br0\">(</span><span class=\"st0\">\"Line not supported\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">(</span>lue<span class=\"sy0\">:</span> LineUnavailableException<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span>lue.<span class=\"me1\">message</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 3, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">run</span> <span class=\"st0\">\"sndrec32.exe\"</span><br/>\u00a0</pre>"}, {"lang": "LiveCode", "loc": 13, "block": "<pre class=\"text highlighted_source\">command makeRecording<br/>    set the dontUseQT to false -- on windows use true<br/>    set the recordFormat to \"wave\" -- can be wav,aiff, au<br/>    set the recordRate to 44.1 -- sample at 44100 Hz<br/>    set the recordSampleSize to 16  --default is 8 bit<br/>    ask file \"Save recording as\" <br/>    if it is not empty then<br/>        answer record --show sound input dialog with presets above<br/>        record sound file it  -- actual record command<br/>        wait 10 seconds<br/>        stop recording <br/>    end if<br/>end makeRecording</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">SystemDialogInput[\"RecordSound\"]</pre>"}, {"lang": "Nim", "loc": 12, "block": "<pre class=\"text highlighted_source\">proc record(bytes): auto =<br/>  var f = open(\"/dev/dsp\")<br/>  result = newSeq[int8](bytes)<br/>  discard f.readBytes(result, 0, bytes)<br/>\u00a0<br/>proc play(buf) =<br/>  var f = open(\"/dev/dsp\", fmWrite)<br/>  f.write(buf)<br/>  f.close<br/>\u00a0<br/>var p = record(65536)<br/>play(p)</pre>"}, {"lang": "OCaml", "loc": 21, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"sy0\">#</span>load <span class=\"st0\">\"unix.cma\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> record bytes <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> buf <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>make bytes <span class=\"sy0\">'</span>\\000<span class=\"sy0\">'</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> ic <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALopen_in\"><span class=\"kw3\">open_in</span></a> <span class=\"st0\">\"/dev/dsp\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> chunk <span class=\"sy0\">=</span> <span class=\"nu0\">4096</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> <span class=\"br0\">(</span>bytes <span class=\"sy0\">/</span> chunk<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALignore\"><span class=\"kw3\">ignore</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALinput\"><span class=\"kw3\">input</span></a> ic buf <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> chunk<span class=\"br0\">)</span> chunk<span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALclose_in\"><span class=\"kw3\">close_in</span></a> ic<span class=\"sy0\">;</span><br/>  <span class=\"br0\">(</span>buf<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> play buf len <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> oc <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALopen_out\"><span class=\"kw3\">open_out</span></a> <span class=\"st0\">\"/dev/dsp\"</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALoutput_string\"><span class=\"kw3\">output_string</span></a> oc buf<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALclose_out\"><span class=\"kw3\">close_out</span></a> oc<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> bytes <span class=\"sy0\">=</span> <span class=\"nu0\">65536</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> p <span class=\"sy0\">=</span> record bytes <span class=\"kw1\">in</span><br/>  play p bytes</pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(in '(rec -q -c1 -tu16 - trim 0 2)  # Record 2 seconds<br/>   (make<br/>      (while (rd 2)<br/>         (link @) ) ) )</pre>"}, {"lang": "Python", "loc": 17, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> pyaudio<br/>\u00a0<br/><span class=\"kw3\">chunk</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1024</span><br/>FORMAT <span class=\"sy0\">=</span> pyaudio.<span class=\"me1\">paInt16</span><br/>CHANNELS <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>RATE <span class=\"sy0\">=</span> <span class=\"nu0\">44100</span><br/>\u00a0<br/>p <span class=\"sy0\">=</span> pyaudio.<span class=\"me1\">PyAudio</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>stream <span class=\"sy0\">=</span> p.<span class=\"kw2\">open</span><span class=\"br0\">(</span>format <span class=\"sy0\">=</span> FORMAT<span class=\"sy0\">,</span><br/>                channels <span class=\"sy0\">=</span> CHANNELS<span class=\"sy0\">,</span><br/>                rate <span class=\"sy0\">=</span> RATE<span class=\"sy0\">,</span><br/>                <span class=\"kw2\">input</span> <span class=\"sy0\">=</span> <span class=\"kw2\">True</span><span class=\"sy0\">,</span><br/>                frames_per_buffer <span class=\"sy0\">=</span> <span class=\"kw3\">chunk</span><span class=\"br0\">)</span><br/>\u00a0<br/>data <span class=\"sy0\">=</span> stream.<span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"kw3\">chunk</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"br0\">[</span><span class=\"kw2\">ord</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> data<span class=\"br0\">]</span></pre>"}, {"lang": "Racket", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (record n) (with-input-from-file \"/dev/dsp\" ( () (read-bytes n))))<br/>(define (play bs)  (display-to-file bs \"/dev/dsp\" #:exists 'append))<br/>(play (record 65536))<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 51, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">io</span>.<span class=\"br0\">{</span>File, IOException<span class=\"br0\">}</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">sound</span>.<span class=\"me1\">sampled</span>.<span class=\"br0\">{</span>AudioFileFormat, AudioFormat, AudioInputStream<span class=\"br0\">}</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> javax.<span class=\"me1\">sound</span>.<span class=\"me1\">sampled</span>.<span class=\"br0\">{</span>AudioSystem, DataLine, LineUnavailableException, TargetDataLine<span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> SoundRecorder <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <span class=\"co1\">// record duration, in milliseconds</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">final</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> RECORD<span class=\"sy0\">_</span>TIME <span class=\"sy0\">=</span> <span class=\"nu0\">60000</span> <span class=\"co1\">// 1 minute</span><br/>\u00a0<br/>  <span class=\"co1\">// path and format of the wav file</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>wavFile, fileType<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> File<span class=\"br0\">(</span><span class=\"st0\">\"RecordAudio.wav\"</span><span class=\"br0\">)</span>, AudioFileFormat.<span class=\"me1\">Type</span>.<span class=\"me1\">WAVE</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> format <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> AudioFormat<span class=\"br0\">(</span><span class=\"coMULTI\">/*sampleRate =*/</span> 16000f,<br/>    <span class=\"coMULTI\">/*sampleSizeInBits =*/</span> <span class=\"nu0\">16</span>,<br/>    <span class=\"coMULTI\">/*channels =*/</span> <span class=\"nu0\">2</span>,<br/>    <span class=\"coMULTI\">/*signed =*/</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a>,<br/>    <span class=\"coMULTI\">/*bigEndian =*/</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> info <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> DataLine.<span class=\"me1\">Info</span><span class=\"br0\">(</span>classOf<span class=\"br0\">[</span>TargetDataLine<span class=\"br0\">]</span>, format<span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> line<span class=\"sy0\">:</span> TargetDataLine <span class=\"sy0\">=</span> AudioSystem.<span class=\"me1\">getLine</span><span class=\"br0\">(</span>info<span class=\"br0\">)</span>.<span class=\"me1\">asInstanceOf</span><span class=\"br0\">[</span>TargetDataLine<span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"co1\">// Entry to run the program</span><br/>\u00a0<br/>  <span class=\"co1\">// Creates a new thread that waits for a specified of time before stopping</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Thread<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Runnable<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> run<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>        Thread.<span class=\"me1\">sleep</span><span class=\"br0\">(</span>RECORD<span class=\"sy0\">_</span>TIME<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> ex<span class=\"sy0\">:</span> InterruptedException <span class=\"sy0\">=&gt;</span> ex.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">finally</span></a> <span class=\"br0\">{</span><br/>        line.<span class=\"me1\">stop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        line.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      println<span class=\"br0\">(</span><span class=\"st0\">\"Finished\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">//Captures the sound and record into a WAV file</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">try</span></a> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// checks if system supports the data line</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>AudioSystem.<span class=\"me1\">isLineSupported</span><span class=\"br0\">(</span>info<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      line.<span class=\"me1\">open</span><span class=\"br0\">(</span>format<span class=\"br0\">)</span><br/>      line.<span class=\"me1\">start</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\">// start capturing</span><br/>      println<span class=\"br0\">(</span><span class=\"st0\">\"Recording started\"</span><span class=\"br0\">)</span><br/>      AudioSystem.<span class=\"me1\">write</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> AudioInputStream<span class=\"br0\">(</span>line<span class=\"br0\">)</span>, fileType, wavFile<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> println<span class=\"br0\">(</span><span class=\"st0\">\"Line not supported\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">catch</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> ex<span class=\"sy0\">:</span> LineUnavailableException <span class=\"sy0\">=&gt;</span> ex.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> ioe<span class=\"sy0\">:</span> IOException <span class=\"sy0\">=&gt;</span> ioe.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 19, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require sound<br/>\u00a0<br/><span class=\"co1\"># Helper to do a responsive wait</span><br/><span class=\"kw1\">proc</span> delay t <span class=\"br0\">{</span>after <span class=\"re0\">$t</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span>\u00a0::<span class=\"me1\">doneDelay</span> ok<span class=\"br0\">}</span><span class=\"sy0\">;</span> vwait\u00a0::<span class=\"me1\">doneDelay</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Make an in-memory recording object</span><br/><span class=\"kw1\">set</span> recording <span class=\"br0\">[</span>snack::<span class=\"me1\">sound</span> -encoding <span class=\"st0\">\"Lin16\"</span> -rate <span class=\"nu0\">44100</span> -channels <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># Set it doing the recording, wait for a second, and stop</span><br/><span class=\"re0\">$recording</span> record -<span class=\"kw2\">append</span> true<br/>delay <span class=\"nu0\">1000</span><br/><span class=\"re0\">$recording</span> stop<br/>\u00a0<br/><span class=\"co1\"># Convert the internal buffer to viewable numbers, and print them out</span><br/><span class=\"kw2\">binary</span> <span class=\"kw2\">scan</span> <span class=\"br0\">[</span><span class=\"re0\">$recording</span> data -byteorder littleEndian<span class=\"br0\">]</span> s<span class=\"sy0\">*</span> words<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$words</span> <span class=\"st0\">\", \"</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># Destroy the recording object</span><br/><span class=\"re0\">$recording</span> destroy</pre>"}]}