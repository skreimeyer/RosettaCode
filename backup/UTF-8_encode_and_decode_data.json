{"task": "UTF-8_encode_and_decode", "blocks": [{"lang": "Common Lisp", "loc": 42, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> ascii-byte-p <span class=\"br0\">(</span>octet<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Return t if octet is a single-byte 7-bit ASCII char.<br/>  The most significant bit is 0, so the allowed pattern is 0xxx xxxx.\"</span><br/>  <span class=\"br0\">(</span>assert <span class=\"br0\">(</span>typep octet '<span class=\"kw1\">integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>integer-<span class=\"kw1\">length</span> octet<span class=\"br0\">)</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>bitmask  #b10000000<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>template #b00000000<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">;; bitwise and the with the bitmask #b11000000 to extract the first two bits.</span><br/>    <span class=\"co1\">;; check if the first two bits are equal to the template #b10000000.</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">logand</span> bitmask octet<span class=\"br0\">)</span> template<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> multi-byte-p <span class=\"br0\">(</span>octet<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Return t if octet is a part of a multi-byte UTF-8 sequence.<br/>  The multibyte pattern is 1xxx xxxx. A multi-byte can be either a lead byte or a trail byte.\"</span><br/>  <span class=\"br0\">(</span>assert <span class=\"br0\">(</span>typep octet '<span class=\"kw1\">integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>integer-<span class=\"kw1\">length</span> octet<span class=\"br0\">)</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>bitmask  #b10000000<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>template #b10000000<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">;; bitwise and the with the bitmask #b11000000 to extract the first two bits.</span><br/>    <span class=\"co1\">;; check if the first two bits are equal to the template #b10000000.</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">logand</span> bitmask octet<span class=\"br0\">)</span> template<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> lead-byte-p <span class=\"br0\">(</span>octet<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Return t if octet is one of the leading bytes of an UTF-8 sequence, nil otherwise.<br/>  Allowed leading byte patterns are 0xxx xxxx, 110x xxxx, 1110 xxxx and 1111 0xxx.\"</span><br/>  <span class=\"br0\">(</span>assert <span class=\"br0\">(</span>typep octet '<span class=\"kw1\">integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>integer-<span class=\"kw1\">length</span> octet<span class=\"br0\">)</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>bitmasks  <span class=\"br0\">(</span><span class=\"kw1\">list</span> #b10000000 #b11100000 #b11110000 #b11111000<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>templates <span class=\"br0\">(</span><span class=\"kw1\">list</span> #b00000000 #b11000000 #b11100000 #b11110000<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>some #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">logand</span> a octet<span class=\"br0\">)</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> bitmasks templates<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> n-trail-bytes <span class=\"br0\">(</span>octet<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Take a leading utf-8 byte, return the number of continuation bytes 1-3.\"</span><br/>  <span class=\"br0\">(</span>assert <span class=\"br0\">(</span>typep octet '<span class=\"kw1\">integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>integer-<span class=\"kw1\">length</span> octet<span class=\"br0\">)</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>bitmasks  <span class=\"br0\">(</span><span class=\"kw1\">list</span> #b10000000 #b11100000 #b11110000 #b11111000<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>templates <span class=\"br0\">(</span><span class=\"kw1\">list</span> #b00000000 #b11000000 #b11100000 #b11110000<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">0</span> to <span class=\"nu0\">3</span><br/>       <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">nth</span> i templates<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">logand</span> <span class=\"br0\">(</span><span class=\"kw1\">nth</span> i bitmasks<span class=\"br0\">)</span> octet<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">return</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "C", "loc": 112, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;inttypes.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> mask<span class=\"sy0\">;</span>    <span class=\"coMULTI\">/* char data will be bitwise AND with this */</span><br/>\t<span class=\"kw4\">char</span> lead<span class=\"sy0\">;</span>    <span class=\"coMULTI\">/* start bytes of current char in utf-8 encoded character */</span><br/>\t<span class=\"kw4\">uint32_t</span> beg<span class=\"sy0\">;</span> <span class=\"coMULTI\">/* beginning of codepoint range */</span><br/>\t<span class=\"kw4\">uint32_t</span> end<span class=\"sy0\">;</span> <span class=\"coMULTI\">/* end of codepoint range */</span><br/>\t<span class=\"kw4\">int</span> bits_stored<span class=\"sy0\">;</span> <span class=\"coMULTI\">/* the number of bits from the codepoint that fits in char */</span><br/><span class=\"br0\">}</span>utf_t<span class=\"sy0\">;</span><br/>\u00a0<br/>utf_t <span class=\"sy0\">*</span> utf<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\t<span class=\"coMULTI\">/*             mask        lead        beg      end       bits */</span><br/>\t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span><span class=\"br0\">(</span>utf_t<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"nu6\">0b00111111</span><span class=\"sy0\">,</span> <span class=\"nu6\">0b10000000</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>       <span class=\"nu0\">0</span><span class=\"sy0\">,</span>        <span class=\"nu0\">6</span>    <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span><span class=\"br0\">(</span>utf_t<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"nu6\">0b01111111</span><span class=\"sy0\">,</span> <span class=\"nu6\">0b00000000</span><span class=\"sy0\">,</span> <span class=\"nu8\">0000</span><span class=\"sy0\">,</span>    <span class=\"nu8\">0177</span><span class=\"sy0\">,</span>     <span class=\"nu0\">7</span>    <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span><span class=\"br0\">(</span>utf_t<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"nu6\">0b00011111</span><span class=\"sy0\">,</span> <span class=\"nu6\">0b11000000</span><span class=\"sy0\">,</span> <span class=\"nu8\">0200</span><span class=\"sy0\">,</span>    <span class=\"nu8\">03777</span><span class=\"sy0\">,</span>    <span class=\"nu0\">5</span>    <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span><span class=\"br0\">(</span>utf_t<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"nu6\">0b00001111</span><span class=\"sy0\">,</span> <span class=\"nu6\">0b11100000</span><span class=\"sy0\">,</span> <span class=\"nu8\">04000</span><span class=\"sy0\">,</span>   <span class=\"nu8\">0177777</span><span class=\"sy0\">,</span>  <span class=\"nu0\">4</span>    <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span><span class=\"br0\">(</span>utf_t<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"nu6\">0b00000111</span><span class=\"sy0\">,</span> <span class=\"nu6\">0b11110000</span><span class=\"sy0\">,</span> <span class=\"nu8\">0200000</span><span class=\"sy0\">,</span> <span class=\"nu8\">04177777</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span>    <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>\t      <span class=\"sy0\">&amp;</span><span class=\"br0\">(</span>utf_t<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* All lengths are in bytes */</span><br/><span class=\"kw4\">int</span> codepoint_len<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">uint32_t</span> cp<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* len of associated utf-8 char */</span><br/><span class=\"kw4\">int</span> utf8_len<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> ch<span class=\"br0\">)</span><span class=\"sy0\">;</span>          <span class=\"coMULTI\">/* len of utf-8 encoded char */</span><br/>\u00a0<br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>to_utf8<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">uint32_t</span> cp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">uint32_t</span> to_cp<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> chr<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> codepoint_len<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">uint32_t</span> cp<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> len <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>utf_t <span class=\"sy0\">**</span>u <span class=\"sy0\">=</span> utf<span class=\"sy0\">;</span> <span class=\"sy0\">*</span>u<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>u<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>cp <span class=\"sy0\">&gt;=</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>u<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>beg<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>cp <span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>u<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>end<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"sy0\">++</span>len<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>len <span class=\"sy0\">&gt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/* Out of bounds */</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> len<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> utf8_len<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> ch<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> len <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>utf_t <span class=\"sy0\">**</span>u <span class=\"sy0\">=</span> utf<span class=\"sy0\">;</span> <span class=\"sy0\">*</span>u<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>u<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>ch <span class=\"sy0\">&amp;</span> ~<span class=\"br0\">(</span><span class=\"sy0\">*</span>u<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>mask<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>u<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span>lead<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"sy0\">++</span>len<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>len <span class=\"sy0\">&gt;</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"coMULTI\">/* Malformed leading byte */</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> len<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>to_utf8<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">uint32_t</span> cp<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">static</span> <span class=\"kw4\">char</span> ret<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">int</span> bytes <span class=\"sy0\">=</span> codepoint_len<span class=\"br0\">(</span>cp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> shift <span class=\"sy0\">=</span> utf<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span>bits_stored <span class=\"sy0\">*</span> <span class=\"br0\">(</span>bytes <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tret<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>cp <span class=\"sy0\">&gt;&gt;</span> shift <span class=\"sy0\">&amp;</span> utf<span class=\"br0\">[</span>bytes<span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span>mask<span class=\"br0\">)</span> <span class=\"sy0\">|</span> utf<span class=\"br0\">[</span>bytes<span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span>lead<span class=\"sy0\">;</span><br/>\tshift <span class=\"sy0\">-=</span> utf<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span>bits_stored<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> bytes<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tret<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>cp <span class=\"sy0\">&gt;&gt;</span> shift <span class=\"sy0\">&amp;</span> utf<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span>mask<span class=\"br0\">)</span> <span class=\"sy0\">|</span> utf<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span>lead<span class=\"sy0\">;</span><br/>\t\tshift <span class=\"sy0\">-=</span> utf<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span>bits_stored<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\tret<span class=\"br0\">[</span>bytes<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> ret<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">uint32_t</span> to_cp<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> chr<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> bytes <span class=\"sy0\">=</span> utf8_len<span class=\"br0\">(</span><span class=\"sy0\">*</span>chr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> shift <span class=\"sy0\">=</span> utf<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span>bits_stored <span class=\"sy0\">*</span> <span class=\"br0\">(</span>bytes <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">uint32_t</span> codep <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>chr<span class=\"sy0\">++</span> <span class=\"sy0\">&amp;</span> utf<span class=\"br0\">[</span>bytes<span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span>mask<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&lt;</span> shift<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> bytes<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"sy0\">,</span> <span class=\"sy0\">++</span>chr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tshift <span class=\"sy0\">-=</span> utf<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span>bits_stored<span class=\"sy0\">;</span><br/>\t\tcodep <span class=\"sy0\">|=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>chr <span class=\"sy0\">&amp;</span> utf<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span>mask<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&lt;</span> shift<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> codep<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">uint32_t</span> <span class=\"sy0\">*</span>in<span class=\"sy0\">,</span> input<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu12\">0x0041</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x00f6</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x0416</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x20ac</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x1d11e</span><span class=\"sy0\">,</span> <span class=\"nu12\">0x0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Character  Unicode  UTF-8 encoding (hex)<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"----------------------------------------<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">char</span> <span class=\"sy0\">*</span>utf8<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">uint32_t</span> codepoint<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>in <span class=\"sy0\">=</span> input<span class=\"sy0\">;</span> <span class=\"sy0\">*</span>in<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>in<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tutf8 <span class=\"sy0\">=</span> to_utf8<span class=\"br0\">(</span><span class=\"sy0\">*</span>in<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tcodepoint <span class=\"sy0\">=</span> to_cp<span class=\"br0\">(</span>utf8<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s          U+%-7.4x\"</span><span class=\"sy0\">,</span> utf8<span class=\"sy0\">,</span> codepoint<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> utf8<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%hhx \"</span><span class=\"sy0\">,</span> utf8<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 13, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">immutable</span> CHARS <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"A\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\u00f6\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\u0416\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\u20ac\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\ud834\udd1e\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"Character   Code-Point   Code-Units\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>c<span class=\"sy0\">;</span> CHARS<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> bytes <span class=\"sy0\">=</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">ubyte</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> c<span class=\"sy0\">;</span> <span class=\"co1\">//The raw bytes of a character can be accessed by casting</span><br/>        <span class=\"kw4\">auto</span> unicode <span class=\"sy0\">=</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">uint</span><span class=\"br0\">)</span> to<span class=\"sy0\">!</span><span class=\"kw4\">dstring</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">//Convert from a UTF8 string to a UTF32 string, and cast the first character to a number</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%s             \u00a0%7X   [%(%X,\u00a0%)]\"</span><span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> unicode<span class=\"sy0\">,</span> bytes<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elena", "loc": 38, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>\u00a0<br/>literal extension op<br/>{<br/>    literal printAsString<br/>    [<br/>       console print(self,\" \")<br/>    ]<br/>\u00a0<br/>    literal printAsUTF8Array    <br/>    [<br/>        self toByteArray; forEach(:b) [ console print(b toLiteral(16),\" \") ].<br/>    ]<br/>\u00a0<br/>    printAsUTF32<br/>    [<br/>        self toArray; forEach(:c)[ console print(\"U+\",c toInt; toLiteral(16),\" \")  ].<br/>    ]<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    \"A\" printAsString; printAsUTF8Array; printAsUTF32.<br/>    console printLine.<br/>\u00a0<br/>    \"\u00f6\" printAsString; printAsUTF8Array; printAsUTF32.<br/>    console printLine.<br/>\u00a0<br/>    \"\u0416\" printAsString; printAsUTF8Array; printAsUTF32.<br/>    console printLine.<br/>\u00a0<br/>    \"\u20ac\" printAsString; printAsUTF8Array; printAsUTF32.<br/>    console printLine.<br/>\u00a0<br/>    \"\ud834\udd1e\" printAsString; printAsUTF8Array; printAsUTF32.<br/>    console printLine.<br/>].</pre>"}, {"lang": "F#", "loc": 8, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co1\">// Unicode character point to UTF8. Nigel Galloway: March 19th., 2018</span><br/><span class=\"kw1\">let</span> fN g <span class=\"sy0\">=</span> <span class=\"kw1\">match</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">findIndex</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> n<span class=\"sy0\">-&gt;</span>n<span class=\"sy0\">&gt;</span>g<span class=\"br0\">)</span> <span class=\"br0\">[</span>0x80<span class=\"sy0\">;</span>0x800<span class=\"sy0\">;</span>0x10000<span class=\"sy0\">;</span>0x110000<span class=\"br0\">]</span> <span class=\"kw1\">with</span><br/>           |<span class=\"nu0\">0</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span>g<span class=\"br0\">]</span><br/>           |<span class=\"nu0\">1</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span>0xc0<span class=\"sy0\">+</span><span class=\"br0\">(</span>g<span class=\"sy0\">&amp;&amp;&amp;</span>0x7c0<span class=\"sy0\">&gt;&gt;&gt;</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>0x80<span class=\"sy0\">+</span><span class=\"br0\">(</span>g<span class=\"sy0\">&amp;&amp;&amp;</span>0x3f<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>           |<span class=\"nu0\">2</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span>0xe0<span class=\"sy0\">+</span><span class=\"br0\">(</span>g<span class=\"sy0\">&amp;&amp;&amp;</span>0xf000<span class=\"sy0\">&gt;&gt;&gt;</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>0x80<span class=\"sy0\">+</span><span class=\"br0\">(</span>g<span class=\"sy0\">&amp;&amp;&amp;</span>0xfc0<span class=\"sy0\">&gt;&gt;&gt;</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>0x80<span class=\"sy0\">+</span><span class=\"br0\">(</span>g<span class=\"sy0\">&amp;&amp;&amp;</span>0x3f<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>           |_<span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span>0xf0<span class=\"sy0\">+</span><span class=\"br0\">(</span>g<span class=\"sy0\">&amp;&amp;&amp;</span>0x1c0000<span class=\"sy0\">&gt;&gt;&gt;</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>0x80<span class=\"sy0\">+</span><span class=\"br0\">(</span>g<span class=\"sy0\">&amp;&amp;&amp;</span>0x3f000<span class=\"sy0\">&gt;&gt;&gt;</span><span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>0x80<span class=\"sy0\">+</span><span class=\"br0\">(</span>g<span class=\"sy0\">&amp;&amp;&amp;</span>0xfc0<span class=\"sy0\">&gt;&gt;&gt;</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>0x80<span class=\"sy0\">+</span><span class=\"br0\">(</span>g<span class=\"sy0\">&amp;&amp;&amp;</span>0x3f<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 102, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"bytes\"</span><br/>    <span class=\"st0\">\"encoding/hex\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"log\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> testCases <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    rune<br/>    <span class=\"kw4\">string</span><br/><span class=\"sy1\">}{</span><br/>    <span class=\"sy1\">{</span><span class=\"st0\">'A'</span><span class=\"sy1\">,</span> <span class=\"st0\">\"41\"</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">{</span><span class=\"st0\">'\u00f6'</span><span class=\"sy1\">,</span> <span class=\"st0\">\"C3 B6\"</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">{</span><span class=\"st0\">'\u0416'</span><span class=\"sy1\">,</span> <span class=\"st0\">\"D0 96\"</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">{</span><span class=\"st0\">'\u20ac'</span><span class=\"sy1\">,</span> <span class=\"st0\">\"E2 82 AC\"</span><span class=\"sy1\">},</span><br/>    <span class=\"sy1\">{</span><span class=\"st0\">'\ud834\udd1e'</span><span class=\"sy1\">,</span> <span class=\"st0\">\"F0 9D 84 9E\"</span><span class=\"sy1\">},</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> tc <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> testCases <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// derive some things from test data</span><br/>        u <span class=\"sy2\">:=</span> fmt<span class=\"sy3\">.</span><span class=\"me1\">Sprintf</span><span class=\"sy1\">(</span><span class=\"st0\">\"U+%04X\"</span><span class=\"sy1\">,</span> tc<span class=\"sy3\">.</span>rune<span class=\"sy1\">)</span><br/>        b<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> hex<span class=\"sy3\">.</span>DecodeString<span class=\"sy1\">(</span>strings<span class=\"sy3\">.</span>Replace<span class=\"sy1\">(</span>tc<span class=\"sy3\">.</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">))</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span><span class=\"st0\">\"bad test data\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// exercise encoder and decoder on test data</span><br/>        e <span class=\"sy2\">:=</span> encodeUTF8<span class=\"sy1\">(</span>tc<span class=\"sy3\">.</span>rune<span class=\"sy1\">)</span><br/>        d <span class=\"sy2\">:=</span> decodeUTF8<span class=\"sy1\">(</span>b<span class=\"sy1\">)</span><br/>        <span class=\"co1\">// show function return values</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%c \u00a0%-7s \u00a0%X<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> d<span class=\"sy1\">,</span> u<span class=\"sy1\">,</span> e<span class=\"sy1\">)</span><br/>        <span class=\"co1\">// validate return values against test data</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>bytes<span class=\"sy3\">.</span>Equal<span class=\"sy1\">(</span>e<span class=\"sy1\">,</span> b<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span><span class=\"st0\">\"encodeUTF8 wrong\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> d <span class=\"sy2\">!=</span> tc<span class=\"sy3\">.</span>rune <span class=\"sy1\">{</span><br/>            log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span><span class=\"st0\">\"decodeUTF8 wrong\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>    <span class=\"co1\">// first byte of a 2-byte encoding starts 110 and carries 5 bits of data</span><br/>    b2Lead <span class=\"sy2\">=</span> <span class=\"nu0\">0xC0</span> <span class=\"co1\">// 1100 0000</span><br/>    b2Mask <span class=\"sy2\">=</span> <span class=\"nu0\">0x1F</span> <span class=\"co1\">// 0001 1111</span><br/>\u00a0<br/>    <span class=\"co1\">// first byte of a 3-byte encoding starts 1110 and carries 4 bits of data</span><br/>    b3Lead <span class=\"sy2\">=</span> <span class=\"nu0\">0xE0</span> <span class=\"co1\">// 1110 0000</span><br/>    b3Mask <span class=\"sy2\">=</span> <span class=\"nu0\">0x0F</span> <span class=\"co1\">// 0000 1111</span><br/>\u00a0<br/>    <span class=\"co1\">// first byte of a 4-byte encoding starts 11110 and carries 3 bits of data</span><br/>    b4Lead <span class=\"sy2\">=</span> <span class=\"nu0\">0xF0</span> <span class=\"co1\">// 1111 0000</span><br/>    b4Mask <span class=\"sy2\">=</span> <span class=\"nu0\">0x07</span> <span class=\"co1\">// 0000 0111</span><br/>\u00a0<br/>    <span class=\"co1\">// non-first bytes start 10 and carry 6 bits of data</span><br/>    mbLead <span class=\"sy2\">=</span> <span class=\"nu0\">0x80</span> <span class=\"co1\">// 1000 0000</span><br/>    mbMask <span class=\"sy2\">=</span> <span class=\"nu0\">0x3F</span> <span class=\"co1\">// 0011 1111</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> encodeUTF8<span class=\"sy1\">(</span>r rune<span class=\"sy1\">)</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">switch</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw4\">uint32</span><span class=\"sy1\">(</span>r<span class=\"sy1\">);</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">1</span>&lt;&lt;<span class=\"nu0\">7</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">:</span> <span class=\"co1\">// max code point that encodes into a single byte</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">{</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)}</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">1</span>&lt;&lt;<span class=\"nu0\">11</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">:</span> <span class=\"co1\">// into two bytes</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">{</span><br/>            b2Lead <span class=\"sy3\">|</span> <span class=\"kw4\">byte</span><span class=\"sy1\">(</span>r&gt;&gt;<span class=\"nu0\">6</span><span class=\"sy1\">),</span><br/>            mbLead <span class=\"sy3\">|</span> <span class=\"kw4\">byte</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)</span>&amp;mbMask<span class=\"sy1\">}</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">1</span>&lt;&lt;<span class=\"nu0\">16</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">:</span> <span class=\"co1\">// three</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">{</span><br/>            b3Lead <span class=\"sy3\">|</span> <span class=\"kw4\">byte</span><span class=\"sy1\">(</span>r&gt;&gt;<span class=\"nu0\">12</span><span class=\"sy1\">),</span><br/>            mbLead <span class=\"sy3\">|</span> <span class=\"kw4\">byte</span><span class=\"sy1\">(</span>r&gt;&gt;<span class=\"nu0\">6</span><span class=\"sy1\">)</span>&amp;mbMask<span class=\"sy1\">,</span><br/>            mbLead <span class=\"sy3\">|</span> <span class=\"kw4\">byte</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)</span>&amp;mbMask<span class=\"sy1\">}</span><br/>    <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">{</span><br/>            b4Lead <span class=\"sy3\">|</span> <span class=\"kw4\">byte</span><span class=\"sy1\">(</span>r&gt;&gt;<span class=\"nu0\">18</span><span class=\"sy1\">),</span><br/>            mbLead <span class=\"sy3\">|</span> <span class=\"kw4\">byte</span><span class=\"sy1\">(</span>r&gt;&gt;<span class=\"nu0\">12</span><span class=\"sy1\">)</span>&amp;mbMask<span class=\"sy1\">,</span><br/>            mbLead <span class=\"sy3\">|</span> <span class=\"kw4\">byte</span><span class=\"sy1\">(</span>r&gt;&gt;<span class=\"nu0\">6</span><span class=\"sy1\">)</span>&amp;mbMask<span class=\"sy1\">,</span><br/>            mbLead <span class=\"sy3\">|</span> <span class=\"kw4\">byte</span><span class=\"sy1\">(</span>r<span class=\"sy1\">)</span>&amp;mbMask<span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> decodeUTF8<span class=\"sy1\">(</span>b <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">)</span> rune <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">switch</span> b0 <span class=\"sy2\">:=</span> b<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">];</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">case</span> b0 &lt; <span class=\"nu0\">0x80</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> rune<span class=\"sy1\">(</span>b0<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">case</span> b0 &lt; <span class=\"nu0\">0xE0</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> rune<span class=\"sy1\">(</span>b0&amp;b2Mask<span class=\"sy1\">)</span>&lt;&lt;<span class=\"nu0\">6</span> <span class=\"sy3\">|</span><br/>            rune<span class=\"sy1\">(</span>b<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span>&amp;mbMask<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">case</span> b0 &lt; <span class=\"nu0\">0xF0</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> rune<span class=\"sy1\">(</span>b0&amp;b3Mask<span class=\"sy1\">)</span>&lt;&lt;<span class=\"nu0\">12</span> <span class=\"sy3\">|</span><br/>            rune<span class=\"sy1\">(</span>b<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span>&amp;mbMask<span class=\"sy1\">)</span>&lt;&lt;<span class=\"nu0\">6</span> <span class=\"sy3\">|</span><br/>            rune<span class=\"sy1\">(</span>b<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span>&amp;mbMask<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> rune<span class=\"sy1\">(</span>b0&amp;b4Mask<span class=\"sy1\">)</span>&lt;&lt;<span class=\"nu0\">18</span> <span class=\"sy3\">|</span><br/>            rune<span class=\"sy1\">(</span>b<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span>&amp;mbMask<span class=\"sy1\">)</span>&lt;&lt;<span class=\"nu0\">12</span> <span class=\"sy3\">|</span><br/>            rune<span class=\"sy1\">(</span>b<span class=\"sy1\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">]</span>&amp;mbMask<span class=\"sy1\">)</span>&lt;&lt;<span class=\"nu0\">6</span> <span class=\"sy3\">|</span><br/>            rune<span class=\"sy1\">(</span>b<span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">]</span>&amp;mbMask<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 28, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">module</span> Main <span class=\"br0\">(</span>main<span class=\"br0\">)</span> <span class=\"kw1\">where</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>ByteString <span class=\"kw1\">as</span> ByteString <span class=\"br0\">(</span>pack<span class=\"sy0\">,</span> unpack<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span>           Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"br0\">(</span>chr<span class=\"sy0\">,</span> ord<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span>           Data<span class=\"sy0\">.</span>Foldable <span class=\"br0\">(</span>for<span class=\"sy0\">_</span><span class=\"br0\">)</span><br/><span class=\"kw1\">import</span>           Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>intercalate<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>Text <span class=\"kw1\">as</span> Text <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a><span class=\"sy0\">,</span> singleton<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span>Text<span class=\"sy0\">.</span>Encoding <span class=\"kw1\">as</span> Text <span class=\"br0\">(</span>decodeUtf8<span class=\"sy0\">,</span> encodeUtf8<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span>           Text<span class=\"sy0\">.</span>Printf <span class=\"br0\">(</span>printf<span class=\"br0\">)</span><br/>\u00a0<br/>encodeCodepoint <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>encodeCodepoint <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> <span class=\"sy0\">.</span> ByteString<span class=\"sy0\">.</span>unpack <span class=\"sy0\">.</span> Text<span class=\"sy0\">.</span>encodeUtf8 <span class=\"sy0\">.</span> Text<span class=\"sy0\">.</span>singleton <span class=\"sy0\">.</span> chr<br/>\u00a0<br/>decodeToCodepoint <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>decodeToCodepoint <span class=\"sy0\">=</span> ord <span class=\"sy0\">.</span> Text<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> <span class=\"sy0\">.</span> Text<span class=\"sy0\">.</span>decodeUtf8 <span class=\"sy0\">.</span> ByteString<span class=\"sy0\">.</span>pack <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"Character  Unicode  UTF-8 encoding (hex)  Decoded\"</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"-------------------------------------------------\"</span><br/>    for<span class=\"sy0\">_</span> <span class=\"br0\">[</span>0x0041<span class=\"sy0\">,</span> 0x00F6<span class=\"sy0\">,</span> 0x0416<span class=\"sy0\">,</span> 0x20AC<span class=\"sy0\">,</span> 0x1D11E<span class=\"br0\">]</span> <span class=\"sy0\">$</span> \\codepoint <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">let</span> values <span class=\"sy0\">=</span> encodeCodepoint codepoint<br/>            codepoint<span class=\"st0\">' = decodeToCodepoint values<br/>        putStrLn $ printf \"%c         \u00a0%-7s \u00a0%-20s \u00a0%c\"<br/>            codepoint<br/>            (printf \"U+%04X\" codepoint\u00a0:: String)<br/>            (intercalate \" \" (map (printf \"%02X\") values))<br/>            codepoint'</span></pre>"}, {"lang": "J", "loc": 3, "block": "<pre class=\"j highlighted_source\">utf8=: <span class=\"nu0\">8</span>&amp;u:               <span class=\"co1\">NB. converts to UTF-8 from unicode or unicode codepoint integer</span><br/>ucp=: <span class=\"nu0\">9</span>&amp;u:                <span class=\"co1\">NB. converts to unicode from UTF-8 or unicode codepoint integer</span><br/>ucp_hex=: <a class=\"__cf_email__\" data-cfemail=\"d2bab4b692\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">(</span><span class=\"nu0\">3</span> u: ucp<span class=\"sy0\">)</span>  <span class=\"co1\">NB. converts to unicode codepoint hexadecimal from UTF-8, unicode or unicode codepoint integer</span></pre>"}, {"lang": "Java", "loc": 30, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.nio.charset.StandardCharsets</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Formatter</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> UTF8EncodeDecode <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> utf8encode<span class=\"br0\">(</span><span class=\"kw4\">int</span> codepoint<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">(</span><span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>codepoint<span class=\"br0\">}</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">getBytes</span><span class=\"br0\">(</span>StandardCharsets.<span class=\"me1\">UTF_8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> utf8decode<span class=\"br0\">(</span><span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> bytes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">(</span>bytes, StandardCharsets.<span class=\"me1\">UTF_8</span><span class=\"br0\">)</span>.<span class=\"me1\">codePointAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%-7s\u00a0%-43s\u00a0%7s<span class=\"es0\">\\t</span>%s<span class=\"es0\">\\t</span>%7s%n\"</span>,<br/>                <span class=\"st0\">\"Char\"</span>, <span class=\"st0\">\"Name\"</span>, <span class=\"st0\">\"Unicode\"</span>, <span class=\"st0\">\"UTF-8 encoded\"</span>, <span class=\"st0\">\"Decoded\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> codepoint <span class=\"sy0\">:</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span>0x0041, 0x00F6, 0x0416, 0x20AC, 0x1D11E<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">byte</span><span class=\"br0\">[</span><span class=\"br0\">]</span> encoded <span class=\"sy0\">=</span> utf8encode<span class=\"br0\">(</span>codepoint<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Formatter formatter <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Formatter<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">byte</span> b <span class=\"sy0\">:</span> encoded<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                formatter.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%02X \"</span>, b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> encodedHex <span class=\"sy0\">=</span> formatter.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> decoded <span class=\"sy0\">=</span> utf8decode<span class=\"br0\">(</span>encoded<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%-7c\u00a0%-43s U+%04X<span class=\"es0\">\\t</span>%-12s<span class=\"es0\">\\t</span>U+%04X%n\"</span>,<br/>                    codepoint, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acharacter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Character</span></a>.<span class=\"me1\">getName</span><span class=\"br0\">(</span>codepoint<span class=\"br0\">)</span>, codepoint, encodedHex, decoded<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 61, "block": "<pre class=\"javascript highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/***************************************************************************\\<br/>|*  Pure UTF-8 handling without detailed error reporting functionality.    *|<br/>|***************************************************************************|<br/>|*  utf8encode                                                             *|<br/>|*    &lt; String character or UInt32 code point                              *|<br/>|*    &gt; Uint8Array encoded_character                                       *|<br/>|*    | ErrorString                                                        *|<br/>|*                                                                         *|<br/>|*  utf8encode takes a string or uint32 representing a single code point   *|<br/>|*    as its argument and returns an array of length 1 up to 4 containing  *|<br/>|*    utf8 code units representing that character.                         *|<br/>|***************************************************************************|<br/>|*  utf8decode                                                             *|<br/>|*    &lt; Unit8Array [highendbyte highmidendbyte lowmidendbyte lowendbyte]   *|<br/>|*    &gt; uint32 character                                                   *|<br/>|*    | ErrorString                                                        *|<br/>|*                                                                         *|<br/>|*  utf8decode takes an array of one to four uint8 representing utf8 code  *|<br/>|*    units and returns a uint32 representing that code point.             *|<br/>\\***************************************************************************/</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  utf8encode<span class=\"sy0\">=</span><br/>    n<span class=\"sy0\">=&gt;</span><br/>      <span class=\"br0\">(</span>m<span class=\"sy0\">=&gt;</span><br/>        m<span class=\"sy0\">&lt;</span>0x80<br/>       <span class=\"sy0\">?</span>Uint8Array.<span class=\"me1\">from</span><span class=\"br0\">(</span><br/>          <span class=\"br0\">[</span> m<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">0</span><span class=\"sy0\">&amp;</span>0x7f<span class=\"sy0\">|</span>0x00<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>       <span class=\"sy0\">:</span>m<span class=\"sy0\">&lt;</span>0x800<br/>       <span class=\"sy0\">?</span>Uint8Array.<span class=\"me1\">from</span><span class=\"br0\">(</span><br/>          <span class=\"br0\">[</span> m<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">6</span><span class=\"sy0\">&amp;</span>0x1f<span class=\"sy0\">|</span>0xc0<span class=\"sy0\">,</span>m<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">0</span><span class=\"sy0\">&amp;</span>0x3f<span class=\"sy0\">|</span>0x80<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>       <span class=\"sy0\">:</span>m<span class=\"sy0\">&lt;</span>0x10000<br/>       <span class=\"sy0\">?</span>Uint8Array.<span class=\"me1\">from</span><span class=\"br0\">(</span><br/>          <span class=\"br0\">[</span> m<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">12</span><span class=\"sy0\">&amp;</span>0x0f<span class=\"sy0\">|</span>0xe0<span class=\"sy0\">,</span>m<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">6</span><span class=\"sy0\">&amp;</span>0x3f<span class=\"sy0\">|</span>0x80<span class=\"sy0\">,</span>m<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">0</span><span class=\"sy0\">&amp;</span>0x3f<span class=\"sy0\">|</span>0x80<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>       <span class=\"sy0\">:</span>m<span class=\"sy0\">&lt;</span>0x110000<br/>       <span class=\"sy0\">?</span>Uint8Array.<span class=\"me1\">from</span><span class=\"br0\">(</span><br/>          <span class=\"br0\">[</span> m<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">18</span><span class=\"sy0\">&amp;</span>0x07<span class=\"sy0\">|</span>0xf0<span class=\"sy0\">,</span>m<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">12</span><span class=\"sy0\">&amp;</span>0x3f<span class=\"sy0\">|</span>0x80<span class=\"sy0\">,</span>m<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">6</span><span class=\"sy0\">&amp;</span>0x3f<span class=\"sy0\">|</span>0x80<span class=\"sy0\">,</span>m<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">0</span><span class=\"sy0\">&amp;</span>0x3f<span class=\"sy0\">|</span>0x80<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>       <span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span><span class=\"br0\">{</span><span class=\"kw1\">throw</span><span class=\"st0\">'Invalid Unicode Code Point!'</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span> <span class=\"kw1\">typeof</span> n<span class=\"sy0\">===</span><span class=\"st0\">'string'</span><br/>       <span class=\"sy0\">?</span>n.<span class=\"me1\">codePointAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>       <span class=\"sy0\">:</span>n<span class=\"sy0\">&amp;</span>0x1fffff<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  utf8decode<span class=\"sy0\">=</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">[</span>m<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>o<span class=\"sy0\">,</span>p<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span><br/>      m<span class=\"sy0\">&lt;</span>0x80<br/>     <span class=\"sy0\">?</span><span class=\"br0\">(</span> m<span class=\"sy0\">&amp;</span>0x7f<span class=\"br0\">)</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">0</span><br/>     <span class=\"sy0\">:</span>0xc1<span class=\"sy0\">&lt;</span>m<span class=\"sy0\">&amp;&amp;</span>m<span class=\"sy0\">&lt;</span>0xe0<span class=\"sy0\">&amp;&amp;</span>n<span class=\"sy0\">===</span><span class=\"br0\">(</span>n<span class=\"sy0\">&amp;</span>0xbf<span class=\"br0\">)</span><br/>     <span class=\"sy0\">?</span><span class=\"br0\">(</span> m<span class=\"sy0\">&amp;</span>0x1f<span class=\"br0\">)</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">6</span><span class=\"sy0\">|</span><span class=\"br0\">(</span> n<span class=\"sy0\">&amp;</span>0x3f<span class=\"br0\">)</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">0</span><br/>     <span class=\"sy0\">:</span><span class=\"br0\">(</span> m<span class=\"sy0\">===</span>0xe0<span class=\"sy0\">&amp;&amp;</span>0x9f<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">&amp;&amp;</span>n<span class=\"sy0\">&lt;</span>0xc0<br/>      <span class=\"sy0\">||</span>0xe0<span class=\"sy0\">&lt;</span>m<span class=\"sy0\">&amp;&amp;</span>m<span class=\"sy0\">&lt;</span>0xed<span class=\"sy0\">&amp;&amp;</span>0x7f<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">&amp;&amp;</span>n<span class=\"sy0\">&lt;</span>0xc0<br/>      <span class=\"sy0\">||</span>m<span class=\"sy0\">===</span>0xed<span class=\"sy0\">&amp;&amp;</span>0x7f<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">&amp;&amp;</span>n<span class=\"sy0\">&lt;</span>0xa0<br/>      <span class=\"sy0\">||</span>0xed<span class=\"sy0\">&lt;</span>m<span class=\"sy0\">&amp;&amp;</span>m<span class=\"sy0\">&lt;</span>0xf0<span class=\"sy0\">&amp;&amp;</span>0x7f<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">&amp;&amp;</span>n<span class=\"sy0\">&lt;</span>0xc0<span class=\"br0\">)</span><br/>    <span class=\"sy0\">&amp;&amp;</span>o<span class=\"sy0\">===</span>o<span class=\"sy0\">&amp;</span>0xbf<br/>     <span class=\"sy0\">?</span><span class=\"br0\">(</span> m<span class=\"sy0\">&amp;</span>0x0f<span class=\"br0\">)</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">12</span><span class=\"sy0\">|</span><span class=\"br0\">(</span> n<span class=\"sy0\">&amp;</span>0x3f<span class=\"br0\">)</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">6</span><span class=\"sy0\">|</span><span class=\"br0\">(</span> o<span class=\"sy0\">&amp;</span>0x3f<span class=\"br0\">)</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">0</span><br/>     <span class=\"sy0\">:</span><span class=\"br0\">(</span> m<span class=\"sy0\">===</span>0xf0<span class=\"sy0\">&amp;&amp;</span>0x8f<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">&amp;&amp;</span>n<span class=\"sy0\">&lt;</span>0xc0<br/>      <span class=\"sy0\">||</span>m<span class=\"sy0\">===</span>0xf4<span class=\"sy0\">&amp;&amp;</span>0x7f<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">&amp;&amp;</span>n<span class=\"sy0\">&lt;</span>0x90<br/>      <span class=\"sy0\">||</span>0xf0<span class=\"sy0\">&lt;</span>m<span class=\"sy0\">&amp;&amp;</span>m<span class=\"sy0\">&lt;</span>0xf4<span class=\"sy0\">&amp;&amp;</span>0x7f<span class=\"sy0\">&lt;</span>n<span class=\"sy0\">&amp;&amp;</span>n<span class=\"sy0\">&lt;</span>0xc0<span class=\"br0\">)</span><br/>    <span class=\"sy0\">&amp;&amp;</span>o<span class=\"sy0\">===</span>o<span class=\"sy0\">&amp;</span>0xbf<span class=\"sy0\">&amp;&amp;</span>p<span class=\"sy0\">===</span>p<span class=\"sy0\">&amp;</span>0xbf<br/>     <span class=\"sy0\">?</span><span class=\"br0\">(</span> m<span class=\"sy0\">&amp;</span>0x07<span class=\"br0\">)</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">18</span><span class=\"sy0\">|</span><span class=\"br0\">(</span> n<span class=\"sy0\">&amp;</span>0x3f<span class=\"br0\">)</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">12</span><span class=\"sy0\">|</span><span class=\"br0\">(</span> o<span class=\"sy0\">&amp;</span>0x3f<span class=\"br0\">)</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">6</span><span class=\"sy0\">|</span><span class=\"br0\">(</span> p<span class=\"sy0\">&amp;</span>0x3f<span class=\"br0\">)</span><span class=\"sy0\">&lt;&lt;</span><span class=\"nu0\">0</span><br/>     <span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span><span class=\"br0\">{</span><span class=\"kw1\">throw</span><span class=\"st0\">'Invalid UTF-8 encoding!'</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 5, "block": "<pre class=\"text highlighted_source\">for t in (\"A\", \"\u00f6\", \"\u0416\", \"\u20ac\", \"\ud834\udd1e\")<br/>    enc = Vector{UInt8}(t)<br/>    dec = String(enc)<br/>    println(dec, \" \u2192 \", enc)<br/>end</pre>"}, {"lang": "Kotlin", "loc": 20, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun utf8Encode<span class=\"br0\">(</span>codePoint<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> String<span class=\"br0\">(</span>intArrayOf<span class=\"br0\">(</span>codePoint<span class=\"br0\">)</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">toByteArray</span><span class=\"br0\">(</span>Charsets.<span class=\"me1\">UTF_8</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun utf8Decode<span class=\"br0\">(</span>bytes<span class=\"sy0\">:</span> ByteArray<span class=\"br0\">)</span> <span class=\"sy0\">=</span> String<span class=\"br0\">(</span>bytes, Charsets.<span class=\"me1\">UTF_8</span><span class=\"br0\">)</span>.<span class=\"me1\">codePointAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> codePoints <span class=\"sy0\">=</span> intArrayOf<span class=\"br0\">(</span>0x0041, 0x00F6, 0x0416, 0x20AC, 0x1D11E<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Char  Name                                 Unicode  UTF-8         Decoded\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>codePoint in codePoints<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> n <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>codePoint <span class=\"sy0\">&lt;=</span> 0xFFFF<span class=\"br0\">)</span> <span class=\"nu0\">4</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">5</span> <br/>        System.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%-${n}c \u00a0%-35s  U+%05X  \"</span>, codePoint, Character.<span class=\"me1\">getName</span><span class=\"br0\">(</span>codePoint<span class=\"br0\">)</span>, codePoint<span class=\"br0\">)</span>  <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bytes <span class=\"sy0\">=</span> utf8Encode<span class=\"br0\">(</span>codePoint<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><span class=\"kw2\">byte</span> in bytes<span class=\"br0\">)</span> s +<span class=\"sy0\">=</span> <span class=\"st0\">\"%02X \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"kw2\">byte</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> decoded <span class=\"sy0\">=</span> utf8Decode<span class=\"br0\">(</span>bytes<span class=\"br0\">)</span><br/>        n <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span>decoded.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> 0xFFFF<span class=\"br0\">)</span> <span class=\"nu0\">12</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">11</span> <br/>        System.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%-${n}s \u00a0%c<span class=\"es1\">\\n</span>\"</span>, s, decoded<span class=\"br0\">)</span>  <br/>    <span class=\"br0\">}</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lingo", "loc": 6, "block": "<pre class=\"text highlighted_source\">chars = [\"A\", \"\u00f6\", \"\u0416\", \"\u20ac\", \"\ud834\udd1e\"]<br/>put \"Character   Unicode (int)   UTF-8 (hex)   Decoded\"<br/>repeat with c in chars<br/>    ba = bytearray(c)<br/>    put col(c, 12) &amp; col(charToNum(c), 16) &amp; col(ba.toHexString(1, ba.length), 14) &amp; ba.readRawString(ba.length)<br/>end repeat</pre>"}, {"lang": "Lua", "loc": 36, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"co1\">-- Accept an integer representing a codepoint.</span><br/><span class=\"co1\">-- Return the values of the individual octets.</span><br/><span class=\"kw1\">function</span> encode <span class=\"br0\">(</span>codepoint<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> codepoint_str <span class=\"sy0\">=</span> utf8<span class=\"sy0\">.</span>char<span class=\"br0\">(</span>codepoint<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> result <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>codepoint_str <span class=\"kw1\">do</span><br/>    result<span class=\"br0\">[</span><span class=\"sy0\">#</span>result <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw3\">string</span><span class=\"sy0\">.</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span><span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span> codepoint_str<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"kw3\">table</span><span class=\"sy0\">.</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Accept a variable number of octets.</span><br/><span class=\"co1\">-- Return the corresponding Unicode character.</span><br/><span class=\"kw1\">function</span> decode <span class=\"br0\">(</span><span class=\"sy0\">...</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> len <span class=\"sy0\">=</span> select<span class=\"br0\">(</span><span class=\"st0\">\"#\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">...</span><span class=\"br0\">)</span> <span class=\"co1\">-- the number of octets</span><br/>  <span class=\"kw1\">local</span> fmt <span class=\"sy0\">=</span> <span class=\"kw3\">string.rep</span><span class=\"br0\">(</span><span class=\"st0\">\"B\"</span><span class=\"sy0\">,</span> len<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"kw3\">string</span><span class=\"sy0\">.</span>pack<span class=\"br0\">(</span>fmt<span class=\"sy0\">,</span> <span class=\"sy0\">...</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Run the given test cases.</span><br/><span class=\"kw1\">function</span> test_encode_decode <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">-- \"A\", \"\u00f6\", \"\u0416\", \"\u20ac\", \"\ud834\udd1e\"</span><br/>  <span class=\"kw1\">local</span> tests <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"kw3\">tonumber</span><span class=\"br0\">(</span><span class=\"st0\">\"41\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>  <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span><span class=\"st0\">\"f6\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span><span class=\"st0\">\"416\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                  <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span><span class=\"st0\">\"20ac\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span><span class=\"st0\">\"1d11e\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> test <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>tests<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Char: \"</span><span class=\"sy0\">,</span> test<span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Encoding: \"</span><span class=\"sy0\">,</span> encode<span class=\"br0\">(</span>test<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Decoding: \"</span><span class=\"sy0\">,</span> decode<span class=\"br0\">(</span>encode<span class=\"br0\">(</span>test<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">utf = ToCharacterCode[ToString[\"A\u00f6\u0416\u20ac\", CharacterEncoding -&gt; \"UTF8\"]]<br/>ToCharacterCode[FromCharacterCode[utf, \"UTF8\"]]</pre>"}, {"lang": "Perl", "loc": 20, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Unicode<span class=\"sy0\">::</span><span class=\"me2\">UCD</span> <span class=\"st_h\">'charinfo'</span><span class=\"sy0\">;</span>         <span class=\"co1\"># getting the unicode name of the character</span><br/><span class=\"kw2\">use</span> utf8<span class=\"sy0\">;</span>                            <span class=\"co1\"># using non-ascii-characters in source code</span><br/><a href=\"http://perldoc.perl.org/functions/binmode.html\"><span class=\"kw3\">binmode</span></a> <span class=\"kw2\">STDOUT</span><span class=\"sy0\">,</span> <span class=\"st0\">\":encoding(UTF-8)\"</span><span class=\"sy0\">;</span>  <span class=\"co1\"># printing non-ascii-characters to screen</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@chars</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/ord.html\"><span class=\"kw3\">ord</span></a><span class=\"br0\">}</span> <span class=\"co2\">qw/A \u00f6 \u0416 \u20ac \ud834\udd1e/</span><span class=\"sy0\">;</span> <span class=\"co1\"># @chars contains the unicode points</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$print_format</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'%5s \u00a0%-35s'</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"$print_format\u00a0%8s \u00a0%s<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">,</span> <span class=\"st_h\">'char'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'name'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'unicode'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'utf-8 encoding'</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$name</span> <span class=\"sy0\">=</span> charinfo<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"st_h\">'name'</span><span class=\"br0\">}</span><span class=\"sy0\">;</span> <span class=\"co1\"># get unicode name</span><br/>\t<a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"$print_format \u00a0%06x  \"</span> <span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/chr.html\"><span class=\"kw3\">chr</span></a><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/lc.html\"><span class=\"kw3\">lc</span></a> <span class=\"re0\">$name</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$utf8</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/chr.html\"><span class=\"kw3\">chr</span></a><span class=\"sy0\">;</span>                    <span class=\"co1\"># single char (using implicit $_)</span><br/>\tutf8<span class=\"sy0\">::</span><span class=\"me2\">encode</span><span class=\"br0\">(</span><span class=\"re0\">$utf8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>               <span class=\"co1\"># inplace encoding into utf8 parts</span><br/>\t<a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">{</span>                               <span class=\"co1\"># for each utf8 char print ord</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"\u00a0%x\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/ord.html\"><span class=\"kw3\">ord</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"sy0\">//,</span> <span class=\"re0\">$utf8</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"re0\">@chars</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 6, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> <span class=\"kw3\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"%-18s\u00a0%-36s|%8s|\u00a0%7s |%14s |\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Character|'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Name'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Ordinal'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'Unicode'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'UTF-8 encoded'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'decoded'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st_h\">'-'</span> <span class=\"kw1\">x</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"sy0\">&lt;</span> A \u00f6 \u0416 \u20ac \ud834\udd1e \ud83d\ude1c \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66<span class=\"sy0\">&gt;</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$char</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"  \u00a0%-5s |\u00a0%-43s |\u00a0%6s |\u00a0%-7s |\u00a0%12s  |%4s<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$char</span><span class=\"sy0\">,</span> <span class=\"re0\">$char</span><span class=\"sy0\">.</span><span class=\"me1\">uninames</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">','</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$char</span><span class=\"sy0\">.</span><span class=\"me1\">ords</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      <span class=\"br0\">(</span><span class=\"st_h\">'U+'</span> <span class=\"kw1\">X</span><span class=\"sy0\">~</span> <span class=\"re0\">$char</span><span class=\"sy0\">.</span><span class=\"me1\">ords</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">base</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$char</span><span class=\"sy0\">.</span><span class=\"kw3\">encode</span><span class=\"br0\">(</span><span class=\"st_h\">'UTF8'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">list</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">base</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Str</span><span class=\"sy0\">,</span> <span class=\"re0\">$char</span><span class=\"sy0\">.</span><span class=\"kw3\">encode</span><span class=\"br0\">(</span><span class=\"st_h\">'UTF8'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">decode</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 15, "block": "<pre class=\"text highlighted_source\">constant tests = {#0041, #00F6, #0416, #20AC, #1D11E}<br/>\u00a0<br/>function hex(sequence s, string fmt)    -- output helper<br/>    for i=1 to length(s) do<br/>        s[i] = sprintf(fmt,s[i])<br/>    end for<br/>    return join(s,',')<br/>end function<br/>\u00a0<br/>for i=1 to length(tests) do<br/>    integer codepoint = tests[i]<br/>    sequence s = utf32_to_utf8({codepoint}),<br/>             r = utf8_to_utf32(s)<br/>    printf(1,\"#%04x -&gt; {%s} -&gt; {%s}\\n\",{codepoint, hex(s,\"#%02x\"),hex(r,\"#%04x\")})<br/>end for</pre>"}, {"lang": "Python", "loc": 18, "block": "<pre class=\"python highlighted_source\">\u00a0<br/><span class=\"co1\">#!/usr/bin/env python3</span><br/><span class=\"kw1\">from</span> <span class=\"kw3\">unicodedata</span> <span class=\"kw1\">import</span> name<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> unicode_code<span class=\"br0\">(</span>ch<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"st0\">'U+{:04x}'</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"kw2\">ord</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> utf8hex<span class=\"br0\">(</span>ch<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\" \"</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">hex</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">2</span>:<span class=\"br0\">]</span> <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> ch.<span class=\"me1\">encode</span><span class=\"br0\">(</span><span class=\"st0\">'utf8'</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">upper</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">\"__main__\"</span>:<br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'{:&lt;11} {:&lt;36} {:&lt;15} {:&lt;15}'</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">'Character'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Name'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Unicode'</span><span class=\"sy0\">,</span> <span class=\"st0\">'UTF-8 encoding (hex)'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    chars <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'A'</span><span class=\"sy0\">,</span> <span class=\"st0\">'\u00f6'</span><span class=\"sy0\">,</span> <span class=\"st0\">'\u0416'</span><span class=\"sy0\">,</span> <span class=\"st0\">'\u20ac'</span><span class=\"sy0\">,</span> <span class=\"st0\">'\ud834\udd1e'</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> char <span class=\"kw1\">in</span> chars:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'{:&lt;11} {:&lt;36} {:&lt;15} {:&lt;15}'</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>char<span class=\"sy0\">,</span> name<span class=\"br0\">(</span>char<span class=\"br0\">)</span><span class=\"sy0\">,</span> unicode_code<span class=\"br0\">(</span>char<span class=\"br0\">)</span><span class=\"sy0\">,</span> utf8hex<span class=\"br0\">(</span>char<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 17, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define char-map<br/>  '((LATIN-CAPITAL-LETTER-A              .  #\\U0041)<br/>    (LATIN-SMALL-LETTER-O-WITH-DIAERESIS .  #\\U00F6)<br/>    (CYRILLIC-CAPITAL-LETTER-ZHE         .  #\\U0416)<br/>    (EURO-SIGN                           .  #\\U20AC)<br/>    (MUSICAL-SYMBOL-G-CLEF               .  #\\U1D11E)))<br/>\u00a0<br/>(for ((name.char (in-list char-map)))<br/>  (define name (car name.char))<br/>  (define chr (cdr name.char))<br/>  (let ((bites (bytes-&gt;list (string-&gt;bytes/utf-8 (list-&gt;string (list chr))))))<br/>    (printf \"~s\\t~a\\t~a\\t~a\\t~a~%\" chr chr<br/>            (map (curryr number-&gt;string 16) bites)<br/>            (bytes-&gt;string/utf-8 (list-&gt;bytes bites))<br/>            name)))</pre>"}, {"lang": "Scala", "loc": 23, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> UTF8EncodeAndDecode <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> codePoints <span class=\"sy0\">=</span> Seq<span class=\"br0\">(</span>0x0041, 0x00F6, 0x0416, 0x20AC, 0x1D11E<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> utf8Encode<span class=\"br0\">(</span>codepoint<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Byte<span class=\"br0\">]</span> <span class=\"sy0\">=</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> String<span class=\"br0\">(</span>Array<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">(</span>codepoint<span class=\"br0\">)</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">getBytes</span><span class=\"br0\">(</span>StandardCharsets.<span class=\"me1\">UTF_8</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> utf8Decode<span class=\"br0\">(</span>bytes<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>Byte<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> String<span class=\"br0\">(</span>bytes, StandardCharsets.<span class=\"me1\">UTF_8</span><span class=\"br0\">)</span>.<span class=\"me1\">codePointAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"Char Name                                 Unicode  UTF-8       Decoded\"</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>codePoint <span class=\"sy0\">&lt;</span>- codePoints<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> w <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>Character.<span class=\"me1\">isBmpCodePoint</span><span class=\"br0\">(</span>codePoint<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">4</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">5</span> <span class=\"co1\">// Compute spacing</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> bytes <span class=\"sy0\">=</span> utf8Encode<span class=\"br0\">(</span>codePoint<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> leftAlignedHex <span class=\"sy0\">=</span> f<span class=\"st0\">\"U+${codePoint}%04X\"</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    bytes.<span class=\"me1\">foreach</span><span class=\"br0\">(</span><span class=\"kw2\">byte</span> <span class=\"sy0\">=&gt;</span> s ++<span class=\"sy0\">=</span> <span class=\"st0\">\"%02X \"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"kw2\">byte</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    printf<span class=\"br0\">(</span>s<span class=\"st0\">\"%-${w}c\u00a0%-36s\u00a0%-7s \u00a0%-${16 - w}s%c%n\"</span>,<br/>      codePoint, Character.<span class=\"me1\">getName</span><span class=\"br0\">(</span>codePoint<span class=\"br0\">)</span>, leftAlignedHex, s, utf8Decode<span class=\"br0\">(</span>bytes<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 14, "block": "<pre class=\"ruby highlighted_source\">func utf8_encoder<span class=\"br0\">(</span>Number code<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    code.<span class=\"me1\">chr</span>.<span class=\"me1\">encode</span><span class=\"br0\">(</span><span class=\"st0\">'UTF-8'</span><span class=\"br0\">)</span>.<span class=\"me1\">bytes</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">chr</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func utf8_decoder<span class=\"br0\">(</span><span class=\"kw3\">Array</span> bytes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    bytes.<span class=\"me1\">map</span><span class=\"br0\">{</span>.<span class=\"me1\">ord</span><span class=\"br0\">}</span>.<span class=\"me1\">decode</span><span class=\"br0\">(</span><span class=\"st0\">'UTF-8'</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>0x0041, 0x00F6, 0x0416, 0x20AC, 0x1D11E<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var encoded = utf8_encoder<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    var decoded = utf8_decoder<span class=\"br0\">(</span>encoded<span class=\"br0\">)</span><br/>    assert_eq<span class=\"br0\">(</span>n, decoded.<span class=\"me1\">ord</span><span class=\"br0\">)</span><br/>    say <span class=\"st0\">\"#{decoded} -&gt; #{encoded}\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 20, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> encoder int <span class=\"br0\">{</span><br/>   <span class=\"kw1\">set</span> u <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>c <span class=\"re0\">$int</span><span class=\"br0\">]</span><br/>   <span class=\"kw1\">set</span> bytes <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>   <span class=\"kw1\">foreach</span> byte <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"br0\">[</span>encoding convertto utf-<span class=\"nu0\">8</span> <span class=\"re0\">$u</span><span class=\"br0\">]</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>      <span class=\"kw2\">lappend</span> bytes <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>02X <span class=\"br0\">[</span><span class=\"kw2\">scan</span> <span class=\"re0\">$byte</span> <span class=\"sy0\">%</span>c<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"re0\">$bytes</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> decoder bytes <span class=\"br0\">{</span><br/>   <span class=\"kw1\">set</span> str <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>   <span class=\"kw1\">foreach</span> byte <span class=\"re0\">$bytes</span> <span class=\"br0\">{</span><br/>      <span class=\"kw2\">append</span> str <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"sy0\">%</span>c <span class=\"br0\">[</span><span class=\"kw2\">scan</span> <span class=\"re0\">$byte</span> <span class=\"sy0\">%</span>x<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"br0\">[</span>encoding convertfrom utf-<span class=\"nu0\">8</span> <span class=\"re0\">$str</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">foreach</span> test <span class=\"br0\">{</span>0x0041 0x00f6 0x0416 0x20ac 0x1d11e<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">set</span> res <span class=\"re0\">$test</span><br/>   <span class=\"kw2\">lappend</span> res <span class=\"br0\">[</span>encoder <span class=\"re0\">$test</span><span class=\"br0\">]</span> -<span class=\"sy0\">&gt;</span> <span class=\"br0\">[</span>decoder <span class=\"br0\">[</span>encoder <span class=\"re0\">$test</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>   <span class=\"kw2\">puts</span> <span class=\"re0\">$res</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "zkl", "loc": 10, "block": "<pre class=\"text highlighted_source\">println(\"Char  Unicode  UTF-8\");<br/>foreach utf,unicode_int in (T( T(\"\\U41;\",0x41), T(\"\\Uf6;\",0xf6), <br/>      T(\"\\U416;\",0x416), T(\"\\U20AC;\",0x20ac), T(\"\\U1D11E;\",0x1d11e))){<br/>   utf_int:=utf.reduce(fcn(s,c){ 0x100*s + c.toAsc() },0);<br/>   char\u00a0:=unicode_int.toString(-8);\t// Unicode int to UTF-8 string<br/>   // UTF-8 bytes to UTF-8 string:<br/>   char2:=Data(Void,utf_int.toBigEndian(utf_int.len())).text;<br/>\u00a0<br/>   println(\"%s\u00a0%s\u00a0%9s \u00a0%x\".fmt(char,char2,\"U+%x\".fmt(unicode_int),utf_int));<br/>}</pre>"}]}