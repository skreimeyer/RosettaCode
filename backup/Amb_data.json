{"task": "Amb", "blocks": [{"lang": "Ada", "loc": 70, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Unbounded</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;            <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Test_Amb <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Alternatives <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Unbounded_String;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Amb <span class=\"br0\">(</span>Count\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw3\">record</span><br/>      This\u00a0: Positive\u00a0:= <span class=\"nu0\">1</span>;<br/>      Left\u00a0: <span class=\"kw3\">access</span> Amb; <br/>      List\u00a0: Alternatives <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">Count</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Image <span class=\"br0\">(</span>L\u00a0: Amb<span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> To_String <span class=\"br0\">(</span>L.<span class=\"me1\">List</span> <span class=\"br0\">(</span>L.<span class=\"me1\">This</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Image;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"/\"</span> <span class=\"br0\">(</span>L, R\u00a0: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Amb <span class=\"kw1\">is</span><br/>      Result\u00a0: Amb <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      Append <span class=\"br0\">(</span>Result.<span class=\"me1\">List</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, L<span class=\"br0\">)</span>;<br/>      Append <span class=\"br0\">(</span>Result.<span class=\"me1\">List</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, R<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> <span class=\"st0\">\"/\"</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"/\"</span> <span class=\"br0\">(</span>L\u00a0: Amb; R\u00a0: String<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Amb <span class=\"kw1\">is</span><br/>      Result\u00a0: Amb <span class=\"br0\">(</span>L.<span class=\"me1\">Count</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      Result.<span class=\"me1\">List</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">L</span>.<span class=\"me1\">Count</span><span class=\"br0\">)</span>\u00a0:= L.<span class=\"me1\">List</span>\u00a0;<br/>      Append <span class=\"br0\">(</span>Result.<span class=\"me1\">List</span> <span class=\"br0\">(</span>Result.<span class=\"me1\">Count</span><span class=\"br0\">)</span>, R<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> <span class=\"st0\">\"/\"</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"=\"</span> <span class=\"br0\">(</span>L, R\u00a0: Amb<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>      Left\u00a0: Unbounded_String <span class=\"kw3\">renames</span> L.<span class=\"me1\">List</span> <span class=\"br0\">(</span>L.<span class=\"me1\">This</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> Element <span class=\"br0\">(</span>Left, Length <span class=\"br0\">(</span>Left<span class=\"br0\">)</span><span class=\"br0\">)</span> = Element <span class=\"br0\">(</span>R.<span class=\"me1\">List</span> <span class=\"br0\">(</span>R.<span class=\"me1\">This</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"st0\">\"=\"</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Failure <span class=\"br0\">(</span>L\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Amb<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> L.<span class=\"me1\">This</span> &lt; L.<span class=\"me1\">Count</span> <span class=\"kw1\">then</span><br/>            L.<span class=\"me1\">This</span>\u00a0:= L.<span class=\"me1\">This</span> + <span class=\"nu0\">1</span>;<br/>         <span class=\"kw1\">else</span><br/>            L.<span class=\"me1\">This</span>\u00a0:= <span class=\"nu0\">1</span>;<br/>            Failure <span class=\"br0\">(</span>L.<span class=\"me1\">Left</span>.<span class=\"kw3\">all</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> L.<span class=\"me1\">Left</span> = <span class=\"kw3\">null</span> <span class=\"kw2\">or</span> <span class=\"kw1\">else</span> L.<span class=\"me1\">Left</span>.<span class=\"kw3\">all</span> = L;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Failure;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Join <span class=\"br0\">(</span>L\u00a0: <span class=\"kw3\">access</span> Amb; R\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Amb<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      R.<span class=\"me1\">Left</span>\u00a0:= L;<br/>      <span class=\"kw1\">while</span> L.<span class=\"kw3\">all</span> /= R <span class=\"kw1\">loop</span><br/>         Failure <span class=\"br0\">(</span>R<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Join;<br/>\u00a0<br/>   W_1\u00a0: <span class=\"kw3\">aliased</span> Amb\u00a0:= <span class=\"st0\">\"the\"</span> / <span class=\"st0\">\"that\"</span> / <span class=\"st0\">\"a\"</span>;<br/>   W_2\u00a0: <span class=\"kw3\">aliased</span> Amb\u00a0:= <span class=\"st0\">\"frog\"</span> / <span class=\"st0\">\"elephant\"</span> / <span class=\"st0\">\"thing\"</span>;<br/>   W_3\u00a0: <span class=\"kw3\">aliased</span> Amb\u00a0:= <span class=\"st0\">\"walked\"</span> / <span class=\"st0\">\"treaded\"</span> / <span class=\"st0\">\"grows\"</span>;<br/>   W_4\u00a0: <span class=\"kw3\">aliased</span> Amb\u00a0:= <span class=\"st0\">\"slowly\"</span> / <span class=\"st0\">\"quickly\"</span>;<br/><span class=\"kw1\">begin</span><br/>   Join <span class=\"br0\">(</span>W_1'<span class=\"kw3\">Access</span>, W_2<span class=\"br0\">)</span>;<br/>   Join <span class=\"br0\">(</span>W_2'<span class=\"kw3\">Access</span>, W_3<span class=\"br0\">)</span>;<br/>   Join <span class=\"br0\">(</span>W_3'<span class=\"kw3\">Access</span>, W_4<span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span>Image <span class=\"br0\">(</span>W_1<span class=\"br0\">)</span> &amp; ' ' &amp; Image <span class=\"br0\">(</span>W_2<span class=\"br0\">)</span> &amp; ' ' &amp; Image <span class=\"br0\">(</span>W_3<span class=\"br0\">)</span> &amp; ' ' &amp; Image <span class=\"br0\">(</span>W_4<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Test_Amb;</pre>"}, {"lang": "ALGOL 68", "loc": 38, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> PAGE <span class=\"sy1\">=</span> <span class=\"kw4\">FLEX</span><span class=\"br0\">[</span>0<span class=\"br0\">]</span><span class=\"kw3\">STRING</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> YIELDPAGE <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span>PAGE<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> ITERPAGE <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span><span class=\"br0\">(</span>YIELDPAGE<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> INITITERPAGE <span class=\"sy1\">=</span> <span class=\"br0\">(</span>PAGE self<span class=\"br0\">)</span>ITERPAGE<span class=\"sy1\">:</span> <br/>  <span class=\"br0\">(</span>YIELDPAGE yield<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"coMULTI\"># scope violation #</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> self <span class=\"kw2\">DO</span><br/>      yield<span class=\"br0\">(</span>self<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"sy1\">+</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>ITERPAGE for strings<span class=\"sy1\">,</span> PAGE b<span class=\"br0\">)</span>ITERPAGE<span class=\"sy1\">:</span><br/>  <span class=\"br0\">(</span>YIELDPAGE yield<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"coMULTI\"># scope violation #</span><br/>    for strings<span class=\"br0\">(</span><span class=\"br0\">(</span>PAGE amb<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>      <span class=\"br0\">[</span><span class=\"kw8\">UPB</span> amb <span class=\"sy1\">+</span> 1<span class=\"br0\">]</span><span class=\"kw3\">STRING</span> joined<span class=\"sy1\">;</span> <br/>      joined<span class=\"br0\">[</span><span class=\"sy1\">:</span><span class=\"kw8\">UPB</span> amb<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> amb<span class=\"sy1\">;</span><br/>      <span class=\"kw3\">STRING</span> last string <span class=\"sy1\">:=</span> amb<span class=\"br0\">[</span><span class=\"kw8\">UPB</span> amb<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">CHAR</span> last char <span class=\"sy1\">:=</span> last string<span class=\"br0\">[</span><span class=\"kw8\">UPB</span> last string<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> b <span class=\"kw2\">DO</span><br/>        <span class=\"kw2\">IF</span> last char <span class=\"sy1\">=</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>1<span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>          joined<span class=\"br0\">[</span><span class=\"kw8\">UPB</span> joined<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> b<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>          yield<span class=\"br0\">(</span>joined<span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><br/>      <span class=\"kw2\">OD</span><br/>    <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"sy1\">+</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>PAGE a<span class=\"sy1\">,</span> PAGE b<span class=\"br0\">)</span>ITERPAGE<span class=\"sy1\">:</span> INITITERPAGE a <span class=\"sy1\">+</span> b<span class=\"sy1\">;</span><br/>\u00a0<br/>ITERPAGE gen amb <span class=\"sy1\">:=</span> <br/>   PAGE<span class=\"br0\">(</span><span class=\"st0\">\"the\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"that\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span><br/>   PAGE<span class=\"br0\">(</span><span class=\"st0\">\"frog\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"elephant\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"thing\"</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span><br/>   PAGE<span class=\"br0\">(</span><span class=\"st0\">\"walked\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"treaded\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"grows\"</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span><br/>   PAGE<span class=\"br0\">(</span><span class=\"st0\">\"slowly\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"quickly\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>PAGE sep<span class=\"sy1\">;</span><br/><span class=\"coMULTI\">#FOR PAGE amb IN #</span> gen amb<span class=\"br0\">(</span> <span class=\"coMULTI\"># ) DO #</span><br/><span class=\"coMULTI\">##</span>  <span class=\"br0\">(</span>PAGE amb<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>amb<span class=\"br0\">[</span>1<span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"st0\">\" \"</span><span class=\"sy1\">+</span>amb<span class=\"br0\">[</span>2<span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"st0\">\" \"</span><span class=\"sy1\">+</span>amb<span class=\"br0\">[</span>3<span class=\"br0\">]</span><span class=\"sy1\">+</span><span class=\"st0\">\" \"</span><span class=\"sy1\">+</span>amb<span class=\"br0\">[</span>4<span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">#OD#</span> <span class=\"br0\">)</span></pre>"}, {"lang": "ATS", "loc": 126, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(* ****** ****** *)<br/>//<br/>#include<br/>\"share/atspre_staload.hats\"<br/>#include<br/>\"share/HATS/atspre_staload_libats_ML.hats\"<br/>//<br/>(* ****** ****** *)<br/>//<br/>staload \"libats/ML/SATS/monad_list.sats\"<br/>staload _ = \"libats/ML/DATS/monad_list.dats\"<br/>//<br/>(* ****** ****** *)<br/>//<br/>datatype<br/>words =<br/>  | Sing of stringGt(0)<br/>  | Comb of (words, words)<br/>//<br/>(* ****** ****** *)<br/>//<br/>extern<br/>fun words_get_beg(words): char<br/>extern<br/>fun words_get_end(words): char<br/>//<br/>(* ****** ****** *)<br/>//<br/>implement<br/>words_get_beg(w0) =<br/>(<br/>case+ w0 of<br/>| Sing(cs) =&gt; cs[0]<br/>| Comb(w1, w2) =&gt; words_get_beg(w1)<br/>)<br/>//<br/>implement<br/>words_get_end(w0) =<br/>(<br/>case+ w0 of<br/>| Sing(cs) =&gt; cs[pred(length(cs))]<br/>| Comb(w1, w2) =&gt; words_get_end(w2)<br/>)<br/>//<br/>(* ****** ****** *)<br/>//<br/>fun<br/>words_comb<br/>(<br/>  w1: words, w2: words<br/>)\u00a0: list0(words) =<br/>  if (words_get_end(w1)=words_get_beg(w2))<br/>    then list0_sing(Comb(w1, w2)) else list0_nil()<br/>//<br/>(* ****** ****** *)<br/>//<br/>extern<br/>fun<br/>fprint_words: fprint_type(words)<br/>//<br/>overload fprint with fprint_words<br/>//<br/>implement<br/>fprint_words(out, ws) =<br/>(<br/>case+ ws of<br/>| Sing(w) =&gt; fprint(out, w)<br/>| Comb(w1, w2) =&gt; fprint!(out, w1, ' ', w2)<br/>)<br/>//<br/>implement fprint_val&lt;words&gt; = fprint_words<br/>//<br/>(* ****** ****** *)<br/>//<br/>typedef<br/>a = stringGt(0) and b = words<br/>//<br/>val ws1 =<br/>  $list{a}(\"this\", \"that\", \"a\")<br/>val ws1 =<br/>  list_map_fun&lt;a&gt;&lt;b&gt;(ws1, lam(x) =&gt; Sing(x))<br/>val ws1 = monad_list_list(list0_of_list_vt(ws1))<br/>//<br/>val ws2 =<br/>  $list{a}(\"frog\", \"elephant\", \"thing\")<br/>val ws2 =<br/>  list_map_fun&lt;a&gt;&lt;b&gt;(ws2, lam(x) =&gt; Sing(x))<br/>val ws2 = monad_list_list(list0_of_list_vt(ws2))<br/>//<br/>val ws3 =<br/>  $list{a}(\"walked\", \"treaded\", \"grows\")<br/>val ws3 =<br/>  list_map_fun&lt;a&gt;&lt;b&gt;(ws3, lam(x) =&gt; Sing(x))<br/>val ws3 = monad_list_list(list0_of_list_vt(ws3))<br/>//<br/>val ws4 =<br/>  $list{a}(\"slowly\", \"quickly\")<br/>val ws4 =<br/>  list_map_fun&lt;a&gt;&lt;b&gt;(ws4, lam(x) =&gt; Sing(x))<br/>val ws4 = monad_list_list(list0_of_list_vt(ws4))<br/>//<br/>(* ****** ****** *)<br/>//<br/>val<br/>ws12 =<br/>monad_bind2&lt;b,b&gt;&lt;b&gt;<br/>  (ws1, ws2, lam (w1, w2) =&gt; monad_list_list(words_comb(w1, w2)))<br/>val<br/>ws123 =<br/>monad_bind2&lt;b,b&gt;&lt;b&gt;<br/>  (ws12, ws3, lam (w12, w3) =&gt; monad_list_list(words_comb(w12, w3)))<br/>val<br/>ws1234 =<br/>monad_bind2&lt;b,b&gt;&lt;b&gt;<br/>  (ws123, ws4, lam (w123, w4) =&gt; monad_list_list(words_comb(w123, w4)))<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>implement main0 () =<br/>{<br/>  val () = fprintln! (stdout_ref, \"ws1234 = \", ws1234)<br/>}<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 16, "block": "<pre class=\"autohotkey highlighted_source\">set1 <span class=\"sy0\">:=</span> <span class=\"st0\">\"the that a\"</span> <br/>set2 <span class=\"sy0\">:=</span> <span class=\"st0\">\"frog elephant thing\"</span> <br/>set3 <span class=\"sy0\">:=</span> <span class=\"st0\">\"walked treaded grows\"</span> <br/>set4 <span class=\"sy0\">:=</span> <span class=\"st0\">\"slowly quickly\"</span> <br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% amb<span class=\"br0\">(</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> set1<span class=\"sy0\">,</span> set2<span class=\"sy0\">,</span> set3<span class=\"sy0\">,</span> set4 <span class=\"br0\">)</span> <br/><span class=\"co1\">; this takes a total of 17 iterations to complete </span><br/>\u00a0<br/>amb<span class=\"br0\">(</span> char <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> set1 <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> set2 <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> set3 <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> set4 <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">)</span> <br/><span class=\"br0\">{</span> <span class=\"co1\">; original call to amb must leave char param blank </span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> set1<span class=\"sy0\">,</span> <span class=\"re0\">%A_Space%</span> <br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span>char <span class=\"sy0\">=</span> <span class=\"br0\">(</span>idxchar <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> set2 <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span> <br/>    || <span class=\"br0\">(</span>char <span class=\"sy0\">=</span> idxchar || char <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>retval<span class=\"sy0\">:=</span> amb<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> set2<span class=\"sy0\">,</span> set3<span class=\"sy0\">,</span> set4<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0!<span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>      <span class=\"kw1\">Return</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> <span class=\"st0\">\" \"</span> retval <br/>  <span class=\"kw1\">Return</span> <span class=\"st0\">\"\"</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Bracmat", "loc": 23, "block": "<pre class=\"text highlighted_source\">( ( Amb<br/>  =   first last list words word solution<br/>    .  \u00a0!arg:(?first.?list)<br/>      &amp; (\u00a0!list:<br/>        |  \u00a0!list:(.?words)\u00a0?list<br/>          &amp;  \u00a0!words<br/>           \u00a0:  \u00a0?<br/>               \u00a0%( @(?word:!first\u00a0? @?last)<br/>                 &amp; Amb$(!last.!list):?solution<br/>                 &amp;\u00a0!word\u00a0!solution:?solution<br/>                 )<br/>               \u00a0?<br/>          &amp;\u00a0!solution<br/>        )<br/>  )<br/>&amp;   Amb<br/>  $ (<br/>    .   (.the that a)<br/>        (.frog elephant thing)<br/>        (.walked treaded grows)<br/>        (.slowly quickly)<br/>    )<br/>)</pre>"}, {"lang": "C", "loc": 41, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">typedef</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> amb_t<span class=\"sy0\">;</span><br/>\u00a0<br/>amb_t amb<span class=\"br0\">(</span><span class=\"kw4\">size_t</span> argc<span class=\"sy0\">,</span> ...<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  amb_t <span class=\"sy0\">*</span>choices<span class=\"sy0\">;</span><br/>  va_list ap<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>argc<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    choices <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>argc<span class=\"sy0\">*</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>amb_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_start.html\"><span class=\"kw3\">va_start</span></a><span class=\"br0\">(</span>ap<span class=\"sy0\">,</span> argc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span> choices<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_arg.html\"><span class=\"kw3\">va_arg</span></a><span class=\"br0\">(</span>ap<span class=\"sy0\">,</span> amb_t<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">++</span>i <span class=\"sy0\">&lt;</span> argc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_end.html\"><span class=\"kw3\">va_end</span></a><span class=\"br0\">(</span>ap<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">do</span> <span class=\"br0\">{</span> TRY<span class=\"br0\">(</span>choices<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">++</span>i <span class=\"sy0\">&lt;</span> argc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>choices<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  FAIL<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> joins<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>left<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>right<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> left<span class=\"br0\">[</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>left<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> right<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> _main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>w1<span class=\"sy0\">,*</span>w2<span class=\"sy0\">,*</span>w3<span class=\"sy0\">,*</span>w4<span class=\"sy0\">;</span><br/>\u00a0<br/>  w1 <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">\"the\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"that\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  w2 <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">\"frog\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"elephant\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thing\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  w3 <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"st0\">\"walked\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"treaded\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"grows\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  w4 <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"st0\">\"slowly\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"quickly\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>joins<span class=\"br0\">(</span>w1<span class=\"sy0\">,</span> w2<span class=\"br0\">)</span><span class=\"br0\">)</span> amb<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>joins<span class=\"br0\">(</span>w2<span class=\"sy0\">,</span> w3<span class=\"br0\">)</span><span class=\"br0\">)</span> amb<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>joins<span class=\"br0\">(</span>w3<span class=\"sy0\">,</span> w4<span class=\"br0\">)</span><span class=\"br0\">)</span> amb<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s\u00a0%s\u00a0%s\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> w1<span class=\"sy0\">,</span> w2<span class=\"sy0\">,</span> w3<span class=\"sy0\">,</span> w4<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> EXIT_SUCCESS<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 152, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Amb <span class=\"sy0\">:</span> IDisposable<br/><span class=\"br0\">{</span><br/>    List<span class=\"sy0\">&lt;</span>IValueSet<span class=\"sy0\">&gt;</span> streams <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>IValueSet<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    List<span class=\"sy0\">&lt;</span>IAssertOrAction<span class=\"sy0\">&gt;</span> assertsOrActions <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>IAssertOrAction<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">volatile</span> <span class=\"kw4\">bool</span> stopped <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> IAmbValue<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> DefineValues<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">params</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> values<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> DefineValueSet<span class=\"br0\">(</span>values<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> IAmbValue<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> DefineValueSet<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> values<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        ValueSet<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> stream <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ValueSet<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        stream<span class=\"sy0\">.</span><span class=\"me1\">Enumerable</span> <span class=\"sy0\">=</span> values<span class=\"sy0\">;</span><br/>        streams<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>stream<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> stream<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Amb Assert<span class=\"br0\">(</span>Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">bool</span><span class=\"sy0\">&gt;</span> function<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        assertsOrActions<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> AmbAssert<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Level <span class=\"sy0\">=</span> streams<span class=\"sy0\">.</span><span class=\"me1\">Count</span>,<br/>            IsValidFunction <span class=\"sy0\">=</span> function<br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> Amb Perform<span class=\"br0\">(</span>Action action<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        assertsOrActions<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> AmbAction<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Level <span class=\"sy0\">=</span> streams<span class=\"sy0\">.</span><span class=\"me1\">Count</span>,<br/>            Action <span class=\"sy0\">=</span> action<br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> Stop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        stopped <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> Dispose<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        RunLevel<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>stopped<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> AmbException<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> RunLevel<span class=\"br0\">(</span><span class=\"kw4\">int</span> level, <span class=\"kw4\">int</span> actionIndex<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>actionIndex <span class=\"sy0\">&lt;</span> assertsOrActions<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">&amp;&amp;</span> assertsOrActions<span class=\"br0\">[</span>actionIndex<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">Level</span> <span class=\"sy0\">&lt;=</span> level<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>assertsOrActions<span class=\"br0\">[</span>actionIndex<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">Invoke</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> stopped<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>            actionIndex<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>level <span class=\"sy0\">&lt;</span> streams<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">using</span> <span class=\"br0\">(</span>IValueSetIterator iterator <span class=\"sy0\">=</span> streams<span class=\"br0\">[</span>level<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">CreateIterator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">while</span> <span class=\"br0\">(</span>iterator<span class=\"sy0\">.</span><span class=\"me1\">MoveNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    RunLevel<span class=\"br0\">(</span>level <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, actionIndex<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">interface</span> IValueSet<br/>    <span class=\"br0\">{</span><br/>        IValueSetIterator CreateIterator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">interface</span> IValueSetIterator <span class=\"sy0\">:</span> IDisposable<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">bool</span> MoveNext<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">interface</span> IAssertOrAction<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> Level <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw4\">bool</span> Invoke<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">class</span> AmbAssert <span class=\"sy0\">:</span> IAssertOrAction<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">internal</span> <span class=\"kw4\">int</span> Level<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">internal</span> Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">bool</span><span class=\"sy0\">&gt;</span> IsValidFunction<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> IAssertOrAction<span class=\"sy0\">.</span><span class=\"me1\">Level</span> <span class=\"br0\">{</span> <span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> Level<span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">bool</span> IAssertOrAction<span class=\"sy0\">.</span><span class=\"me1\">Invoke</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> IsValidFunction<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">class</span> AmbAction <span class=\"sy0\">:</span> IAssertOrAction<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">internal</span> <span class=\"kw4\">int</span> Level<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">internal</span> Action Action<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> IAssertOrAction<span class=\"sy0\">.</span><span class=\"me1\">Level</span> <span class=\"br0\">{</span> <span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> Level<span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">bool</span> IAssertOrAction<span class=\"sy0\">.</span><span class=\"me1\">Invoke</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Action<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">class</span> ValueSet<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> <span class=\"sy0\">:</span> IValueSet, IAmbValue<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span>, IValueSetIterator<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">internal</span> IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> Enumerable<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> IEnumerator<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> enumerator<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> T <span class=\"kw1\">Value</span> <span class=\"br0\">{</span> <span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> enumerator<span class=\"sy0\">.</span><span class=\"me1\">Current</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> IValueSetIterator CreateIterator<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            enumerator <span class=\"sy0\">=</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">GetEnumerator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> MoveNext<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> enumerator<span class=\"sy0\">.</span><span class=\"me1\">MoveNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> Dispose<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            enumerator<span class=\"sy0\">.</span><span class=\"me1\">Dispose</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">interface</span> IAmbValue<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><br/><span class=\"br0\">{</span><br/>    T <span class=\"kw1\">Value</span> <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> AmbException <span class=\"sy0\">:</span> Exception<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> AmbException<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw1\">base</span><span class=\"br0\">(</span><span class=\"st0\">\"AMB is angry\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 13, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">ns</span> amb<br/>  <span class=\"br0\">(</span>:<span class=\"me1\">use</span> clojure<span class=\"sy0\">.</span>contrib<span class=\"sy0\">.</span>monads<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> amb <span class=\"br0\">[</span>wss<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>valid<span class=\"sy0\">-</span>word <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>w1 w2<span class=\"br0\">]</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> w1 <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>last w1<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">first</span> w2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span><span class=\"kw1\">str</span> w1 <span class=\"st0\">\" \"</span> w2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span><span class=\"kw1\">reduce</span> valid<span class=\"sy0\">-</span>word <span class=\"sy0\">%</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>with<span class=\"sy0\">-</span>monad sequence<span class=\"sy0\">-</span>m <span class=\"br0\">(</span>m<span class=\"sy0\">-</span>seq wss<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>amb<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>amb '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"the\"</span> <span class=\"st0\">\"that\"</span> <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"frog\"</span> <span class=\"st0\">\"elephant\"</span> <span class=\"st0\">\"thing\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"walked\"</span> <span class=\"st0\">\"treaded\"</span> <span class=\"st0\">\"grows\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"st0\">\"slowly\"</span> <span class=\"st0\">\"quickly\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"that\"</span> <span class=\"st0\">\"thing\"</span> <span class=\"st0\">\"grows\"</span> <span class=\"st0\">\"slowly\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 35, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>define-condition amb-failure <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">report</span> <span class=\"st0\">\"No amb alternative succeeded.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> invoke-ambiguously <span class=\"br0\">(</span><span class=\"kw1\">function</span> thunks<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Call function with successive values produced by successive<br/>functions in thunks until some invocation of function does not signal<br/>an amb-failure.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>thunks thunks <span class=\"br0\">(</span>rest thunks<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span>endp thunks<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">error</span> 'amb-failure<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>argument <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> <span class=\"br0\">(</span>first thunks<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>handler-<span class=\"kw1\">case</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> <span class=\"kw1\">function</span> argument<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>amb-failure <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> amblet1 <span class=\"br0\">(</span><span class=\"br0\">(</span>var form<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span>body body<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"If form is of the form (amb {form}*) then amblet1 is a convenient<br/>syntax for invoke-ambiguously, by which body is evaluated with var<br/>bound the results of each form until some evaluation of body does not<br/>signal an amb-failure. For any other form, amblet binds var the result<br/>of form, and evaluates body.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">listp</span> form<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> <span class=\"br0\">(</span>first form<span class=\"br0\">)</span> 'amb<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    `<span class=\"br0\">(</span>invoke-ambiguously<br/>      #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"sy0\">,</span>var<span class=\"br0\">)</span> <span class=\"sy0\">,</span>@body<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"sy0\">,</span>@<span class=\"br0\">(</span>loop for amb-form in <span class=\"br0\">(</span>rest form<span class=\"br0\">)</span><br/>                    collecting `#'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">,</span>amb-form<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    `<span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">,</span>var <span class=\"sy0\">,</span>form<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"sy0\">,</span>@body<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> amblet <span class=\"br0\">(</span>bindings <span class=\"sy0\">&amp;</span>body body<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Like let, except that if an init-form is of the form (amb {form}*),<br/>then the corresponding var is bound with amblet1.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp bindings<span class=\"br0\">)</span><br/>    `<span class=\"br0\">(</span><span class=\"kw1\">progn</span> <span class=\"sy0\">,</span>@body<span class=\"br0\">)</span><br/>    `<span class=\"br0\">(</span>amblet1 <span class=\"sy0\">,</span><span class=\"br0\">(</span>first bindings<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>amblet <span class=\"sy0\">,</span><span class=\"br0\">(</span>rest bindings<span class=\"br0\">)</span><br/>         <span class=\"sy0\">,</span>@body<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 47, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co3\">/** This amb function takes a comparison function and<br/>the possibilities that need to be checked.*/</span><br/><span class=\"co1\">//string[] amb(in bool function(in string, in string) pure comp,</span><br/><span class=\"kw4\">const</span><span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span> amb<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">bool</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span><span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">string</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> comp<span class=\"sy0\">,</span><br/>                    <span class=\"kw2\">in</span> <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> options<span class=\"sy0\">,</span><br/>                    <span class=\"kw2\">in</span> <span class=\"kw4\">string</span> prev <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>options.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> opt<span class=\"sy0\">;</span> options.<span class=\"me1\">front</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// If this is the base call, prev is null and we need to</span><br/>        <span class=\"co1\">// continue.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>prev.<span class=\"me1\">empty</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>comp<span class=\"br0\">(</span>prev<span class=\"sy0\">,</span> opt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Take care of the case where we have no options left.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>options.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">[</span>opt<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// Traverse into the tree.</span><br/>        <span class=\"kw4\">const</span> res <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span>comp<span class=\"sy0\">,</span> options<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"sy0\">,</span> opt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// If it was a failure, try the next one.</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>res.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> opt <span class=\"sy0\">~</span> res<span class=\"sy0\">;</span> <span class=\"co1\">// We have a match!</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span> <span class=\"co1\">// No matches.</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> sets <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"the\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"that\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"a\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                      <span class=\"br0\">[</span><span class=\"st0\">\"frog\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"elephant\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thing\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                      <span class=\"br0\">[</span><span class=\"st0\">\"walked\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"treaded\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"grows\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                      <span class=\"br0\">[</span><span class=\"st0\">\"slowly\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"quickly\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Pass in the comparator and the available sets.</span><br/>    <span class=\"co1\">// (The comparator is not nothrow because of UTF.)</span><br/>    <span class=\"kw4\">const</span> result <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> t<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> s.<span class=\"me1\">back</span> <span class=\"sy0\">==</span> t.<span class=\"me1\">front</span><span class=\"sy0\">,</span> sets<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>result.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>        writeln<span class=\"br0\">(</span><span class=\"st0\">\"No matches found!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%-(%s\u00a0%)\"</span><span class=\"sy0\">,</span> result<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 81, "block": "<pre class=\"e highlighted_source\">pragma.<span class=\"me1\">enable</span><span class=\"br0\">(</span><span class=\"st0\">\"accumulator\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> <span class=\"br0\">[</span>amb<span class=\"sy0\">,</span> unamb<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"br0\">{</span> <span class=\"co1\"># block hides internals</span><br/>\u00a0<br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> Choice <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/Tuple\"><span class=\"kw6\">Tuple</span></a><span class=\"br0\">[</span><a href=\"http://wiki.erights.org/wiki/any\"><span class=\"kw6\">any</span></a><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/Map\"><span class=\"kw6\">Map</span></a><span class=\"br0\">]</span><br/>\u00a0<br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> <span class=\"br0\">[</span>ambS<span class=\"sy0\">,</span> ambU<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;</span>elib<span class=\"sy0\">:</span>sealing.<span class=\"me1\">makeBrand</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"st0\">\"amb\"</span><span class=\"br0\">)</span><br/>  <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> counter <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"co1\"># Used just for printing ambs</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/** Check whether two sets of decisions are consistent */</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> consistent<span class=\"br0\">(</span>decA<span class=\"sy0\">,</span> decB<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> overlap <span class=\"sy0\">:=</span> decA.<span class=\"me1\">domain</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> decB.<span class=\"me1\">domain</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> ambObj <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> overlap <span class=\"br0\">{</span><br/>      <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>decA<span class=\"br0\">[</span>ambObj<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> decB<span class=\"br0\">[</span>ambObj<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> return <a href=\"http://wiki.erights.org/wiki/false\"><span class=\"kw6\">false</span></a> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    return <a href=\"http://wiki.erights.org/wiki/true\"><span class=\"kw6\">true</span></a><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/** From an amb object, extract the possible choices */</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> getChoices<span class=\"br0\">(</span>obj<span class=\"sy0\">,</span> decisions<span class=\"br0\">)</span> <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/List\"><span class=\"kw6\">List</span></a><span class=\"br0\">[</span>Choice<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>decisions.<span class=\"me1\">maps</span><span class=\"br0\">(</span>obj<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      return <span class=\"br0\">[</span><span class=\"br0\">[</span>decisions<span class=\"br0\">[</span>obj<span class=\"br0\">]</span><span class=\"sy0\">,</span> decisions<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ambU.<span class=\"me1\">amplify</span><span class=\"br0\">(</span>obj<span class=\"br0\">)</span> <span class=\"sy0\">=</span>~ <span class=\"br0\">[</span><span class=\"br0\">[</span>choices<span class=\"sy0\">,</span> _<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      return <a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> <span class=\"br0\">[</span>chosen<span class=\"sy0\">,</span> dec<span class=\"br0\">]</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span>consistent<span class=\"br0\">(</span>decisions<span class=\"sy0\">,</span> dec<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> choices <span class=\"br0\">{</span> _ <span class=\"sy0\">+</span> getChoices<span class=\"br0\">(</span>chosen<span class=\"sy0\">,</span> <span class=\"br0\">(</span>decisions <span class=\"sy0\">|</span> dec<span class=\"br0\">)</span>.<span class=\"me1\">with</span><span class=\"br0\">(</span>obj<span class=\"sy0\">,</span> chosen<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <span class=\"br0\">{</span><br/>      return <span class=\"br0\">[</span><span class=\"br0\">[</span>obj<span class=\"sy0\">,</span> decisions<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/** Construct an amb object with remembered decisions */</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> ambDec<span class=\"br0\">(</span>choices <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/List\"><span class=\"kw6\">List</span></a><span class=\"br0\">[</span>Choice<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> serial <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>counter <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> ambObj <span class=\"br0\">{</span><br/>      <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> __printOn<span class=\"br0\">(</span>out<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        out.<a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\"&lt;amb(\"</span><span class=\"sy0\">,</span> serial<span class=\"sy0\">,</span> <span class=\"st0\">\")\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> <span class=\"br0\">[</span>chosen<span class=\"sy0\">,</span> decisions<span class=\"br0\">]</span> <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> choices <span class=\"br0\">{</span><br/>          out.<a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> chosen<span class=\"br0\">)</span><br/>          <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> k <span class=\"sy0\">=&gt;</span> v <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> decisions <span class=\"br0\">{</span><br/>            out.<a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\";\"</span><span class=\"sy0\">,</span> ambU.<span class=\"me1\">amplify</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"=\"</span><span class=\"sy0\">,</span> v<span class=\"br0\">)</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        out.<a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> __optSealedDispatch<span class=\"br0\">(</span>brand<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>brand <span class=\"sy0\">==</span> ambS.<span class=\"me1\">getBrand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          return ambS.<span class=\"me1\">seal</span><span class=\"br0\">(</span><span class=\"br0\">[</span>choices<span class=\"sy0\">,</span> serial<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> <span class=\"br0\">[</span>verb<span class=\"sy0\">,</span> args<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> results <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> <span class=\"br0\">[</span>rec<span class=\"sy0\">,</span> rdec<span class=\"br0\">]</span> <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> getChoices<span class=\"br0\">(</span>ambObj<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">asMap</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> expandArgs<span class=\"br0\">(</span>dec<span class=\"sy0\">,</span> prefix<span class=\"sy0\">,</span> choosing<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://wiki.erights.org/wiki/switch\"><span class=\"kw1\">switch</span></a> <span class=\"br0\">(</span>choosing<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>               <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> results with<span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://wiki.erights.org/wiki/E\"><span class=\"kw6\">E</span></a>.<span class=\"me1\">call</span><span class=\"br0\">(</span>rec<span class=\"sy0\">,</span> verb<span class=\"sy0\">,</span> prefix<span class=\"br0\">)</span><span class=\"sy0\">,</span> dec<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>               <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> <span class=\"br0\">[</span>argAmb<span class=\"br0\">]</span> <span class=\"sy0\">+</span> moreArgs <span class=\"br0\">{</span><br/>                 <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> <span class=\"br0\">[</span>arg<span class=\"sy0\">,</span> adec<span class=\"br0\">]</span> <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> getChoices<span class=\"br0\">(</span>argAmb<span class=\"sy0\">,</span> dec<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                   expandArgs<span class=\"br0\">(</span>adec<span class=\"sy0\">,</span> prefix.<span class=\"me1\">with</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span><span class=\"sy0\">,</span> moreArgs<span class=\"br0\">)</span><br/>                 <span class=\"br0\">}</span><br/>               <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>          <span class=\"br0\">}</span><br/>          expandArgs<span class=\"br0\">(</span>rdec<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        ambDec<span class=\"br0\">(</span>results<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    return ambObj<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/** Construct an amb object with no remembered decisions. (public interface) */</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> amb<span class=\"br0\">(</span>choices<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    return ambDec<span class=\"br0\">(</span><a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> c <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> choices <span class=\"br0\">{</span> _.<span class=\"me1\">with</span><span class=\"br0\">(</span><span class=\"br0\">[</span>c<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">asMap</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/** Get the possible results from an amb object, discarding decision info. (public interface) */</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> unamb<span class=\"br0\">(</span>ambObj<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    return <a href=\"http://wiki.erights.org/wiki/accum\"><span class=\"kw1\">accum</span></a> <span class=\"br0\">[</span><span class=\"br0\">]</span> <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> <span class=\"br0\">[</span>c<span class=\"sy0\">,</span>_<span class=\"br0\">]</span> <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> getChoices<span class=\"br0\">(</span>ambObj<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">asMap</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> _.<span class=\"me1\">with</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">[</span>amb<span class=\"sy0\">,</span> unamb<span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Egison", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>; We don't need 'amb' in the code since pattern-matching of Egison automatically do backtracking.<br/>(match-all {{\"the\" \"that\" \"a\"} {\"frog\" \"elephant\" \"thing\"} {\"walked\" \"treaded\" \"grows\"} {\"slowly\" \"quickly\"}} (list (multiset string))<br/>  [&lt;cons &lt;cons (&amp; &lt;snoc $c_1 _&gt; $w_1) _&gt;<br/>         (loop $i [2 $n]<br/>           &lt;cons &lt;cons (&amp; &lt;cons ,c_(- i 1) &lt;snoc $c_i _&gt;&gt; $w_i) _&gt; ...&gt;<br/>           &lt;nil&gt;)&gt;<br/>   (map (lambda [$i] w_i) (between 1 n))])<br/>\u00a0</pre>"}, {"lang": "Ela", "loc": 15, "block": "<pre class=\"text highlighted_source\">open list core<br/>\u00a0<br/>amb xs = x where <br/>  (Some x) = &amp; join xs \"\"<br/>  join (x::xs) = amb' x (join xs)<br/>  join [] = \\_ -&gt; Some \"\"<br/>  eq' [] x = true<br/>  eq' w x  = last w == head x<br/>  amb' [] _ _ = None<br/>  amb' (x::xs) n w <br/>    | eq' w x =<br/>    match n x with<br/>          Some v = Some (x ++ \" \" ++ v)<br/>          _ = amb' xs n w<br/>    | else = amb' xs n w</pre>"}, {"lang": "Elena", "loc": 75, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>import extensions'routines.<br/>\u00a0<br/>joinable(former,later) = (former[former length - 1] == later[0]).<br/>\u00a0<br/>dispatcher =<br/>{<br/>    eval(object a, Func2 f)<br/>    [<br/>        ^ f(a[0],a[1]).<br/>    ]<br/>\u00a0<br/>    eval(object a, Func3 f)<br/>    [<br/>        ^ f(a[0], a[1],a[2]).<br/>    ]<br/>\u00a0<br/>    eval(object a, Func4 f)<br/>    [<br/>        ^ f(a[0],a[1],a[2],a[3]).<br/>    ]<br/>\u00a0<br/>    eval(object a, Func5 f)<br/>    [<br/>        ^ f(a[0],a[1],a[2],a[3],a[4]).<br/>    ]<br/>}.<br/>\u00a0<br/>class AmbValueCollection<br/>{<br/>    object theCombinator.<br/>\u00a0<br/>    generic constructor new(V&lt;object&gt; args)<br/>    [<br/>        theCombinator\u00a0:= SequentialEnumerator new(args).<br/>    ]<br/>\u00a0<br/>    seek\u00a0: cond<br/>    [<br/>        theCombinator reset.<br/>\u00a0<br/>        theCombinator seekEach(:v)(dispatcher eval(v,cond))<br/>    ]<br/>\u00a0<br/>    do\u00a0: aFunction<br/>    [<br/>        var aResult\u00a0:= theCombinator get.<br/>        if (nil\u00a0!= aResult)<br/>            [ dispatcher eval(aResult,aFunction) ];<br/>            [ InvalidArgumentException new; raise ]<br/>    ]<br/>}<br/>\u00a0<br/>ambOperator =<br/>{<br/>    generic for(V&lt;object&gt; args)<br/>        = AmbValueCollection new(args).<br/>}.<br/>\u00a0<br/>public program<br/>[<br/>    try(ambOperator <br/>        for((\"the\",\"that\",\"a\"),(\"frog\", \"elephant\", \"thing\"),(\"walked\", \"treaded\", \"grows\"),(\"slowly\", \"quickly\"));<br/>        seek(:a:b:c:d) ( joinable(a,b) &amp;&amp; joinable(b,c) &amp;&amp; joinable(c,d) );<br/>        do(:a:b:c:d) [ console printLine(a,\" \",b,\" \",c,\" \",d) ])<br/>    {<br/>        on(Exception e)<br/>        [<br/>            console printLine:\"AMB is angry\"<br/>        ]        <br/>    }.<br/>\u00a0<br/>    console readChar<br/>]</pre>"}, {"lang": "ERRE", "loc": 52, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM AMB<br/>\u00a0<br/>!<br/>! for rosettacode.org<br/>!<br/>\u00a0<br/>!$KEY<br/>\u00a0<br/>DIM SET1$[2],SET2$[2],SET3$[2],SET4$[2]<br/>\u00a0<br/>FUNCTION WORDS_OK(STRING1$,STRING2$)<br/>  WORDS_OK=(RIGHT$(STRING1$,1)=LEFT$(STRING2$,1))<br/>END FUNCTION<br/>\u00a0<br/>PROCEDURE AMB(SET1$[],SET2$[],SET3$[],SET4$[]-&gt;RESULT$)<br/>  RESULT$=\"\"\u00a0! Empty string, e.g. fail<br/>  FOR A=0 TO 2 DO<br/>    FOR B=0 TO 2 DO<br/>      FOR C=0 TO 2 DO<br/>        FOR D=0 TO 2 DO<br/>          IF WORDS_OK(SET1$[A],SET2$[B]) AND WORDS_OK(SET2$[B],SET3$[C]) AND WORDS_OK(SET3$[C],SET4$[D]) THEN<br/>            RESULT$=SET1$[A]+\" \"+SET2$[B]+\" \"+SET3$[C]+\" \"+SET4$[D]<br/>            EXIT PROCEDURE<br/>          END IF<br/>        END FOR<br/>      END FOR<br/>    END FOR<br/>  END FOR<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>  PRINT(CHR$(12);)  \u00a0! CLS<br/>  SET1$[0]=\"the\"     SET1$[1]=\"that\"     SET1$[2]=\"a\"<br/>  SET2$[0]=\"frog\"    SET2$[1]=\"elephant\" SET2$[2]=\"thing\"<br/>  SET3$[0]=\"walked\"  SET3$[1]=\"treaded\"  SET3$[2]=\"grows\"<br/>  SET4$[0]=\"slowly\"  SET4$[1]=\"quickly\"  SET4$[2]=\"\"<br/>\u00a0<br/>  AMB(SET1$[],SET2$[],SET3$[],SET4$[]-&gt;TEXT$)<br/>  IF TEXT$&lt;&gt;\"\" THEN<br/>    PRINT(\"Correct sentence would be:\")<br/>    PRINT(TEXT$)<br/>  ELSE<br/>    PRINT(\"Failed to fine a correct sentence.\")<br/>  END IF<br/>  PRINT<br/>  PRINT(\"Press any key to exit.\")<br/>  REPEAT<br/>    GET(Z$)<br/>  UNTIL LEN(Z$)&lt;&gt;0<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 20, "block": "<pre class=\"text highlighted_source\">USING: backtrack continuations kernel prettyprint sequences\u00a0;<br/>IN: amb<br/>\u00a0<br/>CONSTANT: words {<br/>    { \"the\" \"that\" \"a\" }<br/>    { \"frog\" \"elephant\" \"thing\" }<br/>    { \"walked\" \"treaded\" \"grows\" }<br/>    { \"slowly\" \"quickly\"  }<br/>}<br/>\u00a0<br/>: letters-match? ( str1 str2 --\u00a0? ) [ last ] [ first ] bi* =\u00a0;<br/>\u00a0<br/>: sentence-match? ( seq --\u00a0? ) dup rest [ letters-match? ] 2all?\u00a0;<br/>\u00a0<br/>: select ( seq -- seq' ) [ amb-lazy ] map\u00a0;<br/>\u00a0<br/>: search ( -- )<br/>    words select dup sentence-match? [ \" \" join ] [ fail ] if .\u00a0;<br/>\u00a0<br/>MAIN: search</pre>"}, {"lang": "F#", "loc": 28, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"co1\">// define the List \"workflow\" (monad)</span><br/><span class=\"kw1\">type</span> ListBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>   <span class=\"kw1\">member</span> o.<span class=\"me1\">Bind</span><span class=\"br0\">(</span> lst, f <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">concat</span><span class=\"br0\">(</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x <span class=\"sy0\">-&gt;</span> f x<span class=\"br0\">)</span> lst <span class=\"br0\">)</span><br/>   <span class=\"kw1\">member</span> o.<span class=\"me1\">Return</span><span class=\"br0\">(</span> x <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>   <span class=\"kw1\">member</span> o.<span class=\"me1\">Zero</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> list <span class=\"sy0\">=</span> ListBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> amb <span class=\"sy0\">=</span> id<br/>\u00a0<br/><span class=\"co1\">// last element of a sequence</span><br/><span class=\"kw1\">let</span> last s <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">nth</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">length</span> s<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> s<br/>\u00a0<br/><span class=\"co1\">// is the last element of left the same as the first element of right?</span><br/><span class=\"kw1\">let</span> joins left right <span class=\"sy0\">=</span> last left <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">head</span> right<br/>\u00a0<br/><span class=\"kw1\">let</span> example <span class=\"sy0\">=</span> list <span class=\"br0\">{</span> <span class=\"kw1\">let!</span> w1 <span class=\"sy0\">=</span> amb <span class=\"br0\">[</span><span class=\"st0\">\"the\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"that\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"a\"</span><span class=\"br0\">]</span><br/>                     <span class=\"kw1\">let!</span> w2 <span class=\"sy0\">=</span> amb <span class=\"br0\">[</span><span class=\"st0\">\"frog\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"elephant\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"thing\"</span><span class=\"br0\">]</span><br/>                     <span class=\"kw1\">let!</span> w3 <span class=\"sy0\">=</span> amb <span class=\"br0\">[</span><span class=\"st0\">\"walked\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"treaded\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"grows\"</span><span class=\"br0\">]</span><br/>                     <span class=\"kw1\">let!</span> w4 <span class=\"sy0\">=</span> amb <span class=\"br0\">[</span><span class=\"st0\">\"slowly\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"quickly\"</span><span class=\"br0\">]</span><br/>                     <span class=\"kw1\">if</span> joins w1 w2 &amp;&amp;<br/>                        joins w2 w3 &amp;&amp;<br/>                        joins w3 w4<br/>                     <span class=\"kw1\">then</span><br/>                        <span class=\"kw1\">return</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">concat</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">[</span>w1<span class=\"sy0\">;</span> w2<span class=\"sy0\">;</span> w3<span class=\"sy0\">;</span> w4<span class=\"br0\">]</span><br/>                   <span class=\"br0\">}</span><br/>\u00a0<br/>printfn <span class=\"st0\">\"%s\"</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">head</span> example<span class=\"br0\">)</span></pre>"}, {"lang": "Go", "loc": 49, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"sync\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ambStrings<span class=\"sy1\">(</span>ss <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">chan</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    c <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">go</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> ss <span class=\"sy1\">{</span><br/>            c &lt;<span class=\"sy3\">-</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span>s<span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw3\">close</span><span class=\"sy1\">(</span>c<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}()</span><br/>    <span class=\"kw1\">return</span> c<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> ambChain<span class=\"sy1\">(</span>ss <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">,</span> cIn <span class=\"kw4\">chan</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">chan</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    cOut <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">chan</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">go</span> <span class=\"kw4\">func</span><span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">var</span> w sync<span class=\"sy3\">.</span>WaitGroup<br/>        <span class=\"kw1\">for</span> chain <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> cIn <span class=\"sy1\">{</span><br/>            w<span class=\"sy3\">.</span>Add<span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>            <span class=\"kw1\">go</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span>chain <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">for</span> s1 <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> ambStrings<span class=\"sy1\">(</span>ss<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>                    <span class=\"kw1\">if</span> s1<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">][</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>s1<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> chain<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">][</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                        cOut &lt;<span class=\"sy3\">-</span> append<span class=\"sy1\">(</span>s1<span class=\"sy1\">,</span> chain<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>                    <span class=\"sy1\">}</span><br/>                <span class=\"sy1\">}</span><br/>                w<span class=\"sy3\">.</span>Done<span class=\"sy1\">()</span><br/>            <span class=\"sy1\">}(</span>chain<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        w<span class=\"sy3\">.</span>Wait<span class=\"sy1\">()</span><br/>        <span class=\"kw3\">close</span><span class=\"sy1\">(</span>cOut<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}()</span><br/>    <span class=\"kw1\">return</span> cOut<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    s1 <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"the\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"that\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"a\"</span><span class=\"sy1\">}</span><br/>    s2 <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"frog\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"elephant\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"thing\"</span><span class=\"sy1\">}</span><br/>    s3 <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"walked\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"treaded\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"grows\"</span><span class=\"sy1\">}</span><br/>    s4 <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"slowly\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"quickly\"</span><span class=\"sy1\">}</span><br/>    c <span class=\"sy2\">:=</span> ambChain<span class=\"sy1\">(</span>s1<span class=\"sy1\">,</span> ambChain<span class=\"sy1\">(</span>s2<span class=\"sy1\">,</span> ambChain<span class=\"sy1\">(</span>s3<span class=\"sy1\">,</span> ambStrings<span class=\"sy1\">(</span>s4<span class=\"sy1\">))))</span><br/>    <span class=\"kw1\">for</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> c <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 15, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><br/>\u00a0<br/>amb <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:id\"><span class=\"kw3\">id</span></a><br/>\u00a0<br/>joins left right <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:last\"><span class=\"kw3\">last</span></a> left <span class=\"sy0\">==</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> right<br/>\u00a0<br/>example <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  w1 <span class=\"sy0\">&lt;-</span> amb <span class=\"br0\">[</span><span class=\"st0\">\"the\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"that\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"a\"</span><span class=\"br0\">]</span><br/>  w2 <span class=\"sy0\">&lt;-</span> amb <span class=\"br0\">[</span><span class=\"st0\">\"frog\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"elephant\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thing\"</span><span class=\"br0\">]</span><br/>  w3 <span class=\"sy0\">&lt;-</span> amb <span class=\"br0\">[</span><span class=\"st0\">\"walked\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"treaded\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"grows\"</span><span class=\"br0\">]</span><br/>  w4 <span class=\"sy0\">&lt;-</span> amb <span class=\"br0\">[</span><span class=\"st0\">\"slowly\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"quickly\"</span><span class=\"br0\">]</span><br/>  unless <span class=\"br0\">(</span>joins w1 w2<span class=\"br0\">)</span> <span class=\"br0\">(</span>amb <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  unless <span class=\"br0\">(</span>joins w2 w3<span class=\"br0\">)</span> <span class=\"br0\">(</span>amb <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  unless <span class=\"br0\">(</span>joins w3 w4<span class=\"br0\">)</span> <span class=\"br0\">(</span>amb <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unwords\"><span class=\"kw3\">unwords</span></a> <span class=\"br0\">[</span>w1<span class=\"sy0\">,</span> w2<span class=\"sy0\">,</span> w3<span class=\"sy0\">,</span> w4<span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haxe", "loc": 73, "block": "<pre class=\"text highlighted_source\">class RosettaDemo<br/>{<br/>\tstatic var setA = ['the', 'that', 'a'];<br/>\tstatic var setB = ['frog', 'elephant', 'thing'];<br/>\tstatic var setC = ['walked', 'treaded', 'grows'];<br/>\tstatic var setD = ['slowly', 'quickly'];<br/>\u00a0<br/>\tstatic public function main()<br/>\t{<br/>\t\tSys.print(ambParse([ setA, setB, setC, setD ]).toString());<br/>\t}<br/>\u00a0<br/>\tstatic function ambParse(sets\u00a0: Array&lt;Array&lt;String&gt;&gt;)<br/>\t{<br/>\t\tvar ambData\u00a0: Dynamic = amb(sets);<br/>\u00a0<br/>\t\tfor (data in 0...ambData.length)<br/>\t\t{<br/>\t\t\tvar tmpData = parseIt(ambData[data]);<br/>\t\t\tvar tmpArray = tmpData.split(' ');<br/>\t\t\ttmpArray.pop();<br/>\t\t\tif (tmpArray.length == sets.length)<br/>\t\t\t{<br/>\t\t\t\treturn tmpData;<br/>\t\t\t}<br/>\t\t}<br/>\u00a0<br/>\t\treturn '';<br/>\t}<br/>\u00a0<br/>\tstatic function amb(startingWith\u00a0: String = '', sets\u00a0: Array&lt;Array&lt;String&gt;&gt;)\u00a0: Dynamic<br/>\t{<br/>\t\tif (sets.length == 0 || sets[0].length == 0) return;<br/>\u00a0<br/>\t\tvar match\u00a0: Dynamic = [];<br/>\t\tfor (reference in sets[0])<br/>\t\t{<br/>\t\t\tif (startingWith == '' || startingWith == reference.charAt(0))<br/>\t\t\t{<br/>\t\t\t\tvar lastChar = reference.charAt(reference.length-1);<br/>\t\t\t\tif (Std.is(amb(lastChar, sets.slice(1)), Array))<br/>\t\t\t\t{<br/>\t\t\t\t\tmatch.push([ reference, amb(lastChar, sets.slice(1))]);<br/>\t\t\t\t}<br/>\t\t\t\telse<br/>\t\t\t\t{<br/>\t\t\t\t\tmatch.push([ reference ]);<br/>\t\t\t\t}<br/>\t\t\t}<br/>\t\t}<br/>\t\treturn match;<br/>\t}<br/>\u00a0<br/>\tstatic function parseIt(data\u00a0: Dynamic)<br/>\t{<br/>\t\tvar retData = '';<br/>\t\tif (Std.is(data, Array))<br/>\t\t{<br/>\t\t\tfor (elements in 0...data.length)<br/>\t\t\t{<br/>\t\t\t\tif (Std.is(data[elements], Array))<br/>\t\t\t\t{<br/>\t\t\t\t\tretData = retData + parseIt(data[elements]);<br/>\t\t\t\t}<br/>\t\t\t\telse<br/>\t\t\t\t{<br/>\t\t\t\t\tretData = retData + data[elements] + ' ';<br/>\t\t\t\t}<br/>\t\t\t}<br/>\t\t}<br/>\t\treturn retData;<br/>\t}<br/>}</pre>"}, {"lang": "Icon and Unicon", "loc": 18, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    s1 <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"the\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"that\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"a\"</span><span class=\"br0\">]</span><br/>    s2 <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"frog\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"elephant\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"thing\"</span><span class=\"br0\">]</span><br/>    s3 <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"walked\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"treaded\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"grows\"</span><span class=\"br0\">]</span><br/>    s4 <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"slowly\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"quickly\"</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span>amb<span class=\"br0\">(</span><span class=\"sy1\">!</span>s1<span class=\"sy1\">,!</span>s2<span class=\"sy1\">,!</span>s3<span class=\"sy1\">,!</span>s4<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> amb<span class=\"br0\">(</span>exprs<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    s <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">every</span> e <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>exprs <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy1\">\\</span>c <span class=\"sy1\">~==</span> e<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>        c <span class=\"sy1\">:=</span> e<span class=\"br0\">[</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        s <span class=\"sy1\">||:=</span> e <span class=\"sy1\">||</span> <span class=\"st0\">\" \"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> s<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 5, "block": "<pre class=\"j highlighted_source\">   amb=. <span class=\"sy0\">(</span>[ , <span class=\"st_h\">' '</span> , ]<span class=\"sy0\">)</span>&amp;&gt;/&amp;.&gt;@:<span class=\"sy0\">(((</span>{:@:[ = {<a class=\"__cf_email__\" data-cfemail=\"406e00\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:]<span class=\"sy0\">)</span>&amp;&gt;/&amp;&gt; # ]<span class=\"sy0\">)</span>@:,@:<span class=\"sy0\">(</span>{@<span class=\"sy0\">(</span>,&amp;&lt;<span class=\"sy0\">)))</span><br/>   &gt;@<span class=\"sy0\">(</span>amb&amp;.&gt;/<span class=\"sy0\">)</span> <span class=\"sy0\">(</span><span class=\"st_h\">'the'</span>;<span class=\"st_h\">'that'</span>;<span class=\"st_h\">'a'</span><span class=\"sy0\">)</span>;<span class=\"sy0\">(</span><span class=\"st_h\">'frog'</span>;<span class=\"st_h\">'elephant'</span>;<span class=\"st_h\">'thing'</span><span class=\"sy0\">)</span>;<span class=\"sy0\">(</span><span class=\"st_h\">'walked'</span>;<span class=\"st_h\">'treaded'</span>;<span class=\"st_h\">'grows'</span><span class=\"sy0\">)</span>;<span class=\"sy0\">(</span>&lt;<span class=\"st_h\">'slowly'</span>;<span class=\"st_h\">'quickly'</span><span class=\"sy0\">)</span><br/>+-----------------------+<br/>|that thing grows slowly|<br/>+-----------------------+</pre>"}, {"lang": "JavaScript", "loc": 53, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> ambRun<span class=\"br0\">(</span>func<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> choices <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> index<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> amb<span class=\"br0\">(</span>values<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>values.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            fail<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>index <span class=\"sy0\">==</span> choices.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            choices.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"br0\">{</span>i<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>                          count<span class=\"sy0\">:</span> values.<span class=\"me1\">length</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">var</span> choice <span class=\"sy0\">=</span> choices<span class=\"br0\">[</span>index<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> values<span class=\"br0\">[</span>choice.<span class=\"me1\">i</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> fail<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">throw</span> fail<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    while <span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>            index <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> func<span class=\"br0\">(</span>amb<span class=\"sy0\">,</span> fail<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e <span class=\"sy0\">!=</span> fail<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> e<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">var</span> choice<span class=\"sy0\">;</span><br/>            while <span class=\"br0\">(</span><span class=\"br0\">(</span>choice <span class=\"sy0\">=</span> choices.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">++</span>choice.<span class=\"me1\">i</span> <span class=\"sy0\">==</span> choice.<span class=\"me1\">count</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>choice <span class=\"sy0\">==</span> <span class=\"kw2\">undefined</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">undefined</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            choices.<span class=\"me1\">push</span><span class=\"br0\">(</span>choice<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>ambRun<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>amb<span class=\"sy0\">,</span> fail<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> linked<span class=\"br0\">(</span>s1<span class=\"sy0\">,</span> s2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> s1.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> s2.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> w1 <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"the\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"that\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"a\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> w2 <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"frog\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"elephant\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thing\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>linked<span class=\"br0\">(</span>w1<span class=\"sy0\">,</span> w2<span class=\"br0\">)</span><span class=\"br0\">)</span> fail<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> w3 <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"walked\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"treaded\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"grows\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>linked<span class=\"br0\">(</span>w2<span class=\"sy0\">,</span> w3<span class=\"br0\">)</span><span class=\"br0\">)</span> fail<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> w4 <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"slowly\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"quickly\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>linked<span class=\"br0\">(</span>w3<span class=\"sy0\">,</span> w4<span class=\"br0\">)</span><span class=\"br0\">)</span> fail<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span>w1<span class=\"sy0\">,</span> w2<span class=\"sy0\">,</span> w3<span class=\"sy0\">,</span> w4<span class=\"br0\">]</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"co1\">// \"that thing grows slowly\"</span></pre>"}, {"lang": "jq", "loc": 7, "block": "<pre class=\"text highlighted_source\">def amb: .[];<br/>\u00a0<br/>def joins:<br/>  (.[0][-1:]) as $left<br/>  | (.[1][0:1]) as $right<br/>  | if $left == $right then true else empty end;<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 57, "block": "<pre class=\"text highlighted_source\"># This is a general purpose AMB function that takes a two-argument failure function and<br/># arbitrary number of iterable objects and returns the first solution found as an array<br/># this function is in essence an iterative backtracking solver<br/>\u00a0<br/>function amb(failure, itrs...)<br/>    n = length(itrs)<br/>    if n == 1 return end<br/>    states = Vector(n)<br/>    values = Vector(n)<br/>    # starting point, we put down the first value from the first iterable object<br/>    states[1] = start(itrs[1])<br/>    values[1], states[1] = next(itrs[1], states[1])<br/>    i = 1<br/>    # main solver loop<br/>    while true<br/>        # test for failure<br/>        if i &gt; 1 &amp;&amp; failure(values[i-1], values[i])<br/>            # loop for generating a new value upon failure<br/>            # in fact this would be way more readable using goto, but Julia doesn't seem to have that\u00a0:(<br/>            while true<br/>                # if we failed, we must generate a new value, but first we must check whether there is any<br/>                if done(itrs[i], states[i])<br/>                    # backtracking step with sanity check in case we ran out of values from the current generator<br/>                    if i == 1<br/>                        return<br/>                    else<br/>                        i -= 1<br/>                        continue<br/>                    end<br/>                else<br/>                    # if there is indeed a new value, generate it<br/>                    values[i], states[i] = next(itrs[i], states[i])<br/>                    break<br/>                end<br/>            end<br/>        else<br/>            # no failure branch<br/>            # if solution is ready (i.e. all generators are used) just return it<br/>            if i == n return values end<br/>            # else start up the next generator<br/>            i += 1<br/>            states[i] = start(itrs[i])<br/>            values[i], states[i] = next(itrs[i], states[i])<br/>        end<br/>    end<br/>end<br/>\u00a0<br/># Call our generic AMB function according to the task description and<br/># form the solution sentence from the returned array of words<br/>amb((s1,s2) -&gt; s1[end]\u00a0!= s2[1], # failure function<br/>    [\"the\", \"that\", \"a\"],<br/>    [\"frog\", \"elephant\", \"thing\"],<br/>    [\"walked\", \"treaded\", \"grows\"],<br/>    [\"slowly\", \"quickly\"]) |&gt;<br/>    x -&gt; join(x, \" \") |&gt;<br/>    println<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 104, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.41</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> kotlin.<span class=\"me1\">coroutines</span>.<span class=\"me1\">experimental</span>.<span class=\"sy0\">*</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> kotlin.<span class=\"me1\">coroutines</span>.<span class=\"me1\">experimental</span>.<span class=\"me1\">intrinsics</span>.<span class=\"sy0\">*</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> amb <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"st0\">\"the\"</span>, <span class=\"st0\">\"that\"</span>, <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"st0\">\"frog\"</span>, <span class=\"st0\">\"elephant\"</span>, <span class=\"st0\">\"thing\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"st0\">\"walked\"</span>, <span class=\"st0\">\"treaded\"</span>, <span class=\"st0\">\"grows\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"st0\">\"slowly\"</span>, <span class=\"st0\">\"quickly\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>a.<span class=\"me1\">lastIndex</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> amb<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b<span class=\"br0\">[</span>b.<span class=\"me1\">lastIndex</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> c<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> amb<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c<span class=\"br0\">[</span>c.<span class=\"me1\">lastIndex</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> d<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> amb<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span>listOf<span class=\"br0\">(</span>a, b, c, d<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> x <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> y <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x <span class=\"sy0\">*</span> y <span class=\"sy0\">!=</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> amb<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>listOf<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> AmbException<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Exception<span class=\"br0\">(</span><span class=\"st0\">\"Refusing to execute\"</span><span class=\"br0\">)</span><br/>data <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> AmbPair<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cont<span class=\"sy0\">:</span> Continuation<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> valuesLeft<span class=\"sy0\">:</span> MutableList<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">@</span>RestrictsSuspension<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> AmbEnvironment <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ambList <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>AmbPair<span class=\"sy0\">&lt;*&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    suspend fun <span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> amb<span class=\"br0\">(</span>value<span class=\"sy0\">:</span> T, vararg rest<span class=\"sy0\">:</span> T<span class=\"br0\">)</span><span class=\"sy0\">:</span> T <span class=\"sy0\">=</span> suspendCoroutineOrReturn <span class=\"br0\">{</span> cont -<span class=\"sy0\">&gt;</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>rest.<span class=\"me1\">size</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            ambList.<span class=\"me1\">add</span><span class=\"br0\">(</span>AmbPair<span class=\"br0\">(</span>clone<span class=\"br0\">(</span>cont<span class=\"br0\">)</span>, mutableListOf<span class=\"br0\">(</span><span class=\"sy0\">*</span>rest<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        value<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    suspend fun amb<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Nothing <span class=\"sy0\">=</span> suspendCoroutine<span class=\"sy0\">&lt;</span>Nothing<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">@</span>Suppress<span class=\"br0\">(</span><span class=\"st0\">\"UNCHECKED_CAST\"</span><span class=\"br0\">)</span><br/>fun <span class=\"sy0\">&lt;</span>R<span class=\"sy0\">&gt;</span> amb<span class=\"br0\">(</span>block<span class=\"sy0\">:</span> suspend AmbEnvironment.<span class=\"br0\">(</span><span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> R<span class=\"br0\">)</span><span class=\"sy0\">:</span> R <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> result<span class=\"sy0\">:</span> R<span class=\"sy0\">?</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> toThrow<span class=\"sy0\">:</span> Throwable<span class=\"sy0\">?</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dist <span class=\"sy0\">=</span> AmbEnvironment<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    block.<span class=\"me1\">startCoroutine</span><span class=\"br0\">(</span>receiver <span class=\"sy0\">=</span> dist, completion <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> <span class=\"sy0\">:</span> Continuation<span class=\"sy0\">&lt;</span>R<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> context<span class=\"sy0\">:</span> CoroutineContext get<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> EmptyCoroutineContext<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun resume<span class=\"br0\">(</span>value<span class=\"sy0\">:</span> R<span class=\"br0\">)</span> <span class=\"br0\">{</span> result <span class=\"sy0\">=</span> value <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun resumeWithException<span class=\"br0\">(</span>exception<span class=\"sy0\">:</span> Throwable<span class=\"br0\">)</span> <span class=\"br0\">{</span> toThrow <span class=\"sy0\">=</span> exception <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>result <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> <span class=\"sy0\">&amp;&amp;</span> toThrow <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>dist.<span class=\"me1\">ambList</span>.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> last <span class=\"sy0\">=</span> dist.<span class=\"me1\">ambList</span>.<span class=\"me1\">run</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>lastIndex<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>last.<span class=\"me1\">valuesLeft</span>.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            dist.<span class=\"me1\">ambList</span>.<span class=\"me1\">removeAt</span><span class=\"br0\">(</span>dist.<span class=\"me1\">ambList</span>.<span class=\"me1\">lastIndex</span><span class=\"br0\">)</span><br/>            last.<span class=\"me1\">apply</span> <span class=\"br0\">{</span><br/>                <span class=\"br0\">(</span>cont as Continuation<span class=\"sy0\">&lt;</span>Any<span class=\"sy0\">?&gt;</span><span class=\"br0\">)</span>.<span class=\"me1\">resume</span><span class=\"br0\">(</span>valuesLeft<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> value <span class=\"sy0\">=</span> last.<span class=\"me1\">valuesLeft</span>.<span class=\"me1\">removeAt</span><span class=\"br0\">(</span>last.<span class=\"me1\">valuesLeft</span>.<span class=\"me1\">lastIndex</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>clone<span class=\"br0\">(</span>last.<span class=\"me1\">cont</span><span class=\"br0\">)</span> as Continuation<span class=\"sy0\">&lt;</span>Any<span class=\"sy0\">?&gt;</span><span class=\"br0\">)</span>.<span class=\"me1\">resume</span><span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>toThrow <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> toThrow<span class=\"sy0\">!!</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>result <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> result<span class=\"sy0\">!!</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> AmbException<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> UNSAFE <span class=\"sy0\">=</span> Class.<span class=\"me1\">forName</span><span class=\"br0\">(</span><span class=\"st0\">\"sun.misc.Unsafe\"</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">getDeclaredField</span><span class=\"br0\">(</span><span class=\"st0\">\"theUnsafe\"</span><span class=\"br0\">)</span><br/>    .<span class=\"me1\">apply</span> <span class=\"br0\">{</span> isAccessible <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a> <span class=\"br0\">}</span><br/>    .<span class=\"me1\">get</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> as sun.<span class=\"me1\">misc</span>.<span class=\"me1\">Unsafe</span><br/>\u00a0<br/><span class=\"sy0\">@</span>Suppress<span class=\"br0\">(</span><span class=\"st0\">\"UNCHECKED_CAST\"</span><span class=\"br0\">)</span><br/>fun <span class=\"sy0\">&lt;</span>T<span class=\"sy0\">:</span> Any<span class=\"sy0\">&gt;</span> clone<span class=\"br0\">(</span>obj<span class=\"sy0\">:</span> T<span class=\"br0\">)</span><span class=\"sy0\">:</span> T <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> clazz <span class=\"sy0\">=</span> obj<span class=\"sy0\">::</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a>.<span class=\"me1\">java</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> copy <span class=\"sy0\">=</span> UNSAFE.<span class=\"me1\">allocateInstance</span><span class=\"br0\">(</span>clazz<span class=\"br0\">)</span> as T<br/>    copyDeclaredFields<span class=\"br0\">(</span>obj, copy, clazz<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> copy<br/><span class=\"br0\">}</span><br/>\u00a0<br/>tailrec fun <span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> copyDeclaredFields<span class=\"br0\">(</span>obj<span class=\"sy0\">:</span> T, copy<span class=\"sy0\">:</span> T, clazz<span class=\"sy0\">:</span> Class<span class=\"sy0\">&lt;</span>out T<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>field in clazz.<span class=\"me1\">declaredFields</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        field.<span class=\"me1\">isAccessible</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> v <span class=\"sy0\">=</span> field.<span class=\"me1\">get</span><span class=\"br0\">(</span>obj<span class=\"br0\">)</span><br/>        field.<span class=\"me1\">set</span><span class=\"br0\">(</span>copy, <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>v <span class=\"sy0\">===</span> obj<span class=\"br0\">)</span> copy <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> v<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> superclass <span class=\"sy0\">=</span> clazz.<span class=\"me1\">superclass</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>superclass <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> copyDeclaredFields<span class=\"br0\">(</span>obj, copy, superclass<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 21, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> amb <span class=\"br0\">(</span>set<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> workset <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">#</span>set <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"br0\">(</span><span class=\"kw3\">type</span><span class=\"br0\">(</span>set<span class=\"br0\">)</span> <span class=\"sy0\">~=</span> <span class=\"st0\">'table'</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">#</span>set <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> set <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">#</span>set <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">local</span> first <span class=\"sy0\">=</span> <span class=\"kw3\">table.remove</span><span class=\"br0\">(</span>set<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        set <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span>set<span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span>v <span class=\"kw2\">in</span> <span class=\"kw3\">next</span><span class=\"sy0\">,</span>first <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">for</span> j<span class=\"sy0\">,</span>u <span class=\"kw2\">in</span> <span class=\"kw3\">next</span><span class=\"sy0\">,</span>set <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">if</span> v<span class=\"sy0\">:</span>byte<span class=\"br0\">(</span><span class=\"sy0\">#</span>v<span class=\"br0\">)</span> <span class=\"sy0\">==</span> u<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">:</span>byte<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>workset<span class=\"sy0\">,</span> <span class=\"br0\">{</span>v<span class=\"sy0\">,</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">return</span> workset<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span>v <span class=\"kw2\">in</span> <span class=\"kw3\">next</span><span class=\"sy0\">,</span>set<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> j<span class=\"sy0\">,</span>u <span class=\"kw2\">in</span> <span class=\"kw3\">next</span><span class=\"sy0\">,</span>set<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">if</span> v<span class=\"sy0\">:</span>byte<span class=\"br0\">(</span><span class=\"sy0\">#</span>v<span class=\"br0\">)</span> <span class=\"sy0\">==</span> u<span class=\"sy0\">:</span>byte<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>workset<span class=\"sy0\">,</span><span class=\"br0\">{</span>v<span class=\"sy0\">,</span>u<span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> workset<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 3, "block": "<pre class=\"text highlighted_source\"> CheckValid[i_List]:=If[Length[i]&lt;=1,True,<a class=\"__cf_email__\" data-cfemail=\"afeec1cbef\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@(StringTake[#[[1]],-1]==StringTake[#[[2]],1]&amp;/@Partition[i,2,1])]<br/> sets={{\"the\",\"that\",\"a\"},{\"frog\",\"elephant\",\"thing\"},{\"walked\",\"treaded\",\"grows\"},{\"slowly\",\"quickly\"}};<br/> Select[Tuples[sets],CheckValid]</pre>"}, {"lang": "Mercury", "loc": 25, "block": "<pre class=\"text highlighted_source\">:- module amb.<br/>:- interface.<br/>:- import_module io.<br/>:- pred main(io::di, io::uo) is cc_multi.<br/>:- implementation.<br/>:- import_module list, string, char, int.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>        ( solution(S) -&gt; io.write_string(S,\u00a0!IO), io.nl(!IO)<br/>       \u00a0; io.write_string(\"No solutions found\u00a0:-(\\n\",\u00a0!IO) ).<br/>\u00a0<br/>:- pred solution(string::out) is nondet.<br/>solution(S)\u00a0:-<br/>        member(A, [\"the\", \"that\", \"a\"]),<br/>        member(N, [\"frog\", \"elephant\", \"thing\"]),<br/>        member(V, [\"walked\", \"treaded\", \"grows\"]),<br/>        member(E, [\"slowly\", \"quickly\"]),<br/>        S = join_list(\" \", [A, N, V, E]),<br/>        rule1(A, N), rule1(N, V), rule1(V, E).<br/>\u00a0<br/>:- pred rule1(string::in, string::in) is semidet.<br/>rule1(A, B)\u00a0:- last_char(A) = C, first_char(B, C, _).<br/>\u00a0<br/>:- func last_char(string::in) = (char::out) is semidet.<br/>last_char(S) = C\u00a0:- index(S, length(S) - 1, C).</pre>"}, {"lang": "NetRexx", "loc": 71, "block": "<pre class=\"netrexx highlighted_source\"> <span class=\"coMULTI\">/* REXX **************************************************************<br/> * 25.08.2013 Walter Pachl derived from REXX version 2<br/> *********************************************************************/</span><br/> w=<span class=\"st0\">''</span><br/> l=<span class=\"nu0\">0</span><br/> mm=<span class=\"nu0\">0</span><br/> mkset<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"st0\">'the that a if'</span>,w,mm,l<span class=\"br0\">)</span><br/> mkset<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"st0\">'frog elephant thing'</span>,w,mm,l<span class=\"br0\">)</span><br/> mkset<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"st0\">'walked treaded grows trots'</span>,w,mm,l<span class=\"br0\">)</span><br/> mkset<span class=\"br0\">(</span><span class=\"nu0\">4</span>,<span class=\"st0\">'slowly quickly'</span>,w,mm,l<span class=\"br0\">)</span><br/> show<span class=\"br0\">(</span>w,mm,l<span class=\"br0\">)</span><br/>\u00a0<br/> <span class=\"kw1\">Loop</span> i=<span class=\"nu0\">1</span> to <span class=\"nu0\">3</span>                         <span class=\"coMULTI\">/* loop over sets             */</span><br/>   k=i+<span class=\"nu0\">1</span>                               <span class=\"coMULTI\">/* the following set          */</span><br/>   <span class=\"kw1\">Loop</span> ii=<span class=\"nu0\">1</span> To <span class=\"nu0\">10</span>                     <span class=\"coMULTI\">/* loop over elements in set k*/</span><br/>     <span class=\"kw1\">If</span> w<span class=\"br0\">[</span>i,ii<span class=\"br0\">]</span>.<span class=\"kw6\">words</span>=i <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>        <span class=\"coMULTI\">/* a sentence part found      */</span><br/>       <span class=\"kw1\">Loop</span> jj=<span class=\"nu0\">1</span> To <span class=\"nu0\">10</span>                 <span class=\"coMULTI\">/* loop over following words  */</span><br/>         <span class=\"kw1\">If</span> w<span class=\"br0\">[</span>i,ii<span class=\"br0\">]</span>.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>=w<span class=\"br0\">[</span>k,jj<span class=\"br0\">]</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>  <span class=\"coMULTI\">/* fitting     */</span><br/>           ns=w<span class=\"br0\">[</span>i,ii<span class=\"br0\">]</span><span class=\"st0\">' '</span>w<span class=\"br0\">[</span>k,jj<span class=\"br0\">]</span>        <span class=\"coMULTI\">/* build new sentence (part)  */</span><br/>           <span class=\"kw1\">If</span> ns.<span class=\"kw6\">words</span>=k <span class=\"kw3\">Then</span>          <span class=\"coMULTI\">/* 'complete' part            */</span><br/>             add<span class=\"br0\">(</span>w,k,ns<span class=\"br0\">)</span>               <span class=\"coMULTI\">/* add to set k               */</span><br/>           <span class=\"kw3\">End</span><br/>         <span class=\"kw3\">End</span><br/>       <span class=\"kw3\">End</span><br/>     <span class=\"kw3\">End</span><br/>   <span class=\"kw3\">End</span><br/> <span class=\"kw1\">Say</span> <span class=\"st0\">'Results:'</span><br/> <span class=\"kw1\">Loop</span> jj=<span class=\"nu0\">1</span> To <span class=\"nu0\">10</span>                       <span class=\"coMULTI\">/* show the results           */</span><br/>   <span class=\"kw1\">If</span> w<span class=\"br0\">[</span><span class=\"nu0\">4</span>,jj<span class=\"br0\">]</span>.<span class=\"kw6\">words</span>=<span class=\"nu0\">4</span> <span class=\"kw3\">Then</span><br/>     <span class=\"kw1\">Say</span> <span class=\"st0\">'--&gt;'</span> w<span class=\"br0\">[</span><span class=\"nu0\">4</span>,jj<span class=\"br0\">]</span><br/>   <span class=\"kw3\">End</span><br/>\u00a0<br/> method add<span class=\"br0\">(</span>w,k,s<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * add a fitting sentence (part) s to set w[k,*]<br/> *********************************************************************/</span><br/>   <span class=\"kw1\">Loop</span> i=<span class=\"nu0\">1</span> To <span class=\"nu0\">10</span> While w<span class=\"br0\">[</span>k,i<span class=\"br0\">]</span><span class=\"sy0\">&gt;</span><span class=\"st0\">''</span>      <span class=\"coMULTI\">/* look for an empty slot     */</span><br/>     <span class=\"kw3\">End</span><br/>   w<span class=\"br0\">[</span>k,i<span class=\"br0\">]</span>=s                            <span class=\"coMULTI\">/* add the sentence (part)    */</span><br/>   <span class=\"kw1\">Return</span><br/>\u00a0<br/> method mkset<span class=\"br0\">(</span>n,arg,smp,mm,l<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * create set smp[n,*] from data in arg<br/> * mm[0] maximum number of elements in any set<br/> * l[n] maximum word length in set n<br/> *********************************************************************/</span><br/>  <span class=\"kw1\">loop</span> i = <span class=\"nu0\">1</span> to arg.<span class=\"kw6\">words</span><br/>    smp<span class=\"br0\">[</span>n,i<span class=\"br0\">]</span> = arg.<span class=\"kw6\">word</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> smp<span class=\"br0\">[</span>n,i<span class=\"br0\">]</span>.<span class=\"me0\">length</span><span class=\"sy0\">&gt;</span>l<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"kw3\">Then</span><br/>      l<span class=\"br0\">[</span>n<span class=\"br0\">]</span>=smp<span class=\"br0\">[</span>n,i<span class=\"br0\">]</span>.<span class=\"me0\">length</span><br/>    <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">if</span> i-<span class=\"nu0\">1</span><span class=\"sy0\">&gt;</span>mm<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    mm<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>=i-<span class=\"nu0\">1</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/> method show<span class=\"br0\">(</span>w,mm,l<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * show the input<br/> *********************************************************************/</span><br/>   <span class=\"kw1\">Say</span> <span class=\"st0\">'Input:'</span><br/>   <span class=\"kw1\">Loop</span> j=<span class=\"nu0\">1</span> To mm<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>                   <span class=\"coMULTI\">/* output lines               */</span><br/>     ol=<span class=\"st0\">''</span><br/>     <span class=\"kw1\">Loop</span> i=<span class=\"nu0\">1</span> To <span class=\"nu0\">4</span><br/>       ol=ol w<span class=\"br0\">[</span>i,j<span class=\"br0\">]</span>.<span class=\"kw6\">left</span><span class=\"br0\">(</span>l<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>       <span class=\"kw3\">End</span><br/>     <span class=\"kw1\">Say</span> ol.<span class=\"kw6\">strip</span><br/>     <span class=\"kw3\">End</span>;<br/>   <span class=\"kw1\">say</span> <span class=\"st0\">''</span><br/>   <span class=\"kw1\">Return</span></pre>"}, {"lang": "Nim", "loc": 31, "block": "<pre class=\"text highlighted_source\">import future, strutils<br/>\u00a0<br/>proc amb(comp: proc(a, b: string): bool, options: seq[seq[string]],<br/>         prev: string = nil): seq[string] =<br/>  if options.len == 0: return @[]<br/>\u00a0<br/>  for opt in options[0]:<br/>    # If this is the base call, prev is nil and we need to continue.<br/>    if prev\u00a0!= nil and not comp(prev, opt): continue<br/>\u00a0<br/>    # Take care of the case where we have no options left.<br/>    if options.len == 1: return @[opt]<br/>\u00a0<br/>    # Traverse into the tree.<br/>    let res = amb(comp, options[1..options.high], opt)<br/>\u00a0<br/>    # If it was a failure, try the next one.<br/>    if res.len &gt; 0: return opt &amp; res # We have a match<br/>\u00a0<br/>  return @[]<br/>\u00a0<br/>const sets = @[@[\"the\", \"that\", \"a\"],<br/>               @[\"frog\", \"elephant\", \"thing\"],<br/>               @[\"walked\", \"treaded\", \"grows\"],<br/>               @[\"slowly\", \"quickly\"]]<br/>\u00a0<br/>let result = amb((s, t: string) =&gt; (s[s.high] == t[0]), sets)<br/>if result.len == 0:<br/>  echo \"No matches found!\"<br/>else:<br/>  echo result.join \" \"</pre>"}, {"lang": "OCaml", "loc": 36, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> set_1 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"the\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"that\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"a\"</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> set_2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"frog\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"elephant\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"thing\"</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> set_3 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"walked\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"treaded\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"grows\"</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> set_4 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"slowly\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"quickly\"</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> combs ll <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux acc <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev acc<span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> hd<span class=\"sy0\">::</span>tl <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">let</span> acc <span class=\"sy0\">=</span><br/>        <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left<br/>          <span class=\"br0\">(</span><span class=\"kw1\">fun</span> _ac l <span class=\"sy0\">-&gt;</span><br/>            <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>fold_left <span class=\"br0\">(</span><span class=\"kw1\">fun</span> _ac v <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>v<span class=\"sy0\">::</span>l<span class=\"br0\">)</span><span class=\"sy0\">::</span>_ac<span class=\"br0\">)</span> _ac hd<br/>          <span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> acc<br/>      <span class=\"kw1\">in</span><br/>      aux acc tl<br/>  <span class=\"kw1\">in</span><br/>  aux <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span> ll<br/>\u00a0<br/><span class=\"kw1\">let</span> last s <span class=\"sy0\">=</span> s<span class=\"sy0\">.</span><span class=\"br0\">[</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length s<span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> joined a b <span class=\"sy0\">=</span> <span class=\"br0\">(</span>last a <span class=\"sy0\">=</span> b<span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> test <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> a<span class=\"sy0\">::</span>b<span class=\"sy0\">::</span>tl <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>joined a b<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>test <span class=\"br0\">(</span>b<span class=\"sy0\">::</span>tl<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">true</span><br/>\u00a0<br/><span class=\"kw1\">let</span> print_set set <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"\u00a0%s\"</span><span class=\"br0\">)</span> set<span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> sets <span class=\"sy0\">=</span> combs <span class=\"br0\">[</span>set_1<span class=\"sy0\">;</span> set_2<span class=\"sy0\">;</span> set_3<span class=\"sy0\">;</span> set_4<span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> sets <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>filter test sets <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>iter print_set sets<span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "OpenEdge/Progress", "loc": 36, "block": "<pre class=\"text highlighted_source\">DEF VAR cset AS CHAR EXTENT 4 INIT [   <br/>   \"the,that,a\",<br/>   \"frog,elephant,thing\", <br/>   \"walked,treaded,grows\",<br/>   \"slowly,quickly\"<br/>].<br/>\u00a0<br/>FUNCTION getAmb RETURNS CHARACTER ( <br/>   i_cwords AS CHAR,<br/>   i_iset   AS INT<br/>):<br/>\u00a0<br/>   DEF VAR cresult   AS CHAR.<br/>   DEF VAR ii        AS INT.<br/>   DEF VAR cword     AS CHAR.<br/>\u00a0<br/>   DO ii = 1 TO NUM-ENTRIES( cset [ i_iset ] ) WHILE NUM-ENTRIES( cresult, \" \" ) &lt; EXTENT( cset ):<br/>\u00a0<br/>      cword = ENTRY( ii, cset[ i_iset ] ).<br/>      IF i_cwords = \"\" OR <br/>         SUBSTRING( i_cwords, LENGTH( i_cwords ), 1 ) = SUBSTRING( cword, 1, 1 )<br/>      THEN DO:<br/>         IF i_iset = EXTENT ( cset ) THEN<br/>            cresult = i_cwords + \" \" + cword.<br/>         ELSE<br/>            cresult = getAmb( i_cwords + \" \" + cword, i_iset + 1 ).<br/>      END.<br/>\u00a0<br/>   END.<br/>\u00a0<br/>   RETURN cresult.<br/>\u00a0<br/>END FUNCTION. /* getAmb */<br/>\u00a0<br/>\u00a0<br/>MESSAGE getAmb( \"\", 1 ) VIEW-AS ALERT-BOX.</pre>"}, {"lang": "Oz", "loc": 27, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Amb</span> Xs<span class=\"br0\">}</span><br/>     <span class=\"kw1\">case</span> Xs <span class=\"kw1\">of</span> nil <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> <span class=\"br0\">[</span>X<span class=\"br0\">]</span> <span class=\"kw1\">then</span> X<br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> X<span class=\"sy0\">|</span>Xr <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">choice</span> X<br/>        <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> <span class=\"br0\">{</span>Amb Xr<span class=\"br0\">}</span><br/>        <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Example</span><span class=\"br0\">}</span><br/>     W1 = <span class=\"br0\">{</span>Amb <span class=\"br0\">[</span><span class=\"st0\">\"the\"</span> <span class=\"st0\">\"that\"</span> <span class=\"st0\">\"a\"</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>     W2 = <span class=\"br0\">{</span>Amb <span class=\"br0\">[</span><span class=\"st0\">\"frog\"</span> <span class=\"st0\">\"elephant\"</span> <span class=\"st0\">\"thing\"</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>     W3 = <span class=\"br0\">{</span>Amb <span class=\"br0\">[</span><span class=\"st0\">\"walked\"</span> <span class=\"st0\">\"treaded\"</span> <span class=\"st0\">\"grows\"</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>     W4 = <span class=\"br0\">{</span>Amb <span class=\"br0\">[</span><span class=\"st0\">\"slowly\"</span> <span class=\"st0\">\"quickly\"</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>last W1 W2<span class=\"sy0\">.</span>1<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>last W2 W3<span class=\"sy0\">.</span>1<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>last W3 W4<span class=\"sy0\">.</span>1<span class=\"br0\">}</span><br/>     W1<span class=\"sy0\">#</span><span class=\"st0\">\" \"</span><span class=\"sy0\">#</span>W2<span class=\"sy0\">#</span><span class=\"st0\">\" \"</span><span class=\"sy0\">#</span>W3<span class=\"sy0\">#</span><span class=\"st0\">\" \"</span><span class=\"sy0\">#</span>W4<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"br0\">{</span>ForAll <span class=\"br0\">{</span>SearchAll Example<span class=\"br0\">}</span> System<span class=\"sy0\">.</span>showInfo<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 16, "block": "<pre class=\"parigp highlighted_source\">Amb<span class=\"br0\">(</span>V<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\tamb<span class=\"br0\">(</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span>#V<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"kw1\">vector</span><span class=\"br0\">(</span>#V<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>j<span class=\"sy0\">,</span><span class=\"kw1\">Vec</span><span class=\"br0\">(</span>V<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>amb<span class=\"br0\">(</span>V<span class=\"sy0\">,</span>s<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>#V <span class=\"sy0\">==</span> <span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tmy<span class=\"br0\">(</span>v<span class=\"sy0\">=</span>V<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>U<span class=\"sy0\">=</span><span class=\"kw1\">vecextract</span><span class=\"br0\">(</span>V<span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">^</span>#V<span class=\"sy0\">-</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>t<span class=\"sy0\">,</span>final<span class=\"sy0\">=</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>#s<span class=\"sy0\">,</span>s<span class=\"br0\">[</span>#s<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>#s<span class=\"sy0\">,</span> s <span class=\"sy0\">=</span> <span class=\"kw1\">concat</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">\" \"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#v<span class=\"sy0\">,</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>#s <span class=\"sy0\">==</span> <span class=\"nu1\">0</span> <span class=\"sy0\">|</span> final <span class=\"sy0\">==</span> v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\tt <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span>U<span class=\"sy0\">,</span> <span class=\"kw1\">concat</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"nu1\">0</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>Amb<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"the\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"that\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"a\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">\"frog\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"elephant\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"thing\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">\"walked\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"treaded\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"grows\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">\"slowly\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"quickly\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 35, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">use</span> constant EXIT_FAILURE <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> constant EXIT_SUCCESS <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> amb <span class=\"br0\">{</span><br/>   <a href=\"http://perldoc.perl.org/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"sy0\">!</span><span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$word</span> <span class=\"br0\">(</span><span class=\"co5\">@_</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$pid</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/fork.html\"><span class=\"kw3\">fork</span></a><span class=\"sy0\">;</span><br/>      <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"co5\">$!</span> <span class=\"kw1\">unless</span> <a href=\"http://perldoc.perl.org/functions/defined.html\"><span class=\"kw3\">defined</span></a> <span class=\"re0\">$pid</span><span class=\"sy0\">;</span><br/>      <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$word</span> <span class=\"kw1\">if</span> <span class=\"sy0\">!</span><span class=\"re0\">$pid</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">my</span> <span class=\"re0\">$wpid</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/waitpid.html\"><span class=\"kw3\">waitpid</span></a> <span class=\"re0\">$pid</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"co5\">$!</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$wpid</span> <span class=\"sy0\">==</span> <span class=\"re0\">$pid</span><span class=\"sy0\">;</span><br/>      <a href=\"http://perldoc.perl.org/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_SUCCESS<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"co5\">$?</span> <span class=\"sy0\">==</span> EXIT_SUCCESS<span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <a href=\"http://perldoc.perl.org/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> joined <span class=\"br0\">{</span><br/>   <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$join_a</span><span class=\"sy0\">,</span> <span class=\"re0\">$join_b</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>   <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$join_a</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">eq</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$join_b</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$w1</span> <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>the that a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$w2</span> <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>frog elephant thing<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$w3</span> <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>walked treaded grows<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$w4</span> <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>slowly quickly<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>amb<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">unless</span> joined <span class=\"re0\">$w1</span><span class=\"sy0\">,</span> <span class=\"re0\">$w2</span><span class=\"sy0\">;</span><br/>amb<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">unless</span> joined <span class=\"re0\">$w2</span><span class=\"sy0\">,</span> <span class=\"re0\">$w3</span><span class=\"sy0\">;</span><br/>amb<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">unless</span> joined <span class=\"re0\">$w3</span><span class=\"sy0\">,</span> <span class=\"re0\">$w4</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$w1 $w2 $w3 $w4<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_SUCCESS<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 21, "block": "<pre class=\"perl6 highlighted_source\">\u00a0<br/><span class=\"co1\">#| an array of four words, that have more possible values. </span><br/><span class=\"co1\">#| Normally we would want `any' to signify we want any of the values, but well negate later and thus we need `all'</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@a</span> <span class=\"sy0\">=</span><br/><span class=\"br0\">(</span><span class=\"kw3\">all</span> \u00abthe that a\u00bb<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/><span class=\"br0\">(</span><span class=\"kw3\">all</span> \u00abfrog elephant thing\u00bb<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/><span class=\"br0\">(</span><span class=\"kw3\">all</span> \u00abwalked treaded grows\u00bb<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/><span class=\"br0\">(</span><span class=\"kw3\">all</span> \u00abslowly quickly\u00bb<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> test <span class=\"br0\">(</span>Str <span class=\"re0\">$l</span><span class=\"sy0\">,</span> Str <span class=\"re0\">$r</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$l</span><span class=\"sy0\">.</span><span class=\"me1\">ends</span><span class=\"sy0\">-</span>with<span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"sy0\">.</span><span class=\"kw3\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw2\">sub</span> <span class=\"br0\">(</span><span class=\"re0\">$w1</span><span class=\"sy0\">,</span> <span class=\"re0\">$w2</span><span class=\"sy0\">,</span> <span class=\"re0\">$w3</span><span class=\"sy0\">,</span> <span class=\"re0\">$w4</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <span class=\"co1\"># return if the values are false</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw1\">unless</span> <span class=\"br0\">[</span><span class=\"kw1\">and</span><span class=\"br0\">]</span> test<span class=\"br0\">(</span><span class=\"re0\">$w1</span><span class=\"sy0\">,</span> <span class=\"re0\">$w2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> test<span class=\"br0\">(</span><span class=\"re0\">$w2</span><span class=\"sy0\">,</span> <span class=\"re0\">$w3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>test<span class=\"br0\">(</span><span class=\"re0\">$w3</span><span class=\"sy0\">,</span> <span class=\"re0\">$w4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\"># say the results. If there is one more Container layer around them this doesn't work, this is why we need the arguments here.</span><br/>  <span class=\"kw3\">say</span> <span class=\"st0\">\"$w1 $w2 $w3 $w4\"</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">|</span><span class=\"re0\">@a</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># supply the array as argumetns</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Phix", "loc": 38, "block": "<pre class=\"text highlighted_source\">function amb1(sequence sets, object res=0, integer idx=1)<br/>integer ch = 0<br/>integer pass = 0<br/>    if idx&gt;length(sets) then<br/>        pass = 1<br/>    else<br/>        if res=0 then<br/>            res = repeat(0,length(sets))<br/>        else<br/>            ch = sets[idx-1][res[idx-1]][$]<br/>        end if<br/>        for k=1 to length(sets[idx]) do<br/>            if ch=0 or sets[idx][k][1]=ch then<br/>                res[idx] = k<br/>                {pass,res} = amb1(sets,res,idx+1)<br/>                if pass then exit end if<br/>            end if<br/>        end for<br/>    end if<br/>    return {pass,res}<br/>end function<br/>\u00a0<br/>sequence sets = {{\"the\",\"that\",\"a\"},<br/>                 {\"frog\",\"elephant\",\"thing\"},<br/>                 {\"walked\",\"treaded\",\"grows\"},<br/>                 {\"slowly\",\"quickly\"}}<br/>integer pass<br/>sequence res<br/>    {pass,res} = amb1(sets)<br/>    if pass then<br/>        puts(1,\"success: \")<br/>        for i=1 to length(sets) do<br/>            res[i] = sets[i][res[i]]<br/>        end for<br/>       \u00a0?res<br/>    else<br/>        puts(1,\"failure\\n\")<br/>    end if</pre>"}, {"lang": "PicoLisp", "loc": 18, "block": "<pre class=\"text highlighted_source\">(be amb (@E @Lst)<br/>   (lst @E @Lst) )<br/>\u00a0<br/>(be joins (@Left @Right)<br/>   (^ @T (last (chop (-&gt; @Left))))<br/>   (^ @R (car (chop (-&gt; @Right))))<br/>   (or<br/>      ((equal @T @R))<br/>      ((amb @ NIL)) ) )  # Explicitly using amb fail as required<br/>\u00a0<br/>(be ambExample ((@Word1 @Word2 @Word3 @Word4))<br/>  (amb @Word1 (\"the\" \"that\" \"a\"))<br/>  (amb @Word2 (\"frog\" \"elephant\" \"thing\"))<br/>  (amb @Word3 (\"walked\" \"treaded\" \"grows\"))<br/>  (amb @Word4 (\"slowly\" \"quickly\"))<br/>  (joins @Word1 @Word2)<br/>  (joins @Word2 @Word3)<br/>  (joins @Word3 @Word4) )</pre>"}, {"lang": "PL/I", "loc": 86, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process or<span class=\"br0\">(</span>!<span class=\"br0\">)</span> source attributes xref<span class=\"sy0\">;</span><br/> amb<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * 25.08.2013 Walter Pachl<br/> *********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> w<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><br/>     <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'the'</span><span class=\"sy0\">,</span><span class=\"st0\">'that'</span><span class=\"sy0\">,</span><span class=\"st0\">'a'</span><span class=\"sy0\">,</span><span class=\"st0\">'if'</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"st0\">' '</span><span class=\"sy0\">,</span><br/>          <span class=\"st0\">'frog'</span><span class=\"sy0\">,</span><span class=\"st0\">'elephant'</span><span class=\"sy0\">,</span><span class=\"st0\">'thing'</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"st0\">' '</span><span class=\"sy0\">,</span><br/>          <span class=\"st0\">'walked'</span><span class=\"sy0\">,</span><span class=\"st0\">'treaded'</span><span class=\"sy0\">,</span><span class=\"st0\">'grows'</span><span class=\"sy0\">,</span><span class=\"st0\">'trots'</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"st0\">' '</span><span class=\"sy0\">,</span><br/>          <span class=\"st0\">'slowly'</span><span class=\"sy0\">,</span><span class=\"st0\">'quickly'</span><span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> ns <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>k<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>ii<span class=\"sy0\">,</span>jj<span class=\"sy0\">,</span>m<span class=\"sy0\">,</span>n<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> n<span class=\"sy0\">=</span><span class=\"kw1\">hbound</span><span class=\"br0\">(</span>w<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>                        <span class=\"coMULTI\">/* number of sets             */</span><br/> m<span class=\"sy0\">=</span><span class=\"kw1\">hbound</span><span class=\"br0\">(</span>w<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>                        <span class=\"coMULTI\">/* max number of words in set */</span><br/> <span class=\"kw1\">Call</span> show<span class=\"sy0\">;</span>                            <span class=\"coMULTI\">/* show the input             */</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>                        <span class=\"coMULTI\">/* loop over sets             */</span><br/>   k<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>                              <span class=\"coMULTI\">/* the following set          */</span><br/>   <span class=\"kw1\">Do</span> ii<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> m<span class=\"sy0\">;</span>                       <span class=\"coMULTI\">/* loop over elements in set k*/</span><br/>     <span class=\"kw1\">If</span> words<span class=\"br0\">(</span>w<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>ii<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>i <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span>      <span class=\"coMULTI\">/* a sentence part found      */</span><br/>       <span class=\"kw1\">Do</span> jj<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> m<span class=\"sy0\">;</span>                   <span class=\"coMULTI\">/* loop over following words  */</span><br/>         <span class=\"kw1\">If</span> <span class=\"kw1\">right</span><span class=\"br0\">(</span>w<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>ii<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">left</span><span class=\"br0\">(</span>w<span class=\"br0\">(</span>k<span class=\"sy0\">,</span>jj<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* fitting     */</span><br/>           ns<span class=\"sy0\">=</span>w<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>ii<span class=\"br0\">)</span>!!<span class=\"st0\">' '</span>!!w<span class=\"br0\">(</span>k<span class=\"sy0\">,</span>jj<span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"coMULTI\">/* build new sentence (part)  */</span><br/>           <span class=\"kw1\">If</span> words<span class=\"br0\">(</span>ns<span class=\"br0\">)</span><span class=\"sy0\">=</span>k <span class=\"kw1\">Then</span>         <span class=\"coMULTI\">/* 'complete' part            */</span><br/>             <span class=\"kw1\">Call</span> <span class=\"kw1\">add</span><span class=\"br0\">(</span>k<span class=\"sy0\">,</span>ns<span class=\"br0\">)</span><span class=\"sy0\">;</span>           <span class=\"coMULTI\">/* add to set k               */</span><br/>         <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> jj<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> m<span class=\"sy0\">;</span>                         <span class=\"coMULTI\">/* show the results           */</span><br/>   <span class=\"kw1\">If</span> words<span class=\"br0\">(</span>w<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span>jj<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">4</span> <span class=\"kw1\">Then</span><br/>     <span class=\"kw1\">put</span> <span class=\"kw1\">edit</span><span class=\"br0\">(</span><span class=\"st0\">'--&gt; '</span><span class=\"sy0\">,</span>w<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span>jj<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">add</span><span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>ni<span class=\"sy0\">,</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * add a sentence (part) to set ni<br/> *********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>ni<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> s  <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> m <span class=\"kw1\">While</span><span class=\"br0\">(</span>w<span class=\"br0\">(</span>ni<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>        <span class=\"coMULTI\">/* look for an empty slot     */</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> w<span class=\"br0\">(</span>ni<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>s<span class=\"sy0\">;</span>                            <span class=\"coMULTI\">/* add the sentence (part)    */</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> words<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * return the number of blank separated words in s<br/> *********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> s  <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">40</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> nw <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> i  <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">If</span> s<span class=\"sy0\">&gt;</span><span class=\"st0\">''</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>   nw<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> <span class=\"kw1\">substr</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">' '</span> <span class=\"kw1\">Then</span><br/>       nw<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span>nw<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> show<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * show the input sets<br/> *********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>mm<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> l<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> m<span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> w<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"st0\">''</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>       mm<span class=\"sy0\">=</span><span class=\"kw1\">max</span><span class=\"br0\">(</span>mm<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><span class=\"sy0\">;</span>               <span class=\"coMULTI\">/* max number of words in any set */</span><br/>       l<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">max</span><span class=\"br0\">(</span>l<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>w<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* max word length in set i   */</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'Input:'</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> mm<span class=\"sy0\">;</span>                         <span class=\"coMULTI\">/* output lines               */</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">Skip</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"sy0\">;</span><br/>     <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>w<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>l<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Skip</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Prolog", "loc": 17, "block": "<pre class=\"prolog highlighted_source\">amb<span class=\"br0\">(</span>E<span class=\"sy4\">,</span> <span class=\"br0\">[</span>E<span class=\"sy5\">|</span>_<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>amb<span class=\"br0\">(</span>E<span class=\"sy4\">,</span> <span class=\"br0\">[</span>_<span class=\"sy5\">|</span>ES<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> amb<span class=\"br0\">(</span>E<span class=\"sy4\">,</span> ES<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>joins<span class=\"br0\">(</span>Left<span class=\"sy4\">,</span> Right<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>  append<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> <span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> Left<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  append<span class=\"br0\">(</span><span class=\"br0\">[</span>R<span class=\"br0\">]</span><span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> Right<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  <span class=\"br0\">(</span> T \\<span class=\"sy6\">=</span> R <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> amb<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>  <span class=\"co1\">% (explicitly using amb fail as required)</span><br/>  <span class=\"sy4\">;</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a> <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>amb_example<span class=\"br0\">(</span><span class=\"br0\">[</span>Word1<span class=\"sy4\">,</span> Word2<span class=\"sy4\">,</span> Word3<span class=\"sy4\">,</span> Word4<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>  amb<span class=\"br0\">(</span>Word1<span class=\"sy4\">,</span> <span class=\"br0\">[</span>\"the\"<span class=\"sy4\">,</span>\"that\"<span class=\"sy4\">,</span>\"a\"<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  amb<span class=\"br0\">(</span>Word2<span class=\"sy4\">,</span> <span class=\"br0\">[</span>\"frog\"<span class=\"sy4\">,</span>\"elephant\"<span class=\"sy4\">,</span>\"thing\"<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  amb<span class=\"br0\">(</span>Word3<span class=\"sy4\">,</span> <span class=\"br0\">[</span>\"walked\"<span class=\"sy4\">,</span>\"treaded\"<span class=\"sy4\">,</span>\"grows\"<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  amb<span class=\"br0\">(</span>Word4<span class=\"sy4\">,</span> <span class=\"br0\">[</span>\"slowly\"<span class=\"sy4\">,</span>\"quickly\"<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  joins<span class=\"br0\">(</span>Word1<span class=\"sy4\">,</span> Word2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  joins<span class=\"br0\">(</span>Word2<span class=\"sy4\">,</span> Word3<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  joins<span class=\"br0\">(</span>Word3<span class=\"sy4\">,</span> Word4<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 44, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> Words_Ok<span class=\"br0\">(</span>String1.s, String2.s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">Mid</span><span class=\"br0\">(</span>String1,<span class=\"kw2\">Len</span><span class=\"br0\">(</span>String1<span class=\"br0\">)</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw2\">Mid</span><span class=\"br0\">(</span>String2,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">ProcedureReturn</span> #True<br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> #False<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s Amb<span class=\"br0\">(</span>Array A.s<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, Array B.s<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, Array C.s<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, Array D.s<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> a, b, c, d<br/>  <span class=\"kw1\">For</span> a<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>A<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> b<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>B<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">For</span> c<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>C<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> d<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> ArraySize<span class=\"br0\">(</span>D<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">If</span> Words_Ok<span class=\"br0\">(</span>A<span class=\"br0\">(</span>a<span class=\"br0\">)</span>,B<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">And</span> Words_Ok<span class=\"br0\">(</span>B<span class=\"br0\">(</span>b<span class=\"br0\">)</span>,C<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">And</span> Words_Ok<span class=\"br0\">(</span>C<span class=\"br0\">(</span>c<span class=\"br0\">)</span>,D<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">ProcedureReturn</span> A<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"sy0\">+</span>B<span class=\"br0\">(</span>b<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"sy0\">+</span>C<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"sy0\">+</span>D<span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>          <span class=\"kw1\">EndIf</span><br/>        <span class=\"kw1\">Next</span><br/>      <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"st0\">\"\"</span>   <span class=\"co1\">; Empty string, e.g. fail</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> Text.s<br/>  <span class=\"kw1\">Dim</span> Set1.s<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> Set2.s<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> Set3.s<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> Set4.s<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>  Set1<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"the\"</span>:    set1<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"that\"</span>:     set1<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"a\"</span><br/>  Set2<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"frog\"</span>:   set2<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"elephant\"</span>: set2<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"thing\"</span> <br/>  Set3<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"walked\"</span>: set3<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"treaded\"</span>:  set3<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"grows\"</span> <br/>  Set4<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"slowly\"</span>: set4<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">\"quickly\"</span><br/>\u00a0<br/>  text<span class=\"sy0\">=</span>Amb<span class=\"br0\">(</span>set1<span class=\"br0\">(</span><span class=\"br0\">)</span>,set2<span class=\"br0\">(</span><span class=\"br0\">)</span>,Set3<span class=\"br0\">(</span><span class=\"br0\">)</span>,set4<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> Text<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\"\"</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Correct sentence would be,\"</span><span class=\"sy0\">+</span>#CRLF$<span class=\"sy0\">+</span>Text<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Else</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Failed to fine a correct sentence.\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#CRLF$<span class=\"sy0\">+</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"Press ENTER to exit.\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 100, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">as</span> _itertools<br/>\u00a0<br/><span class=\"kw1\">class</span> Amb<span class=\"br0\">(</span><span class=\"kw2\">object</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw2\">self</span>._names2values   <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>       <span class=\"co1\"># set of values for each global name</span><br/>        <span class=\"kw2\">self</span>._func           <span class=\"sy0\">=</span> <span class=\"kw2\">None</span>     <span class=\"co1\"># Boolean constraint function</span><br/>        <span class=\"kw2\">self</span>._valueiterator  <span class=\"sy0\">=</span> <span class=\"kw2\">None</span>     <span class=\"co1\"># itertools.product of names values</span><br/>        <span class=\"kw2\">self</span>._funcargnames   <span class=\"sy0\">=</span> <span class=\"kw2\">None</span>     <span class=\"co1\"># Constraint parameter names</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__call__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> arg<span class=\"sy0\">=</span><span class=\"kw2\">None</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">hasattr</span><span class=\"br0\">(</span>arg<span class=\"sy0\">,</span> <span class=\"st0\">'__code__'</span><span class=\"br0\">)</span>:                <br/>            <span class=\"co1\">##</span><br/>            <span class=\"co1\">## Called with a constraint function. </span><br/>            <span class=\"co1\">##</span><br/>            globls <span class=\"sy0\">=</span> arg.__globals__ <span class=\"kw1\">if</span> <span class=\"kw2\">hasattr</span><span class=\"br0\">(</span>arg<span class=\"sy0\">,</span> <span class=\"st0\">'__globals__'</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> arg.<span class=\"me1\">func_globals</span><br/>            <span class=\"co1\"># Names used in constraint</span><br/>            argv <span class=\"sy0\">=</span> arg.__code__.<span class=\"me1\">co_varnames</span><span class=\"br0\">[</span>:arg.__code__.<span class=\"me1\">co_argcount</span><span class=\"br0\">]</span><br/>            <span class=\"kw1\">for</span> name <span class=\"kw1\">in</span> argv:<br/>                <span class=\"kw1\">if</span> name <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> <span class=\"kw2\">self</span>._names2values:<br/>                    <span class=\"kw1\">assert</span> name <span class=\"kw1\">in</span> globls<span class=\"sy0\">,</span> \\<br/>                           <span class=\"st0\">\"Global name\u00a0%s not found in function globals\"</span>\u00a0% name<br/>                    <span class=\"kw2\">self</span>._names2values<span class=\"br0\">[</span>name<span class=\"br0\">]</span> <span class=\"sy0\">=</span> globls<span class=\"br0\">[</span>name<span class=\"br0\">]</span><br/>            <span class=\"co1\"># Gather the range of values of all names used in the constraint</span><br/>            valuesets <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw2\">self</span>._names2values<span class=\"br0\">[</span>name<span class=\"br0\">]</span> <span class=\"kw1\">for</span> name <span class=\"kw1\">in</span> argv<span class=\"br0\">]</span><br/>            <span class=\"kw2\">self</span>._valueiterator <span class=\"sy0\">=</span> _itertools.<span class=\"me1\">product</span><span class=\"br0\">(</span>*valuesets<span class=\"br0\">)</span><br/>            <span class=\"kw2\">self</span>._func <span class=\"sy0\">=</span> arg<br/>            <span class=\"kw2\">self</span>._funcargnames <span class=\"sy0\">=</span> argv<br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">self</span><br/>        <span class=\"kw1\">elif</span> arg <span class=\"kw1\">is</span> <span class=\"kw1\">not</span> <span class=\"kw2\">None</span>:<br/>            <span class=\"co1\">##</span><br/>            <span class=\"co1\">## Assume called with an iterable set of values</span><br/>            <span class=\"co1\">##</span><br/>            arg <span class=\"sy0\">=</span> <span class=\"kw2\">frozenset</span><span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> arg<br/>        <span class=\"kw1\">else</span>:<br/>            <span class=\"co1\">##</span><br/>            <span class=\"co1\">## blank call tries to return next solution</span><br/>            <span class=\"co1\">##</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">self</span>._nextinsearch<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> _nextinsearch<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        arg <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>._func<br/>        globls <span class=\"sy0\">=</span> arg.__globals__<br/>        argv <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>._funcargnames<br/>        found <span class=\"sy0\">=</span> <span class=\"kw2\">False</span><br/>        <span class=\"kw1\">for</span> values <span class=\"kw1\">in</span> <span class=\"kw2\">self</span>._valueiterator:<br/>            <span class=\"kw1\">if</span> arg<span class=\"br0\">(</span>*values<span class=\"br0\">)</span>:<br/>                <span class=\"co1\"># Set globals.</span><br/>                found <span class=\"sy0\">=</span> <span class=\"kw2\">True</span><br/>                <span class=\"kw1\">for</span> n<span class=\"sy0\">,</span> v <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>argv<span class=\"sy0\">,</span> values<span class=\"br0\">)</span>:<br/>                    globls<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> v<br/>                <span class=\"kw1\">break</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> found: <span class=\"kw1\">raise</span> <span class=\"kw2\">StopIteration</span><br/>        <span class=\"kw1\">return</span> values<br/>\u00a0<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__iter__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">self</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> __next__<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    next <span class=\"sy0\">=</span> __next__ <span class=\"co1\"># Python 2</span><br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">True</span>:<br/>        amb <span class=\"sy0\">=</span> Amb<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Small Pythagorean triples problem:\"</span><span class=\"br0\">)</span><br/>        x <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        y <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        z <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> _dummy <span class=\"kw1\">in</span> amb<span class=\"br0\">(</span> <span class=\"kw1\">lambda</span> x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z: x*x + y*y <span class=\"sy0\">==</span> z*z <span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"st0\">'%s\u00a0%s\u00a0%s'</span>\u00a0% <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> z<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">True</span>:<br/>        amb <span class=\"sy0\">=</span> Amb<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Rosetta Code Amb problem:\"</span><span class=\"br0\">)</span><br/>        w1 <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"the\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"that\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"a\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        w2 <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"frog\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"elephant\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"thing\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        w3 <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"walked\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"treaded\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"grows\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        w4 <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"slowly\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"quickly\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> _dummy <span class=\"kw1\">in</span> amb<span class=\"br0\">(</span> <span class=\"kw1\">lambda</span> w1<span class=\"sy0\">,</span> w2<span class=\"sy0\">,</span> w3<span class=\"sy0\">,</span> w4: \\<br/>                             w1<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> w2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">and</span> \\<br/>                             w2<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> w3<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">and</span> \\<br/>                             w3<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> w4<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"st0\">'%s\u00a0%s\u00a0%s\u00a0%s'</span>\u00a0% <span class=\"br0\">(</span>w1<span class=\"sy0\">,</span> w2<span class=\"sy0\">,</span> w3<span class=\"sy0\">,</span> w4<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">True</span>:<br/>        amb <span class=\"sy0\">=</span> Amb<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Amb problem from \"</span><br/>            <span class=\"st0\">\"http://www.randomhacks.net/articles/2005/10/11/amb-operator:\"</span><span class=\"br0\">)</span><br/>        x <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        y <span class=\"sy0\">=</span> amb<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> _dummy <span class=\"kw1\">in</span> amb<span class=\"br0\">(</span> <span class=\"kw1\">lambda</span> x<span class=\"sy0\">,</span> y: x * y <span class=\"sy0\">!=</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"st0\">'%s\u00a0%s'</span>\u00a0% <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 23, "block": "<pre class=\"text highlighted_source\">checkSentence &lt;- function(sentence){<br/># Input: character vector<br/># Output: whether the sentence formed by the elements of the vector is valid<br/>  for (index in 1:(length(sentence)-1)){<br/>    first.word  &lt;- sentence[index]<br/>    second.word &lt;- sentence[index+1]<br/>\u00a0<br/>    last.letter  &lt;- substr(first.word, nchar(first.word), nchar(first.word))<br/>    first.letter &lt;- substr(second.word, 1, 1)<br/>\u00a0<br/>    if (last.letter\u00a0!= first.letter){ return(FALSE) } <br/>  }<br/>  return(TRUE)<br/>}<br/>\u00a0<br/>amb &lt;- function(sets){<br/># Input: list of character vectors containing all sets to consider<br/># Output: list of character vectors that are valid<br/>  all.paths      &lt;- apply(expand.grid(sets), 2, as.character)<br/>  all.paths.list &lt;- split(all.paths, 1:nrow(all.paths))<br/>  winners        &lt;- all.paths.list[sapply(all.paths.list, checkSentence)]<br/>  return(winners)<br/>}</pre>"}, {"lang": "Racket", "loc": 32, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; A quick `amb' implementation (same as in the Twelve Statements task)<br/>(define failures null)<br/>\u00a0<br/>(define (fail)<br/>  (if (pair? failures) ((first failures)) (error \"no more choices!\")))<br/>\u00a0<br/>(define (amb/thunks choices)<br/>  (let/cc k (set! failures (cons k failures)))<br/>  (if (pair? choices)<br/>    (let ([choice (first choices)]) (set! choices (rest choices)) (choice))<br/>    (begin (set! failures (rest failures)) (fail))))<br/>\u00a0<br/>(define-syntax-rule (amb E ...) (amb/thunks (list (lambda () E) ...)))<br/>\u00a0<br/>(define (assert condition) (unless condition (fail)))<br/>\u00a0<br/>;; Problem solution<br/>\u00a0<br/>(define (joins? left right)<br/>  (regexp-match? #px\"(.)\\0\\\\1\" (~a left \"\\0\" right)))<br/>\u00a0<br/>(let ([result (list (amb \"the\" \"that\" \"a\")<br/>                    (amb \"frog\" \"elephant\" \"thing\")<br/>                    (amb \"walked\" \"treaded\" \"grows\")<br/>                    (amb \"slowly\" \"quickly\"))])<br/>  (for ([x result] [y (cdr result)]) (assert (joins? x y)))<br/>  result)<br/>;; -&gt; '(\"that\" \"thing\" \"grows\" \"slowly\")<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 22, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program demonstrates the   Amd   operator,  choosing a word from each set.       */</span><br/>@<span class=\"sy0\">.</span>=;           @<span class=\"sy0\">.</span>1 = <span class=\"st0\">\"the    that     a\"</span><br/>               @<span class=\"sy0\">.</span>2 = <span class=\"st0\">\"frog   elephant thing\"</span><br/>               @<span class=\"sy0\">.</span>3 = <span class=\"st0\">\"walked treaded  grows\"</span><br/>               @<span class=\"sy0\">.</span>4 = <span class=\"st0\">\"slowly quickly\"</span><br/><span class=\"kw1\">call</span> Amb <span class=\"nu0\">1</span>                                       <span class=\"coMULTI\">/*find all word combinations that works*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Amb: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span> @<span class=\"sy0\">.</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> # x;     <span class=\"kw1\">arg</span> <span class=\"sy0\">.</span> u        <span class=\"coMULTI\">/*ARG uppercases U values. */</span><br/>             <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span> @<span class=\"sy0\">.</span>j==<span class=\"st0\">''</span>                           <span class=\"coMULTI\">/*locate a null string.    */</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>     t= j-<span class=\"nu0\">1</span>                                                  <span class=\"coMULTI\">/*define number of sets.   */</span><br/>     <span class=\"kw1\">if</span> #<span class=\"sy0\">&gt;</span>t  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  y=<span class=\"kw6\">word</span><span class=\"br0\">(</span>u, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                          <span class=\"coMULTI\">/*Y:  is a  uppercased U.  */</span><br/>                                      <span class=\"kw1\">do</span> n=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span>;      \u00a0?=<span class=\"kw6\">word</span><span class=\"br0\">(</span>u, n<span class=\"br0\">)</span><br/>                                      <span class=\"kw1\">if</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>?, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">\\</span>== <span class=\"kw6\">right</span><span class=\"br0\">(</span>y, <span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>;      y=?<br/>                                      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*n*/</span><br/>                       <span class=\"kw1\">say</span> <span class=\"kw6\">space</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>                          <span class=\"coMULTI\">/*\u00acshow superfluous blanks.*/</span><br/>                  <span class=\"kw3\">end</span><br/>\u00a0<br/>           <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>#<span class=\"br0\">)</span>;    <span class=\"kw1\">call</span> Amb   #+<span class=\"nu0\">1</span>   x   <span class=\"kw6\">word</span><span class=\"br0\">(</span>@<span class=\"sy0\">.</span>#, k<span class=\"br0\">)</span><br/>           <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                                       <span class=\"coMULTI\">/* [\u2191]  generate all combs */</span><br/>     <span class=\"kw1\">return</span>                                                  <span class=\"coMULTI\">/*      recursively.       */</span></pre>"}, {"lang": "Ring", "loc": 34, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Amb<br/>\u00a0<br/>set1 = [\"the\",\"that\",\"a\"]<br/>set2 = [\"frog\",\"elephant\",\"thing\"] <br/>set3 = [\"walked\",\"treaded\",\"grows\"] <br/>set4 = [\"slowly\",\"quickly\"]<br/>text = amb(set1,set2,set3,set4)<br/>if text\u00a0!= \"\"<br/>   see \"Correct sentence would be: \" + nl  + text + nl<br/>else<br/>   see \"Failed to fine a correct sentence.\"<br/>ok<br/>\u00a0<br/>func wordsok(string1, string2)<br/>       if substr(string1,len(string1),1) = substr(string2,1,1)<br/>          return true<br/>       ok<br/>       return false<br/>\u00a0<br/>func amb(a,b,c,d)<br/>       for a2 = 1 to len(a)<br/>            for b2 =1 to len(b)<br/>                 for c2 = 1 to len(c)<br/>                      for d2 = 1 to len(d)<br/>                           if wordsok(a[a2],b[b2]) and wordsok(b[b2],c[c2]) and wordsok(c[c2],d[d2])<br/>                              return a[a2]+\" \"+b[b2]+\" \"+c[c2]+\" \"+d[d2]<br/>                           ok<br/>                      next<br/>                 next<br/>            next<br/>       next<br/>       return \"\"  <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 49, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">\"continuation\"</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Amb<br/>  <span class=\"kw1\">class</span> ExhaustedError <span class=\"sy0\">&lt;</span> <span class=\"kw4\">RuntimeError</span>; <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> initialize<br/>    @<span class=\"kw3\">fail</span> = <span class=\"kw3\">proc</span> <span class=\"br0\">{</span> <span class=\"kw3\">fail</span> ExhaustedError, <span class=\"st0\">\"amb tree exhausted\"</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> choose<span class=\"br0\">(</span><span class=\"sy0\">*</span>choices<span class=\"br0\">)</span><br/>    prev_fail = @<span class=\"kw3\">fail</span><br/>    callcc <span class=\"br0\">{</span> <span class=\"sy0\">|</span>sk<span class=\"sy0\">|</span><br/>      choices.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>choice<span class=\"sy0\">|</span><br/>\tcallcc <span class=\"br0\">{</span> <span class=\"sy0\">|</span>fk<span class=\"sy0\">|</span><br/>\t  @<span class=\"kw3\">fail</span> = <span class=\"kw3\">proc</span> <span class=\"br0\">{</span><br/>\t    @<span class=\"kw3\">fail</span> = prev_fail<br/>\t    fk.<span class=\"me1\">call</span><span class=\"br0\">(</span>:<span class=\"kw3\">fail</span><span class=\"br0\">)</span><br/>\t  <span class=\"br0\">}</span><br/>\t  <span class=\"kw1\">if</span> choice.<span class=\"me1\">respond_to</span>? <span class=\"re3\">:call</span><br/>\t    sk.<span class=\"me1\">call</span><span class=\"br0\">(</span>choice.<span class=\"me1\">call</span><span class=\"br0\">)</span><br/>\t  <span class=\"kw1\">else</span><br/>\t    sk.<span class=\"me1\">call</span><span class=\"br0\">(</span>choice<span class=\"br0\">)</span><br/>\t  <span class=\"kw1\">end</span><br/>\t<span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      @<span class=\"kw3\">fail</span>.<span class=\"me1\">call</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> failure<br/>    choose<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> assert<span class=\"br0\">(</span>cond<span class=\"br0\">)</span><br/>    failure <span class=\"kw1\">unless</span> cond<br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>A = Amb.<span class=\"me1\">new</span><br/>w1 = A.<span class=\"me1\">choose</span><span class=\"br0\">(</span><span class=\"st0\">\"the\"</span>, <span class=\"st0\">\"that\"</span>, <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><br/>w2 = A.<span class=\"me1\">choose</span><span class=\"br0\">(</span><span class=\"st0\">\"frog\"</span>, <span class=\"st0\">\"elephant\"</span>, <span class=\"st0\">\"thing\"</span><span class=\"br0\">)</span><br/>w3 = A.<span class=\"me1\">choose</span><span class=\"br0\">(</span><span class=\"st0\">\"walked\"</span>, <span class=\"st0\">\"treaded\"</span>, <span class=\"st0\">\"grows\"</span><span class=\"br0\">)</span><br/>w4 = A.<span class=\"me1\">choose</span><span class=\"br0\">(</span><span class=\"st0\">\"slowly\"</span>, <span class=\"st0\">\"quickly\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>A.<span class=\"me1\">choose</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">unless</span> w1<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> == w2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>A.<span class=\"me1\">choose</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">unless</span> w2<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> == w3<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>A.<span class=\"me1\">choose</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">unless</span> w3<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> == w4<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> w1, w2, w3, w4</pre>"}, {"lang": "Rust", "loc": 46, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>use std::ops::Add;<br/>struct Amb&lt;'a&gt; {<br/>    list: Vec&lt;Vec&lt;&amp;'a str&gt;&gt;,<br/>}<br/>fn main() {<br/>    let amb = Amb {<br/>        list: vec![<br/>            vec![\"the\", \"that\", \"a\"],<br/>            vec![\"frog\", \"elephant\", \"thing\"],<br/>            vec![\"walked\", \"treaded\", \"grows\"],<br/>            vec![\"slowly\", \"quickly\"],<br/>        ],<br/>    };<br/>    match amb.do_amb(0, 0 as char) {<br/>        Some(text) =&gt; println!(\"{}\", text),<br/>        None =&gt; println!(\"Nothing found\"),<br/>    }<br/>}<br/>impl&lt;'a&gt; Amb&lt;'a&gt; {<br/>    fn do_amb(&amp;self, level: usize, last_char: char) -&gt; Option&lt;String&gt; {<br/>        if self.list.is_empty() {<br/>            panic!(\"No word list\");<br/>        }<br/>        if self.list.len() &lt;= level {<br/>            return Some(String::new());<br/>        }<br/>        let mut res = String::new();<br/>        let word_list = &amp;self.list[level];<br/>        for word in word_list {<br/>            if word.chars().next().unwrap() == last_char || last_char == 0 as char {<br/>                res = res.add(word).add(\" \");<br/>                let answ = self.do_amb(level + 1, word.chars().last().unwrap());<br/>                match answ {<br/>                    Some(x) =&gt; {<br/>                        res = res.add(&amp;x);<br/>                        return Some(res);<br/>                    }<br/>                    None =&gt; res.clear(),<br/>                }<br/>            }<br/>        }<br/>        None<br/>    }<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 20, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Amb <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> amb<span class=\"br0\">(</span>wss<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>List<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>String<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> <span class=\"sy0\">_</span>amb<span class=\"br0\">(</span>ws<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>String<span class=\"br0\">]</span>, wss<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>List<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>String<span class=\"br0\">]</span> <span class=\"sy0\">=</span> wss <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Nil <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>Some<span class=\"br0\">(</span>ws.<span class=\"me1\">head</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span> /<span class=\"sy0\">:</span> ws.<span class=\"me1\">tail</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a, w<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Some<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>x.<span class=\"me1\">last</span> <span class=\"sy0\">==</span> w.<span class=\"me1\">head</span><span class=\"br0\">)</span> Some<span class=\"br0\">(</span>x + <span class=\"st0\">\" \"</span> + w<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> None<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> None <span class=\"sy0\">=&gt;</span> None<br/>      <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> ws1 <span class=\"sy0\">::</span> wss1 <span class=\"sy0\">=&gt;</span> ws1.<span class=\"me1\">flatMap</span><span class=\"br0\">(</span>w <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">_</span>amb<span class=\"br0\">(</span>w <span class=\"sy0\">::</span> ws, wss1<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">headOption</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"sy0\">_</span>amb<span class=\"br0\">(</span>Nil, wss.<span class=\"me1\">reverse</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>amb<span class=\"br0\">(</span>List<span class=\"br0\">(</span>List<span class=\"br0\">(</span><span class=\"st0\">\"the\"</span>, <span class=\"st0\">\"that\"</span>, <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span>,<br/>                     List<span class=\"br0\">(</span><span class=\"st0\">\"frog\"</span>, <span class=\"st0\">\"elephant\"</span>, <span class=\"st0\">\"thing\"</span><span class=\"br0\">)</span>,<br/>                     List<span class=\"br0\">(</span><span class=\"st0\">\"walked\"</span>, <span class=\"st0\">\"treaded\"</span>, <span class=\"st0\">\"grows\"</span><span class=\"br0\">)</span>,<br/>                     List<span class=\"br0\">(</span><span class=\"st0\">\"slowly\"</span>, <span class=\"st0\">\"quickly\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 34, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> fail <br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span>error <span class=\"st0\">\"Amb tree exhausted\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define-syntax</span> amb <br/>  <span class=\"br0\">(</span><span class=\"kw1\">syntax-rules</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>AMB<span class=\"br0\">)</span> <span class=\"br0\">(</span>FAIL<span class=\"br0\">)</span><span class=\"br0\">)</span>                      <span class=\"co1\">; Two shortcuts. </span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>AMB expression<span class=\"br0\">)</span> expression<span class=\"br0\">)</span> <br/>\u00a0<br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>AMB expression ...<span class=\"br0\">)</span> <br/>     <span class=\"br0\">(</span><span class=\"kw1\">LET</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>FAIL<span class=\"sy0\">-</span>SAVE FAIL<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>       <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">CALL-WITH-CURRENT-CONTINUATION</span> <span class=\"co1\">; Capture a continuation to </span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">LAMBDA</span> <span class=\"br0\">(</span>K<span class=\"sy0\">-</span>SUCCESS<span class=\"br0\">)</span>           <span class=\"co1\">;   which we return possibles. </span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">CALL-WITH-CURRENT-CONTINUATION</span> <br/>              <span class=\"br0\">(</span><span class=\"kw1\">LAMBDA</span> <span class=\"br0\">(</span>K<span class=\"sy0\">-</span>FAILURE<span class=\"br0\">)</span>       <span class=\"co1\">; K-FAILURE will try the next </span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">SET!</span> FAIL K<span class=\"sy0\">-</span>FAILURE<span class=\"br0\">)</span>   <span class=\"co1\">;   possible expression. </span><br/>                <span class=\"br0\">(</span>K<span class=\"sy0\">-</span>SUCCESS              <span class=\"co1\">; Note that the expression is </span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">LAMBDA</span> <span class=\"br0\">(</span><span class=\"br0\">)</span>             <span class=\"co1\">;   evaluated in tail position </span><br/>                   expression<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>       <span class=\"co1\">;   with respect to AMB. </span><br/>            ... <br/>            <span class=\"br0\">(</span><span class=\"kw1\">SET!</span> FAIL FAIL<span class=\"sy0\">-</span>SAVE<span class=\"br0\">)</span>      <span class=\"co1\">; Finally, if this is reached, </span><br/>            FAIL<span class=\"sy0\">-</span>SAVE<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>            <span class=\"co1\">;   we restore the saved FAIL. </span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>w<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">(</span>amb <span class=\"st0\">\"the\"</span> <span class=\"st0\">\"that\"</span> <span class=\"st0\">\"a\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>w<span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"br0\">(</span>amb <span class=\"st0\">\"frog\"</span> <span class=\"st0\">\"elephant\"</span> <span class=\"st0\">\"thing\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>w<span class=\"sy0\">-</span><span class=\"nu0\">3</span> <span class=\"br0\">(</span>amb <span class=\"st0\">\"walked\"</span> <span class=\"st0\">\"treaded\"</span> <span class=\"st0\">\"grows\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>w<span class=\"sy0\">-</span><span class=\"nu0\">4</span> <span class=\"br0\">(</span>amb <span class=\"st0\">\"slowly\"</span> <span class=\"st0\">\"quickly\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>joins? left right<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">equal?</span> <span class=\"br0\">(</span><span class=\"kw1\">string-ref</span> left <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw1\">string-length</span> left<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">string-ref</span> right <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>joins? w<span class=\"sy0\">-</span><span class=\"nu0\">1</span> w<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>amb<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>joins? w<span class=\"sy0\">-</span><span class=\"nu0\">2</span> w<span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>amb<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>joins? w<span class=\"sy0\">-</span><span class=\"nu0\">3</span> w<span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>amb<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">list</span> w<span class=\"sy0\">-</span><span class=\"nu0\">1</span> w<span class=\"sy0\">-</span><span class=\"nu0\">2</span> w<span class=\"sy0\">-</span><span class=\"nu0\">3</span> w<span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 51, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const type: setListType is array array string;<br/>\u00a0<br/>const func array string: amb (in string: word1, in setListType: listOfSets) is func<br/>  result<br/>    var array string: ambResult is 0 times \"\";<br/>  local<br/>    var string: word2 is \"\";<br/>  begin<br/>    for word2 range listOfSets[1] do<br/>      if length(ambResult) = 0 and word1[length(word1) len 1] = word2[1 len 1] then<br/>        if length(listOfSets) = 1 then<br/>          ambResult\u00a0:= [] (word1) &amp; [] (word2);<br/>        else<br/>          ambResult\u00a0:= amb(word2, listOfSets[2 ..]);<br/>          if length(ambResult) &lt;&gt; 0 then<br/>            ambResult\u00a0:= [] (word1) &amp; ambResult;<br/>          end if;<br/>        end if;<br/>      end if;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const func array string: amb (in setListType: listOfSets) is func<br/>  result<br/>    var array string: ambResult is 0 times \"\";<br/>  local<br/>    var string: word1 is \"\";<br/>  begin<br/>    for word1 range listOfSets[1] do<br/>      if length(ambResult) = 0 then<br/>        ambResult\u00a0:= amb(word1, listOfSets[2 ..]);<br/>      end if;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var array string: ambResult is 0 times \"\";<br/>    var string: word is \"\";<br/>  begin<br/>    ambResult\u00a0:= amb([] ([] (\"the\", \"that\", \"a\"),<br/>                         [] (\"frog\", \"elephant\", \"thing\"),<br/>                         [] (\"walked\", \"treaded\", \"grows\"),<br/>                         [] (\"slowly\", \"quickly\")));<br/>    for word range ambResult do<br/>      write(word &lt;&amp; \" \");<br/>    end for;<br/>    writeln;<br/>  end func;</pre>"}, {"lang": "SETL", "loc": 15, "block": "<pre class=\"text highlighted_source\">program amb;<br/>\u00a0<br/>sets\u00a0:= unstr('[{the that a} {frog elephant thing} {walked treaded grows} {slowly quickly}]');<br/>\u00a0<br/>words\u00a0:= [amb(words): words in sets];<br/>if exists lWord = words(i), rWord in {words(i+1)} |<br/>          lWord(#lWord) /= rWord(1) then<br/>  fail;<br/>end if;<br/>\u00a0<br/>proc amb(words);<br/>  return arb {word in words | ok};<br/>end proc;<br/>\u00a0<br/>end program;</pre>"}, {"lang": "Tcl", "loc": 24, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> amb <span class=\"br0\">{</span><br/>    <span class=\"br0\">{</span>the    that     a<span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span>frog   elephant thing<span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span>walked treaded  grows<span class=\"br0\">}</span><br/>    <span class=\"br0\">{</span>slowly quickly<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> joins <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> index <span class=\"re0\">$a</span> end<span class=\"br0\">]</span> eq <span class=\"br0\">[</span><span class=\"kw2\">string</span> index <span class=\"re0\">$b</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> i <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$amb</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> j <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$amb</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy0\">!</span><span class=\"br0\">[</span>joins <span class=\"re0\">$i</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"kw1\">continue</span><br/>        <span class=\"kw1\">foreach</span> k <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$amb</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy0\">!</span><span class=\"br0\">[</span>joins <span class=\"re0\">$j</span> <span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"kw1\">continue</span><br/>            <span class=\"kw1\">foreach</span> l <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$amb</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">[</span>joins <span class=\"re0\">$k</span> <span class=\"re0\">$l</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$i</span> <span class=\"re0\">$j</span> <span class=\"re0\">$k</span> <span class=\"re0\">$l</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TUSCRIPT", "loc": 22, "block": "<pre class=\"text highlighted_source\">$$ MODE TUSCRIPT<br/>set1=\"the'that'a\"<br/>set2=\"frog'elephant'thing\"<br/>set3=\"walked'treaded'grows\"<br/>set4=\"slowly'quickly\"<br/>LOOP w1=set1<br/> lastw1=EXTRACT (w1,-1,0)<br/> LOOP w2=set2<br/> IF (w2.sw.$lastw1) THEN<br/>  lastw2=EXTRACT (w2,-1,0)<br/>  LOOP w3=set3<br/>  IF (w3.sw.$lastw2) THEN<br/>   lastw3=EXTRACT (w3,-1,0)<br/>   LOOP w4=set4<br/>   IF (w4.sw.$lastw3) sentence=JOIN (w1,\" \",w2,w3,w4)<br/>   ENDLOOP<br/>  ENDIF<br/>  ENDLOOP<br/> ENDIF<br/> ENDLOOP<br/>ENDLOOP<br/>PRINT sentence</pre>"}, {"lang": "TXR", "loc": 2, "block": "<pre class=\"text highlighted_source\">(defmacro amb-scope (. forms)<br/>  ^(block amb-scope ,*forms))</pre>"}, {"lang": "VBScript", "loc": 11, "block": "<pre class=\"vb highlighted_source\">class ambiguous<br/>\t<span class=\"kw4\">dim</span> sRule<br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw4\">property</span> <span class=\"kw4\">let</span> rule( x )<br/>\t\tsRule = x<br/>\t<span class=\"kw3\">end</span> <span class=\"kw4\">property</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> default <span class=\"kw2\">function</span> amb(p1, p2)<br/>\t\tamb = eval(sRule)<br/>\t<span class=\"kw3\">end</span> <span class=\"kw2\">function</span><br/><span class=\"kw3\">end</span> class</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">fcn joins(a,b){ a[-1]==b[0] }  // the constraint</pre>"}]}