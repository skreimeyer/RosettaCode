{"task": "Case-sensitivity_of_identifiers", "blocks": [{"lang": "Ada", "loc": 6, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">procedure</span> Dogs <span class=\"kw1\">is</span><br/>   Dog\u00a0: String\u00a0:= <span class=\"st0\">\"Bernie\"</span>;<br/><span class=\"kw1\">begin</span><br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"There is just one dog named \"</span> &amp; DOG<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Dogs;</pre>"}, {"lang": "Agena", "loc": 13, "block": "<pre class=\"text highlighted_source\">scope<br/>    local dog\u00a0:= \"Benjamin\";<br/>    scope<br/>        local Dog\u00a0:= \"Samba\";<br/>        scope<br/>            local DOG\u00a0:= \"Bernie\";<br/>            if DOG &lt;&gt; Dog or DOG &lt;&gt; dog<br/>            then print( \"The three dogs are named: \" &amp; dog &amp; \", \" &amp; Dog &amp; \" and \" &amp; DOG )<br/>            else print( \"There is just one dog named: \" &amp; DOG )<br/>            fi<br/>        epocs<br/>    epocs<br/>epocs</pre>"}, {"lang": "Aime", "loc": 7, "block": "<pre class=\"text highlighted_source\">text dog, Dog, DOG;<br/>\u00a0<br/>dog = \"Benjamin\";<br/>Dog = \"Samba\";<br/>DOG = \"Bernie\";<br/>\u00a0<br/>o_form(\"The three dogs are named ~, ~ and ~.\\n\", dog, Dog, DOG);</pre>"}, {"lang": "ALGOL 68", "loc": 12, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\">#!/usr/bin/a68g --script #</span><br/><span class=\"coMULTI\"># -*- coding: utf-8 -*- #</span><br/>\u00a0<br/><span class=\"kw3\">STRING</span> dog <span class=\"sy1\">=</span> <span class=\"st0\">\"Benjamin\"</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> D <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> og<span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> <span class=\"st0\">\"Samba\"</span><span class=\"sy1\">;</span> <br/><span class=\"kw4\">OP</span> DOG <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> gy<span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> <span class=\"st0\">\"Bernie\"</span><span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> og<span class=\"sy1\">=~,</span> gy<span class=\"sy1\">=~;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"The three dogs are named \"</span>g<span class=\"st0\">\", \"</span>g<span class=\"st0\">\" and \"</span>g<span class=\"st0\">\".\"</span>l$<span class=\"sy1\">,</span> dog<span class=\"sy1\">,</span> Dog<span class=\"sy1\">,</span> DOGgy<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  0<br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 16, "block": "<pre class=\"text highlighted_source\">begin<br/>    string(8) dog;<br/>    dog\u00a0:= \"Benjamin\";<br/>    begin<br/>        string(8) Dog;<br/>        Dog\u00a0:= \"Samba\";<br/>        begin<br/>            string(8) DOG;<br/>            DOG\u00a0:= \"Bernie\";<br/>            if DOG not = Dog<br/>            or DOG not = dog<br/>            then write( \"The three dogs are named: \", dog, \", \", Dog, \" and \", DOG )<br/>            else write( \"There is just one dog named: \", DOG )<br/>        end<br/>    end<br/>end.</pre>"}, {"lang": "APL", "loc": 5, "block": "<pre class=\"text highlighted_source\">      DOG\u2190'Benjamin'<br/>      Dog\u2190'Samba'<br/>      dog\u2190'Bernie'<br/>      'The three dogs are named ',DOG,', ',Dog,', and ',dog<br/>The three dogs are named Benjamin, Samba, and Bernie</pre>"}, {"lang": "AutoHotkey", "loc": 4, "block": "<pre class=\"autohotkey highlighted_source\">dog <span class=\"sy0\">:=</span> <span class=\"st0\">\"Benjamin\"</span><br/>Dog <span class=\"sy0\">:=</span> <span class=\"st0\">\"Samba\"</span><br/>DOG <span class=\"sy0\">:=</span> <span class=\"st0\">\"Bernie\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> There is just one dog named <span class=\"re0\">%dOG%</span></pre>"}, {"lang": "AWK", "loc": 6, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>\tdog = <span class=\"st0\">\"Benjamin\"</span><br/>\tDog = <span class=\"st0\">\"Samba\"</span><br/>\tDOG = <span class=\"st0\">\"Bernie\"</span><br/>\t<span class=\"kw5\">printf</span> <span class=\"st0\">\"The three dogs are named\u00a0%s,\u00a0%s and\u00a0%s.<span class=\"es0\">\\n</span>\"</span>, dog, Dog, DOG<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Batch File", "loc": 10, "block": "<pre class=\"dos highlighted_source\">\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> dog=Benjamin<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> Dog=Samba<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> DOG=Bernie<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> There is just one dog named <span class=\"sy0\">%</span><span class=\"re3\">dog</span><span class=\"sy0\">%</span>.<br/>pause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 4, "block": "<pre class=\"text highlighted_source\">      dog$ = \"Benjamin\"<br/>      Dog$ = \"Samba\"<br/>      DOG$ = \"Bernie\"<br/>      PRINT \"The three dogs are \" dog$ \", \" Dog$ \" and \" DOG$ \".\"</pre>"}, {"lang": "bc", "loc": 10, "block": "<pre class=\"text highlighted_source\">obase = 16<br/>ibase = 16<br/>\u00a0<br/>/*<br/> * Store the hexadecimal number 'BE27A312'<br/> * in the variable 'd'.<br/> */<br/>d = BE27A312<br/>\"There is just one dog named \"; d<br/>quit</pre>"}, {"lang": "Bracmat", "loc": 5, "block": "<pre class=\"text highlighted_source\">( Benjamin:?dog<br/>&amp; Samba:?Dog<br/>&amp; Bernie:?DOG<br/>&amp; out$(\"There are three dogs:\"\u00a0!dog\u00a0!Dog and\u00a0!DOG)<br/>);</pre>"}, {"lang": "Brlcad", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>opendb dogs.g y            # Create a database to hold our dogs<br/>units ft                   # The dogs are measured in feet<br/>in dog.s sph 0 0 0 1       # Benjie is a little Scottie dog<br/>in Dog.s sph 4 0 0 3       # Samba is a Labrador<br/>in DOG.s sph 13 0 0 5      # Bernie is massive. He is a New Foundland<br/>echo The three dogs are named Benjamin, Samba and Bernie</pre>"}, {"lang": "C", "loc": 11, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Benjamin\"</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>Dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Samba\"</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>DOG <span class=\"sy0\">=</span> <span class=\"st0\">\"Bernie\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"The three dogs are named\u00a0%s,\u00a0%s and\u00a0%s.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> dog<span class=\"sy0\">,</span> Dog<span class=\"sy0\">,</span> DOG<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 9, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    string dog <span class=\"sy1\">=</span> <span class=\"st0\">\"Benjamin\"</span>, Dog <span class=\"sy1\">=</span> <span class=\"st0\">\"Samba\"</span>, DOG <span class=\"sy1\">=</span> <span class=\"st0\">\"Bernie\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"The three dogs are named \"</span> <span class=\"sy1\">&lt;&lt;</span> dog <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", \"</span> <span class=\"sy1\">&lt;&lt;</span> Dog <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\", and \"</span> <span class=\"sy1\">&lt;&lt;</span> DOG <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 13, "block": "<pre class=\"c highlighted_source\">\u00a0<br/>using System<span class=\"sy0\">;</span><br/>\u00a0<br/>class Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span>string<span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        string dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Benjamin\"</span><span class=\"sy0\">;</span><br/>        string Dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Samba\"</span><span class=\"sy0\">;</span><br/>        string DOG <span class=\"sy0\">=</span> <span class=\"st0\">\"Bernie\"</span><span class=\"sy0\">;</span><br/>        Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>string.<span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"The three dogs are named {0}, {1}, and {2}.\"</span><span class=\"sy0\">,</span> dog<span class=\"sy0\">,</span> Dog<span class=\"sy0\">,</span> DOG<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre>user=&gt; (let [dog \"Benjamin\" Dog \"Samba\" DOG \"Bernie\"] (format \"The three dogs are named\u00a0%s,\u00a0%s and\u00a0%s.\" dog Dog DOG))\n\"The three dogs are named Benjamin, Samba and Bernie.\"</pre>"}, {"lang": "COBOL", "loc": 21, "block": "<pre class=\"cobol highlighted_source\"><span class=\"co1\">* Case sensitivity of identifiers</span><br/>       *&gt;* Commented-out <span class=\"kw1\">lines</span> <span class=\"kw3\">in</span> the working storage<br/>       *&gt;* are considered as <span class=\"kw3\">invalid</span> redefinitions<br/>       *&gt;* <span class=\"kw3\">of</span> <span class=\"st0\">''</span>dog<span class=\"st0\">''</span> that can only be ambiguously<br/>       *&gt;* referenced <span class=\"kw3\">in</span> the <span class=\"kw3\">procedure</span> body<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> case-sensitivity<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       *&gt;* <span class=\"nu0\">01</span>  dog <span class=\"kw3\">PICTURE</span> X<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw3\">VALUE</span> <span class=\"kw3\">IS</span> <span class=\"st0\">\"Benjamin\"</span><span class=\"sy0\">.</span><br/>       *&gt;* <span class=\"nu0\">01</span>  Dog <span class=\"kw3\">PICTURE</span> X<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw3\">VALUE</span> <span class=\"kw3\">IS</span> <span class=\"st0\">\"Samba\"</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  DOG <span class=\"kw3\">PICTURE</span> X<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"kw3\">VALUE</span> <span class=\"kw3\">IS</span> <span class=\"st0\">\"Bernie\"</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>         <span class=\"kw2\">DISPLAY</span><br/>       *&gt;*     <span class=\"st0\">\"The three dogs are named \"</span><br/>       *&gt;*     dog <span class=\"st0\">\", \"</span> Dog <span class=\"st0\">\" and \"</span> DOG <span class=\"st0\">\".\"</span><br/>           <span class=\"st0\">\"There is just one dog named \"</span> DOG <span class=\"st0\">\".\"</span><br/>         END-<span class=\"kw2\">DISPLAY</span><br/>         <span class=\"kw3\">STOP</span> <span class=\"kw3\">RUN</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> case-sensitivity<span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 6, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>dog=<span class=\"st0\">\"Benjamin\"</span><br/>Dog = <span class=\"st0\">\"Samba\"</span><br/>DOG = <span class=\"st0\">\"Bernie\"</span><br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"The three dogs are names #{dog}, #{Dog}, and #{DOG}.\"</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 15, "block": "<pre class=\"lisp highlighted_source\">CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>dog <span class=\"st0\">\"Benjamin\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Dog <span class=\"st0\">\"Samba\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>DOG <span class=\"st0\">\"Bernie\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t   <span class=\"br0\">(</span>format <span class=\"kw1\">nil</span> <span class=\"st0\">\"There is just one dog named ~a.\"</span> dog<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">; in: LAMBDA NIL</span><br/><span class=\"co1\">;     (LET* ((DOG \"Benjamin\") (DOG \"Samba\") (DOG \"Bernie\"))</span><br/><span class=\"co1\">;       (FORMAT NIL \"There is just one dog named ~a.\" DOG))</span><br/><span class=\"co1\">; </span><br/><span class=\"co1\">; caught STYLE-WARNING:</span><br/><span class=\"co1\">;   The variable DOG is defined but never used.</span><br/><span class=\"co1\">; </span><br/><span class=\"co1\">; caught STYLE-WARNING:</span><br/><span class=\"co1\">;   The variable DOG is defined but never used.</span><br/><span class=\"co1\">; </span><br/><span class=\"co1\">; compilation unit finished</span><br/><span class=\"co1\">;   caught 2 STYLE-WARNING conditions</span><br/><span class=\"st0\">\"There is just one dog named Bernie.\"</span></pre>"}, {"lang": "D", "loc": 10, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">string</span> dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Benjamin\"</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\">// identifiers that start with capital letters are type names</span><br/>    <span class=\"kw4\">string</span> Dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Samba\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">string</span> DOG <span class=\"sy0\">=</span> <span class=\"st0\">\"Bernie\"</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"There are three dogs named \"</span><span class=\"sy0\">,</span><br/>             dog<span class=\"sy0\">,</span> <span class=\"st0\">\", \"</span><span class=\"sy0\">,</span> Dog<span class=\"sy0\">,</span> <span class=\"st0\">\", and \"</span><span class=\"sy0\">,</span> DOG<span class=\"sy0\">,</span> <span class=\"st0\">\"'\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "dc", "loc": 4, "block": "<pre class=\"text highlighted_source\">[Benjamin]sd<br/>[Samba]sD<br/>[The two dogs are named ]P ldP [ and ]P lDP [.<br/>]P</pre>"}, {"lang": "Delphi", "loc": 12, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> CaseSensitiveIdentifiers<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  dog<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  dog <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'Benjamin'</span><span class=\"sy1\">;</span><br/>  Dog <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'Samba'</span><span class=\"sy1\">;</span><br/>  DOG <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'Bernie'</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'There is just one dog named '</span> <span class=\"sy3\">+</span> dog<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 5, "block": "<pre class=\"text highlighted_source\">local\u00a0:dog \"Benjamin\"<br/>local\u00a0:Dog \"Samba\"<br/>local\u00a0:DOG \"Bernie\"<br/>\u00a0<br/>!print( \"There are three dogs named \" dog \", \" Dog \" and \" DOG \".\" )</pre>"}, {"lang": "DWScript", "loc": 8, "block": "<pre class=\"delphi highlighted_source\">\u00a0<br/><span class=\"kw1\">var</span> dog <span class=\"sy1\">:</span> <span class=\"kw4\">String</span><span class=\"sy1\">;</span><br/>\u00a0<br/>dog <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'Benjamin'</span><span class=\"sy1\">;</span><br/>Dog <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'Samba'</span><span class=\"sy1\">;</span><br/>DOG <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'Bernie'</span><span class=\"sy1\">;</span><br/>\u00a0<br/>PrintLn<span class=\"br0\">(</span><span class=\"st0\">'There is just one dog named '</span> <span class=\"sy3\">+</span> dog<span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "EchoLisp", "loc": 8, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> dog <span class=\"st0\">\"Benjamin\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> Dog <span class=\"st0\">\"Samba\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> DOG <span class=\"st0\">\"Bernie\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>printf <span class=\"st0\">\"The three dogs are named\u00a0%a,\u00a0%a and\u00a0%a. \"</span> dog Dog DOG<span class=\"br0\">)</span><br/>    The three dogs are named Benjamin, Samba <span class=\"kw1\">and</span> Bernie. <br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 9, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>public program =<br/>[<br/>    var dog\u00a0:= \"Benjamin\".<br/>    var Dog\u00a0:= \"Samba\".<br/>    var DOG\u00a0:= \"Bernie\".<br/>    console printLineFormatted(\"The three dogs are named {0}, {1} and {2}\", dog, Dog, DOG).<br/>].</pre>"}, {"lang": "Elixir", "loc": 4, "block": "<pre class=\"text highlighted_source\">dog = \"Benjamin\"<br/>doG = \"Samba\"<br/>dOG = \"Bernie\"<br/>IO.puts \"The three dogs are named #{dog}, #{doG} and #{dOG}.\"</pre>"}, {"lang": "Erlang", "loc": 11, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> case_sensitivity_of_identifiers <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"kw1\">catch</span> dog <span class=\"sy3\">=</span> <span class=\"st0\">\"Benjamin\"</span><span class=\"sy1\">,</span> <span class=\"co1\">% Function will crash without catch</span><br/>\t<span class=\"re5\">Dog</span> <span class=\"sy3\">=</span> <span class=\"st0\">\"Samba\"</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">DOG</span> <span class=\"sy3\">=</span> <span class=\"st0\">\"Bernie\"</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"The three dogs are named ~s, ~s and ~s~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span>dog<span class=\"sy1\">,</span> <span class=\"re5\">Dog</span><span class=\"sy1\">,</span> <span class=\"re5\">DOG</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 5, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"co1\">-- These variables are all different</span><br/><span class=\"kw2\">sequence</span> dog <span class=\"sy1\">=</span> <span class=\"st0\">\"Benjamin\"</span><br/><span class=\"kw2\">sequence</span> Dog <span class=\"sy1\">=</span> <span class=\"st0\">\"Samba\"</span><br/><span class=\"kw2\">sequence</span> DOG <span class=\"sy1\">=</span> <span class=\"st0\">\"Bernie\"</span><br/><span class=\"kw2\">printf</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span> <span class=\"st0\">\"The three dogs are named\u00a0%s,\u00a0%s and\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> <span class=\"br0\">{</span>dog<span class=\"sy2\">,</span> Dog<span class=\"sy2\">,</span> DOG<span class=\"br0\">}</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 8, "block": "<pre class=\"text highlighted_source\">USING: formatting locals\u00a0;<br/>IN: scratchpad<br/>[let<br/>    \"Benjamin\"\u00a0:&gt; dog<br/>    \"Samba\"   \u00a0:&gt; Dog<br/>    \"Bernie\"  \u00a0:&gt; DOG<br/>    { dog Dog DOG } \"There are three dogs named\u00a0%s,\u00a0%s, and\u00a0%s.\" vprintf<br/>]</pre>"}, {"lang": "Forth", "loc": 5, "block": "<pre class=\"text highlighted_source\">: DOG .\" Benjamin\"\u00a0;<br/>: Dog .\" Samba\"\u00a0;<br/>: dog .\" Bernie\"\u00a0;<br/>: HOWMANYDOGS .\" There is just one dog named \" DOG\u00a0;<br/>HOWMANYDOGS</pre>"}, {"lang": "Fortran", "loc": 16, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> Example<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">dog</span>, Dog, DOG<br/>\u00a0<br/>  dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Benjamin\"</span><br/>  Dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Samba\"</span><br/>  DOG <span class=\"sy0\">=</span> <span class=\"st0\">\"Bernie\"</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dog <span class=\"sy0\">==</span> DOG<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"There is just one dog named \"</span>, dog<br/>  <span class=\"kw1\">else</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"The three dogs are named \"</span>, dog, Dog, <span class=\"st0\">\" and \"</span>, DOG<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> Example</pre>"}, {"lang": "FreeBASIC", "loc": 9, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co1\">' FreeBASIC is case-insensitive</span><br/><span class=\"kw1\">Dim</span> dog <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> <br/>dog = <span class=\"st0\">\"Benjamin\"</span><br/>Dog = <span class=\"st0\">\"Samba\"</span><br/>DOG = <span class=\"st0\">\"Bernie\"</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"There is just one dog, named \"</span>; dog<br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 4, "block": "<pre class=\"text highlighted_source\">dog = \"Benjamin\"<br/>Dog = \"Samba\"<br/>DOG = \"Bernie\"<br/>println[\"There are three dogs named $dog, $Dog and $DOG\"]</pre>"}, {"lang": "F#", "loc": 4, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Benjamin\"</span><br/><span class=\"kw1\">let</span> Dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Samba\"</span><br/><span class=\"kw1\">let</span> DOG <span class=\"sy0\">=</span> <span class=\"st0\">\"Bernie\"</span><br/>printfn <span class=\"st0\">\"There are three dogs named\u00a0%s,\u00a0%s and\u00a0%s\"</span> dog Dog DOG</pre>"}, {"lang": "Gambas", "loc": 9, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> dog <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a> <br/>\u00a0<br/>Dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Benjamin\"</span><br/>DOG <span class=\"sy0\">=</span> <span class=\"st0\">\"Samba\"</span><br/>dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Bernie\"</span><br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <span class=\"st0\">\"There is just one dog, named \"</span>; dog<br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "GAP", "loc": 15, "block": "<pre class=\"text highlighted_source\"># GAP is case sensitive<br/>ThreeDogs\u00a0:= function()<br/>\tlocal dog, Dog, DOG;<br/>\tdog\u00a0:= \"Benjamin\";<br/>\tDog\u00a0:= \"Samba\";<br/>\tDOG\u00a0:= \"Bernie\";<br/>\tif dog = DOG then<br/>\t\tPrint(\"There is just one dog named \", dog, \"\\n\");<br/>\telse<br/>\t\tPrint(\"The three dogs are named \", dog, \", \", Dog, \" and \", DOG, \"\\n\");<br/>\tfi;<br/>end;<br/>\u00a0<br/>ThreeDogs();<br/># The three dogs are named Benjamin, Samba and Bernie</pre>"}, {"lang": "Go", "loc": 19, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> dogs<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"co1\">// Three variables, three different names.</span><br/><span class=\"co1\">// (It wouldn't compile if the compiler saw the variable names as the same.)</span><br/><span class=\"kw1\">var</span> dog <span class=\"sy2\">=</span> <span class=\"st0\">\"Salt\"</span><br/><span class=\"kw1\">var</span> Dog <span class=\"sy2\">=</span> <span class=\"st0\">\"Pepper\"</span><br/><span class=\"kw1\">var</span> DOG <span class=\"sy2\">=</span> <span class=\"st0\">\"Mustard\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> PackageSees<span class=\"sy1\">()</span> <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"sy3\">*</span><span class=\"kw4\">string</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// Print dogs visible from here.</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"Package sees:\"</span><span class=\"sy1\">,</span> dog<span class=\"sy1\">,</span> Dog<span class=\"sy1\">,</span> DOG<span class=\"sy1\">)</span><br/>    <span class=\"co1\">// Return addresses of the variables visible from here.</span><br/>    <span class=\"co1\">// The point of putting them in a map is that maps store only</span><br/>    <span class=\"co1\">// unique keys, so it will end up with three items only if</span><br/>    <span class=\"co1\">// the variables really represent different places in memory.</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"sy3\">*</span><span class=\"kw4\">string</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span>&amp;dog<span class=\"sy1\">:</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> &amp;Dog<span class=\"sy1\">:</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> &amp;DOG<span class=\"sy1\">:</span> <span class=\"nu0\">1</span><span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 2, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Benjamin\"</span>, Dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Samba\"</span>, DOG <span class=\"sy0\">=</span> <span class=\"st0\">\"Bernie\"</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"br0\">(</span>dog <span class=\"sy0\">==</span> DOG <span class=\"sy0\">?</span> <span class=\"st0\">\"There is one dog named ${dog}\"</span>\u00a0: <span class=\"st0\">\"There are three dogs named ${dog}, ${Dog} and ${DOG}.\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 6, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Printf<br/>\u00a0<br/>main <span class=\"sy0\">=</span> printf <span class=\"st0\">\"The three dogs are named\u00a0%s,\u00a0%s and\u00a0%s.<span class=\"es0\">\\n</span>\"</span> dog dOG dOg<br/>    <span class=\"kw1\">where</span> dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Benjamin\"</span><br/>          dOG <span class=\"sy0\">=</span> <span class=\"st0\">\"Samba\"</span><br/>          dOg <span class=\"sy0\">=</span> <span class=\"st0\">\"Bernie\"</span></pre>"}, {"lang": "Icon and Unicon", "loc": 12, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>   dog <span class=\"sy1\">:=</span> <span class=\"st0\">\"Benjamin\"</span><br/>   Dog <span class=\"sy1\">:=</span> <span class=\"st0\">\"Samba\"</span><br/>   DOG <span class=\"sy1\">:=</span> <span class=\"st0\">\"Bernie\"</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> dog <span class=\"sy1\">==</span> DOG <span class=\"kw1\">then</span> <br/>      <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"There is just one dog named \"</span><span class=\"sy1\">,</span> dog<span class=\"sy1\">,</span><span class=\"st0\">\".\"</span><span class=\"br0\">)</span> <br/>   <span class=\"kw1\">else</span> <br/>      <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"The three dogs are named \"</span><span class=\"sy1\">,</span> dog<span class=\"sy1\">,</span> <span class=\"st0\">\", \"</span><span class=\"sy1\">,</span> Dog<span class=\"sy1\">,</span> <span class=\"st0\">\" and \"</span><span class=\"sy1\">,</span> DOG<span class=\"sy1\">,</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 6, "block": "<pre class=\"j highlighted_source\">   <span class=\"co1\">NB. These variables are all different</span><br/>   dog=: <span class=\"st_h\">'Benjamin'</span><br/>   Dog=: <span class=\"st_h\">'Samba'</span><br/>   DOG=: <span class=\"st_h\">'Bernie'</span><br/>   <span class=\"st_h\">'The three dogs are named '</span>,dog,<span class=\"st_h\">', '</span>,Dog,<span class=\"st_h\">', and '</span>,DOG<br/>The three dogs are named Benjamin, Samba, and Bernie </pre>"}, {"lang": "Java", "loc": 5, "block": "<pre class=\"java highlighted_source\"><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Benjamin\"</span><span class=\"sy0\">;</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> Dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Samba\"</span><span class=\"sy0\">;</span> <span class=\"co1\">//in general, identifiers that start with capital letters are class names</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> DOG <span class=\"sy0\">=</span> <span class=\"st0\">\"Bernie\"</span><span class=\"sy0\">;</span> <span class=\"co1\">//in general, identifiers in all caps are constants</span><br/><span class=\"co1\">//the conventions listed in comments here are not enforced by the language</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"There are three dogs named \"</span> <span class=\"sy0\">+</span> dog <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> Dog <span class=\"sy0\">+</span> <span class=\"st0\">\", and \"</span> <span class=\"sy0\">+</span> DOG <span class=\"sy0\">+</span> <span class=\"st0\">\"'\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "JavaScript", "loc": 4, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Benjamin\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> Dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Samba\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> DOG <span class=\"sy0\">=</span> <span class=\"st0\">\"Bernie\"</span><span class=\"sy0\">;</span><br/>document.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"The three dogs are named \"</span> <span class=\"sy0\">+</span> dog <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> Dog <span class=\"sy0\">+</span> <span class=\"st0\">\", and \"</span> <span class=\"sy0\">+</span> DOG <span class=\"sy0\">+</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 4, "block": "<pre class=\"text highlighted_source\">def task(dog; Dog; DOG):<br/> \"The three dogs are named \\(dog), \\(Dog), and \\(DOG).\"\u00a0;<br/>\u00a0<br/>task(\"Benjamin\"; \"Samba\"; \"Bernie\")</pre>"}, {"lang": "Julia", "loc": 7, "block": "<pre class=\"text highlighted_source\">dog, Dog, DOG = \"Benjamin\", \"Samba\", \"Bernie\"<br/>\u00a0<br/>if dog === Dog<br/>    println(\"There is only one dog, \", DOG)<br/>else<br/>    println(\"The three dogs are:  \", dog, \", \", Dog, \" and \", DOG)<br/>end</pre>"}, {"lang": "K", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  dog: \"Benjamin\"<br/>  Dog: \"Samba\"<br/>  DOG: \"Bernie\"<br/>  \"There are three dogs named \",dog,\", \",Dog,\" and \",DOG<br/>\"There are three dogs named Benjamin, Samba and Bernie\"<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 6, "block": "<pre class=\"scala highlighted_source\">fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Benjamin\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> Dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Samba\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> DOG <span class=\"sy0\">=</span> <span class=\"st0\">\"Bernie\"</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The three dogs are named $dog, $Dog and $DOG\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>local(dog = 'Benjamin')<br/>local(Dog = 'Samba')<br/>local(DOG = 'Bernie')<br/>\u00a0<br/>stdoutnl('There is just one dog named ' + #dog)<br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 8, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>dog$ <span class=\"sy0\">=</span> <span class=\"st0\">\"Benjamin\"</span><br/>Dog$ <span class=\"sy0\">=</span> <span class=\"st0\">\"Samba\"</span><br/>DOG$ <span class=\"sy0\">=</span> <span class=\"st0\">\"Bernie\"</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"The three dogs are \"</span>; dog$; <span class=\"st0\">\", \"</span>; Dog$; <span class=\"st0\">\" and \"</span>; DOG$; <span class=\"st0\">\".\"</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 5, "block": "<pre class=\"lua highlighted_source\">dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Benjamin\"</span><br/>Dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Samba\"</span><br/>DOG <span class=\"sy0\">=</span> <span class=\"st0\">\"Bernie\"</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> <span class=\"st0\">\"There are three dogs named \"</span><span class=\"sy0\">..</span>dog<span class=\"sy0\">..</span><span class=\"st0\">\", \"</span><span class=\"sy0\">..</span>Dog<span class=\"sy0\">..</span><span class=\"st0\">\" and \"</span><span class=\"sy0\">..</span>DOG<span class=\"sy0\">..</span><span class=\"st0\">\".\"</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 9, "block": "<pre class=\"text highlighted_source\">&gt; dog, Dog, DOG\u00a0:= \"Benjamin\", \"Samba\", \"Bernie\":<br/>&gt; if nops( { dog, Dog, DOG } ) = 3 then<br/>&gt;   printf( \"There are three dogs named\u00a0%s,\u00a0%s and\u00a0%s.\\n\", dog, Dog, DOG )<br/>&gt; elif nops( { dog, Dog, DOG } ) = 2 then<br/>&gt;   printf( \"WTF? There are two dogs named\u00a0%s and\u00a0%s.\\n\", op( { dog, Dog, DOG } ) )<br/>&gt; else<br/>&gt;   printf( \"There is one dog named\u00a0%s.\\n\", dog )<br/>&gt; end if:<br/>There are three dogs named Benjamin, Samba and Bernie.</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 4, "block": "<pre class=\"text highlighted_source\">dog = \"Benjamin\"; Dog = \"Samba\"; DOG = \"Bernie\";<br/>\"The three dogs are named \"&lt;&gt; dog &lt;&gt;\", \"&lt;&gt; Dog &lt;&gt;\" and \"&lt;&gt; DOG <br/>\u00a0<br/>-&gt; \"The three dogs are named Benjamin, Samba and Bernie\"</pre>"}, {"lang": "MATLAB / Octave", "loc": 5, "block": "<pre class=\"matlab highlighted_source\">  dog = <span class=\"co2\">'Benjamin'</span>;<br/>  Dog = <span class=\"co2\">'Samba'</span>;<br/>  DOG = <span class=\"co2\">'Bernie'</span>;<br/>\u00a0<br/>  printf<span class=\"br0\">(</span><span class=\"co2\">'There are three dogs\u00a0%s,\u00a0%s,\u00a0%s.\\n'</span>,dog, Dog, DOG<span class=\"br0\">)</span>; </pre>"}, {"lang": "Maxima", "loc": 6, "block": "<pre class=\"text highlighted_source\">/* Maxima is case sensitive */<br/>a: 1$<br/>A: 2$<br/>\u00a0<br/>is(a = A);<br/>false</pre>"}, {"lang": "Modula-2", "loc": 14, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span>  dog;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span>  InOut;<br/>\u00a0<br/><span class=\"kw1\">TYPE</span>    String          <span class=\"sy0\">=</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">31</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>\u00a0<br/><span class=\"kw1\">VAR</span>     dog<span class=\"sy0\">,</span> Dog<span class=\"sy0\">,</span> DOG   <span class=\"sy0\">:</span> String;<br/>\u00a0<br/><span class=\"coMULTI\">(* No compiler error, so the rest is simple  *)</span><br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  InOut.WriteString <span class=\"br0\">(</span><span class=\"st0\">\"Three happy dogs.\"</span><span class=\"br0\">)</span>;<br/>  InOut.WriteLn<br/><span class=\"kw1\">END</span> dog.</pre>"}, {"lang": "Nemerle", "loc": 4, "block": "<pre class=\"text highlighted_source\">def dog = \"Benjamin\";<br/>def Dog = \"Samba\";<br/>def DOG = \"Bernie\";<br/>WriteLine($\"The three dogs are named $dog, $Dog, and $DOG\");</pre>"}, {"lang": "NESL", "loc": 4, "block": "<pre class=\"text highlighted_source\">dog = \"Benjamin\";<br/>Dog = \"Samba\";<br/>DOG = \"Bernie\";<br/>\"There is just one dog, named \" ++ dog;</pre>"}, {"lang": "NetRexx", "loc": 16, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/>dog = <span class=\"st0\">\"Benjamin\"</span>;<br/>Dog = <span class=\"st0\">\"Samba\"</span>;<br/>DOG = <span class=\"st0\">\"Bernie\"</span>;<br/>\u00a0<br/><span class=\"kw1\">if</span> dog == Dog <span class=\"sy0\">&amp;</span> Dog == DOG <span class=\"sy0\">&amp;</span> dog == DOG <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'There is just one dog named'</span> dog<span class=\"st0\">'.'</span><br/>  <span class=\"kw3\">end</span><br/><span class=\"kw3\">else</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'The three dogs are named'</span> dog<span class=\"st0\">','</span> Dog <span class=\"st0\">'and'</span> DOG<span class=\"st0\">'.'</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 4, "block": "<pre class=\"text highlighted_source\">var dog = \"Benjamin\"<br/>Dog = \"Samba\"<br/>DOG = \"Bernie\"<br/>echo(\"There is just one dog named \" &amp; doG)</pre>"}, {"lang": "Oberon-2", "loc": 14, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> CaseSensitivity;<br/><span class=\"kw1\">IMPORT</span><br/>  Out;<br/><span class=\"kw1\">VAR</span><br/>  dog<span class=\"sy0\">,</span> Dog<span class=\"sy0\">,</span> DOG<span class=\"sy0\">:</span> STRING;<br/><span class=\"kw1\">BEGIN</span>  <br/>  dog <span class=\"sy0\">:=</span> <span class=\"st0\">\"Benjamin\"</span>;<br/>  Dog <span class=\"sy0\">:=</span> <span class=\"st0\">\"Samba\"</span>;<br/>  DOG <span class=\"sy0\">:=</span> <span class=\"st0\">\"Bernie\"</span>;<br/>  Out.<span class=\"me1\">Object</span><span class=\"br0\">(</span><span class=\"st0\">\"The three dogs are named \"</span> <span class=\"sy0\">+</span> dog <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span> Dog <span class=\"sy0\">+</span> <span class=\"st0\">\" and \"</span> <span class=\"sy0\">+</span> DOG<span class=\"br0\">)</span>;<br/>  Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> CaseSensitivity.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 8, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">class</span> Program <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    dog <span class=\"sy0\">:=</span> <span class=\"st0\">\"Benjamin\"</span><span class=\"sy0\">;</span><br/>    Dog <span class=\"sy0\">:=</span> <span class=\"st0\">\"Samba\"</span><span class=\"sy0\">;</span><br/>    DOG <span class=\"sy0\">:=</span> <span class=\"st0\">\"Bernie\"</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"The three dogs are named {$dog}, {$Dog}, and {$DOG}.\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 5, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Benjamin\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> dOG <span class=\"sy0\">=</span> <span class=\"st0\">\"Samba\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> dOg <span class=\"sy0\">=</span> <span class=\"st0\">\"Bernie\"</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"The three dogs are named\u00a0%s,\u00a0%s and\u00a0%s.\\n\"</span> dog dOG dOg</pre>"}, {"lang": "Oforth", "loc": 8, "block": "<pre class=\"text highlighted_source\">: threeDogs<br/>| dog Dog DOG |<br/>\u00a0<br/>   \"Benjamin\" -&gt;dog<br/>   \"Samba\"  -&gt;Dog<br/>   \"Bernie\" -&gt;DOG<br/>\u00a0<br/>   System.Out \"The three dogs are named \" &lt;&lt; dog &lt;&lt; \", \" &lt;&lt; Dog &lt;&lt; \" and \" &lt;&lt; DOG &lt;&lt; \".\" &lt;&lt; cr\u00a0;</pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">dog<span class=\"sy0\">=</span><span class=\"st0\">\"Benjamin\"</span><span class=\"sy0\">;</span><br/>Dog<span class=\"sy0\">=</span><span class=\"st0\">\"Samba\"</span><span class=\"sy0\">;</span><br/>DOG<span class=\"sy0\">=</span><span class=\"st0\">\"Bernie\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"The three dogs are named\u00a0%s,\u00a0%s, and\u00a0%s.\"</span><span class=\"sy0\">,</span> dog<span class=\"sy0\">,</span> Dog<span class=\"sy0\">,</span> DOG<span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 5, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\"># These variables are all different</span><br/><span class=\"re0\">$dog</span><span class=\"sy0\">=</span><span class=\"st_h\">'Benjamin'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$Dog</span><span class=\"sy0\">=</span><span class=\"st_h\">'Samba'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$DOG</span><span class=\"sy0\">=</span><span class=\"st_h\">'Bernie'</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"The three dogs are named $dog, $Dog, and $DOG <span class=\"es0\">\\n</span>\"</span></pre>"}, {"lang": "Perl", "loc": 5, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\"># These variables are all different</span><br/><span class=\"re0\">$dog</span><span class=\"sy0\">=</span><span class=\"st_h\">'Benjamin'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$Dog</span><span class=\"sy0\">=</span><span class=\"st_h\">'Samba'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$DOG</span><span class=\"sy0\">=</span><span class=\"st_h\">'Bernie'</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"The three dogs are named $dog, $Dog, and $DOG <span class=\"es0\">\\n</span>\"</span></pre>"}, {"lang": "Perl 6", "loc": 4, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$dog</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'Benjamin'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$Dog</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'Samba'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$DOG</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'Bernie'</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"The three dogs are named $dog, $Dog, and $DOG.\"</span></pre>"}, {"lang": "Phix", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>sequence dog = \"Benjamin\"<br/>sequence Dog = \"Samba\"<br/>sequence DOG = \"Bernie\"<br/>printf( 1, \"The three dogs are named\u00a0%s,\u00a0%s and\u00a0%s\\n\", {dog, Dog, DOG} )<br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">(let (dog \"Benjamin\"  Dog \"Samba\"  DOG \"Bernie\")<br/>   (prinl \"The three dogs are named \" dog \", \" Dog \" and \" DOG) )</pre>"}, {"lang": "PL/I", "loc": 12, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process or<span class=\"br0\">(</span>!<span class=\"br0\">)</span> source xref attributes macro <span class=\"kw1\">options</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * Program to show that PL/I is case-insensitive<br/> * 28.05.2013 Walter Pachl<br/> *********************************************************************/</span><br/> case<span class=\"sy0\">:</span> <span class=\"kw1\">proc</span> <span class=\"kw1\">options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> dog <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Benjamin\"</span><span class=\"sy0\">;</span><br/> Dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Samba\"</span><span class=\"sy0\">;</span><br/> DOG <span class=\"sy0\">=</span> <span class=\"st0\">\"Bernie\"</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>dog<span class=\"sy0\">,</span>Dog<span class=\"sy0\">,</span>DOG<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 7, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$dog</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Benjamin\"</span><br/><span class=\"re0\">$Dog</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Samba\"</span><br/><span class=\"re0\">$DOG</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Bernie\"</span><br/>\u00a0<br/><span class=\"st0\">\"There is just one dog named {0}.\"</span> <span class=\"kw4\">-f</span> <span class=\"re0\">$dOg</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 6, "block": "<pre class=\"prolog highlighted_source\">three_dogs <span class=\"sy1\">:-</span><br/>\tDoG <span class=\"sy6\">=</span> <span class=\"st_h\">'Benjamin'</span><span class=\"sy4\">,</span><br/>\tDog <span class=\"sy6\">=</span> <span class=\"st_h\">'Samba'</span><span class=\"sy4\">,</span><br/>\tDOG <span class=\"sy6\">=</span> <span class=\"st_h\">'Bernie'</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'The three dogs are named ~w, ~w and ~w.~n'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>DoG<span class=\"sy4\">,</span> Dog<span class=\"sy4\">,</span> DOG<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 4, "block": "<pre class=\"purebasic highlighted_source\">dog$<span class=\"sy0\">=</span><span class=\"st0\">\"Benjamin\"</span><br/>Dog$<span class=\"sy0\">=</span><span class=\"st0\">\"Samba\"</span><br/>DOG$<span class=\"sy0\">=</span><span class=\"st0\">\"Bernie\"</span><br/><span class=\"kw1\">Debug</span> <span class=\"st0\">\"There is just one dog named \"</span><span class=\"sy0\">+</span>dog$</pre>"}, {"lang": "Python", "loc": 4, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> dog <span class=\"sy0\">=</span> <span class=\"st0\">'Benjamin'</span><span class=\"sy0\">;</span> Dog <span class=\"sy0\">=</span> <span class=\"st0\">'Samba'</span><span class=\"sy0\">;</span> DOG <span class=\"sy0\">=</span> <span class=\"st0\">'Bernie'</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"st0\">'The three dogs are named '</span><span class=\"sy0\">,</span>dog<span class=\"sy0\">,</span><span class=\"st0\">', '</span><span class=\"sy0\">,</span>Dog<span class=\"sy0\">,</span><span class=\"st0\">', and '</span><span class=\"sy0\">,</span>DOG<span class=\"br0\">)</span><br/>The three dogs are named  Benjamin <span class=\"sy0\">,</span>  Samba <span class=\"sy0\">,</span> <span class=\"kw1\">and</span>  Bernie<br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "R", "loc": 14, "block": "<pre class=\"text highlighted_source\">dog &lt;- 'Benjamin'<br/>Dog &lt;- 'Samba'<br/>DOG &lt;- 'Bernie'<br/>\u00a0<br/># Having fun with cats and dogs <br/>cat('The three dogs are named ')<br/>cat(dog)<br/>cat(', ')<br/>cat(Dog)<br/>cat(' and ')<br/>cat(DOG)<br/>cat('.\\n')<br/># In one line it would be:<br/># cat('The three dogs are named ', dog, ', ', Dog, ' and ', DOG, '.\\n', sep = '')</pre>"}, {"lang": "Racket", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define dog \"Benjamin\")<br/>(define Dog \"Samba\")<br/>(define DOG \"Bernie\")<br/>\u00a0<br/>(if (equal? dog DOG)<br/>    (displayln (~a \"There is one dog named \" DOG \".\"))<br/>    (displayln (~a \"The three dogs are named \" dog \", \" Dog \", and, \" DOG \".\")))<br/>\u00a0</pre>"}, {"lang": "Retro", "loc": 5, "block": "<pre class=\"text highlighted_source\">: dog  ( -$ )  \"Benjamin\"\u00a0;<br/>: Dog  ( -$ )  \"Samba\"\u00a0;<br/>: DOG  ( -$ )  \"Bernie\"\u00a0;<br/>\u00a0<br/>DOG Dog dog \"The three dogs are named\u00a0%s,\u00a0%s, and\u00a0%s.\\n\" puts</pre>"}, {"lang": "REXX", "loc": 16, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program demonstrate  case insensitivity  for  simple  REXX  variable names.      */</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/*  \u250c\u2500\u2500\u25c4\u2500\u2500 all 3 left\u2500hand side REXX variables are identical (as far as assignments). */</span><br/>  <span class=\"coMULTI\">/*  \u2502                                                                                 */</span><br/>  <span class=\"coMULTI\">/*  \u2193                                                                                 */</span><br/>     dog= <span class=\"st0\">'Benjamin'</span>                             <span class=\"coMULTI\">/*assign a   lowercase   variable (dog)*/</span><br/>     Dog= <span class=\"st0\">'Samba'</span>                                <span class=\"coMULTI\">/*   \"   \"  capitalized     \"      Dog */</span><br/>     DOG= <span class=\"st0\">'Bernie'</span>                               <span class=\"coMULTI\">/*   \"   an  uppercase      \"      DOG */</span><br/>\u00a0<br/>                              <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">'using simple variables'</span>, <span class=\"nu0\">35</span>, <span class=\"st0\">\"\u2500\"</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/*title.*/</span><br/>                              <span class=\"kw1\">say</span><br/>\u00a0<br/><span class=\"kw1\">if</span> dog<span class=\"sy0\">\\</span>==Dog <span class=\"sy0\">|</span> DOG<span class=\"sy0\">\\</span>==dog  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"st0\">'The three dogs are named:'</span>     dog<span class=\"st0\">\",\"</span> Dog <span class=\"st0\">'and'</span> DOG<span class=\"st0\">\".\"</span><br/>                          <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> <span class=\"st0\">'There is just one dog named:'</span>  dog<span class=\"st0\">\".\"</span><br/>\u00a0<br/>                                                 <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>dog = \"Benjamin\"<br/>doG = \"Smokey\"<br/>Dog = \"Samba\"<br/>DOG = \"Bernie\"<br/>see \"The 4 dogs are\u00a0: \" + dog +  \", \" + doG + \", \" + Dog + \" and \" + DOG + \".\"<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 14, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">module</span> FiveDogs<br/>  dog = <span class=\"st0\">\"Benjamin\"</span><br/>  dOg = <span class=\"st0\">\"Dogley\"</span><br/>  doG = <span class=\"st0\">\"Fido\"</span><br/>  Dog = <span class=\"st0\">\"Samba\"</span>   <span class=\"co1\"># this constant is FiveDogs::Dog</span><br/>  DOG = <span class=\"st0\">\"Bernie\"</span>  <span class=\"co1\"># this constant is FiveDogs::DOG</span><br/>\u00a0<br/>  names = <span class=\"br0\">[</span>dog, dOg, doG, Dog, DOG<span class=\"br0\">]</span><br/>  names.<span class=\"me1\">uniq</span>!<br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"There are\u00a0%d dogs named\u00a0%s.\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>names.<span class=\"me1\">length</span>, names.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"kw3\">puts</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"The local variables are\u00a0%s.\"</span> <span class=\"sy0\">%</span> <span class=\"kw3\">local_variables</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"The constants are\u00a0%s.\"</span> <span class=\"sy0\">%</span> constants.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 6, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    let dog = \"Benjamin\";<br/>    let Dog = \"Samba\";<br/>    let DOG = \"Bernie\";<br/>    println!(\"The three dogs are named {}, {} and {}.\", dog, Dog, DOG);<br/>}</pre>"}, {"lang": "Run BASIC", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>dog$ = \"Benjamin\"<br/>doG$ = \"Smokey\"<br/>Dog$ = \"Samba\"<br/>DOG$ = \"Bernie\"<br/>print \"The 4 dogs are \"; dog$; \", \"; doG$; \", \"; Dog$; \" and \"; DOG$; \".\"<br/>\u00a0</pre>"}, {"lang": "Sather", "loc": 9, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>  main is<br/>    dog\u00a0::= \"Benjamin\";<br/>    Dog\u00a0::= \"Samba\";<br/>    DOG\u00a0::= \"Bernie\";<br/>    #OUT + #FMT(\"The three dogs are\u00a0%s,\u00a0%s and\u00a0%s\\n\", <br/>                 dog, Dog, DOG);<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 4, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Benjamin\"</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> Dog <span class=\"sy0\">=</span> <span class=\"st0\">\"Samba\"</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> DOG <span class=\"sy0\">=</span> <span class=\"st0\">\"Bernie\"</span><br/>println<span class=\"br0\">(</span><span class=\"st0\">\"There are three dogs named \"</span> + dog + <span class=\"st0\">\", \"</span> + Dog + <span class=\"st0\">\", and \"</span> + DOG + <span class=\"st0\">\".\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 15, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> dog <span class=\"st0\">\"Benjamin\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> Dog <span class=\"st0\">\"Samba\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> DOG <span class=\"st0\">\"Bernie\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">eq?</span> dog DOG<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">begin</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"There is one dog named \"</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">display</span> DOG<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">begin</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"The three dogs are named \"</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">display</span> dog<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">display</span> Dog<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\" and \"</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">display</span> DOG<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 10, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const string: dog is \"Benjamin\";<br/>const string: Dog is \"Samba\";<br/>const string: DOG is \"Bernie\";<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(\"The three dogs are named \" &lt;&amp; dog &lt;&amp; \", \" &lt;&amp; Dog &lt;&amp; \" and \" &lt;&amp; DOG &lt;&amp; \".\");<br/>  end func;</pre>"}, {"lang": "SETL", "loc": 4, "block": "<pre class=\"pascal highlighted_source\">dog <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'Benjamin'</span><span class=\"sy1\">;</span><br/>Dog <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'Samba'</span><span class=\"sy1\">;</span><br/>DOG <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'Bernie'</span><span class=\"sy1\">;</span><br/>print<span class=\"br0\">(</span> <span class=\"st0\">'There is just one dog named'</span><span class=\"sy1\">,</span> dOg <span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Sidef", "loc": 4, "block": "<pre class=\"ruby highlighted_source\">var dog = <span class=\"st0\">'Benjamin'</span>;<br/>var Dog = <span class=\"st0\">'Samba'</span>;<br/>var DOG = <span class=\"st0\">'Bernie'</span>;<br/>say <span class=\"st0\">\"The three dogs are named #{dog}, #{Dog}, and #{DOG}.\"</span>;</pre>"}, {"lang": "Simula", "loc": 10, "block": "<pre class=\"text highlighted_source\">begin<br/>    text dog;<br/>    dog\u00a0:- blanks( 8 );<br/>    dog\u00a0:= \"Benjamin\";<br/>    Dog\u00a0:= \"Samba\";<br/>    DOG\u00a0:= \"Bernie\";<br/>    outtext( \"There is just one dog, named \" );<br/>    outtext( dog );<br/>    outimage<br/>end</pre>"}, {"lang": "Smalltalk", "loc": 6, "block": "<pre class=\"smalltalk highlighted_source\">|dog <span class=\"re0\">Dog</span> <span class=\"re0\">DOG</span>|<br/><span class=\"re6\">dog</span> <span class=\"sy0\">:=</span> <span class=\"st0\">'Benjamin'</span>.<br/><span class=\"re0\">Dog</span> <span class=\"sy0\">:=</span> <span class=\"st0\">'Samba'</span>.<br/><span class=\"re0\">DOG</span> <span class=\"sy0\">:=</span> <span class=\"st0\">'Bernie'</span>.<br/><span class=\"br0\">(</span> <span class=\"st0\">'The three dogs are named\u00a0%1,\u00a0%2 and\u00a0%3'</span>\u00a0%<br/>  <span class=\"br0\">{</span> dog . <span class=\"re0\">Dog</span> . <span class=\"re0\">DOG</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> displayNl.</pre>"}, {"lang": "SNOBOL4", "loc": 5, "block": "<pre class=\"text highlighted_source\">    DOG = 'Benjamin'<br/>    Dog = 'Samba'<br/>    dog = 'Bernie'<br/>    OUTPUT = 'The three dogs are named ' DOG ', ' Dog ', and ' dog<br/>END</pre>"}, {"lang": "Standard ML", "loc": 7, "block": "<pre class=\"text highlighted_source\">let<br/>  val dog = \"Benjamin\"<br/>  val Dog = \"Samba\"<br/>  val DOG = \"Bernie\"<br/>in<br/>  print(\"The three dogs are named \" ^ dog ^ \", \" ^ Dog ^ \", and \" ^ DOG ^ \".\\n\")<br/>end;</pre>"}, {"lang": "Stata", "loc": 5, "block": "<pre class=\"text highlighted_source\">. local dog Benjamin<br/>. local Dog Samba<br/>. local DOG Bernie<br/>. display \"The three dogs are named $_dog, $_Dog, and $_DOG.\"<br/>The three dogs are named Benjamin, Samba, and Bernie.</pre>"}, {"lang": "Swift", "loc": 4, "block": "<pre class=\"text highlighted_source\">let dog = \"Benjamin\"<br/>let Dog = \"Samba\"<br/>let DOG = \"Bernie\"<br/>println(\"The three dogs are named \\(dog), \\(Dog), and \\(DOG).\")</pre>"}, {"lang": "Tcl", "loc": 4, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> dog <span class=\"st0\">\"Benjamin\"</span><br/><span class=\"kw1\">set</span> Dog <span class=\"st0\">\"Samba\"</span><br/><span class=\"kw1\">set</span> DOG <span class=\"st0\">\"Bernie\"</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"The three dogs are named $dog, $Dog and $DOG\"</span></pre>"}, {"lang": "UNIX Shell", "loc": 4, "block": "<pre class=\"text highlighted_source\">dog=\"Benjamin\"<br/>Dog=\"Samba\"<br/>DOG=\"Bernie\"<br/>echo \"The three dogs are named $dog, $Dog and $DOG.\"</pre>"}, {"lang": "Ursa", "loc": 7, "block": "<pre class=\"text highlighted_source\">&gt; decl string dog Dog DOG<br/>&gt; set dog \"Benjamin\"<br/>&gt; set Dog \"Samba\"<br/>&gt; set DOG \"Bernie\"<br/>&gt; out \"The three dogs are named \" dog \", \"  Dog \", and \" DOG endl console<br/>The three dogs are named Benjamin, Samba, and Bernie<br/>&gt;</pre>"}, {"lang": "XLISP", "loc": 4, "block": "<pre class=\"text highlighted_source\">(SETQ DOG 'BENJAMIN)<br/>(SETQ Dog 'SAMBA)<br/>(SETQ dog 'BERNIE)<br/>(DISPLAY `(THERE IS JUST ONE DOG NAMED ,DOG))</pre>"}, {"lang": "XPL0", "loc": 2, "block": "<pre class=\"text highlighted_source\">10 LET D$=\"Benjamin\"<br/>20 PRINT \"There is just one dog named \";d$</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 2, "block": "<pre class=\"text highlighted_source\">10 LET D$=\"Benjamin\"<br/>20 PRINT \"There is just one dog named \";d$</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">var dog = \"Benjamin\", Dog = \"Samba\", DOG = \"Bernie\";</pre>"}]}