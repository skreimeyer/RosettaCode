{"task": "Host_introspection", "blocks": [{"lang": "Ada", "loc": 8, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> System;       <span class=\"kw3\">use</span> System;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Host_Introspection <span class=\"kw1\">is</span><br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Word size\"</span> &amp; Integer'Image <span class=\"br0\">(</span>Word_Size<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Endianness \"</span> &amp; Bit_Order'Image <span class=\"br0\">(</span>Default_Bit_Order<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Host_Introspection;</pre>"}, {"lang": "ALGOL 68", "loc": 24, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw3\">INT</span> max abs bit <span class=\"sy1\">=</span> <span class=\"kw8\">ABS</span><span class=\"br0\">(</span><span class=\"kw8\">BIN</span> 1 <span class=\"kw11\">SHL</span> 1<span class=\"br0\">)</span><span class=\"sy1\">-</span>1<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> bits per char <span class=\"sy1\">=</span> <span class=\"kw8\">ENTIER</span> <span class=\"br0\">(</span><span class=\"kw24\">ln</span><span class=\"br0\">(</span><span class=\"kw20\">max abs char</span><span class=\"sy1\">+</span>1<span class=\"br0\">)</span><span class=\"sy1\">/</span><span class=\"kw24\">ln</span><span class=\"br0\">(</span>max abs bit<span class=\"sy1\">+</span>1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> bits per int <span class=\"sy1\">=</span> <span class=\"kw8\">ENTIER</span> <span class=\"br0\">(</span>1<span class=\"sy1\">+</span><span class=\"kw24\">ln</span><span class=\"br0\">(</span><span class=\"kw20\">max int</span><span class=\"re1\">+1.0</span><span class=\"br0\">)</span><span class=\"sy1\">/</span><span class=\"kw24\">ln</span><span class=\"br0\">(</span>max abs bit<span class=\"sy1\">+</span>1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"states per bit: \"</span>dl$<span class=\"sy1\">,</span>max abs bit<span class=\"sy1\">+</span>1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"bits per char: \"</span>z<span class=\"sy1\">-</span>dl$<span class=\"sy1\">,</span>bits per char<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"bits per int:  \"</span>z<span class=\"sy1\">-</span>dl$<span class=\"sy1\">,</span>bits per int<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"chars per int: \"</span>z<span class=\"sy1\">-</span>dl$<span class=\"sy1\">,</span>bits per int <span class=\"kw12\">OVER</span> bits per char<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"bits width: \"</span>z<span class=\"sy1\">-</span>dl$<span class=\"sy1\">,</span> <span class=\"kw20\">bits width</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">STRING</span> abcds <span class=\"sy1\">=</span> <span class=\"st0\">\"ABCD\"</span><span class=\"sy1\">;</span><br/><span class=\"kw6\">FILE</span> abcdf<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> abcdi<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">INT</span> <span class=\"kw27\">errno</span> <span class=\"sy1\">:=</span> <span class=\"kw22\">open</span><span class=\"br0\">(</span>abcdf<span class=\"sy1\">,</span> <span class=\"st0\">\"abcd.dat\"</span><span class=\"sy1\">,</span><span class=\"kw21\">stand back channel</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>put<span class=\"br0\">(</span>abcdf<span class=\"sy1\">,</span>abcds<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># output alphabetically #</span><br/>reset<span class=\"br0\">(</span>abcdf<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>get bin<span class=\"br0\">(</span>abcdf<span class=\"sy1\">,</span>abcdi<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># input in word byte order #</span><br/><span class=\"kw3\">STRING</span> int byte order <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> shift <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">BY</span> bits per char <span class=\"kw2\">TO</span> bits per int <span class=\"sy1\">-</span> bits per char <span class=\"kw2\">DO</span><br/>  int byte order <span class=\"sy1\">+:=</span> <span class=\"kw8\">REPR</span><span class=\"br0\">(</span>abcdi <span class=\"kw12\">OVER</span> <span class=\"br0\">(</span>max abs bit<span class=\"sy1\">+</span>1<span class=\"br0\">)</span> <span class=\"sy1\">**</span> shift <span class=\"kw12\">MOD</span> <span class=\"br0\">(</span><span class=\"kw20\">max abs char</span><span class=\"sy1\">+</span>1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"int byte order: \"</span>g<span class=\"sy1\">,</span><span class=\"st0\">\", Hex:\"</span><span class=\"sy1\">,</span><span class=\"re0\">16r8d</span>l$<span class=\"sy1\">,</span>int byte order<span class=\"sy1\">,</span> <span class=\"kw8\">BIN</span> abcdi<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Applesoft BASIC", "loc": 12, "block": "<pre class=\"text highlighted_source\">1  DATA248,169,153,24,105,1,48<br/>2  DATA6,24,251,144,2,251,56<br/>3  DATA216,105,0,133,251,96<br/>4  FOR I = 768 TO 787<br/>5  READ B: POKE I,B: NEXT <br/>6  CALL 768:M =  PEEK (251)<br/>7  PRINT \" WORD SIZE: \";<br/>8  IF  NOT M THEN  PRINT 8<br/>9 M$ = \"HYBRID 8/16\"<br/>10  IF M THEN  PRINT M$<br/>11  PRINT \"ENDIANNESS: \";<br/>12  PRINT \"LITTLE-ENDIAN\"</pre>"}, {"lang": "Babel", "loc": 3, "block": "<pre class=\"text highlighted_source\">main\u00a0: <br/>    { \"Word size: \" &lt;&lt; msize 3 shl\u00a0%d &lt;&lt; \" bits\" cr &lt;&lt; <br/>     \"Endianness: \" &lt;&lt; { endian } { \"little\" } { \"big\" } ifte cr &lt;&lt; }</pre>"}, {"lang": "BBC BASIC", "loc": 7, "block": "<pre class=\"text highlighted_source\">      DIM P% 8<br/>     \u00a0!P% = -1<br/>      I% = 0\u00a0: REPEAT I% += 1\u00a0: UNTIL P%?I%=0<br/>      PRINT \"Word size = \"\u00a0; I% \" bytes\"<br/>     \u00a0!P% = 1<br/>      IF P%?0 = 1 THEN PRINT \"Little-endian\"<br/>      IF P%?(I%-1) = 1 THEN PRINT \"Big-endian\"</pre>"}, {"lang": "C", "loc": 22, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stddef.h&gt; /* for size_t */</span><br/><span class=\"co2\">#include &lt;limits.h&gt; /* for CHAR_BIT */</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> one <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/*<br/>     * Best bet: size_t typically is exactly one word.<br/>     */</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"word size =\u00a0%d bits<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">(</span>CHAR_BIT <span class=\"sy0\">*</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">size_t</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/*<br/>     * Check if the least significant bit is located<br/>     * in the lowest-address byte.<br/>     */</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span>one<span class=\"br0\">)</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"little endian<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"big endian<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 9, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Word size = {0} bytes,\"</span>,<a href=\"http://www.google.com/search?q=sizeof+msdn.microsoft.com\"><span class=\"kw3\">sizeof</span></a><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>BitConverter<span class=\"sy0\">.</span><span class=\"me1\">IsLittleEndian</span><span class=\"br0\">)</span><br/>    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Little-endian.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">else</span><br/>    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Big-endian.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Cach\u00e9 ObjectScript", "loc": 1, "block": "<pre>USER&gt;Write \"Word Size: \"_$Case($System.Version.Is64Bits(), 1: 64,\u00a0: 32)\nWord Size: 32\n\nUSER&gt;Write \"Endianness: \"_$Case($System.Version.IsBigEndian(), 1: \"Big\",\u00a0: \"Little\")\nEndianness: Little</pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>println <span class=\"st0\">\"word size: \"</span> <span class=\"br0\">(</span>System<span class=\"sy0\">/</span>getProperty <span class=\"st0\">\"sun.arch.data.model\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"st0\">\"endianness: \"</span> <span class=\"br0\">(</span>System<span class=\"sy0\">/</span>getProperty <span class=\"st0\">\"sun.cpu.endian\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>machine-type<span class=\"br0\">)</span> <span class=\"co1\">;; =&gt; \"X86-64\" on SBCL here</span></pre>"}, {"lang": "D", "loc": 6, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">system</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  writeln<span class=\"br0\">(</span><span class=\"st0\">\"Word size = \"</span><span class=\"sy0\">,</span> <span class=\"kw4\">size_t</span>.<span class=\"me1\">sizeof</span> <span class=\"sy0\">*</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"st0\">\" bits.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  writeln<span class=\"br0\">(</span>endian <span class=\"sy0\">==</span> Endian.<span class=\"me1\">littleEndian</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"Little\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"Big\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\" endian.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 10, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> HostIntrospection <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> SysUtils<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'word size: '</span><span class=\"sy1\">,</span> <span class=\"kw3\">SizeOf</span><span class=\"br0\">(</span><span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'endianness: little endian'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// Windows is always little endian</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Erlang", "loc": 2, "block": "<pre class=\"erlang highlighted_source\"><span class=\"nu0\">1</span><span class=\"sy3\">&gt;</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"re3\">system_info</span><span class=\"br0\">(</span>wordsize<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"nu0\">4</span></pre>"}, {"lang": "Factor", "loc": 3, "block": "<pre class=\"text highlighted_source\">USING: alien.c-types alien.data io layouts\u00a0;<br/>\"Word size: \" write cell 8 * .<br/>\"Endianness: \" write little-endian? \"little\" \"big\"\u00a0? print</pre>"}, {"lang": "Forth", "loc": 4, "block": "<pre class=\"text highlighted_source\">: endian<br/>  cr 1 cells . .\" address units per cell\"<br/>  s\" ADDRESS-UNIT-BITS\" environment? if cr . .\" bits per address unit\" then<br/>  cr 1 here\u00a0! here <a class=\"__cf_email__\" data-cfemail=\"c8ab88\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> if .\" little\" else .\" big\" then .\"  endian\"\u00a0;</pre>"}, {"lang": "Fortran", "loc": 13, "block": "<pre class=\"fortran highlighted_source\">   <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>   <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">c</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span><br/>   <span class=\"kw3\">equivalence</span> <span class=\"br0\">(</span>c, i<span class=\"br0\">)</span><br/>\u00a0<br/>   WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw4\">bit_size</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"co1\">! number of bits in the default integer type</span><br/>                           <span class=\"co1\">! which may (or may not!) equal the word size</span><br/>   i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>   <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">ichar</span><span class=\"br0\">(</span>c<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>      WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Big Endian\"</span><br/>   <span class=\"kw1\">ELSE</span><br/>     WRITE<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Little Endian\"</span><br/>   <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span></pre>"}, {"lang": "FreeBASIC", "loc": 17, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64 (so little endian, 8 byte word size, expected)</span><br/>\u00a0<br/><span class=\"co1\">' uses intrinsic defines, set by the compiler</span><br/>\u00a0<br/><span class=\"co2\">#Ifdef __FB_64BIT__</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"Host has an 8 byte word size\"</span><br/><span class=\"co2\">#Else</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"Host has a 4 byte word size\"</span><br/><span class=\"co2\">#EndIf</span><br/>\u00a0<br/><span class=\"co2\">#Ifdef __FB_BIGENDIAN__</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"Host is big endian\"</span><br/><span class=\"co2\">#Else</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"Host is little endian\"</span><br/><span class=\"co2\">#EndIf</span><br/>\u00a0<br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>println[\"Word size:  \" + callJava[\"java.lang.System\", \"getProperty\", \"sun.arch.data.model\"]]<br/>println[\"Endianness: \" + callJava[\"java.lang.System\", \"getProperty\", \"sun.cpu.endian\"]]<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 14, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Runtime</span>.<span class=\"me1\">InteropServices</span><br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Diagnostics</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>DllImport<span class=\"br0\">(</span><span class=\"st0\">\"kernel32.dll\"</span>, SetLastError <span class=\"sy0\">=</span> <span class=\"kw1\">true</span>, CallingConvention <span class=\"sy0\">=</span> CallingConvention.<span class=\"me1\">Winapi</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">extern</span> <span class=\"kw4\">bool</span> IsWow64Process<span class=\"br0\">(</span><span class=\"kw4\">nativeint</span> hProcess, <span class=\"kw4\">bool</span> &amp;wow64Process<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> answerHostInfo <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> Is64Bit<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> <span class=\"kw1\">mutable</span> f64Bit <span class=\"sy0\">=</span> false<span class=\"sy0\">;</span><br/>        IsWow64Process<span class=\"br0\">(</span>Process.<span class=\"me1\">GetCurrentProcess</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">Handle</span>, &amp;f64Bit<span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <span class=\"kw3\">ignore</span><br/>        f64Bit<br/>    <span class=\"kw1\">let</span> IsLittleEndian<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> BitConverter.<span class=\"me1\">IsLittleEndian</span><br/>    <span class=\"br0\">(</span>IsLittleEndian<span class=\"br0\">(</span><span class=\"br0\">)</span>, Is64Bit<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Go", "loc": 71, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>\t<span class=\"st0\">\"fmt\"</span><br/>\t<span class=\"st0\">\"io/ioutil\"</span><br/>\t<span class=\"st0\">\"runtime\"</span><br/>\t<span class=\"st0\">\"strconv\"</span><br/>\t<span class=\"st0\">\"strings\"</span><br/>\t<span class=\"st0\">\"unsafe\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>runtime<span class=\"sy3\">.</span>Version<span class=\"sy1\">(),</span> runtime<span class=\"sy3\">.</span>GOOS<span class=\"sy1\">,</span> runtime<span class=\"sy3\">.</span>GOARCH<span class=\"sy1\">)</span><br/>\u00a0<br/>\t<span class=\"co1\">// Inspect a uint32 variable to determine endianness.</span><br/>\tx <span class=\"sy2\">:=</span> <span class=\"kw4\">uint32</span><span class=\"sy1\">(</span><span class=\"nu0\">0x01020304</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">switch</span> <span class=\"sy3\">*</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span><span class=\"kw4\">byte</span><span class=\"sy1\">)(</span>unsafe<span class=\"sy3\">.</span>Pointer<span class=\"sy1\">(</span>&amp;x<span class=\"sy1\">))</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">case</span> <span class=\"nu0\">0x01</span><span class=\"sy1\">:</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"big endian\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">case</span> <span class=\"nu0\">0x04</span><span class=\"sy1\">:</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"little endian\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"mixed endian?\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">// Usually one cares about the size the executible was compiled for</span><br/>\t<span class=\"co1\">// rather than the actual underlying host's size.</span><br/>\u00a0<br/>\t<span class=\"co1\">// There are several ways of determining the size of an int/uint.</span><br/>\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"         strconv.IntSize =\"</span><span class=\"sy1\">,</span> strconv<span class=\"sy3\">.</span><span class=\"me1\">IntSize</span><span class=\"sy1\">)</span><br/>\t<span class=\"co1\">// That uses the following definition we can also be done by hand</span><br/>\tintSize <span class=\"sy2\">:=</span> <span class=\"nu0\">32</span> &lt;&lt; <span class=\"kw4\">uint</span><span class=\"sy1\">(</span><span class=\"sy3\">^</span>uint<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span>&gt;&gt;<span class=\"nu0\">63</span><span class=\"sy1\">)</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"32 &lt;&lt; uint(^uint(0)&gt;&gt;63) =\"</span><span class=\"sy1\">,</span> intSize<span class=\"sy1\">)</span><br/>\u00a0<br/>\t<span class=\"co1\">// With Go\u00a01.0, 64-bit architectures had 32-bit int and 64-bit</span><br/>\t<span class=\"co1\">// uintptr. This was changed in Go\u00a01.1. In general it would</span><br/>\t<span class=\"co1\">// still be possible that int and uintptr (the type large enough</span><br/>\t<span class=\"co1\">// to hold the bit pattern of any pointer) are of different sizes.</span><br/>\t<span class=\"kw1\">const</span> bitsPerByte <span class=\"sy2\">=</span> <span class=\"nu0\">8</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"  sizeof(int)     in bits:\"</span><span class=\"sy1\">,</span> unsafe<span class=\"sy3\">.</span>Sizeof<span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">))</span><span class=\"sy3\">*</span>bitsPerByte<span class=\"sy1\">)</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"  sizeof(uintptr) in bits:\"</span><span class=\"sy1\">,</span> unsafe<span class=\"sy3\">.</span>Sizeof<span class=\"sy1\">(</span><span class=\"kw4\">uintptr</span><span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">))</span><span class=\"sy3\">*</span>bitsPerByte<span class=\"sy1\">)</span><br/>\t<span class=\"co1\">// If we really want to know the architecture size the executable was</span><br/>\t<span class=\"co1\">// compiled for and not the size of int it safest to take the max of those.</span><br/>\tarchSize <span class=\"sy2\">:=</span> unsafe<span class=\"sy3\">.</span>Sizeof<span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">))</span><br/>\t<span class=\"kw1\">if</span> psize <span class=\"sy2\">:=</span> unsafe<span class=\"sy3\">.</span>Sizeof<span class=\"sy1\">(</span><span class=\"kw4\">uintptr</span><span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">));</span> psize &gt; archSize <span class=\"sy1\">{</span><br/>\t\tarchSize <span class=\"sy2\">=</span> psize<br/>\t<span class=\"sy1\">}</span><br/>\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"  compiled with word size:\"</span><span class=\"sy1\">,</span> archSize<span class=\"sy3\">*</span>bitsPerByte<span class=\"sy1\">)</span><br/>\u00a0<br/>\t<span class=\"co1\">// There are some *very* unportable ways to attempt to get the actual</span><br/>\t<span class=\"co1\">// underlying hosts' word size.</span><br/>\t<span class=\"co1\">// Inspect cpuinfo to determine word size (some unix-like OS' only).</span><br/>\tc<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> ioutil<span class=\"sy3\">.</span><span class=\"me1\">ReadFile</span><span class=\"sy1\">(</span><span class=\"st0\">\"/proc/cpuinfo\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>\t\t<span class=\"kw1\">return</span><br/>\t<span class=\"sy1\">}</span><br/>\tls <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Split<span class=\"sy1\">(</span><span class=\"kw4\">string</span><span class=\"sy1\">(</span>c<span class=\"sy1\">),</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> l <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> ls <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> strings<span class=\"sy3\">.</span>HasPrefix<span class=\"sy1\">(</span>l<span class=\"sy1\">,</span> <span class=\"st0\">\"flags\"</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> f <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> strings<span class=\"sy3\">.</span>Fields<span class=\"sy1\">(</span>l<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\t\t\t<span class=\"kw1\">if</span> f <span class=\"sy3\">==</span> <span class=\"st0\">\"lm\"</span> <span class=\"sy1\">{</span> <span class=\"co1\">// \"long mode\"</span><br/>\t\t\t\t\tfmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"64 bit word size\"</span><span class=\"sy1\">)</span><br/>\t\t\t\t\t<span class=\"kw1\">return</span><br/>\t\t\t\t<span class=\"sy1\">}</span><br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t\tfmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"32 bit word size\"</span><span class=\"sy1\">)</span><br/>\t\t\t<span class=\"kw1\">return</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 2, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"word size:  ${System.getProperty('sun.arch.data.model')}\"</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"endianness: ${System.getProperty('sun.cpu.endian')}\"</span></pre>"}, {"lang": "Haskell", "loc": 8, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Bits<br/><span class=\"kw1\">import</span> ADNS<span class=\"sy0\">.</span>Endian <span class=\"co1\">-- http://hackage.haskell.org/package/hsdns</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Word size: \"</span> <span class=\"sy0\">++</span> bitsize<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"Endianness: \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> endian<br/>      <span class=\"kw1\">where</span><br/>        bitsize <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">$</span> bitSize <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:undefined\"><span class=\"kw3\">undefined</span></a> <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 6, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"nu0\">0</span> <span class=\"sy0\">=</span> <span class=\"kw4\">ishift</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"little\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"big\"</span><span class=\"sy0\">,</span><span class=\"st0\">\" endian\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw4\">match</span><span class=\"br0\">(</span><span class=\"st0\">\"flags\"</span><span class=\"sy0\">,</span>line <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span><span class=\"kw4\">open</span><span class=\"br0\">(</span><span class=\"st0\">\"/proc/cpuinfo\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span>    <span class=\"co1\"># Unix-like only</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"kw4\">find</span><span class=\"br0\">(</span><span class=\"st0\">\" lm \"</span><span class=\"sy0\">,</span>line<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"nu0\">64</span> <span class=\"kw1\">else</span> <span class=\"nu0\">32</span><span class=\"sy0\">,</span><span class=\"st0\">\" bits per word\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Cannot determine word size.\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   IF64 {<span class=\"nu0\">32</span> <span class=\"nu0\">64</span><br/><span class=\"nu0\">64</span></pre>"}, {"lang": "Java", "loc": 8, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.nio.ByteOrder</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ShowByteOrder <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\">// Print \"BIG_ENDIAN\" or \"LITTLE_ENDIAN\".</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>ByteOrder.<span class=\"me1\">nativeOrder</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>print(\"This host's word size is \", WORD_SIZE, \".\")<br/>if ENDIAN_BOM == 0x04030201<br/>    println(\"And it is a little-endian machine.\")<br/>elseif ENDIAN_BOM == 0x01020304<br/>    println(\"And it is a big-endian machine.\")<br/>else<br/>    println(\"ENDIAN_BOM = \", ENDIAN_BOM, \", which is confusing\")<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 6, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Word size\u00a0: ${System.getProperty(\"</span>sun.<span class=\"me1\">arch</span>.<span class=\"me1\">data</span>.<span class=\"me1\">model</span><span class=\"st0\">\")} bits\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Endianness: ${System.getProperty(\"</span>sun.<span class=\"me1\">cpu</span>.<span class=\"me1\">endian</span><span class=\"st0\">\")}-endian\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 2, "block": "<pre class=\"text highlighted_source\">If[$ByteOrdering &gt; 0, Print[\"Big endian\"], Print[\"Little endian\" ]] <br/>$SystemWordLength \"bits\"</pre>"}, {"lang": "MATLAB / Octave", "loc": 18, "block": "<pre class=\"matlab highlighted_source\">  <span class=\"kw1\">function</span> <span class=\"br0\">[</span>endian<span class=\"br0\">]</span>=endian<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    fid=tmpfile<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fwrite.html\"><span class=\"kw2\">fwrite</span></a><span class=\"br0\">(</span>fid,<span class=\"nu0\">1</span>:<span class=\"nu0\">8</span>,<span class=\"co2\">'uint8'</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fseek.html\"><span class=\"kw2\">fseek</span></a><span class=\"br0\">(</span>fid,<span class=\"nu0\">0</span>,<span class=\"co2\">'bof'</span><span class=\"br0\">)</span>;<br/>    t=<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fread.html\"><span class=\"kw2\">fread</span></a><span class=\"br0\">(</span>fid,<span class=\"nu0\">8</span>,<span class=\"co2\">'int8'</span><span class=\"br0\">)</span>;<br/>    i8=<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'%02X'</span>,t<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fseek.html\"><span class=\"kw2\">fseek</span></a><span class=\"br0\">(</span>fid,<span class=\"nu0\">0</span>,<span class=\"co2\">'bof'</span><span class=\"br0\">)</span>;<br/>    t=<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fread.html\"><span class=\"kw2\">fread</span></a><span class=\"br0\">(</span>fid,<span class=\"nu0\">4</span>,<span class=\"co2\">'int16'</span><span class=\"br0\">)</span>;<br/>    i16=<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'%04X'</span>,t<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fclose.html\"><span class=\"kw2\">fclose</span></a><span class=\"br0\">(</span>fid<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"kw1\">if</span> <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/strcmp.html\"><span class=\"kw2\">strcmp</span></a><span class=\"br0\">(</span>i8,i16<span class=\"br0\">)</span> endian=<span class=\"co2\">'big'</span>;<br/>    <span class=\"kw1\">else</span> endian=<span class=\"co2\">'little'</span>;<br/>    <span class=\"kw1\">end</span>;<br/>\u00a0</pre>"}, {"lang": "Modula-3", "loc": 12, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> Host <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO<span class=\"sy0\">,</span> Fmt<span class=\"sy0\">,</span> Word<span class=\"sy0\">,</span> Swap;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"Word Size: \"</span> &amp; Fmt.<span class=\"me1\">Int</span><span class=\"br0\">(</span>Word.<span class=\"me1\">Size</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">IF</span> Swap.<span class=\"me1\">endian</span> <span class=\"sy0\">=</span> Swap.<span class=\"me1\">Endian</span>.<span class=\"me1\">Big</span> <span class=\"kw1\">THEN</span><br/>    IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"Endianness: Big<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">ELSE</span><br/>    IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"Endianness: Little<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span>;<br/><span class=\"kw1\">END</span> Host.</pre>"}, {"lang": "NetRexx", "loc": 9, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref savelog symbols nobinary<br/>\u00a0<br/>wordSize = System.<span class=\"me0\">getProperty</span><span class=\"br0\">(</span><span class=\"st0\">'sun.arch.data.model'</span><span class=\"br0\">)</span><br/>endian   = System.<span class=\"me0\">getProperty</span><span class=\"br0\">(</span><span class=\"st0\">'sun.cpu.endian'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">' word size:'</span> wordSize<br/><span class=\"kw1\">say</span> <span class=\"st0\">'endianness:'</span> endian<br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 3, "block": "<pre class=\"text highlighted_source\">import math<br/>echo cpuEndian<br/>echo round(log2(float(int.high))) + 1</pre>"}, {"lang": "Objective-C", "loc": 11, "block": "<pre class=\"objc highlighted_source\"><span class=\"kw1\">switch</span> <span class=\"br0\">(</span>NSHostByteOrder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">case</span> NS_BigEndian<span class=\"sy0\">:</span><br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"Big Endian\"</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw2\">break</span>;<br/>  <span class=\"kw1\">case</span> NS_LittleEndian<span class=\"sy0\">:</span><br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"Little Endian\"</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw2\">break</span>;<br/>  <span class=\"kw1\">case</span> NS_UnknownByteOrder<span class=\"sy0\">:</span><br/>    NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, <span class=\"co3\">@</span><span class=\"st0\">\"endianness unknown\"</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw2\">break</span>;<br/><span class=\"br0\">}</span> </pre>"}, {"lang": "OCaml", "loc": 2, "block": "<pre class=\"ocaml highlighted_source\"><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%d\\n\"</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>word_size<span class=\"sy0\">;</span> <span class=\"co1\">(* Print word size *)</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%s\\n\"</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>os_type<span class=\"sy0\">;</span>   <span class=\"co1\">(* Print operating system *)</span></pre>"}, {"lang": "Pascal", "loc": 9, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> HostIntrospection<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Pointer size: '</span><span class=\"sy1\">,</span> SizeOf<span class=\"br0\">(</span><span class=\"kw4\">Pointer</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">' byte, i.e. '</span><span class=\"sy1\">,</span> SizeOf<span class=\"br0\">(</span><span class=\"kw4\">Pointer</span><span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"st0\">' bit.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\">{ NtoBE converts from native endianess to big endianess }</span><br/>  <span class=\"kw1\">if</span> <span class=\"nu0\">23453</span> <span class=\"sy3\">=</span> NtoBE<span class=\"br0\">(</span><span class=\"nu0\">23453</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'This host is big endian.'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'This host is little endian.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> Config<span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"UV size: $Config{uvsize}, byte order: $Config{byteorder}<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> experimental <span class=\"sy0\">:</span><span class=\"kw3\">pack</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$*VM</span><span class=\"sy0\">.</span><span class=\"me1\">config</span><span class=\"sy0\">&lt;</span>ptr_size<span class=\"sy0\">&gt;;</span><br/><span class=\"kw3\">say</span> <span class=\"kw3\">pack</span><span class=\"br0\">(</span><span class=\"st_h\">'N'</span><span class=\"sy0\">,</span> <span class=\"nu0\">123456789</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">unpack</span><span class=\"br0\">(</span><span class=\"st_h\">'V'</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">123456789</span> <span class=\"sy0\">??</span> <span class=\"st_h\">'big-endian'</span> <span class=\"sy0\">!!</span> <span class=\"st_h\">'little-endian'</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 16, "block": "<pre class=\"text highlighted_source\">function endianness()<br/>atom m4 = allocate(4)<br/>    poke4(m4,#01020304)<br/>    integer b1 = peek1s(m4)<br/>    free(m4)<br/>    if b1=#01 then<br/>        return \"big-endian\"<br/>    elsif b1=#04 then<br/>        return \"little-endian\"<br/>    else<br/>        return \"???\"<br/>    end if<br/>end function<br/>\u00a0<br/>printf(1,\"Endianness:\u00a0%s\\n\",{endianness()})<br/>printf(1,\"Word size:\u00a0%d bytes/%d bits\\n\",{machine_word(),machine_bits()})</pre>"}, {"lang": "PicoLisp", "loc": 12, "block": "<pre class=\"text highlighted_source\">(in (cmd)                              # Inspect ELF header<br/>   (rd 4)                              # Skip \"7F\" and 'E', 'L' and 'F'<br/>   (prinl<br/>      (case (rd 1)                     # Get EI_CLASS byte<br/>         (1 \"32 bits\")<br/>         (2 \"64 bits\")<br/>         (T \"Bad EI_CLASS\") ) )<br/>   (prinl<br/>      (case (rd 1)                     # Get EI_DATA byte<br/>         (1 \"Little endian\")<br/>         (2 \"Big endian\")<br/>         (T \"Bad EI_DATA\") ) ) )</pre>"}, {"lang": "PL/I", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>details: procedure options (main); /* 6 July 2012 */<br/>\tdeclare x float, i fixed binary initial (1);<br/>\u00a0<br/>\tput skip list ('word size=', length(unspec(x)));<br/>\u00a0<br/>\tif unspec(i) = '0000000000000001'b then<br/>\t\tput skip list ('Big endian');<br/>\telse<br/>\t\tput skip list ('Little endian');<br/>\u00a0<br/>end details;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 7, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw1\">Write-Host</span> Word Size: <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">Get-WMIObject</span> Win32_Processor<span class=\"br0\">)</span>.DataWidth<span class=\"br0\">)</span><br/><span class=\"kw1\">Write-Host</span> <span class=\"kw5\">-NoNewLine</span> <span class=\"st0\">\"Endianness: \"</span><br/><span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>BitConverter<span class=\"br0\">]</span>::IsLittleEndian<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">Write-Host</span> Little<span class=\"sy0\">-</span>Endian<br/><span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">Write-Host</span> Big<span class=\"sy0\">-</span>Endian<br/><span class=\"br0\">}</span></pre>"}, {"lang": "PureBasic", "loc": 24, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Enumeration</span> <br/>  #LittleEndian<br/>  #BigEndian<br/><span class=\"kw1\">EndEnumeration</span><br/>\u00a0<br/><span class=\"kw1\">ProcedureDLL</span> EndianTest<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> Endian <span class=\"sy0\">=</span> #LittleEndian<br/>  <span class=\"kw1\">Protected</span> dummy.l<span class=\"sy0\">=</span> 'ABCD'<br/>  <span class=\"kw1\">If</span> <span class=\"st0\">\"A\"</span><span class=\"sy0\">=</span><span class=\"kw2\">Chr</span><span class=\"br0\">(</span>PeekA<span class=\"br0\">(</span>@dummy<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    Endian<span class=\"sy0\">=</span>#BigEndian<br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> Endian  <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">;- *** Start of test code</span><br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  <br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Your word size is \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span><span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Integer<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><span class=\"st0\">\" bytes,\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Select</span> EndianTest<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Case</span> #LittleEndian<br/>      <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"and you use Little Endian.\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Default</span><br/>      <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"and you use Big Endian.\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndSelect</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 14, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> <span class=\"kw3\">platform</span><span class=\"sy0\">,</span> <span class=\"kw3\">sys</span><span class=\"sy0\">,</span> <span class=\"kw3\">socket</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw3\">platform</span>.<span class=\"me1\">architecture</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"st0\">'64bit'</span><span class=\"sy0\">,</span> <span class=\"st0\">'ELF'</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw3\">platform</span>.<span class=\"me1\">machine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"st0\">'x86_64'</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw3\">platform</span>.<span class=\"me1\">node</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"st0\">'yourhostname'</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw3\">platform</span>.<span class=\"me1\">system</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"st0\">'Linux'</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw3\">sys</span>.<span class=\"me1\">byteorder</span><br/>little<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw3\">socket</span>.<span class=\"me1\">gethostname</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"st0\">'yourhostname'</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span></pre>"}, {"lang": "R", "loc": 3, "block": "<pre class=\"text highlighted_source\">8 * .Machine$sizeof.long # e.g. 32<br/>Endianness<br/>&lt;lang R&gt;.Platform$endian         # e.g. \"little\"</pre>"}, {"lang": "Racket", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket/base<br/>\u00a0<br/>(printf \"Word size: ~a\\n\" (system-type 'word))<br/>(printf \"Endianness: ~a\\n\" (if (system-big-endian?) 'big 'little))<br/>\u00a0</pre>"}, {"lang": "Retro", "loc": 2, "block": "<pre class=\"text highlighted_source\">needs variations'<br/>^variations'size</pre>"}, {"lang": "REXX", "loc": 6, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program to examine which operating system that REXX is running under. */</span><br/>\u00a0<br/><span class=\"kw1\">parse</span> <span class=\"kw2\">source</span> opSys howInvoked pathName<br/>\u00a0<br/><span class=\"coMULTI\">/*where  opSys  will indicate which operating system REXX is running under, and */</span><br/><span class=\"coMULTI\">/*from that, one could make assumptions what the wordsize is, etc.              */</span></pre>"}, {"lang": "Ruby", "loc": 10, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># We assume that a Fixnum occupies one machine word.</span><br/><span class=\"co1\"># Fixnum#size returns bytes (1 byte = 8 bits).</span><br/>word_size = <span class=\"nu0\">42</span>.<span class=\"me1\">size</span> <span class=\"sy0\">*</span> <span class=\"nu0\">8</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"Word size: #{word_size} bits\"</span><br/>\u00a0<br/><span class=\"co1\"># Array#pack knows the native byte order. We pack 1 as a 16-bit integer,</span><br/><span class=\"co1\"># then unpack bytes: [0, 1] is big endian, [1, 0] is little endian.</span><br/>bytes = <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">pack</span><span class=\"br0\">(</span><span class=\"st0\">'S'</span><span class=\"br0\">)</span>.<span class=\"me1\">unpack</span><span class=\"br0\">(</span><span class=\"st0\">'C*'</span><span class=\"br0\">)</span><br/>byte_order = <span class=\"br0\">(</span>bytes<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> == <span class=\"nu0\">0</span>\u00a0? <span class=\"st0\">'big'</span>\u00a0: <span class=\"st0\">'little'</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">' endian'</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"Byte order: #{byte_order}\"</span></pre>"}, {"lang": "Scala", "loc": 7, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">nio</span>.<span class=\"me1\">ByteOrder</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> ShowByteOrder <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  println<span class=\"br0\">(</span>ByteOrder.<span class=\"me1\">nativeOrder</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Word size: ${System.getProperty(\"</span>sun.<span class=\"me1\">arch</span>.<span class=\"me1\">data</span>.<span class=\"me1\">model</span><span class=\"st0\">\")}\"</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Endianness: ${System.getProperty(\"</span>sun.<span class=\"me1\">cpu</span>.<span class=\"me1\">endian</span><span class=\"st0\">\")}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 8, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> host<span class=\"sy0\">-</span>info<br/>  <span class=\"br0\">(</span><span class=\"kw1\">begin</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"Endianness: \"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span>machine<span class=\"sy0\">-</span>byte<span class=\"sy0\">-</span>order<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"Word Size: \"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>fixnum? <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"nu0\">2</span> <span class=\"nu0\">33</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">64</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 13, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"cc_conf.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(\"Word size: \" &lt;&amp; ccConf.POINTER_SIZE);<br/>    write(\"Endianness: \");<br/>    if ccConf.LITTLE_ENDIAN_INTTYPE then<br/>      writeln(\"Little endian\");<br/>    else<br/>      writeln(\"Big endian\");<br/>    end if;<br/>  end func;</pre>"}, {"lang": "Slate", "loc": 2, "block": "<pre class=\"text highlighted_source\">inform: 'Endianness: '\u00a0; Platform current endianness.<br/>inform: 'Word Size: '\u00a0; (Platform current bytesPerWord * 8) printString.</pre>"}, {"lang": "Tcl", "loc": 10, "block": "<pre class=\"tcl highlighted_source\"><span class=\"sy0\">%</span> parray tcl_platform<br/>tcl_platform<span class=\"br0\">(</span>byteOrder<span class=\"br0\">)</span>   = littleEndian<br/>tcl_platform<span class=\"br0\">(</span>machine<span class=\"br0\">)</span>     = intel<br/>tcl_platform<span class=\"br0\">(</span>os<span class=\"br0\">)</span>          = Windows NT<br/>tcl_platform<span class=\"br0\">(</span>osVersion<span class=\"br0\">)</span>   = <span class=\"nu0\">5.1</span><br/>tcl_platform<span class=\"br0\">(</span>platform<span class=\"br0\">)</span>    = windows<br/>tcl_platform<span class=\"br0\">(</span>pointerSize<span class=\"br0\">)</span> = <span class=\"nu0\">4</span><br/>tcl_platform<span class=\"br0\">(</span>threaded<span class=\"br0\">)</span>    = <span class=\"nu0\">1</span><br/>tcl_platform<span class=\"br0\">(</span>user<span class=\"br0\">)</span>        = glennj<br/>tcl_platform<span class=\"br0\">(</span>wordSize<span class=\"br0\">)</span>    = <span class=\"nu0\">4</span></pre>"}, {"lang": "TI-89 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">Disp \"32-bit big-endian\"</pre>"}, {"lang": "TXR", "loc": 1, "block": "<pre>This is the TXR Lisp interactive listener of TXR 177.\nUse the\u00a0:quit command or type Ctrl-D on empty line to exit.\n1&gt; (sizeof (ptr char))\n8\n2&gt; (sizeof int)\n4</pre>"}, {"lang": "XPL0", "loc": 10, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;          \\intrinsic 'code' declarations<br/>int  A, B;<br/>char C;<br/>[IntOut(0, @<a class=\"__cf_email__\" data-cfemail=\"c88ae58889\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>);  CrLf(0);    \\word size = integer size<br/>A:= $1234;<br/>C:= @A;<br/>Text(0, if C(0)=$34 then \"Little\" else \"Big\");<br/>Text(0, \" endian<br/>\");<br/>]</pre>"}]}