{"task": "Inverted_syntax", "blocks": [{"lang": "Ada", "loc": 5, "block": "<pre class=\"ada highlighted_source\">Foo\u00a0:= <span class=\"nu0\">1</span>;<br/><span class=\"kw1\">loop</span><br/>   <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Foo = <span class=\"nu0\">10</span>;<br/>   Foo\u00a0:= Foo + <span class=\"nu0\">1</span>;<br/><span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;</pre>"}, {"lang": "ALGOL 68", "loc": 29, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># Inverted assignment                                                                       #</span><br/><span class=\"coMULTI\"># Assignment in Algol 68 is via \":=\" which is automaically provided for all modes (types)   #</span><br/><span class=\"coMULTI\"># However we could define e.g. \"=:\" as an inverted assignment operator but we would need to #</span><br/><span class=\"coMULTI\"># define a separate operator for each mode, e.g. for integers and strings:                  #</span><br/><span class=\"kw4\">PRIO</span> <span class=\"sy1\">=:</span> <span class=\"sy1\">=</span> 1<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   <span class=\"sy1\">=:</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span>    <span class=\"kw4\">REF</span> <span class=\"kw3\">INT</span>    b <span class=\"br0\">)</span><span class=\"kw4\">REF</span> <span class=\"kw3\">INT</span><span class=\"sy1\">:</span>    b <span class=\"sy1\">:=</span> a<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   <span class=\"sy1\">=:</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> a<span class=\"sy1\">,</span> <span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> b <span class=\"br0\">)</span><span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> b <span class=\"sy1\">:=</span> a<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   <span class=\"sy1\">=:</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">CHAR</span>   a<span class=\"sy1\">,</span> <span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span> b <span class=\"br0\">)</span><span class=\"kw4\">REF</span> <span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> b <span class=\"sy1\">:=</span> a<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> a<span class=\"sy1\">,</span> b<span class=\"sy1\">;</span> <span class=\"kw3\">STRING</span> s<span class=\"sy1\">;</span><br/>    1 <span class=\"sy1\">=:</span> a<span class=\"sy1\">;</span><br/>a <span class=\"sy1\">+</span> 1 <span class=\"sy1\">=:</span> b<span class=\"sy1\">;</span><br/>  <span class=\"st0\">\"?\"</span> <span class=\"sy1\">=:</span> s<span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> s<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># There is one standard inverted assignment operator: +=: or PLUSTO which prepends a string #</span><br/><span class=\"coMULTI\"># to another:                                                                               #</span><br/><span class=\"st0\">\"bc\"</span>  <span class=\"sy1\">=:</span> s<span class=\"sy1\">;</span><br/><span class=\"st0\">\"b\"</span>  <span class=\"sy1\">+=:</span> s<span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> s<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># Inverted Conditional Expressions                                                          #</span><br/><span class=\"coMULTI\"># We could define an operator called WHEN perhaps, that would execute its left operand if   #</span><br/><span class=\"coMULTI\"># the right operand was TRUE. However the left operand would need to be a PROC VOID so the  #</span><br/><span class=\"coMULTI\"># syntax would not be as convientent as the standard IF-THEN-FI construct. E.g.:            #</span><br/><span class=\"kw4\">PRIO</span> WHEN <span class=\"sy1\">=</span> 1<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span>   WHEN <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">PROC</span> <span class=\"kw3\">VOID</span> code<span class=\"sy1\">,</span> <span class=\"kw3\">BOOL</span> test <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw2\">IF</span> test <span class=\"kw2\">THEN</span> code <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"br0\">(</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"NO\"</span><span class=\"sy1\">,</span>  <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> WHEN a <span class=\"sy1\">=</span> b<span class=\"sy1\">;</span>  <span class=\"coMULTI\"># the anonymous PROC VOID is not called  #</span><br/><span class=\"br0\">(</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"yes\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> WHEN a <span class=\"sy1\">/=</span> b  <span class=\"coMULTI\"># the anonymous PROC VOID is called      #</span></pre>"}, {"lang": "Bracmat", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>double=.!arg+!arg;<br/>\u00a0<br/>(=.!arg+!arg):(=?double); { inverted assignment syntax, same result as above. }<br/>\u00a0</pre>"}, {"lang": "C", "loc": 18, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#define otherwise       do { register int _o = 2; do { switch (_o) {  case 1:</span><br/><span class=\"co2\">#define given(Mc)      \u00a0;case 0: break; case 2: _o =\u00a0!!(Mc); continue; } break; } while (1); } while (0)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> foo<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        otherwise  a <span class=\"sy0\">=</span> <span class=\"nu0\">4</span> given <span class=\"br0\">(</span>foo<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 22, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw2\">class</span> invertedAssign <span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> data<span class=\"sy4\">;</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  invertedAssign<span class=\"br0\">(</span><span class=\"kw4\">int</span> data<span class=\"br0\">)</span><span class=\"sy4\">:</span>data<span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw4\">int</span> getData<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">return</span> data<span class=\"sy4\">;</span><span class=\"br0\">}</span><br/>  <span class=\"kw4\">void</span> operator<span class=\"sy1\">=</span><span class=\"br0\">(</span>invertedAssign<span class=\"sy3\">&amp;</span> other<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>    other.<span class=\"me1\">data</span> <span class=\"sy1\">=</span> this<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>data<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  invertedAssign a <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>  invertedAssign b <span class=\"sy1\">=</span> <span class=\"nu0\">42</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a.<span class=\"me1\">getData</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> b.<span class=\"me1\">getData</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  b <span class=\"sy1\">=</span> a<span class=\"sy4\">;</span><br/>\u00a0<br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> a.<span class=\"me1\">getData</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">' '</span> <span class=\"sy1\">&lt;&lt;</span> b.<span class=\"me1\">getData</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 12, "block": "<pre class=\"clojure highlighted_source\"><span class=\"co1\">; normal</span><br/><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"st0\">\"Math works.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; inverted</span><br/><span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"st0\">\"Math still works.\"</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; a la Haskell</span><br/><span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">print</span> a <span class=\"st0\">\" is \"</span> b<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>a 'homoiconicity<br/>           b 'awesome<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 8, "block": "<pre class=\"coffeescript highlighted_source\">alert <span class=\"st0\">\"hello\"</span> <span class=\"kw1\">if</span> <span class=\"kw4\">true</span><br/>alert <span class=\"st0\">\"hello again\"</span> <span class=\"kw1\">unless</span> <span class=\"kw4\">false</span> <span class=\"co1\"># the same as the above; unless is a negated if.</span><br/>\u00a0<br/>idx = <span class=\"nu0\">0</span><br/>arr = <span class=\"br0\">(</span><span class=\"sy0\">++</span>idx <span class=\"kw1\">while</span> idx <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"co1\"># arr is [1,2,3,4,5,6,7,8,9,10]</span><br/>\u00a0<br/>idx = <span class=\"nu0\">0</span><br/>arr = <span class=\"br0\">(</span><span class=\"sy0\">++</span>idx <span class=\"kw1\">until</span> idx <span class=\"kw2\">is</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"co1\"># same as above; until is an inverted while.</span></pre>"}, {"lang": "Common Lisp", "loc": 10, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>eval-<span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">compile-toplevel</span> <span class=\"sy0\">:</span><span class=\"me1\">load-toplevel</span> <span class=\"sy0\">:</span><span class=\"me1\">execute</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">defun</span> unrev-syntax <span class=\"br0\">(</span>form<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">atom</span> form<span class=\"br0\">)</span> form<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null</span> <span class=\"br0\">(</span><span class=\"kw1\">cddr</span> form<span class=\"br0\">)</span><span class=\"br0\">)</span> form<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>t <span class=\"br0\">(</span>destructuring-bind <span class=\"br0\">(</span>oper <span class=\"sy0\">&amp;</span>rest args<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> form<span class=\"br0\">)</span><br/>           `<span class=\"br0\">(</span><span class=\"sy0\">,</span>oper <span class=\"sy0\">,</span>@<span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'unrev-syntax args<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> rprogn <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>body forms<span class=\"br0\">)</span><br/>  `<span class=\"br0\">(</span><span class=\"kw1\">progn</span> <span class=\"sy0\">,</span>@<span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'unrev-syntax forms<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 14, "block": "<pre class=\"d highlighted_source\"><span class=\"co5\">#!/usr/bin/rdmd</span><br/>\u00a0<br/><span class=\"kw2\">import</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"st0\">\"Hello, World\"</span>.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span><span class=\"st0\">\"Cleanliness\"</span>.<span class=\"me1\">startsWith</span><span class=\"br0\">(</span><span class=\"st0\">\"Clean\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> r <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">7</span><span class=\"br0\">]</span><br/>        .<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        .<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>r.<span class=\"me1\">equal</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">16</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 26, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; use reader macros to transform (a OP b) into (OP b a)</span><br/>\u00a0<br/><span class=\"br0\">(</span>lib 'match<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>macro invert<span class=\"sy0\">-=</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;-</span> b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">set!</span> b a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define<span class=\"sy0\">-</span>macro invert<span class=\"sy0\">-</span><span class=\"kw1\">IF</span> <span class=\"br0\">(</span>a '<span class=\"kw1\">IF</span> b<span class=\"br0\">)</span> <span class=\"br0\">(</span>when b a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> raining #f<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>#t <span class=\"sy0\">&lt;-</span> raining<span class=\"br0\">)</span><br/>raining<br/>    \u2192 #t<br/><span class=\"br0\">(</span>'umbrella<span class=\"sy0\">-</span>need <span class=\"kw1\">IF</span> raining<span class=\"br0\">)</span><br/>    \u2192 umbrella<span class=\"sy0\">-</span>need<br/>\u00a0<br/><span class=\"br0\">(</span>#f <span class=\"sy0\">&lt;-</span> raining<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>'umbrella<span class=\"sy0\">-</span>need <span class=\"kw1\">IF</span> raining<span class=\"br0\">)</span><br/>    \u2192 #f<br/>\u00a0<br/><span class=\"co1\">;; debug mode</span><br/><span class=\"br0\">(</span>debug <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>'umbrella<span class=\"sy0\">-</span>need <span class=\"kw1\">IF</span> raining<span class=\"br0\">)</span><br/>\ud83d\udca1 <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>     invert<span class=\"sy0\">-</span><span class=\"kw1\">IF</span> \u2192 <span class=\"br0\">(</span>'umbrella<span class=\"sy0\">-</span>need <span class=\"kw1\">IF</span> raining<span class=\"br0\">)</span><br/>compiled\u00a0:: <span class=\"br0\">(</span>#when raining 'umbrella<span class=\"sy0\">-</span>need<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">1 1 +\u00a0! 2<br/>[ + 1 1 ] reverse call\u00a0! 2<br/>{ 1 2 3 4 5 } [ sq ] map\u00a0! { 1 4 9 16 25 }<br/>[ map [ sq ] { 1 2 3 4 5 } ] reverse call\u00a0! { 1 4 9 16 25 }</pre>"}, {"lang": "Fortran", "loc": 1, "block": "<pre class=\"fortran highlighted_source\">      INQUIRE<span class=\"br0\">(</span><span class=\"kw1\">FILE</span> <span class=\"sy0\">=</span> FILENAME<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>L<span class=\"br0\">)</span>, <span class=\"kw1\">EXIST</span> <span class=\"sy0\">=</span> MAYBE, <span class=\"kw1\">ERR</span> <span class=\"sy0\">=</span> <span class=\"nu0\">666</span>, <span class=\"kw1\">IOSTAT</span> <span class=\"sy0\">=</span> <span class=\"kw3\">RESULT</span><span class=\"br0\">)</span> </pre>"}, {"lang": "FreeBASIC", "loc": 13, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co2\">#Define ThenIf(a, b) If b Then a</span><br/><span class=\"co2\">#Define InvertAssign(a, b) b = a</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> Boolean needUmbrella = <span class=\"kw1\">False</span>, raining = <span class=\"kw1\">True</span><br/>ThenIf<span class=\"br0\">(</span>needUmbrella = <span class=\"kw1\">True</span>, raining = <span class=\"kw1\">True</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"needUmbrella = \"</span>; needUmbrella <br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> b = <span class=\"nu0\">0</span>, a = <span class=\"nu0\">3</span><br/>InvertAssign<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"b is\"</span>; b<br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 30, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> ibool <span class=\"kw4\">bool</span><br/>\u00a0<br/><span class=\"kw1\">const</span> itrue ibool <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>ib ibool<span class=\"sy1\">)</span> iif<span class=\"sy1\">(</span>cond <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> cond <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">bool</span><span class=\"sy1\">(</span>ib<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">bool</span><span class=\"sy1\">(</span><span class=\"sy3\">!</span>ib<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> needUmbrella <span class=\"kw4\">bool</span><br/>    raining <span class=\"sy2\">:=</span> <span class=\"kw2\">true</span><br/>\u00a0<br/>    <span class=\"co1\">// normal syntax</span><br/>    <span class=\"kw1\">if</span> raining <span class=\"sy1\">{</span><br/>        needUmbrella <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"Is it raining?\u00a0%t. Do I need an umbrella?\u00a0%t<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> raining<span class=\"sy1\">,</span> needUmbrella<span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// inverted syntax</span><br/>    raining <span class=\"sy2\">=</span> <span class=\"kw2\">false</span><br/>    needUmbrella <span class=\"sy2\">=</span> itrue<span class=\"sy3\">.</span>iif<span class=\"sy1\">(</span>raining<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"Is it raining?\u00a0%t. Do I need an umbrella?\u00a0%t<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> raining<span class=\"sy1\">,</span> needUmbrella<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 3, "block": "<pre class=\"haskell highlighted_source\">when <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> m <span class=\"sy0\">=&gt;</span> m <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a> <span class=\"sy0\">-&gt;</span> m <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>action `when` condition <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> condition <span class=\"kw1\">then</span> action <span class=\"kw1\">else</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Icon and Unicon", "loc": 5, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>raining <span class=\"sy1\">:=</span> TRUE <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span>                         <span class=\"co1\"># there is no true/false null/non-null will do</span><br/><span class=\"kw1\">if</span> <span class=\"sy1\">\\</span>raining <span class=\"kw1\">then</span> needumbrella <span class=\"sy1\">:=</span> TRUE        <span class=\"co1\"># normal</span><br/>needumbrella <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span><span class=\"br0\">(</span>TRUE<span class=\"sy1\">,</span> <span class=\"sy1\">\\</span>raining<span class=\"br0\">)</span>            <span class=\"co1\"># inverted (choose sub-expression 1)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre>do ... while(condition);</pre>"}, {"lang": "Java", "loc": 1, "block": "<pre>do ... while(condition);</pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">v as $x</pre>"}, {"lang": "Julia", "loc": 7, "block": "<pre class=\"text highlighted_source\">macro inv(expr, cond)<br/>    cond isa Expr &amp;&amp; cond.head ==\u00a0:if || throw(ArgumentError(\"$cond is not an if expression\"))<br/>    cond.args[2] = expr<br/>    return cond<br/>end<br/>\u00a0<br/>@inv println(\"Wow! Lucky Guess!\") if true else println(\"Not!\") end</pre>"}, {"lang": "Kotlin", "loc": 9, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>infix fun Boolean.<span class=\"me1\">iif</span><span class=\"br0\">(</span>cond<span class=\"sy0\">:</span> Boolean<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>cond<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">!</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> raining <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> needUmbrella <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a> iif <span class=\"br0\">(</span>raining<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Do I need an umbrella?  ${if(needUmbrella) \"</span>Yes<span class=\"st0\">\" else \"</span>No<span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 56, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>expr=lambda -&gt;{<br/>      Print \"ok\"<br/>}<br/>ifrev=lambda (dothis, cond) -&gt;{<br/>      if cond then call dothis()<br/>}<br/>a=1<br/>call ifrev(expr, a=1)<br/>\u00a0<br/>\\\\ on module call<br/>Module Subtract (a, b) {<br/>      Push a-b<br/>}<br/>Module PrintTop {<br/>      Print Number<br/>}<br/>Subtract 10, 3\u00a0: PrintTop<br/>\\\\ pushing before calling in reverse order<br/>Push 3, 10\u00a0: Subtract\u00a0: PrintTop<br/>\\\\ Before call PrintTop any parameter send to stack<br/>\\\\ So this works ok<br/>PrintTop 1000<br/>\\\\ on assignment<br/>Dim A(5)=1<br/>Global n=2<br/>Function AddOne (x) {<br/>      n++<br/>      =x<br/>}<br/>\\\\ Execution of left expression, then right expression<br/>A(n)=AddOne(5)<br/>Print A(n-1)=5, n=3<br/>\\\\ Execution of right expression, then left expression<br/>Let A(n)=AddOne(15)<br/>Print A(n)=15, n=4<br/>\\\\ This statement..<br/>Let X=1, Y=2<br/>\\\\ executed like these<br/>Push 2, 1\u00a0: Read X, Y<br/>\u00a0<br/>\\\\ This is the CallBack way<br/>Module ExecCond {<br/>      Read &amp;callback(), cond<br/>      if cond then call callback()<br/>}<br/>x=1<br/>\\\\ this aa() is a function but when we call it after transforming from Lazy$() <br/>\\\\ act as part of module so we see x, and alter it<br/>Function aa {<br/>      x++<br/>}<br/>a=1<br/>ExecCond Lazy$(&amp;aa()), A=1<br/>Print x=2<br/>\u00a0</pre>"}, {"lang": "m4", "loc": 6, "block": "<pre class=\"text highlighted_source\">define(`thenif', `ifelse($2, $3, `$1')')dnl<br/>dnl<br/>ifelse(eval(23 &gt; 5), 1, 23 is greater than 5)<br/>ifelse(eval(23 &gt; 5), 0, math is broken)<br/>thenif(23 is greater than 5, eval(23 &gt; 5), 1)<br/>thenif(math is broken, eval(23 &gt; 5), 0)</pre>"}, {"lang": "Mathematica", "loc": 10, "block": "<pre class=\"text highlighted_source\">a = 4<br/>-&gt;4<br/>\u00a0<br/>b = 5<br/>-&gt;5<br/>\u00a0<br/>If[1&lt;2,<br/>Print[\"This was expected\"]<br/>]<br/>-&gt;This was expected</pre>"}, {"lang": "Metafont", "loc": 2, "block": "<pre class=\"text highlighted_source\">x=6;<br/>7=y;</pre>"}, {"lang": "Mercury", "loc": 8, "block": "<pre class=\"text highlighted_source\">:- pred progress(int::in, int::in, int::out, int::out) is det.<br/>progress(Past, Future, At, Total)\u00a0:-<br/>\tAt = Past + 1,<br/>\tTotal = Past + Future.<br/>\u00a0<br/>progress(Past, Future, At, Total)\u00a0:-<br/>        Past + Future = Total,<br/>        Past + 1 = At.</pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre>  6 -&gt; a\u00a0: Push 6 on the stack and set the top of the stack as value of local variable a (top of the stack is consumed)\n  6\u00a0:= a\u00a0: Push 6 on the stack and set the top of the satck as value of  attribute a (top of the stack is consumed).\n  raining ifTrue: [ true -&gt;needumbrella ]\n</pre>"}, {"lang": "OxygenBasic", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>macro cond(a,c)  {c then a}<br/>\u00a0<br/>macro store(b,a) {a=b}<br/>\u00a0<br/>sys a,c=10<br/>\u00a0<br/>if c&gt;4 then a=4<br/>\u00a0<br/>'INVERTED SYNTAX FORMS:<br/>\u00a0<br/>cond a=40, if c&gt;4<br/>\u00a0<br/>store 4,a<br/>\u00a0<br/>'COMBINED:<br/>\u00a0<br/>cond store(5,a), if c&gt;4<br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 4, "block": "<pre class=\"parigp highlighted_source\">fi<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> condition<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>condition<span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">if</span><span class=\"br0\">(</span>raining<span class=\"sy0\">,</span> <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Umbrella needed\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>fi<span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Umbrella needed\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> raining<span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 4, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$guess</span> <span class=\"sy0\">==</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Wow! Lucky Guess!\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span>    <span class=\"co1\"># Traditional syntax</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st_h\">'Wow! Lucky Guess!'</span> <span class=\"kw1\">if</span> <span class=\"re0\">$guess</span> <span class=\"sy0\">==</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span>           <span class=\"co1\"># Inverted syntax (note missing braces and parens)</span><br/><span class=\"kw1\">unless</span> <span class=\"br0\">(</span><span class=\"re0\">$guess</span> <span class=\"sy0\">==</span> <span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Sorry, your guess was wrong!\"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span>   <span class=\"co1\"># Traditional syntax</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st_h\">'Huh! You Guessed Wrong!'</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$guess</span> <span class=\"sy0\">==</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span>              <span class=\"co1\"># Inverted syntax</span></pre>"}, {"lang": "Perl 6", "loc": 4, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">if</span> <span class=\"re0\">$guess</span> <span class=\"sy0\">==</span> <span class=\"nu0\">6</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"Wow! Lucky Guess!\"</span> <span class=\"br0\">}</span>          <span class=\"co1\"># Traditional</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'Wow! Lucky Guess!'</span> <span class=\"kw1\">if</span> <span class=\"re0\">$guess</span> <span class=\"sy0\">==</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span>             <span class=\"co1\"># Inverted</span><br/><span class=\"kw1\">unless</span> <span class=\"re0\">$guess</span> <span class=\"sy0\">==</span> <span class=\"nu0\">6</span> <span class=\"br0\">{</span> <span class=\"kw3\">say</span> <span class=\"st0\">\"Huh! You Guessed Rong!\"</span> <span class=\"br0\">}</span> <span class=\"co1\"># Traditional</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'Huh! You Guessed Rong!'</span> <span class=\"kw1\">unless</span> <span class=\"re0\">$guess</span> <span class=\"sy0\">==</span> <span class=\"nu0\">6</span><span class=\"sy0\">;</span>    <span class=\"co1\"># Inverted</span></pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">(de rv Prg<br/>   (append (last Prg) (head -1 Prg)) )</pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">Get-Date</span> <span class=\"nu0\">5</span><span class=\"sy0\">/</span><span class=\"nu0\">27</span><span class=\"sy0\">/</span><span class=\"nu0\">2016</span><span class=\"br0\">)</span>.DayOfWeek <span class=\"kw4\">-eq</span> <span class=\"st0\">\"Friday\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"st0\">\"Thank God it's Friday!\"</span><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 1, "block": "<pre class=\"python highlighted_source\">x <span class=\"sy0\">=</span> truevalue <span class=\"kw1\">if</span> condition <span class=\"kw1\">else</span> falsevalue</pre>"}, {"lang": "Qi", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(define set-needumbrella<br/>  Raining -&gt; (set needumbrella true) where (= true Raining)<br/>  Raining -&gt; (set needumbrella false) where (= false Raining))<br/>\u00a0<br/>(define set-needumbrella<br/>  Raining -&gt; (if (= true Raining)<br/>                 (set needumbrella true)<br/>                 (set needumbrella false)))<br/>\u00a0<br/>\u00a0<br/>Alternatives:<br/>\u00a0<br/>(define set-needumbrella<br/>  Raining -&gt; (set needumbrella true) where Raining<br/>  Raining -&gt; (set needumbrella false))<br/>\u00a0<br/>(define set-needumbrella<br/>  Raining -&gt; (if Raining<br/>                 (set needumbrella true)<br/>                 (set needumbrella false)))<br/>\u00a0<br/>(define set-needumbrella<br/>  true  -&gt; (set needumbrella true)<br/>  false -&gt; (set needumbrella false))<br/>\u00a0<br/>(define set-needumbrella<br/>  A -&gt; (set needumbrella A))<br/>\u00a0</pre>"}, {"lang": "R", "loc": 1, "block": "<pre class=\"text highlighted_source\">do.if &lt;- function(expr, cond) if(cond) expr</pre>"}, {"lang": "Racket", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(when #t (displayln \"true\"))<br/>((displayln \"true\") . when . #t)<br/>\u00a0<br/>(define a 6)<br/>(set! a 5)<br/>(a . set! . 6)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 1, "block": "<pre>        SIGNAL   {ON|OFF}   someCondition   {name}\n</pre>"}, {"lang": "Ruby", "loc": 15, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># Raise ArgumentError if n is negative.</span><br/><span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw3\">raise</span> <span class=\"kw4\">ArgumentError</span>, <span class=\"st0\">\"negative n\"</span> <span class=\"kw1\">end</span><br/><span class=\"kw3\">raise</span> <span class=\"kw4\">ArgumentError</span>, <span class=\"st0\">\"negative n\"</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\"># Exit 1 unless we can call Process.fork.</span><br/><span class=\"kw1\">unless</span> <span class=\"kw4\">Process</span>.<span class=\"me1\">respond_to</span>?\u00a0:<span class=\"kw3\">fork</span> <span class=\"kw1\">then</span> <span class=\"kw3\">exit</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/><span class=\"kw3\">exit</span> <span class=\"nu0\">1</span> <span class=\"kw1\">unless</span> <span class=\"kw4\">Process</span>.<span class=\"me1\">respond_to</span>?\u00a0:<span class=\"kw3\">fork</span><br/>\u00a0<br/><span class=\"co1\"># Empty an array, printing each element.</span><br/><span class=\"kw1\">while</span> ary.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">do</span> <span class=\"kw3\">puts</span> ary.<span class=\"me1\">shift</span> <span class=\"kw1\">end</span><br/><span class=\"kw3\">puts</span> ary.<span class=\"me1\">shift</span> <span class=\"kw1\">while</span> ary.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\"># Another way to empty an array, printing each element.</span><br/><span class=\"kw1\">until</span> ary.<span class=\"me1\">empty</span>? <span class=\"kw1\">do</span> <span class=\"kw3\">puts</span> ary.<span class=\"me1\">shift</span> <span class=\"kw1\">end</span><br/><span class=\"kw3\">puts</span> ary.<span class=\"me1\">shift</span> <span class=\"kw1\">until</span> ary.<span class=\"me1\">empty</span>?</pre>"}, {"lang": "Scala", "loc": 6, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Main <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> raining <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> needUmbrella <span class=\"sy0\">=</span> raining<br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Do I need an umbrella?  ${if (needUmbrella) \"</span>Yes<span class=\"st0\">\" else \"</span>No<span class=\"st0\">\"}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 8, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># Inverted syntax with assignment</span><br/>var raining = <span class=\"kw2\">true</span>;<br/><span class=\"br0\">[</span><span class=\"kw2\">false</span><span class=\"br0\">]</span>\u00bb<span class=\"br0\">(</span>\\var needumbrella<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"co1\"># Inverted syntax with conditional expressions</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>raining==<span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>needumbrella=<span class=\"kw2\">true</span><span class=\"br0\">}</span>;<br/><span class=\"br0\">{</span>needumbrella=<span class=\"kw2\">true</span><span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>raining==<span class=\"kw2\">true</span><span class=\"br0\">)</span>;<br/><span class=\"br0\">(</span>needumbrella=<span class=\"kw2\">true</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>raining==<span class=\"kw2\">true</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Swift", "loc": 29, "block": "<pre class=\"text highlighted_source\">infix operator ~= {}<br/>infix operator\u00a0! {}<br/>\u00a0<br/>func ~=(lhs:Int, inout rhs:Int) {<br/>    rhs = lhs<br/>}<br/>\u00a0<br/>func\u00a0!(lhs:(() -&gt; Void), rhs:Bool) {<br/>    if (rhs) {<br/>        lhs()<br/>    }<br/>}<br/>\u00a0<br/>// Traditional assignment<br/>var a = 0<br/>\u00a0<br/>// Inverted using a custom operator<br/>20 ~= a<br/>\u00a0<br/>let raining = true<br/>let tornado = true<br/>var needUmbrella = false<br/>var stayInside = false<br/>\u00a0<br/>// Traditional conditional expression<br/>if raining {needUmbrella = true}<br/>\u00a0<br/>// Inverted using a custom operator<br/>_ = {stayInside = true}\u00a0! tornado</pre>"}, {"lang": "Tcl", "loc": 86, "block": "<pre class=\"tcl highlighted_source\">\u00a0<br/><span class=\"co1\"># do.tcl --</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\">#        Tcl implementation of a \"do ... while|until\" loop.</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># Originally written for the \"Texas Tcl Shootout\" programming contest</span><br/><span class=\"co1\"># at the 2000 Tcl Conference in Austin/Texas.</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># Copyright (c) 2001 by Reinhard Max &lt;<a class=\"__cf_email__\" data-cfemail=\"b4e6d1dddadcd5c6d09af9d5ccf4d3d9cc9ad0d1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># See the file \"license.terms\" for information on usage and redistribution</span><br/><span class=\"co1\"># of this file, and for a DISCLAIMER OF ALL WARRANTIES.</span><br/><span class=\"co1\">#</span><br/><span class=\"co1\"># RCS: @(#) $Id: do.tcl,v 1.6 2004/01/15 06:36:12 andreas_kupries Exp $</span><br/><span class=\"co1\">#</span><br/><span class=\"kw1\">namespace</span> <span class=\"kw1\">eval</span>\u00a0::<span class=\"me1\">control</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">proc</span> do <span class=\"br0\">{</span>body args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\u00a0<br/>\t<span class=\"co1\">#</span><br/>\t<span class=\"co1\"># Implements a \"do body while|until test\" loop</span><br/>\t<span class=\"co1\"># </span><br/>\t<span class=\"co1\"># It is almost as fast as builtin \"while\" command for loops with</span><br/>\t<span class=\"co1\"># more than just a few iterations.</span><br/>\t<span class=\"co1\">#</span><br/>\u00a0<br/>\t<span class=\"kw1\">set</span> len <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$args</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$len</span> <span class=\"sy0\">!</span>=<span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$len</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> <span class=\"kw1\">proc</span> <span class=\"br0\">[</span><span class=\"kw1\">namespace</span> current<span class=\"br0\">]</span>::<span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"br0\">[</span><span class=\"kw2\">info</span> level <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">return</span> -code <span class=\"kw1\">error</span> <span class=\"st0\">\"wrong # args: should be <span class=\"es0\">\\\"</span>$proc body<span class=\"es0\">\\\"</span> or <span class=\"es0\">\\\"</span>$proc body <span class=\"es0\">\\[</span>until|while<span class=\"es0\">\\]</span> test<span class=\"es0\">\\\"</span>\"</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> test <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>whileOrUntil test<span class=\"br0\">}</span> <span class=\"re0\">$args</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">switch</span> -exact -- <span class=\"re0\">$whileOrUntil</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"st0\">\"while\"</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t\t<span class=\"st0\">\"until\"</span> <span class=\"br0\">{</span> <span class=\"kw1\">set</span> test <span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$test</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">default</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">return</span> -code <span class=\"kw1\">error</span> \\<br/>\t\t\t<span class=\"st0\">\"bad option <span class=\"es0\">\\\"</span>$whileOrUntil<span class=\"es0\">\\\"</span>: must be until, or while\"</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">break</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\"># the first invocation of the body</span><br/>\t<span class=\"kw1\">set</span> code <span class=\"br0\">[</span><span class=\"kw1\">catch</span> <span class=\"br0\">{</span> <span class=\"kw1\">uplevel</span> <span class=\"nu0\">1</span> <span class=\"re0\">$body</span> <span class=\"br0\">}</span> result<span class=\"br0\">]</span><br/>\u00a0<br/>\t<span class=\"co1\"># decide what to do upon the return code:</span><br/>\t<span class=\"co1\">#</span><br/>\t<span class=\"co1\">#               0 - the body executed successfully</span><br/>\t<span class=\"co1\">#               1 - the body raised an error</span><br/>\t<span class=\"co1\">#               2 - the body invoked [return]</span><br/>\t<span class=\"co1\">#               3 - the body invoked [break]</span><br/>\t<span class=\"co1\">#               4 - the body invoked [continue]</span><br/>\t<span class=\"co1\"># everything else - return and pass on the results</span><br/>\t<span class=\"co1\">#</span><br/>\t<span class=\"kw1\">switch</span> -exact -- <span class=\"re0\">$code</span> <span class=\"br0\">{</span><br/>\t    <span class=\"nu0\">0</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t    <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> -errorinfo <span class=\"br0\">[</span>ErrorInfoAsCaller <span class=\"kw1\">uplevel</span> do<span class=\"br0\">]</span>  \\<br/>\t\t    -errorcode <span class=\"sy0\">$</span>::<span class=\"me1\">errorCode</span> -code <span class=\"kw1\">error</span> <span class=\"re0\">$result</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"nu0\">3</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"co1\"># FRINK: nocheck</span><br/>\t\t<span class=\"kw1\">return</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"nu0\">4</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">default</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> -code <span class=\"re0\">$code</span> <span class=\"re0\">$result</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"co1\"># the rest of the loop</span><br/>\t<span class=\"kw1\">set</span> code <span class=\"br0\">[</span><span class=\"kw1\">catch</span> <span class=\"br0\">{</span><span class=\"kw1\">uplevel</span> <span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw1\">while</span> <span class=\"re0\">$test</span> <span class=\"re0\">$body</span><span class=\"br0\">]</span><span class=\"br0\">}</span> result<span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$code</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> -errorinfo <span class=\"br0\">[</span>ErrorInfoAsCaller <span class=\"kw1\">while</span> do<span class=\"br0\">]</span> \\<br/>\t\t-errorcode <span class=\"sy0\">$</span>::<span class=\"me1\">errorCode</span> -code <span class=\"kw1\">error</span> <span class=\"re0\">$result</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> -code <span class=\"re0\">$code</span> <span class=\"re0\">$result</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#usage:</span><br/><span class=\"kw2\">package</span> require control<br/>control::<span class=\"me1\">do</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"kw2\">puts</span> <span class=\"st0\">\"hello world\"</span><span class=\"sy0\">;</span> <span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> until <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "TI-83 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">536\u2192N</pre>"}, {"lang": "Wortel", "loc": 8, "block": "<pre class=\"text highlighted_source\">; a = expr<br/>:a expr<br/>; expr = a<br/>~:expr a<br/>; if cond expr<br/>@if cond expr<br/>; if expr cond<br/><a class=\"__cf_email__\" data-cfemail=\"c5bb85aca3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> expr cond</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">if (raining==True) needumbrella:=True;<br/>(raining==True)\u00a0: if (_) needumbrella:=True;</pre>"}]}