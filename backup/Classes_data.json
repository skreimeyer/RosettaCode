{"task": "Classes", "blocks": [{"lang": "ActionScript", "loc": 21, "block": "<pre class=\"actionscript highlighted_source\">package <span class=\"br0\">{</span><br/>    <span class=\"kw3\">public</span> <span class=\"kw2\">class</span> MyClass <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw3\">private</span> <span class=\"kw2\">var</span> myVariable:<span class=\"kw3\">int</span>;  <span class=\"co1\">// Note: instance variables are usually \"private\"</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * The constructor<br/>         */</span><br/>        <span class=\"kw3\">public</span> <span class=\"kw2\">function</span> MyClass<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// creates a new instance</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"coMULTI\">/**<br/>         * A method<br/>         */</span><br/>        <span class=\"kw3\">public</span> <span class=\"kw2\">function</span> someMethod<span class=\"br0\">(</span><span class=\"br0\">)</span>:<span class=\"kw3\">void</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">this</span>.<span class=\"me1\">myVariable</span> = <span class=\"nu0\">1</span>; <span class=\"co1\">// Note: \"this.\" is optional</span><br/>            <span class=\"co1\">// myVariable = 1; works also</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 9, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">package</span> My_Package <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> My_Type <span class=\"kw1\">is</span> <span class=\"kw3\">tagged</span> <span class=\"kw3\">private</span>;<br/>   <span class=\"kw3\">procedure</span> Some_Procedure<span class=\"br0\">(</span>Item\u00a0: <span class=\"kw3\">out</span> My_Type<span class=\"br0\">)</span>;<br/>    <span class=\"kw3\">function</span> Set<span class=\"br0\">(</span>Value\u00a0: <span class=\"kw3\">in</span> Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> My_Type;<br/><span class=\"kw3\">private</span><br/>   <span class=\"kw3\">type</span> My_Type <span class=\"kw1\">is</span> <span class=\"kw3\">tagged</span> <span class=\"kw3\">record</span><br/>      Variable\u00a0: Integer\u00a0:= -<span class=\"nu0\">12</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/><span class=\"kw1\">end</span> My_Package;</pre>"}, {"lang": "Aikido", "loc": 7, "block": "<pre class=\"text highlighted_source\">class Circle (radius, x, y) extends  Shape (x, y) implements Drawable {<br/>    var myvec = new Vector (x, y)<br/>\u00a0<br/>    public function draw() {<br/>        // draw the circle<br/>    }<br/>}</pre>"}, {"lang": "ALGOL 68", "loc": 82, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> MYDATA <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <br/>    <span class=\"kw3\">INT</span> name1 <br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><br/>    <span class=\"kw3\">INT</span> name2<span class=\"sy1\">,</span><br/>    <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> MYDATA<span class=\"br0\">)</span><span class=\"kw4\">REF</span> MYDATA new<span class=\"sy1\">,</span><br/>    <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> MYDATA<span class=\"br0\">)</span><span class=\"kw3\">VOID</span> init<span class=\"sy1\">,</span><br/>    <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> MYDATA<span class=\"br0\">)</span><span class=\"kw3\">VOID</span> some method<br/><span class=\"br0\">)</span> class my data<span class=\"sy1\">;</span><br/>class my data <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><br/>  <span class=\"coMULTI\"># name2\u00a0:= #</span> 2<span class=\"sy1\">,</span> <span class=\"coMULTI\"># Class attribute #</span><br/>\u00a0<br/>  <span class=\"coMULTI\"># PROC new\u00a0:= #</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> MYDATA new<span class=\"br0\">)</span><span class=\"kw4\">REF</span> MYDATA<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>        <span class=\"br0\">(</span>init <span class=\"kw6\">OF</span> class my data<span class=\"br0\">)</span><span class=\"br0\">(</span>new<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        new<br/>   <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/>  <span class=\"coMULTI\"># PROC init\u00a0:= #</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> MYDATA self<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>        <span class=\"st0\">\"\"</span><span class=\"st0\">\" Constructor  (Technically an initializer rather than a true 'constructor') \"</span><span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>        name1 <span class=\"kw6\">OF</span> self <span class=\"sy1\">:=</span> 0 <span class=\"coMULTI\"># Instance attribute #</span><br/>    <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/>  <span class=\"coMULTI\"># PROC some method\u00a0:= #</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> MYDATA self<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>        <span class=\"st0\">\"\"</span><span class=\"st0\">\" Method \"</span><span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>        name1 <span class=\"kw6\">OF</span> self <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>        name2 <span class=\"kw6\">OF</span> class my data <span class=\"sy1\">:=</span> 3<br/>    <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># class name, invoked as a function is the constructor syntax #</span><br/><span class=\"kw4\">REF</span> MYDATA my data <span class=\"sy1\">=</span> <span class=\"br0\">(</span>new <span class=\"kw6\">OF</span> class my data<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">LOC</span> MYDATA<span class=\"br0\">)</span><span class=\"sy1\">;</span> <br/>\u00a0<br/><span class=\"kw4\">MODE</span> GENDEROPT <span class=\"sy1\">=</span> <span class=\"kw6\">UNION</span><span class=\"br0\">(</span><span class=\"kw3\">STRING</span><span class=\"sy1\">,</span> <span class=\"kw3\">VOID</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> AGEOPT <span class=\"sy1\">=</span> <span class=\"kw6\">UNION</span><span class=\"br0\">(</span><span class=\"kw3\">INT</span><span class=\"sy1\">,</span> <span class=\"kw3\">VOID</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> MYOTHERDATA <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><br/>    <span class=\"kw3\">STRING</span> name<span class=\"sy1\">,</span><br/>    GENDEROPT gender<span class=\"sy1\">,</span><br/>    AGEOPT age<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw6\">STRUCT</span> <span class=\"br0\">(</span><br/>    <span class=\"kw3\">INT</span> count<span class=\"sy1\">,</span><br/>    <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> MYOTHERDATA<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span><span class=\"sy1\">,</span> GENDEROPT<span class=\"sy1\">,</span> AGEOPT<span class=\"br0\">)</span><span class=\"kw4\">REF</span> MYOTHERDATA new<span class=\"sy1\">,</span><br/>    <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> MYOTHERDATA<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span><span class=\"sy1\">,</span> GENDEROPT<span class=\"sy1\">,</span> AGEOPT<span class=\"br0\">)</span><span class=\"kw3\">VOID</span> init<span class=\"sy1\">,</span><br/>    <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> MYOTHERDATA<span class=\"br0\">)</span><span class=\"kw3\">VOID</span> del<br/><span class=\"br0\">)</span> class my other data<span class=\"sy1\">;</span><br/>class my other data <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><br/>  <span class=\"coMULTI\"># count\u00a0:= #</span> 0<span class=\"sy1\">,</span>  <span class=\"coMULTI\"># Population of \"(init OF class my other data)\" objects #</span><br/><span class=\"coMULTI\"># PROC new\u00a0:= #</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> MYOTHERDATA new<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> name<span class=\"sy1\">,</span> GENDEROPT gender<span class=\"sy1\">,</span> AGEOPT age<span class=\"br0\">)</span><span class=\"kw4\">REF</span> MYOTHERDATA<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>          <span class=\"br0\">(</span>init <span class=\"kw6\">OF</span> class my other data<span class=\"br0\">)</span><span class=\"br0\">(</span>new<span class=\"sy1\">,</span> name<span class=\"sy1\">,</span> gender<span class=\"sy1\">,</span> age<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>          new<br/>      <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/>  <span class=\"coMULTI\"># PROC init\u00a0:= #</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> MYOTHERDATA self<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> name<span class=\"sy1\">,</span> GENDEROPT gender<span class=\"sy1\">,</span> AGEOPT age<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>        <span class=\"st0\">\"\"</span><span class=\"st0\">\" One initializer required, others are optional (with different defaults) \"</span><span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>        count <span class=\"kw6\">OF</span> class my other data <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>        name <span class=\"kw6\">OF</span> self <span class=\"sy1\">:=</span> name<span class=\"sy1\">;</span><br/>        gender <span class=\"kw6\">OF</span> self <span class=\"sy1\">:=</span> gender<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">CASE</span> gender <span class=\"kw6\">OF</span> self <span class=\"kw2\">IN</span><br/>            <span class=\"br0\">(</span><span class=\"kw3\">VOID</span><span class=\"br0\">)</span><span class=\"sy1\">:</span>gender <span class=\"kw6\">OF</span> self <span class=\"sy1\">:=</span> <span class=\"st0\">\"Male\"</span><br/>        <span class=\"kw2\">ESAC</span><span class=\"sy1\">;</span><br/>        age <span class=\"kw6\">OF</span> self <span class=\"sy1\">:=</span> age<br/>    <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/>  <span class=\"coMULTI\"># PROC del\u00a0:= #</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> MYOTHERDATA self<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>        count <span class=\"kw6\">OF</span> class my other data <span class=\"sy1\">-:=</span> 1<br/>    <span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> attribute error <span class=\"sy1\">:=</span> <span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> <span class=\"kw20\">error char</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># mend the error with the \"error char\" #</span><br/>\u00a0<br/><span class=\"coMULTI\"># Allocate the instance from HEAP #</span><br/><span class=\"kw4\">REF</span> MYOTHERDATA person1 <span class=\"sy1\">=</span>  <span class=\"br0\">(</span>new <span class=\"kw6\">OF</span> class my other data<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">HEAP</span> MYOTHERDATA<span class=\"sy1\">,</span> <span class=\"st0\">\"John\"</span><span class=\"sy1\">,</span> <span class=\"kw7\">EMPTY</span><span class=\"sy1\">,</span> <span class=\"kw7\">EMPTY</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>name <span class=\"kw6\">OF</span> person1<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\": \"</span><span class=\"sy1\">,</span> <br/>        <span class=\"br0\">(</span>gender <span class=\"kw6\">OF</span> person1<span class=\"sy1\">|</span><span class=\"br0\">(</span><span class=\"kw3\">STRING</span> gender<span class=\"br0\">)</span><span class=\"sy1\">:</span>gender<span class=\"sy1\">|</span>attribute error<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span>  <span class=\"coMULTI\"># \"John Male\" #</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>age <span class=\"kw6\">OF</span> person1<span class=\"sy1\">|</span><span class=\"br0\">(</span><span class=\"kw3\">INT</span> age<span class=\"br0\">)</span><span class=\"sy1\">:</span>age<span class=\"sy1\">|</span>attribute error<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># Raises AttributeError exception! #</span><br/>\u00a0<br/><span class=\"coMULTI\"># Allocate the instance from LOC (stack) #</span><br/><span class=\"kw4\">REF</span> MYOTHERDATA person2 <span class=\"sy1\">=</span> <span class=\"br0\">(</span>new <span class=\"kw6\">OF</span> class my other data<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">LOC</span> MYOTHERDATA<span class=\"sy1\">,</span> <span class=\"st0\">\"Jane\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Female\"</span><span class=\"sy1\">,</span> 23<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>name <span class=\"kw6\">OF</span> person2<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\": \"</span><span class=\"sy1\">,</span> <br/>        <span class=\"br0\">(</span>gender <span class=\"kw6\">OF</span> person2<span class=\"sy1\">|</span><span class=\"br0\">(</span><span class=\"kw3\">STRING</span> gender<span class=\"br0\">)</span><span class=\"sy1\">:</span>gender<span class=\"sy1\">|</span>attribute error<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>age <span class=\"kw6\">OF</span> person2<span class=\"sy1\">|</span><span class=\"br0\">(</span><span class=\"kw3\">INT</span> age<span class=\"br0\">)</span><span class=\"sy1\">:</span>age<span class=\"sy1\">|</span>attribute error<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"coMULTI\"># \"Jane Female 23\" #</span></pre>"}, {"lang": "AmigaE", "loc": 27, "block": "<pre class=\"text highlighted_source\">OBJECT a_class<br/>  varA, varP<br/>ENDOBJECT<br/>\u00a0<br/>-&gt; this could be used like a constructor<br/>PROC init() OF a_class<br/>  self.varP\u00a0:= 10<br/>  self.varA\u00a0:= 2<br/>ENDPROC<br/>\u00a0<br/>-&gt; the special proc end() is for destructor<br/>PROC end() OF a_class<br/>-&gt; nothing to do here...<br/>ENDPROC<br/>\u00a0<br/>-&gt; a not so useful getter<br/>PROC getP() OF a_class IS self.varP<br/>\u00a0<br/>PROC main()<br/>  DEF obj\u00a0: PTR TO a_class<br/>  NEW obj.init()<br/>  WriteF('\\d\\n', obj.varA)   -&gt; this can be done, while<br/>                             -&gt; varP can't be accessed directly<br/>  WriteF('\\d\\n', obj.varP)   -&gt; or<br/>  WriteF('\\d\\n', obj.getP())<br/>  END obj<br/>ENDPROC</pre>"}, {"lang": "AutoHotkey", "loc": 19, "block": "<pre class=\"autohotkey highlighted_source\">obj <span class=\"sy0\">:=</span> new MyClass<br/>obj<span class=\"sy0\">.</span>WhenCreated<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>class MyClass <span class=\"br0\">{</span><br/><span class=\"co1\">; Instance Variable #1</span><br/>   time <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Hour\"><span class=\"kw2\">A_Hour</span></a> <span class=\"st0\">\":\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Min\"><span class=\"kw2\">A_Min</span></a> <span class=\"st0\">\":\"</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Sec\"><span class=\"kw2\">A_Sec</span></a><br/>\u00a0<br/><span class=\"co1\">; Constructor</span><br/>   __New<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"Constructing new object of type: \"</span> this<span class=\"sy0\">.</span>__Class<br/>      <a href=\"http://www.autohotkey.com/docs/commands/FormatTime.htm\"><span class=\"kw3\">FormatTime</span></a><span class=\"sy0\">,</span> date<span class=\"sy0\">,</span> <span class=\"sy0\">,</span> MM<span class=\"sy0\">/</span>dd<span class=\"sy0\">/</span>yyyy<br/>   <span class=\"co1\">; Instance Variable #2</span><br/>      this<span class=\"sy0\">.</span>date <span class=\"sy0\">:=</span> date<br/>   <span class=\"br0\">}</span><br/><span class=\"co1\">; Method</span><br/>   WhenCreated<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"Object created at \"</span> this<span class=\"sy0\">.</span>time <span class=\"st0\">\" on \"</span> this<span class=\"sy0\">.</span>date<br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 19, "block": "<pre class=\"text highlighted_source\">  DECLARE SUB MyClassDelete (pthis AS MyClass)<br/>  DECLARE SUB MyClassSomeMethod (pthis AS MyClass)<br/>  DECLARE SUB MyClassInit (pthis AS MyClass)<br/>\u00a0<br/>  TYPE MyClass<br/>    Variable AS INTEGER<br/>  END TYPE<br/>\u00a0<br/>  DIM obj AS MyClass<br/>  MyClassInit obj<br/>  MyClassSomeMethod obj<br/>\u00a0<br/>  SUB MyClassInit (pthis AS MyClass)<br/>    pthis.Variable = 0<br/>  END SUB<br/>\u00a0<br/>  SUB MyClassSomeMethod (pthis AS MyClass)<br/>    pthis.Variable = 1<br/>  END SUB</pre>"}, {"lang": "BBC BASIC", "loc": 18, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$+\"CLASSLIB\"<br/>\u00a0<br/>      REM Declare the class:<br/>      DIM MyClass{variable, @constructor, _method}<br/>      DEF <a class=\"__cf_email__\" data-cfemail=\"89c4f0cae5e8fafaa7c9eae6e7fafdfbfceafde6fb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> MyClass.variable = PI\u00a0: ENDPROC<br/>      DEF MyClass._method = MyClass.variable ^ 2<br/>\u00a0<br/>      REM Register the class:<br/>      PROC_class(MyClass{})<br/>\u00a0<br/>      REM Instantiate the class:<br/>      PROC_new(myclass{}, MyClass{})<br/>\u00a0<br/>      REM Call the method:<br/>      PRINT FN(myclass._method)<br/>\u00a0<br/>      REM Discard the instance:<br/>      PROC_discard(myclass{})</pre>"}, {"lang": "blz", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Constructors can take parameters (that automatically become properties)<br/>constructor Ball(color, radius)<br/>\u00a0<br/>\t# Objects can also have functions (closures)<br/>\t:volume<br/>\t\treturn 4/3 * {pi} * (radius ** 3)<br/>\tend<br/>\t:show<br/>\t\treturn \"a \" + color + \" ball with radius \" + radius<br/>\tend<br/>\u00a0<br/>end<br/>\u00a0<br/>red_ball = Ball(\"red\", 2)<br/>print(red_ball)<br/># =&gt; a red ball with radius 2<br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 8, "block": "<pre class=\"text highlighted_source\">( ( resolution<br/>  =   (x=)<br/>      (y=)<br/>      (new=.!arg:(?(its.x),?(its.y)))<br/>  )<br/>&amp; new$(resolution,640,480):?VGA<br/>&amp; new$(resolution,1920,1080):?1080p<br/>&amp; out$(\"VGA: horizontal \"\u00a0!(VGA..x) \" vertical \"\u00a0!(VGA..y)));</pre>"}, {"lang": "C", "loc": 32, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> sMyClass<br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> variable<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">*</span>MyClass<span class=\"sy0\">;</span><br/>\u00a0<br/>MyClass  MyClass_new<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  MyClass pthis <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span> <span class=\"sy0\">*</span>pthis<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  pthis<span class=\"sy0\">-&gt;</span>variable <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> pthis<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> MyClass_delete<span class=\"br0\">(</span>MyClass<span class=\"sy0\">*</span> pthis<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pthis<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>pthis<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"sy0\">*</span>pthis <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> MyClass_someMethod<span class=\"br0\">(</span>MyClass pthis<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  pthis<span class=\"sy0\">-&gt;</span>variable <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>MyClass obj <span class=\"sy0\">=</span> MyClass_new<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>MyClass_someMethod<span class=\"br0\">(</span>obj<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>MyClass_delete<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>obj<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "C++", "loc": 29, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw2\">class</span> MyClass<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  <span class=\"kw4\">void</span> someMethod<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// member function = method</span><br/>  MyClass<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">// constructor</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>  <span class=\"kw4\">int</span> variable<span class=\"sy4\">;</span> <span class=\"co1\">// member variable = instance variable</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">// implementation of constructor</span><br/>MyClass<span class=\"sy4\">::</span><span class=\"me2\">MyClass</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">:</span><br/>  variable<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"co1\">// here could be more code</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// implementation of member function</span><br/><span class=\"kw4\">void</span> MyClass<span class=\"sy4\">::</span><span class=\"me2\">someMethod</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  variable <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"co1\">// alternatively: this-&gt;variable = 1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Create an instance as variable</span><br/>MyClass instance<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">// Create an instance on free store</span><br/>MyClass<span class=\"sy2\">*</span> pInstance <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> MyClass<span class=\"sy4\">;</span><br/><span class=\"co1\">// Instances allocated with new must be explicitly destroyed when not needed any more:</span><br/><span class=\"kw3\">delete</span> pInstance<span class=\"sy4\">;</span></pre>"}, {"lang": "C#", "loc": 26, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> MyClass<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> MyClass<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> SomeMethod<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> _variable<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> Variable<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> _variable<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">set</span> <span class=\"br0\">{</span> _variable <span class=\"sy0\">=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"co1\">// instantiate it</span><br/>        MyClass instance <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> MyClass<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// invoke the method</span><br/>        instance<span class=\"sy0\">.</span><span class=\"me1\">SomeMethod</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// set the variable</span><br/>        instance<span class=\"sy0\">.</span><span class=\"me1\">Variable</span> <span class=\"sy0\">=</span> <span class=\"nu0\">99</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// get the variable</span><br/>        <span class=\"kw5\">System</span><span class=\"sy0\">.</span><span class=\"me1\">Console</span><span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span> <span class=\"st0\">\"Variable=\"</span> <span class=\"sy0\">+</span> instance<span class=\"sy0\">.</span><span class=\"me1\">Variable</span><span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 10, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"co1\">; You can think of this as an interface</span><br/><span class=\"br0\">(</span>defprotocol Foo <span class=\"br0\">(</span>getFoo <span class=\"br0\">[</span>this<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Generates Example1 Class with foo as field, with method that returns foo.</span><br/><span class=\"br0\">(</span>defrecord Example1 <span class=\"br0\">[</span>foo<span class=\"br0\">]</span> Foo <span class=\"br0\">(</span>getFoo <span class=\"br0\">[</span>this<span class=\"br0\">]</span> foo<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Create instance and invoke our method to return field value</span><br/><span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>Example1<span class=\"sy0\">.</span> <span class=\"st0\">\"Hi\"</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span>getFoo<span class=\"br0\">)</span><br/><span class=\"st0\">\"Hi\"</span></pre>"}, {"lang": "COBOL", "loc": 66, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       CLASS-ID<span class=\"sy0\">.</span> my-<span class=\"kw3\">class</span> INHERITS base<span class=\"sy0\">.</span><br/>\u00a0<br/>       *&gt; The <span class=\"st0\">'INHERITS base'</span> <span class=\"kw3\">and</span> the following ENVIRONMENT <span class=\"kw3\">DIVISION</span><br/>       *&gt; are <span class=\"kw3\">optional</span> <span class=\"br0\">(</span><span class=\"kw3\">in</span> Visual <span class=\"kw2\">COBOL</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       ENVIRONMENT <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">CONFIGURATION</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       REPOSITORY<span class=\"sy0\">.</span><br/>           <span class=\"kw3\">CLASS</span> base<span class=\"sy0\">.</span><br/>\u00a0<br/>           *&gt; There <span class=\"kw3\">is</span> <span class=\"kw3\">no</span> way <span class=\"br0\">(</span>as far as I can tell<span class=\"br0\">)</span> <span class=\"kw3\">of</span> creating a<br/>           *&gt; constructor<span class=\"sy0\">.</span> However<span class=\"sy0\">,</span> you could wrap it <span class=\"kw3\">with</span> another<br/>           *&gt; method <span class=\"kw2\">to</span> achieve the desired effect<span class=\"sy0\">.</span><br/>           *&gt;<span class=\"sy0\">...</span><br/>\u00a0<br/>           OBJECT<span class=\"sy0\">.</span><br/>               *&gt; Instance <span class=\"kw3\">data</span><br/>               <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>               <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>               <span class=\"nu0\">01</span>  instance-variable <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>               *&gt; Properties can have getters <span class=\"kw3\">and</span> setters automatically<br/>               *&gt; generated<span class=\"sy0\">.</span><br/>               <span class=\"nu0\">01</span>  a-property        <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> PROPERTY<span class=\"sy0\">.</span><br/>\u00a0<br/>               <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>\u00a0<br/>               METHOD-ID<span class=\"sy0\">.</span> some-method<span class=\"sy0\">.</span><br/>               <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>                   *&gt; <span class=\"sy0\">...</span><br/>               <span class=\"kw3\">END</span> METHOD some-method<span class=\"sy0\">.</span><br/>           <span class=\"kw3\">END</span> OBJECT<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">CLASS</span> my-<span class=\"kw3\">class</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> example-class-<span class=\"kw3\">use</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       ENVIRONMENT <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">CONFIGURATION</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       REPOSITORY<span class=\"sy0\">.</span><br/>           *&gt; These declarations brings the <span class=\"kw3\">class</span> <span class=\"kw3\">and</span> property <span class=\"kw2\">into</span><br/>           *&gt; scope<span class=\"sy0\">.</span><br/>           <span class=\"kw3\">CLASS</span> my-<span class=\"kw3\">class</span><br/>           PROPERTY a-property<span class=\"sy0\">.</span> <br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       *&gt; Declaring a my-<span class=\"kw3\">class</span> <span class=\"kw3\">reference</span> variable<span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  instance <span class=\"kw3\">USAGE</span> OBJECT <span class=\"kw3\">REFERENCE</span> my-<span class=\"kw3\">class</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>\u00a0<br/>           *&gt; Invoking a static method <span class=\"kw3\">or</span> <span class=\"br0\">(</span><span class=\"kw3\">in</span> this case<span class=\"br0\">)</span> a constructor<span class=\"sy0\">.</span><br/>           INVOKE my-<span class=\"kw3\">class</span> <span class=\"st0\">\"new\"</span> RETURNING instance<br/>\u00a0<br/>           *&gt; Invoking an instance method<span class=\"sy0\">.</span><br/>           INVOKE instance <span class=\"st0\">\"some-method\"</span><br/>\u00a0<br/>           *&gt; <span class=\"kw3\">Using</span> the setter <span class=\"kw3\">and</span> getter <span class=\"kw3\">of</span> a-property<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">MOVE</span> <span class=\"nu0\">5</span> <span class=\"kw2\">TO</span> a-property <span class=\"kw3\">OF</span> instance<br/>           <span class=\"kw2\">DISPLAY</span> a-property <span class=\"kw3\">OF</span> instance<br/>\u00a0<br/>           GOBACK<br/>           <span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> example-class-<span class=\"kw3\">use</span><span class=\"sy0\">.</span></pre>"}, {"lang": "Coco", "loc": 15, "block": "<pre class=\"text highlighted_source\">class Rectangle<br/>  # The constructor is defined as a bare function. This<br/>  # constructor accepts one argument and automatically assigns it<br/>  # to an instance variable.<br/>  (@width) -&gt;<br/>\u00a0<br/>  # Another instance variable.<br/>  length: 10<br/>\u00a0<br/>  # A method.<br/>  area: -&gt;<br/>    @width * @length<br/>\u00a0<br/># Instantiate the class using the 'new' operator.<br/>rect = new Rectangle 2</pre>"}, {"lang": "CoffeeScript", "loc": 14, "block": "<pre class=\"coffeescript highlighted_source\"><span class=\"co1\"># Create a basic class</span><br/><span class=\"kw3\">class</span> Rectangle<br/>  <span class=\"co1\"># Constructor that accepts one argument</span><br/>  constructor<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span>width<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>\u00a0<br/>  <span class=\"co1\"># An instance variable</span><br/>  length<span class=\"sy0\">:</span> <span class=\"nu0\">10</span><br/>\u00a0<br/>  <span class=\"co1\"># A method</span><br/>  area<span class=\"sy0\">:</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"sy0\">@</span>width <span class=\"sy0\">*</span> <span class=\"sy0\">@</span>length<br/>\u00a0<br/><span class=\"co1\"># Instantiate the class using the new operator</span><br/>rect = <span class=\"kw3\">new</span> Rectangle <span class=\"nu0\">2</span></pre>"}, {"lang": "Common Lisp", "loc": 12, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defclass circle <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">(</span>radius <span class=\"sy0\">:</span><span class=\"me1\">initarg</span> <span class=\"sy0\">:</span><span class=\"me1\">radius</span><br/>           <span class=\"sy0\">:</span><span class=\"me1\">initform</span> <span class=\"nu0\">1.0</span><br/>           <span class=\"sy0\">:</span><span class=\"me1\">type</span> number<br/>           <span class=\"sy0\">:</span><span class=\"me1\">reader</span> radius<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defmethod area <span class=\"br0\">(</span><span class=\"br0\">(</span>shape circle<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>* pi <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"br0\">(</span>radius shape<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>defvar *c* <span class=\"br0\">(</span>make-instance 'circle <span class=\"sy0\">:</span><span class=\"me1\">radius</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>area *c*<span class=\"br0\">)</span><br/>12<span class=\"sy0\">.</span>566370614359172d0</pre>"}, {"lang": "Component Pascal", "loc": 48, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Graphics;<br/><span class=\"kw1\">IMPORT</span> StdLog;<br/><span class=\"kw1\">TYPE</span><br/>\t<span class=\"coMULTI\">(* class *)</span><br/>\tPoint<span class=\"sy0\">*</span> <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> LIMITED <span class=\"kw1\">RECORD</span><br/>\t\tx<span class=\"sy0\">-,</span>y<span class=\"sy0\">-:</span> <span class=\"kw4\">INTEGER</span>; <span class=\"coMULTI\">(* Instance variables *)</span><br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\t<span class=\"coMULTI\">(* method *)</span><br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>p<span class=\"sy0\">:</span> Point<span class=\"br0\">)</span> Abs<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"sy0\">,</span><span class=\"kw3\">NEW</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">RETURN</span> p.<span class=\"me1\">x</span><br/>\t<span class=\"kw1\">END</span> Abs;<br/>\u00a0<br/>\t<span class=\"coMULTI\">(* method *)</span><br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>p<span class=\"sy0\">:</span> Point<span class=\"br0\">)</span> Ord<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"sy0\">,</span><span class=\"kw3\">NEW</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw1\">RETURN</span> p.<span class=\"me1\">y</span><br/>\t<span class=\"kw1\">END</span> Ord;<br/>\u00a0<br/>\t<span class=\"coMULTI\">(* method *)</span><br/>\t<span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>p<span class=\"sy0\">:</span> Point<span class=\"br0\">)</span> Show<span class=\"sy0\">*,</span><span class=\"kw3\">NEW</span>;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Point(\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>p.<span class=\"me1\">x</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span>;<br/>\t\tStdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>p.<span class=\"me1\">y</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\");\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/>\t<span class=\"kw1\">END</span> Show;<br/>\u00a0<br/>\t<span class=\"coMULTI\">(* constructor *)</span><br/>\t<span class=\"kw1\">PROCEDURE</span> NewPoint<span class=\"sy0\">*</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Point;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\tp<span class=\"sy0\">:</span> Point;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\t<span class=\"kw3\">NEW</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span>;p.<span class=\"me1\">x</span> <span class=\"sy0\">:=</span> x;p.<span class=\"me1\">y</span> <span class=\"sy0\">:=</span> y;<br/>\t\t<span class=\"kw1\">RETURN</span> p<br/>\t<span class=\"kw1\">END</span> NewPoint;<br/>\u00a0<br/>\t<span class=\"kw1\">PROCEDURE</span> TestPoint<span class=\"sy0\">*</span>;<br/>\t<span class=\"kw1\">VAR</span><br/>\t\tp<span class=\"sy0\">:</span> Point;<br/>\t<span class=\"kw1\">BEGIN</span><br/>\t\tp <span class=\"sy0\">:=</span> NewPoint<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">20</span><span class=\"br0\">)</span>;<br/>\t\tp.<span class=\"me1\">Show</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Abs:&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>p.<span class=\"me1\">Abs</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\t\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Ord:&gt; \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>p.<span class=\"me1\">Ord</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/>\t<span class=\"kw1\">END</span> TestPoint;<br/><span class=\"kw1\">END</span> Graphics.<br/>\u00a0</pre>"}, {"lang": "Crystal", "loc": 14, "block": "<pre class=\"text highlighted_source\">class MyClass<br/>\u00a0<br/>  def initialize<br/>    @instance_var = 0<br/>  end<br/>\u00a0<br/>  def add_1<br/>    @instance_var += 1<br/>  end<br/>\u00a0<br/>end<br/>\u00a0<br/>my_class = MyClass.new<br/>\u00a0</pre>"}, {"lang": "D", "loc": 43, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> MyClass <span class=\"br0\">{</span><br/>    <span class=\"co1\">//constructor (not necessary if empty)</span><br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> someMethod<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        variable <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// getter method</span><br/>    <span class=\"kw4\">@property</span> <span class=\"kw4\">int</span> variable<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> variable_<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// setter method</span><br/>    <span class=\"kw4\">@property</span> <span class=\"kw4\">int</span> variable<span class=\"br0\">(</span><span class=\"kw4\">int</span> newVariable<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> variable_ <span class=\"sy0\">=</span> newVariable<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">private</span> <span class=\"kw4\">int</span> variable_<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// On default class instances are allocated on the heap</span><br/>    <span class=\"co1\">// The GC will manage their lifetime</span><br/>    <span class=\"kw4\">auto</span> obj <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> MyClass<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// prints 'variable = 0', ints are initialized to 0 by default</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"variable = \"</span><span class=\"sy0\">,</span> obj.<span class=\"me1\">variable</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// invoke the method</span><br/>    obj.<span class=\"me1\">someMethod</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// prints 'variable = 1'</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"variable = \"</span><span class=\"sy0\">,</span> obj.<span class=\"me1\">variable</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// set the variable using setter method</span><br/>    obj.<span class=\"me1\">variable</span> <span class=\"sy0\">=</span> <span class=\"nu0\">99</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// prints 'variable = 99'</span><br/>    writeln<span class=\"br0\">(</span><span class=\"st0\">\"variable = \"</span><span class=\"sy0\">,</span> obj.<span class=\"me1\">variable</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 44, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> SampleClass<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  TMyClass <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><br/>  <span class=\"kw1\">private</span><br/>    FSomeField<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span> <span class=\"co1\">// by convention, fields are usually private and exposed as properties</span><br/>  <span class=\"kw1\">public</span><br/>    <span class=\"kw1\">constructor</span> Create<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">destructor</span> Destroy<span class=\"sy1\">;</span> <span class=\"kw1\">override</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">procedure</span> SomeMethod<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">property</span> SomeField<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span> <span class=\"kw1\">read</span> FSomeField <span class=\"kw1\">write</span> FSomeField<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">constructor</span> TMyClass<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  FSomeField <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">destructor</span> TMyClass<span class=\"sy1\">.</span><span class=\"me1\">Destroy</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"co1\">// free resources, etc</span><br/>\u00a0<br/>  <span class=\"kw1\">inherited</span> Destroy<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TMyClass<span class=\"sy1\">.</span><span class=\"me1\">SomeMethod</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"co1\">// do something</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  lMyClass<span class=\"sy1\">:</span> TMyClass<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  lMyClass <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TMyClass<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">try</span><br/>    lMyClass<span class=\"sy1\">.</span><span class=\"me1\">SomeField</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">99</span><span class=\"sy1\">;</span><br/>    lMyClass<span class=\"sy1\">.</span><span class=\"me1\">SomeMethod</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">finally</span><br/>    lMyClass<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "DM", "loc": 1, "block": "<pre class=\"text highlighted_source\">s</pre>"}, {"lang": "DWScript", "loc": 25, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">type</span><br/>  TMyClass <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><br/>  <span class=\"kw1\">private</span><br/>    FSomeField<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span> <span class=\"co1\">// by convention, fields are usually private and exposed as properties</span><br/>  <span class=\"kw1\">public</span><br/>    <span class=\"kw1\">constructor</span> Create<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">begin</span><br/>       FSomeField <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">procedure</span> SomeMethod<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">property</span> SomeField<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span> <span class=\"kw1\">read</span> FSomeField <span class=\"kw1\">write</span> FSomeField<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TMyClass<span class=\"sy1\">.</span><span class=\"me1\">SomeMethod</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"co1\">// do something</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">var</span> lMyClass<span class=\"sy1\">:</span> TMyClass<span class=\"sy1\">;</span><br/>\u00a0<br/>lMyClass <span class=\"sy1\">:</span><span class=\"sy3\">=</span> new TMyClass<span class=\"sy1\">;</span> <span class=\"co1\">// can also use TMyClass.Create</span><br/>\u00a0<br/>lMyClass<span class=\"sy1\">.</span><span class=\"me1\">SomeField</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">99</span><span class=\"sy1\">;</span><br/>lMyClass<span class=\"sy1\">.</span><span class=\"me1\">SomeMethod</span><span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 8, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> makeColor<span class=\"br0\">(</span>name <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/String\"><span class=\"kw6\">String</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> color <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/to\"><span class=\"kw5\">to</span></a> colorize<span class=\"br0\">(</span>thing <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/String\"><span class=\"kw6\">String</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          return <span class=\"st0\">`$name $thing`</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    return color<br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 14, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib 'gloops<span class=\"br0\">)</span> <span class=\"co1\">; load oo library</span><br/>\u00a0<br/><span class=\"br0\">(</span>define-class Person <span class=\"kw1\">null</span> <span class=\"br0\">(</span><span class=\"kw1\">name</span> <span class=\"br0\">(</span>age <span class=\"sy0\">:</span><span class=\"me1\">initform</span> <span class=\"nu0\">66</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define-method tostring <span class=\"br0\">(</span>Person<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span>  <span class=\"br0\">(</span> format <span class=\"st0\">\"\ud83d\udeb6\u00a0%a \"</span> p<span class=\"sy0\">.</span><span class=\"kw1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define-method mailto <span class=\"br0\">(</span>Person Person<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span> p o<span class=\"br0\">)</span> <span class=\"br0\">(</span>printf <span class=\"st0\">\"From\u00a0%a to\ufe0f \u00a0%a\u00a0: ...\"</span> p o<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; define a sub-class of Person with same methods</span><br/><span class=\"br0\">(</span>define-class Writer <span class=\"br0\">(</span>Person<span class=\"br0\">)</span>  <span class=\"br0\">(</span>books<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define-method tostring <span class=\"br0\">(</span>Writer<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>w<span class=\"br0\">)</span><span class=\"br0\">(</span> format <span class=\"st0\">\"\ud83c\udfa9\u00a0%a\"</span> w<span class=\"sy0\">.</span><span class=\"kw1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>define-method mailto <span class=\"br0\">(</span>Person Writer<span class=\"br0\">)</span> <br/>\t<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>p w<span class=\"br0\">)</span> <span class=\"br0\">(</span>printf <span class=\"st0\">\" From\u00a0%a (age\u00a0%d). Dear writer of\u00a0%a ...\"</span> p p<span class=\"sy0\">.</span>age  w<span class=\"sy0\">.</span>books <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 27, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>class MyClass<br/>{<br/>    object prop Variable\u00a0:: _variable.<br/>\u00a0<br/>    someMethod<br/>    [<br/>        _variable\u00a0:= 1.<br/>    ]    <br/>\u00a0<br/>    constructor new<br/>    [<br/>    ]<br/>}<br/>\u00a0<br/>public program =<br/>[<br/>    // instantiate the class<br/>    var instance\u00a0:= MyClass new.<br/>\u00a0<br/>    // invoke the method<br/>    instance someMethod.<br/>\u00a0<br/>    // get the variable<br/>    console printLine(\"Variable=\",instance Variable).<br/>].</pre>"}, {"lang": "ERRE", "loc": 31, "block": "<pre class=\"text highlighted_source\">PROGRAM CLASS2_DEMO<br/>\u00a0<br/>CLASS QUADRATO<br/>\u00a0<br/>    LOCAL LATO<br/>\u00a0<br/>    PROCEDURE GETLATO(L)<br/>       LATO=L<br/>    END PROCEDURE<br/>\u00a0<br/>    PROCEDURE AREA(-&gt;A)<br/>       A=LATO*LATO<br/>    END PROCEDURE<br/>\u00a0<br/>    PROCEDURE PERIMETRO(-&gt;P)<br/>       P=4*LATO<br/>    END PROCEDURE<br/>\u00a0<br/>END CLASS<br/>\u00a0<br/>NEW P:QUADRATO,Q:QUADRATO<br/>\u00a0<br/>BEGIN<br/>    P_GETLATO(10)<br/>    P_AREA(-&gt;AREAP)<br/>    PRINT(AREAP)<br/>    Q_GETLATO(20)<br/>    Q_PERIMETRO(-&gt;PERIMETROQ)<br/>    PRINT(PERIMETROQ)<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 9, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">type</span> MyClass<span class=\"br0\">(</span>init<span class=\"br0\">)</span> <span class=\"sy0\">=</span>      <span class=\"co1\">// constructor with one argument: init</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">mutable</span> var <span class=\"sy0\">=</span> init  <span class=\"co1\">// a private instance variable</span><br/>  <span class=\"kw1\">member</span> x.<span class=\"me1\">Method</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span>     <span class=\"co1\">// a simple method</span><br/>    var <span class=\"sy0\">&lt;-</span> var <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    printfn <span class=\"st0\">\"%d\"</span> var<br/>\u00a0<br/><span class=\"co1\">// create an instance and use it</span><br/><span class=\"kw1\">let</span> myObject <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> MyClass<span class=\"br0\">(</span><span class=\"nu0\">42</span><span class=\"br0\">)</span><br/>myObject.<span class=\"me1\">Method</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Falcon", "loc": 6, "block": "<pre class=\"falcon highlighted_source\"><span class=\"kw1\">class</span> class_name<span class=\"br0\">[</span> <span class=\"br0\">(</span> param_list <span class=\"br0\">)</span> <span class=\"br0\">]</span> <span class=\"br0\">[</span> <span class=\"kw1\">from</span> inh1<span class=\"br0\">[</span><span class=\"sy0\">,</span> inh2<span class=\"sy0\">,</span> ...<span class=\"sy0\">,</span> inhN<span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span> <span class=\"kw1\">static</span> block <span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span> <a href=\"http://falconpl.org/project_docs/core/functions.html#properties\"><span class=\"kw6\">properties</span></a> declaration <span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span><span class=\"kw1\">init</span> block<span class=\"br0\">]</span><br/>    <span class=\"br0\">[</span>method list<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Factor", "loc": 8, "block": "<pre class=\"text highlighted_source\">TUPLE: my-class foo bar baz\u00a0;<br/>M: my-class quux foo&gt;&gt; 20 +\u00a0;<br/>C: &lt;my-class&gt; my-class<br/>10 20 30 &lt;my-class&gt; quux\u00a0! result: 30<br/>TUPLE: my-child-class &lt; my-class quxx\u00a0;<br/>C: &lt;my-child-class&gt; my-child-class <br/>M: my-child-class foobar 20 &gt;&gt;quux\u00a0;<br/>20 20 30 &lt;my-child-class&gt; foobar quux\u00a0! result: 30</pre>"}, {"lang": "Fancy", "loc": 26, "block": "<pre class=\"text highlighted_source\">class MyClass {<br/>  read_slot: 'instance_var # creates getter method for @instance_var<br/>  @@class_var = []<br/>\u00a0<br/>  def initialize {<br/>    # 'initialize' is the constructor method invoked during 'MyClass.new' by convention<br/>    @instance_var = 0<br/>  }<br/>\u00a0<br/>  def some_method {<br/>    @instance_var = 1<br/>    @another_instance_var = \"foo\"<br/>  }<br/>\u00a0<br/>  # define class methods: define a singleton method on the class object<br/>  def self class_method {<br/>    # ...<br/>  }<br/>\u00a0<br/>  # you can also name the class object itself<br/>  def MyClass class_method {<br/>    # ...<br/>  }<br/>}<br/>\u00a0<br/>myclass = MyClass new</pre>"}, {"lang": "Fantom", "loc": 27, "block": "<pre class=\"text highlighted_source\">class MyClass<br/>{<br/>  // an instance variable<br/>  Int x<br/>\u00a0<br/>  // a constructor, providing default value for instance variable<br/>  new make (Int x\u00a0:= 1)<br/>  {<br/>    this.x = x<br/>  }<br/>\u00a0<br/>  // a method, return double the number x<br/>  public Int double ()<br/>  {<br/>    return 2 * x<br/>  }<br/>}<br/>\u00a0<br/>class Main<br/>{<br/>  public static Void main ()<br/>  {<br/>    a\u00a0:= MyClass (2)  // instantiates the class, with x = 2<br/>    b\u00a0:= MyClass()    // instantiates the class, x defaults to 1<br/>    c\u00a0:= MyClass { x = 3 }  // instantiates the class, sets x to 3<br/>  }<br/>}</pre>"}, {"lang": "Forth", "loc": 14, "block": "<pre class=\"text highlighted_source\">:class MyClass &lt;super Object<br/>\u00a0<br/>  int memvar<br/>\u00a0<br/> \u00a0:m ClassInit: ( -- )<br/>       ClassInit: super<br/>       1 to memvar\u00a0;m<br/>\u00a0<br/> \u00a0:m ~: ( -- )  .\" Final \" show: [ Self ]\u00a0;m<br/>\u00a0<br/> \u00a0:m set: ( n -- )  to memvar\u00a0;m<br/> \u00a0:m show: ( -- ) .\" Memvar = \" memvar .\u00a0;m<br/>\u00a0<br/>;class</pre>"}, {"lang": "Fortran", "loc": 181, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"co1\">!-----------------------------------------------------------------------</span><br/><span class=\"co1\">!Module accuracy defines precision and some constants</span><br/><span class=\"co1\">!-----------------------------------------------------------------------</span><br/><span class=\"kw1\">module</span> accuracy_module<br/>   <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>   <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span>, <span class=\"kw3\">public</span> <span class=\"sy0\">::</span> <span class=\"me2\">rdp</span> <span class=\"sy0\">=</span> <span class=\"kw3\">kind</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>.<span class=\"me1\">d0</span><span class=\"br0\">)</span><br/>   <span class=\"co1\">! constants</span><br/>   <span class=\"kw3\">real</span><span class=\"br0\">(</span>rdp<span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">pi</span><span class=\"sy0\">=</span><span class=\"nu0\">3.141592653589793238462643383279502884197</span>_rdp<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> accuracy_module<br/>\u00a0<br/><span class=\"co1\">!-----------------------------------------------------------------------</span><br/><span class=\"co1\">!Module typedefs_module contains abstract derived type and extended type definitions.</span><br/><span class=\"co1\">! Note that a reserved word \"class\" in Fortran is used to describe</span><br/><span class=\"co1\">! some polymorphic variable  whose data type may vary at run time.</span><br/><span class=\"co1\">!-----------------------------------------------------------------------</span><br/><span class=\"kw1\">module</span> typedefs_module<br/>   <span class=\"kw3\">use</span> accuracy_module<br/>   <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>   <span class=\"kw3\">private</span> <span class=\"co1\">! all</span><br/>   <span class=\"kw3\">public</span> <span class=\"sy0\">::</span> <span class=\"me2\">TPoint</span>, TShape, TCircle, TRectangle, TSquare <span class=\"co1\">! public only these defined derived types</span><br/>\u00a0<br/>   <span class=\"co1\">! abstract derived type</span><br/>   <span class=\"kw3\">type</span>, abstract <span class=\"sy0\">::</span> <span class=\"me2\">TShape</span><br/>      <span class=\"kw3\">real</span><span class=\"br0\">(</span>rdp<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">area</span><br/>      <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=:</span><span class=\"br0\">)</span>,<span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"kw1\">name</span><br/>   <span class=\"kw1\">contains</span><br/>      <span class=\"co1\">! deferred method i.e. abstract method =  must be overridden in extended type</span><br/>      <span class=\"kw1\">procedure</span><span class=\"br0\">(</span>calculate_area<span class=\"br0\">)</span>, deferred,pass <span class=\"sy0\">::</span> <span class=\"me2\">calculate_area</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">type</span> TShape<br/>   <span class=\"co1\">! just declaration of the abstract method/procedure for TShape type</span><br/>   abstract <span class=\"kw1\">interface</span><br/>      <span class=\"kw1\">function</span>  calculate_area<span class=\"br0\">(</span>this<span class=\"br0\">)</span><br/>         <span class=\"kw3\">use</span> accuracy_module<br/>         import TShape <span class=\"co1\">!imports TShape type from host scoping unit and makes it accessible here</span><br/>         <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>         class<span class=\"br0\">(</span>TShape<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>         <span class=\"kw3\">real</span><span class=\"br0\">(</span>rdp<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">calculate_area</span><br/>\u00a0<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> calculate_area<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">interface</span><br/>\u00a0<br/>   <span class=\"co1\">! auxiliary derived type</span><br/>   <span class=\"kw3\">type</span> TPoint<br/>      <span class=\"kw3\">real</span><span class=\"br0\">(</span>rdp<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span>,y<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">type</span> TPoint<br/>\u00a0<br/>   <span class=\"co1\">! extended derived type</span><br/>   <span class=\"kw3\">type</span>, extends<span class=\"br0\">(</span>TShape<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">TCircle</span><br/>      <span class=\"kw3\">real</span><span class=\"br0\">(</span>rdp<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">radius</span><br/>      <span class=\"kw3\">real</span><span class=\"br0\">(</span>rdp<span class=\"br0\">)</span>, <span class=\"kw3\">private</span> <span class=\"sy0\">::</span> <span class=\"me2\">diameter</span><br/>      <span class=\"kw3\">type</span><span class=\"br0\">(</span>TPoint<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">centre</span><br/>   <span class=\"kw1\">contains</span><br/>      <span class=\"kw1\">procedure</span>, pass <span class=\"sy0\">::</span> <span class=\"me2\">calculate_area</span> <span class=\"sy0\">=</span>&gt; calculate_circle_area<br/>      <span class=\"kw1\">procedure</span>, pass <span class=\"sy0\">::</span> <span class=\"me2\">get_circle_diameter</span><br/>      final <span class=\"sy0\">::</span> <span class=\"me2\">finalize_circle</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">type</span> TCircle<br/>\u00a0<br/>   <span class=\"co1\">! extended derived type</span><br/>   <span class=\"kw3\">type</span>, extends<span class=\"br0\">(</span>TShape<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">TRectangle</span><br/>      <span class=\"kw3\">type</span><span class=\"br0\">(</span>TPoint<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">A</span>,B,C,D<br/>   <span class=\"kw1\">contains</span><br/>      <span class=\"kw1\">procedure</span>, pass <span class=\"sy0\">::</span> <span class=\"me2\">calculate_area</span> <span class=\"sy0\">=</span>&gt; calculate_rectangle_area<br/>      final <span class=\"sy0\">::</span> <span class=\"me2\">finalize_rectangle</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">type</span> TRectangle<br/>\u00a0<br/>   <span class=\"co1\">! extended derived type</span><br/>   <span class=\"kw3\">type</span>, extends<span class=\"br0\">(</span>TRectangle<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">TSquare</span><br/>   <span class=\"kw1\">contains</span><br/>      <span class=\"kw1\">procedure</span>, pass <span class=\"sy0\">::</span> <span class=\"me2\">calculate_area</span> <span class=\"sy0\">=</span>&gt; calculate_square_area<br/>      final <span class=\"sy0\">::</span> <span class=\"me2\">finalize_square</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">type</span> TSquare<br/>\u00a0<br/> <span class=\"kw1\">contains</span><br/>\u00a0<br/>   <span class=\"co1\">! finalization subroutines for each type</span><br/>   <span class=\"co1\">! They called recursively, i.e. finalize_rectangle</span><br/>   <span class=\"co1\">! will be called after finalize_square subroutine</span><br/>   <span class=\"kw1\">subroutine</span> finalize_circle<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>      <span class=\"kw3\">type</span><span class=\"br0\">(</span>TCircle<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Deleting TCircle object\"</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> finalize_circle<br/>\u00a0<br/>   <span class=\"kw1\">subroutine</span> finalize_rectangle<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>      <span class=\"kw3\">type</span><span class=\"br0\">(</span>TRectangle<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Deleting also TRectangle object\"</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> finalize_rectangle<br/>\u00a0<br/>   <span class=\"kw1\">subroutine</span> finalize_square<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>      <span class=\"kw3\">type</span><span class=\"br0\">(</span>TSquare<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"Deleting TSquare object\"</span><br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> finalize_square<br/>\u00a0<br/>   <span class=\"kw1\">function</span> calculate_circle_area<span class=\"br0\">(</span>this<span class=\"br0\">)</span><br/>      <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>      class<span class=\"br0\">(</span>TCircle<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>      <span class=\"kw3\">real</span><span class=\"br0\">(</span>rdp<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">calculate_circle_area</span><br/>      this<span class=\"sy0\">%</span>area <span class=\"sy0\">=</span> pi <span class=\"sy0\">*</span> this<span class=\"sy0\">%</span>radius<span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/>      calculate_circle_area <span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>area<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> calculate_circle_area<br/>\u00a0<br/>   <span class=\"kw1\">function</span> calculate_rectangle_area<span class=\"br0\">(</span>this<span class=\"br0\">)</span><br/>      <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>      class<span class=\"br0\">(</span>TRectangle<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>      <span class=\"kw3\">real</span><span class=\"br0\">(</span>rdp<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">calculate_rectangle_area</span><br/>      <span class=\"co1\">! here could be more code</span><br/>      this<span class=\"sy0\">%</span>area <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>      calculate_rectangle_area <span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>area<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> calculate_rectangle_area<br/>\u00a0<br/>   <span class=\"kw1\">function</span> calculate_square_area<span class=\"br0\">(</span>this<span class=\"br0\">)</span><br/>      <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>      class<span class=\"br0\">(</span>TSquare<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>      <span class=\"kw3\">real</span><span class=\"br0\">(</span>rdp<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">calculate_square_area</span><br/>      <span class=\"co1\">! here could be more code</span><br/>      this<span class=\"sy0\">%</span>area <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>      calculate_square_area <span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>area<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> calculate_square_area<br/>\u00a0<br/>   <span class=\"kw1\">function</span>  get_circle_diameter<span class=\"br0\">(</span>this<span class=\"br0\">)</span><br/>      <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>      class<span class=\"br0\">(</span>TCircle<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>      <span class=\"kw3\">real</span><span class=\"br0\">(</span>rdp<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">get_circle_diameter</span><br/>      this <span class=\"sy0\">%</span> diameter <span class=\"sy0\">=</span> <span class=\"nu0\">2.0</span>_rdp <span class=\"sy0\">*</span> this <span class=\"sy0\">%</span> radius<br/>      get_circle_diameter <span class=\"sy0\">=</span> this <span class=\"sy0\">%</span> diameter<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> get_circle_diameter<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> typedefs_module<br/>\u00a0<br/><span class=\"co1\">!-----------------------------------------------------------------------</span><br/><span class=\"co1\">!Main program</span><br/><span class=\"co1\">!-----------------------------------------------------------------------</span><br/><span class=\"kw1\">program</span>    rosetta_class<br/>   <span class=\"kw3\">use</span> accuracy_module<br/>   <span class=\"kw3\">use</span> typedefs_module<br/>   <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>   <span class=\"co1\">! we need this subroutine in order to show the finalization</span><br/>   <span class=\"kw1\">call</span> test_types<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/> <span class=\"kw1\">contains</span><br/>\u00a0<br/>   <span class=\"kw1\">subroutine</span> test_types<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>      <span class=\"co1\">! declare object of type TPoint</span><br/>      <span class=\"kw3\">type</span><span class=\"br0\">(</span>TPoint<span class=\"br0\">)</span>, <span class=\"kw3\">target</span> <span class=\"sy0\">::</span> <span class=\"me2\">point</span><br/>      <span class=\"co1\">! declare object of type TCircle</span><br/>      <span class=\"kw3\">type</span><span class=\"br0\">(</span>TCircle<span class=\"br0\">)</span>,<span class=\"kw3\">target</span> <span class=\"sy0\">::</span> <span class=\"me2\">circle</span><br/>      <span class=\"co1\">! declare object of type TSquare</span><br/>      <span class=\"kw3\">type</span><span class=\"br0\">(</span>TSquare<span class=\"br0\">)</span>,<span class=\"kw3\">target</span> <span class=\"sy0\">::</span> <span class=\"me2\">square</span><br/>\u00a0<br/>      <span class=\"co1\">! declare pointers</span><br/>      class<span class=\"br0\">(</span>TPoint<span class=\"br0\">)</span>, <span class=\"kw3\">pointer</span> <span class=\"sy0\">::</span> <span class=\"me2\">ppo</span><br/>      class<span class=\"br0\">(</span>TCircle<span class=\"br0\">)</span>, <span class=\"kw3\">pointer</span> <span class=\"sy0\">::</span> <span class=\"me2\">pci</span><br/>      class<span class=\"br0\">(</span>TSquare<span class=\"br0\">)</span>, <span class=\"kw3\">pointer</span> <span class=\"sy0\">::</span> <span class=\"me2\">psq</span><br/>\u00a0<br/>      <span class=\"co1\">!constructor</span><br/>      point <span class=\"sy0\">=</span> TPoint<span class=\"br0\">(</span><span class=\"nu0\">5</span>.<span class=\"me1\">d0</span>,<span class=\"nu0\">5</span>.<span class=\"me1\">d0</span><span class=\"br0\">)</span><br/>      ppo <span class=\"sy0\">=</span>&gt; point<br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"st0\">\"x=\"</span>,point<span class=\"sy0\">%</span>x,<span class=\"st0\">\"y=\"</span>,point<span class=\"sy0\">%</span>y<br/>\u00a0<br/>      pci <span class=\"sy0\">=</span>&gt; circle<br/>\u00a0<br/>      pci <span class=\"sy0\">%</span> radius <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> pci <span class=\"sy0\">%</span> radius<br/>      <span class=\"co1\">! write(*,*) pci\u00a0% diameter\u00a0!No,it is a PRIVATE component</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> pci <span class=\"sy0\">%</span> get_circle_diameter<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> pci <span class=\"sy0\">%</span> calculate_area<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> pci <span class=\"sy0\">%</span> area<br/>\u00a0<br/>      psq <span class=\"sy0\">=</span>&gt; square<br/>\u00a0<br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> psq <span class=\"sy0\">%</span> area<br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> psq <span class=\"sy0\">%</span> calculate_area<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> psq <span class=\"sy0\">%</span> area<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> test_types<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> rosetta_class<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 27, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Type</span> MyClass<br/>  <span class=\"kw1\">Private</span>:<br/>    myInt_ <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">Public</span>:<br/>    <span class=\"kw1\">Declare</span> Constructor<span class=\"br0\">(</span>myInt_ <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Declare</span> Property MyInt<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>    <span class=\"kw1\">Declare</span> <span class=\"kw1\">Function</span> Treble<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Type</span><br/>\u00a0<br/>Constructor MyClass<span class=\"br0\">(</span>myInt_ <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>   This.<span class=\"me1\">myInt_</span> = myInt_<br/><span class=\"kw1\">End</span> Constructor<br/>\u00a0<br/>Property MyClass.<span class=\"me1\">MyInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">Return</span> myInt_<br/><span class=\"kw1\">End</span> Property<br/>\u00a0<br/><span class=\"kw1\">Function</span> MyClass.<span class=\"me1\">Treble</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">Return</span> <span class=\"nu0\">3</span> * myInt_<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> mc <span class=\"kw1\">As</span> MyClass = MyClass<span class=\"br0\">(</span><span class=\"nu0\">24</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> mc.<span class=\"me1\">MyInt</span>, mc.<span class=\"me1\">Treble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit the program\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Go", "loc": 50, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"co1\">// a basic \"class.\"</span><br/><span class=\"co1\">// In quotes because Go does not use that term or have that exact concept.</span><br/><span class=\"co1\">// Go simply has types that can have methods.</span><br/><span class=\"kw1\">type</span> picnicBasket <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    nServings <span class=\"kw4\">int</span> <span class=\"co1\">// \"instance variables\"</span><br/>    corkscrew <span class=\"kw4\">bool</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// a method (yes, Go uses the word method!)</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>b <span class=\"sy3\">*</span>picnicBasket<span class=\"sy1\">)</span> happy<span class=\"sy1\">()</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> b<span class=\"sy3\">.</span>nServings &gt; <span class=\"nu0\">1</span> &amp;&amp; b<span class=\"sy3\">.</span>corkscrew<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// a \"constructor.\"</span><br/><span class=\"co1\">// Also in quotes as Go does not have that exact mechanism as part of the</span><br/><span class=\"co1\">// language.  A common idiom however, is a function with the name new&lt;Type&gt;,</span><br/><span class=\"co1\">// that returns a new object of the type, fully initialized as needed and</span><br/><span class=\"co1\">// ready to use.  It makes sense to use this kind of constructor function when</span><br/><span class=\"co1\">// non-trivial initialization is needed.  In cases where the concise syntax</span><br/><span class=\"co1\">// shown is sufficient however, it is not idiomatic to define the function.</span><br/><span class=\"co1\">// Rather, code that needs a new object would simply contain &amp;picnicBasket{...</span><br/><span class=\"kw4\">func</span> newPicnicBasket<span class=\"sy1\">(</span>nPeople <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy3\">*</span>picnicBasket <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// arbitrary code to interpret arguments, check resources, etc.</span><br/>    <span class=\"co1\">// ...</span><br/>    <span class=\"co1\">// return data new object.</span><br/>    <span class=\"co1\">// this is the concise syntax.  there are other ways of doing it.</span><br/>    <span class=\"kw1\">return</span> &amp;picnicBasket<span class=\"sy1\">{</span>nPeople<span class=\"sy1\">,</span> nPeople &gt; <span class=\"nu0\">0</span><span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// how to instantiate it.</span><br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> pb picnicBasket          <span class=\"co1\">// create on stack (probably)</span><br/>    pbl <span class=\"sy2\">:=</span> picnicBasket<span class=\"sy1\">{}</span>        <span class=\"co1\">// equivalent to above</span><br/>    pbp <span class=\"sy2\">:=</span> <span class=\"sy3\">&amp;</span>picnicBasket<span class=\"sy1\">{}</span>       <span class=\"co1\">// create on heap.  pbp is pointer to object.</span><br/>    pbn <span class=\"sy2\">:=</span> <span class=\"kw3\">new</span><span class=\"sy1\">(</span>picnicBasket<span class=\"sy1\">)</span>     <span class=\"co1\">// equivalent to above</span><br/>    forTwo <span class=\"sy2\">:=</span> newPicnicBasket<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span> <span class=\"co1\">// using constructor</span><br/>    <span class=\"co1\">// equivalent to above.  field names, called keys, are optional.</span><br/>    forToo <span class=\"sy2\">:=</span> &amp;picnicBasket<span class=\"sy1\">{</span>nServings<span class=\"sy1\">:</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> corkscrew<span class=\"sy1\">:</span> <span class=\"kw2\">true</span><span class=\"sy1\">}</span><br/>\u00a0<br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>pb<span class=\"sy3\">.</span>nServings<span class=\"sy1\">,</span> pb<span class=\"sy3\">.</span>corkscrew<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>pbl<span class=\"sy3\">.</span>nServings<span class=\"sy1\">,</span> pbl<span class=\"sy3\">.</span>corkscrew<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>pbp<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>pbn<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>forTwo<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>forToo<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 15, "block": "<pre class=\"groovy highlighted_source\"><span class=\"coMULTI\">/** Ye olde classe declaration */</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> Stuff <span class=\"br0\">{</span><br/>    <span class=\"coMULTI\">/** Heare bee anne instance variable declared */</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> guts<br/>\u00a0<br/>    <span class=\"coMULTI\">/** This constuctor converts bits into Stuff */</span><br/>    Stuff<span class=\"br0\">(</span>injectedGuts<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        guts <span class=\"sy0\">=</span> injectedGuts<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/** Brethren and sistren, let us flangulate with this fine flangulating method */</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> flangulate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"This stuff is flangulating its guts: ${guts}\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 33, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">class</span> Shape a <span class=\"kw1\">where</span><br/>    perimeter <span class=\"sy0\">::</span> a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/>    area      <span class=\"sy0\">::</span> a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/><span class=\"coMULTI\">{- A type class Shape. Types belonging to Shape must support two<br/>methods, perimeter and area. -}</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Rectangle <span class=\"sy0\">=</span> Rectangle <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/><span class=\"coMULTI\">{- A new type with a single constructor. In the case of data types<br/>which have only one constructor, we conventionally give the<br/>constructor the same name as the type, though this isn't mandatory. -}</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Circle <span class=\"sy0\">=</span> Circle <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/>\u00a0<br/><span class=\"kw1\">instance</span> Shape Rectangle <span class=\"kw1\">where</span><br/>    perimeter <span class=\"br0\">(</span>Rectangle width height<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> width <span class=\"sy0\">+</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> height<br/>    area      <span class=\"br0\">(</span>Rectangle width height<span class=\"br0\">)</span> <span class=\"sy0\">=</span> width <span class=\"sy0\">*</span> height<br/><span class=\"coMULTI\">{- We made Rectangle an instance of the Shape class by<br/>implementing perimeter, area\u00a0:: Rectangle -&gt; Int. -}</span><br/>\u00a0<br/><span class=\"kw1\">instance</span> Shape Circle <span class=\"kw1\">where</span><br/>    perimeter <span class=\"br0\">(</span>Circle radius<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a> <span class=\"sy0\">*</span> radius<br/>    area      <span class=\"br0\">(</span>Circle radius<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a> <span class=\"sy0\">*</span> radius<span class=\"sy0\">^</span><span class=\"nu0\">2</span><br/>\u00a0<br/>apRatio <span class=\"sy0\">::</span> Shape a <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/><span class=\"coMULTI\">{- A simple polymorphic function. -}</span><br/>apRatio shape <span class=\"sy0\">=</span> area shape <span class=\"sy0\">/</span> perimeter shape<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> apRatio <span class=\"sy0\">$</span> Circle <span class=\"nu0\">5</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> apRatio <span class=\"sy0\">$</span> Rectangle <span class=\"nu0\">5</span> <span class=\"nu0\">5</span><br/><span class=\"coMULTI\">{- The correct version of apRatio (and hence the correct<br/>implementations of perimeter and area) is chosen based on the type<br/>of the argument. -}</span></pre>"}, {"lang": "Icon and Unicon", "loc": 21, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">class</span> Example <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"co1\"># 'x' is a field in class</span><br/>\u00a0<br/>  <span class=\"co1\"># method definition</span><br/>  <span class=\"kw1\">method</span> double <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> x<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\"># 'initially' block is called on instance construction</span><br/>  <span class=\"kw1\">initially</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">/</span>x <span class=\"co1\"># if x is null (not given), then set field to 0</span><br/>      <span class=\"kw1\">then</span> self<span class=\"sy0\">.</span><span class=\"me1\">x</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <br/>      <span class=\"kw1\">else</span> self<span class=\"sy0\">.</span><span class=\"me1\">x</span> <span class=\"sy0\">:=</span> x<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  x1 <span class=\"sy0\">:=</span> Example <span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\"># new instance with default value of x</span><br/>  x2 <span class=\"sy0\">:=</span> Example <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"co1\"># new instance with given value of x</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span>x1<span class=\"sy0\">.</span><span class=\"me1\">x</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span>x2<span class=\"sy0\">.</span><span class=\"me1\">x</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">write</span> <span class=\"br0\">(</span>x2<span class=\"sy0\">.</span><span class=\"me1\">double</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\"># call a method</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 11, "block": "<pre class=\"j highlighted_source\">coclass <span class=\"st_h\">'exampleClass'</span><br/>\u00a0<br/>exampleMethod=: monad define<br/> <span class=\"nu0\">1</span>+exampleInstanceVariable<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>create=: monad define<br/> <span class=\"st_h\">'this is the constructor'</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>exampleInstanceVariable=: <span class=\"nu0\">0</span></pre>"}, {"lang": "Java", "loc": 19, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> MyClass<span class=\"br0\">{</span><br/>\u00a0<br/>  <span class=\"co1\">// instance variable</span><br/>  <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> variable<span class=\"sy0\">;</span>  <span class=\"co1\">// Note: instance variables are usually \"private\"</span><br/>\u00a0<br/>  <span class=\"co3\">/**<br/>  * The constructor<br/>  */</span><br/>  <span class=\"kw1\">public</span> MyClass<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"co1\">// creates a new instance</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co3\">/**<br/>  * A method<br/>  */</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> someMethod<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <span class=\"kw1\">this</span>.<span class=\"me1\">variable</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 24, "block": "<pre class=\"javascript highlighted_source\"><span class=\"co1\">//Constructor function.</span><br/><span class=\"kw1\">function</span> Car<span class=\"br0\">(</span>brand<span class=\"sy0\">,</span> weight<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">this</span>.<span class=\"me1\">brand</span> <span class=\"sy0\">=</span> brand<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">this</span>.<span class=\"me1\">weight</span> <span class=\"sy0\">=</span> weight <span class=\"sy0\">||</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span> <span class=\"co1\">// Resort to default value (with 'or' notation).</span><br/><span class=\"br0\">}</span><br/>Car.<span class=\"kw1\">prototype</span>.<span class=\"me1\">getPrice</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Method of Car.</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>.<span class=\"me1\">price</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Truck<span class=\"br0\">(</span>brand<span class=\"sy0\">,</span> size<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">this</span>.<span class=\"me1\">car</span> <span class=\"sy0\">=</span> Car<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">this</span>.<span class=\"me1\">car</span><span class=\"br0\">(</span>brand<span class=\"sy0\">,</span> <span class=\"nu0\">2000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Call another function, modifying the \"this\" object (e.g. \"superconstructor\".)</span><br/>  <span class=\"kw1\">this</span>.<span class=\"me1\">size</span> <span class=\"sy0\">=</span> size<span class=\"sy0\">;</span> <span class=\"co1\">// Custom property for just this object.</span><br/><span class=\"br0\">}</span><br/>Truck.<span class=\"kw1\">prototype</span> <span class=\"sy0\">=</span> Car.<span class=\"kw1\">prototype</span><span class=\"sy0\">;</span> <span class=\"co1\">// Also \"import\" the prototype from Car.</span><br/>\u00a0<br/><span class=\"kw1\">var</span> cars <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"co1\">// Some example car objects.</span><br/>  <span class=\"kw1\">new</span> Car<span class=\"br0\">(</span><span class=\"st0\">\"Mazda\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"kw1\">new</span> Truck<span class=\"br0\">(</span><span class=\"st0\">\"Volvo\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>cars.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  alert<span class=\"br0\">(</span>cars<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">brand</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> cars<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">weight</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> cars<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">size</span> <span class=\"sy0\">+</span> <span class=\"st0\">\", \"</span> <span class=\"sy0\">+</span><br/>      <span class=\"br0\">(</span>cars<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">instanceof</span> Car<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>cars<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">instanceof</span> Truck<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 20, "block": "<pre class=\"text highlighted_source\">abstract type Mammal end<br/>habitat(::Mammal) = \"planet Earth\"<br/>\u00a0<br/>struct Whale &lt;: Mammal<br/>    mass::Float64<br/>    habitat::String<br/>end<br/>Base.show(io::IO,\u00a0::Whale) = print(io, \"a whale\")<br/>habitat(w::Whale) = w.habitat<br/>\u00a0<br/>struct Wolf &lt;: Mammal<br/>    mass::Float64<br/>end<br/>Base.show(io::IO,\u00a0::Wolf) = print(io, \"a wolf\")<br/>\u00a0<br/>arr = [Whale(1000, \"ocean\"), Wolf(50)]<br/>println(\"Type of $arr is \", typeof(arr))<br/>for a in arr<br/>    println(\"Habitat of $a: \", habitat(a))<br/>end</pre>"}, {"lang": "Kotlin", "loc": 8, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> MyClass<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> myInt<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   fun treble<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> myInt <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> mc <span class=\"sy0\">=</span> MyClass<span class=\"br0\">(</span><span class=\"nu0\">24</span><span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"${mc.myInt}, ${mc.treble()}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>define mytype =&gt; type {<br/>\tdata<br/>\t\tpublic id::integer\t\t= 0,<br/>\t\tpublic val::string\t\t= '',<br/>\t\tpublic rand::integer\t= 0<br/>\u00a0<br/>\tpublic onCreate() =&gt; {<br/>\t\t// \"onCreate\" runs when instance created, populates .rand<br/>\t\t.rand = math_random(50,1)<br/>\t}<br/>\tpublic asString() =&gt; {<br/>\t\treturn 'has a value of: \"'+.val+'\" and a rand number of \"'+.rand+'\"'<br/>\t}<br/>\u00a0<br/>}<br/>\u00a0<br/>local(x = mytype)<br/>#x-&gt;val = '99 Bottles of beer'<br/>#x-&gt;asString // outputs 'has a value of: \"99 Bottles of beer\" and a rand number of \"48\"'</pre>"}, {"lang": "LFE", "loc": 33, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>defmodule simple-object<br/>  <span class=\"br0\">(</span>export all<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> fish-class <span class=\"br0\">(</span>species<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"<br/>  This is the constructor used internally, once the children and fish id are<br/>  known.<br/>  \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>habitat '<span class=\"st0\">\"water\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>method-<span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">case</span> method-<span class=\"kw1\">name</span><br/>        <span class=\"br0\">(</span>'habitat<br/>          <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>self<span class=\"br0\">)</span> habitat<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>'species<br/>          <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>self<span class=\"br0\">)</span> species<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> get-method <span class=\"br0\">(</span>object method-<span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\"<br/>  This is a generic function, used to call into the given object (class<br/>  instance).<br/>  \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> object method-<span class=\"kw1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; define object methods</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> get-habitat <span class=\"br0\">(</span>object<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Get a variable set in the class.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> <span class=\"br0\">(</span>get-method object 'habitat<span class=\"br0\">)</span> object<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> get-species <span class=\"br0\">(</span>object<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Get a variable passed when constructing the object.\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> <span class=\"br0\">(</span>get-method object 'species<span class=\"br0\">)</span> object<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 19, "block": "<pre class=\"text highlighted_source\">----------------------------------------<br/>-- @desc      Class \"MyClass\"<br/>-- @file      parent script \"MyClass\"<br/>----------------------------------------<br/>\u00a0<br/>-- instance variable<br/>property _myvar<br/>\u00a0<br/>-- constructor<br/>on new (me)<br/>  me._myvar = 23<br/>  return me<br/>end<br/>\u00a0<br/>-- a method<br/>on doubleAndPrint (me)<br/>  me._myvar = me._myvar * 2<br/>  put me._myvar<br/>end</pre>"}, {"lang": "Lisaac", "loc": 24, "block": "<pre class=\"text highlighted_source\">Section Header<br/>\u00a0<br/>+ name\u00a0:= SAMPLE;<br/>\u00a0<br/>Section Inherit<br/>\u00a0<br/>- parent\u00a0: OBJECT\u00a0:= OBJECT;<br/>\u00a0<br/>Section Private<br/>\u00a0<br/>+ variable\u00a0: INTEGER &lt;- 0;<br/>\u00a0<br/>Section Public<br/>\u00a0<br/>- some_method &lt;- (<br/>  variable\u00a0:= 1;<br/>);<br/>\u00a0<br/>- main &lt;- (<br/>  + sample\u00a0: SAMPLE;<br/>\u00a0<br/>  sample\u00a0:= SAMPLE.clone;<br/>  sample.some_method;<br/>);</pre>"}, {"lang": "Logtalk", "loc": 20, "block": "<pre class=\"logtalk highlighted_source\"><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(metaclass,<br/>    <span class=\"kw3\">instantiates</span>(metaclass)).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(new<span class=\"sy1\">/</span><span class=\"nu0\">2</span>).<br/>    new(<span class=\"re0\">Instance</span>, <span class=\"re0\">Value</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"kw4\">self</span>(<span class=\"re0\">Class</span>),<br/>        <span class=\"kw4\">create_object</span>(<span class=\"re0\">Instance</span>, [<span class=\"kw3\">instantiates</span>(<span class=\"re0\">Class</span>)], [], [state(<span class=\"re0\">Value</span>)]).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(class,<br/>    <span class=\"kw3\">instantiates</span>(metaclass)).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(method<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>    method(<span class=\"re0\">Value</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"sy1\">::</span>state(<span class=\"re0\">Value</span>).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">private</span>(state<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.</pre>"}, {"lang": "Lua", "loc": 14, "block": "<pre class=\"lua highlighted_source\">myclass <span class=\"sy0\">=</span> <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>__index <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>z<span class=\"sy0\">,</span>i<span class=\"br0\">)</span> <span class=\"kw1\">return</span> myclass<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">end</span><span class=\"sy0\">,</span> <span class=\"co1\">--this makes class variables a possibility</span><br/>setvar <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>z<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> z<span class=\"sy0\">.</span>var <span class=\"sy0\">=</span> n <span class=\"kw1\">end</span><br/><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>__call <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>z<span class=\"sy0\">,</span>n<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw3\">setmetatable</span><span class=\"br0\">(</span><span class=\"br0\">{</span>var <span class=\"sy0\">=</span> n<span class=\"br0\">}</span><span class=\"sy0\">,</span> myclass<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>instance <span class=\"sy0\">=</span> myclass<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>instance<span class=\"sy0\">.</span>var<span class=\"br0\">)</span> <span class=\"co1\">--&gt;3</span><br/>\u00a0<br/>instance<span class=\"sy0\">:</span>setvar<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>instance<span class=\"sy0\">.</span>var<span class=\"br0\">)</span> <span class=\"co1\">--&gt;6</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 105, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Class zz {<br/>      module bb {<br/>            Superclass A {<br/>                  unique:<br/>                  counter<br/>            }<br/>            Superclass B1 {<br/>                  unique:<br/>                  counter<br/>            }<br/>            Superclass B2 {<br/>                  unique:<br/>                  counter<br/>            }<br/>            \\\\ We can make a group Alfa with a member, another group Beta<br/>            \\\\ Group Beta can't see parent group, but can see own member groups<br/>            \\\\ Group Alfa can see everything in nested groups, in any level,<br/>            \\\\ but can't see inside modules/functions/operator/value/set<br/>            Group Alfa {<br/>                  Group Beta { }<br/>            }<br/>            Alfa=A<br/>            Alfa.Beta=B1<br/>            \\\\ we make 3 groups for marshaling counters<br/>            \\\\ each group get a superclass<br/>            Marshal1=A<br/>            Marshal2=B1<br/>            Marshal3=B2<br/>            \\\\ Now we want to add functionality7<br/>            \\\\ Inc module to add 1 to counter<br/>            \\\\ a Value function to return counter<br/>            \\\\ Without Value a group return a copy<br/>            \\\\ If a group has a value then we can get copy using Group(nameofgroup)<br/>            \\\\ just delete Group Marshal1 and remove Rem when we make Marshal1 using a class function<br/>            Group Marshal1 {<br/>                  Module Inc {<br/>                        For SuperClass {.counter++}<br/>                  }<br/>                  Value {<br/>                        For SuperClass {=.counter}<br/>                  }<br/>            }<br/>            Class AnyMarshal {<br/>                  Module Inc {<br/>                        For SuperClass {.counter++}<br/>                  }<br/>                  Value {<br/>                        For SuperClass {=.counter}<br/>                  }<br/>            }<br/>            \\\\ here we merge groups<br/>            Rem\u00a0: Marshal1=AnyMarshal()<br/>            Marshal2=AnyMarshal()<br/>            Marshal3=AnyMarshal()<br/>\u00a0<br/>            \\\\ So now we see counters (three zero)<br/>            Print Marshal1, Marshal2, Marshal3 \\\\ 0, 0, 0<br/>            \\\\ Now we prepare Alfa and Alfa.Beta groups<br/>            Group Alfa {<br/>                  Group Beta {<br/>                        Function SuperClass.Counter {<br/>                              For SuperClass {<br/>                                    =.counter<br/>                              }           <br/>                        }      <br/>                  }<br/>                  Module PrintData {<br/>                        For SuperClass {<br/>                              Print .counter, This.Beta.SuperClass.Counter()<br/>                        }<br/>                  }<br/>            }<br/>            \\\\ some marshaling to counters<br/>            Marshal1.inc<br/>            Marshal2.inc<br/>            Marshal2.inc<br/>            Marshal3.inc<br/>            \\\\ lets print results<br/>            Print Marshal1, Marshal2, Marshal3 \\\\ 1   2   1<br/>            \\\\ Calling Alfa.PrintData<br/>            Alfa.PrintData  \\\\ 1   2<br/>            \\\\ Merging a group in a group make a change to superclass pointer inside group<br/>            Alfa.Beta=B2 \\\\ change supeclass<br/>            Alfa.PrintData  \\\\ 1   1<br/>            For i=1 to 10\u00a0: Marshal3.inc\u00a0: Next i<br/>            Alfa.PrintData  \\\\ 1   11<br/>            Alfa.Beta=B1 \\\\ change supeclass<br/>            Alfa.PrintData  \\\\ 1   2<br/>            Epsilon=Alfa<br/>            Print Valid(@alfa as epsilon), Valid(@alfa.beta as epsilon.beta) \\\\ -1   -1<br/>            Epsilon.PrintData \\\\ 1 2<br/>            Alfa.Beta=B2 \\\\ change supeclass<br/>            Alfa.PrintData  \\\\ 1   11<br/>            Epsilon.PrintData \\\\ 1 2<br/>            \\\\ validation being for top group superclass and all members if are same<br/>            \\\\ but not for inner superclasses. This maybe change in later revisions of language.<br/>            Print Valid(@alfa as epsilon), Valid(@alfa.beta as epsilon.beta) \\\\ -1  0<br/>\u00a0<br/>      }<br/>}<br/>Dim A(10)<br/>A(3)=zz()<br/>A(3).bb<br/>\u00a0</pre>"}, {"lang": "MATLAB", "loc": 12, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> GenericClassInstance = GenericClass<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/varargin.html\"><span class=\"kw2\">varargin</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> isempty<span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/varargin.html\"><span class=\"kw2\">varargin</span></a><span class=\"br0\">)</span> <span class=\"co1\">%No input arguments             </span><br/>            GenericClassInstance.<span class=\"me1\">classVariable</span> = <span class=\"nu0\">0</span>; <span class=\"co1\">%Generates a struct</span><br/>        <span class=\"kw1\">else</span><br/>            GenericClassInstance.<span class=\"me1\">classVariable</span> = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/varargin.html\"><span class=\"kw2\">varargin</span></a><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span>; <span class=\"co1\">%Generates a struct</span><br/>        <span class=\"kw1\">end</span><br/>\u00a0<br/>        <span class=\"co1\">%Converts the struct to a class of type GenericClass</span><br/>        GenericClassInstance = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/class.html\"><span class=\"kw2\">class</span></a><span class=\"br0\">(</span>GenericClassInstance,<span class=\"co2\">'GenericClass'</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Nemerle", "loc": 19, "block": "<pre class=\"text highlighted_source\">public class MyClass<br/>{<br/>    public this() { }  // the constructor in Nemerle is always named 'this'<br/>\u00a0<br/>    public MyVariable\u00a0: int<br/>    {<br/>        get;<br/>        set;<br/>    }<br/>\u00a0<br/>    public MyMethod()\u00a0: void<br/>    {<br/>    }<br/>\u00a0<br/>}<br/>\u00a0<br/>def myInstance = MyClass();                                           // no 'new' keyword needed<br/>myInstance.MyVariable = 42;                                           // set MyVariable<br/>System.Console.WriteLine($\"My variable is $(myInstance.MyVariable)\")  // get MyVariable</pre>"}, {"lang": "NetRexx", "loc": 31, "block": "<pre class=\"rexx highlighted_source\">class ClassExample<br/>\u00a0<br/>  properties private <span class=\"co1\">-- class scope</span><br/>  foo = int<br/>\u00a0<br/>  properties public  <span class=\"co1\">-- publicly visible</span><br/>  bar = boolean<br/>\u00a0<br/>  properties indirect <span class=\"co1\">-- generates bean patterns</span><br/>  baz = String<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  method main<span class=\"br0\">(</span>args=String<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> static <span class=\"co1\">-- main method</span><br/>    clsex = ClassExample<span class=\"br0\">(</span><span class=\"br0\">)</span>   <span class=\"co1\">-- instantiate</span><br/>    clsex<span class=\"sy0\">.</span>foo = <span class=\"nu0\">42</span><br/>    clsex<span class=\"sy0\">.</span>baz = <span class=\"st0\">'forty-two'</span><br/>    clsex<span class=\"sy0\">.</span>bar = <span class=\"nu0\">0</span> <span class=\"co1\">-- boolean false</span><br/>    clsex<span class=\"sy0\">.</span>test<span class=\"br0\">(</span>clsex<span class=\"sy0\">.</span>foo<span class=\"br0\">)</span><br/>    clsex<span class=\"sy0\">.</span>test<span class=\"br0\">(</span>clsex<span class=\"sy0\">.</span>bar<span class=\"br0\">)</span><br/>    clsex<span class=\"sy0\">.</span>test<span class=\"br0\">(</span>clsex<span class=\"sy0\">.</span>baz<span class=\"br0\">)</span><br/>\u00a0<br/>  method test<span class=\"br0\">(</span>s=int<span class=\"br0\">)</span><br/>    aap = <span class=\"nu0\">1</span> <span class=\"co1\">-- local (stack) variable</span><br/>    <span class=\"kw1\">say</span> s aap<br/>\u00a0<br/>  method test<span class=\"br0\">(</span>s=String<span class=\"br0\">)</span><br/>    noot = <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">say</span> s noot<br/>\u00a0<br/>  method test<span class=\"br0\">(</span>s=boolean<span class=\"br0\">)</span><br/>    mies = <span class=\"nu0\">3</span><br/>    <span class=\"kw1\">say</span> s mies</pre>"}, {"lang": "Nim", "loc": 27, "block": "<pre class=\"text highlighted_source\">type MyClass = object<br/>  name: int<br/>\u00a0<br/>proc initMyClass(): MyClass =<br/>  result.name = 2<br/>\u00a0<br/>proc someMethod(m: var MyClass) =<br/>  m.name = 1<br/>\u00a0<br/>var mc = initMyClass()<br/>mc.someMethod()<br/>\u00a0<br/>type<br/>  Gender = enum male, female, other<br/>\u00a0<br/>  MyOtherClass = object<br/>    name: string<br/>    gender: Gender<br/>    age: Natural<br/>\u00a0<br/>proc initMyOtherClass(name; gender = female; age = 50): auto =<br/>  MyOtherClass(name: name, gender: gender, age: age)<br/>\u00a0<br/>var person1 = initMyOtherClass(\"Jane\")<br/>echo person1.name, \" \", person1.gender, \" \", person1.age # Jane female 50<br/>var person2 = initMyOtherClass(\"John\", male, 23)<br/>echo person2.name, \" \", person2.gender, \" \", person2.age # John male 23</pre>"}, {"lang": "Oberon-2", "loc": 22, "block": "<pre class=\"oberon2 highlighted_source\"><span class=\"kw1\">MODULE</span> M;<br/>\u00a0<br/>   <span class=\"kw1\">TYPE</span><br/>      T <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> TDesc;<br/>      TDesc <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>         x<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><br/>      <span class=\"kw1\">END</span>;<br/>\u00a0<br/>   <span class=\"kw1\">PROCEDURE</span> New<span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> T;<br/>      <span class=\"kw1\">VAR</span> t<span class=\"sy0\">:</span> T;<br/>   <span class=\"kw1\">BEGIN</span><br/>      <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span>; t.<span class=\"me1\">x</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>      <span class=\"kw1\">RETURN</span> t<br/>   <span class=\"kw1\">END</span> New;<br/>\u00a0<br/>\u00a0<br/>   <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>t<span class=\"sy0\">:</span> T<span class=\"br0\">)</span> Increment<span class=\"sy0\">*</span>;<br/>   <span class=\"kw1\">BEGIN</span><br/>      <span class=\"kw3\">INC</span><span class=\"br0\">(</span>t.<span class=\"me1\">x</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">END</span> Increment;<br/>\u00a0<br/><span class=\"kw1\">END</span> M.</pre>"}, {"lang": "Objeck", "loc": 33, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> MyClass <span class=\"br0\">{</span><br/>    @var <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    New<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> SomeMethod<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    \t@var <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> SetVar<span class=\"br0\">(</span>var <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      @var <span class=\"sy0\">:=</span> var<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> GetVar<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> @var<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">class</span> Test <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      inst <span class=\"sy0\">:=</span> MyClass<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      inst<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetVar</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      inst<span class=\"sy0\">-&gt;</span><span class=\"me1\">SomeMethod</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      inst<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetVar</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      inst<span class=\"sy0\">-&gt;</span><span class=\"me1\">SetVar</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      inst<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetVar</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Object Pascal", "loc": 35, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">type</span><br/> MyClass <span class=\"sy3\">=</span> <span class=\"kw4\">object</span><br/>            variable<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>            <span class=\"kw1\">constructor</span> init<span class=\"sy1\">;</span><br/>            <span class=\"kw1\">destructor</span> done<span class=\"sy1\">;</span><br/>            <span class=\"kw1\">procedure</span> someMethod<span class=\"sy1\">;</span><br/>           <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">constructor</span> MyClass<span class=\"sy1\">.</span><span class=\"me1\">init</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  variable <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> MyClass<span class=\"sy1\">.</span><span class=\"me1\">someMethod</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">begin</span><br/>  variable <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/> instance<span class=\"sy1\">:</span> MyClass<span class=\"sy1\">;</span> <span class=\"coMULTI\">{ as variable }</span><br/> pInstance<span class=\"sy1\">:</span> <span class=\"sy2\">^</span>MyClass<span class=\"sy1\">;</span> <span class=\"coMULTI\">{ on free store }</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/> <span class=\"coMULTI\">{ create instances }</span><br/> instance<span class=\"sy1\">.</span><span class=\"me1\">init</span><span class=\"sy1\">;</span><br/> <span class=\"kw3\">new</span><span class=\"br0\">(</span>pInstance<span class=\"sy1\">,</span> init<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\">{ alternatively: pInstance\u00a0:= new(MyClass, init); }</span><br/>\u00a0<br/> <span class=\"coMULTI\">{ call method }</span><br/> instance<span class=\"sy1\">.</span><span class=\"me1\">someMethod</span><span class=\"sy1\">;</span><br/> pInstance<span class=\"sy2\">^</span><span class=\"sy1\">.</span><span class=\"me1\">someMethod</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"coMULTI\">{ get rid of the objects }</span><br/> instance<span class=\"sy1\">.</span><span class=\"me1\">done</span><span class=\"sy1\">;</span><br/> <span class=\"kw3\">dispose</span><span class=\"br0\">(</span>pInstance<span class=\"sy1\">,</span> done<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Objective-C", "loc": 11, "block": "<pre class=\"objc highlighted_source\"><span class=\"co2\">// There are no class variables, so static variables are used.</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">int</span> myClassVariable <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>;<br/>\u00a0<br/><span class=\"kw1\">@interface</span> MyClass <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> variable; <span class=\"co2\">// instance variable</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"sy0\">-</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>variable; <span class=\"co2\">// Typical accessor - you should use the same name as the variable</span><br/>\u00a0<br/><span class=\"kw1\">@end</span></pre>"}, {"lang": "OCaml", "loc": 5, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">class</span> my_class <span class=\"sy0\">=</span><br/>  object <span class=\"br0\">(</span>self<span class=\"br0\">)</span><br/>    <span class=\"kw1\">val</span> <span class=\"kw1\">mutable</span> variable <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">method</span> some_method <span class=\"sy0\">=</span> variable <span class=\"sy0\">&lt;-</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span></pre>"}, {"lang": "Oforth", "loc": 2, "block": "<pre class=\"text highlighted_source\">Object Class new: MyClass(att)<br/>MyClass method: initialize(v)  v\u00a0:= att\u00a0;</pre>"}, {"lang": "Ol", "loc": 29, "block": "<pre class=\"oorexx highlighted_source\">p = <span class=\"sy0\">.</span>point~new<br/>c = <span class=\"sy0\">.</span>circle~new<br/>\u00a0<br/>p~print<br/>c~print<br/>\u00a0<br/>::class point<br/>::method init<br/>  <span class=\"kw1\">expose</span> x y<br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> x = <span class=\"nu0\">0</span>, y = <span class=\"nu0\">0</span>   <span class=\"co1\">-- defaults to 0 for any non-specified coordinates</span><br/>\u00a0<br/>::<span class=\"kw1\">attribute</span> x<br/>::<span class=\"kw1\">attribute</span> y<br/>\u00a0<br/>::method print<br/>  <span class=\"kw1\">expose</span> x y<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"A point at location (\"</span><span class=\"sy0\">||</span>x<span class=\"st0\">\",\"</span>y<span class=\"st0\">\")\"</span><br/>\u00a0<br/>::class circle subclass point<br/>::method init<br/>  <span class=\"kw1\">expose</span> radius<br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> x = <span class=\"nu0\">0</span>, y = <span class=\"nu0\">0</span>, radius = <span class=\"nu0\">0</span><br/>  self~init:super<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>        <span class=\"co1\">-- call superclass constructor</span><br/>\u00a0<br/>::<span class=\"kw1\">attribute</span> radius<br/>\u00a0<br/>::method print<br/>  <span class=\"kw1\">expose</span> radius<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"A circle of radius\"</span> radius <span class=\"st0\">\"centered at location (\"</span><span class=\"sy0\">||</span>self~x<span class=\"st0\">\",\"</span>self~y<span class=\"st0\">\")\"</span></pre>"}, {"lang": "ooRexx", "loc": 29, "block": "<pre class=\"oorexx highlighted_source\">p = <span class=\"sy0\">.</span>point~new<br/>c = <span class=\"sy0\">.</span>circle~new<br/>\u00a0<br/>p~print<br/>c~print<br/>\u00a0<br/>::class point<br/>::method init<br/>  <span class=\"kw1\">expose</span> x y<br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> x = <span class=\"nu0\">0</span>, y = <span class=\"nu0\">0</span>   <span class=\"co1\">-- defaults to 0 for any non-specified coordinates</span><br/>\u00a0<br/>::<span class=\"kw1\">attribute</span> x<br/>::<span class=\"kw1\">attribute</span> y<br/>\u00a0<br/>::method print<br/>  <span class=\"kw1\">expose</span> x y<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"A point at location (\"</span><span class=\"sy0\">||</span>x<span class=\"st0\">\",\"</span>y<span class=\"st0\">\")\"</span><br/>\u00a0<br/>::class circle subclass point<br/>::method init<br/>  <span class=\"kw1\">expose</span> radius<br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> x = <span class=\"nu0\">0</span>, y = <span class=\"nu0\">0</span>, radius = <span class=\"nu0\">0</span><br/>  self~init:super<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>        <span class=\"co1\">-- call superclass constructor</span><br/>\u00a0<br/>::<span class=\"kw1\">attribute</span> radius<br/>\u00a0<br/>::method print<br/>  <span class=\"kw1\">expose</span> radius<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"A circle of radius\"</span> radius <span class=\"st0\">\"centered at location (\"</span><span class=\"sy0\">||</span>self~x<span class=\"st0\">\",\"</span>self~y<span class=\"st0\">\")\"</span></pre>"}, {"lang": "OxygenBasic", "loc": 77, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>class SuperString<br/>\u00a0<br/>indexbase 1<br/>\u00a0<br/>union<br/>  bstring s<br/>  sys     bs<br/>  sys     *y<br/>  int     *i<br/>  byte    *b<br/>  float   *f<br/>end union<br/>\u00a0<br/>method space(sys n)<br/>  s=space n  <br/>end method<br/>\u00a0<br/>method delete()<br/>  freememory bs\u00a0: bs=0<br/>end method<br/>\u00a0<br/>method clear()<br/>  sys j, le=length<br/>  if le then<br/>    for j=1 to le\u00a0: b[j]=0\u00a0: next<br/>  end if<br/>end method<br/>\u00a0<br/>method length() as sys<br/>  if bs then return i[0]<br/>end method<br/>\u00a0<br/>method resize(sys n)<br/>  sys le=length<br/>  if n&lt;le<br/>    s=left s,n<br/>  elseif n&gt;le<br/>    s+=nuls n-le<br/>  end if<br/>end method<br/>\u00a0<br/>method fill(string f)<br/>  sys j, ls=length, lf=len f<br/>  for j=1 to ls step lf<br/>    mid s,j,f<br/>  next<br/>end method<br/>\u00a0<br/>method constructor()<br/>end method<br/>\u00a0<br/>method destructor<br/>  delete<br/>end method<br/>\u00a0<br/>end class<br/>\u00a0<br/>\u00a0<br/>'#recordof SuperString<br/>\u00a0<br/>'=====<br/>'TESTS<br/>'=====<br/>\u00a0<br/>new SuperString ss<br/>'<br/>ss.space 100<br/>ss.resize 8<br/>ss.fill \"abc\"<br/>'<br/>print ss.s    'result abcabcab<br/>print ss.b[3] 'result 99: ascii for 'c'<br/>'<br/>del ss<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 24, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">class</span> <span class=\"re2\">Something</span><br/>     <span class=\"kw1\">feat</span><br/>        name <span class=\"co1\">%% immutable, public attribute (called a \"feature\")</span><br/>     <span class=\"kw1\">attr</span><br/>        count <span class=\"co1\">%% mutable, private attribute</span><br/>\u00a0<br/>     <span class=\"co1\">%% public method which is used as an initializer</span><br/>     <span class=\"kw1\">meth</span> <span class=\"re4\">init</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span><br/>        <span class=\"kw1\">self</span><span class=\"sy0\">.</span>name = N<br/>        count <span class=\"sy0\">:=</span> 0<br/>     <span class=\"kw1\">end</span><br/>\u00a0<br/>     <span class=\"co1\">%% public method</span><br/>     <span class=\"kw1\">meth</span> <span class=\"re4\">increase</span><br/>        count <span class=\"sy0\">:=</span> <span class=\"sy0\">@</span>count <span class=\"sy0\">+</span> 1<br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"co1\">%% create an instance</span><br/>  Object = <span class=\"br0\">{</span>New Something init<span class=\"br0\">(</span><span class=\"st0\">\"object\"</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">%% call a method</span><br/>  <span class=\"br0\">{</span>Object increase<span class=\"br0\">}</span></pre>"}, {"lang": "Pascal", "loc": 19, "block": "<pre class=\"perl highlighted_source\"><span class=\"br0\">{</span><br/>     <span class=\"co1\"># a class is a package (i.e. a namespace) with methods in it</span><br/>    <a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> MyClass<span class=\"sy0\">;</span><br/>\u00a0<br/>     <span class=\"co1\"># a constructor is a function that returns a blessed reference</span><br/>    <span class=\"kw2\">sub</span> <span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$class</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">{</span>variable <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">$class</span><span class=\"sy0\">;</span><br/>         <span class=\"co1\"># the instance object is a hashref in disguise.</span><br/>         <span class=\"co1\"># (it can be a ref to anything.)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>     <span class=\"co1\"># an instance method is a function that takes an object as first argument.</span><br/>     <span class=\"co1\"># the -&gt; invocation syntax takes care of that nicely, see Usage paragraph below.</span><br/>    <span class=\"kw2\">sub</span> some_method <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>variable<span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 19, "block": "<pre class=\"perl highlighted_source\"><span class=\"br0\">{</span><br/>     <span class=\"co1\"># a class is a package (i.e. a namespace) with methods in it</span><br/>    <a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> MyClass<span class=\"sy0\">;</span><br/>\u00a0<br/>     <span class=\"co1\"># a constructor is a function that returns a blessed reference</span><br/>    <span class=\"kw2\">sub</span> <span class=\"kw2\">new</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$class</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/bless.html\"><span class=\"kw3\">bless</span></a> <span class=\"br0\">{</span>variable <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"re0\">$class</span><span class=\"sy0\">;</span><br/>         <span class=\"co1\"># the instance object is a hashref in disguise.</span><br/>         <span class=\"co1\"># (it can be a ref to anything.)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>     <span class=\"co1\"># an instance method is a function that takes an object as first argument.</span><br/>     <span class=\"co1\"># the -&gt; invocation syntax takes care of that nicely, see Usage paragraph below.</span><br/>    <span class=\"kw2\">sub</span> some_method <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$self</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$self</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>variable<span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 7, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> Camel <span class=\"br0\">{</span> <span class=\"kw1\">has</span> Int <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">humps</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> Camel <span class=\"re0\">$a</span> <span class=\"sy0\">.=</span> <span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$a</span><span class=\"sy0\">.</span><span class=\"me1\">humps</span><span class=\"sy0\">;</span>  <span class=\"co1\"># Automatically generated accessor method.</span><br/>\u00a0<br/><span class=\"kw1\">my</span> Camel <span class=\"re0\">$b</span> <span class=\"sy0\">.=</span> <span class=\"kw2\">new</span><span class=\"sy0\">:</span> humps <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$b</span><span class=\"sy0\">.</span><span class=\"me1\">humps</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PHL", "loc": 23, "block": "<pre class=\"text highlighted_source\">module classes;<br/>\u00a0<br/>extern printf;<br/>\u00a0<br/>class @MyClass {<br/>\tfield @Integer myField { get:get_myField, set:set_myField };<br/>\u00a0<br/>\tnew [<br/>\t\tthis.set_myField(2);<br/>\t]<br/>\u00a0<br/>\t@Void method [<br/>\t\tthis.set_myField(this::get_myField + 1);<br/>\t]<br/>};<br/>\u00a0<br/>@Integer main [<br/>\tvar obj = new @MyClass;<br/>\tprintf(\"obj.myField:\u00a0%i\\n\", obj::get_myField);<br/>\tobj::method;<br/>\tprintf(\"obj.myField:\u00a0%i\\n\", obj::get_myField);<br/>\treturn 0;<br/>]</pre>"}, {"lang": "PHP", "loc": 12, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">class</span> MyClass <span class=\"br0\">{</span><br/>    <span class=\"kw2\">public</span> static <span class=\"re0\">$classVar</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">public</span> <span class=\"re0\">$instanceVar</span><span class=\"sy0\">;</span> <span class=\"co1\">// can also initialize it here</span><br/>    <span class=\"kw2\">function</span> __construct<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">instanceVar</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">function</span> someMethod<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">instanceVar</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">self</span><span class=\"sy0\">::</span><span class=\"re0\">$classVar</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"re0\">$myObj</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> MyClass<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 8, "block": "<pre class=\"text highlighted_source\">(class +Rectangle)<br/># dx dy<br/>\u00a0<br/>(dm area&gt; ()  # Define a a method that calculates the rectangle's area<br/>   (* (: dx) (: dy)) )<br/>\u00a0<br/>(println  # Create a rectangle, and print its area<br/>   (area&gt; (new '(+Rectangle) 'dx 3 'dy 4)) )</pre>"}, {"lang": "Pop11", "loc": 4, "block": "<pre class=\"text highlighted_source\">uses objectclass;<br/>define\u00a0:class MyClass;<br/>    slot value = 1;<br/>enddefine;</pre>"}, {"lang": "PowerShell", "loc": 30, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/>Add<span class=\"sy0\">-</span><span class=\"kw2\">Type</span> <span class=\"sy0\">-</span>Language CSharp <span class=\"sy0\">-</span>TypeDefinition <span class=\"sy0\">@</span><span class=\"st0\">'<br/>public class MyClass<br/>{<br/>    public MyClass()<br/>    {<br/>    }<br/>    public void SomeMethod()<br/>    {<br/>    }<br/>    private int _variable;<br/>    public int Variable<br/>    {<br/>        get { return _variable; }<br/>        set { _variable = value; }<br/>    }<br/>    public static void Main()<br/>    {<br/>        // instantiate it<br/>        MyClass instance = new MyClass();<br/>        // invoke the method<br/>        instance.SomeMethod();<br/>        // set the variable<br/>        instance.Variable = 99;<br/>        // get the variable<br/>        System.Console.WriteLine( \"Variable=\" + instance.Variable.ToString() );<br/>    }<br/>}<br/>'</span><span class=\"sy0\">@</span><br/>\u00a0</pre>"}, {"lang": "Processing", "loc": 17, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">class</span> ProgrammingLanguage<br/><span class=\"br0\">{</span><br/>   <span class=\"co1\">// instance variable:</span><br/>   <span class=\"kw1\">private</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> name<span class=\"sy0\">;</span><br/>   <span class=\"co1\">// constructor (let's use it to give the instance variable a value):</span><br/>   <span class=\"kw1\">public</span> ProgrammingLanguage<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> name<span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><br/>      <span class=\"kw1\">this</span>.<span class=\"me1\">name</span> <span class=\"sy0\">=</span> name<span class=\"sy0\">;</span><br/>      <span class=\"co1\">// note use of \"this\" to distinguish the instance variable from the argument</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"co1\">// a method:</span><br/>   <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> sayHello<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><br/>      println<span class=\"br0\">(</span><span class=\"st0\">\"Hello from the programming language \"</span> <span class=\"sy0\">+</span> name<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"co1\">// the method has no argument or local variable called \"name\", so we can omit the \"this\"</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PureBasic", "loc": 56, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Interface</span> OO_Interface <span class=\"co1\">; Interface for any value of this type </span><br/>  Get.i<span class=\"br0\">(</span><span class=\"br0\">)</span>        <br/>  Set<span class=\"br0\">(</span>Value.i<span class=\"br0\">)</span> <br/>  ToString.s<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  Destroy<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndInterface</span> <br/>\u00a0<br/><span class=\"kw1\">Structure</span> OO_Structure <span class=\"co1\">; The *VTable structure  </span><br/>  Get.i<br/>  Set.i<br/>  ToString.i<br/>  Destroy.i<br/><span class=\"kw1\">EndStructure</span> <br/>\u00a0<br/><span class=\"kw1\">Structure</span> OO_Var  <br/>  <span class=\"sy0\">*</span>VirtualTable.OO_Structure<br/>  Value.i <br/><span class=\"kw1\">EndStructure</span> <br/>\u00a0<br/><span class=\"kw1\">Procedure</span> OO_Get<span class=\"br0\">(</span><span class=\"sy0\">*</span>Self.OO_Var<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"sy0\">*</span>Self<span class=\"sy0\">\\</span>Value<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> OO_Set<span class=\"br0\">(</span><span class=\"sy0\">*</span>Self.OO_Var, n<span class=\"br0\">)</span><br/>  <span class=\"sy0\">*</span>Self<span class=\"sy0\">\\</span>Value <span class=\"sy0\">=</span> n<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.s OO_ToString<span class=\"br0\">(</span><span class=\"sy0\">*</span>Self.OO_Var<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>Self<span class=\"sy0\">\\</span>Value<span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Create_OO<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">*</span>p.OO_Var<span class=\"sy0\">=</span><span class=\"kw2\">AllocateMemory</span><span class=\"br0\">(</span><span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>OO_Var<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>p<br/>    <span class=\"sy0\">*</span>p<span class=\"sy0\">\\</span>VirtualTable<span class=\"sy0\">=</span>?VTable<br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"sy0\">*</span>p<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> OO_Destroy<span class=\"br0\">(</span><span class=\"sy0\">*</span>Self.OO_Var<span class=\"br0\">)</span><br/>  <span class=\"kw2\">FreeMemory</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>Self<span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">DataSection</span><br/>  VTable:<br/>  <span class=\"kw1\">Data</span>.i @OO_Get<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Data</span>.i @OO_Set<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Data</span>.i @OO_ToString<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Data</span>.i @OO_Destroy<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndDataSection</span><br/>\u00a0<br/><span class=\"co1\">;- Test the code</span><br/><span class=\"sy0\">*</span>Foo.OO_Interface <span class=\"sy0\">=</span> Create_OO<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"sy0\">*</span>Foo<span class=\"sy0\">\\</span>Set<span class=\"br0\">(</span><span class=\"nu0\">341</span><span class=\"br0\">)</span><br/><span class=\"kw2\">MessageRequester</span><span class=\"br0\">(</span><span class=\"st0\">\"Info\"</span>, <span class=\"st0\">\"Foo = \"</span> <span class=\"sy0\">+</span> <span class=\"sy0\">*</span>Foo<span class=\"sy0\">\\</span>ToString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"sy0\">*</span>Foo<span class=\"sy0\">\\</span>Destroy<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 38, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">class</span> MyClass:<br/>    name2 <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"co1\"># Class attribute</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"st0\">\"\"\"<br/>        Constructor  (Technically an initializer rather than a true \"constructor\")<br/>        \"\"\"</span><br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">name1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"co1\"># Instance attribute</span><br/>\u00a0<br/>    <span class=\"kw1\">def</span> someMethod<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"st0\">\"\"\"<br/>        Method<br/>        \"\"\"</span><br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">name1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        MyClass.<span class=\"me1\">name2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><br/>\u00a0<br/>\u00a0<br/>myclass <span class=\"sy0\">=</span> MyClass<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># class name, invoked as a function is the constructor syntax.</span><br/>\u00a0<br/><span class=\"kw1\">class</span> MyOtherClass:<br/>    count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>  <span class=\"co1\"># Population of \"MyOtherClass\" objects</span><br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> name<span class=\"sy0\">,</span> gender<span class=\"sy0\">=</span><span class=\"st0\">\"Male\"</span><span class=\"sy0\">,</span> age<span class=\"sy0\">=</span><span class=\"kw2\">None</span><span class=\"br0\">)</span>:<br/>        <span class=\"st0\">\"\"\"<br/>        One initializer required, others are optional (with different defaults)<br/>        \"\"\"</span><br/>        MyOtherClass.<span class=\"me1\">count</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">name</span> <span class=\"sy0\">=</span> name<br/>        <span class=\"kw2\">self</span>.<span class=\"me1\">gender</span> <span class=\"sy0\">=</span> gender<br/>        <span class=\"kw1\">if</span> age <span class=\"kw1\">is</span> <span class=\"kw1\">not</span> <span class=\"kw2\">None</span>:<br/>            <span class=\"kw2\">self</span>.<span class=\"me1\">age</span> <span class=\"sy0\">=</span> age<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__del__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        MyOtherClass.<span class=\"me1\">count</span> -<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>person1 <span class=\"sy0\">=</span> MyOtherClass<span class=\"br0\">(</span><span class=\"st0\">\"John\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> person1.<span class=\"me1\">name</span><span class=\"sy0\">,</span> person1.<span class=\"me1\">gender</span>  <span class=\"co1\"># \"John Male\"</span><br/><span class=\"kw1\">print</span> person1.<span class=\"me1\">age</span>                   <span class=\"co1\"># Raises AttributeError exception!</span><br/>person2 <span class=\"sy0\">=</span> MyOtherClass<span class=\"br0\">(</span><span class=\"st0\">\"Jane\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Female\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">23</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> person2.<span class=\"me1\">name</span><span class=\"sy0\">,</span> person2.<span class=\"me1\">gender</span><span class=\"sy0\">,</span> person2.<span class=\"me1\">age</span>  <span class=\"co1\"># \"Jane Female 23\"</span></pre>"}, {"lang": "R", "loc": 13, "block": "<pre class=\"text highlighted_source\">#You define a class simply by setting the class attribute of an object<br/>circS3 &lt;- list(radius=5.5, centre=c(3, 4.2))<br/>class(circS3) &lt;- \"circle\"<br/>\u00a0<br/>#plot is a generic function, so we can define a class specific method by naming it plot.classname<br/>plot.circle &lt;- function(x, ...)<br/>{<br/>   t &lt;- seq(0, 2*pi, length.out=200)<br/>   plot(x$centre[1] + x$radius*cos(t),<br/>      x$centre[2] + x$radius*sin(t),<br/>      type=\"l\", ...)<br/>}<br/>plot(circS3)</pre>"}, {"lang": "Racket", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define fish%<br/>  (class object%<br/>    (super-new)<br/>\u00a0<br/>   \u00a0;; an instance variable &amp; constructor argument<br/>    (init-field size)<br/>\u00a0<br/>   \u00a0;; a new method<br/>    (define/public (eat)<br/>      (displayln \"gulp!\"))))<br/>\u00a0<br/>;; constructing an instance<br/>(new fish% [size 50])<br/>\u00a0</pre>"}, {"lang": "RapidQ", "loc": 17, "block": "<pre class=\"text highlighted_source\">TYPE MyClass EXTENDS QObject<br/>    Variable AS INTEGER<br/>\u00a0<br/>    CONSTRUCTOR<br/>        Variable = 0<br/>    END CONSTRUCTOR<br/>\u00a0<br/>    SUB someMethod<br/>        MyClass.Variable = 1<br/>    END SUB<br/>END TYPE<br/>\u00a0<br/>' create an instance<br/>DIM instance AS MyClass<br/>\u00a0<br/>' invoke the method<br/>instance.someMethod</pre>"}, {"lang": "Raven", "loc": 7, "block": "<pre class=\"text highlighted_source\">class Alpha<br/>    'I am Alpha.' as greeting<br/>    define say_hello<br/>        greeting print<br/>\u00a0<br/>class Beta extend Alpha<br/>    'I am Beta!' as greeting</pre>"}, {"lang": "REALbasic", "loc": 16, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>Class NumberContainer<br/>  <span class=\"kw2\">Private</span> TheNumber <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw2\">Sub</span> Constructor(InitialNumber <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>)<br/>    TheNumber = InitialNumber<br/>  <span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/>  <span class=\"kw2\">Function</span> Number() <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>    Return TheNumber<br/>  <span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>  <span class=\"kw2\">Sub</span> Number(Assigns NewNumber <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>)<br/>    TheNumber = NewNumber<br/>  <span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/><span class=\"kw3\">End</span> Class<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 39, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol [<br/>    Title: \"Classes\"<br/>    URL: http://rosettacode.org/wiki/Classes<br/>]</span><br/>\u00a0<br/><span class=\"co1\">; Objects are derived from the base 'object!' type. REBOL uses a</span><br/><span class=\"co1\">; prototyping object system, so any object can be treated as a class,</span><br/><span class=\"co1\">; from which to derive others.</span><br/>\u00a0<br/>cowboy: <span class=\"kw3\">make</span> <span class=\"kw1\">object!</span> <span class=\"br0\">[</span><br/>\tname: <span class=\"st0\">\"Tex\"</span>  <span class=\"co1\">; Instance variable.</span><br/>\thi: <span class=\"kw2\">does</span> <span class=\"br0\">[</span>   <span class=\"co1\">; Method.</span><br/>\t\t<span class=\"kw3\">print</span> <span class=\"br0\">[</span>self<span class=\"sy0\">/</span>name <span class=\"st0\">\": Howdy!\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; I create two instances of the 'cowboy' class.</span><br/>\u00a0<br/>tex: <span class=\"kw3\">make</span> cowboy <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>roy: <span class=\"kw3\">make</span> cowboy <span class=\"br0\">[</span><br/>\tname: <span class=\"st0\">\"Roy\"</span>  <span class=\"co1\">; Override 'name' property.</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"st0\">\"Say 'hello', boys:\"</span>  tex<span class=\"sy0\">/</span>hi  roy<span class=\"sy0\">/</span>hi  <br/><span class=\"kw3\">print</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/><span class=\"co1\">; Now I'll subclass 'cowboy'. Subclassing looks a lot like instantiation: </span><br/>\u00a0<br/>legend: <span class=\"kw3\">make</span> cowboy <span class=\"br0\">[</span><br/>\tdeed: <span class=\"st0\">\"...\"</span><br/>\tboast: <span class=\"kw2\">does</span> <span class=\"br0\">[</span><br/>\t\t<span class=\"kw3\">print</span> <span class=\"br0\">[</span>self<span class=\"sy0\">/</span>name <span class=\"st0\">\": I once\"</span> self<span class=\"sy0\">/</span>deed <span class=\"st0\">\"!\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">; Instancing the legend:</span><br/>\u00a0<br/>pecos: <span class=\"kw3\">make</span> legend <span class=\"br0\">[</span>name: <span class=\"st0\">\"Pecos Bill\"</span>  deed: <span class=\"st0\">\"lassoed a twister\"</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"st0\">\"Howdy, Pecos!\"</span>  pecos<span class=\"sy0\">/</span>hi<br/><span class=\"kw3\">print</span> <span class=\"st0\">\"Tell us about yourself?\"</span>  pecos<span class=\"sy0\">/</span>boast</pre>"}, {"lang": "Ring", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>New point { x=10  y=20  z=30  print() }<br/>Class Point x y z func print see x + nl + y + nl + z + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 14, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> MyClass<br/>\u00a0<br/>  <span class=\"kw1\">def</span> initialize<br/>    <span class=\"re1\">@instance_var</span> = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> add_1<br/>    <span class=\"re1\">@instance_var</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>my_class = MyClass.<span class=\"me1\">new</span> <span class=\"co1\">#allocates an object and calls it's initialize method, then returns it.</span><br/>\u00a0</pre>"}, {"lang": "Rust", "loc": 32, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>struct MyClass {<br/>    variable: i32, // member variable = instance variable<br/>}<br/>\u00a0<br/>impl MyClass {<br/>    // member function = method, with its implementation<br/>    fn some_method(&amp;mut self) {<br/>        self.variable = 1;<br/>    }<br/>\u00a0<br/>    // constructor, with its implementation<br/>    fn new() -&gt; MyClass {<br/>        // Here could be more code.<br/>        MyClass { variable: 0 }<br/>    }<br/>}<br/>\u00a0<br/>fn main () {<br/>    // Create an instance in the stack.<br/>    let mut instance = MyClass::new();<br/>\u00a0<br/>    // Create an instance in the heap.<br/>    let mut p_instance = Box::&lt;_&gt;::new(MyClass::new());<br/>\u00a0<br/>    // Invoke method on both istances,<br/>    instance.some_method();<br/>    p_instance.some_method();<br/>\u00a0<br/>    // Both instances are automatically deleted when their scope ends.<br/>}<br/>\u00a0</pre>"}, {"lang": "Sather", "loc": 21, "block": "<pre class=\"text highlighted_source\">class CLASSTEST is<br/>  readonly attr x:INT; -- give a public getter, not a setter<br/>  private attr y:INT;  -- no getter, no setter<br/>  attr z:INT;          -- getter and setter<br/>\u00a0<br/>  -- constructor<br/>  create(x, y, z:INT):CLASSTEST is<br/>    res\u00a0:CLASSTEST\u00a0:= new; -- or res\u00a0::= new<br/>    res.x\u00a0:= x; <br/>    res.y\u00a0:= y;<br/>    res.z\u00a0:= z;<br/>    return res;<br/>  end;<br/>\u00a0<br/>  -- a getter for the private y summed to s<br/>  getPrivateY(s:INT):INT is<br/>    -- y is not shadowed so we can write y instead of<br/>    -- self.y<br/>    return y + s;<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 24, "block": "<pre class=\"scala highlighted_source\"><span class=\"coMULTI\">/** This class implicitly includes a constructor which accepts an Int and<br/> *  creates \"val variable1: Int\" with that value.<br/> */</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> MyClass<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> myMethod<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Acts like a getter, getter automatically generated.</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> variable2 <span class=\"sy0\">=</span> <span class=\"st0\">\"asdf\"</span> <span class=\"co1\">// Another instance variable; a public var this time</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"co1\">// An auxilliary constructor that instantiates with a default value</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> HelloObject <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello\"</span> <span class=\"co1\">// Not private, so getter auto-generated</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/** Demonstrate use of our example class.<br/> */</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Call<span class=\"sy0\">_</span>an<span class=\"sy0\">_</span>object<span class=\"sy0\">_</span>method <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello\"</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> m <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> MyClass<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> MyClass<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>HelloObject.<span class=\"me1\">s</span><span class=\"br0\">)</span> <span class=\"co1\">// prints \"Hello\" by object getterHelloObject</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>m.<span class=\"me1\">myMethod</span><span class=\"br0\">)</span> <span class=\"co1\">// prints 0</span><br/>  println<span class=\"br0\">(</span>n.<span class=\"me1\">myMethod</span><span class=\"br0\">)</span> <span class=\"co1\">// prints 3</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 14, "block": "<pre class=\"scheme highlighted_source\">  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>withdraw amount<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> balance amount<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">begin</span> <span class=\"br0\">(</span><span class=\"kw1\">set!</span> balance <span class=\"br0\">(</span><span class=\"sy0\">-</span> balance amount<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               balance<span class=\"br0\">)</span><br/>        <span class=\"st0\">\"Insufficient funds\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>deposit amount<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">set!</span> balance <span class=\"br0\">(</span><span class=\"sy0\">+</span> balance amount<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    balance<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>dispatch m<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq?</span> m 'withdraw<span class=\"br0\">)</span> withdraw<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq?</span> m 'deposit<span class=\"br0\">)</span> deposit<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span>error <span class=\"st0\">\"Unknown request -- MAKE-ACCOUNT\"</span><br/>                       m<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  dispatch<span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 9, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> MyClass<span class=\"br0\">(</span>instance_var<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    method add<span class=\"br0\">(</span>num<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        instance_var <span class=\"sy0\">+</span>= num;<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var obj = MyClass<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>;   <span class=\"co1\"># `instance_var` will be set to 3</span><br/>obj.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>;             <span class=\"co1\"># calls the add() method</span><br/>say obj.<span class=\"me1\">instance_var</span>;   <span class=\"co1\"># prints the value of `instance_var`: 8</span></pre>"}, {"lang": "Simula", "loc": 19, "block": "<pre class=\"text highlighted_source\">BEGIN<br/>    CLASS MyClass(instanceVariable);<br/>    INTEGER instanceVariable;<br/>    BEGIN<br/>        PROCEDURE doMyMethod(n);<br/>        INTEGER n;<br/>        BEGIN<br/>            Outint(instanceVariable, 5);<br/>            Outtext(\" + \");<br/>            Outint(n, 5);<br/>            Outtext(\" = \");<br/>            Outint(instanceVariable + n, 5);<br/>            Outimage<br/>        END;<br/>    END;<br/>    REF(MyClass) myObject;<br/>    myObject\u00a0:- NEW MyClass(5);<br/>    myObject.doMyMethod(2)<br/>END</pre>"}, {"lang": "Slate", "loc": 12, "block": "<pre class=\"text highlighted_source\">prototypes define: #MyPrototype &amp;parents: {Cloneable} &amp;slots: #(instanceVar).<br/>MyPrototype traits addSlot: #classVar.<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"83fbc3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(MyPrototype traits) new<br/>[<br/>  x clone `&gt;&gt; [instanceVar: 0. ]<br/>].<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"a0d8e0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(MyPrototype traits) someMethod<br/>[<br/>  x instanceVar = 1 /\\ (x classVar = 3)<br/>].</pre>"}, {"lang": "Smalltalk", "loc": 15, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Object</span> subclass: <span class=\"re1\">#MyClass</span><br/>  instanceVariableNames: <span class=\"st0\">'instanceVar'</span><br/>  classVariableNames: <span class=\"st0\">'classVar'</span><br/>  poolDictionaries: <span class=\"st0\">''</span><br/>  category: <span class=\"st0\">'Testing'</span>\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">MyClass</span> class methodsFor: <span class=\"st0\">'instance creation'</span>!<br/>new<br/>  ^self basicNew  <span class=\"re6\">instanceVar</span> <span class=\"sy0\">:=</span> <span class=\"re5\">0</span>\u00a0!\u00a0!<br/>\u00a0<br/>!<span class=\"re0\">MyClass</span> methodsFor: <span class=\"st0\">'testing'</span>!<br/>someMethod<br/>  ^self instanceVar <span class=\"sy0\">=</span> <span class=\"re5\">1</span>; classVar <span class=\"sy0\">=</span> <span class=\"re5\">3</span>\u00a0!\u00a0!<br/>\u00a0<br/><span class=\"re0\">MyClass</span> new someMethod!</pre>"}, {"lang": "SuperCollider", "loc": 37, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>SpecialObject {<br/>\u00a0<br/>\tclassvar a = 42, &lt;b = 0, &lt;&gt;c;    // Class variables. 42 and 0 are default values.<br/>\tvar &lt;&gt;x, &lt;&gt;y;           // Instance variables.<br/>\t// Note: variables are private by default. In the above, \"&lt;\" creates a getter, \"&gt;\" creates a setter<br/>\u00a0<br/>\t*new { |value|<br/>\t\t^super.new.init(value)       // constructor is a class method. typically calls some instance method to set up, here \"init\"<br/>\t}<br/>\u00a0<br/>\tinit { |value|<br/>\t\tx = value;<br/>\t\ty = sqrt(squared(a) + squared(b))<br/>\t}<br/>\u00a0<br/>\t// a class method<br/>\t*randomizeAll {<br/>\t\ta = 42.rand;<br/>\t\tb = 42.rand;<br/>\t\tc = 42.rannd;<br/>\t}<br/>\u00a0<br/>\t// an instance method<br/>\tcoordinates {<br/>\t\t^Point(x, y) // The \"^\" means to return the result. If not specified, then the object itself will be returned (\"^this\")<br/>\t}<br/>\u00a0<br/>\u00a0<br/>}<br/>\u00a0<br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Swift", "loc": 19, "block": "<pre class=\"text highlighted_source\">class MyClass{<br/>\u00a0<br/>  // stored property<br/>  var variable\u00a0: Int<br/>\u00a0<br/>  /**<br/>  * The constructor<br/>  */<br/>  init() {<br/>    self.variable = 42<br/>  }<br/>\u00a0<br/>  /**<br/>  * A method<br/>  */<br/>  func someMethod() {<br/>    self.variable = 1<br/>  }<br/>}</pre>"}, {"lang": "Tcl", "loc": 22, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require TclOO<br/>oo::<span class=\"me1\">class</span> create summation <span class=\"br0\">{</span><br/>    <span class=\"kw1\">variable</span> v<br/>    constructor <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> v <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> add x <span class=\"br0\">{</span><br/>        <span class=\"kw2\">incr</span> v <span class=\"re0\">$x</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> value <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$v</span><br/>    <span class=\"br0\">}</span><br/>    destructor <span class=\"br0\">{</span><br/>        <span class=\"kw2\">puts</span> <span class=\"st0\">\"Ended with value $v\"</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> sum <span class=\"br0\">[</span>summation new<span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Start with [$sum value]\"</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">10</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"Add $i to get [$sum add $i]\"</span><br/><span class=\"br0\">}</span><br/><span class=\"re0\">$sum</span> destroy</pre>"}, {"lang": "TIScript", "loc": 35, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw5\">class</span> Car <br/><span class=\"br0\">{</span><br/>  <span class=\"co1\">//Constructor function.</span><br/>  <span class=\"kw1\">function</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span>brand<span class=\"sy0\">,</span> weight<span class=\"sy0\">,</span> price <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">brand</span> <span class=\"sy0\">=</span> brand<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">weight</span> <span class=\"sy0\">=</span> weight <span class=\"sy0\">||</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span> <span class=\"co1\">// Resort to default value (with 'or' notation).</span><br/>    <span class=\"kw1\">this</span>._price <span class=\"sy0\">=</span> price<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  property price<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"co1\">// computable property, special kind of member function</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw1\">this</span>._price<span class=\"sy0\">;</span> <span class=\"br0\">}</span> <span class=\"co1\">// getter section </span><br/>    <span class=\"kw1\">set</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span>._price <span class=\"sy0\">=</span> v<span class=\"sy0\">;</span> <span class=\"br0\">}</span>    <span class=\"co1\">// setter section</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">function</span> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// member function, method of a Car.</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">String</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"&lt;%s&gt;\"</span><span class=\"sy0\">,</span><span class=\"kw1\">this</span>.<span class=\"me1\">brand</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw5\">class</span> Truck <span class=\"sy0\">:</span> Car <br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span>brand<span class=\"sy0\">,</span> size<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw5\">super</span><span class=\"br0\">(</span>brand<span class=\"sy0\">,</span> <span class=\"nu0\">2000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// Call of constructor of super class (Car here)</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">size</span> <span class=\"sy0\">=</span> size<span class=\"sy0\">;</span> <span class=\"co1\">// Custom property for just this object.</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> cars <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"co1\">// Some example car objects.</span><br/>  <span class=\"kw1\">new</span> Car<span class=\"br0\">(</span><span class=\"st0\">\"Mazda\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>  <span class=\"kw1\">new</span> Truck<span class=\"br0\">(</span><span class=\"st0\">\"Volvo\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">30000</span><span class=\"br0\">)</span><br/><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>car<span class=\"br0\">)</span> <span class=\"kw1\">in</span> cars<span class=\"br0\">)</span> <span class=\"co1\">// TIScript allows enumerate indexes and values</span><br/><span class=\"br0\">{</span><br/>  stdout.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"#%d\u00a0%s $%d\u00a0%v\u00a0%v,\u00a0%v\u00a0%v\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> car.<span class=\"me1\">brand</span><span class=\"sy0\">,</span> car.<span class=\"me1\">price</span><span class=\"sy0\">,</span> car.<span class=\"me1\">weight</span><span class=\"sy0\">,</span> car.<span class=\"me1\">size</span><span class=\"sy0\">,</span><br/>                 car <span class=\"kw1\">instanceof</span> Car<span class=\"sy0\">,</span> car <span class=\"kw1\">instanceof</span> Truck<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TXR", "loc": 24, "block": "<pre class=\"text highlighted_source\">(defstruct shape ()<br/>  cached-area<br/>\u00a0<br/>  (:init (self)<br/>    (put-line `@self is born!`))<br/>\u00a0<br/>  (:fini (self)<br/>    (put-line `@self says goodbye!`))<br/>\u00a0<br/>  (:method area (self)<br/>    (or self.cached-area<br/>        (set self.cached-area self.(calc-area)))))<br/>\u00a0<br/>(defstruct circle shape<br/>  (radius 1.0)<br/>\u00a0<br/>  (:method calc-area (self)<br/>    (*\u00a0%pi% self.radius self.radius)))<br/>\u00a0<br/>(defstruct square shape<br/>  (length 1.0)<br/>\u00a0<br/>  (:method calc-area (self)<br/>    (* self.length self.length)))</pre>"}, {"lang": "UNIX Shell", "loc": 19, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw3\">typeset</span> <span class=\"re5\">-T</span> <span class=\"re2\">Summation_t</span>=<span class=\"br0\">(</span><br/>    integer <span class=\"kw2\">sum</span><br/>\u00a0<br/>    <span class=\"co0\"># the constructor</span><br/>    <span class=\"kw1\">function</span> create <span class=\"br0\">{</span><br/>        _.sum=<span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co0\"># a method</span><br/>    <span class=\"kw1\">function</span> add <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span> _.sum += <span class=\"re4\">$1</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/>Summation_t s<br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span>; <span class=\"kw1\">do</span><br/>    s.add <span class=\"re1\">$i</span><br/><span class=\"kw1\">done</span><br/>print <span class=\"co1\">${s.sum}</span></pre>"}, {"lang": "Vala", "loc": 23, "block": "<pre class=\"vala highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> MyClass <span class=\"sy0\">:</span> Object <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Instance variable</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> variable<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Method</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">void</span> some_method<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        variable <span class=\"sy0\">=</span> <span class=\"nu0\">24</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// Constructor</span><br/>    <span class=\"kw1\">public</span> MyClass<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        variable <span class=\"sy0\">=</span> <span class=\"nu0\">42</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span>   <br/><span class=\"br0\">}</span><br/><span class=\"kw1\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Class instance</span><br/>    MyClass instance <span class=\"sy0\">=</span> <span class=\"kw3\">new</span> MyClass<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es0\">\\n</span>\"</span>, instance.<span class=\"me1\">variable</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    instance.<span class=\"me1\">some_method</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es0\">\\n</span>\"</span>, instance.<span class=\"me1\">variable</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    instance.<span class=\"me1\">variable</span> <span class=\"sy0\">=</span> <span class=\"nu0\">84</span><span class=\"sy0\">;</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es0\">\\n</span>\"</span>, instance.<span class=\"me1\">variable</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VBA", "loc": 31, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Private</span> Const m_default = 10<br/><span class=\"kw2\">Private</span> m_bar <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Sub</span> Class_Initialize()<br/>  <span class=\"co1\">'constructor, can be used to set default values<br/></span>  m_bar = m_default<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Sub</span> Class_Terminate()<br/>  <span class=\"co1\">'destructor, can be used to do some cleaning up<br/></span>  <span class=\"co1\">'here we just print a message<br/></span>  Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"---object destroyed---\"</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/><span class=\"kw4\">Property</span> <span class=\"kw4\">Let</span> Bar(value <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>)<br/>  m_bar = value<br/><span class=\"kw3\">End</span> <span class=\"kw4\">Property</span><br/>\u00a0<br/><span class=\"kw4\">Property</span> <span class=\"kw4\">Get</span> Bar() <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>  Bar = m_bar<br/><span class=\"kw3\">End</span> <span class=\"kw4\">Property</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> DoubleBar()<br/>  m_bar = m_bar * 2<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> MultiplyBar(x <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>)<br/>  <span class=\"co1\">'another method<br/></span>  MultiplyBar = m_bar * x<br/>  <span class=\"co1\">'Note: instead of using the instance variable m_bar we could refer to the Bar property of this object using the special word \"Me\":<br/></span>  <span class=\"co1\">'  MultiplyBar = Me.Bar * x<br/></span><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "Visual Basic .NET", "loc": 29, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Class</span> Foo<br/>   <span class=\"kw1\">Private</span> m_Bar <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>\u00a0<br/>   <span class=\"kw1\">Public</span> <span class=\"kw1\">Sub</span> <span class=\"kw1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>   <span class=\"kw1\">Public</span> <span class=\"kw1\">Sub</span> <span class=\"kw1\">New</span><span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> bar <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span><br/>       m_Bar <span class=\"sy0\">=</span> bar<br/>   <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>   <span class=\"kw1\">Public</span> <span class=\"kw1\">Property</span> Bar<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>       <span class=\"kw1\">Get</span><br/>           <span class=\"kw1\">Return</span> m_Bar<br/>       <span class=\"kw1\">End</span> <span class=\"kw1\">Get</span><br/>       <span class=\"kw1\">Set</span><span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> value <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span><br/>           m_Bar <span class=\"sy0\">=</span> value<br/>       <span class=\"kw1\">End</span> <span class=\"kw1\">Set</span><br/>   <span class=\"kw1\">End</span> <span class=\"kw1\">Property</span><br/>\u00a0<br/>   <span class=\"kw1\">Public</span> <span class=\"kw1\">Sub</span> DoubleBar<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>       m_Bar <span class=\"sy0\">*=</span> <span class=\"nu0\">2</span><br/>   <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>   <span class=\"kw1\">Public</span> <span class=\"kw1\">Function</span> MultiplyBar<span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> x <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>       <span class=\"kw1\">Return</span> x <span class=\"sy0\">*</span> Bar<br/>   <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Class</span></pre>"}, {"lang": "Visual FoxPro", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>LOCAL o1 As MyClass, o2 As MyClass<br/>*!* Instantiate o1<br/>o1 = NEWOBJECT(\"MyClass\")<br/>o1.ShowInstance()<br/>*!* Instantiate o2<br/>o2 = CREATEOBJECT(\"MyClass\", 2)<br/>o2.ShowInstance()<br/>\u00a0<br/>\u00a0<br/>DEFINE CLASS MyClass As Session<br/>*!* Custom property (protected)<br/>PROTECTED nInstance <br/>nInstance = 0<br/>\u00a0<br/>*!* Constructor<br/>PROCEDURE Init(tnInstance As Integer)<br/>IF VARTYPE(tnInstance) = \"N\"<br/>    THIS.nInstance = tnInstance<br/>ELSE<br/>    THIS.nInstance = THIS.nInstance + 1 <br/>ENDIF<br/>ENDPROC<br/>\u00a0<br/>*!* Custom Method<br/>PROCEDURE ShowInstance<br/>? \"Instance\", THIS.nInstance <br/>ENDPROC<br/>ENDDEFINE<br/>\u00a0</pre>"}, {"lang": "XLISP", "loc": 19, "block": "<pre class=\"text highlighted_source\">(DEFINE-CLASS PROGRAMMING-LANGUAGE<br/>    (INSTANCE-VARIABLES NAME YEAR))<br/>\u00a0<br/>(DEFINE-METHOD (PROGRAMMING-LANGUAGE 'INITIALIZE X)<br/>    (SETQ NAME X)<br/>    SELF)<br/>\u00a0<br/>(DEFINE-METHOD (PROGRAMMING-LANGUAGE 'WAS-CREATED-IN X)<br/>    (SETQ YEAR X))<br/>\u00a0<br/>(DEFINE-METHOD (PROGRAMMING-LANGUAGE 'DESCRIBE)<br/>    `(THE PROGRAMMING LANGUAGE ,NAME WAS CREATED IN ,YEAR))<br/>\u00a0<br/>(DEFINE LISP (PROGRAMMING-LANGUAGE 'NEW 'LISP))<br/>\u00a0<br/>(LISP 'WAS-CREATED-IN 1958)<br/>\u00a0<br/>(DISPLAY (LISP 'DESCRIBE))<br/>(NEWLINE)</pre>"}, {"lang": "zonnon", "loc": 44, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>module Graphics;<br/>type<br/>\t{ref,public} (* class *)<br/>\tPoint = object(ord,abs: integer)<br/>\tvar<br/>\t\t(* instance variables *)<br/>\t\t{public,immutable} x,y: integer;<br/>\u00a0<br/>\t(* method *)<br/>\tprocedure {public} Ord():integer;<br/>\tbegin<br/>\t\treturn y<br/>\tend Ord;<br/>\u00a0<br/>\t(* method *)<br/>\tprocedure {public} Abs():integer;<br/>\tbegin<br/>\t\treturn x<br/>\tend Abs;<br/>\u00a0<br/>\t(* constructor *)<br/>\tbegin<br/>\t\tself.x\u00a0:= ord;<br/>\t\tself.y\u00a0:= abs;<br/>\tend Point;<br/>end Graphics.<br/>\u00a0<br/>module Main;<br/>import Graphics;<br/>var<br/>\tp: Graphics.Point;<br/>\u00a0<br/>procedure Write(p: Graphics.Point);<br/>begin<br/>\twriteln('[':1,p.x:3,',':1,p.y:3,']':1)<br/>end Write;<br/>\u00a0<br/>begin<br/>\tp\u00a0:= new Graphics.Point(12,12);<br/>\tWrite(p);<br/>\twriteln(\"Abs: \":4,p.Abs():3,\" Ord: \":5,p.Ord():3);<br/>end Main.<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 10, "block": "<pre class=\"text highlighted_source\">class C{ // define class named \"C\", no parents or attributes<br/>   println(\"starting construction\"); // all code outside functions is wrapped into the constructor<br/>   var v;    // instance data for this class<br/>   fcn init(x) // initializer for this class, calls constructor<br/>      { v = x }<br/>   println(\"ending construction of \",self);<br/>}<br/>c1:=C(5);  // create a new instance of C<br/>c2:=c1(\"hoho\"); // create another instance of C<br/>println(C.v,\" \",c1.v,\" \",c2.v);</pre>"}]}