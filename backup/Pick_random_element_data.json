{"task": "Pick_random_element", "blocks": [{"lang": "ACL2", "loc": 6, "block": "<pre class=\"lisp highlighted_source\"><span class=\"sy0\">:</span><span class=\"me1\">set-state-ok</span> t<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> pick-random-element <span class=\"br0\">(</span>xs state<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>mv-<span class=\"kw1\">let</span> <span class=\"br0\">(</span>idx state<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">random</span>$ <span class=\"br0\">(</span>len xs<span class=\"br0\">)</span> state<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>mv <span class=\"br0\">(</span><span class=\"kw1\">nth</span> idx xs<span class=\"br0\">)</span> state<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ada", "loc": 30, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Pick_Random_Element <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">package</span> Rnd <span class=\"kw3\">renames</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>;<br/>   Gen: Rnd.<span class=\"me1\">Generator</span>; <span class=\"co1\">-- used globally</span><br/>\u00a0<br/>   <span class=\"kw3\">type</span> Char_Arr <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Natural <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Character;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Pick_Random<span class=\"br0\">(</span>A: Char_Arr<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Character <span class=\"kw1\">is</span><br/>      <span class=\"co1\">-- Chooses one of the characters of A (uniformly distributed)</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> A<span class=\"br0\">(</span>A'First + Natural<span class=\"br0\">(</span>Rnd.<span class=\"me1\">Random</span><span class=\"br0\">(</span>Gen<span class=\"br0\">)</span> * Float<span class=\"br0\">(</span>A'Last<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Pick_Random;<br/>\u00a0<br/>   Vowels   \u00a0: Char_Arr\u00a0:= <span class=\"br0\">(</span>'a', 'e', 'i', 'o', 'u'<span class=\"br0\">)</span>;<br/>   Consonants: Char_Arr\u00a0:= <span class=\"br0\">(</span>'t', 'n', 's', 'h', 'r', 'd', 'l'<span class=\"br0\">)</span>;<br/>   Specials \u00a0: Char_Arr\u00a0:= <span class=\"br0\">(</span>',', '.', '?', '!'<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Rnd.<span class=\"me1\">Reset</span><span class=\"br0\">(</span>Gen<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> J <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">3</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">10</span> <span class=\"kw1\">loop</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Pick_Random<span class=\"br0\">(</span>Consonants<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Pick_Random<span class=\"br0\">(</span>Vowels<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Pick_Random<span class=\"br0\">(</span>Specials<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" \"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">New_Line</span>;<br/><span class=\"kw1\">end</span> Pick_Random_Element;</pre>"}, {"lang": "Aime", "loc": 11, "block": "<pre class=\"text highlighted_source\">list l;<br/>\u00a0<br/>l_append(l, 'a');<br/>l_append(l, 'b');<br/>l_append(l, 'c');<br/>l_append(l, 'd');<br/>l_append(l, 'e');<br/>l_append(l, 'f');<br/>\u00a0<br/>o_byte(l[drand(5)]);<br/>o_byte('\\n');</pre>"}, {"lang": "ALGOL 68", "loc": 23, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># pick a random element from an array of strings #</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> PICKRANDOM <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> list <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/><span class=\"kw2\">BEGIN</span><br/>\u00a0<br/>    <span class=\"kw3\">INT</span> number of elements <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw8\">UPB</span> list <span class=\"sy1\">-</span> <span class=\"kw8\">LWB</span> list <span class=\"br0\">)</span> <span class=\"sy1\">+</span> 1<span class=\"sy1\">;</span><br/>    <span class=\"kw3\">INT</span> random element     <span class=\"sy1\">=</span><br/>        <span class=\"kw8\">ENTIER</span> <span class=\"br0\">(</span> <span class=\"kw25\">next random</span> <span class=\"sy1\">*</span> <span class=\"br0\">(</span> number of elements <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    list<span class=\"br0\">[</span> <span class=\"kw8\">LWB</span> list <span class=\"sy1\">+</span> random element <span class=\"br0\">]</span><br/><span class=\"kw2\">END</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># PICKRANDOM #</span><br/><span class=\"coMULTI\"># can define additional operators for other types of array #</span><br/>\u00a0<br/>\u00a0<br/>main<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>\u00a0<br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">STRING</span> days <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Sunday\"</span><span class=\"sy1\">,</span>   <span class=\"st0\">\"Monday\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Tuesday\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Wednesday\"</span><br/>                    <span class=\"sy1\">,</span> <span class=\"st0\">\"Thursday\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Friday\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"Saturday\"</span><br/>                    <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> PICKRANDOM days<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">)</span></pre>"}, {"lang": "App Inventor", "loc": 3, "block": "<pre class=\"ahk highlighted_source\">list <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"abc\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"def\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"gh\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ijklmnop\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"hello\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"world\"</span><span class=\"br0\">]</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> randint<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>\u00a0% list<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% List<span class=\"br0\">[</span>randint<span class=\"br0\">]</span></pre>"}, {"lang": "AutoHotkey", "loc": 3, "block": "<pre class=\"ahk highlighted_source\">list <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"st0\">\"abc\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"def\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"gh\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"ijklmnop\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"hello\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"world\"</span><span class=\"br0\">]</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> randint<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>\u00a0% list<span class=\"sy0\">.</span>MaxIndex<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% List<span class=\"br0\">[</span>randint<span class=\"br0\">]</span></pre>"}, {"lang": "AWK", "loc": 10, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f PICK_RANDOM_ELEMENT.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    n = <span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday\"</span>,day_of_week,<span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">srand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    x = <span class=\"kw4\">int</span><span class=\"br0\">(</span>n<span class=\"sy3\">*</span><span class=\"kw4\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es0\">\\n</span>\"</span>,day_of_week<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BaCon", "loc": 8, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' Pick random element</span><br/><span class=\"kw1\">OPTION</span> BASE <span class=\"nu0\">1</span><br/><span class=\"kw1\">DECLARE</span> words$<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><br/><span class=\"kw1\">FOR</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">6</span>\u00a0: <span class=\"kw1\">READ</span> words$<span class=\"br0\">[</span>i<span class=\"br0\">]</span>\u00a0: <span class=\"kw1\">NEXT</span><br/><span class=\"kw1\">DATA</span> <span class=\"st0\">\"Alpha\"</span>, <span class=\"st0\">\"Beta\"</span>, <span class=\"st0\">\"Gamma\"</span>, <span class=\"st0\">\"Delta\"</span>, <span class=\"st0\">\"Epsilon\"</span>, <span class=\"st0\">\"Zeta\"</span><br/>\u00a0<br/>element = <span class=\"kw1\">RANDOM</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span><br/><span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Chose \"</span>, element, <span class=\"st0\">\": \"</span>, words$<span class=\"br0\">[</span>element<span class=\"br0\">]</span></pre>"}, {"lang": "Bash", "loc": 12, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\"># borrowed from github.com/search?q=bashnative</span><br/>\u00a0<br/>rand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">printf</span> $<span class=\"br0\">(</span><span class=\"br0\">(</span>  <span class=\"re4\">$1</span> <span class=\"sy0\">*</span>  RANDOM  <span class=\"sy0\">/</span> <span class=\"nu0\">32767</span>   <span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>rand_element <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">local</span> <span class=\"re5\">-a</span> <span class=\"re2\">th</span>=<span class=\"br0\">(</span><span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"456105\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">unset</span> th<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">printf</span> $<span class=\"st_h\">'%s\\n'</span> <span class=\"st0\">\"<span class=\"es3\">${th[$(($(rand \"${#th[*]}</span>\"</span><span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"st0\">\"<br/>}<br/>\u00a0<br/>echo \"</span>You feel like a $<span class=\"br0\">(</span>rand_element pig donkey unicorn eagle<span class=\"br0\">)</span> today<span class=\"st0\">\"</span></pre>"}, {"lang": "BASIC", "loc": 13, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"co1\">'setup</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> foo<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> n <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><span class=\"sy0\">,</span> x <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcklong.shtml\"><span class=\"kw3\">LONG</span></a><br/><span class=\"kw1\">FOR</span> n <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcklbound.shtml\"><span class=\"kw3\">LBOUND</span></a><span class=\"br0\">(</span>foo<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <a href=\"http://www.qbasicnews.com/qboho/qckubound.shtml\"><span class=\"kw3\">UBOUND</span></a><span class=\"br0\">(</span>foo<span class=\"br0\">)</span><br/>    foo<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckint.shtml\"><span class=\"kw3\">INT</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckrnd.shtml\"><span class=\"kw3\">RND</span></a><span class=\"sy0\">*</span><span class=\"nu0\">99999</span><span class=\"br0\">)</span><br/><span class=\"kw1\">NEXT</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckrandomize.shtml\"><span class=\"kw3\">RANDOMIZE</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcktimer.shtml\"><span class=\"kw3\">TIMER</span></a><br/>\u00a0<br/><span class=\"co1\">'random selection</span><br/>x <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckint.shtml\"><span class=\"kw3\">INT</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckrnd.shtml\"><span class=\"kw3\">RND</span></a> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckubound.shtml\"><span class=\"kw3\">UBOUND</span></a><span class=\"br0\">(</span>foo<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <a href=\"http://www.qbasicnews.com/qboho/qcklbound.shtml\"><span class=\"kw3\">LBOUND</span></a><span class=\"br0\">(</span>foo<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">'output</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> x<span class=\"sy0\">,</span> foo<span class=\"br0\">(</span>x<span class=\"br0\">)</span></pre>"}, {"lang": "Batch File", "loc": 16, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><span class=\"co2\"><br/>\t::Initializing the pseudo-array...</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"pseudo=Alpha Beta Gamma Delta Epsilon\"<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> cnt=0 <span class=\"sy0\">&amp;</span> <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">P</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(!</span><span class=\"re2\">pseudo</span><span class=\"sy0\">!)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a cnt+=1<br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"pseudo[<span class=\"sy0\">!</span><span class=\"re2\">cnt</span><span class=\"sy0\">!</span>]=<span class=\"sy0\">%%</span><span class=\"re3\">P</span>\"<br/><span class=\"sy0\">)</span><br/><span class=\"co2\">\t::Do the random thing...</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a rndInt=<span class=\"sy0\">%</span><span class=\"re3\">random</span><span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"sy0\">%</span> cnt +1<br/><span class=\"co2\"><br/>\t::Print the element corresponding to rndint...</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<span class=\"sy0\">!</span><span class=\"re2\">pseudo[%<span class=\"re3\">rndInt</span>%]</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b</pre>"}, {"lang": "BBC BASIC", "loc": 4, "block": "<pre class=\"text highlighted_source\">      DIM list$(5)<br/>      list$() = \"The\", \"five\", \"boxing\", \"wizards\", \"jump\", \"quickly\"<br/>      chosen% = RND(6)<br/>      PRINT \"Item \"\u00a0; chosen% \" was chosen which is '\" list$(chosen%-1) \"'\"</pre>"}, {"lang": "Burlesque", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>blsq ) \"ABCDEFG\"123456 0 6rn-]!!<br/>'G<br/>\u00a0</pre>"}, {"lang": "C", "loc": 18, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;time.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <span class=\"kw4\">char</span> array<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">'a'</span><span class=\"sy0\">,</span> <span class=\"st0\">'b'</span><span class=\"sy0\">,</span> <span class=\"st0\">'c'</span><span class=\"sy0\">,</span><span class=\"st0\">'d'</span><span class=\"sy0\">,</span><span class=\"st0\">'e'</span><span class=\"sy0\">,</span><span class=\"st0\">'f'</span><span class=\"sy0\">,</span><span class=\"st0\">'g'</span><span class=\"sy0\">,</span><span class=\"st0\">'h'</span><span class=\"sy0\">,</span><span class=\"st0\">'i'</span><span class=\"sy0\">,</span><span class=\"st0\">'j'</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>   <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>   time_t t<span class=\"sy0\">;</span><br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/srand.html\"><span class=\"kw3\">srand</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">unsigned</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/time.html\"><span class=\"kw3\">time</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span><span class=\"nu0\">30</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%c<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> array<span class=\"br0\">[</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">%</span><span class=\"nu19\">10</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 15, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;random&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> numbers <span class=\"br0\">{</span> <span class=\"nu0\">11</span> , <span class=\"nu0\">88</span> , <span class=\"sy2\">-</span><span class=\"nu0\">5</span> , <span class=\"nu0\">13</span> , <span class=\"nu0\">4</span> , <span class=\"nu0\">121</span> , <span class=\"nu0\">77</span> , <span class=\"nu0\">2</span> <span class=\"br0\">}</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">random_device</span> seed <span class=\"sy4\">;</span><br/>   <span class=\"co1\">// generator </span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">mt19937</span> engine<span class=\"br0\">(</span> seed<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"co1\">// number distribution</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">uniform_int_distribution</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> choose<span class=\"br0\">(</span> <span class=\"nu0\">0</span> , numbers.<span class=\"me1\">size</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"random element picked\u00a0: \"</span> <span class=\"sy1\">&lt;&lt;</span> numbers<span class=\"br0\">[</span> choose<span class=\"br0\">(</span> engine <span class=\"br0\">)</span> <span class=\"br0\">]</span> <br/>      <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"\u00a0!<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 11, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> RandomElementPicker <span class=\"br0\">{</span><br/>  <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> list <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> rng <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> randomElement <span class=\"sy0\">=</span> list<span class=\"br0\">[</span>rng<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span>list<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"I picked element {0}\"</span>, randomElement<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 10, "block": "<pre class=\"text highlighted_source\">import ceylon.random {<br/>\u00a0<br/>\tDefaultRandom<br/>}<br/>\u00a0<br/>shared void run() {<br/>    value random = DefaultRandom();<br/>    value element = random.nextElement([1, 2, 3, 4, 5, 6]);<br/>    print(element);<br/>}</pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>rand<span class=\"sy0\">-</span>nth coll<span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 16, "block": "<pre class=\"cobol highlighted_source\">       &gt;&gt;<span class=\"kw1\">SOURCE</span> FREE<br/><span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> random-element<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/><span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/><span class=\"nu0\">01</span>  nums-<span class=\"kw3\">area</span>                           <span class=\"kw3\">VALUE</span> <span class=\"st0\">\"123456789\"</span><span class=\"sy0\">.</span><br/>    <span class=\"nu0\">03</span>  nums                            <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span> <span class=\"kw3\">OCCURS</span> <span class=\"nu0\">9</span> <span class=\"kw2\">TIMES</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"nu0\">01</span>  random-idx                          <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span> <span class=\"kw3\">COMP</span><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>    <span class=\"kw2\">COMPUTE</span> random-idx <span class=\"sy0\">=</span> <span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">RANDOM</span><span class=\"br0\">(</span><span class=\"kw3\">FUNCTION</span> CURRENT-<span class=\"kw3\">DATE</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span>:<span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\"> * </span><span class=\"nu0\">9</span><span class=\"sy0\"> + </span><span class=\"nu0\">1</span><br/>    <span class=\"kw2\">DISPLAY</span> nums <span class=\"br0\">(</span>random-idx<span class=\"br0\">)</span><br/>    <span class=\"sy0\">.</span><br/><span class=\"kw3\">END</span> <span class=\"kw3\">PROGRAM</span> random-element<span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 2, "block": "<pre class=\"coffeescript highlighted_source\">array = <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>console.<span class=\"me1\">log</span> array<span class=\"br0\">[</span>Math.<span class=\"me1\">floor</span><span class=\"br0\">(</span>Math.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> array.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">]</span></pre>"}, {"lang": "Common Lisp", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defvar *<span class=\"kw1\">list</span>* '<span class=\"br0\">(</span>one two three four five<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"kw1\">nth</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> *<span class=\"kw1\">list</span>*<span class=\"br0\">)</span><span class=\"br0\">)</span> *<span class=\"kw1\">list</span>*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"kw1\">nth</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> *<span class=\"kw1\">list</span>*<span class=\"br0\">)</span><span class=\"br0\">)</span> *<span class=\"kw1\">list</span>*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"kw1\">nth</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> *<span class=\"kw1\">list</span>*<span class=\"br0\">)</span><span class=\"br0\">)</span> *<span class=\"kw1\">list</span>*<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Crystal", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span><span class=\"br0\">]</span>.<span class=\"me1\">sample</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 6, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> items <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"foo\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"bar\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"baz\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    items<span class=\"br0\">[</span>uniform<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> $<span class=\"br0\">)</span><span class=\"br0\">]</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 1, "block": "<pre class=\"text highlighted_source\">!print choose [ \"one\" \"two\" \"chicken\" ]</pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 1, "block": "<pre class=\"text highlighted_source\">!print choose [ \"one\" \"two\" \"chicken\" ]</pre>"}, {"lang": "EchoLisp", "loc": 6, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>pick-<span class=\"kw1\">random</span> <span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>list-ref <span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>pick-<span class=\"kw1\">random</span> <span class=\"br0\">(</span>iota <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">667</span><br/><span class=\"br0\">(</span>pick-<span class=\"kw1\">random</span> <span class=\"br0\">(</span>iota <span class=\"nu0\">1000</span><span class=\"br0\">)</span><span class=\"br0\">)</span> \u2192 <span class=\"nu0\">179</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 14, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>extension listOp<br/>{<br/>    randomItem<br/>        = self[randomGenerator eval(self length)].<br/>}<br/>\u00a0<br/>program =<br/>[<br/>    var item\u00a0:= (0, 1, 2, 3, 4, 5, 6, 7, 8, 9).<br/>\u00a0<br/>    console printLine(\"I picked element \",item randomItem).<br/>].</pre>"}, {"lang": "Elixir", "loc": 6, "block": "<pre class=\"text highlighted_source\">iex(1)&gt; list = Enum.to_list(1..20)<br/>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]<br/>iex(2)&gt; Enum.random(list)<br/>19<br/>iex(3)&gt; Enum.take_random(list,4)<br/>[19, 20, 7, 15]</pre>"}, {"lang": "Erlang", "loc": 9, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">% Implemented by Arjun Sunel</span><br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>pick_random<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">List</span> <span class=\"sy3\">=</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Index</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">List</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">nth</span><span class=\"br0\">(</span><span class=\"re5\">Index</span><span class=\"sy1\">,</span><span class=\"re5\">List</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 2, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">constant</span> s <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"st0\">'a'</span><span class=\"sy2\">,</span> <span class=\"st0\">'b'</span><span class=\"sy2\">,</span> <span class=\"st0\">'c'</span><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span>s<span class=\"br0\">[</span><span class=\"kw2\">rand</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 2, "block": "<pre class=\"text highlighted_source\">( scratchpad ) { \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" } random .<br/>\"a\"</pre>"}, {"lang": "Falcon", "loc": 4, "block": "<pre class=\"falcon highlighted_source\">\u00a0<br/>lst <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;</span> <a href=\"http://falconpl.org/project_docs/core/functions.html#randomPick\"><span class=\"kw6\">randomPick</span></a><span class=\"br0\">(</span>lst<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 11, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> pick_random<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>i, i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">r</span><br/>\u00a0<br/>  <span class=\"kw1\">call</span> <span class=\"kw4\">random_seed</span><br/>  <span class=\"kw1\">call</span> <span class=\"kw4\">random_number</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> a<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">(</span>r<span class=\"sy0\">*</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 12, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"br0\">{</span><span class=\"st0\">\"Zero\"</span>, <span class=\"st0\">\"One\"</span>, <span class=\"st0\">\"Two\"</span>, <span class=\"st0\">\"Three\"</span>, <span class=\"st0\">\"Four\"</span>, <span class=\"st0\">\"Five\"</span>, <span class=\"st0\">\"Six\"</span>, <span class=\"st0\">\"Seven\"</span>, <span class=\"st0\">\"Eight\"</span>, <span class=\"st0\">\"Nine\"</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">Randomize</span><br/><span class=\"kw1\">Dim</span> randInt <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> <br/>\u00a0<br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span><br/>  randInt = <span class=\"kw1\">Int</span><span class=\"br0\">(</span><span class=\"kw1\">Rnd</span> * <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Print</span> a<span class=\"br0\">(</span>randInt<span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Free Pascal", "loc": 3, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> list <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"b\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"c\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"d\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"e\"</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> rand <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> System.<span class=\"me1\">Random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>printfn <span class=\"st0\">\"%s\"</span> list.<span class=\"br0\">[</span>rand.<span class=\"me1\">Next</span><span class=\"br0\">(</span>list.<span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"br0\">]</span></pre>"}, {"lang": "F#", "loc": 3, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> list <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"a\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"b\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"c\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"d\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"e\"</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> rand <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> System.<span class=\"me1\">Random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>printfn <span class=\"st0\">\"%s\"</span> list.<span class=\"br0\">[</span>rand.<span class=\"me1\">Next</span><span class=\"br0\">(</span>list.<span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"br0\">]</span></pre>"}, {"lang": "Gambas", "loc": 6, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> sList <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"Jan\"</span>, <span class=\"st0\">\"Feb\"</span>, <span class=\"st0\">\"Mar\"</span>, <span class=\"st0\">\"Apr\"</span>, <span class=\"st0\">\"May\"</span>, <span class=\"st0\">\"Jun\"</span>, <span class=\"st0\">\"Jul\"</span>, <span class=\"st0\">\"Aug\"</span>, <span class=\"st0\">\"Sep\"</span>, <span class=\"st0\">\"Oct\"</span>, <span class=\"st0\">\"Nov\"</span>, <span class=\"st0\">\"Dec\"</span><span class=\"br0\">]</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> sList<span class=\"br0\">[</span>Rand<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a> </pre>"}, {"lang": "GAP", "loc": 2, "block": "<pre class=\"text highlighted_source\">a\u00a0:= [2, 9, 4, 7, 5, 3];<br/>Random(a);</pre>"}, {"lang": "Go", "loc": 14, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">var</span> list <span class=\"sy2\">=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><span class=\"st0\">\"bleen\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"fuligin\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"garrow\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"grue\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"hooloovoo\"</span><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>UnixNano<span class=\"sy1\">())</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>list<span class=\"sy1\">[</span>rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>list<span class=\"sy1\">))])</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 7, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> list <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">25</span>, <span class=\"nu0\">30</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">450</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">78</span><span class=\"br0\">]</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> random <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=Random&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">3</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> i <span class=\"sy0\">=</span> random.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>list.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"list[${i}] == ${list[i]}\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 6, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random <span class=\"br0\">(</span>randomRIO<span class=\"br0\">)</span><br/>\u00a0<br/>pick <span class=\"sy0\">::</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> a<br/>pick xs <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span>xs <span class=\"sy0\">!!</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> randomRIO <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> xs <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>x <span class=\"sy0\">&lt;-</span> pick <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 4, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   L <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>  <span class=\"co1\"># a list</span><br/>   x <span class=\"sy1\">:=</span> <span class=\"sy1\">?</span>L       <span class=\"co1\"># random element</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   <span class=\"sy0\">(</span>{~\u00a0<a class=\"__cf_email__\" data-cfemail=\"350a75\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#<span class=\"sy0\">)</span> <span class=\"st_h\">'abcdef'</span><br/>b</pre>"}, {"lang": "Java", "loc": 4, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Random</span><span class=\"sy0\">;</span><br/>...<br/><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> array <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">return</span> array<span class=\"br0\">[</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span>array.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// if done multiple times, the Random object should be re-used</span></pre>"}, {"lang": "JavaScript", "loc": 2, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> array <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">return</span> array<span class=\"br0\">[</span><span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> array.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Julia", "loc": 2, "block": "<pre class=\"text highlighted_source\">array = [1,2,3]<br/>rand(array)</pre>"}, {"lang": "K", "loc": 2, "block": "<pre class=\"text highlighted_source\">  1?\"abcdefg\"<br/>,\"e\"</pre>"}, {"lang": "Kotlin", "loc": 30, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.10</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Extension function on any list that will return a random element from index 0 <br/> * to the last index<br/> */</span><br/>fun <span class=\"sy0\">&lt;</span>E<span class=\"sy0\">&gt;</span> List<span class=\"sy0\">&lt;</span>E<span class=\"sy0\">&gt;</span>.<span class=\"me1\">getRandomElement</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">[</span>Random<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * Extension function on any list that will return a list of unique random picks<br/> * from the list. If the specified number of elements you want is larger than the<br/> * number of elements in the list it returns null<br/> */</span><br/>fun <span class=\"sy0\">&lt;</span>E<span class=\"sy0\">&gt;</span> List<span class=\"sy0\">&lt;</span>E<span class=\"sy0\">&gt;</span>.<span class=\"me1\">getRandomElements</span><span class=\"br0\">(</span>numberOfElements<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>E<span class=\"sy0\">&gt;?</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>numberOfElements <span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">shuffled</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">take</span><span class=\"br0\">(</span>numberOfElements<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> list <span class=\"sy0\">=</span> listOf<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">16</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">17</span>, <span class=\"nu0\">24</span>, <span class=\"nu0\">34</span>, <span class=\"nu0\">23</span>, <span class=\"nu0\">11</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The list consists of the following numbers:<span class=\"es1\">\\n</span>${list}\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// notice we can call our extension functions as if they were regular member functions of List</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>A randomly selected element from the list is ${list.getRandomElement()}\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>A random sequence of 5 elements from the list is ${list.getRandomElements(5)}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LabVIEW", "loc": 5, "block": "<pre class=\"text highlighted_source\">local(<br/>\tmy array = array('one', 'two', 3)<br/>)<br/>\u00a0<br/>#myarray -&gt; get(integer_random(#myarray -&gt; size, 1))</pre>"}, {"lang": "Lasso", "loc": 5, "block": "<pre class=\"text highlighted_source\">local(<br/>\tmy array = array('one', 'two', 3)<br/>)<br/>\u00a0<br/>#myarray -&gt; get(integer_random(#myarray -&gt; size, 1))</pre>"}, {"lang": "Liberty BASIC", "loc": 3, "block": "<pre class=\"lb highlighted_source\">list$ <span class=\"sy0\">=</span><span class=\"st0\">\"John Paul George Ringo Peter Paul Mary Obama Putin\"</span><br/>wantedTerm <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> <span class=\"nu0\">10</span> <span class=\"sy0\">*</span><span class=\"kw2\">rnd</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Selecting term \"</span>; wantedTerm; <span class=\"st0\">\" in the list, which was \"</span>; <span class=\"kw1\">word</span>$<span class=\"br0\">(</span> list$<span class=\"sy0\">,</span> wantedTerm<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span></pre>"}, {"lang": "LiveCode", "loc": 2, "block": "<pre class=\"text highlighted_source\">put \"Apple,Banana,Peach,Apricot,Pear\" into fruits<br/>put item (random(the number of items of fruits)) of fruits</pre>"}, {"lang": "Logo", "loc": 1, "block": "<pre class=\"text highlighted_source\">pick [1 2 3]</pre>"}, {"lang": "Lua", "loc": 3, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw3\">math.randomseed</span><span class=\"br0\">(</span><span class=\"kw3\">os.time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">local</span> a <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">}</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,#</span>a<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Maple", "loc": 3, "block": "<pre class=\"text highlighted_source\">a\u00a0:= [bear, giraffe, dog, rabbit, koala, lion, fox, deer, pony]:<br/>randomNum\u00a0:= rand(1 ..numelems(a)):<br/>a[randomNum()];</pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">RandomChoice[{a, b, c}]<br/>-&gt;c</pre>"}, {"lang": "MATLAB / Octave", "loc": 2, "block": "<pre class=\"matlab highlighted_source\">        list = <span class=\"br0\">{</span><span class=\"co2\">'a'</span>,<span class=\"co2\">'b'</span>,<span class=\"co2\">'c'</span><span class=\"br0\">}</span>; <br/>\tlist<span class=\"br0\">{</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ceil.html\"><span class=\"kw2\">ceil</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/rand.html\"><span class=\"kw2\">rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>*<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>list<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span></pre>"}, {"lang": "Maxima", "loc": 4, "block": "<pre class=\"text highlighted_source\">random_element(l):= part(l, 1+random(length(l)));<br/>/*  (%i1) random_element(['a, 'b, 'c]);<br/>    (%o1)                                  c<br/>*/</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 3, "block": "<pre class=\"text highlighted_source\">0 \u041f0 1 \u041f1 2 \u041f2 3 \u041f3 4 \u041f4 5<br/>\u00a0<br/>^ \u0421\u0427 * [x] \u041fE \u041a\u0418\u041fE \u0421/\u041f</pre>"}, {"lang": "NetLogo", "loc": 4, "block": "<pre class=\"text highlighted_source\">;; from list containnig only literals and literal constants<br/>user-message one-of [ 1 3 \"rooster\" blue ]<br/>;; from list containing variables and reporters<br/>user-message one-of (list (red + 2) turtles (patch 0 0) )</pre>"}, {"lang": "NetRexx", "loc": 14, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref savelog symbols nobinary<br/>\u00a0<br/>iArray = <span class=\"br0\">[</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span> <span class=\"br0\">]</span>     <span class=\"co1\">-- a traditional array</span><br/>iList = Arrays.<span class=\"me0\">asList</span><span class=\"br0\">(</span>iArray<span class=\"br0\">)</span>  <span class=\"co1\">-- a Java Collection \"List\" object</span><br/>iWords = <span class=\"st0\">'1 2 3 4 5'</span>           <span class=\"co1\">-- a list as a string of space delimited words</span><br/>\u00a0<br/>\u00a0<br/>v1 = iArray<span class=\"br0\">[</span>Random<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me0\">nextInt</span><span class=\"br0\">(</span>iArray.<span class=\"me0\">length</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>v2 = iList.<span class=\"me0\">get</span><span class=\"br0\">(</span>Random<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me0\">nextInt</span><span class=\"br0\">(</span>iList.<span class=\"me0\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>v3 = iWords.<span class=\"kw6\">word</span><span class=\"br0\">(</span>Random<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me0\">nextInt</span><span class=\"br0\">(</span>iWords.<span class=\"kw6\">words</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">-- the index for word() starts at one</span><br/>\u00a0<br/><span class=\"kw1\">say</span> v1 v2 v3<br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 4, "block": "<pre class=\"newlisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>pick<span class=\"sy1\">-</span>random<span class=\"sy1\">-</span>element R<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#nth\"><span class=\"kw1\">nth</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#rand\"><span class=\"kw1\">rand</span></a> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#length\"><span class=\"kw1\">length</span></a> R<span class=\"br0\">)</span><span class=\"br0\">)</span> R<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 4, "block": "<pre class=\"text highlighted_source\">randomize()<br/>\u00a0<br/>let ls = @[\"foo\", \"bar\", \"baz\"]<br/>echo ls.rand()</pre>"}, {"lang": "Objeck", "loc": 2, "block": "<pre class=\"objeck highlighted_source\">values <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>value <span class=\"sy0\">:=</span> values<span class=\"br0\">[</span><span class=\"br0\">(</span>Float<span class=\"sy0\">-&gt;</span><span class=\"me1\">Random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">100.0</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span><span class=\"kw2\">Int</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> values<span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "OCaml", "loc": 3, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> list_rand lst <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> len <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>length lst <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>nth lst <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> len<span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">: pickRand(l)   l size rand l at\u00a0;</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\">pick<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">=</span>v<span class=\"br0\">[</span><span class=\"kw1\">random</span><span class=\"br0\">(</span>#v<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">]</span></pre>"}, {"lang": "Pascal / Delphi / Free Pascal", "loc": 9, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> PickRandomElement <span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/>  s<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">5</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">string</span> <span class=\"sy3\">=</span> <span class=\"br0\">(</span><span class=\"st0\">'1234'</span><span class=\"sy1\">,</span> <span class=\"st0\">'ABCDE'</span><span class=\"sy1\">,</span> <span class=\"st0\">'Charlie'</span><span class=\"sy1\">,</span> <span class=\"st0\">'XB56ds'</span><span class=\"sy1\">,</span> <span class=\"st0\">'lala'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  randomize<span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span>low<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy3\">+</span> random<span class=\"br0\">(</span>length<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 2, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@array</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>a b c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$array</span><span class=\"br0\">[</span> <a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a> <span class=\"re0\">@array</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 1, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw3\">say</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 2, "block": "<pre class=\"text highlighted_source\">constant s = {'a','b','c'}<br/>puts(1,s[rand(length(s))])</pre>"}, {"lang": "PHP", "loc": 2, "block": "<pre class=\"php highlighted_source\"><span class=\"re0\">$arr</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"st_h\">'foo'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'bar'</span><span class=\"sy0\">,</span> <span class=\"st_h\">'baz'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">$arr</span><span class=\"br0\">[</span><a href=\"http://www.php.net/array_rand\"><span class=\"kw3\">array_rand</span></a><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 1, "block": "<pre class=\"text highlighted_source\">(get Lst (rand 1 (length Lst)))</pre>"}, {"lang": "PL/I", "loc": 3, "block": "<pre class=\"pli highlighted_source\">   <span class=\"kw1\">declare</span> t<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw1\">character</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">static</span> <span class=\"kw1\">initial</span><br/>      <span class=\"br0\">(</span><span class=\"st0\">'a'</span><span class=\"sy0\">,</span> <span class=\"st0\">'b'</span><span class=\"sy0\">,</span> <span class=\"st0\">'c'</span><span class=\"sy0\">,</span> <span class=\"st0\">'d'</span><span class=\"sy0\">,</span> <span class=\"st0\">'e'</span><span class=\"sy0\">,</span> <span class=\"st0\">'f'</span><span class=\"sy0\">,</span> <span class=\"st0\">'g'</span><span class=\"sy0\">,</span> <span class=\"st0\">'h'</span><span class=\"sy0\">,</span> <span class=\"st0\">'i'</span><span class=\"sy0\">,</span> <span class=\"st0\">'j'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">put</span> <span class=\"br0\">(</span> t<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">*</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Powershell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"nu0\">1</span>..<span class=\"nu0\">100</span> <span class=\"sy0\">|</span> Get<span class=\"sy0\">-</span>Random <span class=\"kw5\">-Count</span> <span class=\"nu0\">3</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 4, "block": "<pre class=\"prolog highlighted_source\">\u00a0<br/><span class=\"sy1\">?-</span> random_member<span class=\"br0\">(</span>M<span class=\"sy4\">,</span> <span class=\"br0\">[</span>a<span class=\"sy4\">,</span> b<span class=\"sy4\">,</span> c<span class=\"sy4\">,</span> d<span class=\"sy4\">,</span> e<span class=\"sy4\">,</span> f<span class=\"sy4\">,</span> g<span class=\"sy4\">,</span> h<span class=\"sy4\">,</span> i<span class=\"sy4\">,</span> j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>M <span class=\"sy6\">=</span> i<span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 40, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.s pickRandomElement<span class=\"br0\">(</span>List source.s<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> x <span class=\"sy0\">=</span> ListSize<span class=\"br0\">(</span>source<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> x <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw2\">SelectElement</span><span class=\"br0\">(</span>source<span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"kw2\">Random</span><span class=\"br0\">(</span>x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;element numbering is zero - based</span><br/>    <span class=\"kw1\">ProcedureReturn</span> source<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"co1\">;initialize list elements</span><br/><span class=\"kw1\">DataSection</span><br/>  elements:<br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"One\"</span>, <span class=\"st0\">\"Two\"</span>, <span class=\"st0\">\"Three\"</span>, <span class=\"st0\">\"Four\"</span>, <span class=\"st0\">\"Five\"</span>, <span class=\"st0\">\"Six\"</span>, <span class=\"st0\">\"Seven\"</span>, <span class=\"st0\">\"Eight\"</span>, <span class=\"st0\">\"Nine\"</span>, <span class=\"st0\">\"Ten\"</span><br/><span class=\"kw1\">EndDataSection</span><br/>\u00a0<br/>#elementCount <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/><span class=\"kw1\">NewList</span> item.s<span class=\"br0\">(</span><span class=\"br0\">)</span> <br/>\u00a0<br/><span class=\"kw1\">Restore</span> elements<br/><span class=\"kw1\">Define</span> i<br/><span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> #elementCount<br/>  <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>item<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Read</span>.s item<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Next</span> <br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Source list:  \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">ForEach</span> item<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span>item<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#CRLF$<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Random picks from list:  \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span>pickRandomElement<span class=\"br0\">(</span>item<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 3, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> <span class=\"kw3\">random</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw3\">random</span>.<span class=\"me1\">choice</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">'foo'</span><span class=\"sy0\">,</span> <span class=\"st0\">'bar'</span><span class=\"sy0\">,</span> <span class=\"st0\">'baz'</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"st0\">'baz'</span></pre>"}, {"lang": "R", "loc": 12, "block": "<pre class=\"rsplus highlighted_source\"><span class=\"co1\"># a vector (letters are builtin)</span><br/><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/letters.html\"><span class=\"kw2\">letters</span></a><br/><span class=\"co1\">#  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"</span><br/><span class=\"co1\"># [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"</span><br/>\u00a0<br/><span class=\"co1\"># picking one element</span><br/><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/sample.html\"><span class=\"kw2\">sample</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/letters.html\"><span class=\"kw2\">letters</span></a>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"co1\"># [1] \"n\"</span><br/>\u00a0<br/><span class=\"co1\"># picking some elements with repetition, and concatenating to get a word</span><br/><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/paste.html\"><span class=\"kw2\">paste</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/sample.html\"><span class=\"kw2\">sample</span></a><span class=\"br0\">(</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/letters.html\"><span class=\"kw2\">letters</span></a>, <span class=\"nu0\">10</span>, <a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/rep.html\"><span class=\"kw2\">rep</span></a><span class=\"sy0\">=</span><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/T.html\"><span class=\"kw2\">T</span></a><span class=\"br0\">)</span>, collapse<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"co1\"># [1] \"episxgcgmt\"</span></pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (pick-item l)<br/>  (list-ref l (random (length l))))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 17, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program picks a   random element   from a list   (tongue in cheek, a visual pun).*/</span><br/>_=  <span class=\"st0\">'hydrogen helium lithium beryllium boron carbon nitrogen oxygen fluorine neon sodium'</span><br/>_=_ <span class=\"st0\">'magnesium aluminum silicon phosphorous sulfur chlorine argon potassium calcium'</span><br/>_=_ <span class=\"st0\">'scandium titanium vanadium chromium manganese iron cobalt nickel copper zinc gallium'</span><br/>_=_ <span class=\"st0\">'germanium arsenic selenium bromine krypton rubidium strontium yttrium zirconium'</span><br/>_=_ <span class=\"st0\">'niobium molybdenum technetium ruthenium rhodium palladium silver cadmium indium tin'</span><br/>_=_ <span class=\"st0\">'antimony tellurium iodine xenon cesium barium lanthanum cerium praseodymium'</span><br/>_=_ <span class=\"st0\">'neodymium promethium samarium europium gadolinium terbium dysprosium holmium erbium'</span><br/>_=_ <span class=\"st0\">'thulium ytterbium lutetium hafnium tantalum tungsten rhenium osmium iridium platinum'</span><br/>_=_ <span class=\"st0\">'gold mercury thallium lead bismuth polonium astatine radon francium radium actinium'</span><br/>_=_ <span class=\"st0\">'thorium protactinium uranium neptunium plutonium americium curium berkelium'</span><br/>_=_ <span class=\"st0\">'californium einsteinium fermium mendelevium nobelium lawrencium rutherfordium dubnium'</span><br/>_=_ <span class=\"st0\">'seaborgium bohrium hassium meitnerium darmstadtium roentgenium copernicium Ununtrium'</span><br/>\u00a0<br/>#=<span class=\"kw6\">words</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span>                                       <span class=\"coMULTI\">/*obtain the number of words in list.  */</span><br/>item=<span class=\"kw6\">subword</span><span class=\"br0\">(</span>_, <span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, #<span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                 <span class=\"coMULTI\">/*obtain random word (element) in list.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'random element: '</span>    item                   <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Red", "loc": 1, "block": "<pre class=\"text highlighted_source\">&gt;&gt; random/only collect [repeat i 10 [keep i]]</pre>"}, {"lang": "Ring", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>aList  = \"abcdefghij\"<br/>for i = 1 to 10<br/>    letter = random(9) + 1<br/>    if letter &gt; 0<br/>       see aList[letter] + nl<br/>    ok       <br/>next <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/><span class=\"sy0\">%</span>w<span class=\"br0\">(</span>north east south west<span class=\"br0\">)</span>.<span class=\"me1\">sample</span>   <span class=\"co1\"># =&gt; \"west\"</span><br/><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">100</span><span class=\"br0\">)</span>.<span class=\"me1\">to_a</span>.<span class=\"me1\">sample</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>            <span class=\"co1\"># =&gt; [17, 79]</span></pre>"}, {"lang": "Run BASIC", "loc": 3, "block": "<pre class=\"text highlighted_source\">list$  = \"a,b,c,d,e,f,g,h,i,j\"<br/>letter = rnd(1) * 10<br/>print \"Selected letter:\"; word$(list$,letter,\",\")</pre>"}, {"lang": "Rust", "loc": 10, "block": "<pre class=\"text highlighted_source\">extern crate rand;<br/>\u00a0<br/>use rand::Rng;<br/>\u00a0<br/>fn main() {<br/>    let array = [5,1,2,5,6,7,8,1,2,4,5];<br/>    let mut rng = rand::thread_rng();<br/>\u00a0<br/>    println!(\"{}\", rng.choose(&amp;array).unwrap());<br/>}</pre>"}, {"lang": "Scala", "loc": 3, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> to <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">toList</span><br/>\u00a0<br/>println<span class=\"br0\">(</span>scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span>.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>.<span class=\"me1\">head</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 6, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(rand([] (\"foo\", \"bar\", \"baz\")));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 3, "block": "<pre class=\"ruby highlighted_source\">var arr = <span class=\"sy0\">%</span>w<span class=\"br0\">(</span>north east south west<span class=\"br0\">)</span>;<br/>say arr.<span class=\"kw3\">rand</span>;<br/>say arr.<span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">dump</span>;</pre>"}, {"lang": "Smalltalk", "loc": 1, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re6\">x</span> <span class=\"sy0\">:=</span> <span class=\"re2\">#<span class=\"br0\">(</span><span class=\"re5\">1</span> 2 3<span class=\"br0\">)</span></span> atRandom.</pre>"}, {"lang": "SuperCollider", "loc": 1, "block": "<pre class=\"text highlighted_source\">[1, 2, 3].choose</pre>"}, {"lang": "Swift", "loc": 4, "block": "<pre class=\"text highlighted_source\">import Darwin<br/>\u00a0<br/>let myList = [1, 2, 4, 5, 62, 234, 1, -1]<br/>print(myList[Int(arc4random_uniform(UInt32(myList.count)))])</pre>"}, {"lang": "Tcl", "loc": 4, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> randelem <span class=\"br0\">{</span><span class=\"kw2\">list</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">lindex</span> <span class=\"re0\">$list</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>int<span class=\"br0\">(</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$list</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> x <span class=\"br0\">[</span>randelem <span class=\"br0\">{</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"br0\">]</span></pre>"}, {"lang": "TXR", "loc": 3, "block": "<pre class=\"text highlighted_source\">@(do (defun randelem (seq)<br/>       [seq (random nil (length seq))]))<br/>@(bind x @(randelem #(\"a\" \"b\" \"c\" \"d\")))</pre>"}, {"lang": "TUSCRIPT", "loc": 6, "block": "<pre class=\"text highlighted_source\">$$ MODE TUSCRIPT<br/>list=\"John'Paul'George'Ringo'Peter'Paul'Mary'Obama'Putin\"<br/>sizeList=SIZE(list)<br/>selectedNr=RANDOM_NUMBERS (1,sizeList,1)<br/>selectedItem=SELECT(list,#selectednr)<br/>PRINT \"Selecting term \",selectedNr,\"  in the list, which was \",selectedItem</pre>"}, {"lang": "Ursa", "loc": 6, "block": "<pre class=\"text highlighted_source\"># generate a stream (ursa equivalent of a list)<br/>decl string&lt;&gt; str<br/>append \"these\" \"are\" \"some\" \"values\" str<br/>\u00a0<br/>decl ursa.util.random r<br/>out str&lt;(r.getint (size str))&gt; endl console</pre>"}, {"lang": "VBA", "loc": 12, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Main_Pick_Random_Element()<br/>    Debug.<span class=\"kw4\">Print</span> Pick_Random_Element(Array(1, 2, 3, 4, 5, #11/24/2017#, <span class=\"st0\">\"azerty\"</span>))<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> Pick_Random_Element(myArray)<br/>    Randomize Timer<br/>    Pick_Random_Element = myArray(Int((Rnd * (<span class=\"kw4\">UBound</span>(myArray) - <span class=\"kw4\">LBound</span>(myArray) + 1) + <span class=\"kw4\">LBound</span>(myArray))))<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 8, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> pick_random(arr)<br/>\t<span class=\"kw4\">Set</span> objRandom = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"System.Random\"</span>)<br/>\tpick_random = arr(objRandom.Next_2(0,<span class=\"kw4\">UBound</span>(arr)+1))<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>WScript.Echo pick_random(Array(<span class=\"st0\">\"a\"</span>,<span class=\"st0\">\"b\"</span>,<span class=\"st0\">\"c\"</span>,<span class=\"st0\">\"d\"</span>,<span class=\"st0\">\"e\"</span>,<span class=\"st0\">\"f\"</span>))<br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 5, "block": "<pre class=\"text highlighted_source\">code Ran=1, Text=12;<br/>int  List;<br/>[List:= [\"hydrogen\", \"helium\", \"lithium\", \"beryllium\", \"boron\"];  \\(Thanks REXX)<br/>Text(0, List(Ran(5)));<br/>]</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">list:=T(\"hydrogen\", \"helium\", \"lithium\", \"beryllium\", \"boron\");<br/>list[(0).random(list.len())]</pre>"}]}