{"task": "Call_a_function_in_a_shared_library", "blocks": [{"lang": "Ada", "loc": 45, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;   <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Interfaces;    <span class=\"kw3\">use</span> Interfaces;<br/><span class=\"kw3\">with</span> Interfaces.<span class=\"me1\">C</span>;  <span class=\"kw3\">use</span> Interfaces.<span class=\"me1\">C</span>;<br/><span class=\"kw3\">with</span> System;        <span class=\"kw3\">use</span> System;<br/>\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Unchecked_Conversion</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Shared_Library_Call <span class=\"kw1\">is</span><br/>   <span class=\"co1\">--</span><br/>   <span class=\"co1\">-- Interface to kernel32.dll which is responsible for loading DLLs under Windows.</span><br/>   <span class=\"co1\">-- There are ready to use Win32 bindings. We don't want to use them here.</span><br/>   <span class=\"co1\">--</span><br/>   <span class=\"kw3\">type</span> HANDLE <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Unsigned_32;<br/>   <span class=\"kw3\">function</span> LoadLibrary <span class=\"br0\">(</span>lpFileName\u00a0: char_array<span class=\"br0\">)</span> <span class=\"kw1\">return</span> HANDLE;<br/>   <span class=\"kw3\">pragma</span> Import <span class=\"br0\">(</span>stdcall, LoadLibrary, <span class=\"st0\">\"LoadLibrary\"</span>, <span class=\"st0\">\"_LoadLibraryA\"</span><span class=\"br0\">)</span>; <span class=\"co1\">-- Ada95 does not have the @n suffix.</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> GetProcAddress <span class=\"br0\">(</span>hModule\u00a0: HANDLE; lpProcName\u00a0: char_array<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> Address;<br/>   <span class=\"kw3\">pragma</span> Import <span class=\"br0\">(</span>stdcall, GetProcAddress, <span class=\"st0\">\"GetProcAddress\"</span>, <span class=\"st0\">\"_GetProcAddress\"</span><span class=\"br0\">)</span>; <span class=\"co1\">--</span><br/>   <span class=\"co1\">--</span><br/>   <span class=\"co1\">-- The interface of the function we want to call. It is a pointer (access type)</span><br/>   <span class=\"co1\">-- because we will link it dynamically. The function is from User32.dll</span><br/>   <span class=\"co1\">--</span><br/>   <span class=\"kw3\">type</span> MessageBox <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> <span class=\"kw3\">function</span> <br/>        <span class=\"br0\">(</span>  hWnd     \u00a0: Address    \u00a0:= Null_Address;<br/>           lpText   \u00a0: char_array;<br/>           lpCaption\u00a0: char_array \u00a0:= To_C <span class=\"br0\">(</span><span class=\"st0\">\"Greeting\"</span><span class=\"br0\">)</span>;<br/>           uType    \u00a0: Unsigned_16\u00a0:= <span class=\"nu0\">0</span><br/>        <span class=\"br0\">)</span>  <span class=\"kw1\">return</span> Integer_16;<br/>   <span class=\"kw3\">pragma</span> Convention <span class=\"br0\">(</span>Stdcall, MessageBox<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">function</span> To_MessageBox <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Unchecked_Conversion</span> <span class=\"br0\">(</span>Address, MessageBox<span class=\"br0\">)</span>;<br/>\u00a0<br/>   Library\u00a0: HANDLE \u00a0:= LoadLibrary <span class=\"br0\">(</span>To_C <span class=\"br0\">(</span><span class=\"st0\">\"user32.dll\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Pointer\u00a0: Address\u00a0:= GetProcAddress <span class=\"br0\">(</span>Library, To_C <span class=\"br0\">(</span><span class=\"st0\">\"MessageBoxA\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">if</span> Pointer /= Null_Address <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">declare</span><br/>         Result\u00a0: Integer_16;<br/>      <span class=\"kw1\">begin</span><br/>         Result\u00a0:= To_MessageBox <span class=\"br0\">(</span>Pointer<span class=\"br0\">)</span> <span class=\"br0\">(</span>lpText =&gt; To_C <span class=\"br0\">(</span><span class=\"st0\">\"Hello!\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span>;<br/>   <span class=\"kw1\">else</span><br/>      Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Unable to load the library \"</span> &amp; HANDLE'Image <span class=\"br0\">(</span>Library<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/><span class=\"kw1\">end</span> Shared_Library_Call;</pre>"}, {"lang": "AutoHotkey", "loc": 3, "block": "<pre class=\"autohotkey highlighted_source\">ahkdll <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"LoadLibrary\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"str\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"AutoHotkey.dll\"</span><span class=\"br0\">)</span><br/>clientHandle <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"AutoHotkey\\ahkdll\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"str\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"dllclient.ahk\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"str\"</span><br/><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"str\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"parameter1 parameter2\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Cdecl Int\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "BaCon", "loc": 5, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"co1\">' Call a dynamic library function</span><br/>PROTO j0<br/>bessel0 <span class=\"sy0\">=</span> j0<span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> bessel0<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 2, "block": "<pre class=\"text highlighted_source\">      SYS \"MessageBox\", @hwnd%, \"This is a test message\", 0, 0<br/>\u00a0</pre>"}, {"lang": "C", "loc": 36, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;dlfcn.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> myopenimage<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>in<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> handle<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"internal openimage opens\u00a0%s...<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> in<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> handle<span class=\"sy0\">++;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>imglib<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>extopenimage<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> imghandle<span class=\"sy0\">;</span><br/>\u00a0<br/>  imglib <span class=\"sy0\">=</span> dlopen<span class=\"br0\">(</span><span class=\"st0\">\"./fakeimglib.so\"</span><span class=\"sy0\">,</span> RTLD_LAZY<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span> imglib <span class=\"sy0\">!=</span> NULL <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"coMULTI\">/* extopenimage = (int (*)(const char *))dlsym(imglib,...)<br/>       \"man dlopen\" says that C99 standard leaves casting from<br/>       \"void *\" to a function pointer undefined. The following is the<br/>       POSIX.1-2003 workaround found in man */</span><br/>    <span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">void</span> <span class=\"sy0\">**</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>extopenimage<span class=\"br0\">)</span> <span class=\"sy0\">=</span> dlsym<span class=\"br0\">(</span>imglib<span class=\"sy0\">,</span> <span class=\"st0\">\"openimage\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"coMULTI\">/* the following works with gcc, gives no warning even with<br/>       -Wall -std=c99 -pedantic options...\u00a0:D */</span><br/>    <span class=\"coMULTI\">/* extopenimage = dlsym(imglib, \"openimage\"); */</span><br/>    imghandle <span class=\"sy0\">=</span> extopenimage<span class=\"br0\">(</span><span class=\"st0\">\"fake.img\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    imghandle <span class=\"sy0\">=</span> myopenimage<span class=\"br0\">(</span><span class=\"st0\">\"fake.img\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"opened with handle\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> imghandle<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"coMULTI\">/* ... */</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>imglib <span class=\"sy0\">!=</span> NULL <span class=\"br0\">)</span> dlclose<span class=\"br0\">(</span>imglib<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> EXIT_SUCCESS<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 10, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System.Runtime.InteropServices</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span>DllImport<span class=\"br0\">(</span><span class=\"st0\">\"fakelib.dll\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">extern</span> <span class=\"kw4\">int</span> fakefunction<span class=\"br0\">(</span><span class=\"kw4\">int</span> args<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> fakefunction<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "COBOL", "loc": 37, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> callsym<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> handle <span class=\"kw3\">usage</span> <span class=\"kw3\">pointer</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> addr   <span class=\"kw3\">usage</span> program-<span class=\"kw3\">pointer</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"dlopen\"</span> <span class=\"kw3\">using</span><br/>           <span class=\"kw3\">by</span> <span class=\"kw3\">reference</span> <span class=\"kw3\">null</span><br/>           <span class=\"kw3\">by</span> <span class=\"kw3\">value</span> <span class=\"nu0\">1</span><br/>           returning handle<br/>           <span class=\"kw3\">on</span> <span class=\"kw3\">exception</span><br/>               <span class=\"kw2\">display</span> <span class=\"kw3\">function</span> exception-statement <span class=\"kw3\">upon</span> syserr<br/>               goback<br/>       end-<span class=\"kw2\">call</span><br/>       <span class=\"kw1\">if</span> handle <span class=\"kw3\">equal</span> <span class=\"kw3\">null</span> <span class=\"kw3\">then</span><br/>           <span class=\"kw2\">display</span> <span class=\"kw3\">function</span> module-id <span class=\"st0\">\": error getting dlopen handle\"</span><br/>             <span class=\"kw3\">upon</span> syserr<br/>           goback<br/>       end-<span class=\"kw1\">if</span><br/>\u00a0<br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"dlsym\"</span> <span class=\"kw3\">using</span><br/>           <span class=\"kw3\">by</span> <span class=\"kw3\">value</span> handle<br/>           <span class=\"kw3\">by</span> <span class=\"kw3\">content</span> z<span class=\"st0\">\"perror\"</span><br/>           returning addr<br/>       end-<span class=\"kw2\">call</span><br/>       <span class=\"kw1\">if</span> addr <span class=\"kw3\">equal</span> <span class=\"kw3\">null</span> <span class=\"kw3\">then</span><br/>           <span class=\"kw2\">display</span> <span class=\"kw3\">function</span> module-id <span class=\"st0\">\": error getting perror symbol\"</span><br/>              <span class=\"kw3\">upon</span> syserr<br/>       <span class=\"kw3\">else</span><br/>           <span class=\"kw2\">call</span> addr returning <span class=\"kw3\">omitted</span><br/>       end-<span class=\"kw1\">if</span><br/>\u00a0<br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> callsym<span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 7, "block": "<pre class=\"lisp highlighted_source\">CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>cffi<span class=\"sy0\">:</span><span class=\"me1\">load-foreign-library</span> <span class=\"st0\">\"libX11.so\"</span><span class=\"br0\">)</span><br/>#<span class=\"sy0\">&lt;</span>CFFI<span class=\"sy0\">::</span><span class=\"me0\">FOREIGN-LIBRARY</span> <span class=\"br0\">{</span>1004F4ECC1<span class=\"br0\">}</span><span class=\"sy0\">&gt;</span><br/>CL-USER<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>cffi<span class=\"sy0\">:</span><span class=\"me1\">foreign-</span><span class=\"kw1\">funcall</span> <span class=\"st0\">\"XOpenDisplay\"</span><br/>                               <span class=\"sy0\">:</span><span class=\"me1\">string</span> #+sbcl <span class=\"br0\">(</span>sb-posix<span class=\"sy0\">:</span><span class=\"me1\">getenv</span> <span class=\"st0\">\"DISPLAY\"</span><span class=\"br0\">)</span><br/>                                       #-sbcl <span class=\"st0\">\":0.0\"</span><br/>                               <span class=\"sy0\">:</span><span class=\"me1\">pointer</span><span class=\"br0\">)</span><br/>#<span class=\"sy0\">.</span><span class=\"br0\">(</span>SB-SYS<span class=\"sy0\">:</span><span class=\"me1\">INT-SAP</span> #X00650FD0<span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 9, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">pragma</span><span class=\"br0\">(</span>lib<span class=\"sy0\">,</span> <span class=\"st0\">\"user32.lib\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">c</span>.<span class=\"me1\">windows</span>.<span class=\"me1\">windows</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">extern</span><span class=\"br0\">(</span>Windows<span class=\"br0\">)</span> UINT GetDoubleClickTime<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span>GetDoubleClickTime<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 1, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">procedure</span> DoSomething<span class=\"sy1\">;</span> <span class=\"kw1\">external</span> <span class=\"st0\">'MYLIB.DLL'</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Fortran", "loc": 6, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"kw4\">double</span> add_n<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"sy0\">*</span> a<span class=\"sy0\">,</span> <span class=\"kw4\">double</span><span class=\"sy0\">*</span> b<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/><span class=\"kw1\">return</span> <span class=\"sy0\">*</span>a <span class=\"sy0\">+</span> <span class=\"sy0\">*</span>b<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 23, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co1\">' Attempt to call Beep function in Win32 API</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> Any <span class=\"kw1\">Ptr</span> library = <span class=\"kw1\">DyLibLoad</span><span class=\"br0\">(</span><span class=\"st0\">\"kernel32.dll\"</span><span class=\"br0\">)</span> <span class=\"co1\">'' load dll</span><br/>\u00a0<br/><span class=\"kw1\">If</span> library = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>  <span class=\"kw1\">Print</span> <span class=\"st0\">\"Unable to load kernel32.dll - calling built in Beep function instead\"</span><br/>  <span class=\"kw1\">Beep</span>\u00a0: <span class=\"kw1\">Beep</span>\u00a0: <span class=\"kw1\">Beep</span> <br/><span class=\"kw1\">Else</span><br/>  <span class=\"kw1\">Dim</span> beep_ <span class=\"kw1\">As</span> <span class=\"kw1\">Function</span> <span class=\"br0\">(</span><span class=\"kw1\">ByVal</span> <span class=\"kw1\">As</span> ULong, <span class=\"kw1\">ByVal</span> <span class=\"kw1\">As</span> ULong<span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Long</span>  <span class=\"co1\">'' declare function pointer</span><br/>  beep_ = <span class=\"kw1\">DyLibSymbol</span><span class=\"br0\">(</span>library, <span class=\"st0\">\"Beep\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> beep_ = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>    <span class=\"kw1\">Print</span> <span class=\"st0\">\"Unable to retrieve Beep function from kernel32.dll - calling built in Beep function instead\"</span><br/>    <span class=\"kw1\">Beep</span>\u00a0: <span class=\"kw1\">Beep</span>\u00a0: <span class=\"kw1\">Beep</span><br/>  <span class=\"kw1\">Else</span> <br/>    <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> =  <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">3</span>\u00a0: beep_<span class=\"br0\">(</span><span class=\"nu0\">1000</span>, <span class=\"nu0\">250</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span> <br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  DyLibFree<span class=\"br0\">(</span>library<span class=\"br0\">)</span> <span class=\"co1\">'' unload library</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Haskell", "loc": 41, "block": "<pre class=\"haskell highlighted_source\">#<span class=\"sy0\">!/</span>usr<span class=\"sy0\">/</span>bin<span class=\"sy0\">/</span>env stack<br/><span class=\"co1\">-- stack --resolver lts-6.33 --install-ghc runghc --package unix</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Exception <span class=\"br0\">(</span> try <span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Foreign.html\"><span class=\"kw2\">Foreign</span></a> <span class=\"br0\">(</span> FunPtr<span class=\"sy0\">,</span> allocaBytes <span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Foreign.html\"><span class=\"kw2\">Foreign</span></a><span class=\"sy0\">.</span>C<br/>    <span class=\"br0\">(</span> CSize<span class=\"br0\">(</span><span class=\"sy0\">..</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> CString<span class=\"sy0\">,</span> withCAStringLen<span class=\"sy0\">,</span> peekCAStringLen <span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Info <span class=\"br0\">(</span> os <span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a><span class=\"sy0\">.</span>Error <span class=\"br0\">(</span> ioeGetErrorString <span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a><span class=\"sy0\">.</span>Unsafe <span class=\"br0\">(</span> unsafePerformIO <span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Posix<span class=\"sy0\">.</span>DynamicLinker<br/>    <span class=\"br0\">(</span> RTLDFlags<span class=\"br0\">(</span>RTLD<span class=\"sy0\">_</span>LAZY<span class=\"br0\">)</span><span class=\"sy0\">,</span> dlsym<span class=\"sy0\">,</span> dlopen <span class=\"br0\">)</span><br/>\u00a0<br/>dlSuffix <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>dlSuffix <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> os <span class=\"sy0\">==</span> <span class=\"st0\">\"darwin\"</span> <span class=\"kw1\">then</span> <span class=\"st0\">\".dylib\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\".so\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> RevFun <span class=\"sy0\">=</span> CString <span class=\"sy0\">-&gt;</span> CString <span class=\"sy0\">-&gt;</span> CSize <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>foreign <span class=\"kw1\">import</span> ccall <span class=\"st0\">\"dynamic\"</span><br/>  mkFun <span class=\"sy0\">::</span> FunPtr RevFun <span class=\"sy0\">-&gt;</span> RevFun<br/>\u00a0<br/>callRevFun <span class=\"sy0\">::</span> RevFun <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>callRevFun f s <span class=\"sy0\">=</span> unsafePerformIO <span class=\"sy0\">$</span> withCAStringLen s <span class=\"sy0\">$</span> \\<span class=\"br0\">(</span>cs<span class=\"sy0\">,</span> len<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>  allocaBytes len <span class=\"sy0\">$</span> \\buf <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>    f buf cs <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> len<span class=\"br0\">)</span><br/>    peekCAStringLen <span class=\"br0\">(</span>buf<span class=\"sy0\">,</span> len<span class=\"br0\">)</span><br/>\u00a0<br/>getReverse <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span><br/>getReverse <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  lib <span class=\"sy0\">&lt;-</span> dlopen <span class=\"br0\">(</span><span class=\"st0\">\"libcrypto\"</span> <span class=\"sy0\">++</span> dlSuffix<span class=\"br0\">)</span> <span class=\"br0\">[</span>RTLD<span class=\"sy0\">_</span>LAZY<span class=\"br0\">]</span><br/>  fun <span class=\"sy0\">&lt;-</span> dlsym lib <span class=\"st0\">\"BUF_reverse\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">$</span> callRevFun <span class=\"sy0\">$</span> mkFun fun<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  x <span class=\"sy0\">&lt;-</span> try getReverse<br/>  <span class=\"kw1\">let</span> <span class=\"br0\">(</span>msg<span class=\"sy0\">,</span> rev<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">case</span> x <span class=\"kw1\">of</span><br/>          Left e <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>ioeGetErrorString e <span class=\"sy0\">++</span> <span class=\"st0\">\"; using fallback\"</span><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a><span class=\"br0\">)</span><br/>          Right f <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"st0\">\"Using BUF_reverse from OpenSSL\"</span><span class=\"sy0\">,</span> f<span class=\"br0\">)</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> msg<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> rev <span class=\"st0\">\"a man a plan a canal panama\"</span></pre>"}, {"lang": "J", "loc": 12, "block": "<pre class=\"j highlighted_source\">require <span class=\"st_h\">'dll'</span><br/>strdup=: <span class=\"st_h\">'msvcrt.dll _strdup &gt;x *'</span> cd &lt;<br/>free=: <span class=\"st_h\">'msvcrt.dll free n x'</span> cd &lt;<br/>getstr=: free ] <a class=\"__cf_email__\" data-cfemail=\"b5d8d0d8c7f5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,&amp;<span class=\"nu0\">0</span> <span class=\"nu0\">_1</span><br/>\u00a0<br/>DupStr=:verb define<br/>  <span class=\"kw1\">try.</span><br/>    <a class=\"__cf_email__\" data-cfemail=\"bbdcdecfc8cfc9fbc8cfc9dfcecb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> <span class=\"kw2\">y</span><br/>  <span class=\"kw1\">catch.</span><br/>    <span class=\"kw2\">y</span><br/>  <span class=\"kw1\">end.</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 71, "block": "<pre class=\"java highlighted_source\"><span class=\"coMULTI\">/* TrySort.java */</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Collections</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Random</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> TrySort <span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> useC<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">loadLibrary</span><span class=\"br0\">(</span><span class=\"st0\">\"TrySort\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    useC <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">catch</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aunsatisfiedlinkerror+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">UnsatisfiedLinkError</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    useC <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">native</span> <span class=\"kw4\">void</span> sortInC<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> ary<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> IntList <span class=\"kw1\">extends</span> java.<span class=\"me1\">util</span>.<span class=\"me1\">AbstractList</span><span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> ary<span class=\"sy0\">;</span><br/>\tIntList<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> ary<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span>.<span class=\"me1\">ary</span> <span class=\"sy0\">=</span> ary<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> get<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> ary<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> set<span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> o <span class=\"sy0\">=</span> ary<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span> ary<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span> <span class=\"kw1\">return</span> o<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">int</span> size<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> ary.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> ReverseAbsCmp<br/>\t<span class=\"kw1\">implements</span> java.<span class=\"me1\">util</span>.<span class=\"me1\">Comparator</span><span class=\"sy0\">&lt;</span>Integer<span class=\"sy0\">&gt;</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">public</span> <span class=\"kw4\">int</span> compare<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> pa, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a> pb<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <span class=\"coMULTI\">/* Order from highest to lowest absolute value. */</span><br/>\t    <span class=\"kw4\">int</span> a <span class=\"sy0\">=</span> pa <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"sy0\">-</span>pa <span class=\"sy0\">:</span> pa<span class=\"sy0\">;</span><br/>\t    <span class=\"kw4\">int</span> b <span class=\"sy0\">=</span> pb <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"sy0\">-</span>pb <span class=\"sy0\">:</span> pb<span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">return</span> a <span class=\"sy0\">&lt;</span> b <span class=\"sy0\">?</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">:</span> a <span class=\"sy0\">&gt;</span> b <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> sortInJava<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> ary<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acollections+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Collections</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> IntList<span class=\"br0\">(</span>ary<span class=\"br0\">)</span>, <span class=\"kw1\">new</span> ReverseAbsCmp<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"coMULTI\">/* Create an array of random integers. */</span><br/>\t<span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> ary <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">1000000</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a> rng <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Random</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> ary.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t    ary<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> rng.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* Do the reverse sort. */</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>useC<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Sorting in C...  \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    sortInC<span class=\"br0\">(</span>ary<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><br/>\t\t<span class=\"br0\">(</span><span class=\"st0\">\"Missing library for C!  Sorting in Java...  \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    sortInJava<span class=\"br0\">(</span>ary<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> ary.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw4\">int</span> a <span class=\"sy0\">=</span> ary<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw4\">int</span> b <span class=\"sy0\">=</span> ary<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"sy0\">-</span>a <span class=\"sy0\">:</span> a<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"sy0\">-</span>b <span class=\"sy0\">:</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"*BUG IN SORT*\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">exit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"ok\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#this example works on Windows<br/>ccall( (:GetDoubleClickTime, \"User32\"), stdcall,<br/>\tUint, (), )<br/>\u00a0<br/>ccall( (:clock, \"libc\"), Int32, ())</pre>"}, {"lang": "Kotlin", "loc": 8, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"coMULTI\">/* gcc -shared -fPIC -nostartfiles fakeimglib.c -o fakeimglib.so */</span><br/><span class=\"kw4\">int</span> openimage<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> handle <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"opening\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> handle<span class=\"sy0\">++;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lingo", "loc": 18, "block": "<pre class=\"text highlighted_source\">-- calculate CRC-32 checksum<br/>str = \"The quick brown fox jumps over the lazy dog\"<br/>\u00a0<br/>-- is shared library (in Director called \"Xtra\", a DLL in windows, a sharedLib in<br/>-- OS X) available?<br/>if ilk(xtra(\"Crypto\"))=#xtra then<br/>\u00a0<br/>  -- use shared library<br/>  cx = xtra(\"Crypto\").new()<br/>  crc = cx.cx_crc32_string(str)<br/>\u00a0<br/>else<br/>\u00a0<br/>  -- otherwise use (slower) pure lingo solution<br/>  crcObj = script(\"CRC\").new()<br/>  crc = crcObj.crc32(str)<br/>\u00a0<br/>end if</pre>"}, {"lang": "Maple", "loc": 3, "block": "<pre class=\"text highlighted_source\">&gt; cfloor\u00a0:= define_external( floor, s::float[8], RETURN::float[8], LIB = \"libm.so\" ):<br/>&gt; cfloor( 2.3 );<br/>                                   2.</pre>"}, {"lang": "Mathematica", "loc": 4, "block": "<pre class=\"text highlighted_source\">Needs[\"NETLink`\"];<br/>externalFloor = DefineDLLFunction[\"floor\", \"msvcrt.dll\", \"double\", { \"double\" }];<br/>externalFloor[4.2]<br/>-&gt; 4.</pre>"}, {"lang": "Nim", "loc": 5, "block": "<pre class=\"text highlighted_source\">proc openimage(s: cstring): cint {.importc, dynlib: \"./fakeimglib.so\".}<br/>\u00a0<br/>echo openimage(\"foo\")<br/>echo openimage(\"bar\")<br/>echo openimage(\"baz\")</pre>"}, {"lang": "OCaml", "loc": 31, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> Dlffi<br/>\u00a0<br/><span class=\"kw1\">let</span> get_int <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> Int v <span class=\"sy0\">-&gt;</span> v <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">failwith</span> <span class=\"st0\">\"get_int\"</span><br/><span class=\"kw1\">let</span> get_ptr <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> Ptr v <span class=\"sy0\">-&gt;</span> v <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">failwith</span> <span class=\"st0\">\"get_ptr\"</span><br/><span class=\"kw1\">let</span> get_float <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> Float v <span class=\"sy0\">-&gt;</span> v <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">failwith</span> <span class=\"st0\">\"get_float\"</span><br/><span class=\"kw1\">let</span> get_double <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> Double v <span class=\"sy0\">-&gt;</span> v <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">failwith</span> <span class=\"st0\">\"get_double\"</span><br/><span class=\"kw1\">let</span> get_string <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a> v <span class=\"sy0\">-&gt;</span> v <span class=\"sy0\">|</span> _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">failwith</span> <span class=\"st0\">\"get_string\"</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"co1\">(* load the library *)</span><br/>  <span class=\"kw1\">let</span> xlib <span class=\"sy0\">=</span> dlopen <span class=\"st0\">\"/usr/lib/libX11.so\"</span> <span class=\"br0\">[</span>RTLD_LAZY<span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>  <span class=\"co1\">(* load the functions *)</span><br/>  <span class=\"kw1\">let</span> _open_display <span class=\"sy0\">=</span> dlsym xlib <span class=\"st0\">\"XOpenDisplay\"</span><br/>  <span class=\"kw1\">and</span> _default_screen <span class=\"sy0\">=</span> dlsym xlib <span class=\"st0\">\"XDefaultScreen\"</span><br/>  <span class=\"kw1\">and</span> _display_width <span class=\"sy0\">=</span> dlsym xlib  <span class=\"st0\">\"XDisplayWidth\"</span><br/>  <span class=\"kw1\">and</span> _display_height <span class=\"sy0\">=</span> dlsym xlib <span class=\"st0\">\"XDisplayHeight\"</span><br/>  <span class=\"kw1\">in</span><br/>  <span class=\"co1\">(* wrap functions to provide a higher level interface *)</span><br/>  <span class=\"kw1\">let</span> open_display <span class=\"re1\">~name</span> <span class=\"sy0\">=</span> get_ptr<span class=\"br0\">(</span>fficall _open_display <span class=\"br0\">[</span><span class=\"sy0\">|</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a> name <span class=\"sy0\">|</span><span class=\"br0\">]</span> Return_ptr<span class=\"br0\">)</span><br/>  <span class=\"kw1\">and</span> default_screen <span class=\"re1\">~dpy</span> <span class=\"sy0\">=</span> get_int<span class=\"br0\">(</span>fficall _default_screen <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"br0\">(</span>Ptr dpy<span class=\"br0\">)</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span> Return_int<span class=\"br0\">)</span><br/>  <span class=\"kw1\">and</span> display_width <span class=\"re1\">~dpy</span> <span class=\"re1\">~scr</span> <span class=\"sy0\">=</span> get_int<span class=\"br0\">(</span>fficall _display_width <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"br0\">(</span>Ptr dpy<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span>Int scr<span class=\"br0\">)</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span> Return_int<span class=\"br0\">)</span><br/>  <span class=\"kw1\">and</span> display_height <span class=\"re1\">~dpy</span> <span class=\"re1\">~scr</span> <span class=\"sy0\">=</span> get_int<span class=\"br0\">(</span>fficall _display_height <span class=\"br0\">[</span><span class=\"sy0\">|</span> <span class=\"br0\">(</span>Ptr dpy<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">(</span>Int scr<span class=\"br0\">)</span> <span class=\"sy0\">|</span><span class=\"br0\">]</span> Return_int<span class=\"br0\">)</span><br/>  <span class=\"kw1\">in</span><br/>  <span class=\"co1\">(* use our functions *)</span><br/>  <span class=\"kw1\">let</span> dpy <span class=\"sy0\">=</span> open_display <span class=\"re1\">~name</span><span class=\"sy0\">:</span><span class=\"st0\">\":0\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> screen_number <span class=\"sy0\">=</span> default_screen <span class=\"re1\">~dpy</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> width <span class=\"sy0\">=</span> display_width <span class=\"re1\">~dpy</span> <span class=\"re1\">~scr</span><span class=\"sy0\">:</span>screen_number<br/>  <span class=\"kw1\">and</span> height <span class=\"sy0\">=</span> display_height <span class=\"re1\">~dpy</span> <span class=\"re1\">~scr</span><span class=\"sy0\">:</span>screen_number <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"# Screen dimensions are:\u00a0%d x\u00a0%d pixels\\n\"</span> width height<span class=\"sy0\">;</span><br/>  dlclose xlib<span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "OxygenBasic", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'Loading a shared library at run time and calling a function.<br/>\u00a0<br/>declare MessageBox(sys hWnd, String text,caption, sys utype)<br/>\u00a0<br/>sys user32 = LoadLibrary \"user32.dll\"<br/>\u00a0<br/>if user32 then @Messagebox = getProcAddress user32,\"MessageBoxA\"<br/>\u00a0<br/>if @MessageBox then MessageBox 0,\"Hello\",\"OxygenBasic\",0<br/>\u00a0<br/>'...<br/>\u00a0<br/>FreeLibrary user32<br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">install</span><span class=\"br0\">(</span><span class=\"st0\">\"function_name\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"G\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"gp_name\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"./test.gp.so\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 15, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> NativeCall<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> libX11 <span class=\"sy0\">=</span> <span class=\"st_h\">'/usr/lib/x86_64-linux-gnu/libX11.so.6'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> XOpenDisplay<span class=\"br0\">(</span>Str <span class=\"re0\">$s</span> <span class=\"sy0\">--&gt;</span> int32<span class=\"br0\">)</span> <span class=\"kw1\">is</span> native<span class=\"br0\">(</span>libX11<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> XCloseDisplay<span class=\"br0\">(</span>int32 <span class=\"re0\">$i</span> <span class=\"sy0\">--&gt;</span> int32<span class=\"br0\">)</span> <span class=\"kw1\">is</span> native<span class=\"br0\">(</span>libX11<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">if</span> try <span class=\"kw1\">my</span> <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> XOpenDisplay <span class=\"st0\">\":0.0\"</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"ID = $d\"</span><span class=\"sy0\">;</span><br/>    XCloseDisplay<span class=\"br0\">(</span><span class=\"re0\">$d</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"No library {libX11}!\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"Use this window instead --&gt; \u2b1c\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 15, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> NativeCall<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> libX11 <span class=\"sy0\">=</span> <span class=\"st_h\">'/usr/lib/x86_64-linux-gnu/libX11.so.6'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> XOpenDisplay<span class=\"br0\">(</span>Str <span class=\"re0\">$s</span> <span class=\"sy0\">--&gt;</span> int32<span class=\"br0\">)</span> <span class=\"kw1\">is</span> native<span class=\"br0\">(</span>libX11<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> XCloseDisplay<span class=\"br0\">(</span>int32 <span class=\"re0\">$i</span> <span class=\"sy0\">--&gt;</span> int32<span class=\"br0\">)</span> <span class=\"kw1\">is</span> native<span class=\"br0\">(</span>libX11<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">*</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">if</span> try <span class=\"kw1\">my</span> <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> XOpenDisplay <span class=\"st0\">\":0.0\"</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"ID = $d\"</span><span class=\"sy0\">;</span><br/>    XCloseDisplay<span class=\"br0\">(</span><span class=\"re0\">$d</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"No library {libX11}!\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st0\">\"Use this window instead --&gt; \u2b1c\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 8, "block": "<pre class=\"text highlighted_source\">string {libname,funcname} = iff(platform()=WINDOWS?{\"user32\",\"CharLowerA\"}:{\"libc\",\"tolower\"})<br/>atom lib = open_dll(libname)<br/>integer func = define_c_func(lib,funcname,{C_INT},C_INT)<br/>if func=-1 then<br/>   \u00a0?{{lower('A')}}<br/>else<br/>   \u00a0?c_func(func,{'A'}) -- ('A'==65)<br/>end if</pre>"}, {"lang": "PicoLisp", "loc": 26, "block": "<pre class=\"text highlighted_source\">(load \"@lib/gcc.l\")<br/>\u00a0<br/>(gcc \"x11\" '(\"-lX11\") 'xOpenDisplay 'xCloseDisplay)<br/>\u00a0<br/>#include &lt;X11/Xlib.h&gt;<br/>\u00a0<br/>any xOpenDisplay(any ex) {<br/>   any x = evSym(cdr(ex));    // Get display name<br/>   char display[bufSize(x)];  // Create a buffer for the name<br/>\u00a0<br/>   bufString(x, display);     // Upack the name<br/>   return boxCnt((long)XOpenDisplay(display));<br/>}<br/>\u00a0<br/>any xCloseDisplay(any ex) {<br/>   return boxCnt(XCloseDisplay((Display*)evCnt(ex, cdr(ex))));<br/>}<br/>/**/<br/>\u00a0<br/># With that we can open and close the display:<br/>: (setq Display (xOpenDisplay \":0.7\"))   # Wrong<br/>-&gt; 0<br/>: (setq Display (xOpenDisplay \":0.0\"))   # Correct<br/>-&gt; 158094320<br/>: (xCloseDisplay Display)<br/>-&gt; 0</pre>"}, {"lang": "PowerBASIC", "loc": 37, "block": "<pre class=\"text highlighted_source\">#INCLUDE \"Win32API.inc\"<br/>\u00a0<br/>FUNCTION PBMAIN () AS LONG<br/>    DIM hWnd AS LONG<br/>    DIM msg AS ASCIIZ * 14, titl AS ASCIIZ * 8<br/>\u00a0<br/>    hWnd = LoadLibrary (\"user32\")<br/>    msg = \"Hello, world!\"<br/>    titl = \"Example\"<br/>    IF ISTRUE (hWnd) THEN<br/>        funcAddr&amp; = GetProcAddress (hWnd, \"MessageBoxA\")<br/>        IF ISTRUE (funcAddr&amp;) THEN<br/>            ASM push 0&amp;<br/>            tAdr&amp; = VARPTR(titl)<br/>            ASM push tAdr&amp;<br/>            mAdr&amp; = VARPTR(msg)<br/>            ASM push mAdr&amp;<br/>            ASM push 0&amp;<br/>            CALL DWORD funcAddr&amp;<br/>        ELSE<br/>            GOTO epicFail<br/>        END IF<br/>    ELSE<br/>        GOTO epicFail<br/>    END IF<br/>\u00a0<br/>    GOTO getMeOuttaHere<br/>\u00a0<br/>epicFail:<br/>    MSGBOX msg, , titl<br/>\u00a0<br/>getMeOuttaHere:<br/>    IF ISTRUE(hWnd) THEN<br/>        tmp&amp; = FreeLibrary (hWnd)<br/>        IF ISFALSE(tmp&amp;) THEN MSGBOX \"Error freeing library... [shrug]\"<br/>    END IF<br/>END FUNCTION</pre>"}, {"lang": "PureBasic", "loc": 5, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">if</span> <span class=\"kw2\">OpenLibrary</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"st0\">\"USER32.DLL\"</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">*</span>MessageBox <span class=\"sy0\">=</span> <span class=\"kw2\">GetFunction</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"st0\">\"MessageBoxA\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CallFunctionFast</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>MessageBox, <span class=\"nu0\">0</span>, <span class=\"st0\">\"Body\"</span>, <span class=\"st0\">\"Title\"</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseLibrary</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">endif</span></pre>"}, {"lang": "Python", "loc": 4, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> ctypes<br/>\u00a0<br/>user32_dll <span class=\"sy0\">=</span> ctypes.<span class=\"me1\">cdll</span>.<span class=\"me1\">LoadLibrary</span><span class=\"br0\">(</span><span class=\"st0\">'User32.dll'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> user32_dll.<span class=\"me1\">GetDoubleClickTime</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 2, "block": "<pre class=\"rsplus highlighted_source\"><a href=\"http://stat.ethz.ch/R-manual/R-devel/library/base/html/dyn.load.html\"><span class=\"kw2\">dyn.<span class=\"me1\">load</span></span></a><span class=\"br0\">(</span><span class=\"st0\">\"my/special/R/lib.so\"</span><span class=\"br0\">)</span><br/>.<span class=\"me1\">Call</span><span class=\"br0\">(</span><span class=\"st0\">\"my_lib_fun\"</span>, arg1, arg2<span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 6, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require ffi/unsafe)<br/>(define libm (ffi-lib \"libm\"))\u00a0; get a handle for the C math library<br/>; look up sqrt in the math library. if we can't find it, return the builtin sqrt<br/>(define extern-sqrt (get-ffi-obj 'sqrt libm (_fun _double -&gt; _double)<br/>                                 (lambda () sqrt)))</pre>"}, {"lang": "REXX", "loc": 16, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm calls a function (systextscreensize) in a shared library (regutil).*/</span><br/>z=<span class=\"kw6\">rxfuncadd</span><span class=\"br0\">(</span><span class=\"st0\">'sysloadfuncs'</span>, <span class=\"st0\">\"regutil\"</span>, <span class=\"st0\">'sysloadfuncs'</span><span class=\"br0\">)</span>   <span class=\"coMULTI\">/*add a function lib.*/</span><br/><span class=\"kw1\">if</span> z<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>                                        <span class=\"coMULTI\">/*test the return cod*/</span><br/>               <span class=\"kw1\">say</span> <span class=\"st0\">'return code'</span>  z  <span class=\"st0\">\"from rxfuncadd\"</span>    <span class=\"coMULTI\">/*tell about bad RC. */</span><br/>               <span class=\"kw1\">exit</span> z                                    <span class=\"coMULTI\">/*exit this program. */</span><br/>               <span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"kw1\">call</span> sysloadfuncs                                        <span class=\"coMULTI\">/*load the functions.*/</span><br/>\u00a0<br/>                                       <span class=\"coMULTI\">/* [\u2193]   call a particular function.   */</span><br/>y=systextscreensize<span class=\"br0\">(</span><span class=\"br0\">)</span>                  <span class=\"coMULTI\">/*Y now contains 2 numbers:  rows cols */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> y rows cols <span class=\"sy0\">.</span>                <span class=\"coMULTI\">/*obtain the two numeric words in  Y.  */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'rows='</span>  rows                      <span class=\"coMULTI\">/*display the number of (terminal) rows*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'cols='</span>  cols                      <span class=\"coMULTI\">/*   \"     \"     \"    \"     \"      cols*/</span><br/><span class=\"kw1\">call</span> SysDropFuncs                      <span class=\"coMULTI\">/*clean up: make functions inaccessible*/</span><br/>                                       <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ruby", "loc": 20, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'fiddle/import'</span><br/>\u00a0<br/><span class=\"kw1\">module</span> FakeImgLib<br/>  extend <span class=\"re2\">Fiddle::Importer</span><br/>  <span class=\"kw1\">begin</span><br/>    dlload <span class=\"st0\">'./fakeimglib.so'</span><br/>    extern <span class=\"st0\">'int openimage(const char *)'</span><br/>  <span class=\"kw1\">rescue</span> <span class=\"re2\">Fiddle::DLError</span><br/>    <span class=\"co1\"># Either fakeimglib or openimage() is missing.</span><br/>    @@handle = <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">def</span> openimage<span class=\"br0\">(</span>path<span class=\"br0\">)</span><br/>      <span class=\"re0\">$stderr</span>.<span class=\"kw3\">puts</span> <span class=\"st0\">\"internal openimage opens #{path}<span class=\"es0\">\\n</span>\"</span><br/>      @@handle <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span><br/>    module_function <span class=\"re3\">:openimage</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>handle = FakeImgLib.<span class=\"me1\">openimage</span><span class=\"br0\">(</span><span class=\"st0\">\"path/to/image\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"opened with handle #{handle}\"</span></pre>"}, {"lang": "Rust", "loc": 38, "block": "<pre class=\"text highlighted_source\">#![allow(unused_unsafe)]<br/>extern crate libc;<br/>\u00a0<br/>use std::io::{self,Write};<br/>use std::{mem,ffi,process};<br/>\u00a0<br/>use libc::{c_double, RTLD_NOW};<br/>\u00a0<br/>// Small macro which wraps turning a string-literal into a c-string.<br/>// This is always safe to call, and the resulting pointer has 'static lifetime<br/>macro_rules! to_cstr {<br/>    ($s:expr) =&gt; {unsafe {ffi::CStr::from_bytes_with_nul_unchecked(concat!($s, \"\\0\").as_bytes()).as_ptr()}}<br/>}<br/>\u00a0<br/>macro_rules! from_cstr {<br/>    ($p:expr) =&gt; {ffi::CStr::from_ptr($p).to_string_lossy().as_ref() }<br/>}<br/>\u00a0<br/>fn main() {<br/>    unsafe {<br/>        let handle = libc::dlopen(to_cstr!(\"libm.so.6\"), RTLD_NOW);<br/>\u00a0<br/>        if handle.is_null() {<br/>            writeln!(&amp;mut io::stderr(), \"{}\", from_cstr!(libc::dlerror())).unwrap();<br/>            process::exit(1);<br/>        }<br/>\u00a0<br/>        let extern_cos = libc::dlsym(handle, to_cstr!(\"cos\"))<br/>                .as_ref()<br/>                .map(mem::transmute::&lt;_,fn (c_double) -&gt; c_double)<br/>                .unwrap_or(builtin_cos);<br/>        println!(\"{}\", extern_cos(4.0));<br/>    }<br/>}<br/>\u00a0<br/>fn builtin_cos(x: c_double) -&gt; c_double {<br/>    x.cos()<br/>}</pre>"}, {"lang": "Scala", "loc": 26, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> net.<span class=\"me1\">java</span>.<span class=\"me1\">dev</span>.<span class=\"me1\">sna</span>.<span class=\"me1\">SNA</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> com.<span class=\"me1\">sun</span>.<span class=\"me1\">jna</span>.<span class=\"me1\">ptr</span>.<span class=\"me1\">IntByReference</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> GetDiskFreeSpace <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <a href=\"http://scala-lang.org\"><span class=\"kw1\">with</span></a> SNA <span class=\"br0\">{</span><br/>\u00a0<br/>  snaLibrary <span class=\"sy0\">=</span> <span class=\"st0\">\"Kernel32\"</span> <span class=\"co1\">// Native library name </span><br/><span class=\"coMULTI\">/*<br/> * Important Note!<br/> *<br/> * The val holding the SNA-returned function must have the same name as the native function itself<br/> * (see line following this comment). This is the only place you specify the native function name.<br/> */</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> GetDiskFreeSpaceA <span class=\"sy0\">=</span> SNA<span class=\"br0\">[</span>String, IntByReference, IntByReference, IntByReference, IntByReference, Boolean<span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"co1\">// This Windows function is described here: </span><br/>  <span class=\"co1\">//     http://msdn.microsoft.com/en-us/library/aa364935(v=vs.85).aspx</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>disk, spc, bps, fc, tc<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"C:<span class=\"es1\">\\\\</span>\"</span>,<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> IntByReference, <span class=\"co1\">// Sectors per cluster</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> IntByReference, <span class=\"co1\">// Bytes per sector</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> IntByReference, <span class=\"co1\">// Free clusters</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> IntByReference<span class=\"br0\">)</span> <span class=\"co1\">// Total clusters</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ok <span class=\"sy0\">=</span> GetDiskFreeSpaceA<span class=\"br0\">(</span>disk, spc, bps, fc, tc<span class=\"br0\">)</span> <span class=\"co1\">// status</span><br/>  println<span class=\"br0\">(</span>f<span class=\"st0\">\"'$disk%s' ($ok%s): sectors/cluster: ${spc.getValue}%d,  bytes/sector: ${bps.getValue}%d, \"</span> +<br/>    f<span class=\"st0\">\" free-clusters: ${fc.getValue}%d,  total/clusters: ${tc.getValue}%d%n\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "Smalltalk", "loc": 14, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">DLD</span> addLibrary: <span class=\"st0\">'fakeimglib'</span>.<br/>\u00a0<br/><span class=\"re0\">Object</span> subclass: <span class=\"re0\">ExtLib</span> <span class=\"br0\">[</span><br/>  <span class=\"re0\">ExtLib</span> class &gt;&gt; openimage: <span class=\"re5\">aString</span> <span class=\"br0\">[</span><br/>    <span class=\"br0\">(</span><span class=\"re0\">CFunctionDescriptor</span> isFunction: <span class=\"st0\">'openimage'</span><span class=\"br0\">)</span><br/>    ifTrue: <span class=\"br0\">[</span><br/>       <span class=\"br0\">(</span><span class=\"re0\">CFunctionDescriptor</span> for: <span class=\"st0\">'openimage'</span><br/>                            returning: <span class=\"re1\">#int</span><br/>                            withArgs: <span class=\"re2\">#<span class=\"br0\">(</span> <span class=\"re1\">#string</span> <span class=\"br0\">)</span></span> <span class=\"br0\">)</span> callInto: <span class=\"br0\">(</span><span class=\"re0\">ValueHolder</span> null<span class=\"br0\">)</span>.<br/>    <span class=\"br0\">]</span> ifFalse: <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"st0\">'internal open image\u00a0%1'</span>\u00a0% <span class=\"br0\">{</span> aString <span class=\"br0\">}</span><span class=\"br0\">)</span> displayNl <span class=\"br0\">]</span><br/>  <span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"re0\">ExtLib</span> openimage: <span class=\"st0\">'test.png'</span>.</pre>"}, {"lang": "Tcl", "loc": 8, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Ffidl<br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">catch</span> <span class=\"br0\">{</span><br/>    ffidl::<span class=\"me1\">callout</span> OpenImage <span class=\"br0\">{</span>pointer-utf8<span class=\"br0\">}</span> int <span class=\"br0\">[</span>ffidl::<span class=\"me1\">symbol</span> fakeimglib.so openimage<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Create the OpenImage command by other means here...</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> handle <span class=\"br0\">[</span>OpenImage <span class=\"st0\">\"/the/file/name\"</span><span class=\"br0\">]</span></pre>"}, {"lang": "TXR", "loc": 1, "block": "<pre>This is the TXR Lisp interactive listener of TXR 176.\nUse the\u00a0:quit command or type Ctrl-D on empty line to exit.\n1&gt; (typedef utsarray (zarray 65 char))\n#&lt;ffi-type (zarray 65 char)&gt;\n2&gt; (typedef utsname (struct utsname (sysname utsarray)\n                                    (nodename utsarray)\n                                    (release utsarray)\n                                    (version utsarray)\n                                    (machine utsarray)\n                                    (domainname utsarray)))\n#&lt;ffi-type (struct utsname (sysname utsarray) (nodename utsarray) (release utsarray)\n            (version utsarray) (machine utsarray) (domainname utsarray))&gt;\n3&gt; (with-dyn-lib nil (deffi uname \"uname\" int ((ptr-out utsname))))\n** warning: (expr-3:1) defun: redefining uname, which is a built-in defun\n#:lib-0176\n4&gt; (let ((u (new utsname))) (prinl (uname u)) u)\n0\n#S(utsname sysname \"Linux\" nodename \"zelenka\" release \"3.2.0-40-generic\"\n           version \"#64-Ubuntu SMP Mon Mar 25 21:22:26 UTC 2013\" machine \"i686\"\n           domainname \"(none)\")</pre>"}, {"lang": "Ursala", "loc": 6, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import flo<br/>\u00a0<br/>my_replacement = fleq/0.?/~&amp; negative<br/>\u00a0<br/>abs = math.|fabs my_replacement</pre>"}, {"lang": "VBA", "loc": 6, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">function</span> ffun<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"co1\">!DEC$ ATTRIBUTES DLLEXPORT, STDCALL, REFERENCE\u00a0:: ffun</span><br/>    <span class=\"kw3\">double</span> <span class=\"kw4\">precision</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span>, y, ffun<br/>    ffun <span class=\"sy0\">=</span> x <span class=\"sy0\">+</span> y <span class=\"sy0\">*</span> y<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">var BN=Import(\"zklBigNum\");<br/>BN(1)+2  //--&gt; BN(3)</pre>"}]}