{"task": "Forest_fire", "blocks": [{"lang": "6502 Assembly", "loc": 422, "block": "<pre class=\"asm highlighted_source\">\tORG\t<span class=\"sy2\">$</span><span class=\"nu0\">4357</span><br/><span class=\"co1\">; SYS 17239 or CALL 17239</span><br/>\u00a0<br/>EMPTY2\t=\t<span class=\"sy2\">$</span><span class=\"nu0\">00</span><br/>TREE2\t=\t<span class=\"sy2\">$</span><span class=\"nu0\">44</span><br/>FIRE2\t=\t<span class=\"sy2\">$</span><span class=\"nu0\">99</span><br/>\u00a0<br/><span class=\"co1\">; common available zero page</span><br/>\u00a0<br/>\u00a0<br/>GBASL\t=\t<span class=\"sy2\">$</span><span class=\"nu0\">26</span><br/>GBASH\t=\t<span class=\"sy2\">$</span><span class=\"nu0\">27</span><br/>\u00a0<br/>SEED2\t=\t<span class=\"sy2\">$</span><span class=\"nu0\">28</span><br/>SEED0\t=\t<span class=\"sy2\">$</span><span class=\"nu0\">29</span><br/>SEED1\t=\t<span class=\"sy2\">$</span>2A<br/>\u00a0<br/>H2\t=\t<span class=\"sy2\">$</span>2B<br/>V2\t=\t<span class=\"sy2\">$</span>2C<br/>PLOTC\t=\t<span class=\"sy2\">$</span>2D<br/>COLOR\t=\t<span class=\"sy2\">$</span>2E<br/>PAGE\t=\t<span class=\"sy2\">$</span><span class=\"nu0\">2F</span><br/>TOPL\t=\t<span class=\"sy2\">$</span><span class=\"nu0\">30</span><br/>TOPH\t=\t<span class=\"sy2\">$</span><span class=\"nu0\">31</span><br/>MIDL\t=\t<span class=\"sy2\">$</span><span class=\"nu0\">32</span><br/>MIDH\t=\t<span class=\"sy2\">$</span><span class=\"nu0\">33</span><br/>BTML\t=\t<span class=\"sy2\">$</span><span class=\"nu0\">34</span><br/>BTMH\t=\t<span class=\"sy2\">$</span><span class=\"nu0\">35</span><br/>PLOTL\t=\t<span class=\"sy2\">$</span><span class=\"nu0\">36</span><br/>PLOTH\t=\t<span class=\"sy2\">$</span><span class=\"nu0\">37</span><br/>lastzp\t=\t<span class=\"sy2\">$</span><span class=\"nu0\">38</span><br/>\u00a0<br/>tablelo\t=\t<span class=\"sy2\">$</span><span class=\"nu0\">5000</span><br/>tablehi = tablelo<span class=\"sy1\">+</span><span class=\"nu0\">25</span><br/>\u00a0<br/>\tJSR <span class=\"kw5\">START</span><br/>\tSTA V2<br/>\tLDA #<span class=\"sy2\">$</span>4C <span class=\"co1\">; JMP instruction</span><br/>\tSTA SEED2 <span class=\"co1\">; temporary JMP</span><br/>\tLDX #<span class=\"sy2\">$</span><span class=\"nu0\">00</span> <span class=\"co1\">; y coord</span><br/>table<span class=\"sy1\">:</span><br/>\tTXA<br/>\tJSR SEED2 <span class=\"co1\">; temporary JMP GBASCALC</span><br/>\tLDA GBASL<br/>\tSTA tablelo<span class=\"sy1\">,</span>X<br/>\tLDA GBASH<br/>\tSTA tablehi<span class=\"sy1\">,</span>X<br/>\tLDY #<span class=\"sy2\">$</span><span class=\"nu0\">00</span><br/>\tTYA<br/>clrline<span class=\"sy1\">:</span><br/>\tSTA <span class=\"br0\">(</span>GBASL<span class=\"br0\">)</span><span class=\"sy1\">,</span>Y<br/>\tINY<br/>\tCPY #<span class=\"nu0\">40</span><br/>\tBNE clrline<br/>\u00a0<br/>\tINX<br/>\tCPX V2<br/>\tBNE table<br/>\u00a0<br/>\tJSR sseed0<br/>\tJSR sseed2<br/>\u00a0<br/>\tLDX #<span class=\"sy2\">$</span><span class=\"nu0\">60</span><br/>\tSTX PAGE<br/>\tSTX TOPH<br/>\tLDY #<span class=\"sy2\">$</span><span class=\"nu0\">00</span><br/>\tSTY TOPL<br/>\tTYA<br/>zero<span class=\"sy1\">:</span>\tSTA <span class=\"br0\">(</span>TOPL<span class=\"br0\">)</span><span class=\"sy1\">,</span>Y<br/>\tINY<br/>\tBNE zero<br/>\tINX<br/>\tSTX TOPH<br/>\tCPX #<span class=\"sy2\">$</span><span class=\"nu0\">80</span><br/>\tBNE zero<br/>\u00a0<br/>loop3<span class=\"sy1\">:</span><br/>\tLDX #<span class=\"nu0\">0</span><br/>\tSTX TOPL<br/>\tLDA #<span class=\"nu0\">41</span><br/>\tSTA MIDL<br/>\tSTA PLOTL<br/>\tLDA #<span class=\"nu0\">83</span><br/>\tSTA BTML<br/>\tLDA PAGE<br/>\tSTA TOPH<br/>\tSTA MIDH<br/>\tSTA BTMH<br/>\tEOR #<span class=\"sy2\">$</span><span class=\"nu0\">10</span><br/>\tSTA PLOTH<br/>\tSTA PAGE<br/>loop2<span class=\"sy1\">:</span><br/>\tTXA<br/>\tSTX V2<br/>\tLSR       <span class=\"co1\">; F800 PLOT-like...</span><br/>\t<span class=\"co1\">; PHP      \u00a0; F801</span><br/>\tTAY\t <span class=\"co1\">; save A in Y without touching C</span><br/>\tLDA #<span class=\"sy2\">$</span><span class=\"nu0\">0F</span><br/>\tBCC over2<br/>\t<span class=\"kw1\">ADC</span> #<span class=\"sy2\">$</span>E0<br/>over2<span class=\"sy1\">:</span>\tSTA PLOTC   <span class=\"co1\">; PLOT...</span><br/>\tLDA tablelo<span class=\"sy1\">,</span>Y <span class=\"co1\">; lookup instead of GBASCALC</span><br/>\tSTA GBASL<br/>\tLDA tablehi<span class=\"sy1\">,</span>Y<br/>\tSTA GBASH<br/>\t<span class=\"co1\">; PLP    \u00a0; continue PLOT</span><br/>\tLDY #<span class=\"sy2\">$</span><span class=\"nu0\">01</span> <span class=\"co1\">; x coord</span><br/>loop1<span class=\"sy1\">:</span><br/>\tSTY H2<br/>\tLDA <span class=\"br0\">(</span>MIDL<span class=\"br0\">)</span><span class=\"sy1\">,</span>Y<br/>\tSTA <span class=\"br0\">(</span>PLOTL<span class=\"br0\">)</span><span class=\"sy1\">,</span>Y<br/>\tBEQ empty<br/>\t<span class=\"kw4\">BPL</span> tree<br/>\tLDA #EMPTY2<br/>doplot<span class=\"sy1\">:</span>\tLDY H2<br/>\tSTA <span class=\"br0\">(</span>PLOTL<span class=\"br0\">)</span><span class=\"sy1\">,</span>Y<br/>\tDEY<br/>\tEOR <span class=\"br0\">(</span>GBASL<span class=\"br0\">)</span><span class=\"sy1\">,</span>Y<br/>\t<span class=\"kw1\">AND</span> PLOTC<br/>\tEOR <span class=\"br0\">(</span>GBASL<span class=\"br0\">)</span><span class=\"sy1\">,</span>Y<br/>\tSTA <span class=\"br0\">(</span>GBASL<span class=\"br0\">)</span><span class=\"sy1\">,</span>Y<br/>noplot<span class=\"sy1\">:</span> <br/>\tLDY H2<br/>\tINY<br/>\tCPY #<span class=\"nu0\">41</span><br/>\tBNE loop1<br/>\tLDA MIDL<br/>\tSTA TOPL<br/>\tLDA MIDH<br/>\tSTA TOPH<br/>\tLDA BTML<br/>\tSTA MIDL<br/>\tSTA PLOTL<br/>\t<span class=\"kw1\">CLC</span><br/>\t<span class=\"kw1\">ADC</span> #<span class=\"nu0\">42</span><br/>\tSTA BTML<br/>\tLDA BTMH<br/>\tEOR #<span class=\"sy2\">$</span><span class=\"nu0\">10</span><br/>\tSTA PLOTH<br/>\tEOR #<span class=\"sy2\">$</span><span class=\"nu0\">10</span>\t\t<br/>\tSTA MIDH<br/>\t<span class=\"kw1\">ADC</span> #<span class=\"sy2\">$</span><span class=\"nu0\">00</span><br/>\tSTA BTMH<br/>\tLDX V2<br/>\tINX<br/>\tCPX #<span class=\"nu0\">48</span><br/>\tBNE loop2<br/>\tJSR QUIT<br/>\t<span class=\"kw1\">JMP</span> loop3<br/>empty<span class=\"sy1\">:</span><br/>\t<span class=\"kw1\">DEC</span> SEED2<br/>\tBNE noplot<br/>\tJSR sseed2 <span class=\"co1\">; probability f</span><br/>\tLDA #TREE2<br/>\tBNE doplot<br/>ignite<span class=\"sy1\">:</span><br/>\tLDA #FIRE2<br/>\tBNE doplot<br/>tree<span class=\"sy1\">:</span><br/>\t<span class=\"kw1\">DEC</span> SEED0<br/>\tBNE check<br/>\t<span class=\"kw1\">DEC</span> SEED1<br/>\tBNE check<br/>\tJSR sseed0 <span class=\"co1\">; probability p</span><br/>\tBNE ignite<br/>check<span class=\"sy1\">:</span><br/>\tLDA <span class=\"br0\">(</span>TOPL<span class=\"br0\">)</span><span class=\"sy1\">,</span>Y <span class=\"co1\">; n</span><br/>\tORA <span class=\"br0\">(</span>BTML<span class=\"br0\">)</span><span class=\"sy1\">,</span>Y <span class=\"co1\">; s</span><br/>\tDEY<br/>\tORA <span class=\"br0\">(</span>TOPL<span class=\"br0\">)</span><span class=\"sy1\">,</span>Y <span class=\"co1\">; nw</span><br/>\tORA <span class=\"br0\">(</span>MIDL<span class=\"br0\">)</span><span class=\"sy1\">,</span>Y <span class=\"co1\">; w</span><br/>\tORA <span class=\"br0\">(</span>BTML<span class=\"br0\">)</span><span class=\"sy1\">,</span>Y <span class=\"co1\">; sw</span><br/>\tINY<br/>\tINY<br/>\tORA <span class=\"br0\">(</span>TOPL<span class=\"br0\">)</span><span class=\"sy1\">,</span>Y <span class=\"co1\">; ne</span><br/>\tORA <span class=\"br0\">(</span>MIDL<span class=\"br0\">)</span><span class=\"sy1\">,</span>Y <span class=\"co1\">; e</span><br/>\tORA <span class=\"br0\">(</span>BTML<span class=\"br0\">)</span><span class=\"sy1\">,</span>Y <span class=\"co1\">; se</span><br/>\tBMI ignite<br/>\t<span class=\"kw4\">BPL</span> noplot<br/>\u00a0<br/>sseed0<span class=\"sy1\">:</span><br/>\tLDA #<span class=\"sy2\">$</span><span class=\"nu0\">17</span> <span class=\"co1\">; 1 in 10007 (prime)</span><br/>\tSTA SEED0<br/>\tLDA #<span class=\"sy2\">$</span><span class=\"nu0\">27</span><br/>\tSTA SEED1<br/>\tRTS<br/>sseed2<span class=\"sy1\">:</span><br/>\tLDA #<span class=\"sy2\">$</span><span class=\"nu0\">65</span>  <span class=\"co1\">; 1 in 101 (prime)</span><br/>\tSTA SEED2<br/>\tRTS<br/>\u00a0<br/><span class=\"co2\">defa</span>ult<span class=\"sy1\">:</span><br/>\tLDA #&lt;GBASCALC <span class=\"co1\">; setup GBASCALC</span><br/>\tSTA SEED0<br/>\tLDA #&gt;GBASCALC<br/>\tSTA SEED1<br/>\tLDA #<span class=\"nu0\">25</span> <span class=\"co1\">; screen rows</span><br/>\tRTS<br/>GBASCALC<span class=\"sy1\">:</span><br/>\tLDY #<span class=\"sy2\">$</span><span class=\"nu0\">00</span><br/>\tSTY GBASH\t\t<br/>\tASL<br/>\tASL<br/>\tASL<br/>\tSTA GBASL<br/>\tASL<br/>\t<span class=\"kw1\">ROL</span> GBASH<br/>\tASL<br/>\t<span class=\"kw1\">ROL</span> GBASH<br/>\t<span class=\"kw1\">ADC</span> GBASL<br/>\tSTA GBASL<br/>\tLDA GBASH<br/>\t<span class=\"kw1\">ADC</span> #<span class=\"sy2\">$</span><span class=\"nu0\">04</span><br/>\tSTA GBASH<br/>\tRTS<br/>\u00a0<br/>QUIT<span class=\"sy1\">:</span><br/>\tLDA <span class=\"sy2\">$</span>E000<br/>\u00a0<br/><span class=\"co1\">; APPLE II</span><br/>\u00a0<br/>\t<span class=\"kw1\">CMP</span> #<span class=\"sy2\">$</span>4C<br/>\tBNE c64quit<br/>\u00a0<br/>\tBIT <span class=\"sy2\">$</span>C000 <span class=\"co1\">; apple ii keypress?</span><br/>\t<span class=\"kw4\">BPL</span> CONTINUE <span class=\"co1\">; no keypressed then continue</span><br/>\tBIT <span class=\"sy2\">$</span>C010 <span class=\"co1\">; clear keyboard strobe</span><br/>\tBIT <span class=\"sy2\">$</span>C051 <span class=\"co1\">; text mode</span><br/>\u00a0<br/><span class=\"co1\">; end APPLE II specific</span><br/>\u00a0<br/>ABORT<span class=\"sy1\">:</span><br/>\tPLA<br/>\tPLA<br/>\u00a0<br/>\tLDX #GBASL<br/>restorzp<span class=\"sy1\">:</span><br/>\tLDA <span class=\"sy2\">$</span><span class=\"nu0\">5100</span><span class=\"sy1\">,</span>X<br/>\tSTA <span class=\"sy2\">$</span><span class=\"nu0\">00</span><span class=\"sy1\">,</span>X<br/>\tINX<br/>\tCPX #lastzp<br/>\tBNE restorzp<br/>\u00a0<br/>CONTINUE<span class=\"sy1\">:</span><br/>\tRTS<br/>\u00a0<br/><span class=\"kw5\">START</span><span class=\"sy1\">:</span><br/>\tLDX #GBASL<br/>savezp<span class=\"sy1\">:</span><br/>\tLDA <span class=\"sy2\">$</span><span class=\"nu0\">00</span><span class=\"sy1\">,</span>X<br/>\tSTA <span class=\"sy2\">$</span><span class=\"nu0\">5100</span><span class=\"sy1\">,</span>X<br/>\tINX<br/>\tCPX #lastzp<br/>\tBNE savezp<br/>\u00a0<br/><span class=\"co1\">; machine\u00a0???</span><br/>\u00a0<br/>\tLDA <span class=\"sy2\">$</span>E000 <span class=\"co1\">; terribly unreliable, oh well</span><br/>\u00a0<br/><span class=\"co1\">; APPLE II</span><br/>\u00a0<br/>\t<span class=\"kw1\">CMP</span> #<span class=\"sy2\">$</span>4C <span class=\"co1\">; apple ii?</span><br/>\tBNE c64start <span class=\"co1\">; nope, try another</span><br/>\u00a0<br/>\tBIT <span class=\"sy2\">$</span>C056 <span class=\"co1\">; low resolution</span><br/>\tBIT <span class=\"sy2\">$</span>C052 <span class=\"co1\">; full screen</span><br/>\tBIT <span class=\"sy2\">$</span>C054 <span class=\"co1\">; page one</span><br/>\tBIT <span class=\"sy2\">$</span>C050 <span class=\"co1\">; graphics</span><br/><span class=\"co1\">; GBASCALC = $F847</span><br/>\tLDA #<span class=\"sy2\">$</span><span class=\"nu0\">47</span><br/>\tSTA SEED0<br/>\tLDA #<span class=\"sy2\">$</span>F8<br/>\tSTA SEED1<br/>\tLDA #<span class=\"nu0\">24</span> <span class=\"co1\">; screen rows</span><br/>\tRTS<br/>\u00a0<br/><span class=\"co1\">; end APPLE II specific</span><br/>\u00a0<br/><span class=\"co1\">; COMMODORE 64 specific</span><br/>\u00a0<br/>c64quit<span class=\"sy1\">:</span><br/>\u00a0<br/><span class=\"co1\">; COMMODORE 64</span><br/>\u00a0<br/>\t<span class=\"kw1\">CMP</span> #<span class=\"sy2\">$</span><span class=\"nu0\">85</span> <span class=\"co1\">; commodore 64?</span><br/>\tBNE CONTINUE <span class=\"co1\">; nope, default to no keypress</span><br/>\u00a0<br/>\tLDA <span class=\"sy2\">$</span>C6 <span class=\"co1\">; commodore keyboard buffer length</span><br/>\tBEQ CONTINUE <span class=\"co1\">; no keypressed then continue</span><br/>\u00a0<br/>\tLDA #<span class=\"sy2\">$</span><span class=\"nu0\">00</span><br/>\tSTA <span class=\"sy2\">$</span>C6<br/>\tLDA <span class=\"sy2\">$</span>D016 <span class=\"co1\">; Screen control register #2</span><br/>\t<span class=\"kw1\">AND</span> #<span class=\"sy2\">$</span>EF  <span class=\"co1\">; Bit #4: 0 = Multicolor mode off. </span><br/>\tSTA <span class=\"sy2\">$</span>D016<br/>\tLDA #<span class=\"nu0\">21</span> <span class=\"co1\">; default character set</span><br/>\tSTA <span class=\"sy2\">$</span>D018<br/>\tBNE ABORT<br/>\u00a0<br/>c64start<span class=\"sy1\">:</span><br/>\u00a0<br/>\t<span class=\"kw1\">CMP</span> #<span class=\"sy2\">$</span><span class=\"nu0\">85</span> <span class=\"co1\">; commodore 64?</span><br/>\tBEQ c64yes <span class=\"co1\">; yes</span><br/>\t<span class=\"kw1\">JMP</span> <span class=\"kw5\">default</span> <span class=\"co1\">; no, default to boringness</span><br/>c64yes<span class=\"sy1\">:</span><br/>\tLDA #<span class=\"sy2\">$</span><span class=\"nu0\">00</span>  <span class=\"co1\">; black</span><br/>\tSTA <span class=\"sy2\">$</span>D020 <span class=\"co1\">; border</span><br/>\tLDA #<span class=\"sy2\">$</span><span class=\"nu0\">00</span>  <span class=\"co1\">; black</span><br/>\tSTA <span class=\"sy2\">$</span>D021 <span class=\"co1\">; background</span><br/>\tLDA #<span class=\"sy2\">$</span><span class=\"nu0\">05</span>  <span class=\"co1\">; dark green</span><br/>\tSTA <span class=\"sy2\">$</span>D022 <span class=\"co1\">; Extra background color #1</span><br/>\tLDA #<span class=\"sy2\">$</span><span class=\"nu0\">08</span>  <span class=\"co1\">; orange</span><br/>\tSTA <span class=\"sy2\">$</span>D023 <span class=\"co1\">; Extra background color #2</span><br/>\tLDA <span class=\"sy2\">$</span>D016 <span class=\"co1\">; Screen control register #2</span><br/>\tORA #<span class=\"sy2\">$</span><span class=\"nu0\">10</span>  <span class=\"co1\">; Bit #4: 1 = Multicolor mode on. </span><br/>\tSTA <span class=\"sy2\">$</span>D016<br/>\u00a0<br/>\tLDA #<span class=\"sy2\">$</span><span class=\"nu0\">30</span>  <span class=\"co1\">; 0011 0000 $3000 charset page</span><br/>\tSTA PLOTH<br/>\tLSR<br/>\tLSR<br/>\tSTA PLOTC <span class=\"co1\">; 0000 1100 #$0C</span><br/><span class=\"co1\">; 53272 $D018</span><br/><span class=\"co1\">; POKE 53272,(PEEK(53272)AND240)+12: REM SET CHAR POINTER TO MEM. 12288</span><br/><span class=\"co1\">;     Bits #1-#3: In text mode, pointer to character memory</span><br/><span class=\"co1\">;    (bits #11-#13), relative to VIC bank, memory address $DD00</span><br/><span class=\"co1\">;    \u00a0%110, 6: $3000-$37FF, 12288-14335.</span><br/>\tLDA <span class=\"sy2\">$</span>D018<br/>\t<span class=\"kw1\">AND</span> #<span class=\"sy2\">$</span>F0<br/>\tORA PLOTC<br/>\tSTA <span class=\"sy2\">$</span>D018<br/><span class=\"co1\">; setup nine characters</span><br/>\u00a0<br/><span class=\"co1\">; 00- 00 00</span><br/>\tLDA #<span class=\"sy2\">$</span><span class=\"nu0\">00</span> <span class=\"co1\">; chr(0) * 8</span><br/>\tSTA PLOTL<br/>\t<span class=\"co1\">; --- LDA #$00\u00a0; already zero</span><br/>\tTAX <span class=\"co1\">; LDX #$00</span><br/>\tJSR charset<br/>\u00a0<br/><span class=\"co1\">; 04- 00 55</span><br/>\tLDA #<span class=\"nu0\">32</span> <span class=\"co1\">; chr(4) * 8</span><br/>\tSTA PLOTL<br/>\tLDA #<span class=\"sy2\">$</span><span class=\"nu0\">55</span><br/>\t<span class=\"co1\">; LDX #$00\u00a0; already zero</span><br/>\tJSR charset<br/>\u00a0<br/><span class=\"co1\">; 09- 00 AA</span><br/>\tLDA #<span class=\"nu0\">72</span> <span class=\"co1\">; chr(9) * 8</span><br/>\tSTA PLOTL<br/>\tLDA #<span class=\"sy2\">$</span>AA<br/>\t<span class=\"co1\">; LDX #$00\u00a0; already zero</span><br/>\tJSR charset<br/>\u00a0<br/><span class=\"co1\">; 40- 55 00</span><br/>\tLDA PLOTH <span class=\"co1\">; 512 = chr(64) * 8</span><br/>\t<span class=\"kw1\">CLC</span><br/>\t<span class=\"kw1\">ADC</span> #<span class=\"sy2\">$</span><span class=\"nu0\">02</span><br/>\tSTA PLOTH<br/>\tLDX #<span class=\"sy2\">$</span><span class=\"nu0\">00</span><br/>\tSTX PLOTL<br/>\tLDA #<span class=\"sy2\">$</span><span class=\"nu0\">00</span><br/>\tLDX #<span class=\"sy2\">$</span><span class=\"nu0\">55</span><br/>\tJSR charset<br/>\u00a0<br/><span class=\"co1\">; 44- 55 55</span><br/>\tLDA #<span class=\"nu0\">32</span> <span class=\"co1\">; chr(68) * 8</span><br/>\tSTA PLOTL<br/>\tTXA <span class=\"co1\">; LDA #$55</span><br/>\t<span class=\"co1\">; LDX #$55\u00a0; already 55</span><br/>\tJSR charset<br/>\u00a0<br/><span class=\"co1\">; 49- 55 AA</span><br/>\tLDA #<span class=\"nu0\">72</span> <span class=\"co1\">; chr(73) * 8</span><br/>\tSTA PLOTL<br/>\tLDA #<span class=\"sy2\">$</span>AA<br/>\t<span class=\"co1\">; LDX #$55\u00a0; already 55</span><br/>\tJSR charset<br/>\u00a0<br/><span class=\"co1\">; 90- AA 00</span><br/>\tLDA PLOTH <span class=\"co1\">; chr(144) * 8</span><br/>\t<span class=\"kw1\">CLC</span><br/>\t<span class=\"kw1\">ADC</span> #<span class=\"sy2\">$</span><span class=\"nu0\">02</span><br/>\tSTA PLOTH<br/>\tLDA #<span class=\"nu0\">128</span><br/>\tSTA PLOTL<br/>\tLDA #<span class=\"sy2\">$</span><span class=\"nu0\">00</span><br/>\tLDX #<span class=\"sy2\">$</span>AA<br/>\tJSR charset<br/>\u00a0<br/><span class=\"co1\">; 94- AA 55</span><br/>\tLDA #<span class=\"nu0\">160</span> <span class=\"co1\">; chr(148) * 8</span><br/>\tSTA PLOTL<br/>\tLDA #<span class=\"sy2\">$</span><span class=\"nu0\">55</span><br/>\t<span class=\"co1\">; LDX #$AA\u00a0; already AA</span><br/>\tJSR charset<br/>\u00a0<br/><span class=\"co1\">; 99- AA AA</span><br/>\tLDA #<span class=\"nu0\">200</span> <span class=\"co1\">; chr(153) * 8</span><br/>\tSTA PLOTL<br/>\tTXA <span class=\"co1\">; LDA #$AA</span><br/>\t<span class=\"co1\">; LDX #$AA\u00a0; already AA</span><br/>\tJSR charset<br/>\t<span class=\"kw1\">JMP</span> <span class=\"kw5\">default</span><br/>charset<span class=\"sy1\">:</span><br/>\tLDY #<span class=\"sy2\">$</span><span class=\"nu0\">00</span><br/>chartop<span class=\"sy1\">:</span><br/>\tSTA <span class=\"br0\">(</span>PLOTL<span class=\"br0\">)</span><span class=\"sy1\">,</span>Y<br/>\tINY<br/>\tCPY #<span class=\"sy2\">$</span><span class=\"nu0\">04</span><br/>\tBNE chartop<br/>\tTXA<br/>charbtm<span class=\"sy1\">:</span><br/>\tSTA <span class=\"br0\">(</span>PLOTL<span class=\"br0\">)</span><span class=\"sy1\">,</span>Y<br/>\tINY<br/>\tCPY #<span class=\"sy2\">$</span><span class=\"nu0\">08</span><br/>\tBNE charbtm<br/>\tRTS<br/>\u00a0<br/><span class=\"co1\">; end COMMODORE 64 specific</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 69, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Float_Random</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;                <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Forest_Fire <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Cell <span class=\"kw1\">is</span> <span class=\"br0\">(</span>Empty, Tree, Fire<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">type</span> Board <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;, Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Cell;<br/>   <span class=\"kw3\">procedure</span> Step <span class=\"br0\">(</span>S\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Board; P, F\u00a0: Float; Dice\u00a0: Generator<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span> <span class=\"br0\">(</span>Left\u00a0: Boolean; Right\u00a0: Cell<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">return</span> Left <span class=\"kw2\">or</span> <span class=\"kw1\">else</span> Right = Fire;<br/>      <span class=\"kw1\">end</span> <span class=\"st0\">\"+\"</span>;<br/>      <span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span> <span class=\"br0\">(</span>Left, Right\u00a0: Cell<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>      <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">return</span> Left = Fire <span class=\"kw2\">or</span> <span class=\"kw1\">else</span> Right = Fire;<br/>      <span class=\"kw1\">end</span> <span class=\"st0\">\"+\"</span>;<br/>      Above\u00a0: <span class=\"kw3\">array</span> <span class=\"br0\">(</span>S'<span class=\"kw3\">Range</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Cell\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; Empty<span class=\"br0\">)</span>;<br/>      Left_Up, Up, Left\u00a0: Cell;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> Row <span class=\"kw3\">in</span> S'First <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span>..<span class=\"me1\">S</span>'Last <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>         Left_Up\u00a0:= Empty;<br/>         Up     \u00a0:= Empty;<br/>         Left   \u00a0:= Empty;<br/>         <span class=\"kw1\">for</span> Column <span class=\"kw3\">in</span> S'First <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span>..<span class=\"me1\">S</span>'Last <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>            Left_Up\u00a0:= Up;<br/>            Up     \u00a0:= Above <span class=\"br0\">(</span>Column<span class=\"br0\">)</span>;<br/>            Above <span class=\"br0\">(</span>Column<span class=\"br0\">)</span>\u00a0:= S <span class=\"br0\">(</span>Row, Column<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">case</span> S <span class=\"br0\">(</span>Row, Column<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>               <span class=\"kw3\">when</span> Empty =&gt;<br/>                  <span class=\"kw1\">if</span> Random <span class=\"br0\">(</span>Dice<span class=\"br0\">)</span> &lt; P <span class=\"kw1\">then</span><br/>                     S <span class=\"br0\">(</span>Row, Column<span class=\"br0\">)</span>\u00a0:= Tree;<br/>                  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>               <span class=\"kw3\">when</span> Tree =&gt;<br/>                  <span class=\"kw1\">if</span> Left_Up                 + Up                  +      Above <span class=\"br0\">(</span>Column + <span class=\"nu0\">1</span><span class=\"br0\">)</span> +<br/>                     Left                    + S <span class=\"br0\">(</span>Row,     Column<span class=\"br0\">)</span> + S <span class=\"br0\">(</span>Row,     Column + <span class=\"nu0\">1</span><span class=\"br0\">)</span> +<br/>                     S <span class=\"br0\">(</span>Row + <span class=\"nu0\">1</span>, Column - <span class=\"nu0\">1</span><span class=\"br0\">)</span> + S <span class=\"br0\">(</span>Row + <span class=\"nu0\">1</span>, Column<span class=\"br0\">)</span> + S <span class=\"br0\">(</span>Row + <span class=\"nu0\">1</span>, Column + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                  <span class=\"kw2\">or</span> <span class=\"kw1\">else</span> Random <span class=\"br0\">(</span>Dice<span class=\"br0\">)</span> &lt; F <span class=\"kw1\">then</span><br/>                     S <span class=\"br0\">(</span>Row, Column<span class=\"br0\">)</span>\u00a0:= Fire;<br/>                  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>               <span class=\"kw3\">when</span> Fire =&gt;<br/>                  S <span class=\"br0\">(</span>Row, Column<span class=\"br0\">)</span>\u00a0:= Empty;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/>            Left\u00a0:= Above <span class=\"br0\">(</span>Column<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Step;<br/>   <span class=\"kw3\">procedure</span> Put <span class=\"br0\">(</span>S\u00a0: Board<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> Row <span class=\"kw3\">in</span> S'First <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span>..<span class=\"me1\">S</span>'Last <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">for</span> Column <span class=\"kw3\">in</span> S'First <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span>..<span class=\"me1\">S</span>'Last <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>            <span class=\"kw1\">case</span> S <span class=\"br0\">(</span>Row, Column<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>               <span class=\"kw3\">when</span> Empty =&gt; Put <span class=\"br0\">(</span>' '<span class=\"br0\">)</span>;<br/>               <span class=\"kw3\">when</span> Tree  =&gt; Put <span class=\"br0\">(</span>'Y'<span class=\"br0\">)</span>;<br/>               <span class=\"kw3\">when</span> Fire  =&gt; Put <span class=\"br0\">(</span>'#'<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">case</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         New_Line;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;      <br/>   <span class=\"kw1\">end</span> Put;<br/>\u00a0<br/>   Dice  \u00a0: Generator;<br/>   Forest\u00a0: Board\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">10</span> =&gt; <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">40</span> =&gt; Empty<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   Reset <span class=\"br0\">(</span>Dice<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">10</span> <span class=\"kw1\">loop</span><br/>      Step <span class=\"br0\">(</span>Forest, <span class=\"nu0\">0.3</span>, <span class=\"nu0\">0.1</span>, Dice<span class=\"br0\">)</span>;<br/>      Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"-------------\"</span> &amp; Integer'Image <span class=\"br0\">(</span>I<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" -------------\"</span><span class=\"br0\">)</span>;<br/>      Put <span class=\"br0\">(</span>Forest<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Forest_Fire;</pre>"}, {"lang": "ALGOL 68", "loc": 59, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span> tree prob <span class=\"sy1\">=</span> <span class=\"re1\">0.55</span><span class=\"sy1\">,</span> <span class=\"coMULTI\"># original tree probability #</span><br/>          f prob <span class=\"sy1\">=</span>    <span class=\"re1\">0.01</span><span class=\"sy1\">,</span> <span class=\"coMULTI\"># new combustion probability #</span><br/>          p prob <span class=\"sy1\">=</span>    <span class=\"re1\">0.01</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># tree creation probability #</span><br/><span class=\"kw4\">MODE</span> CELL <span class=\"sy1\">=</span> <span class=\"kw3\">CHAR</span><span class=\"sy1\">;</span> CELL empty<span class=\"sy1\">=</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> tree<span class=\"sy1\">=</span><span class=\"st0\">\"T\"</span><span class=\"sy1\">,</span> burning<span class=\"sy1\">=</span><span class=\"st0\">\"#\"</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> WORLD <span class=\"sy1\">=</span> <span class=\"br0\">[</span>6<span class=\"sy1\">,</span> 65<span class=\"br0\">]</span>CELL<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> has burning neighbours <span class=\"sy1\">=</span> <span class=\"br0\">(</span>WORLD world<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> r<span class=\"sy1\">,</span> c<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw2\">FOR</span> row shift <span class=\"kw2\">FROM</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 1 <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">FOR</span> col shift <span class=\"kw2\">FROM</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 1 <span class=\"kw2\">DO</span><br/>      <span class=\"kw3\">INT</span> rs <span class=\"sy1\">=</span> r <span class=\"sy1\">+</span> row shift<span class=\"sy1\">,</span> cs <span class=\"sy1\">=</span> c <span class=\"sy1\">+</span> col shift<span class=\"sy1\">;</span><br/>      <span class=\"kw2\">IF</span> rs <span class=\"sy1\">&gt;=</span> <span class=\"kw8\">LWB</span> world <span class=\"kw16\">AND</span> rs <span class=\"sy1\">&lt;=</span> <span class=\"kw8\">UPB</span> world <span class=\"kw16\">AND</span><br/>          cs <span class=\"sy1\">&gt;=</span> 2 <span class=\"kw8\">LWB</span> world <span class=\"kw16\">AND</span> cs <span class=\"sy1\">&lt;=</span> 2 <span class=\"kw8\">UPB</span> world <span class=\"kw2\">THEN</span><br/>        <span class=\"kw2\">IF</span> world<span class=\"br0\">[</span>rs<span class=\"sy1\">,</span> cs<span class=\"br0\">]</span> <span class=\"sy1\">=</span> burning <span class=\"kw2\">THEN</span> true exit <span class=\"kw2\">FI</span><br/>      <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  <span class=\"kw7\">FALSE</span> <span class=\"kw2\">EXIT</span><br/>  true exit<span class=\"sy1\">:</span> <span class=\"kw7\">TRUE</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> next state <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> WORLD world<span class=\"sy1\">,</span> <span class=\"kw4\">REF</span> WORLD next world<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw2\">FOR</span> r <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> world <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> world <span class=\"kw2\">DO</span><br/>    <span class=\"kw4\">REF</span><span class=\"br0\">[</span><span class=\"br0\">]</span>CELL row <span class=\"sy1\">=</span> world<span class=\"br0\">[</span>r<span class=\"sy1\">,</span> <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> c <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> row <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> row <span class=\"kw2\">DO</span><br/>      <span class=\"kw4\">REF</span> CELL elem <span class=\"sy1\">=</span> row<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      next world<span class=\"br0\">[</span>r<span class=\"sy1\">,</span> c<span class=\"br0\">]</span> <span class=\"sy1\">:=</span><br/>        <span class=\"kw2\">IF</span> elem <span class=\"sy1\">=</span> empty <span class=\"kw2\">THEN</span><br/>          <span class=\"kw2\">IF</span> random<span class=\"sy1\">&lt;</span>p prob <span class=\"kw2\">THEN</span> tree <span class=\"kw2\">ELSE</span> empty <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">ELIF</span> elem <span class=\"sy1\">=</span> tree <span class=\"kw2\">THEN</span><br/>          <span class=\"kw2\">IF</span> has burning neighbours<span class=\"br0\">(</span>world<span class=\"sy1\">,</span> r<span class=\"sy1\">,</span> c<span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>            burning<br/>          <span class=\"kw2\">ELSE</span><br/>            <span class=\"kw2\">IF</span> random<span class=\"sy1\">&lt;</span>f prob <span class=\"kw2\">THEN</span> burning <span class=\"kw2\">ELSE</span> tree <span class=\"kw2\">FI</span><br/>          <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">ELIF</span> elem <span class=\"sy1\">=</span> burning <span class=\"kw2\">THEN</span><br/>          empty<br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  world <span class=\"sy1\">:=</span> next world<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  WORLD world<span class=\"sy1\">;</span> <span class=\"coMULTI\"># create world #</span><br/>  <span class=\"kw2\">FOR</span> r <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> world <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> world <span class=\"kw2\">DO</span><br/>    <span class=\"kw4\">REF</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>CELL row <span class=\"sy1\">=</span> world<span class=\"br0\">[</span>r<span class=\"sy1\">,</span> <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> row <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> row <span class=\"kw2\">DO</span><br/>      <span class=\"kw4\">REF</span> CELL el <span class=\"sy1\">=</span> row<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      el <span class=\"sy1\">:=</span> <span class=\"kw2\">IF</span> random <span class=\"sy1\">&lt;</span> tree prob <span class=\"kw2\">THEN</span> tree <span class=\"kw2\">ELSE</span> empty <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">OD</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  WORLD next world<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">TO</span> 4 <span class=\"kw2\">DO</span><br/>    next state<span class=\"br0\">(</span>world<span class=\"sy1\">,</span> next world<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$n<span class=\"br0\">(</span>2 <span class=\"kw8\">UPB</span> world<span class=\"br0\">)</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span> world<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># show world #</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$gl$<span class=\"sy1\">,</span> 2 <span class=\"kw8\">UPB</span> world <span class=\"sy1\">*</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">OD</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 154, "block": "<pre class=\"autohotkey highlighted_source\">\u00a0<br/><span class=\"co1\">; The array Frame1%x%_%y% holds the current frame. frame2%x%_%y%</span><br/><span class=\"co1\">; is then calculated from this, and printed. frame2 is then copied to frame1.</span><br/><span class=\"co1\">; Two arrays are necessary so that each cell advances at the same time</span><br/><span class=\"co1\">; T=Tree, #=Fire, O=Empty cell</span><br/><span class=\"co1\">; Size holds the width and height of the map and is used as the # of iterations in loops</span><br/><span class=\"co1\">; This will save the map as forest_fire.txt in its working directory</span><br/><span class=\"co1\">; ======================================================================================</span><br/>\u00a0<br/>\u00a0<br/>Size <span class=\"sy0\">:=</span> <span class=\"nu0\">10</span><br/>Generation <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>Tree <span class=\"sy0\">:=</span> <span class=\"st0\">\"T\"</span><br/>Fire <span class=\"sy0\">:=</span> <span class=\"st0\">\"#\"</span><br/>Cell <span class=\"sy0\">:=</span> <span class=\"st0\">\"O\"</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">; --Define probabilities--</span><br/>    New_Tree <span class=\"sy0\">:=</span> <span class=\"nu0\">5</span><br/>    <span class=\"co1\">; 20 percent chance (1 in 5). A random number will be generated from 1 to New_tree. If this number is 1,</span><br/>    <span class=\"co1\">; A tree will be created in the current cell </span><br/>\u00a0<br/>    Spontaneous <span class=\"sy0\">:=</span> <span class=\"nu0\">10</span><br/>    <span class=\"co1\">; 10 percent chance (1 in 10). A random number will be generated from 1 to Spontaneous. If this number is 1,</span><br/>    <span class=\"co1\">; and the current cell contains a tree, the tree in the current cell will become fire. </span><br/>\u00a0<br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">GoSub</span></a><span class=\"sy0\">,</span> Generate<br/>\u00a0<br/><span class=\"co1\">; ----------------------Main Loop------------------------------</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><br/><span class=\"br0\">{</span><br/>    Generation<span class=\"sy0\">++</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">GoSub</span></a><span class=\"sy0\">,</span> Calculate<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">GoSub</span></a><span class=\"sy0\">,</span> Copy<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Gosub.htm\"><span class=\"kw3\">GoSub</span></a><span class=\"sy0\">,</span> Display<br/>    <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> Forest Fire<span class=\"sy0\">,</span> At Generation <span class=\"re0\">%generation%</span><span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">Continue</span></a>?<br/>    <a href=\"http://www.autohotkey.com/docs/commands/IfMsgBox.htm\"><span class=\"kw3\">IfMsgbox</span></a><span class=\"sy0\">,</span> No<br/>        <a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">return</span><br/><span class=\"co1\">; -------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"re2\">Generate: </span>     <span class=\"co1\">; Randomly initializes the map.</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a>\u00a0% size    <span class=\"co1\">;\u00a0% forces expression mode.</span><br/><span class=\"br0\">{</span><br/>\tx <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% size<br/>\t<span class=\"br0\">{</span><br/>\t\tY <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t\t<a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> IsTree<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"co1\">;         -- Roughly half of the spaces will contain trees</span><br/>\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span> IsTree <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t\t\tFrame1<span class=\"re0\">%x%</span>_<span class=\"re0\">%y%</span> <span class=\"sy0\">:=</span> Tree<br/>\t\t<span class=\"kw1\">Else</span><br/>\t\t\tFrame1<span class=\"re0\">%x%</span>_<span class=\"re0\">%y%</span> <span class=\"sy0\">:=</span> Cell<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"re2\">Calculate:<br/></span><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% size<br/><span class=\"br0\">{</span><br/>\tx <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% size<br/>\t<span class=\"br0\">{</span><br/>\t\tY <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span> Frame1<span class=\"re0\">%x%</span>_<span class=\"re0\">%y%</span> <span class=\"sy0\">=</span> Cell <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> tmp<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> New_Tree<br/>\t\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span> tmp <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t\t\t\tFrame2<span class=\"re0\">%x%</span>_<span class=\"re0\">%y%</span> <span class=\"sy0\">:=</span> tree<br/>\t\t\t<span class=\"kw1\">Else</span><br/>\t\t\t\tFrame2<span class=\"re0\">%x%</span>_<span class=\"re0\">%y%</span> <span class=\"sy0\">:=</span> Cell<br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">Else</span> <span class=\"kw1\">If</span> <span class=\"br0\">(</span> Frame1<span class=\"re0\">%x%</span>_<span class=\"re0\">%y%</span> <span class=\"sy0\">=</span> Tree <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tBoolCatch <span class=\"sy0\">:=</span> PredictFire<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>BoolCatch<span class=\"br0\">)</span><br/>\t\t\t\tFrame2<span class=\"re0\">%x%</span>_<span class=\"re0\">%y%</span> <span class=\"sy0\">:=</span> Fire<br/>\t\t\t<span class=\"kw1\">Else</span><br/>\t\t\t\tFrame2<span class=\"re0\">%x%</span>_<span class=\"re0\">%y%</span> <span class=\"sy0\">:=</span> Tree<br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">Else</span> <span class=\"kw1\">If</span> <span class=\"br0\">(</span> Frame1<span class=\"re0\">%x%</span>_<span class=\"re0\">%y%</span> <span class=\"sy0\">=</span> Fire <span class=\"br0\">)</span><br/>\t\t\tFrame2<span class=\"re0\">%x%</span>_<span class=\"re0\">%y%</span> <span class=\"sy0\">:=</span> Cell<br/>\t\t<span class=\"kw1\">Else</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\tcontents <span class=\"sy0\">:=</span> Frame1<span class=\"re0\">%x%</span>_<span class=\"re0\">%y%</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a> Error! Cell <span class=\"re0\">%x%</span> <span class=\"sy0\">,</span> <span class=\"re0\">%y%</span> contains <span class=\"re0\">%contents%</span> <span class=\"co1\">; This has never happened</span><br/>\t\t\t<a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"re2\">Copy:<br/></span><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% size<br/><span class=\"br0\">{</span><br/>\tx <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% size<br/>\t<span class=\"br0\">{</span><br/>\t\ty <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t\tframe1<span class=\"re0\">%x%</span>_<span class=\"re0\">%y%</span> <span class=\"sy0\">:=</span> Frame2<span class=\"re0\">%x%</span>_<span class=\"re0\">%y%</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re2\">Display:<br/></span>ToPrint <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>ToPrint <span class=\"sy0\">.=</span> <span class=\"st0\">\"=====Generation \"</span> <span class=\"sy0\">.</span> Generation <span class=\"sy0\">.</span> <span class=\"st0\">\"=====`n\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% size<br/><span class=\"br0\">{</span><br/>\tx <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% size<br/>\t<span class=\"br0\">{</span><br/>\t\ty <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><br/>\t\tToPrint <span class=\"sy0\">.=</span> Frame1<span class=\"re0\">%x%</span>_<span class=\"re0\">%y%</span><br/>\t<span class=\"br0\">}</span><br/>\tToPrint <span class=\"sy0\">.=</span> <span class=\"st0\">\"`n\"</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">FileAppend</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%ToPrint%</span><span class=\"sy0\">,</span> Forest_Fire<span class=\"sy0\">.</span>txt<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>PredictFire<span class=\"br0\">(</span>p_x<span class=\"sy0\">,</span>p_y<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    Global <span class=\"co1\">; allows access to all frame1*_* variables (the pseudo-array)</span><br/>    A <span class=\"sy0\">:=</span> p_x<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    B <span class=\"sy0\">:=</span> p_y<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    C <span class=\"sy0\">:=</span> p_x<span class=\"sy0\">+</span><span class=\"nu0\">1</span>    <br/>    D <span class=\"sy0\">:=</span> p_y<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span> Frame1<span class=\"re0\">%A%</span>_<span class=\"re0\">%p_Y%</span> <span class=\"sy0\">=</span> fire <span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span> Frame1<span class=\"re0\">%p_X%</span>_<span class=\"re0\">%B%</span> <span class=\"sy0\">=</span> fire <span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span> Frame1<span class=\"re0\">%C%</span>_<span class=\"re0\">%p_Y%</span> <span class=\"sy0\">=</span> fire <span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span> Frame1<span class=\"re0\">%p_X%</span>_<span class=\"re0\">%D%</span> <span class=\"sy0\">=</span> fire <span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span> Frame1<span class=\"re0\">%A%</span>_<span class=\"re0\">%B%</span> <span class=\"sy0\">=</span> Fire <span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span> Frame1<span class=\"re0\">%A%</span>_<span class=\"re0\">%D%</span> <span class=\"sy0\">=</span> fire <span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span> Frame1<span class=\"re0\">%C%</span>_<span class=\"re0\">%B%</span> <span class=\"sy0\">=</span> fire <span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> <span class=\"br0\">(</span> Frame1<span class=\"re0\">%C%</span>_<span class=\"re0\">%D%</span> <span class=\"sy0\">=</span> Fire <span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a><span class=\"sy0\">,</span> tmp<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> spontaneous<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> tmp <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 38, "block": "<pre class=\"text highlighted_source\">N = 150\u00a0: M = 150\u00a0: P = 0.03\u00a0: F = 0.00003<br/>\u00a0<br/>dim f(N+2,M+2) # 1 tree, 0 empty, 2 fire<br/>dim fn(N+2,M+2)<br/>graphsize N,M<br/>fastgraphics <br/>\u00a0<br/>for x = 1 to N<br/>\tfor y = 1 to M<br/>\t\tif rand&lt;0.5 then f[x,y] = 1<br/>\tnext y<br/>next x<br/>\u00a0<br/>while True<br/>\tfor x = 1 to N<br/>\t\tfor y = 1 to M<br/>\t\t\tif not f[x,y] and rand&lt;P then fn[x,y]=1<br/>\t\t\tif f[x,y]=2 then fn[x,y]=0<br/>\t\t\tif f[x,y]=1 then<br/>\t\t\t\tfn[x,y] = 1<br/>\t\t\t\tif f[x-1,y-1]=2 or f[x,y-1]=2 or f[x+1,y-1]=2 then fn[x,y]=2<br/>\t\t\t\tif f[x-1,y]=2 or f[x+1,y]=2 or rand&lt;F then fn[x,y]=2<br/>\t\t\t\tif f[x-1,y+1]=2 or f[x,y+1]=2 or f[x+1,y+1]=2 then fn[x,y]=2<br/>\t\t\tend if<br/>\t\t\t# Draw<br/>\t\t\tif fn[x,y]=0 then color black<br/>\t\t\tif fn[x,y]=1 then color green<br/>\t\t\tif fn[x,y]=2 then color yellow<br/>\t\t\tplot x-1,y-1<br/>\t\tnext y<br/>\tnext x<br/>\trefresh<br/>\tfor x = 1 to N<br/>\t\tfor y = 1 to M<br/>\t\t\tf[x,y] = fn[x,y]<br/>\t\tnext y<br/>\tnext x<br/>end while</pre>"}, {"lang": "Batch File", "loc": 1, "block": "<pre>m - length and width of the array\np - probability of a tree growing\nf - probability of a tree catching on fire\ni - iterations to output\n</pre>"}, {"lang": "C", "loc": 248, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;stdint.h&gt;</span><br/><span class=\"co2\">#include &lt;stdbool.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;pthread.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#include &lt;SDL.h&gt;</span><br/>\u00a0<br/><span class=\"co1\">// defaults</span><br/><span class=\"co2\">#define PROB_TREE 0.55</span><br/><span class=\"co2\">#define PROB_F 0.00001</span><br/><span class=\"co2\">#define PROB_P 0.001</span><br/>\u00a0<br/><span class=\"co2\">#define TIMERFREQ 100</span><br/>\u00a0<br/><span class=\"co2\">#ifndef WIDTH</span><br/><span class=\"co2\">#  define WIDTH 640</span><br/><span class=\"co2\">#endif</span><br/><span class=\"co2\">#ifndef HEIGHT</span><br/><span class=\"co2\">#  define HEIGHT 480</span><br/><span class=\"co2\">#endif</span><br/><span class=\"co2\">#ifndef BPP</span><br/><span class=\"co2\">#  define BPP 32</span><br/><span class=\"co2\">#endif</span><br/>\u00a0<br/><span class=\"co2\">#if BPP\u00a0!= 32</span><br/>  <span class=\"co2\">#warning This program could not work with BPP different from 32</span><br/><span class=\"co2\">#endif</span><br/>\u00a0<br/><span class=\"kw4\">uint8_t</span> <span class=\"sy0\">*</span>field<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> swapu<span class=\"sy0\">;</span><br/><span class=\"kw4\">double</span> prob_f <span class=\"sy0\">=</span> PROB_F<span class=\"sy0\">,</span> prob_p <span class=\"sy0\">=</span> PROB_P<span class=\"sy0\">,</span> prob_tree <span class=\"sy0\">=</span> PROB_TREE<span class=\"sy0\">;</span> <br/>\u00a0<br/><span class=\"kw2\">enum</span> cell_state <span class=\"br0\">{</span> <br/>  VOID<span class=\"sy0\">,</span> TREE<span class=\"sy0\">,</span> BURNING<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\">// simplistic random func to give [0, 1)</span><br/><span class=\"kw4\">double</span> prand<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>RAND_MAX <span class=\"sy0\">+</span> <span class=\"nu16\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// initialize the field</span><br/><span class=\"kw4\">void</span> init_field<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>  swapu <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> WIDTH<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> HEIGHT<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      <span class=\"sy0\">*</span><span class=\"br0\">(</span>field<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> j<span class=\"sy0\">*</span>WIDTH <span class=\"sy0\">+</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> prand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> prob_tree <span class=\"sy0\">?</span> VOID <span class=\"sy0\">:</span> TREE<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// the \"core\" of the task: the \"forest-fire CA\"</span><br/>bool burning_neighbor<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>pthread_mutex_t synclock <span class=\"sy0\">=</span> PTHREAD_MUTEX_INITIALIZER<span class=\"sy0\">;</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">uint32_t</span> simulate<span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span> iv<span class=\"sy0\">,</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>p<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">/*<br/>    Since this is called by SDL, \"likely\"(*) in a separated<br/>    thread, we try to avoid corrupted updating of the display<br/>    (done by the show() func): show needs the \"right\" swapu<br/>    i.e. the right complete field. (*) what if it is not so?<br/>    The following is an attempt to avoid unpleasant updates.<br/>   */</span><br/>  pthread_mutex_lock<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>synclock<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> WIDTH<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> HEIGHT<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw2\">enum</span> cell_state s <span class=\"sy0\">=</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span>field<span class=\"br0\">[</span>swapu<span class=\"br0\">]</span> <span class=\"sy0\">+</span> j<span class=\"sy0\">*</span>WIDTH <span class=\"sy0\">+</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">switch</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>      <span class=\"kw1\">case</span> BURNING<span class=\"sy0\">:</span><br/>\t<span class=\"sy0\">*</span><span class=\"br0\">(</span>field<span class=\"br0\">[</span>swapu<span class=\"sy0\">^</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> j<span class=\"sy0\">*</span>WIDTH <span class=\"sy0\">+</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> VOID<span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">case</span> VOID<span class=\"sy0\">:</span><br/>\t<span class=\"sy0\">*</span><span class=\"br0\">(</span>field<span class=\"br0\">[</span>swapu<span class=\"sy0\">^</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> j<span class=\"sy0\">*</span>WIDTH <span class=\"sy0\">+</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> prand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> prob_p <span class=\"sy0\">?</span> VOID <span class=\"sy0\">:</span> TREE<span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">case</span> TREE<span class=\"sy0\">:</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>burning_neighbor<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t  <span class=\"sy0\">*</span><span class=\"br0\">(</span>field<span class=\"br0\">[</span>swapu<span class=\"sy0\">^</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> j<span class=\"sy0\">*</span>WIDTH <span class=\"sy0\">+</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> BURNING<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">else</span><br/>\t  <span class=\"sy0\">*</span><span class=\"br0\">(</span>field<span class=\"br0\">[</span>swapu<span class=\"sy0\">^</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> j<span class=\"sy0\">*</span>WIDTH <span class=\"sy0\">+</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> prand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> prob_f <span class=\"sy0\">?</span> TREE <span class=\"sy0\">:</span> BURNING<span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"corrupted field<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  swapu <span class=\"sy0\">^=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  pthread_mutex_unlock<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>synclock<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> iv<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// the field is a \"part\" of an infinite \"void\" region</span><br/><span class=\"co2\">#define NB(I,J) (((I)&lt;WIDTH)&amp;&amp;((I)&gt;=0)&amp;&amp;((J)&lt;HEIGHT)&amp;&amp;((J)&gt;=0) \\<br/>\t\t\u00a0? (*(field[swapu] + (J)*WIDTH + (I)) == BURNING)\u00a0: false)</span><br/>bool burning_neighbor<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> j<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> NB<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> NB<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> j<span class=\"br0\">)</span> <span class=\"sy0\">||</span> NB<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>    NB<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> NB<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>    NB<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> NB<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> j<span class=\"br0\">)</span> <span class=\"sy0\">||</span> NB<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">// \"map\" the field into gfx mem</span><br/><span class=\"co1\">// burning trees are red</span><br/><span class=\"co1\">// trees are green</span><br/><span class=\"co1\">// \"voids\" are black;</span><br/><span class=\"kw4\">void</span> show<span class=\"br0\">(</span>SDL_Surface <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">uint8_t</span> <span class=\"sy0\">*</span>pixels <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">uint8_t</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span>s<span class=\"sy0\">-&gt;</span>pixels<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">uint32_t</span> color<span class=\"sy0\">;</span><br/>  SDL_PixelFormat <span class=\"sy0\">*</span>f <span class=\"sy0\">=</span> s<span class=\"sy0\">-&gt;</span>format<span class=\"sy0\">;</span><br/>\u00a0<br/>  pthread_mutex_lock<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>synclock<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> WIDTH<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> HEIGHT<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">switch</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">(</span>field<span class=\"br0\">[</span>swapu<span class=\"br0\">]</span> <span class=\"sy0\">+</span> j<span class=\"sy0\">*</span>WIDTH <span class=\"sy0\">+</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">case</span> VOID<span class=\"sy0\">:</span><br/>\tcolor <span class=\"sy0\">=</span> SDL_MapRGBA<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">case</span> TREE<span class=\"sy0\">:</span><br/>\tcolor <span class=\"sy0\">=</span> SDL_MapRGBA<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">255</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">case</span> BURNING<span class=\"sy0\">:</span><br/>\tcolor <span class=\"sy0\">=</span> SDL_MapRGBA<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> <span class=\"nu0\">255</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">uint32_t</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">(</span>pixels <span class=\"sy0\">+</span> j<span class=\"sy0\">*</span>s<span class=\"sy0\">-&gt;</span>pitch <span class=\"sy0\">+</span> i<span class=\"sy0\">*</span><span class=\"br0\">(</span>BPP<span class=\"sy0\">&gt;&gt;</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> color<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  pthread_mutex_unlock<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>synclock<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  SDL_Surface <span class=\"sy0\">*</span>scr <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>  SDL_Event event<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  bool quit <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">,</span> running <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>  SDL_TimerID tid<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// add variability to the simulation</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/srand.html\"><span class=\"kw3\">srand</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/time.html\"><span class=\"kw3\">time</span></a><span class=\"br0\">(</span>NULL<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// we can change prob_f and prob_p</span><br/>  <span class=\"co1\">// prob_f prob of spontaneous ignition</span><br/>  <span class=\"co1\">// prob_p prob of birth of a tree</span><br/>  <span class=\"kw4\">double</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>argv<span class=\"sy0\">++,</span> argc<span class=\"sy0\">--;</span> argc <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> argc<span class=\"sy0\">--,</span> argv<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>argv<span class=\"sy0\">,</span> <span class=\"st0\">\"prob_f\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> argc <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      p <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>prob_f<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>argv<span class=\"sy0\">,</span> <span class=\"st0\">\"prob_p\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> argc <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      p <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>prob_p<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcmp.html\"><span class=\"kw3\">strcmp</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>argv<span class=\"sy0\">,</span> <span class=\"st0\">\"prob_tree\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> argc <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      p <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>prob_tree<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span>  <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    argv<span class=\"sy0\">++;</span> argc<span class=\"sy0\">--;</span><br/>    <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span> t <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strtod.html\"><span class=\"kw3\">strtod</span></a><span class=\"br0\">(</span><span class=\"sy0\">*</span>argv<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy0\">!=</span> <span class=\"sy0\">*</span>argv<span class=\"br0\">)</span> <span class=\"sy0\">*</span>p <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"prob_f\u00a0%lf<span class=\"es1\">\\n</span>prob_p\u00a0%lf<span class=\"es1\">\\n</span>ratio\u00a0%lf<span class=\"es1\">\\n</span>prob_tree\u00a0%lf<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <br/>\t prob_f<span class=\"sy0\">,</span> prob_p<span class=\"sy0\">,</span> prob_p<span class=\"sy0\">/</span>prob_f<span class=\"sy0\">,</span><br/>\t prob_tree<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span> SDL_Init<span class=\"br0\">(</span>SDL_INIT_VIDEO<span class=\"sy0\">|</span>SDL_INIT_TIMER<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> EXIT_FAILURE<span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/atexit.html\"><span class=\"kw3\">atexit</span></a><span class=\"br0\">(</span>SDL_Quit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  field<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>WIDTH<span class=\"sy0\">*</span>HEIGHT<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>field<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  field<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span>WIDTH<span class=\"sy0\">*</span>HEIGHT<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>field<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>field<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  scr <span class=\"sy0\">=</span> SDL_SetVideoMode<span class=\"br0\">(</span>WIDTH<span class=\"sy0\">,</span> HEIGHT<span class=\"sy0\">,</span> BPP<span class=\"sy0\">,</span> SDL_HWSURFACE<span class=\"sy0\">|</span>SDL_DOUBLEBUF<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>scr <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fprintf.html\"><span class=\"kw3\">fprintf</span></a><span class=\"br0\">(</span>stderr<span class=\"sy0\">,</span> <span class=\"st0\">\"SDL_SetVideoMode:\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> SDL_GetError<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>field<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>field<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_FAILURE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  init_field<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  tid <span class=\"sy0\">=</span> SDL_AddTimer<span class=\"br0\">(</span>TIMERFREQ<span class=\"sy0\">,</span> simulate<span class=\"sy0\">,</span> NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// suppose success</span><br/>  running <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  event<span class=\"sy0\">-&gt;</span>type <span class=\"sy0\">=</span> SDL_VIDEOEXPOSE<span class=\"sy0\">;</span><br/>  SDL_PushEvent<span class=\"br0\">(</span>event<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span>SDL_WaitEvent<span class=\"br0\">(</span>event<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>quit<span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">switch</span><span class=\"br0\">(</span>event<span class=\"sy0\">-&gt;</span>type<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"kw1\">case</span> SDL_VIDEOEXPOSE<span class=\"sy0\">:</span><br/>      <span class=\"kw1\">while</span><span class=\"br0\">(</span>SDL_LockSurface<span class=\"br0\">(</span>scr<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> SDL_Delay<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      show<span class=\"br0\">(</span>scr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      SDL_UnlockSurface<span class=\"br0\">(</span>scr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      SDL_Flip<span class=\"br0\">(</span>scr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      event<span class=\"sy0\">-&gt;</span>type <span class=\"sy0\">=</span> SDL_VIDEOEXPOSE<span class=\"sy0\">;</span><br/>      SDL_PushEvent<span class=\"br0\">(</span>event<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">case</span> SDL_KEYDOWN<span class=\"sy0\">:</span><br/>      <span class=\"kw1\">switch</span><span class=\"br0\">(</span>event<span class=\"sy0\">-&gt;</span>key.<span class=\"me1\">keysym</span>.<span class=\"me1\">sym</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>      <span class=\"kw1\">case</span> SDLK_q<span class=\"sy0\">:</span><br/>\tquit <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">case</span> SDLK_p<span class=\"sy0\">:</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>running<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t  running <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\t  pthread_mutex_lock<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>synclock<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t  SDL_RemoveTimer<span class=\"br0\">(</span>tid<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// ignore failure...</span><br/>\t  pthread_mutex_unlock<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>synclock<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t  running <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\t  tid <span class=\"sy0\">=</span> SDL_AddTimer<span class=\"br0\">(</span>TIMERFREQ<span class=\"sy0\">,</span> simulate<span class=\"sy0\">,</span> NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t  <span class=\"co1\">// suppose success...</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"kw1\">case</span> SDL_QUIT<span class=\"sy0\">:</span><br/>      quit <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>      <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>running<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    pthread_mutex_lock<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>synclock<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    SDL_RemoveTimer<span class=\"br0\">(</span>tid<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    pthread_mutex_unlock<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>synclock<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>field<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>field<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span>EXIT_SUCCESS<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 282, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;windows.h&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">enum</span> states <span class=\"br0\">{</span> NONE, TREE, FIRE <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> MAX_SIDE <span class=\"sy1\">=</span> <span class=\"nu0\">500</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> myBitmap<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> pen<span class=\"br0\">(</span> <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    ~myBitmap<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tDeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tDeleteDC<span class=\"br0\">(</span> hdc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tDeleteObject<span class=\"br0\">(</span> bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> create<span class=\"br0\">(</span> <span class=\"kw4\">int</span> w, <span class=\"kw4\">int</span> h <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tBITMAPINFO\tbi<span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>bi, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span>\t   <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bi.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span>\t   <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span>\t   <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span>\t   <span class=\"sy1\">=</span>  w<span class=\"sy4\">;</span><br/>\tbi.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span>\t   <span class=\"sy1\">=</span> <span class=\"sy2\">-</span>h<span class=\"sy4\">;</span><br/>\u00a0<br/>\tHDC dc <span class=\"sy1\">=</span> GetDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tbmp <span class=\"sy1\">=</span> CreateDIBSection<span class=\"br0\">(</span> dc, <span class=\"sy3\">&amp;</span>bi, DIB_RGB_COLORS, <span class=\"sy3\">&amp;</span>pBits, <span class=\"kw2\">NULL</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>bmp <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\thdc <span class=\"sy1\">=</span> CreateCompatibleDC<span class=\"br0\">(</span> dc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tSelectObject<span class=\"br0\">(</span> hdc, bmp <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tReleaseDC<span class=\"br0\">(</span> GetConsoleWindow<span class=\"br0\">(</span><span class=\"br0\">)</span>, dc <span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>\u00a0<br/>\twidth <span class=\"sy1\">=</span> w<span class=\"sy4\">;</span> height <span class=\"sy1\">=</span> h<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> clear<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tZeroMemory<span class=\"br0\">(</span> pBits, width <span class=\"sy2\">*</span> height <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> setPenColor<span class=\"br0\">(</span> DWORD clr <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> pen <span class=\"br0\">)</span> DeleteObject<span class=\"br0\">(</span> pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tpen <span class=\"sy1\">=</span> CreatePen<span class=\"br0\">(</span> PS_SOLID, <span class=\"nu0\">1</span>, clr <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tSelectObject<span class=\"br0\">(</span> hdc, pen <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> saveBitmap<span class=\"br0\">(</span> string path <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tBITMAPFILEHEADER fileheader<span class=\"sy4\">;</span><br/>\tBITMAPINFO\t infoheader<span class=\"sy4\">;</span><br/>\tBITMAP\t\t bitmap<span class=\"sy4\">;</span><br/>\tDWORD\t\t wb<span class=\"sy4\">;</span><br/>\u00a0<br/>\tGetObject<span class=\"br0\">(</span> bmp, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> bitmap <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>bitmap <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tDWORD<span class=\"sy2\">*</span> dwpBits <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> DWORD<span class=\"br0\">[</span>bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>infoheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPINFO <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biBitCount</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biCompression</span> <span class=\"sy1\">=</span> BI_RGB<span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biPlanes</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSize</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biHeight</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmHeight</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biWidth</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span><span class=\"sy4\">;</span><br/>\tinfoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span> <span class=\"sy1\">=</span> bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> DWORD <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tfileheader.<span class=\"me1\">bfType</span>    <span class=\"sy1\">=</span> <span class=\"nu12\">0x4D42</span><span class=\"sy4\">;</span><br/>\tfileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tfileheader.<span class=\"me1\">bfSize</span>    <span class=\"sy1\">=</span> fileheader.<span class=\"me1\">bfOffBits</span> <span class=\"sy2\">+</span> infoheader.<span class=\"me1\">bmiHeader</span>.<span class=\"me1\">biSizeImage</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tGetDIBits<span class=\"br0\">(</span> hdc, bmp, <span class=\"nu0\">0</span>, height, <span class=\"br0\">(</span> LPVOID <span class=\"br0\">)</span>dwpBits, <span class=\"sy3\">&amp;</span>infoheader, DIB_RGB_COLORS <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tHANDLE file <span class=\"sy1\">=</span> CreateFile<span class=\"br0\">(</span> path.<span class=\"me1\">c_str</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, GENERIC_WRITE, <span class=\"nu0\">0</span>, <span class=\"kw2\">NULL</span>, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>fileheader, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> BITMAPFILEHEADER <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, <span class=\"sy3\">&amp;</span>infoheader.<span class=\"me1\">bmiHeader</span>, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> infoheader.<span class=\"me1\">bmiHeader</span> <span class=\"br0\">)</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tWriteFile<span class=\"br0\">(</span> file, dwpBits, bitmap.<span class=\"me1\">bmWidth</span> <span class=\"sy2\">*</span> bitmap.<span class=\"me1\">bmHeight</span> <span class=\"sy2\">*</span> <span class=\"nu0\">4</span>, <span class=\"sy3\">&amp;</span>wb, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tCloseHandle<span class=\"br0\">(</span> file <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw3\">delete</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> dwpBits<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    HDC getDC<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>     <span class=\"br0\">{</span> <span class=\"kw1\">return</span> hdc<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getWidth<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span>  <span class=\"br0\">{</span> <span class=\"kw1\">return</span> width<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw4\">int</span> getHeight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> height<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    HBITMAP bmp<span class=\"sy4\">;</span><br/>    HDC\t    hdc<span class=\"sy4\">;</span><br/>    HPEN    pen<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">void</span>\t<span class=\"sy2\">*</span>pBits<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">int</span>\t    width, height<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> forest<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    forest<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_bmp.<span class=\"me1\">create</span><span class=\"br0\">(</span> MAX_SIDE, MAX_SIDE <span class=\"br0\">)</span><span class=\"sy4\">;</span> <br/>\tinitForest<span class=\"br0\">(</span> <span class=\"nu17\">0.05f</span>, <span class=\"nu17\">0.005f</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> initForest<span class=\"br0\">(</span> <span class=\"kw4\">float</span> p, <span class=\"kw4\">float</span> f <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_p <span class=\"sy1\">=</span> p<span class=\"sy4\">;</span> _f <span class=\"sy1\">=</span> f<span class=\"sy4\">;</span><br/>\tseedForest<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> mainLoop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tdisplay<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tsimulate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> setHWND<span class=\"br0\">(</span> HWND hwnd <span class=\"br0\">)</span> <span class=\"br0\">{</span> _hwnd <span class=\"sy1\">=</span> hwnd<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">float</span> probRand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"br0\">(</span> <span class=\"kw4\">float</span> <span class=\"br0\">)</span><span class=\"kw3\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy2\">/</span> <span class=\"nu17\">32768.0f</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> display<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tHDC bdc <span class=\"sy1\">=</span> _bmp.<span class=\"me1\">getDC</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tDWORD clr<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> MAX_SIDE<span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> MAX_SIDE<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> _forest<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">case</span> FIRE<span class=\"sy4\">:</span> clr <span class=\"sy1\">=</span> <span class=\"nu0\">255</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">case</span> TREE<span class=\"sy4\">:</span> clr <span class=\"sy1\">=</span> RGB<span class=\"br0\">(</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">255</span>, <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">default</span><span class=\"sy4\">:</span> clr <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tSetPixel<span class=\"br0\">(</span> bdc, x, y, clr <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tHDC dc <span class=\"sy1\">=</span> GetDC<span class=\"br0\">(</span> _hwnd <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tBitBlt<span class=\"br0\">(</span> dc, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, MAX_SIDE, MAX_SIDE, _bmp.<span class=\"me1\">getDC</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, SRCCOPY <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tReleaseDC<span class=\"br0\">(</span> _hwnd, dc <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> seedForest<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tZeroMemory<span class=\"br0\">(</span> _forestT, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> _forestT <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> _forest, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> _forest <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> MAX_SIDE<span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> MAX_SIDE<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> probRand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> _p <span class=\"br0\">)</span> _forest<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy1\">=</span> TREE<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">bool</span> getNeighbors<span class=\"br0\">(</span> <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> a, b<span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> yy <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> yy <span class=\"sy1\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> yy<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> xx <span class=\"sy1\">=</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"sy4\">;</span> xx <span class=\"sy1\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> xx<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>xx <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>yy <span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>\t\ta <span class=\"sy1\">=</span> x <span class=\"sy2\">+</span> xx<span class=\"sy4\">;</span> b <span class=\"sy1\">=</span> y <span class=\"sy2\">+</span> yy<span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> a <span class=\"sy1\">&lt;</span> MAX_SIDE <span class=\"sy3\">&amp;&amp;</span> b <span class=\"sy1\">&lt;</span> MAX_SIDE <span class=\"sy3\">&amp;&amp;</span> a <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"sy3\">&amp;&amp;</span> b <span class=\"sy1\">&gt;</span> <span class=\"sy2\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> _forest<span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">[</span>b<span class=\"br0\">]</span> <span class=\"sy1\">==</span> FIRE <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">void</span> simulate<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> MAX_SIDE<span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> MAX_SIDE<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> _forest<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">case</span> FIRE<span class=\"sy4\">:</span> _forestT<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy1\">=</span> NONE<span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">case</span> NONE<span class=\"sy4\">:</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> probRand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> _p <span class=\"br0\">)</span> _forestT<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy1\">=</span> TREE<span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t    <span class=\"kw1\">case</span> TREE<span class=\"sy4\">:</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> getNeighbors<span class=\"br0\">(</span> x, y <span class=\"br0\">)</span> <span class=\"sy3\">||</span> probRand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;</span> _f <span class=\"br0\">)</span> _forestT<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy1\">=</span> FIRE<span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> y <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> y <span class=\"sy1\">&lt;</span> MAX_SIDE<span class=\"sy4\">;</span> y<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> MAX_SIDE<span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t\t_forest<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span> <span class=\"sy1\">=</span> _forestT<span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    myBitmap _bmp<span class=\"sy4\">;</span><br/>    HWND     _hwnd<span class=\"sy4\">;</span><br/>    BYTE     _forest<span class=\"br0\">[</span>MAX_SIDE<span class=\"br0\">]</span><span class=\"br0\">[</span>MAX_SIDE<span class=\"br0\">]</span>, _forestT<span class=\"br0\">[</span>MAX_SIDE<span class=\"br0\">]</span><span class=\"br0\">[</span>MAX_SIDE<span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">float</span>    _p, _f<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw2\">class</span> wnd<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">int</span> wnd<span class=\"sy4\">::</span><span class=\"me2\">Run</span><span class=\"br0\">(</span> HINSTANCE hInst <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t_hInst <span class=\"sy1\">=</span> hInst<span class=\"sy4\">;</span><br/>\t_hwnd <span class=\"sy1\">=</span> InitAll<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t_ff.<span class=\"me1\">setHWND</span><span class=\"br0\">(</span> _hwnd <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t_ff.<span class=\"me1\">initForest</span><span class=\"br0\">(</span> <span class=\"nu17\">0.02f</span>, <span class=\"nu17\">0.001f</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tShowWindow<span class=\"br0\">(</span> _hwnd, SW_SHOW <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tUpdateWindow<span class=\"br0\">(</span> _hwnd <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tMSG msg<span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>msg, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> msg <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> msg.<span class=\"me1\">message</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> WM_QUIT <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> PeekMessage<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>msg, <span class=\"kw2\">NULL</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, PM_REMOVE <span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\tTranslateMessage<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>msg <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\tDispatchMessage<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>msg <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">else</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t_ff.<span class=\"me1\">mainLoop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> UnregisterClass<span class=\"br0\">(</span> <span class=\"st0\">\"_FOREST_FIRE_\"</span>, _hInst <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> WINAPI wnd<span class=\"sy4\">::</span><span class=\"me2\">WndProc</span><span class=\"br0\">(</span> HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span> msg <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">case</span> WM_DESTROY<span class=\"sy4\">:</span> PostQuitMessage<span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">default</span><span class=\"sy4\">:</span><br/>\t\t<span class=\"kw1\">return</span> DefWindowProc<span class=\"br0\">(</span> hWnd, msg, wParam, lParam <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    HWND InitAll<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\tWNDCLASSEX wcex<span class=\"sy4\">;</span><br/>\tZeroMemory<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>wcex, <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> wcex <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">cbSize</span>\t       <span class=\"sy1\">=</span> <span class=\"kw3\">sizeof</span><span class=\"br0\">(</span> WNDCLASSEX <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">style</span>\t       <span class=\"sy1\">=</span> CS_HREDRAW <span class=\"sy3\">|</span> CS_VREDRAW<span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">lpfnWndProc</span>   <span class=\"sy1\">=</span> <span class=\"br0\">(</span> WNDPROC <span class=\"br0\">)</span>WndProc<span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">hInstance</span>     <span class=\"sy1\">=</span> _hInst<span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">hCursor</span>       <span class=\"sy1\">=</span> LoadCursor<span class=\"br0\">(</span> <span class=\"kw2\">NULL</span>, IDC_ARROW <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">hbrBackground</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span> HBRUSH <span class=\"br0\">)</span><span class=\"br0\">(</span> COLOR_WINDOW <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\twcex.<span class=\"me1\">lpszClassName</span> <span class=\"sy1\">=</span> <span class=\"st0\">\"_FOREST_FIRE_\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tRegisterClassEx<span class=\"br0\">(</span> <span class=\"sy3\">&amp;</span>wcex <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> CreateWindow<span class=\"br0\">(</span> <span class=\"st0\">\"_FOREST_FIRE_\"</span>, <span class=\"st0\">\".: Forest Fire -- PJorente\u00a0:.\"</span>, WS_SYSMENU, CW_USEDEFAULT, <span class=\"nu0\">0</span>, MAX_SIDE, MAX_SIDE, <span class=\"kw2\">NULL</span>, <span class=\"kw2\">NULL</span>, _hInst, <span class=\"kw2\">NULL</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    HINSTANCE _hInst<span class=\"sy4\">;</span><br/>    HWND      _hwnd<span class=\"sy4\">;</span><br/>    forest    _ff<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/><span class=\"kw4\">int</span> APIENTRY _tWinMain<span class=\"br0\">(</span> HINSTANCE hInstance, HINSTANCE hPrevInstance, LPTSTR lpCmdLine, <span class=\"kw4\">int</span> nCmdShow <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">srand</span><span class=\"br0\">(</span> GetTickCount<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    wnd myWnd<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> myWnd.<span class=\"me1\">Run</span><span class=\"br0\">(</span> hInstance <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">//--------------------------------------------------------------------------------------------------</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 161, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Drawing</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Drawing.Drawing2D</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Threading</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Windows.Forms</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> ForestFire<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program <span class=\"sy0\">:</span> Form<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">readonly</span> Random rand <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> Bitmap img<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Program<span class=\"br0\">(</span><span class=\"kw4\">int</span> w, <span class=\"kw4\">int</span> h, <span class=\"kw4\">int</span> f, <span class=\"kw4\">int</span> p<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Size <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Size<span class=\"br0\">(</span>w, h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            StartPosition <span class=\"sy0\">=</span> FormStartPosition<span class=\"sy0\">.</span><span class=\"me1\">CenterScreen</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            Thread t <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Thread<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> fire<span class=\"br0\">(</span>f, p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            t<span class=\"sy0\">.</span><span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            FormClosing <span class=\"sy0\">+=</span> <span class=\"br0\">(</span><span class=\"kw4\">object</span> sender, FormClosingEventArgs e<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span> t<span class=\"sy0\">.</span><span class=\"me1\">Abort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> t <span class=\"sy0\">=</span> <span class=\"kw1\">null</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> fire<span class=\"br0\">(</span><span class=\"kw4\">int</span> f, <span class=\"kw4\">int</span> p<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> clientWidth <span class=\"sy0\">=</span> ClientRectangle<span class=\"sy0\">.</span><span class=\"me1\">Width</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> clientHeight <span class=\"sy0\">=</span> ClientRectangle<span class=\"sy0\">.</span><span class=\"me1\">Height</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> cellSize <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            img <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Bitmap<span class=\"br0\">(</span>clientWidth, clientHeight<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Graphics g <span class=\"sy0\">=</span> Graphics<span class=\"sy0\">.</span><span class=\"me1\">FromImage</span><span class=\"br0\">(</span>img<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            CellState<span class=\"br0\">[</span>,<span class=\"br0\">]</span> state <span class=\"sy0\">=</span> InitializeForestFire<span class=\"br0\">(</span>clientWidth, clientHeight<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">uint</span> generation <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">do</span><br/>            <span class=\"br0\">{</span><br/>                g<span class=\"sy0\">.</span><span class=\"me1\">FillRectangle</span><span class=\"br0\">(</span>Brushes<span class=\"sy0\">.</span><span class=\"me1\">White</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span>, img<span class=\"sy0\">.</span><span class=\"me1\">Width</span>, img<span class=\"sy0\">.</span><span class=\"me1\">Height</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                state <span class=\"sy0\">=</span> StepForestFire<span class=\"br0\">(</span>state, f, p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> y <span class=\"sy0\">&lt;</span> clientHeight <span class=\"sy0\">-</span> cellSize<span class=\"sy0\">;</span> y <span class=\"sy0\">+=</span> cellSize<span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> clientWidth <span class=\"sy0\">-</span> cellSize<span class=\"sy0\">;</span> x <span class=\"sy0\">+=</span> cellSize<span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>state<span class=\"br0\">[</span>y, x<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                        <span class=\"br0\">{</span><br/>                            <span class=\"kw1\">case</span> CellState<span class=\"sy0\">.</span><span class=\"me1\">Empty</span><span class=\"sy0\">:</span><br/>                                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                            <span class=\"kw1\">case</span> CellState<span class=\"sy0\">.</span><span class=\"me1\">Tree</span><span class=\"sy0\">:</span><br/>                                g<span class=\"sy0\">.</span><span class=\"me1\">FillRectangle</span><span class=\"br0\">(</span>Brushes<span class=\"sy0\">.</span><span class=\"me1\">DarkGreen</span>, x, y, cellSize, cellSize<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                            <span class=\"kw1\">case</span> CellState<span class=\"sy0\">.</span><span class=\"me1\">Burning</span><span class=\"sy0\">:</span><br/>                                g<span class=\"sy0\">.</span><span class=\"me1\">FillRectangle</span><span class=\"br0\">(</span>Brushes<span class=\"sy0\">.</span><span class=\"me1\">DarkRed</span>, x, y, cellSize, cellSize<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                Thread<span class=\"sy0\">.</span><span class=\"me1\">Sleep</span><span class=\"br0\">(</span><span class=\"nu0\">500</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                Invoke<span class=\"br0\">(</span><span class=\"br0\">(</span>MethodInvoker<span class=\"br0\">)</span>Refresh<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>generation <span class=\"sy0\">&lt;</span> <span class=\"kw4\">uint</span><span class=\"sy0\">.</span><span class=\"me1\">MaxValue</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            g<span class=\"sy0\">.</span><span class=\"me1\">Dispose</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> CellState<span class=\"br0\">[</span>,<span class=\"br0\">]</span> InitializeForestFire<span class=\"br0\">(</span><span class=\"kw4\">int</span> width, <span class=\"kw4\">int</span> height<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"co1\">// Create our state array, initialize all indices as Empty, and return it.</span><br/>            <span class=\"kw1\">var</span> state <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> CellState<span class=\"br0\">[</span>height, width<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            state<span class=\"sy0\">.</span><span class=\"me1\">Initialize</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> state<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">enum</span> CellState <span class=\"sy0\">:</span> <span class=\"kw4\">byte</span><br/>        <span class=\"br0\">{</span><br/>            Empty <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>,<br/>            Tree <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,<br/>            Burning <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> CellState<span class=\"br0\">[</span>,<span class=\"br0\">]</span> StepForestFire<span class=\"br0\">(</span>CellState<span class=\"br0\">[</span>,<span class=\"br0\">]</span> state, <span class=\"kw4\">int</span> f, <span class=\"kw4\">int</span> p<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"coMULTI\">/* Clone our old state, so we can write to our new state<br/>             * without changing any values in the old state. */</span><br/>            <span class=\"kw1\">var</span> newState <span class=\"sy0\">=</span> <span class=\"br0\">(</span>CellState<span class=\"br0\">[</span>,<span class=\"br0\">]</span><span class=\"br0\">)</span>state<span class=\"sy0\">.</span><span class=\"me1\">Clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> numRows <span class=\"sy0\">=</span> state<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> numCols <span class=\"sy0\">=</span> state<span class=\"sy0\">.</span><span class=\"me1\">GetLength</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;</span> numRows <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;</span> numCols <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"coMULTI\">/* <br/>                     * Check the current cell.<br/>                     * <br/>                     * If it's empty, give it a 1/p chance of becoming a tree.<br/>                     * <br/>                     * If it's a tree, check to see if any neighbors are burning.<br/>                     * If so, set the cell's state to burning, otherwise give it<br/>                     * a 1/f chance of combusting.<br/>                     * <br/>                     * If it's burning, set it to empty.<br/>                     */</span><br/>                    <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>state<span class=\"br0\">[</span>r, c<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">case</span> CellState<span class=\"sy0\">.</span><span class=\"me1\">Empty</span><span class=\"sy0\">:</span><br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>rand<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, p<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                                newState<span class=\"br0\">[</span>r, c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> CellState<span class=\"sy0\">.</span><span class=\"me1\">Tree</span><span class=\"sy0\">;</span><br/>                            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                        <span class=\"kw1\">case</span> CellState<span class=\"sy0\">.</span><span class=\"me1\">Tree</span><span class=\"sy0\">:</span><br/>                            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>NeighborHasState<span class=\"br0\">(</span>state, r, c, CellState<span class=\"sy0\">.</span><span class=\"me1\">Burning</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> rand<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, f<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                                newState<span class=\"br0\">[</span>r, c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> CellState<span class=\"sy0\">.</span><span class=\"me1\">Burning</span><span class=\"sy0\">;</span><br/>                            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                        <span class=\"kw1\">case</span> CellState<span class=\"sy0\">.</span><span class=\"me1\">Burning</span><span class=\"sy0\">:</span><br/>                            newState<span class=\"br0\">[</span>r, c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> CellState<span class=\"sy0\">.</span><span class=\"me1\">Empty</span><span class=\"sy0\">;</span><br/>                            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> newState<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw4\">bool</span> NeighborHasState<span class=\"br0\">(</span>CellState<span class=\"br0\">[</span>,<span class=\"br0\">]</span> state, <span class=\"kw4\">int</span> x, <span class=\"kw4\">int</span> y, CellState <span class=\"kw1\">value</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"co1\">// Check each cell within a 1 cell radius for the specified value.</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> r <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> r <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> r<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> c <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> c <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> c<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>r <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> c <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>state<span class=\"br0\">[</span>x <span class=\"sy0\">+</span> r, y <span class=\"sy0\">+</span> c<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">protected</span> <span class=\"kw1\">override</span> <span class=\"kw4\">void</span> OnPaint<span class=\"br0\">(</span>PaintEventArgs e<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">base</span><span class=\"sy0\">.</span><span class=\"me1\">OnPaint</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            e<span class=\"sy0\">.</span><span class=\"me1\">Graphics</span><span class=\"sy0\">.</span><span class=\"me1\">DrawImage</span><span class=\"br0\">(</span>img, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"br0\">[</span>STAThread<span class=\"br0\">]</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Application<span class=\"sy0\">.</span><span class=\"me1\">Run</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Program<span class=\"br0\">(</span>w<span class=\"sy0\">:</span> <span class=\"nu0\">500</span>, h<span class=\"sy0\">:</span> <span class=\"nu0\">500</span>, f<span class=\"sy0\">:</span> <span class=\"nu0\">2</span>, p<span class=\"sy0\">:</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 124, "block": "<pre class=\"text highlighted_source\">import ceylon.random { DefaultRandom }<br/>\u00a0<br/>abstract class Cell() of tree | dirt | burning {}<br/>object tree extends Cell() { string =&gt; \"A\"; }<br/>object dirt extends Cell() { string =&gt; \" \"; }<br/>object burning extends Cell() { string =&gt; \"#\"; }<br/>\u00a0<br/>class Forest(Integer width, Integer height, Float f, Float p) {<br/>\u00a0<br/>    value random = DefaultRandom();<br/>    function chance(Float probability) =&gt; random.nextFloat() &lt; probability;<br/>    value sparked =&gt; chance(f);<br/>    value sprouted =&gt; chance(p);<br/>\u00a0<br/>    alias Point =&gt; Integer[2];<br/>    interface Row =&gt; {Cell*};<br/>\u00a0<br/>    object doubleBufferedGrid satisfies<br/>            Correspondence&lt;Point, Cell&gt; &amp;<br/>            KeyedCorrespondenceMutator&lt;Point, Cell&gt; {<br/>\u00a0<br/>        value grids = [<br/>            Array {<br/>                for (j in 0:height)<br/>                Array {<br/>                    for (i in 0:width)<br/>                    chance(0.5) then tree else dirt<br/>                }<br/>            },<br/>            Array {<br/>                for (j in 0:height)<br/>                Array.ofSize(width, dirt)<br/>            }<br/>        ];<br/>\u00a0<br/>        variable value showFirst = true;<br/>        value currentState =&gt; showFirst then grids.first else grids.last;<br/>        value nextState =&gt; showFirst then grids.last else grids.first;<br/>\u00a0<br/>        shared void swapStates() =&gt; showFirst =\u00a0!showFirst;<br/>\u00a0<br/>        shared {Row*} rows =&gt; currentState;<br/>\u00a0<br/>        shared actual Boolean defines(Point key) =&gt;<br/>                let (x = key[0], y = key[1])<br/>                0 &lt;= x &lt; width &amp;&amp; 0 &lt;= y &lt; height;<br/>        shared actual Cell? get(Point key) =&gt;<br/>                let (x = key[0], y = key[1])<br/>                currentState.get(y)?.get(x);<br/>\u00a0<br/>        shared actual void put(Point key, Cell cell) {<br/>            value [x, y] = key;<br/>            nextState.get(y)?.set(x, cell);<br/>        }<br/>    }<br/>\u00a0<br/>    variable value evolutions = 0;<br/>    shared Integer generation =&gt; evolutions + 1;<br/>\u00a0<br/>    shared void evolve() {<br/>\u00a0<br/>        evolutions++;<br/>\u00a0<br/>        function firesNearby(Integer x, Integer y) =&gt; {<br/>            for (j in y - 1\u00a0: 3)<br/>            for (i in x - 1\u00a0: 3)<br/>            doubleBufferedGrid[[i, j]]<br/>        }.coalesced.any(burning.equals);<br/>\u00a0<br/>        for(j-&gt;row in doubleBufferedGrid.rows.indexed) {<br/>            for(i-&gt;cell in row.indexed) {<br/>                switch (cell)<br/>                case (burning) {<br/>                    doubleBufferedGrid[[i, j]] = dirt;<br/>                }<br/>                case (dirt) {<br/>                    doubleBufferedGrid[[i, j]] = sprouted then tree else dirt;<br/>                }<br/>                case (tree) {<br/>                    doubleBufferedGrid[[i, j]] =<br/>                            firesNearby(i, j) || sparked<br/>                            then burning else tree;<br/>                }<br/>            }<br/>        }<br/>\u00a0<br/>        doubleBufferedGrid.swapStates();<br/>    }<br/>\u00a0<br/>    shared void display() {<br/>\u00a0<br/>        void drawLine() =&gt; print(\"-\".repeat(width + 2));<br/>\u00a0<br/>        drawLine();<br/>        for (row in doubleBufferedGrid.rows) {<br/>            process.write(\"|\");<br/>            for (cell in row) {<br/>                process.write(cell.string);<br/>            }<br/>            print(\"|\");<br/>        }<br/>        drawLine();<br/>    }<br/>}<br/>\u00a0<br/>shared void run() {<br/>\u00a0<br/>    value forest = Forest(78, 38, 0.02, 0.03);<br/>\u00a0<br/>    while (true) {<br/>\u00a0<br/>        forest.display();<br/>\u00a0<br/>        print(\"Generation ``forest.generation``\");<br/>        print(\"Press enter for next generation or q and then enter to quit\");<br/>\u00a0<br/>        value input = process.readLine();<br/>        if (exists input, input.trimmed.lowercased == \"q\") {<br/>            return;<br/>        }<br/>\u00a0<br/>        forest.evolve();<br/>    }<br/>}</pre>"}, {"lang": "Clojure", "loc": 80, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> burn<span class=\"sy0\">-</span>prob <span class=\"nu0\">0.1</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> new<span class=\"sy0\">-</span>tree<span class=\"sy0\">-</span>prob <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> grow<span class=\"sy0\">-</span>new<span class=\"sy0\">-</span>tree? <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> new<span class=\"sy0\">-</span>tree<span class=\"sy0\">-</span>prob <span class=\"br0\">(</span>rand<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> burn<span class=\"sy0\">-</span>tree? <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> burn<span class=\"sy0\">-</span>prob <span class=\"br0\">(</span>rand<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> tree<span class=\"sy0\">-</span>maker <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>grow<span class=\"sy0\">-</span>new<span class=\"sy0\">-</span>tree?<span class=\"br0\">)</span>\u00a0:<span class=\"me1\">tree</span>\u00a0:<span class=\"me1\">grass</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> make<span class=\"sy0\">-</span>forest<br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>forest <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>size<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">take</span> size <span class=\"br0\">(</span><span class=\"kw1\">repeatedly</span> #<span class=\"br0\">(</span><span class=\"kw1\">take</span> size <span class=\"br0\">(</span><span class=\"kw1\">repeatedly</span> tree<span class=\"sy0\">-</span>maker<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> tree<span class=\"sy0\">-</span>at <span class=\"br0\">[</span>forest row col<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">try</span> <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> forest<br/>                                   <span class=\"br0\">(</span>nth row<span class=\"br0\">)</span><br/>                                   <span class=\"br0\">(</span>nth col<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                    <span class=\"br0\">(</span><span class=\"kw1\">catch</span> Exception _ false<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> neighbores<span class=\"sy0\">-</span>burning? <span class=\"br0\">[</span>forest row col<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">letfn</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>burnt? <span class=\"br0\">[</span>row col<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span>\u00a0:<span class=\"me1\">burnt</span> <span class=\"br0\">(</span>tree<span class=\"sy0\">-</span>at forest row col<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">or</span><br/>     <span class=\"br0\">(</span>burnt? <span class=\"br0\">(</span><span class=\"kw1\">inc</span> row<span class=\"br0\">)</span> col<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>burnt? <span class=\"br0\">(</span><span class=\"kw1\">dec</span> row<span class=\"br0\">)</span> col<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>burnt? row <span class=\"br0\">(</span><span class=\"kw1\">inc</span> col<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>burnt? row <span class=\"br0\">(</span><span class=\"kw1\">dec</span> col<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> lightning<span class=\"sy0\">-</span>strike <span class=\"br0\">[</span>forest<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>forest<span class=\"sy0\">-</span>row<span class=\"br0\">]</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"sy0\">%</span>\u00a0:<span class=\"me1\">tree</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>burn<span class=\"sy0\">-</span>tree?<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                \u00a0:<span class=\"me1\">fire</span><span class=\"sy0\">!</span><br/>                 <span class=\"sy0\">%</span><span class=\"br0\">)</span><br/>              forest<span class=\"sy0\">-</span>row<span class=\"br0\">)</span><br/>         <span class=\"br0\">)</span><br/>       forest<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> burn<span class=\"sy0\">-</span>out<span class=\"sy0\">-</span>trees <span class=\"br0\">[</span>forest<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>forest<span class=\"sy0\">-</span>row<span class=\"br0\">]</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span>case <span class=\"sy0\">%</span><br/>             \u00a0:<span class=\"me1\">burnt</span>\u00a0:<span class=\"me1\">grass</span><br/>             \u00a0:<span class=\"me1\">fire</span><span class=\"sy0\">!</span>\u00a0:<span class=\"me1\">burnt</span><br/>              <span class=\"sy0\">%</span><span class=\"br0\">)</span><br/>              forest<span class=\"sy0\">-</span>row<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       forest<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> burn<span class=\"sy0\">-</span>neighbores <span class=\"br0\">[</span>forest<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>forest<span class=\"sy0\">-</span>size <span class=\"br0\">(</span><span class=\"kw1\">count</span> forest<span class=\"br0\">)</span><br/>        indicies <span class=\"br0\">(</span><span class=\"kw1\">partition</span> forest<span class=\"sy0\">-</span>size <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>row <span class=\"br0\">(</span><span class=\"kw1\">range</span> forest<span class=\"sy0\">-</span>size<span class=\"br0\">)</span> col <span class=\"br0\">(</span><span class=\"kw1\">range</span> forest<span class=\"sy0\">-</span>size<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> row <span class=\"br0\">(</span>list col<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>forest<span class=\"sy0\">-</span>row indicies<span class=\"sy0\">-</span>row<span class=\"br0\">]</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span><br/>                       <span class=\"br0\">(</span><span class=\"sy0\">=</span>\u00a0:<span class=\"me1\">tree</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span>neighbores<span class=\"sy0\">-</span>burning? forest <span class=\"br0\">(</span><span class=\"kw1\">first</span> <span class=\"sy0\">%</span>2<span class=\"br0\">)</span> <span class=\"br0\">(</span>second <span class=\"sy0\">%</span>2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   \u00a0:<span class=\"me1\">fire</span><span class=\"sy0\">!</span><br/>                    <span class=\"sy0\">%</span><span class=\"br0\">)</span><br/>                forest<span class=\"sy0\">-</span>row indicies<span class=\"sy0\">-</span>row<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         forest indicies<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> grow<span class=\"sy0\">-</span>new<span class=\"sy0\">-</span>trees <span class=\"br0\">[</span>forest<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>forest<span class=\"sy0\">-</span>row<span class=\"br0\">]</span><br/>                                     <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"sy0\">%</span>\u00a0:<span class=\"me1\">grass</span><span class=\"br0\">)</span><br/>                                             <span class=\"br0\">(</span>tree<span class=\"sy0\">-</span>maker<span class=\"br0\">)</span><br/>                                             <span class=\"sy0\">%</span><span class=\"br0\">)</span><br/>                                          forest<span class=\"sy0\">-</span>row<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                     forest<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> forest<span class=\"sy0\">-</span>fire<br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>forest<span class=\"sy0\">-</span>fire <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>forest<span class=\"sy0\">-</span>size<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">loop</span><br/>      <span class=\"br0\">[</span>forest <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>forest forest<span class=\"sy0\">-</span>size<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>pprint forest<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>Thread<span class=\"sy0\">/</span>sleep <span class=\"nu0\">300</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> forest<br/>        <span class=\"br0\">(</span>burn<span class=\"sy0\">-</span>out<span class=\"sy0\">-</span>trees<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>lightning<span class=\"sy0\">-</span>strike<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>burn<span class=\"sy0\">-</span>neighbores<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>grow<span class=\"sy0\">-</span>new<span class=\"sy0\">-</span>trees<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">recur</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>forest<span class=\"sy0\">-</span>fire<span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 168, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> forest-fire<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       *&gt; Probability represents a fraction <span class=\"kw3\">of</span> <span class=\"nu0\">10000</span><span class=\"sy0\">.</span><br/>       *&gt; <span class=\"kw3\">For</span> instance<span class=\"sy0\">,</span> IGNITE-PROB means a tree has a <span class=\"nu0\">1</span> <span class=\"kw3\">in</span> <span class=\"nu0\">10000</span> chance<br/>       *&gt; <span class=\"kw3\">of</span> igniting<span class=\"sy0\">.</span><br/>       <span class=\"nu0\">78</span>  IGNITE-PROB                 <span class=\"kw3\">VALUE</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">78</span>  NEW-TREE-PROB               <span class=\"kw3\">VALUE</span> <span class=\"nu0\">100</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">78</span>  EMPTY-PROB                  <span class=\"kw3\">VALUE</span> <span class=\"nu0\">3333</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">78</span>  AREA-<span class=\"kw3\">SIZE</span>                   <span class=\"kw3\">VALUE</span> <span class=\"nu0\">40</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  sim-<span class=\"kw3\">table</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  sim-row <span class=\"kw3\">OCCURS</span> AREA-<span class=\"kw3\">SIZE</span> <span class=\"kw2\">TIMES</span> <span class=\"kw3\">INDEXED</span> <span class=\"kw3\">BY</span> row-<span class=\"kw3\">index</span><span class=\"sy0\">.</span><br/>               <span class=\"nu0\">05</span>  sim-<span class=\"kw3\">area</span> <span class=\"kw3\">OCCURS</span> AREA-<span class=\"kw3\">SIZE</span> <span class=\"kw2\">TIMES</span><br/>                   <span class=\"kw3\">INDEXED</span> <span class=\"kw3\">BY</span> col-<span class=\"kw3\">index</span><span class=\"sy0\">.</span><br/>                   <span class=\"nu0\">07</span>  current-<span class=\"kw3\">status</span>  <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>                       *&gt; The flags correspond <span class=\"kw2\">to</span> the colours they will<br/>                       *&gt; be displayed as<span class=\"sy0\">.</span><br/>                       <span class=\"nu0\">88</span>  empty       <span class=\"kw3\">VALUE</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span> *&gt; Black<br/>                       <span class=\"nu0\">88</span>  tree        <span class=\"kw3\">VALUE</span> <span class=\"nu0\">2</span><span class=\"sy0\">.</span> *&gt; Green<br/>                       <span class=\"nu0\">88</span>  burning     <span class=\"kw3\">VALUE</span> <span class=\"nu0\">4</span><span class=\"sy0\">.</span> *&gt; Red<br/>\u00a0<br/>                   <span class=\"nu0\">07</span>  next-<span class=\"kw3\">status</span>     <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>                       <span class=\"nu0\">88</span>  empty       <span class=\"kw3\">VALUE</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>                       <span class=\"nu0\">88</span>  tree        <span class=\"kw3\">VALUE</span> <span class=\"nu0\">2</span><span class=\"sy0\">.</span><br/>                       <span class=\"nu0\">88</span>  burning     <span class=\"kw3\">VALUE</span> <span class=\"nu0\">4</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  rand-num                    <span class=\"kw3\">PIC</span> <span class=\"nu0\">9999</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  next-row                    <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  next-col                    <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  neighbours-row              <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  neighbours-col              <span class=\"kw3\">PIC</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       main-<span class=\"kw3\">line</span><span class=\"sy0\">.</span><br/>           *&gt; Seed <span class=\"kw4\">RANDOM</span> <span class=\"kw3\">with</span> current <span class=\"kw3\">time</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">MOVE</span> <span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">RANDOM</span><span class=\"br0\">(</span><span class=\"kw3\">FUNCTION</span> CURRENT-<span class=\"kw3\">DATE</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span>:<span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">TO</span> rand-num<br/>\u00a0<br/>           <span class=\"kw2\">PERFORM</span> initialise-<span class=\"kw3\">table</span><br/>           <span class=\"kw2\">PERFORM</span> FOREVER<br/>               <span class=\"kw2\">PERFORM</span> show-simulation<br/>               <span class=\"kw2\">PERFORM</span> step-simulation<br/>           END-<span class=\"kw2\">PERFORM</span><br/>\u00a0<br/>           GOBACK<br/>           <span class=\"sy0\">.</span><br/>\u00a0<br/>       initialise-<span class=\"kw3\">table</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> row-<span class=\"kw3\">index</span> <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span><br/>                   <span class=\"kw2\">UNTIL</span> AREA-<span class=\"kw3\">SIZE</span> &lt; row-<span class=\"kw3\">index</span><br/>                   <span class=\"kw3\">AFTER</span> col-<span class=\"kw3\">index</span> <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span><br/>                       <span class=\"kw2\">UNTIL</span> AREA-<span class=\"kw3\">SIZE</span> &lt; col-<span class=\"kw3\">index</span><br/>               <span class=\"kw2\">PERFORM</span> get-rand-num<br/>               <span class=\"kw1\">IF</span> rand-num &lt;<span class=\"sy0\">=</span> EMPTY-PROB<br/>                   <span class=\"kw3\">SET</span> empty <span class=\"kw3\">OF</span> current-<span class=\"kw3\">status</span> <span class=\"br0\">(</span>row-<span class=\"kw3\">index</span><span class=\"sy0\">,</span> col-<span class=\"kw3\">index</span><span class=\"br0\">)</span><br/>                       <span class=\"kw2\">TO</span> <span class=\"kw3\">TRUE</span><br/>                   <span class=\"kw3\">SET</span> empty <span class=\"kw3\">OF</span> next-<span class=\"kw3\">status</span> <span class=\"br0\">(</span>row-<span class=\"kw3\">index</span><span class=\"sy0\">,</span> col-<span class=\"kw3\">index</span><span class=\"br0\">)</span><br/>                       <span class=\"kw2\">TO</span> <span class=\"kw3\">TRUE</span><br/>               <span class=\"kw3\">ELSE</span><br/>                   <span class=\"kw3\">SET</span> tree <span class=\"kw3\">OF</span> current-<span class=\"kw3\">status</span> <span class=\"br0\">(</span>row-<span class=\"kw3\">index</span><span class=\"sy0\">,</span> col-<span class=\"kw3\">index</span><span class=\"br0\">)</span><br/>                       <span class=\"kw2\">TO</span> <span class=\"kw3\">TRUE</span><br/>                   <span class=\"kw3\">SET</span> tree <span class=\"kw3\">OF</span> next-<span class=\"kw3\">status</span> <span class=\"br0\">(</span>row-<span class=\"kw3\">index</span><span class=\"sy0\">,</span> col-<span class=\"kw3\">index</span><span class=\"br0\">)</span><br/>                       <span class=\"kw2\">TO</span> <span class=\"kw3\">TRUE</span><br/>               END-<span class=\"kw1\">IF</span><br/>           END-<span class=\"kw2\">PERFORM</span><br/>           <span class=\"sy0\">.</span><br/>\u00a0<br/>       show-simulation<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> row-<span class=\"kw3\">index</span> <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span><br/>                   <span class=\"kw2\">UNTIL</span> AREA-<span class=\"kw3\">SIZE</span> &lt; row-<span class=\"kw3\">index</span><br/>                   <span class=\"kw3\">AFTER</span> col-<span class=\"kw3\">index</span> <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span><br/>                       <span class=\"kw2\">UNTIL</span> AREA-<span class=\"kw3\">SIZE</span> &lt; col-<span class=\"kw3\">index</span><br/>                <span class=\"kw2\">DISPLAY</span> <span class=\"kw3\">SPACE</span> <span class=\"kw3\">AT</span> <span class=\"kw3\">LINE</span> row-<span class=\"kw3\">index</span> <span class=\"kw3\">COLUMN</span> col-<span class=\"kw3\">index</span><br/>                    <span class=\"kw3\">WITH</span> BACKGROUND-COLOR<br/>                        current-<span class=\"kw3\">status</span> <span class=\"br0\">(</span>row-<span class=\"kw3\">index</span><span class=\"sy0\">,</span> col-<span class=\"kw3\">index</span><span class=\"br0\">)</span><br/>           END-<span class=\"kw2\">PERFORM</span><br/>           <span class=\"sy0\">.</span><br/>\u00a0<br/>       *&gt; Updates the simulation<span class=\"sy0\">.</span><br/>       step-simulation<span class=\"sy0\">.</span><br/>            <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> row-<span class=\"kw3\">index</span> <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span><br/>                   <span class=\"kw2\">UNTIL</span> AREA-<span class=\"kw3\">SIZE</span> &lt; row-<span class=\"kw3\">index</span><br/>                   <span class=\"kw3\">AFTER</span> col-<span class=\"kw3\">index</span> <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span><br/>                       <span class=\"kw2\">UNTIL</span> AREA-<span class=\"kw3\">SIZE</span> &lt; col-<span class=\"kw3\">index</span><br/>                <span class=\"kw2\">EVALUATE</span> <span class=\"kw3\">TRUE</span><br/>                    <span class=\"kw3\">WHEN</span> empty <span class=\"kw3\">OF</span> current-<span class=\"kw3\">status</span> <span class=\"br0\">(</span>row-<span class=\"kw3\">index</span><span class=\"sy0\">,</span> col-<span class=\"kw3\">index</span><span class=\"br0\">)</span><br/>                        <span class=\"kw2\">PERFORM</span> get-rand-num<br/>                        <span class=\"kw1\">IF</span> rand-num &lt;<span class=\"sy0\">=</span> NEW-TREE-PROB<br/>                            <span class=\"kw3\">SET</span> tree <span class=\"kw3\">OF</span> next-<span class=\"kw3\">status</span><br/>                                 <span class=\"br0\">(</span>row-<span class=\"kw3\">index</span><span class=\"sy0\">,</span> col-<span class=\"kw3\">index</span><span class=\"br0\">)</span> <span class=\"kw2\">TO</span> <span class=\"kw3\">TRUE</span><br/>                        END-<span class=\"kw1\">IF</span><br/>\u00a0<br/>                    <span class=\"kw3\">WHEN</span> tree <span class=\"kw3\">OF</span> current-<span class=\"kw3\">status</span> <span class=\"br0\">(</span>row-<span class=\"kw3\">index</span><span class=\"sy0\">,</span> col-<span class=\"kw3\">index</span><span class=\"br0\">)</span><br/>                        <span class=\"kw2\">PERFORM</span> simulate-tree<br/>\u00a0<br/>                    <span class=\"kw3\">WHEN</span> burning <span class=\"kw3\">OF</span> current-<span class=\"kw3\">status</span><br/>                            <span class=\"br0\">(</span>row-<span class=\"kw3\">index</span><span class=\"sy0\">,</span> col-<span class=\"kw3\">index</span><span class=\"br0\">)</span><br/>                        <span class=\"kw3\">SET</span> empty <span class=\"kw3\">OF</span> next-<span class=\"kw3\">status</span> <span class=\"br0\">(</span>row-<span class=\"kw3\">index</span><span class=\"sy0\">,</span> col-<span class=\"kw3\">index</span><span class=\"br0\">)</span><br/>                            <span class=\"kw2\">TO</span> <span class=\"kw3\">TRUE</span><br/>                END-<span class=\"kw2\">EVALUATE</span><br/>            END-<span class=\"kw2\">PERFORM</span><br/>\u00a0<br/>            <span class=\"kw2\">PERFORM</span> update-statuses<span class=\"sy0\">.</span><br/>            <span class=\"sy0\">.</span><br/>\u00a0<br/>       *&gt; Updates a tree tile<span class=\"sy0\">,</span> assuming row-<span class=\"kw3\">index</span> <span class=\"kw3\">and</span> col-<span class=\"kw3\">index</span> are <span class=\"kw3\">at</span><br/>       *&gt; a tree <span class=\"kw3\">area</span><span class=\"sy0\">.</span><br/>       simulate-tree<span class=\"sy0\">.</span><br/>           *&gt; Find the row <span class=\"kw3\">and</span> <span class=\"kw3\">column</span> <span class=\"kw3\">of</span> the bottom-<span class=\"kw3\">right</span> neighbour<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">COMPUTE</span> next-row <span class=\"sy0\">=</span> <span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">MIN</span><span class=\"br0\">(</span>row-<span class=\"kw3\">index</span><span class=\"sy0\"> + </span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> AREA-<span class=\"kw3\">SIZE</span><span class=\"br0\">)</span><br/>           <span class=\"kw2\">COMPUTE</span> next-col <span class=\"sy0\">=</span> <span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">MIN</span><span class=\"br0\">(</span>col-<span class=\"kw3\">index</span><span class=\"sy0\"> + </span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> AREA-<span class=\"kw3\">SIZE</span><span class=\"br0\">)</span><br/>\u00a0<br/>           <span class=\"kw2\">COMPUTE</span> neighbours-row <span class=\"sy0\">=</span> <span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">MAX</span><span class=\"br0\">(</span>row-<span class=\"kw3\">index</span><span class=\"sy0\"> - </span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>           <span class=\"kw2\">COMPUTE</span> neighbours-col <span class=\"sy0\">=</span> <span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">MAX</span><span class=\"br0\">(</span>col-<span class=\"kw3\">index</span><span class=\"sy0\"> - </span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>           *&gt; <span class=\"kw1\">If</span> a neighbour <span class=\"kw3\">is</span> burning<span class=\"sy0\">,</span> catch fire<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> neighbours-row <span class=\"kw3\">FROM</span> neighbours-row <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span><br/>                   <span class=\"kw2\">UNTIL</span> next-row &lt; neighbours-row<br/>               *&gt; <span class=\"kw1\">Check</span> <span class=\"kw1\">if</span> neighbours <span class=\"kw3\">in</span> a row are <span class=\"kw3\">on</span> fire<span class=\"sy0\">.</span><br/>               <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> neighbours-col <span class=\"kw3\">FROM</span> neighbours-col <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span><br/>                       <span class=\"kw2\">UNTIL</span> next-col &lt; neighbours-col<br/>                   <span class=\"kw1\">IF</span> neighbours-row <span class=\"sy0\">=</span> row-<span class=\"kw3\">index</span><br/>                           <span class=\"kw3\">AND</span> neighbours-col <span class=\"sy0\">=</span> col-<span class=\"kw3\">index</span><br/>                       <span class=\"kw2\">EXIT</span> <span class=\"kw2\">PERFORM</span> CYCLE<br/>                   END-<span class=\"kw1\">IF</span><br/>\u00a0<br/>                   <span class=\"kw1\">IF</span> burning <span class=\"kw3\">OF</span> current-<span class=\"kw3\">status</span><br/>                           <span class=\"br0\">(</span>neighbours-row<span class=\"sy0\">,</span> neighbours-col<span class=\"br0\">)</span><br/>                       <span class=\"kw3\">SET</span> burning <span class=\"kw3\">OF</span> next-<span class=\"kw3\">status</span> <span class=\"br0\">(</span>row-<span class=\"kw3\">index</span><span class=\"sy0\">,</span> col-<span class=\"kw3\">index</span><span class=\"br0\">)</span><br/>                           <span class=\"kw2\">TO</span> <span class=\"kw3\">TRUE</span><br/>                       <span class=\"kw2\">EXIT</span> PARAGRAPH<br/>                   END-<span class=\"kw1\">IF</span><br/>               END-<span class=\"kw2\">PERFORM</span><br/>\u00a0<br/>               *&gt; <span class=\"kw2\">Move</span> neighbours-col back <span class=\"kw2\">to</span> starting <span class=\"kw3\">position</span><br/>               <span class=\"kw2\">COMPUTE</span> neighbours-col <span class=\"sy0\">=</span><br/>                   <span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">MAX</span><span class=\"br0\">(</span>neighbours-col<span class=\"sy0\"> - </span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>           END-<span class=\"kw2\">PERFORM</span><br/>\u00a0<br/>           *&gt; Otherwise<span class=\"sy0\">,</span> there <span class=\"kw3\">is</span> a <span class=\"kw4\">random</span> chance <span class=\"kw3\">of</span><br/>           *&gt; catching fire<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">PERFORM</span> get-rand-num<br/>           <span class=\"kw1\">IF</span> rand-num &lt;<span class=\"sy0\">=</span> IGNITE-PROB<br/>               <span class=\"kw3\">SET</span> burning <span class=\"kw3\">OF</span> next-<span class=\"kw3\">status</span> <span class=\"br0\">(</span>row-<span class=\"kw3\">index</span><span class=\"sy0\">,</span> col-<span class=\"kw3\">index</span><span class=\"br0\">)</span> <span class=\"kw2\">TO</span> <span class=\"kw3\">TRUE</span><br/>           END-<span class=\"kw1\">IF</span><br/>           <span class=\"sy0\">.</span><br/>\u00a0<br/>       update-statuses<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> row-<span class=\"kw3\">index</span> <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span><br/>                   <span class=\"kw2\">UNTIL</span> AREA-<span class=\"kw3\">SIZE</span> &lt; row-<span class=\"kw3\">index</span><br/>                   <span class=\"kw3\">AFTER</span> col-<span class=\"kw3\">index</span> <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span><br/>                       <span class=\"kw2\">UNTIL</span> AREA-<span class=\"kw3\">SIZE</span> &lt; col-<span class=\"kw3\">index</span><br/>               <span class=\"kw2\">MOVE</span> next-<span class=\"kw3\">status</span> <span class=\"br0\">(</span>row-<span class=\"kw3\">index</span><span class=\"sy0\">,</span> col-<span class=\"kw3\">index</span><span class=\"br0\">)</span><br/>                   <span class=\"kw2\">TO</span> current-<span class=\"kw3\">status</span> <span class=\"br0\">(</span>row-<span class=\"kw3\">index</span><span class=\"sy0\">,</span> col-<span class=\"kw3\">index</span><span class=\"br0\">)</span><br/>           END-<span class=\"kw2\">PERFORM</span><br/>           <span class=\"sy0\">.</span><br/>\u00a0<br/>       *&gt; Puts a <span class=\"kw4\">random</span> <span class=\"kw3\">value</span> between <span class=\"nu0\">0</span> <span class=\"kw3\">and</span> <span class=\"nu0\">9999</span> <span class=\"kw3\">in</span> rand-num<span class=\"sy0\">.</span><br/>       get-rand-num<span class=\"sy0\">.</span><br/>           <span class=\"kw2\">COMPUTE</span> rand-num <span class=\"sy0\">=</span><br/>               <span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">MOD</span><span class=\"br0\">(</span><span class=\"kw3\">FUNCTION</span> <span class=\"kw4\">RANDOM</span><span class=\"sy0\"> * </span><span class=\"nu0\">100000</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span><br/>           <span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 74, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defvar *dims* '<span class=\"br0\">(</span><span class=\"nu0\">10</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defvar *prob-t* <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defvar *prob-f* <span class=\"nu0\">0.1</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defvar *prob-p* <span class=\"nu0\">0.01</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> with-gensyms <span class=\"br0\">(</span>names <span class=\"sy0\">&amp;</span>body body<span class=\"br0\">)</span><br/>  `<span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> n '<span class=\"br0\">(</span><span class=\"kw1\">gensym</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> names<span class=\"br0\">)</span><br/>\t <span class=\"sy0\">,</span>@body<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> traverse-grid <span class=\"br0\">(</span>grid rowvar colvar <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>rest after-cols<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span>body body<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>with-gensyms <span class=\"br0\">(</span>dims rows cols<span class=\"br0\">)</span><br/>\t`<span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">,</span>dims <span class=\"br0\">(</span>array-dimensions <span class=\"sy0\">,</span>grid<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"sy0\">,</span>rows <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"sy0\">,</span>dims<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"sy0\">,</span>cols <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> <span class=\"sy0\">,</span>dims<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t   <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span><span class=\"sy0\">,</span>rowvar <span class=\"sy0\">,</span>rows <span class=\"sy0\">,</span>grid<span class=\"br0\">)</span><br/>\t\t <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span><span class=\"sy0\">,</span>colvar <span class=\"sy0\">,</span>cols <span class=\"sy0\">,</span>after-cols<span class=\"br0\">)</span><br/>\t\t   <span class=\"sy0\">,</span>@body<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> make-new-forest <span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>dims *dims*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>forest <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> dims <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> '<span class=\"kw1\">symbol</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> 'void<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>traverse-grid forest row col <span class=\"kw1\">nil</span><br/>\t  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> *prob-t*<span class=\"br0\">)</span><br/>\t\t  <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> forest row col<span class=\"br0\">)</span> 'tree<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-forest <span class=\"br0\">(</span>forest<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>traverse-grid forest row col <span class=\"br0\">(</span>terpri<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>ecase <span class=\"br0\">(</span><span class=\"kw1\">aref</span> forest row col<span class=\"br0\">)</span><br/>\t  <span class=\"br0\">(</span><span class=\"br0\">(</span>void<span class=\"br0\">)</span> <span class=\"br0\">(</span>write-char #\\space<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t  <span class=\"br0\">(</span><span class=\"br0\">(</span>tree<span class=\"br0\">)</span> <span class=\"br0\">(</span>write-char #\\T<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t  <span class=\"br0\">(</span><span class=\"br0\">(</span>fire<span class=\"br0\">)</span> <span class=\"br0\">(</span>write-char #\\#<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>values<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defvar *neighboring* '<span class=\"br0\">(</span><span class=\"br0\">(</span>-<span class=\"nu0\">1</span> <span class=\"sy0\">.</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>-<span class=\"nu0\">1</span> <span class=\"sy0\">.</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>-<span class=\"nu0\">1</span> <span class=\"sy0\">.</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">.</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span>           <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">.</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">.</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">.</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>  <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">.</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> neighbors <span class=\"br0\">(</span>forest row col<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for n in *neighboring*<br/>\tfor nrow <span class=\"sy0\">=</span> <span class=\"br0\">(</span>+ row <span class=\"br0\">(</span><span class=\"kw1\">car</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        for ncol <span class=\"sy0\">=</span> <span class=\"br0\">(</span>+ col <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">when</span> <span class=\"br0\">(</span>array-in-bounds-p forest nrow ncol<span class=\"br0\">)</span><br/>\tcollect <span class=\"br0\">(</span><span class=\"kw1\">aref</span> forest nrow ncol<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> evolve-tree <span class=\"br0\">(</span>forest row col<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tree <span class=\"br0\">(</span><span class=\"kw1\">aref</span> forest row col<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq</span> tree 'fire<span class=\"br0\">)</span> <span class=\"co1\">;; if the tree was on fire, it's dead Jim</span><br/>\t\t   'void<span class=\"br0\">)</span><br/>\t      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> tree 'tree<span class=\"br0\">)</span> <span class=\"co1\">;; if a neighbor is on fire, it's on fire too</span><br/>\t\t    <span class=\"br0\">(</span>find 'fire <span class=\"br0\">(</span>neighbors forest row col<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">test</span> #'<span class=\"kw1\">eq</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t   'fire<span class=\"br0\">)</span><br/>\t      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> tree 'tree<span class=\"br0\">)</span> <span class=\"co1\">;; random chance of fire happening</span><br/>\t\t    <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> *prob-f*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t   'fire<span class=\"br0\">)</span><br/>\t      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> tree 'void<span class=\"br0\">)</span> <span class=\"co1\">;; random chance of empty space becoming a tree</span><br/>\t\t    <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> *prob-p*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t   'tree<span class=\"br0\">)</span><br/>\t\t  <span class=\"br0\">(</span>t tree<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> evolve-forest <span class=\"br0\">(</span>forest<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>dims <span class=\"br0\">(</span>array-dimensions forest<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span>new <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> dims <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> '<span class=\"kw1\">symbol</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> 'void<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>traverse-grid forest row col <span class=\"kw1\">nil</span><br/>\t  <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> new row col<span class=\"br0\">)</span> <span class=\"br0\">(</span>evolve-tree forest row col<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\tnew<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> simulate <span class=\"br0\">(</span>forest n <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>print-all t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"------ Initial forest ------~%\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>print-forest forest<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> forest <span class=\"br0\">(</span>evolve-forest forest<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">when</span> print-all<br/>      <span class=\"br0\">(</span><span class=\"kw1\">progn</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"~%------ Generation ~d ------~%\"</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/> \t<span class=\"br0\">(</span>print-forest forest<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 54, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> treeProb <span class=\"sy0\">=</span> <span class=\"nu16\">0.55</span><span class=\"sy0\">;</span> <span class=\"co1\">// Original tree probability.</span><br/><span class=\"kw4\">enum</span> fProb <span class=\"sy0\">=</span>    <span class=\"nu16\">0.01</span><span class=\"sy0\">;</span> <span class=\"co1\">// Auto combustion probability.</span><br/><span class=\"kw4\">enum</span> cProb <span class=\"sy0\">=</span>    <span class=\"nu16\">0.01</span><span class=\"sy0\">;</span> <span class=\"co1\">// Tree creation probability.</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> Cell <span class=\"sy0\">:</span> <span class=\"kw4\">char</span> <span class=\"br0\">{</span> empty<span class=\"sy0\">=</span><span class=\"st0\">' '</span><span class=\"sy0\">,</span> tree<span class=\"sy0\">=</span><span class=\"st0\">'T'</span><span class=\"sy0\">,</span> fire<span class=\"sy0\">=</span><span class=\"st0\">'#'</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">alias</span> World <span class=\"sy0\">=</span> Cell<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> hasBurningNeighbours<span class=\"br0\">(</span><span class=\"kw2\">in</span> World world<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">ulong</span> r<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">ulong</span> c<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> rowShift<span class=\"sy0\">;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> colShift<span class=\"sy0\">;</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"sy0\">+</span> rowShift<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>r <span class=\"sy0\">+</span> rowShift<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> world.<span class=\"me1\">length</span> <span class=\"sy0\">&amp;&amp;</span><br/>                <span class=\"br0\">(</span>c <span class=\"sy0\">+</span> colShift<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>c <span class=\"sy0\">+</span> colShift<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> world<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&amp;&amp;</span><br/>                world<span class=\"br0\">[</span>r <span class=\"sy0\">+</span> rowShift<span class=\"br0\">]</span><span class=\"br0\">[</span>c <span class=\"sy0\">+</span> colShift<span class=\"br0\">]</span> <span class=\"sy0\">==</span> Cell.<span class=\"me1\">fire</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> nextState<span class=\"br0\">(</span><span class=\"kw2\">in</span> World world<span class=\"sy0\">,</span> World nextWorld<span class=\"br0\">)</span> <span class=\"coMULTI\">/*nothrow*/</span> @<span class=\"kw4\">safe</span> <span class=\"coMULTI\">/*@nogc*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>r<span class=\"sy0\">,</span> row<span class=\"sy0\">;</span> world<span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>c<span class=\"sy0\">,</span> elem<span class=\"sy0\">;</span> row<span class=\"br0\">)</span><br/>            <span class=\"kw4\">final</span> <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>elem<span class=\"br0\">)</span> <span class=\"kw2\">with</span> <span class=\"br0\">(</span>Cell<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> empty<span class=\"sy0\">:</span><br/>                    nextWorld<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>uniform01 <span class=\"sy0\">&lt;</span> cProb<span class=\"br0\">)</span> <span class=\"sy0\">?</span> tree <span class=\"sy0\">:</span> empty<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">case</span> tree<span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>world.<span class=\"me1\">hasBurningNeighbours</span><span class=\"br0\">(</span>r<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        nextWorld<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> fire<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">else</span><br/>                        nextWorld<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>uniform01 <span class=\"sy0\">&lt;</span> fProb<span class=\"br0\">)</span> <span class=\"sy0\">?</span> fire <span class=\"sy0\">:</span> tree<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">case</span> fire<span class=\"sy0\">:</span><br/>                    nextWorld<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> empty<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> world <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> World<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">65</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>row<span class=\"sy0\">;</span> world<span class=\"br0\">)</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw2\">ref</span> el<span class=\"sy0\">;</span> row<span class=\"br0\">)</span><br/>            el <span class=\"sy0\">=</span> <span class=\"br0\">(</span>uniform01 <span class=\"sy0\">&lt;</span> treeProb<span class=\"br0\">)</span> <span class=\"sy0\">?</span> Cell.<span class=\"me1\">tree</span> <span class=\"sy0\">:</span> Cell.<span class=\"me1\">empty</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> nextWorld <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> World<span class=\"br0\">(</span>world.<span class=\"me1\">length</span><span class=\"sy0\">,</span> world<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        nextState<span class=\"br0\">(</span>world<span class=\"sy0\">,</span> nextWorld<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"%(%(%c%)<span class=\"es1\">\\n</span>%)<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> nextWorld<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        world.<span class=\"me1\">swap</span><span class=\"br0\">(</span>nextWorld<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 77, "block": "<pre class=\"text highlighted_source\">#chance of empty-&gt;tree<br/>set\u00a0:p 0.004<br/>#chance of spontaneous tree combustion<br/>set\u00a0:f 0.001<br/>#chance of tree in initial state<br/>set\u00a0:s 0.5<br/>#height of world<br/>set\u00a0:H 10<br/>#width of world<br/>set\u00a0:W 20<br/>\u00a0<br/>has-burning-neigbour state pos:<br/>\tfor i range -- swap ++ dup &amp;&lt; pos:<br/>\t\tfor j range -- swap ++ dup &amp;&gt; pos:<br/>\t\t\t&amp; i j<br/>\t\t\ttry:<br/>\t\t\t\tstate!<br/>\t\t\tcatch value-error:<br/>\t\t\t\t:empty<br/>\t\t\tif =\u00a0:burning:<br/>\t\t\t\treturn true<br/>\tfalse<br/>\u00a0<br/>evolve state pos:<br/>\tstate! pos<br/>\tif =\u00a0:tree dup:<br/>\t\tif has-burning-neigbour state pos:<br/>\t\t\t:burning drop<br/>\t\telseif chance f:<br/>\t\t\t:burning drop<br/>\telseif =\u00a0:burning:<br/>\t\t:empty<br/>\telse:<br/>\t\tif chance p:<br/>\t\t\t:tree<br/>\t\telse:<br/>\t\t\t:empty<br/>\u00a0<br/>step state:<br/>\tlocal\u00a0:next {}<br/>\tfor k in keys state:<br/>\t\tset-to next k evolve state k<br/>\tnext<br/>\u00a0<br/>local\u00a0:(c) {\u00a0:tree \"T\"\u00a0:burning \"B\"\u00a0:empty \".\" }<br/>print-state state:<br/>\tfor j range 0 H:<br/>\t\tfor i range 0 W:<br/>\t\t\t!print\\ (c)! state! &amp; i j<br/>\t\t!print \"\"<br/>\u00a0<br/>init-state:<br/>\tlocal\u00a0:first {}<br/>\tfor j range 0 H:<br/>\t\tfor i range 0 W:<br/>\t\t\tif chance s:<br/>\t\t\t\t:tree<br/>\t\t\telse:<br/>\t\t\t\t:empty<br/>\t\t\tset-to first &amp; i j<br/>\tfirst<br/>\u00a0<br/>run:<br/>\tinit-state<br/>\twhile true:<br/>\t\tprint-state dup<br/>\t\t!print \"\"<br/>\t\tstep<br/>\u00a0<br/>run-slowly:<br/>\tinit-state<br/>\twhile true:<br/>\t\tprint-state dup<br/>\t\tdrop\u00a0!prompt \"Continue.\"<br/>\t\tstep<br/>\u00a0<br/>run</pre>"}, {"lang": "Emacs Lisp", "loc": 98, "block": "<pre class=\"lisp highlighted_source\">#<span class=\"sy0\">!</span>/usr/bin/env emacs -script<br/><span class=\"co1\">;; -*- lexical-binding: t -*-</span><br/><span class=\"co1\">;; run: ./forest-fire forest-fire.config</span><br/><span class=\"br0\">(</span>require 'cl-lib<span class=\"br0\">)</span><br/><span class=\"co1\">;; (setq debug-on-error t)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> swap <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>  `<span class=\"br0\">(</span><span class=\"kw1\">setq</span> <span class=\"sy0\">,</span>b <span class=\"br0\">(</span><span class=\"kw1\">prog1</span> <span class=\"sy0\">,</span>a <span class=\"br0\">(</span><span class=\"kw1\">setq</span> <span class=\"sy0\">,</span>a <span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defconst burning\u00a0?B<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>defconst tree\u00a0?t<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>cl-defstruct world rows cols data<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> new-world <span class=\"br0\">(</span>rows cols<span class=\"br0\">)</span><br/>  <span class=\"co1\">;; When allocating the vector add padding so the border will always be empty.</span><br/>  <span class=\"br0\">(</span>make-world <span class=\"sy0\">:</span><span class=\"me1\">rows</span> rows <span class=\"sy0\">:</span><span class=\"me1\">cols</span> cols <span class=\"sy0\">:</span><span class=\"me1\">data</span> <span class=\"br0\">(</span>make-vector <span class=\"br0\">(</span>* <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ rows<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ cols<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> world--rows <span class=\"br0\">(</span>w<span class=\"br0\">)</span><br/>  `<span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>world-rows <span class=\"sy0\">,</span>w<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> world--cols <span class=\"br0\">(</span>w<span class=\"br0\">)</span><br/>  `<span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span>world-cols <span class=\"sy0\">,</span>w<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> world-pt <span class=\"br0\">(</span>w r c<span class=\"br0\">)</span><br/>  `<span class=\"br0\">(</span>+ <span class=\"br0\">(</span>* <span class=\"br0\">(</span>mod <span class=\"sy0\">,</span>r <span class=\"br0\">(</span>world--rows <span class=\"sy0\">,</span>w<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>world--cols <span class=\"sy0\">,</span>w<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>mod <span class=\"sy0\">,</span>c <span class=\"br0\">(</span>world--cols <span class=\"sy0\">,</span>w<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defmacro</span> world-ref <span class=\"br0\">(</span>w r c<span class=\"br0\">)</span><br/>  `<span class=\"br0\">(</span><span class=\"kw1\">aref</span> <span class=\"br0\">(</span>world-data <span class=\"sy0\">,</span>w<span class=\"br0\">)</span> <span class=\"br0\">(</span>world-pt <span class=\"sy0\">,</span>w <span class=\"sy0\">,</span>r <span class=\"sy0\">,</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-world <span class=\"br0\">(</span>world<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>r <span class=\"br0\">(</span>world-rows world<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>c <span class=\"br0\">(</span>world-cols world<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>cell <span class=\"br0\">(</span>world-ref world r c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"br0\">(</span>format <span class=\"st0\">\"%c\"</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> cell<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   cell<br/>                \u00a0?<span class=\"sy0\">.</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>terpri<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> random-probability <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>/ <span class=\"br0\">(</span><span class=\"kw1\">float</span> <span class=\"br0\">(</span><span class=\"kw1\">random</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> initialize-world <span class=\"br0\">(</span>world p<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>r <span class=\"br0\">(</span>world-rows world<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>c <span class=\"br0\">(</span>world-cols world<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>world-ref world r c<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>random-probability<span class=\"br0\">)</span> p<span class=\"br0\">)</span> tree <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> neighbors-burning <span class=\"br0\">(</span>world row col<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>offset '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">.</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">.</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">.</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">.</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">.</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>-<span class=\"nu0\">1</span> <span class=\"sy0\">.</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>-<span class=\"nu0\">1</span> <span class=\"sy0\">.</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>-<span class=\"nu0\">1</span> <span class=\"sy0\">.</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">eq</span> <span class=\"br0\">(</span>world-ref world <span class=\"br0\">(</span>+ row <span class=\"br0\">(</span><span class=\"kw1\">car</span> offset<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>+ col <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> offset<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> burning<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setq</span> n <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> advance <span class=\"br0\">(</span>old new p f<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>r <span class=\"br0\">(</span>world-rows old<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>c <span class=\"br0\">(</span>world-cols old<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>       <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq</span> <span class=\"br0\">(</span>world-ref old r c<span class=\"br0\">)</span> burning<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>world-ref new r c<span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null</span> <span class=\"br0\">(</span>world-ref old r c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>world-ref new r c<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>random-probability<span class=\"br0\">)</span> p<span class=\"br0\">)</span> tree <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq</span> <span class=\"br0\">(</span>world-ref old r c<span class=\"br0\">)</span> tree<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>world-ref new r c<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>neighbors-burning old r c<span class=\"br0\">)</span><br/>                                          <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>random-probability<span class=\"br0\">)</span> f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                      burning<br/>                                    tree<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> read-config <span class=\"br0\">(</span>file-<span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>with-temp-buffer<br/>    <span class=\"br0\">(</span>insert-file-contents-literally file-<span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>read <span class=\"br0\">(</span>current-buffer<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> get-config <span class=\"br0\">(</span>key config<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>val <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> key config<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> val<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"br0\">(</span>format <span class=\"st0\">\"missing value for\u00a0%s\"</span> key<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> val<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> simulate-forest <span class=\"br0\">(</span>file-<span class=\"kw1\">name</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>config <span class=\"br0\">(</span>read-config file-<span class=\"kw1\">name</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>rows <span class=\"br0\">(</span>get-config 'rows config<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>cols <span class=\"br0\">(</span>get-config 'cols config<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>skip <span class=\"br0\">(</span>get-config 'skip config<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>a <span class=\"br0\">(</span>new-world rows cols<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>b <span class=\"br0\">(</span>new-world rows cols<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>initialize-world a <span class=\"br0\">(</span>get-config 'tree config<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>time <span class=\"br0\">(</span>get-config 'time config<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> skip <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>mod time skip<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> skip <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"br0\">(</span>format <span class=\"st0\">\"* time\u00a0%d<span class=\"es0\">\\n</span>\"</span> time<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>print-world a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>advance a b <span class=\"br0\">(</span>get-config 'p config<span class=\"br0\">)</span> <span class=\"br0\">(</span>get-config 'f config<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>swap a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>simulate-forest <span class=\"br0\">(</span>elt command-line-args-left <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 74, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> forest_fire <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">record</span><span class=\"br0\">(</span> state<span class=\"sy1\">,</span> <span class=\"br0\">{</span>neighbours<span class=\"sy3\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> position<span class=\"sy1\">,</span> probability_burn<span class=\"sy1\">,</span> probability_grow<span class=\"sy1\">,</span> tree<span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>       <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">spawn</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>             <span class=\"re5\">Pid_positions</span> <span class=\"sy3\">=</span> <span class=\"re3\">forest_create</span><span class=\"br0\">(</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"nu0\">0.5</span><span class=\"sy1\">,</span> <span class=\"nu0\">0.3</span><span class=\"sy1\">,</span> <span class=\"nu0\">0.2</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>             <span class=\"re5\">Pids</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Pid_positions</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>             <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>tree_pid_positions<span class=\"sy1\">,</span> <span class=\"re5\">Pid_positions</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Pids</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>             <span class=\"re5\">Start</span> <span class=\"sy3\">=</span> <span class=\"re3\">forest_status</span><span class=\"br0\">(</span> <span class=\"re5\">Pids</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>             <span class=\"re5\">Histories</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">Start</span> | <span class=\"br0\">[</span><span class=\"re3\">forest_step</span><span class=\"br0\">(</span> <span class=\"re5\">Pids</span> <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">_X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>             <span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~p~n~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Histories</span><span class=\"br0\">]</span><br/>         <span class=\"kw1\">end</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">forest_create</span><span class=\"br0\">(</span> <span class=\"re5\">X_max</span><span class=\"sy1\">,</span> <span class=\"re5\">Y_max</span><span class=\"sy1\">,</span> <span class=\"re5\">Init</span><span class=\"sy1\">,</span> <span class=\"re5\">Grow</span><span class=\"sy1\">,</span> <span class=\"re5\">Burn</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>       <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re3\">tree_create</span><span class=\"br0\">(</span><span class=\"re3\">tree_init</span><span class=\"br0\">(</span><span class=\"re5\">Init</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Grow</span><span class=\"sy1\">,</span> <span class=\"re5\">Burn</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span><span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">X_max</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Y_ma</span>\\<br/>x<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">forest_status</span><span class=\"br0\">(</span> <span class=\"re5\">Pids</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>       <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>status_request<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Pids</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>       <span class=\"br0\">[</span><span class=\"kw1\">receive</span> <span class=\"br0\">{</span>status<span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"re5\">Position</span><span class=\"br0\">}</span> <span class=\"kw1\">end</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Pids</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">forest_step</span><span class=\"br0\">(</span> <span class=\"re5\">Pids</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>       <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>step<span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Pids</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>       <span class=\"re3\">forest_status</span><span class=\"br0\">(</span> <span class=\"re5\">Pids</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_neighbour</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span> <span class=\"co1\">% Myself</span><br/><span class=\"re3\">is_neighbour</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">Xn</span><span class=\"sy1\">,</span> <span class=\"re5\">Yn</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"kw3\">abs</span><span class=\"br0\">(</span><span class=\"re5\">Xn</span> <span class=\"sy3\">-</span> <span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">=&lt;</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"kw3\">abs</span><span class=\"br0\">(</span><span class=\"re5\">Yn</span> <span class=\"sy3\">-</span> <span class=\"re5\">Y</span><span class=\"br0\">)</span> <span class=\"sy3\">=&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_neighbour</span><span class=\"br0\">(</span> <span class=\"re5\">_Position_neighbour</span><span class=\"sy1\">,</span> <span class=\"re5\">_Position</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">State</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"kw1\">receive</span><br/>        <span class=\"br0\">{</span>tree_pid_positions<span class=\"sy1\">,</span> <span class=\"re5\">Pid_positions</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>                <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re3\">loop_neighbour</span><span class=\"br0\">(</span><span class=\"re5\">Pid_positions</span><span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"br0\">{</span>step<span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>               <span class=\"br0\">[</span><span class=\"re5\">X</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>tree<span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>tree<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>neighbours<span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>               <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re3\">loop_step</span><span class=\"br0\">(</span><span class=\"re5\">State</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"br0\">{</span>status_request<span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span><br/>                <span class=\"re5\">Pid</span> <span class=\"sy3\">!</span> <span class=\"br0\">{</span>status<span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>tree<span class=\"sy1\">,</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>position<span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">self</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>                <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">State</span> <span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop_neighbour</span><span class=\"br0\">(</span>\t<span class=\"re5\">Pid_positions</span><span class=\"sy1\">,</span> <span class=\"re5\">State</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">My_position</span> <span class=\"sy3\">=</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>position<span class=\"sy1\">,</span><br/>        <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"br0\">{</span>neighbours<span class=\"sy3\">=</span><span class=\"br0\">[</span><span class=\"re5\">Pid</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">Pid</span><span class=\"sy1\">,</span> <span class=\"re5\">Position</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Pid_positions</span><span class=\"sy1\">,</span> <span class=\"re3\">is_neighbour</span><span class=\"br0\">(</span> <span class=\"re5\">Position</span><span class=\"sy1\">,</span> <span class=\"re5\">My_position</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop_step</span><span class=\"br0\">(</span> <span class=\"re5\">State</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re5\">Is_burning</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">any</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> loop_step_burning<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">loop_step_receive</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"sy1\">.</span>neighbours<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"re5\">Tree</span> <span class=\"sy3\">=</span> <span class=\"re3\">loop_step_next</span><span class=\"br0\">(</span> <span class=\"re5\">Is_burning</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">State</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"re5\">State</span><span class=\"re8\">#</span><span class=\"re7\">state</span><span class=\"br0\">{</span>tree<span class=\"sy3\">=</span><span class=\"re5\">Tree</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop_step_burning</span><span class=\"br0\">(</span> <span class=\"re5\">Tree</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Tree</span> <span class=\"sy3\">=:=</span> burning<span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop_step_next</span><span class=\"br0\">(</span> <span class=\"re5\">_Is_burning</span><span class=\"sy1\">,</span> <span class=\"re5\">Probablility</span><span class=\"sy1\">,</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>tree<span class=\"sy3\">=</span>empty<span class=\"sy1\">,</span> probability_grow<span class=\"sy3\">=</span><span class=\"re5\">Grow</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Grow</span> <span class=\"sy3\">&gt;</span> <span class=\"re5\">Probablility</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">tree</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_step_next</span><span class=\"br0\">(</span> <span class=\"re5\">_Is_burning</span><span class=\"sy1\">,</span> <span class=\"re5\">_Probablility</span><span class=\"sy1\">,</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>tree<span class=\"sy3\">=</span>empty<span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">empty</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_step_next</span><span class=\"br0\">(</span> <span class=\"re5\">_Is_burning</span><span class=\"sy1\">,</span> <span class=\"re5\">_Probablility</span><span class=\"sy1\">,</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>tree<span class=\"sy3\">=</span>burning<span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">empty</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_step_next</span><span class=\"br0\">(</span> true<span class=\"sy1\">,</span> <span class=\"re5\">_Probablility</span><span class=\"sy1\">,</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>tree<span class=\"sy3\">=</span>tree<span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">burning</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_step_next</span><span class=\"br0\">(</span> false<span class=\"sy1\">,</span> <span class=\"re5\">Probablility</span><span class=\"sy1\">,</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>tree<span class=\"sy3\">=</span>tree<span class=\"sy1\">,</span> probability_burn<span class=\"sy3\">=</span><span class=\"re5\">Burn</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Burn</span> <span class=\"sy3\">&gt;</span> <span class=\"re5\">Probablility</span>  <span class=\"sy1\">-&gt;</span> <span class=\"me1\">burning</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop_step_next</span><span class=\"br0\">(</span> false<span class=\"sy1\">,</span> <span class=\"re5\">_Probablility</span><span class=\"sy1\">,</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>tree<span class=\"sy3\">=</span>tree<span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">tree</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">loop_step_receive</span><span class=\"br0\">(</span> <span class=\"re5\">Pid</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"kw1\">receive</span> <span class=\"br0\">{</span>tree<span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"re5\">Pid</span><span class=\"br0\">}</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Tree</span> <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">tree_create</span><span class=\"br0\">(</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"re5\">Grow</span><span class=\"sy1\">,</span> <span class=\"re5\">Burn</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re5\">State</span> <span class=\"sy3\">=</span> #<span class=\"re7\">state</span><span class=\"br0\">{</span>position<span class=\"sy3\">=</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> probability_burn<span class=\"sy3\">=</span><span class=\"re5\">Burn</span><span class=\"sy1\">,</span> probability_grow<span class=\"sy3\">=</span><span class=\"re5\">Grow</span><span class=\"sy1\">,</span> tree<span class=\"sy3\">=</span><span class=\"re5\">Tree</span><span class=\"br0\">}</span><span class=\"sy1\">,</span><br/>        <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">spawn_link</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">seed</span><span class=\"br0\">(</span> <span class=\"re5\">X</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">State</span> <span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">tree_init</span><span class=\"br0\">(</span> <span class=\"re5\">Tree_probalility</span><span class=\"sy1\">,</span> <span class=\"re5\">Random</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Tree_probalility</span> <span class=\"sy3\">&gt;</span> <span class=\"re5\">Random</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">tree</span><span class=\"sy1\">;</span><br/><span class=\"re3\">tree_init</span><span class=\"br0\">(</span> <span class=\"re5\">_Tree_probalility</span><span class=\"sy1\">,</span> <span class=\"re5\">_Random</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">empty</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "F#", "loc": 90, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Diagnostics</span><br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Drawing</span><br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Drawing</span>.<span class=\"me1\">Imaging</span><br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Runtime</span>.<span class=\"me1\">InteropServices</span><br/><span class=\"kw1\">open</span> System.<span class=\"me1\">Windows</span>.<span class=\"me1\">Forms</span><br/>\u00a0<br/><span class=\"kw1\">module</span> ForestFire <span class=\"sy0\">=</span><br/>\u00a0<br/>    <span class=\"kw1\">type</span> Cell <span class=\"sy0\">=</span> Empty | Tree | Fire<br/>\u00a0<br/>    <span class=\"kw1\">let</span> rnd <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> System.<span class=\"me1\">Random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> initial_factor <span class=\"sy0\">=</span> <span class=\"nu0\">0.35</span><br/>    <span class=\"kw1\">let</span> ignition_factor <span class=\"sy0\">=</span> 1e<span class=\"sy0\">-</span>5 <span class=\"co1\">// rate of lightning strikes (f)</span><br/>    <span class=\"kw1\">let</span> growth_factor <span class=\"sy0\">=</span> 2e<span class=\"sy0\">-</span>3   <span class=\"co1\">// rate of regrowth (p)</span><br/>    <span class=\"kw1\">let</span> width <span class=\"sy0\">=</span> <span class=\"nu0\">640</span>            <span class=\"co1\">// width of the forest region</span><br/>    <span class=\"kw1\">let</span> height <span class=\"sy0\">=</span> <span class=\"nu0\">480</span>           <span class=\"co1\">// height of the forest region</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> make_forest <span class=\"sy0\">=</span><br/>        <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array2D</span></a>.<span class=\"me1\">init</span> height width <br/>            <span class=\"br0\">(</span><span class=\"kw1\">fun</span> _ _ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> rnd.<span class=\"me1\">NextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> initial_factor <span class=\"kw1\">then</span> Tree <span class=\"kw1\">else</span> Empty<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> count <span class=\"br0\">(</span>forest:Cell<span class=\"br0\">[</span>,<span class=\"br0\">]</span><span class=\"br0\">)</span> row col <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> <span class=\"kw1\">mutable</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">let</span> h,w <span class=\"sy0\">=</span> forest.<span class=\"me1\">GetLength</span> <span class=\"nu0\">0</span>, forest.<span class=\"me1\">GetLength</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">for</span> r <span class=\"kw1\">in</span> row<span class=\"sy0\">-</span><span class=\"nu0\">1</span> .. <span class=\"me1\">row</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> col<span class=\"sy0\">-</span><span class=\"nu0\">1</span> .. <span class=\"me1\">col</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">if</span> r <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> &amp;&amp; r <span class=\"sy0\">&lt;</span> h &amp;&amp; c <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> &amp;&amp; c <span class=\"sy0\">&lt;</span> w &amp;&amp; forest.<span class=\"br0\">[</span>r,c<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Fire <span class=\"kw1\">then</span><br/>                    n <span class=\"sy0\">&lt;-</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> forest.<span class=\"br0\">[</span>row,col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Fire <span class=\"kw1\">then</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">else</span> n<br/>\u00a0<br/>    <span class=\"kw1\">let</span> burn <span class=\"br0\">(</span>forest:Cell<span class=\"br0\">[</span>,<span class=\"br0\">]</span><span class=\"br0\">)</span> r c <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">match</span> forest.<span class=\"br0\">[</span>r,c<span class=\"br0\">]</span> <span class=\"kw1\">with</span><br/>        | Fire <span class=\"sy0\">-&gt;</span> Empty<br/>        | Tree <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> rnd.<span class=\"me1\">NextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> ignition_factor <span class=\"kw1\">then</span> Fire<br/>                    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>count forest r c<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> Fire <span class=\"kw1\">else</span> Tree<br/>        | Empty <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">if</span> rnd.<span class=\"me1\">NextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> growth_factor <span class=\"kw1\">then</span> Tree <span class=\"kw1\">else</span> Empty<br/>\u00a0<br/>    <span class=\"co1\">// All the functions below this point are drawing the generated images to screen.</span><br/>    <span class=\"kw1\">let</span> make_image <span class=\"br0\">(</span>pixels:<span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> bmp <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Bitmap<span class=\"br0\">(</span>width, height<span class=\"br0\">)</span><br/>        <span class=\"kw1\">let</span> bits <span class=\"sy0\">=</span> bmp.<span class=\"me1\">LockBits</span><span class=\"br0\">(</span>Rectangle<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,width,height<span class=\"br0\">)</span>, ImageLockMode.<span class=\"me1\">WriteOnly</span>, PixelFormat.<span class=\"me1\">Format32bppArgb</span><span class=\"br0\">)</span><br/>        Marshal.<span class=\"me1\">Copy</span><span class=\"br0\">(</span>pixels, <span class=\"nu0\">0</span>, bits.<span class=\"me1\">Scan0</span>, bits.<span class=\"me1\">Height</span><span class=\"sy0\">*</span>bits.<span class=\"me1\">Width</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <span class=\"kw3\">ignore</span><br/>        bmp.<span class=\"me1\">UnlockBits</span><span class=\"br0\">(</span>bits<span class=\"br0\">)</span><br/>        bmp<br/>\u00a0<br/>    <span class=\"co1\">// This function is run asynchronously to avoid blocking the main GUI thread.</span><br/>    <span class=\"kw1\">let</span> run <span class=\"br0\">(</span><span class=\"kw8\">box</span>:PictureBox<span class=\"br0\">)</span> <span class=\"br0\">(</span>label:Label<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw4\">async</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">let</span> timer <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Stopwatch<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">let</span> forest <span class=\"sy0\">=</span> make_forest <span class=\"sy0\">|&gt;</span> <span class=\"kw4\">ref</span><br/>        <span class=\"kw1\">let</span> pixel <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">create</span> <span class=\"br0\">(</span>height<span class=\"sy0\">*</span>width<span class=\"br0\">)</span> <span class=\"br0\">(</span>Color.<span class=\"me1\">Black</span>.<span class=\"me1\">ToArgb</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> update gen <span class=\"sy0\">=</span><br/>            timer.<span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            forest <span class=\"sy0\">:=</span> burn <span class=\"sy0\">!</span>forest <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array2D</span></a>.<span class=\"me1\">init</span> height width<br/>            <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"nu0\">0</span>..<span class=\"me1\">height</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>                <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"nu0\">0</span>..<span class=\"me1\">width</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>                    pixel.<span class=\"br0\">[</span>x<span class=\"sy0\">+</span>y<span class=\"sy0\">*</span>width<span class=\"br0\">]</span> <span class=\"sy0\">&lt;-</span> <span class=\"kw1\">match</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>forest<span class=\"br0\">)</span>.<span class=\"br0\">[</span>y,x<span class=\"br0\">]</span> <span class=\"kw1\">with</span><br/>                                            | Empty <span class=\"sy0\">-&gt;</span> Color.<span class=\"me1\">Gray</span>.<span class=\"me1\">ToArgb</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                                            | Tree <span class=\"sy0\">-&gt;</span> Color.<span class=\"me1\">Green</span>.<span class=\"me1\">ToArgb</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                                            | Fire <span class=\"sy0\">-&gt;</span> Color.<span class=\"me1\">Red</span>.<span class=\"me1\">ToArgb</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">let</span> img <span class=\"sy0\">=</span> make_image pixel<br/>            <span class=\"kw8\">box</span>.<span class=\"me1\">Invoke</span><span class=\"br0\">(</span>MethodInvoker<span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw8\">box</span>.<span class=\"me1\">Image</span> <span class=\"sy0\">&lt;-</span> img<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <span class=\"kw3\">ignore</span><br/>            <span class=\"kw1\">let</span> msg <span class=\"sy0\">=</span> sprintf <span class=\"st0\">\"generation\u00a0%d @\u00a0%.1f fps\"</span> gen <span class=\"br0\">(</span><span class=\"nu0\">1000</span>.<span class=\"sy0\">/</span>timer.<span class=\"me1\">Elapsed</span>.<span class=\"me1\">TotalMilliseconds</span><span class=\"br0\">)</span><br/>            label.<span class=\"me1\">Invoke</span><span class=\"br0\">(</span>MethodInvoker<span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> label.<span class=\"me1\">Text</span> <span class=\"sy0\">&lt;-</span> msg <span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <span class=\"kw3\">ignore</span><br/>            timer.<span class=\"me1\">Reset</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            update <span class=\"br0\">(</span>gen <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        update <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> main args <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">let</span> form <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Form<span class=\"br0\">(</span>AutoSize<span class=\"sy0\">=</span><span class=\"kw1\">true</span>,<br/>                            Size<span class=\"sy0\">=</span><span class=\"kw1\">new</span> Size<span class=\"br0\">(</span><span class=\"nu0\">800</span>,<span class=\"nu0\">600</span><span class=\"br0\">)</span>,<br/>                            Text<span class=\"sy0\">=</span><span class=\"st0\">\"Forest fire cellular automata\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">let</span> <span class=\"kw8\">box</span> <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> PictureBox<span class=\"br0\">(</span>Dock<span class=\"sy0\">=</span>DockStyle.<span class=\"me1\">Fill</span>,Location<span class=\"sy0\">=</span><span class=\"kw1\">new</span> Point<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span>,SizeMode<span class=\"sy0\">=</span>PictureBoxSizeMode.<span class=\"me1\">StretchImage</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">let</span> label <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Label<span class=\"br0\">(</span>Dock<span class=\"sy0\">=</span>DockStyle.<span class=\"me1\">Bottom</span>, Text<span class=\"sy0\">=</span><span class=\"st0\">\"Ready\"</span><span class=\"br0\">)</span><br/>        form.<span class=\"me1\">FormClosed</span>.<span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> eventArgs <span class=\"sy0\">-&gt;</span> Async.<span class=\"me1\">CancelDefaultToken</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                                             Application.<span class=\"me1\">Exit</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        form.<span class=\"me1\">Controls</span>.<span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"kw8\">box</span><span class=\"br0\">)</span><br/>        form.<span class=\"me1\">Controls</span>.<span class=\"me1\">Add</span><span class=\"br0\">(</span>label<span class=\"br0\">)</span><br/>        run <span class=\"kw8\">box</span> label <span class=\"sy0\">|&gt;</span> Async.<span class=\"me1\">Start</span><br/>        form.<span class=\"me1\">Show</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        Application.<span class=\"me1\">Run</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co2\">#if INTERACTIVE</span><br/>ForestFire.<span class=\"me1\">main</span> <span class=\"br0\">[</span>|<span class=\"st0\">\"\"</span>|<span class=\"br0\">]</span><br/><span class=\"co2\">#else</span><br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>System.<span class=\"me1\">STAThread</span><span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main args <span class=\"sy0\">=</span> ForestFire.<span class=\"me1\">main</span> args<br/><span class=\"co2\">#endif</span></pre>"}, {"lang": "Forth", "loc": 64, "block": "<pre class=\"text highlighted_source\">30             CONSTANT WIDTH<br/>30             CONSTANT HEIGHT<br/>WIDTH HEIGHT * CONSTANT SIZE<br/>\u00a0<br/>1 VALUE SEED<br/>: (RAND) ( -- u)  \\ xorshift generator<br/>   SEED DUP 13 LSHIFT XOR<br/>        DUP 17 RSHIFT XOR<br/>        DUP  5 LSHIFT XOR<br/>        DUP TO SEED\u00a0;<br/>10000 CONSTANT RANGE<br/>100   CONSTANT GROW<br/>1     CONSTANT BURN<br/>: RAND ( -- u)  (RAND) RANGE MOD\u00a0;<br/>\u00a0<br/>\\ Create buffers for world state<br/>CREATE A  SIZE ALLOT  A SIZE ERASE<br/>CREATE B  SIZE ALLOT  B SIZE ERASE<br/>\u00a0<br/>0 CONSTANT NONE  1 CONSTANT TREE  2 CONSTANT FIRE<br/>: NEARBY-FIRE? ( addr u -- t|f)<br/>   2 -1 DO<br/>     2 -1 DO<br/>       J WIDTH * I + OVER +  \\ calculate an offset<br/>       DUP 0&gt; OVER SIZE &lt; AND IF<br/>         &gt;R OVER R&gt; + <a class=\"__cf_email__\" data-cfemail=\"83c0c3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>     \\ fetch state of the offset cell<br/>         FIRE = IF UNLOOP UNLOOP DROP DROP TRUE EXIT THEN <br/>       ELSE DROP THEN<br/>     LOOP<br/>   LOOP  DROP DROP FALSE\u00a0;<br/>: GROW?   RAND GROW &lt;=\u00a0;  \\ spontaneously sprout?<br/>: BURN?   RAND BURN &lt;=\u00a0;  \\ spontaneously combust?<br/>: STEP ( prev next --)  \\ Given state in PREV, put next in NEXT<br/>   &gt;R 0 BEGIN DUP SIZE &lt;<br/>   WHILE<br/>      2DUP + <a class=\"__cf_email__\" data-cfemail=\"571417\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> CASE<br/>      FIRE OF NONE ENDOF<br/>      TREE OF 2DUP NEARBY-FIRE? BURN? OR IF FIRE ELSE TREE THEN ENDOF<br/>      NONE OF GROW? IF TREE ELSE NONE THEN ENDOF<br/>      ENDCASE<br/>      ( i next-cell-state) OVER <a class=\"__cf_email__\" data-cfemail=\"3e6c7e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + C!        \\ commit to next<br/>   1+ REPEAT  R&gt; DROP DROP DROP\u00a0;<br/>\u00a0<br/>: (ESCAPE)   27 EMIT [CHAR] [ EMIT\u00a0;<br/>: ESCAPE\"   POSTPONE (ESCAPE) POSTPONE S\" POSTPONE TYPE\u00a0;  IMMEDIATE<br/>: CLEAR   ESCAPE\" H\"\u00a0;<br/>: RETURN   ESCAPE\" E\"\u00a0;<br/>: RESET   ESCAPE\" m\"\u00a0;<br/>: .FOREST ( addr --)  CLEAR<br/>   HEIGHT 0 DO<br/>     WIDTH 0 DO<br/>       DUP <a class=\"__cf_email__\" data-cfemail=\"034043\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> CASE<br/>       NONE OF SPACE ENDOF<br/>       TREE OF ESCAPE\" 32m\" [CHAR] T EMIT RESET ENDOF<br/>       FIRE OF ESCAPE\" 31m\" [CHAR] # EMIT RESET ENDOF<br/>       ENDCASE  1+<br/>     LOOP  RETURN<br/>   LOOP RESET DROP\u00a0;<br/>\u00a0<br/>: (GO) ( buffer buffer' -- buffer' buffer)<br/>   2DUP STEP    \\ step the simulation<br/>   DUP .FOREST  \\ print the current state<br/>   SWAP\u00a0;       \\ prepare for next iteration<br/>: GO   A B  BEGIN (GO) AGAIN\u00a0;</pre>"}, {"lang": "Fortran", "loc": 183, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> ForestFireModel<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">type</span> <span class=\"sy0\">::</span> <span class=\"me2\">forestfire</span><br/>     <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">field</span><br/>     <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">width</span>, height<br/>     <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">swapu</span><br/>     <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">prob_tree</span>, prob_f, prob_p<br/>  <span class=\"kw1\">end</span> <span class=\"kw3\">type</span> forestfire<br/>\u00a0<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"sy0\">&amp;</span><br/>       empty <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"sy0\">&amp;</span><br/>       tree <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"sy0\">&amp;</span><br/>       burning <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>  <span class=\"kw3\">private</span> <span class=\"sy0\">::</span> <span class=\"me2\">bcheck</span>, set, oget, burning_neighbor <span class=\"co1\">! cset, get</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"co1\">! create and initialize the field(s)</span><br/>  <span class=\"kw1\">function</span> forestfire_new<span class=\"br0\">(</span>w, h, pt, pf, pp<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>res<span class=\"br0\">)</span><br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>forestfire<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">res</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">w</span>, h<br/>    <span class=\"kw3\">real</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>, <span class=\"kw3\">optional</span> <span class=\"sy0\">::</span> <span class=\"me2\">pt</span>, pf, pp<br/>\u00a0<br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>    <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">r</span><br/>\u00a0<br/>    <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>res<span class=\"sy0\">%</span>field<span class=\"br0\">(</span><span class=\"nu0\">2</span>,w,h<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">! no error check</span><br/>    res<span class=\"sy0\">%</span>prob_tree <span class=\"sy0\">=</span> <span class=\"nu0\">0.5</span><br/>    res<span class=\"sy0\">%</span>prob_f <span class=\"sy0\">=</span> <span class=\"nu0\">0.00001</span><br/>    res<span class=\"sy0\">%</span>prob_p <span class=\"sy0\">=</span> <span class=\"nu0\">0.001</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw4\">present</span><span class=\"br0\">(</span>pt<span class=\"br0\">)</span> <span class=\"br0\">)</span> res<span class=\"sy0\">%</span>prob_tree <span class=\"sy0\">=</span> pt<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw4\">present</span><span class=\"br0\">(</span>pf<span class=\"br0\">)</span> <span class=\"br0\">)</span> res<span class=\"sy0\">%</span>prob_f <span class=\"sy0\">=</span> pf<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw4\">present</span><span class=\"br0\">(</span>pp<span class=\"br0\">)</span> <span class=\"br0\">)</span> res<span class=\"sy0\">%</span>prob_p <span class=\"sy0\">=</span> pp<br/>\u00a0<br/>    res<span class=\"sy0\">%</span>width <span class=\"sy0\">=</span> w<br/>    res<span class=\"sy0\">%</span>height <span class=\"sy0\">=</span> h<br/>    res<span class=\"sy0\">%</span>swapu <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    res<span class=\"sy0\">%</span>field <span class=\"sy0\">=</span> empty<br/>\u00a0<br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,w<br/>       <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,h<br/>          <span class=\"kw1\">call</span> <span class=\"kw4\">random_number</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span> r &lt;<span class=\"sy0\">=</span> res<span class=\"sy0\">%</span>prob_tree <span class=\"br0\">)</span> <span class=\"kw1\">call</span> cset<span class=\"br0\">(</span>res, i, j, tree<span class=\"br0\">)</span><br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> forestfire_new<br/>\u00a0<br/>  <span class=\"co1\">! destroy the field(s)</span><br/>  <span class=\"kw1\">subroutine</span> forestfire_destroy<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>forestfire<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">f</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw4\">allocated</span><span class=\"br0\">(</span>f<span class=\"sy0\">%</span>field<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span>f<span class=\"sy0\">%</span>field<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> forestfire_destroy<br/>\u00a0<br/>  <span class=\"co1\">! evolution</span><br/>  <span class=\"kw1\">subroutine</span> forestfire_evolve<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>forestfire<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">f</span><br/>\u00a0<br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>    <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">r</span><br/>\u00a0<br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, f<span class=\"sy0\">%</span>width<br/>       <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, f<span class=\"sy0\">%</span>height<br/>          <span class=\"kw1\">select</span> <span class=\"kw1\">case</span> <span class=\"br0\">(</span> get<span class=\"br0\">(</span>f, i, j<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>          <span class=\"kw1\">case</span> <span class=\"br0\">(</span>burning<span class=\"br0\">)</span><br/>             <span class=\"kw1\">call</span> set<span class=\"br0\">(</span>f, i, j, empty<span class=\"br0\">)</span><br/>          <span class=\"kw1\">case</span> <span class=\"br0\">(</span>empty<span class=\"br0\">)</span><br/>             <span class=\"kw1\">call</span> <span class=\"kw4\">random_number</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>             <span class=\"kw1\">if</span> <span class=\"br0\">(</span> r &gt; f<span class=\"sy0\">%</span>prob_p <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                <span class=\"kw1\">call</span> set<span class=\"br0\">(</span>f, i, j, empty<span class=\"br0\">)</span><br/>             <span class=\"kw1\">else</span><br/>                <span class=\"kw1\">call</span> set<span class=\"br0\">(</span>f, i, j, tree<span class=\"br0\">)</span><br/>             <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>          <span class=\"kw1\">case</span> <span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/>             <span class=\"kw1\">if</span> <span class=\"br0\">(</span> burning_neighbor<span class=\"br0\">(</span>f, i, j<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                <span class=\"kw1\">call</span> set<span class=\"br0\">(</span>f, i, j, burning<span class=\"br0\">)</span><br/>             <span class=\"kw1\">else</span><br/>                <span class=\"kw1\">call</span> <span class=\"kw4\">random_number</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span> r &gt; f<span class=\"sy0\">%</span>prob_f <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                   <span class=\"kw1\">call</span> set<span class=\"br0\">(</span>f, i, j, tree<span class=\"br0\">)</span><br/>                <span class=\"kw1\">else</span><br/>                   <span class=\"kw1\">call</span> set<span class=\"br0\">(</span>f, i, j, burning<span class=\"br0\">)</span><br/>                <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>             <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>          <span class=\"kw1\">end</span> <span class=\"kw1\">select</span><br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    f<span class=\"sy0\">%</span>swapu <span class=\"sy0\">=</span> <span class=\"kw4\">ieor</span><span class=\"br0\">(</span>f<span class=\"sy0\">%</span>swapu, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> forestfire_evolve<br/>\u00a0<br/>  <span class=\"co1\">! helper funcs/subs</span><br/>  <span class=\"kw1\">subroutine</span> set<span class=\"br0\">(</span>f, i, j, t<span class=\"br0\">)</span><br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>forestfire<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">f</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j, t<br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> bcheck<span class=\"br0\">(</span>f, i, j<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>       f<span class=\"sy0\">%</span>field<span class=\"br0\">(</span><span class=\"kw4\">ieor</span><span class=\"br0\">(</span>f<span class=\"sy0\">%</span>swapu,<span class=\"nu0\">1</span><span class=\"br0\">)</span>, i, j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> t<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> set<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> cset<span class=\"br0\">(</span>f, i, j, t<span class=\"br0\">)</span><br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>forestfire<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">f</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j, t<br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> bcheck<span class=\"br0\">(</span>f, i, j<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>       f<span class=\"sy0\">%</span>field<span class=\"br0\">(</span>f<span class=\"sy0\">%</span>swapu, i, j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> t<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> cset<br/>\u00a0<br/>  <span class=\"kw1\">function</span> bcheck<span class=\"br0\">(</span>f, i, j<span class=\"br0\">)</span><br/>    <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">bcheck</span><br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>forestfire<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">f</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>\u00a0<br/>    bcheck <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>i &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"br0\">(</span>i &lt;<span class=\"sy0\">=</span> f<span class=\"sy0\">%</span>width<span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"sy0\">&amp;</span><br/>         <span class=\"br0\">(</span>j &gt;<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"br0\">(</span>j &lt;<span class=\"sy0\">=</span> f<span class=\"sy0\">%</span>height<span class=\"br0\">)</span> <span class=\"br0\">)</span> bcheck <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> bcheck<br/>\u00a0<br/>\u00a0<br/>  <span class=\"kw1\">function</span> get<span class=\"br0\">(</span>f, i, j<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">r</span><br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>forestfire<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">f</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> bcheck<span class=\"br0\">(</span>f, i, j<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>       r <span class=\"sy0\">=</span> empty<br/>    <span class=\"kw1\">else</span><br/>       r <span class=\"sy0\">=</span> f<span class=\"sy0\">%</span>field<span class=\"br0\">(</span>f<span class=\"sy0\">%</span>swapu, i, j<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> get<br/>\u00a0<br/>  <span class=\"kw1\">function</span> oget<span class=\"br0\">(</span>f, i, j<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">r</span><br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>forestfire<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">f</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> bcheck<span class=\"br0\">(</span>f, i, j<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>       r <span class=\"sy0\">=</span> empty<br/>    <span class=\"kw1\">else</span><br/>       r <span class=\"sy0\">=</span> f<span class=\"sy0\">%</span>field<span class=\"br0\">(</span><span class=\"kw4\">ieor</span><span class=\"br0\">(</span>f<span class=\"sy0\">%</span>swapu,<span class=\"nu0\">1</span><span class=\"br0\">)</span>, i, j<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> oget<br/>\u00a0<br/>  <span class=\"kw1\">function</span> burning_neighbor<span class=\"br0\">(</span>f, i, j<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>    <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">r</span><br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>forestfire<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">f</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>\u00a0<br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">s</span><br/>\u00a0<br/>    s <span class=\"sy0\">=</span> f<span class=\"sy0\">%</span>field<span class=\"br0\">(</span>f<span class=\"sy0\">%</span>swapu, i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    s<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> empty<br/>    r <span class=\"sy0\">=</span> <span class=\"kw4\">any</span><span class=\"br0\">(</span>s <span class=\"sy0\">==</span> burning<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> burning_neighbor<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> forestfire_print<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">type</span><span class=\"br0\">(</span>forestfire<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">f</span><br/>\u00a0<br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>\u00a0<br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, f<span class=\"sy0\">%</span>height<br/>       <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, f<span class=\"sy0\">%</span>width<br/>          <span class=\"kw1\">select</span> <span class=\"kw1\">case</span><span class=\"br0\">(</span>get<span class=\"br0\">(</span>f, i, j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">case</span> <span class=\"br0\">(</span>empty<span class=\"br0\">)</span> <br/>             write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(A)'</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> <span class=\"st0\">'.'</span><br/>          <span class=\"kw1\">case</span> <span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/>             write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(A)'</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> <span class=\"st0\">'Y'</span><br/>          <span class=\"kw1\">case</span> <span class=\"br0\">(</span>burning<span class=\"br0\">)</span> <br/>             write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"st0\">'(A)'</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">'no'</span><span class=\"br0\">)</span> <span class=\"st0\">'*'</span><br/>          <span class=\"kw1\">end</span> <span class=\"kw1\">select</span><br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>       write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> forestfire_print<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> ForestFireModel</pre>"}, {"lang": "Go", "loc": 84, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span><br/>    rows <span class=\"sy2\">=</span> <span class=\"nu0\">20</span><br/>    cols <span class=\"sy2\">=</span> <span class=\"nu0\">30</span><br/>    p    <span class=\"sy2\">=</span> <span class=\"sy3\">.</span><span class=\"nu0\">01</span><br/>    f    <span class=\"sy2\">=</span> <span class=\"sy3\">.</span><span class=\"nu0\">001</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span> rx <span class=\"sy2\">=</span> rows <span class=\"sy3\">+</span> <span class=\"nu0\">2</span><br/><span class=\"kw1\">const</span> cx <span class=\"sy2\">=</span> cols <span class=\"sy3\">+</span> <span class=\"nu0\">2</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    odd <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> rx<span class=\"sy3\">*</span>cx<span class=\"sy1\">)</span><br/>    even <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">byte</span><span class=\"sy1\">,</span> rx<span class=\"sy3\">*</span>cx<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> r <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> r &lt;<span class=\"sy2\">=</span> rows<span class=\"sy1\">;</span> r<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> c &lt;<span class=\"sy2\">=</span> cols<span class=\"sy1\">;</span> c<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> rand<span class=\"sy3\">.</span>Intn<span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>                odd<span class=\"sy1\">[</span>r<span class=\"sy3\">*</span>cx<span class=\"sy3\">+</span>c<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'T'</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw3\">print</span><span class=\"sy1\">(</span>odd<span class=\"sy1\">)</span><br/>        step<span class=\"sy1\">(</span>even<span class=\"sy1\">,</span> odd<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span>Scanln<span class=\"sy1\">()</span><br/>\u00a0<br/>        <span class=\"kw3\">print</span><span class=\"sy1\">(</span>even<span class=\"sy1\">)</span><br/>        step<span class=\"sy1\">(</span>odd<span class=\"sy1\">,</span> even<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span>Scanln<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"kw3\">print</span><span class=\"sy1\">(</span>model <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>strings<span class=\"sy3\">.</span>Repeat<span class=\"sy1\">(</span><span class=\"st0\">\"__\"</span><span class=\"sy1\">,</span> cols<span class=\"sy1\">))</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>    <span class=\"kw1\">for</span> r <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> r &lt;<span class=\"sy2\">=</span> rows<span class=\"sy1\">;</span> r<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> c &lt;<span class=\"sy2\">=</span> cols<span class=\"sy1\">;</span> c<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> model<span class=\"sy1\">[</span>r<span class=\"sy3\">*</span>cx<span class=\"sy3\">+</span>c<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"  \"</span><span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"\u00a0%c\"</span><span class=\"sy1\">,</span> model<span class=\"sy1\">[</span>r<span class=\"sy3\">*</span>cx<span class=\"sy3\">+</span>c<span class=\"sy1\">])</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> step<span class=\"sy1\">(</span>dst<span class=\"sy1\">,</span> src <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> r <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> r &lt;<span class=\"sy2\">=</span> rows<span class=\"sy1\">;</span> r<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">for</span> c <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> c &lt;<span class=\"sy2\">=</span> cols<span class=\"sy1\">;</span> c<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            x <span class=\"sy2\">:=</span> r<span class=\"sy3\">*</span>cx <span class=\"sy3\">+</span> c<br/>            dst<span class=\"sy1\">[</span>x<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> src<span class=\"sy1\">[</span>x<span class=\"sy1\">]</span><br/>            <span class=\"kw1\">switch</span> dst<span class=\"sy1\">[</span>x<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'#'</span><span class=\"sy1\">:</span><br/>                <span class=\"co1\">// rule 1. A burning cell turns into an empty cell</span><br/>                dst<span class=\"sy1\">[</span>x<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'T'</span><span class=\"sy1\">:</span><br/>                <span class=\"co1\">// rule 2. A tree will burn if at least one neighbor is burning</span><br/>                <span class=\"kw1\">if</span> src<span class=\"sy1\">[</span>x<span class=\"sy3\">-</span>cx<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><span class=\"sy3\">==</span><span class=\"st0\">'#'</span>  <span class=\"sy3\">||</span> src<span class=\"sy1\">[</span>x<span class=\"sy3\">-</span>cx<span class=\"sy1\">]</span><span class=\"sy3\">==</span><span class=\"st0\">'#'</span> <span class=\"sy3\">||</span> src<span class=\"sy1\">[</span>x<span class=\"sy3\">-</span>cx<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><span class=\"sy3\">==</span><span class=\"st0\">'#'</span> <span class=\"sy3\">||</span><br/>                    src<span class=\"sy1\">[</span>x<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"st0\">'#'</span>  <span class=\"sy3\">||</span>                   src<span class=\"sy1\">[</span>x<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"st0\">'#'</span>  <span class=\"sy3\">||</span><br/>                    src<span class=\"sy1\">[</span>x<span class=\"sy3\">+</span>cx<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><span class=\"sy3\">==</span><span class=\"st0\">'#'</span> <span class=\"sy3\">||</span> src<span class=\"sy1\">[</span>x<span class=\"sy3\">+</span>cx<span class=\"sy1\">]</span><span class=\"sy3\">==</span><span class=\"st0\">'#'</span> <span class=\"sy3\">||</span> src<span class=\"sy1\">[</span>x<span class=\"sy3\">+</span>cx<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"st0\">'#'</span> <span class=\"sy1\">{</span><br/>                    dst<span class=\"sy1\">[</span>x<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'#'</span><br/>\u00a0<br/>                    <span class=\"co1\">// rule 3. A tree ignites with probability f</span><br/>                    <span class=\"co1\">// even if no neighbor is burning</span><br/>                <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> rand<span class=\"sy3\">.</span>Float64<span class=\"sy1\">()</span> &lt; f <span class=\"sy1\">{</span><br/>                    dst<span class=\"sy1\">[</span>x<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'#'</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>                <span class=\"co1\">// rule 4. An empty space fills with a tree with probability p</span><br/>                <span class=\"kw1\">if</span> rand<span class=\"sy3\">.</span>Float64<span class=\"sy1\">()</span> &lt; p <span class=\"sy1\">{</span><br/>                    dst<span class=\"sy1\">[</span>x<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"st0\">'T'</span><br/>                <span class=\"sy1\">}</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 59, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Random <span class=\"br0\">(</span>randomRIO<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>tails<span class=\"sy0\">,</span> transpose<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>liftM2<span class=\"sy0\">,</span> replicateM<span class=\"sy0\">,</span> unless<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Cell<br/>  <span class=\"sy0\">=</span> Empty<br/>  <span class=\"sy0\">|</span> Tree<br/>  <span class=\"sy0\">|</span> Fire<br/>  <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">instance</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a> Cell <span class=\"kw1\">where</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> Empty <span class=\"sy0\">=</span> <span class=\"st0\">\" \"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> Tree <span class=\"sy0\">=</span> <span class=\"st0\">\"T\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> Fire <span class=\"sy0\">=</span> <span class=\"st0\">\"$\"</span><br/>\u00a0<br/>randomCell <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> Cell<br/>randomCell <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span><span class=\"br0\">[</span>Empty<span class=\"sy0\">,</span> Tree<span class=\"br0\">]</span> <span class=\"sy0\">!!</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>randomRIO <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>randomChance <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/>randomChance <span class=\"sy0\">=</span> randomRIO <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Double\"><span class=\"kw4\">Double</span></a><br/>\u00a0<br/>rim <span class=\"sy0\">::</span> a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>rim b <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span>fb b<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span>fb <span class=\"sy0\">=&lt;&lt;</span> rb<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    fb <span class=\"sy0\">=</span> liftM2 <span class=\"br0\">(</span><span class=\"sy0\">.</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>:<span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <span class=\"br0\">(</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a><span class=\"br0\">)</span><br/>    rb <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unzip\"><span class=\"kw3\">unzip</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:repeat\"><span class=\"kw3\">repeat</span></a> b<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a><br/>\u00a0<br/>take3x3 <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>take3x3 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <span class=\"br0\">(</span>transpose <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> take3<span class=\"br0\">)</span> <span class=\"sy0\">.</span> take3<br/>  <span class=\"kw1\">where</span><br/>    take3 <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:init\"><span class=\"kw3\">init</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:init\"><span class=\"kw3\">init</span></a> <span class=\"sy0\">.</span> takeWhile <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> tails<br/>\u00a0<br/>list2Mat <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>list2Mat n <span class=\"sy0\">=</span> takeWhile <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> n<span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> n<span class=\"br0\">)</span><br/>\u00a0<br/>evolveForest <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>evolveForest m n k <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> m <span class=\"sy0\">*</span> n<br/>  fs <span class=\"sy0\">&lt;-</span> replicateM s randomCell<br/>  <span class=\"kw1\">let</span> nextState xs <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>        ts <span class=\"sy0\">&lt;-</span> replicateM s randomChance<br/>        vs <span class=\"sy0\">&lt;-</span> replicateM s randomChance<br/>        <span class=\"kw1\">let</span> rv <span class=\"br0\">[</span>r1<span class=\"sy0\">,</span> <span class=\"br0\">[</span>l<span class=\"sy0\">,</span> c<span class=\"sy0\">,</span> r<span class=\"br0\">]</span><span class=\"sy0\">,</span> r3<span class=\"br0\">]</span> newTree fire<br/>              <span class=\"sy0\">|</span> c <span class=\"sy0\">==</span> Fire <span class=\"sy0\">=</span> Empty<br/>              <span class=\"sy0\">|</span> c <span class=\"sy0\">==</span> Tree <span class=\"sy0\">&amp;&amp;</span> Fire `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concat\"><span class=\"kw3\">concat</span></a> <span class=\"br0\">[</span>r1<span class=\"sy0\">,</span> <span class=\"br0\">[</span>l<span class=\"sy0\">,</span> r<span class=\"br0\">]</span><span class=\"sy0\">,</span> r3<span class=\"br0\">]</span> <span class=\"sy0\">=</span> Fire<br/>              <span class=\"sy0\">|</span> c <span class=\"sy0\">==</span> Tree <span class=\"sy0\">&amp;&amp;</span> <span class=\"nu0\">0.01</span> <span class=\"sy0\">&gt;=</span> fire <span class=\"sy0\">=</span> Fire<br/>              <span class=\"sy0\">|</span> c <span class=\"sy0\">==</span> Empty <span class=\"sy0\">&amp;&amp;</span> <span class=\"nu0\">0.1</span> <span class=\"sy0\">&gt;=</span> newTree <span class=\"sy0\">=</span> Tree<br/>              <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> c<br/>        <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith3\"><span class=\"kw3\">zipWith3</span></a> rv xs ts vs<br/>      evolve i xs <span class=\"sy0\">=</span><br/>        unless <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> k<span class=\"br0\">)</span> <span class=\"sy0\">$</span><br/>        <span class=\"kw1\">do</span> <span class=\"kw1\">let</span> nfs <span class=\"sy0\">=</span> nextState <span class=\"sy0\">$</span> take3x3 <span class=\"sy0\">$</span> rim Empty <span class=\"sy0\">$</span> list2Mat n xs<br/>           <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>&gt;&gt;&gt;&gt;&gt;&gt; \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> i <span class=\"sy0\">++</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><br/>           <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a><span class=\"br0\">)</span> <span class=\"sy0\">$</span> list2Mat n xs<br/>           nfs <span class=\"sy0\">&gt;&gt;=</span> evolve <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  evolve <span class=\"nu0\">1</span> fs<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> evolveForest <span class=\"nu0\">6</span> <span class=\"nu0\">50</span> <span class=\"nu0\">3</span></pre>"}, {"lang": "Icon and Unicon", "loc": 73, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> graphics<span class=\"sy1\">,</span>printf<br/>\u00a0<br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> EDGE  <span class=\"nu0\">0</span><br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> EMPTY <span class=\"nu0\">1</span><br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> TREE  <span class=\"nu0\">2</span><br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> FIRE  <span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"kw2\">global</span> Colours<span class=\"sy1\">,</span>Width<span class=\"sy1\">,</span>Height<span class=\"sy1\">,</span>ProbTree<span class=\"sy1\">,</span>ProbFire<span class=\"sy1\">,</span>ProbInitialTree<span class=\"sy1\">,</span>Forest<span class=\"sy1\">,</span>oldForest<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>             <span class=\"co1\"># forest fire</span><br/>\u00a0<br/>    Height <span class=\"sy1\">:=</span> <span class=\"nu0\">400</span>            <span class=\"co1\"># Window height </span><br/>    Width <span class=\"sy1\">:=</span> <span class=\"nu0\">400</span>             <span class=\"co1\"># Window width</span><br/>    ProbInitialTree <span class=\"sy1\">:=</span> <span class=\"sy1\">.</span>10   <span class=\"co1\"># intial probability of trees</span><br/>    ProbTree <span class=\"sy1\">:=</span> <span class=\"sy1\">.</span>01          <span class=\"co1\"># ongoing probability of trees</span><br/>    ProbFire <span class=\"sy1\">:=</span> ProbTree<span class=\"sy1\">/</span><span class=\"nu0\">50</span><span class=\"sy1\">.</span> <span class=\"co1\"># probability of fire</span><br/>    Rounds <span class=\"sy1\">:=</span> <span class=\"nu0\">500</span>            <span class=\"co1\"># rounds to evolve</span><br/>\u00a0<br/>    setup_forest<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> Rounds <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>       show_forest<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>       evolve_forest<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">}</span><br/>    printf<span class=\"br0\">(</span><span class=\"st0\">\"Forest fire\u00a0%d x\u00a0%d rounds=%d p.initial=%r p/f=%r/%r fps=%r<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>           Width<span class=\"sy1\">,</span>Height<span class=\"sy1\">,</span>Rounds<span class=\"sy1\">,</span>ProbInitialTree<span class=\"sy1\">,</span>ProbTree<span class=\"sy1\">,</span>ProbFire<span class=\"sy1\">,</span><br/>           Rounds<span class=\"sy1\">/</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">time</span><span class=\"sy1\">/</span><span class=\"nu0\">1000</span><span class=\"sy1\">.</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\"># stats</span><br/>    WDone<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span>   <br/>\u00a0<br/><span class=\"kw1\">procedure</span> setup_forest<span class=\"br0\">(</span><span class=\"br0\">)</span>     <span class=\"co1\">#: setup the forest</span><br/>\u00a0<br/>    Colours <span class=\"sy1\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span>       <span class=\"co1\"># define colours</span><br/>    Colours<span class=\"br0\">[</span>EDGE<span class=\"br0\">]</span>  <span class=\"sy1\">:=</span> <span class=\"st0\">\"black\"</span><br/>    Colours<span class=\"br0\">[</span>EMPTY<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"st0\">\"grey\"</span><br/>    Colours<span class=\"br0\">[</span>TREE<span class=\"br0\">]</span>  <span class=\"sy1\">:=</span> <span class=\"st0\">\"green\"</span><br/>    Colours<span class=\"br0\">[</span>FIRE<span class=\"br0\">]</span>  <span class=\"sy1\">:=</span> <span class=\"st0\">\"red\"</span><br/>\u00a0<br/>    WOpen<span class=\"br0\">(</span><span class=\"st0\">\"label=Forest Fire\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"bg=black\"</span><span class=\"sy1\">,</span><br/>          <span class=\"st0\">\"size=\"</span> <span class=\"sy1\">||</span> Width<span class=\"sy1\">+</span><span class=\"nu0\">2</span> <span class=\"sy1\">||</span> <span class=\"st0\">\",\"</span> <span class=\"sy1\">||</span> Height<span class=\"sy1\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"co1\"># add for border</span><br/>             <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"Unable to open Window\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"sy1\">!</span><span class=\"br0\">(</span>Forest <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>Height<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span>Width<span class=\"sy1\">,</span>EMPTY<span class=\"br0\">)</span>  <span class=\"co1\"># default</span><br/>    <span class=\"kw1\">every</span> <span class=\"br0\">(</span> Forest<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> Width<span class=\"br0\">]</span>  <span class=\"sy1\">|</span> Forest<span class=\"br0\">[</span>Height<span class=\"sy1\">,</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> Width<span class=\"br0\">]</span> <span class=\"sy1\">|</span> <br/>            Forest<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> Height<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">|</span> Forest<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> Height<span class=\"sy1\">,</span>Width<span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">:=</span> EDGE<br/>    <span class=\"kw1\">every</span> r <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> Height<span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">&amp;</span> c <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> Width<span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <br/>       <span class=\"kw1\">if</span> probability<span class=\"br0\">(</span>ProbInitialTree<span class=\"br0\">)</span> <span class=\"kw1\">then</span> Forest<span class=\"br0\">[</span>r<span class=\"sy1\">,</span>c<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> TREE<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> show_forest<span class=\"br0\">(</span><span class=\"br0\">)</span>      <span class=\"co1\">#: show Forest - drawn changes only</span><br/>   <span class=\"kw1\">every</span> r <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>Forest<span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">&amp;</span> c <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>Forest<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> <span class=\"sy1\">/</span>oldForest <span class=\"sy1\">|</span> oldForest<span class=\"br0\">[</span>r<span class=\"sy1\">,</span>c<span class=\"br0\">]</span> <span class=\"sy1\">~=</span> Forest<span class=\"br0\">[</span>r<span class=\"sy1\">,</span>c<span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>         <span class=\"kw5\">WAttrib</span><span class=\"br0\">(</span><span class=\"st0\">\"fg=\"</span> <span class=\"sy1\">||</span> Colours<span class=\"br0\">[</span>Forest<span class=\"br0\">[</span>r<span class=\"sy1\">,</span>c<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <br/>         <span class=\"kw5\">DrawPoint</span><span class=\"br0\">(</span>r<span class=\"sy1\">,</span>c<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> evolve_forest<span class=\"br0\">(</span><span class=\"br0\">)</span>    <span class=\"co1\">#: evolve forest</span><br/>    old <span class=\"sy1\">:=</span> oldForest <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span><span class=\"sy1\">*</span>Forest<span class=\"br0\">)</span>     <span class=\"co1\"># freeze copy </span><br/>    <span class=\"kw1\">every</span> old<span class=\"br0\">[</span>i <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>Forest<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">copy</span><span class=\"br0\">(</span>Forest<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>  <span class=\"co1\"># deep copy</span><br/>\u00a0<br/>    <span class=\"kw1\">every</span> r <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>Forest<span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">&amp;</span> c <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>Forest<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <br/>       Forest<span class=\"br0\">[</span>r<span class=\"sy1\">,</span>c<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw1\">case</span> old<span class=\"br0\">[</span>r<span class=\"sy1\">,</span>c<span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"br0\">{</span>   <span class=\"co1\"># apply rules </span><br/>          FIRE <span class=\"sy1\">:</span> EMPTY<br/>          TREE <span class=\"sy1\">:</span> <span class=\"kw1\">if</span> probability<span class=\"br0\">(</span>ProbFire<span class=\"br0\">)</span> <span class=\"sy1\">|</span> <br/>                  <span class=\"br0\">(</span> old<span class=\"br0\">[</span>r<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> c<span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> c<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">|</span> <br/>                    old<span class=\"br0\">[</span>r<span class=\"sy1\">,</span>c<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">|</span>c<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">|</span> <br/>                    old<span class=\"br0\">[</span>r<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>c<span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> c<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">=</span> FIRE <span class=\"kw1\">then</span> FIRE<br/>          EMPTY<span class=\"sy1\">:</span> <span class=\"kw1\">if</span> probability<span class=\"br0\">(</span>ProbTree<span class=\"br0\">)</span> <span class=\"kw1\">then</span> TREE<br/>          <span class=\"br0\">}</span>      <br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> probability<span class=\"br0\">(</span>P<span class=\"br0\">)</span>     <span class=\"co1\">#: succeed with probability P</span><br/><span class=\"kw1\">if</span> <span class=\"sy1\">?</span><span class=\"nu0\">0</span> <span class=\"sy1\">&lt;=</span> P <span class=\"kw1\">then</span> <span class=\"kw1\">return</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 21, "block": "<pre class=\"j highlighted_source\"><span class=\"co1\">NB. states: 0 empty, 1 tree, _1 fire</span><br/>dims =:<span class=\"nu0\">10</span> <span class=\"nu0\">10</span><br/>\u00a0<br/>  tessellate=: <span class=\"nu0\">0</span>,<span class=\"nu0\">0</span>,~<span class=\"nu0\">0</span>,.<span class=\"nu0\">0</span>,.~ <span class=\"nu0\">3</span> <span class=\"nu0\">3</span> &gt;./@,;.<span class=\"nu0\">_3</span> ]<br/>  mask=: tessellate dims$<span class=\"nu0\">1</span><br/>  chance=: <span class=\"nu0\">1</span>\u00a0:<span class=\"st_h\">'(&gt;\u00a0? bind (dims$0)) bind (mask*m)'</span><br/>\u00a0<br/>start=: <span class=\"nu0\">0.5</span> chance<br/>grow =: <span class=\"nu0\">0.01</span> chance<br/>fire =: <span class=\"nu0\">0.001</span> chance<br/>\u00a0<br/>  spread=: [: tessellate <span class=\"nu0\">0</span>&amp;&gt;<br/>\u00a0<br/>  step=: grow [`]@.<span class=\"sy0\">(</span>|@]<span class=\"sy0\">)</span>\"<span class=\"nu0\">0</span> &gt;.&amp;<span class=\"nu0\">0</span> * <span class=\"nu0\">_1</span> ^ fire +. spread<br/>\u00a0<br/>  run=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>    forest=. start<span class=\"st_h\">''</span><br/>    for.i.<span class=\"kw2\">y</span> <span class=\"kw1\">do.</span><br/>      smoutput <span class=\"st_h\">' #o'</span> {~ forest=. step forest<br/>    <span class=\"kw1\">end.</span><br/>  <span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 137, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.LinkedList</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Fire <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">final</span> <span class=\"kw3\">char</span> BURNING = <span class=\"st0\">'w'</span><span class=\"sy0\">;</span> <span class=\"co1\">//w looks like fire, right?</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">final</span> <span class=\"kw3\">char</span> TREE = <span class=\"st0\">'T'</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">final</span> <span class=\"kw3\">char</span> EMPTY = <span class=\"st0\">'.'</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">final</span> <span class=\"kw3\">double</span> F = <span class=\"nu0\">0.2</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">final</span> <span class=\"kw3\">double</span> P = <span class=\"nu0\">0.4</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <span class=\"kw2\">final</span> <span class=\"kw3\">double</span> TREE_PROB = <span class=\"nu0\">0.5</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> process<span class=\"br0\">(</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> land<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> newLand = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/LinkedList.html\"><span class=\"kw46\">LinkedList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> land.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> rowAbove, thisRow = land.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>, rowBelow<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>i == <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"co1\">//first row</span><br/>\t\t\t\trowAbove = <span class=\"kw4\">null</span><span class=\"sy0\">;</span><br/>\t\t\t\trowBelow = land.<span class=\"me1\">get</span><span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>i == land.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"co1\">//last row</span><br/>\t\t\t\trowBelow = <span class=\"kw4\">null</span><span class=\"sy0\">;</span><br/>\t\t\t\trowAbove = land.<span class=\"me1\">get</span><span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span><span class=\"co1\">//middle</span><br/>\t\t\t\trowBelow = land.<span class=\"me1\">get</span><span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\trowAbove = land.<span class=\"me1\">get</span><span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tnewLand.<span class=\"me1\">add</span><span class=\"br0\">(</span>processRows<span class=\"br0\">(</span>rowAbove, thisRow, rowBelow<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw2\">return</span> newLand<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">private</span> <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> processRows<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> rowAbove, <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> thisRow,<br/>\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> rowBelow<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> newRow = <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> thisRow.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span>thisRow.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">case</span> BURNING:<br/>\t\t\t\tnewRow+= EMPTY<span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">case</span> EMPTY:<br/>\t\t\t\tnewRow+= <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> P <span class=\"sy0\">?</span> TREE\u00a0: EMPTY<span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">case</span> TREE:<br/>\t\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> neighbors = <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>i == <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"co1\">//first char</span><br/>\t\t\t\t\tneighbors+= rowAbove == <span class=\"kw4\">null</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span>\u00a0: rowAbove.<span class=\"me1\">substring</span><span class=\"br0\">(</span>i, i + <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tneighbors+= thisRow.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tneighbors+= rowBelow == <span class=\"kw4\">null</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span>\u00a0: rowBelow.<span class=\"me1\">substring</span><span class=\"br0\">(</span>i, i + <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>neighbors.<span class=\"me1\">contains</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Character.html\"><span class=\"kw21\">Character</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>BURNING<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\t\tnewRow+= BURNING<span class=\"sy0\">;</span><br/>\t\t\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"br0\">}</span><span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>i == thisRow.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"co1\">//last char</span><br/>\t\t\t\t\tneighbors+= rowAbove == <span class=\"kw4\">null</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span>\u00a0: rowAbove.<span class=\"me1\">substring</span><span class=\"br0\">(</span>i - <span class=\"nu0\">1</span>, i + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tneighbors+= thisRow.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tneighbors+= rowBelow == <span class=\"kw4\">null</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span>\u00a0: rowBelow.<span class=\"me1\">substring</span><span class=\"br0\">(</span>i - <span class=\"nu0\">1</span>, i + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>neighbors.<span class=\"me1\">contains</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Character.html\"><span class=\"kw21\">Character</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>BURNING<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\t\tnewRow+= BURNING<span class=\"sy0\">;</span><br/>\t\t\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"br0\">}</span><span class=\"kw1\">else</span><span class=\"br0\">{</span><span class=\"co1\">//middle</span><br/>\t\t\t\t\tneighbors+= rowAbove == <span class=\"kw4\">null</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span>\u00a0: rowAbove.<span class=\"me1\">substring</span><span class=\"br0\">(</span>i - <span class=\"nu0\">1</span>, i + <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tneighbors+= thisRow.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tneighbors+= thisRow.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>i - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\tneighbors+= rowBelow == <span class=\"kw4\">null</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span>\u00a0: rowBelow.<span class=\"me1\">substring</span><span class=\"br0\">(</span>i - <span class=\"nu0\">1</span>, i + <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>neighbors.<span class=\"me1\">contains</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Character.html\"><span class=\"kw21\">Character</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>BURNING<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\t\tnewRow+= BURNING<span class=\"sy0\">;</span><br/>\t\t\t\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t\tnewRow+= <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> F <span class=\"sy0\">?</span> BURNING\u00a0: TREE<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw2\">return</span> newRow<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> populate<span class=\"br0\">(</span><span class=\"kw3\">int</span> width, <span class=\"kw3\">int</span> height<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> land = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/LinkedList.html\"><span class=\"kw46\">LinkedList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"sy0\">;</span>height <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> height--<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"co1\">//height is just a copy anyway</span><br/>\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/StringBuilder.html\"><span class=\"kw21\">StringBuilder</span></a> line = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/StringBuilder.html\"><span class=\"kw21\">StringBuilder</span></a><span class=\"br0\">(</span>width<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = width<span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i--<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\tline.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Math.html\"><span class=\"kw21\">Math</span></a>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> TREE_PROB<span class=\"br0\">)</span> <span class=\"sy0\">?</span> TREE\u00a0: EMPTY<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tland.<span class=\"me1\">add</span><span class=\"br0\">(</span>line.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw2\">return</span> land<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">//process the land n times</span><br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> processN<span class=\"br0\">(</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> land, <span class=\"kw3\">int</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tland = process<span class=\"br0\">(</span>land<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">//process the land n times and print each step along the way</span><br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> processNPrint<span class=\"br0\">(</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> land, <span class=\"kw3\">int</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tland = process<span class=\"br0\">(</span>land<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tprint<span class=\"br0\">(</span>land<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"co1\">//print the land</span><br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> print<span class=\"br0\">(</span><a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> land<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> row: land<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"sy0\">&gt;</span> land = <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Arrays.html\"><span class=\"kw46\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span><span class=\"st0\">\".TTT.T.T.TTTT.T\"</span>,<br/>\t\t\t\t<span class=\"st0\">\"T.T.T.TT..T.T..\"</span>,<br/>\t\t\t\t<span class=\"st0\">\"TT.TTTT...T.TT.\"</span>,<br/>\t\t\t\t<span class=\"st0\">\"TTT..TTTTT.T..T\"</span>,<br/>\t\t\t\t<span class=\"st0\">\".T.TTT....TT.TT\"</span>,<br/>\t\t\t\t<span class=\"st0\">\"...T..TTT.TT.T.\"</span>,<br/>\t\t\t\t<span class=\"st0\">\".TT.TT...TT..TT\"</span>,<br/>\t\t\t\t<span class=\"st0\">\".TT.T.T..T.T.T.\"</span>,<br/>\t\t\t\t<span class=\"st0\">\"..TTT.TT.T..T..\"</span>,<br/>\t\t\t\t<span class=\"st0\">\".T....T.....TTT\"</span>,<br/>\t\t\t\t<span class=\"st0\">\"T..TTT..T..T...\"</span>,<br/>\t\t\t\t<span class=\"st0\">\"TTT....TTTTTT.T\"</span>,<br/>\t\t\t\t<span class=\"st0\">\"......TwTTT...T\"</span>,<br/>\t\t\t\t<span class=\"st0\">\"..T....TTTTTTTT\"</span>,<br/>\t\t\t\t<span class=\"st0\">\".T.T.T....TT...\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tprint<span class=\"br0\">(</span>land<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tprocessNPrint<span class=\"br0\">(</span>land, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Random land test:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tland = populate<span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tprint<span class=\"br0\">(</span>land<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tprocessNPrint<span class=\"br0\">(</span>land, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JAMES II/Rule-based Cellular Automata", "loc": 17, "block": "<pre class=\"text highlighted_source\">@caversion 1;<br/>\u00a0<br/>dimensions 2;<br/>\u00a0<br/>state EMPTY, TREE, BURNING;<br/>\u00a0<br/>// an empty cell grows a tree with a chance of p = 5\u00a0%<br/>rule{EMPTY} [0.05]\u00a0: -&gt; TREE;<br/>\u00a0<br/>// a burning cell turns to a burned cell<br/>rule{BURNING}: -&gt; EMPTY;<br/>\u00a0<br/>// a tree starts burning if there is at least one neighbor burning<br/>rule{TREE}\u00a0: BURNING{1,} -&gt; BURNING;<br/>\u00a0<br/>// a tree is hit by lightning with a change of f = 0.006\u00a0%<br/>rule{TREE} [0.00006]\u00a0: -&gt; BURNING;</pre>"}, {"lang": "JavaScript Node", "loc": 69, "block": "<pre class=\"javascript highlighted_source\"><span class=\"st0\">\"use strict\"</span><br/>\u00a0<br/><span class=\"kw1\">const</span> _ <span class=\"sy0\">=</span> require<span class=\"br0\">(</span><span class=\"st0\">'lodash'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span> WIDTH_ARGUMENT_POSITION  <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">const</span> HEIGHT_ARGUMENT_POSITION <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">const</span> TREE_PROBABILITY         <span class=\"sy0\">=</span> <span class=\"nu0\">0.5</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">const</span> NEW_TREE_PROBABILITY     <span class=\"sy0\">=</span> <span class=\"nu0\">0.01</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">const</span> BURN_PROBABILITY         <span class=\"sy0\">=</span> <span class=\"nu0\">0.0001</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">const</span> CONSOLE_RED              <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es0\">\\x</span>1b[31m'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">const</span> CONSOLE_GREEN            <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es0\">\\x</span>1b[32m'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">const</span> CONSOLE_COLOR_CLOSE      <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es0\">\\x</span>1b[91m'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">const</span> CONSOLE_CLEAR            <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es0\">\\u</span>001B[2J<span class=\"es0\">\\u</span>001B[0;0f'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">const</span> NEIGHBOURS               <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">const</span> PRINT_DECODE             <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">' '</span><span class=\"sy0\">:</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'T'</span><span class=\"sy0\">:</span> `$<span class=\"br0\">{</span>CONSOLE_GREEN<span class=\"br0\">}</span>T$<span class=\"br0\">{</span>CONSOLE_COLOR_CLOSE<span class=\"br0\">}</span>`<span class=\"sy0\">,</span><br/>    <span class=\"st0\">'B'</span><span class=\"sy0\">:</span> `$<span class=\"br0\">{</span>CONSOLE_RED<span class=\"br0\">}</span>T$<span class=\"br0\">{</span>CONSOLE_COLOR_CLOSE<span class=\"br0\">}</span>`<span class=\"sy0\">,</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">const</span> CONDITIONS <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'T'</span><span class=\"sy0\">:</span> <span class=\"br0\">(</span>forest<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> BURN_PROBABILITY <span class=\"sy0\">||</span> burningNeighbour<span class=\"br0\">(</span>forest<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">'B'</span> <span class=\"sy0\">:</span> <span class=\"st0\">'T'</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">' '</span><span class=\"sy0\">:</span>  <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> NEW_TREE_PROBABILITY <span class=\"sy0\">?</span> <span class=\"st0\">'T'</span> <span class=\"sy0\">:</span> <span class=\"st0\">' '</span><span class=\"sy0\">,</span><br/>    <span class=\"st0\">'B'</span><span class=\"sy0\">:</span>  <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">' '</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span> WIDTH  <span class=\"sy0\">=</span> process.<span class=\"me1\">argv</span><span class=\"br0\">[</span>WIDTH_ARGUMENT_POSITION<span class=\"br0\">]</span>  <span class=\"sy0\">||</span> <span class=\"nu0\">20</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">const</span> HEIGHT <span class=\"sy0\">=</span> process.<span class=\"me1\">argv</span><span class=\"br0\">[</span>HEIGHT_ARGUMENT_POSITION<span class=\"br0\">]</span> <span class=\"sy0\">||</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span> update <span class=\"sy0\">=</span> forest <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> _.<span class=\"me1\">map</span><span class=\"br0\">(</span>forest<span class=\"sy0\">,</span> <span class=\"br0\">(</span>c<span class=\"sy0\">,</span> ci<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> _.<span class=\"me1\">map</span><span class=\"br0\">(</span>c<span class=\"sy0\">,</span> <span class=\"br0\">(</span>r<span class=\"sy0\">,</span> ri<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> CONDITIONS<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">(</span>forest<span class=\"sy0\">,</span> ci<span class=\"sy0\">,</span> ri<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">const</span> printForest <span class=\"sy0\">=</span> forest <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    process.<span class=\"me1\">stdout</span>.<span class=\"me1\">write</span><span class=\"br0\">(</span>CONSOLE_CLEAR<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    _.<span class=\"me1\">each</span><span class=\"br0\">(</span>forest<span class=\"sy0\">,</span> c <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        _.<span class=\"me1\">each</span><span class=\"br0\">(</span>c<span class=\"sy0\">,</span> r <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            process.<span class=\"me1\">stdout</span>.<span class=\"me1\">write</span><span class=\"br0\">(</span>PRINT_DECODE<span class=\"br0\">[</span>r<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        process.<span class=\"me1\">stdout</span>.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">const</span> burningNeighbour <span class=\"sy0\">=</span> <span class=\"br0\">(</span>forest<span class=\"sy0\">,</span> y<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> _<span class=\"br0\">(</span>NEIGHBOURS<span class=\"br0\">)</span><br/>           .<span class=\"me1\">map</span><span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> _.<span class=\"me1\">isUndefined</span><span class=\"br0\">(</span>forest<span class=\"br0\">[</span>y <span class=\"sy0\">+</span> n<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"kw2\">null</span> <span class=\"sy0\">:</span> forest<span class=\"br0\">[</span>y <span class=\"sy0\">+</span> n<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>x <span class=\"sy0\">+</span> n<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>           .<span class=\"me1\">any</span><span class=\"br0\">(</span>_.<span class=\"me1\">partial</span><span class=\"br0\">(</span>_.<span class=\"me1\">isEqual</span><span class=\"sy0\">,</span> <span class=\"st0\">'B'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>let forest <span class=\"sy0\">=</span> _.<span class=\"me1\">times</span><span class=\"br0\">(</span>HEIGHT<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> _.<span class=\"me1\">times</span><span class=\"br0\">(</span>WIDTH<span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> TREE_PROBABILITY <span class=\"sy0\">?</span> <span class=\"st0\">'T'</span> <span class=\"sy0\">:</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>setInterval<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    forest <span class=\"sy0\">=</span> update<span class=\"br0\">(</span>forest<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    printForest<span class=\"br0\">(</span>forest<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "JavaScript", "loc": 64, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> forest <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    X<span class=\"sy0\">:</span> <span class=\"nu0\">50</span><span class=\"sy0\">,</span><br/>    Y<span class=\"sy0\">:</span> <span class=\"nu0\">50</span><span class=\"sy0\">,</span><br/>    propTree<span class=\"sy0\">:</span> <span class=\"nu0\">0.5</span><span class=\"sy0\">,</span><br/>    propTree2<span class=\"sy0\">:</span> <span class=\"nu0\">0.01</span><span class=\"sy0\">,</span><br/>    propBurn<span class=\"sy0\">:</span> <span class=\"nu0\">0.0001</span><span class=\"sy0\">,</span><br/>    t<span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>    c<span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"st0\">'rgb(255,255,255)'</span><span class=\"sy0\">,</span> <span class=\"st0\">'rgb(0,255,0)'</span><span class=\"sy0\">,</span> <span class=\"st0\">'rgb(255,0,0)'</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> forest.<span class=\"me1\">Y</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    forest.<span class=\"me1\">t</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> forest.<span class=\"me1\">Y</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        forest.<span class=\"me1\">t</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> forest.<span class=\"me1\">propTree</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> afterLoad<span class=\"br0\">(</span>forest<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> canvas <span class=\"sy0\">=</span> document.<span class=\"me1\">getElementById</span><span class=\"br0\">(</span><span class=\"st0\">'canvas'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> c <span class=\"sy0\">=</span> canvas.<span class=\"me1\">getContext</span><span class=\"br0\">(</span><span class=\"st0\">'2d'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> forest.<span class=\"me1\">X</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> forest.<span class=\"me1\">Y</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            c.<span class=\"me1\">fillStyle</span> <span class=\"sy0\">=</span> forest.<span class=\"me1\">c</span><span class=\"br0\">[</span>forest.<span class=\"me1\">t</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            c.<span class=\"me1\">fillRect</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">*</span>j<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">*</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">*</span>j<span class=\"sy0\">+</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">*</span>i<span class=\"sy0\">+</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">function</span> doStep<span class=\"br0\">(</span>forest<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> to <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> forest.<span class=\"me1\">Y</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        to<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> forest.<span class=\"me1\">t</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">//indices outside the array are undefined; which converts to 0=empty on forced typecast</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> forest.<span class=\"me1\">Y</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> forest.<span class=\"me1\">Y</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span> to<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                forest.<span class=\"me1\">t</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> forest.<span class=\"me1\">propTree2</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">==</span> to<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span><br/>                    <span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">==</span> to<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>                    <span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy0\">&lt;</span>forest.<span class=\"me1\">Y</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">==</span> to<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>                    <span class=\"br0\">(</span><span class=\"br0\">(</span>j<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">==</span> to<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span><br/>                    <span class=\"br0\">(</span><span class=\"br0\">(</span>j<span class=\"sy0\">&lt;</span>forest.<span class=\"me1\">X</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">==</span> to<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    forest.<span class=\"me1\">t</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    forest.<span class=\"me1\">t</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> forest.<span class=\"me1\">propBurn</span> <span class=\"sy0\">?</span> <span class=\"nu0\">2</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">==</span> to<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"co1\">//If it burns, it gets empty ...</span><br/>                forest.<span class=\"me1\">t</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/>window.<span class=\"me1\">setInterval</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    doStep<span class=\"br0\">(</span>forest<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    afterLoad<span class=\"br0\">(</span>forest<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 61, "block": "<pre class=\"text highlighted_source\"># v0.6<br/>\u00a0<br/>@enum State empty tree fire<br/>\u00a0<br/>\u00a0<br/>function evolution(nepoch::Int=100, init::Matrix{State}=fill(tree, 30, 50))<br/>    # Single evolution<br/>    function evolve!(forest::Matrix{State}; f::Float64=0.12, p::Float64=0.5)<br/>        dir = [-1 -1; -1 0; -1 1; 0 -1; 0 1; 1 -1; 1 0; 1 1]<br/>        # A tree will burn if at least one neighbor is burning<br/>        for i in 1:size(forest, 1), j in 1:size(forest, 2)<br/>            for k in 1:size(dir, 1)<br/>                if checkbounds(Bool, forest, i + dir[k, 1], j + dir[k, 2]) &amp;&amp;<br/>                    get(forest, i + dir[k, 1], j + dir[k, 2]) == fire<br/>                    forest[i, j] = fire<br/>                    break<br/>                end<br/>            end<br/>        end<br/>        for i in linearindices(forest)<br/>            # A burning cell turns into an empty cell<br/>            if forest[i] == fire forest[i] = empty end<br/>            # A tree ignites with probability f even if no neighbor is burning<br/>            if forest[i] == tree &amp;&amp; rand() &lt; f forest[i] = fire end<br/>            # An empty space fills with a tree with probability p<br/>            if forest[i] == empty &amp;&amp; rand() &lt; p forest[i] = tree end<br/>        end<br/>    end<br/>\u00a0<br/>    # Print functions<br/>    function printforest(f::Matrix{State})<br/>        for i in 1:size(f, 1)<br/>            for j in 1:size(f, 2)<br/>                print(f[i, j] == empty\u00a0? ' '\u00a0: f[i, j] == tree\u00a0? '\ud83c\udf32'\u00a0: '\ud83d\udd25')<br/>            end<br/>            println()<br/>        end<br/>    end<br/>    function printstats(f::Matrix{State})<br/>        tot = length(f)<br/>        nt  = count(x -&gt; x in (tree, fire), f)<br/>        nb  = count(x -&gt; x == fire, f)<br/>        @printf(\"\\n%6i cell(s),\u00a0%6i tree(s),\u00a0%6i currently burning (%6.2f%%,\u00a0%6.2f%%)\\n\",<br/>                tot, nt, nb, nt / tot * 100, nb / nt * 100)<br/>    end<br/>\u00a0<br/>    # Main<br/>    printforest(init)<br/>    printstats(init)<br/>    for i in 1:nepoch<br/>        # println(\"\\33[2J\")<br/>        evolve!(init)<br/>        # printforest(init)<br/>        # printstats(init)<br/>        # sleep(1)<br/>    end<br/>    printforest(init)<br/>    printstats(init)<br/>end<br/>\u00a0<br/>evolution()</pre>"}, {"lang": "Lua", "loc": 99, "block": "<pre class=\"lua highlighted_source\">\u00a0<br/><span class=\"co1\">-- ForestFire automaton implementation</span><br/><span class=\"co1\">-- Rules: at each step:</span><br/><span class=\"co1\">-- 1) a burning tree disappears</span><br/><span class=\"co1\">-- 2) a non-burning tree starts burning if any of its neighbours is</span><br/><span class=\"co1\">-- 3) an empty spot may generate a tree with prob P</span><br/><span class=\"co1\">-- 4) a non-burning tree may ignite with prob F</span><br/>\u00a0<br/><span class=\"kw1\">local</span> socket <span class=\"sy0\">=</span> <span class=\"kw3\">require</span> <span class=\"st0\">'socket'</span> <span class=\"co1\">-- needed for socket.sleep</span><br/><span class=\"kw1\">local</span> curses <span class=\"sy0\">=</span> <span class=\"kw3\">require</span> <span class=\"st0\">'curses'</span><br/>\u00a0<br/><span class=\"kw1\">local</span> p_spawn<span class=\"sy0\">,</span> p_ignite <span class=\"sy0\">=</span> <span class=\"nu0\">0.005</span><span class=\"sy0\">,</span> <span class=\"nu0\">0.0002</span><br/><span class=\"kw1\">local</span> naptime <span class=\"sy0\">=</span> <span class=\"nu0\">0.03</span> <span class=\"co1\">-- seconds</span><br/><span class=\"kw1\">local</span> forest_x<span class=\"sy0\">,</span> forest_y <span class=\"sy0\">=</span> <span class=\"nu0\">60</span><span class=\"sy0\">,</span> <span class=\"nu0\">30</span><br/>\u00a0<br/><span class=\"kw1\">local</span> forest <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> y<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> wrl <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> y <span class=\"kw1\">do</span><br/>\t\twrl<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> x <span class=\"kw1\">do</span><br/>\t\t\t<span class=\"kw1\">local</span> rand <span class=\"sy0\">=</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t\twrl<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>rand <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span> <span class=\"kw2\">and</span> <span class=\"nu0\">1</span> <span class=\"kw2\">or</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> wrl<br/><span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"br0\">(</span>forest_x<span class=\"sy0\">,</span> forest_y<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw3\">math.randomseed</span><span class=\"br0\">(</span><span class=\"kw3\">os.time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>forest<span class=\"sy0\">.</span>step <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>self<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>self <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>self<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>\t\t\t<span class=\"kw1\">if</span> self<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> p_spawn <span class=\"kw1\">then</span> self<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>\t\t\t<span class=\"kw1\">elseif</span> self<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>\t\t\t\t<span class=\"kw1\">if</span> self<span class=\"sy0\">:</span>ignite<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span> <span class=\"kw2\">or</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> p_ignite <span class=\"kw1\">then</span> self<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">end</span><br/>\t\t\t<span class=\"kw1\">elseif</span> self<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> self<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t\t\t<span class=\"kw1\">else</span> <span class=\"kw3\">error</span><span class=\"br0\">(</span><span class=\"st0\">\"Error: forest[\"</span> <span class=\"sy0\">..</span> i <span class=\"sy0\">..</span> <span class=\"st0\">\"][\"</span> <span class=\"sy0\">..</span> j <span class=\"sy0\">..</span> <span class=\"st0\">\"] is \"</span> <span class=\"sy0\">..</span> self<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">..</span> <span class=\"st0\">\"!\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">end</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>forest<span class=\"sy0\">.</span>draw <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>self<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>self <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>self<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>\t\t\t<span class=\"kw1\">if</span> self<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> win<span class=\"sy0\">:</span>mvaddch<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">elseif</span> self<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <br/>\t\t\t\twin<span class=\"sy0\">:</span>attron<span class=\"br0\">(</span>curses<span class=\"sy0\">.</span>color_pair<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\twin<span class=\"sy0\">:</span>mvaddch<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span><span class=\"st0\">\"Y\"</span><span class=\"br0\">)</span><br/>\t\t\t\twin<span class=\"sy0\">:</span>attroff<span class=\"br0\">(</span>curses<span class=\"sy0\">.</span>color_pair<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">elseif</span> self<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>\t\t\t\twin<span class=\"sy0\">:</span>attron<span class=\"br0\">(</span>curses<span class=\"sy0\">.</span>color_pair<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\twin<span class=\"sy0\">:</span>mvaddch<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span><span class=\"st0\">\"#\"</span><span class=\"br0\">)</span><br/>\t\t\t\twin<span class=\"sy0\">:</span>attroff<span class=\"br0\">(</span>curses<span class=\"sy0\">.</span>color_pair<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">else</span> <span class=\"kw3\">error</span><span class=\"br0\">(</span><span class=\"st0\">\"self[\"</span> <span class=\"sy0\">..</span> i <span class=\"sy0\">..</span> <span class=\"st0\">\"][\"</span> <span class=\"sy0\">..</span> j <span class=\"sy0\">..</span> <span class=\"st0\">\"] is \"</span> <span class=\"sy0\">..</span> self<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">..</span> <span class=\"st0\">\"!\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">end</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>forest<span class=\"sy0\">.</span>ignite <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>self<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> k <span class=\"sy0\">=</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">if</span> k <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw2\">or</span> k <span class=\"sy0\">&gt;</span> <span class=\"sy0\">#</span>self <span class=\"kw1\">then</span> goto continue1 <span class=\"kw1\">end</span><br/>\t\t<span class=\"kw1\">for</span> l <span class=\"sy0\">=</span> j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> j <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>\t\t\t<span class=\"kw1\">if</span> \tl <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw2\">or</span><br/>\t\t\t\tl <span class=\"sy0\">&gt;</span> <span class=\"sy0\">#</span>self<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw2\">or</span><br/>\t\t\t\t<span class=\"kw3\">math.abs</span><span class=\"br0\">(</span><span class=\"br0\">(</span>k <span class=\"sy0\">-</span> i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>l <span class=\"sy0\">-</span> j<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">~=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw1\">then</span><br/>\t\t\t\tgoto continue2<br/>\t\t\t<span class=\"kw1\">end</span><br/>\t\t\t<span class=\"kw1\">if</span> self<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">[</span>l<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">true</span> <span class=\"kw1\">end</span><br/>\t\t\t<span class=\"sy0\">::</span>continue2<span class=\"sy0\">::</span><br/>\t\t<span class=\"kw1\">end</span><br/>\t\t<span class=\"sy0\">::</span>continue1<span class=\"sy0\">::</span><br/>\t<span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> it <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>curses<span class=\"sy0\">.</span>initscr<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>curses<span class=\"sy0\">.</span>start_color<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>curses<span class=\"sy0\">.</span>echo<span class=\"br0\">(</span><span class=\"kw4\">false</span><span class=\"br0\">)</span><br/>curses<span class=\"sy0\">.</span>init_pair<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> curses<span class=\"sy0\">.</span>COLOR_GREEN<span class=\"sy0\">,</span> curses<span class=\"sy0\">.</span>COLOR_BLACK<span class=\"br0\">)</span><br/>curses<span class=\"sy0\">.</span>init_pair<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> curses<span class=\"sy0\">.</span>COLOR_RED<span class=\"sy0\">,</span> curses<span class=\"sy0\">.</span>COLOR_BLACK<span class=\"br0\">)</span><br/>win <span class=\"sy0\">=</span> curses<span class=\"sy0\">.</span>newwin<span class=\"br0\">(</span>forest_y <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> forest_x<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>win<span class=\"sy0\">:</span>clear<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>win<span class=\"sy0\">:</span>mvaddstr<span class=\"br0\">(</span>forest_y <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"p_spawn = \"</span> <span class=\"sy0\">..</span> p_spawn <span class=\"sy0\">..</span> <span class=\"st0\">\", p_ignite = \"</span> <span class=\"sy0\">..</span> p_ignite<span class=\"br0\">)</span><br/><span class=\"kw1\">repeat</span><br/>\tforest<span class=\"sy0\">:</span>draw<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\twin<span class=\"sy0\">:</span>move<span class=\"br0\">(</span>forest_y<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\twin<span class=\"sy0\">:</span>clrtoeol<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\twin<span class=\"sy0\">:</span>addstr<span class=\"br0\">(</span><span class=\"st0\">\"Iteration: \"</span> <span class=\"sy0\">..</span> it <span class=\"sy0\">..</span> <span class=\"st0\">\", nap = \"</span> <span class=\"sy0\">..</span> naptime<span class=\"sy0\">*</span><span class=\"nu0\">1000</span> <span class=\"sy0\">..</span> <span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><br/>\twin<span class=\"sy0\">:</span>refresh<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\tforest<span class=\"sy0\">:</span>step<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\tit <span class=\"sy0\">=</span> it <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\tsocket<span class=\"sy0\">.</span>sleep<span class=\"br0\">(</span>naptime<span class=\"br0\">)</span><br/><span class=\"kw1\">until</span> <span class=\"kw4\">false</span><br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 8, "block": "<pre class=\"text highlighted_source\">evolve[nbhd_List, k_]\u00a0:= 0 /; nbhd[[2, 2]] == 2    (*burning-&gt;empty*)<br/>evolve[nbhd_List, k_]\u00a0:= 2 /; nbhd[[2, 2]] == 1 &amp;&amp; <a class=\"__cf_email__\" data-cfemail=\"074a667f4769656f63\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> == 2     (*near_burning&amp;nonempty-&gt;burning*)<br/>evolve[nbhd_List, k_]\u00a0:= RandomChoice[{f, 1 - f} -&gt; {2, nbhd[[2, 2]]}] /; nbhd[[2, 2]] == 1 &amp;&amp; <a class=\"__cf_email__\" data-cfemail=\"5914382119373b313d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt; 2   (*spontaneously combusting tree*)<br/>evolve[nbhd_List, k_]\u00a0:= RandomChoice[{p, 1 - p} -&gt; {1, nbhd[[2, 2]]}] /; nbhd[[2, 2]] == 0  (*random tree growth*)<br/>\u00a0<br/>r = 100; c = 100; p = 10^-2; f = 10^-4;<br/>init = RandomInteger[BernoulliDistribution[0.05], {r, c}];<br/>MatrixPlot[CellularAutomaton[{evolve, {}, {1, 1}}, {init, 0}, {{{300}}}], ColorRules -&gt; {0 -&gt; White, 1 -&gt; Green, 2 -&gt; Red}, Frame -&gt; False]</pre>"}, {"lang": "MATLAB / Octave", "loc": 29, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> forest_fire<span class=\"br0\">(</span>f,p,N,M<span class=\"br0\">)</span><br/><span class=\"co1\">% Forest fire</span><br/><span class=\"kw1\">if</span> nargin&lt;<span class=\"nu0\">4</span>;<br/>\tM=<span class=\"nu0\">200</span>; <br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">if</span> nargin&lt;<span class=\"nu0\">3</span>;<br/>\tN=<span class=\"nu0\">200</span>; <br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">if</span> nargin&lt;<span class=\"nu0\">2</span>;<br/>\tp=.03; <br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">if</span> nargin&lt;<span class=\"nu0\">1</span>;<br/>\tf=p*.0001; <br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">% initialize;</span><br/>F = <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/rand.html\"><span class=\"kw2\">rand</span></a><span class=\"br0\">(</span>M,N<span class=\"br0\">)</span> &lt; p<span class=\"br0\">)</span>+<span class=\"nu0\">1</span>;  <span class=\"co1\">% tree with probability p </span><br/>S = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ones.html\"><span class=\"kw2\">ones</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>; S<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>=<span class=\"nu0\">0</span>;  <span class=\"co1\">% surrounding</span><br/>\u00a0<br/>textmap = <span class=\"co2\">' T#'</span>;<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/colormap.html\"><span class=\"kw2\">colormap</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>.5,.5,.5;<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>;<span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/image.html\"><span class=\"kw2\">image</span></a><span class=\"br0\">(</span>F<span class=\"br0\">)</span>; <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pause.html\"><span class=\"kw2\">pause</span></a><span class=\"br0\">(</span>.1<span class=\"br0\">)</span>    <span class=\"co1\">% uncomment for graphical output </span><br/>\t<span class=\"co1\">% disp(textmap(F));\tpause;\t\t \u00a0% uncomment for textual output \t\t</span><br/>\tG = <span class=\"br0\">(</span><span class=\"br0\">(</span>F==<span class=\"nu0\">1</span><span class=\"br0\">)</span>.*<span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/rand.html\"><span class=\"kw2\">rand</span></a><span class=\"br0\">(</span>M,N<span class=\"br0\">)</span>&lt;p<span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"co1\">% grow tree </span><br/>\tG = G + <span class=\"br0\">(</span>F==<span class=\"nu0\">2</span><span class=\"br0\">)</span> .* <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/filter2.html\"><span class=\"kw2\">filter2</span></a><span class=\"br0\">(</span>S,F==<span class=\"nu0\">3</span><span class=\"br0\">)</span>&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span> + <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/rand.html\"><span class=\"kw2\">rand</span></a><span class=\"br0\">(</span>M,N<span class=\"br0\">)</span>&lt;f<span class=\"br0\">)</span> + <span class=\"nu0\">2</span><span class=\"br0\">)</span>;  <span class=\"co1\">% burn tree if neighbor is burning or by chance f</span><br/>\tG = G + <span class=\"br0\">(</span>F==<span class=\"nu0\">3</span><span class=\"br0\">)</span>;\t\t\t\t\t\t <span class=\"co1\">% empty after burn</span><br/>\tF = G;<br/><span class=\"kw1\">end</span>; </pre>"}, {"lang": "Nim", "loc": 56, "block": "<pre class=\"text highlighted_source\">import math, os, strutils<br/>randomize()<br/>\u00a0<br/>type State = enum Empty, Tree, Fire<br/>\u00a0<br/>const<br/>  disp: array[State, string] = [\"  \", \"\\e[32m/\\\\\\e[m\", \"\\e[07;31m/\\\\\\e[m\"]<br/>  treeProb = 0.01<br/>  burnProb = 0.001<br/>\u00a0<br/>proc chance(prob: float): bool = random(1.0) &lt; prob<br/>\u00a0<br/># Set the size<br/>var w, h: int<br/>if paramCount() &gt;= 2:<br/>  w = parseInt paramStr 1<br/>  h = parseInt paramStr 2<br/>if w &lt;= 0: w = 30<br/>if h &lt;= 0: h = 30<br/>\u00a0<br/># Iterate over fields in the universe<br/>iterator fields(a = (0,0), b = (h-1,w-1)) =<br/>  for y in max(a[0], 0) .. min(b[0], h-1):<br/>    for x in max(a[1], 0) .. min(b[1], w-1):<br/>      yield (y,x)<br/>\u00a0<br/># Create a sequence with an initializer<br/>proc newSeqWith[T](len: int, init: T): seq[T] =<br/>  result = newSeq[T] len<br/>  for i in 0 .. &lt;len:<br/>    result[i] = init<br/>\u00a0<br/># Initialize<br/>var univ, univNew = newSeqWith(h, newSeq[State] w)<br/>\u00a0<br/>while true:<br/>  # Show<br/>  stdout.write \"\\e[H\"<br/>  for y,x in fields():<br/>    stdout.write disp[univ[y][x]]<br/>    if x == 0: stdout.write \"\\e[E\"<br/>  stdout.flushFile<br/>\u00a0<br/>  # Evolve<br/>  for y,x in fields():<br/>    case univ[y][x]<br/>    of Fire:<br/>      univNew[y][x] = Empty<br/>    of Empty:<br/>      if chance treeProb: univNew[y][x] = Tree<br/>    of Tree:<br/>      for y1, x1 in fields((y-1,x-1), (y+1,x+1)):<br/>        if univ[y1][x1] == Fire: univNew[y][x] = Fire<br/>      if chance burnProb: univNew[y][x] = Fire<br/>  univ = univNew<br/>  sleep 200</pre>"}, {"lang": "OCaml", "loc": 73, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">open</span> Curses<br/>\u00a0<br/><span class=\"kw1\">let</span> ignite_prob <span class=\"sy0\">=</span> <span class=\"nu0\">0.02</span><br/><span class=\"kw1\">let</span> sprout_prob <span class=\"sy0\">=</span> <span class=\"nu0\">0.01</span><br/>\u00a0<br/><span class=\"kw1\">type</span> cell <span class=\"sy0\">=</span> Empty <span class=\"sy0\">|</span> Burning <span class=\"sy0\">|</span> Tree<br/>\u00a0<br/><span class=\"kw1\">let</span> get w x y <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">try</span> w<span class=\"sy0\">.</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>  <span class=\"kw1\">with</span> Invalid_argument _ <span class=\"sy0\">-&gt;</span> Empty<br/>\u00a0<br/><span class=\"kw1\">let</span> neighborhood_burning w x y <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">try</span><br/>    <span class=\"kw1\">for</span> _x <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> x <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> x <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">for</span> _y <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> y <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> y <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> get w _x _y <span class=\"sy0\">=</span> Burning <span class=\"kw1\">then</span> <span class=\"kw1\">raise</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#EXCEPTIONExit\"><span class=\"kw5\">Exit</span></a><br/>      <span class=\"kw1\">done</span><br/>    <span class=\"kw1\">done</span><br/>    <span class=\"sy0\">;</span> <span class=\"kw1\">false</span><br/>  <span class=\"kw1\">with</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#EXCEPTIONExit\"><span class=\"kw5\">Exit</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">true</span><br/>\u00a0<br/><span class=\"kw1\">let</span> evolves w x y <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">match</span> w<span class=\"sy0\">.</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>  <span class=\"sy0\">|</span> Burning <span class=\"sy0\">-&gt;</span> Empty<br/>  <span class=\"sy0\">|</span> Tree <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">if</span> neighborhood_burning w x y<br/>      <span class=\"kw1\">then</span> Burning<br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">begin</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> ignite_prob<br/>        <span class=\"kw1\">then</span> Burning<br/>        <span class=\"kw1\">else</span> Tree<br/>      <span class=\"kw1\">end</span><br/>  <span class=\"sy0\">|</span> Empty <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> sprout_prob<br/>      <span class=\"kw1\">then</span> Tree<br/>      <span class=\"kw1\">else</span> Empty<br/>\u00a0<br/><span class=\"kw1\">let</span> step width height w <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">for</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> width <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> height <span class=\"kw1\">do</span><br/>      w<span class=\"sy0\">.</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> evolves w x y<br/>    <span class=\"kw1\">done</span><br/>  <span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"kw1\">let</span> i <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_char\"><span class=\"kw3\">int_of_char</span></a><br/><span class=\"kw1\">let</span> repr <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> Empty <span class=\"sy0\">-&gt;</span> i <span class=\"sy0\">'</span> <span class=\"sy0\">'</span> <span class=\"sy0\">|</span> Burning <span class=\"sy0\">-&gt;</span> i <span class=\"sy0\">'#'</span> <span class=\"sy0\">|</span> Tree <span class=\"sy0\">-&gt;</span> i <span class=\"sy0\">'</span>t<span class=\"sy0\">'</span><br/>\u00a0<br/><span class=\"kw1\">let</span> draw width height w <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">for</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> width <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> height <span class=\"kw1\">do</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALignore\"><span class=\"kw3\">ignore</span></a><span class=\"br0\">(</span>move y x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALignore\"><span class=\"kw3\">ignore</span></a><span class=\"br0\">(</span>delch <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALignore\"><span class=\"kw3\">ignore</span></a><span class=\"br0\">(</span>insch <span class=\"br0\">(</span>repr w<span class=\"sy0\">.</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALignore\"><span class=\"kw3\">ignore</span></a><span class=\"br0\">(</span>refresh <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span>self_init <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">let</span> wnd <span class=\"sy0\">=</span> initscr <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALignore\"><span class=\"kw3\">ignore</span></a><span class=\"br0\">(</span>cbreak <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALignore\"><span class=\"kw3\">ignore</span></a><span class=\"br0\">(</span>noecho <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">let</span> height, width <span class=\"sy0\">=</span> getmaxyx wnd <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> w <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>make_matrix width height Empty <span class=\"kw1\">in</span><br/>  clear <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALignore\"><span class=\"kw3\">ignore</span></a><span class=\"br0\">(</span>refresh <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span> <span class=\"kw1\">true</span> <span class=\"kw1\">do</span><br/>    draw width height w<span class=\"sy0\">;</span><br/>    step width height w<span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Unix.html\"><span class=\"kw2\">Unix</span></a><span class=\"sy0\">.</span>sleep <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  endwin<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "PARI/GP", "loc": 25, "block": "<pre class=\"parigp highlighted_source\">step<span class=\"br0\">(</span>M<span class=\"sy0\">,</span>p<span class=\"sy0\">,</span>f<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\tmy<span class=\"br0\">(</span>m<span class=\"sy0\">=</span><span class=\"kw1\">matsize</span><span class=\"br0\">(</span>M<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>n<span class=\"sy0\">=</span><span class=\"kw1\">matsize</span><span class=\"br0\">(</span>M<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">matrix</span><span class=\"br0\">(</span>m<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>M<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">\"*\"</span><span class=\"sy0\">,</span><br/>\t\t\t<span class=\"st0\">\" \"</span><br/>\t\t<span class=\"sy0\">,</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>M<span class=\"br0\">[</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">\"t\"</span><span class=\"sy0\">,</span><br/>\t\t\t\tmy<span class=\"br0\">(</span>nbr<span class=\"sy0\">=</span><span class=\"st0\">\"t\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>x<span class=\"sy0\">=</span><span class=\"kw1\">max</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>i<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">min</span><span class=\"br0\">(</span>m<span class=\"sy0\">,</span>i<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>y<span class=\"sy0\">=</span><span class=\"kw1\">max</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>j<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">min</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>j<span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\t\t\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>M<span class=\"br0\">[</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">\"*\"</span><span class=\"sy0\">,</span>nbr<span class=\"sy0\">=</span><span class=\"st0\">\"*\"</span><span class=\"sy0\">;</span><span class=\"kw1\">break</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">1</span>.<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>f<span class=\"sy0\">,</span><span class=\"st0\">\"*\"</span><span class=\"sy0\">,</span>nbr<span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">,</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">1</span>.<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span>p<span class=\"sy0\">,</span><span class=\"st0\">\"t\"</span><span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span>\t<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>burn<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>p<span class=\"sy0\">,</span>f<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\tmy<span class=\"br0\">(</span>M<span class=\"sy0\">=</span><span class=\"kw1\">matrix</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span><span class=\"st0\">\"t\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>N<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"kw1\">print</span><span class=\"br0\">(</span>M<span class=\"sy0\">=</span>step<span class=\"br0\">(</span>M<span class=\"sy0\">,</span>p<span class=\"sy0\">,</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>burn<span class=\"br0\">(</span><span class=\"nu1\">5</span><span class=\"sy0\">,</span><span class=\"nu2\">.1</span><span class=\"sy0\">,</span><span class=\"nu2\">.03</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 64, "block": "<pre class=\"perl highlighted_source\">\u00a0<br/><span class=\"kw2\">use</span> 5<span class=\"sy0\">.</span>10<span class=\"sy0\">.</span>0<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$w</span> <span class=\"sy0\">=</span> <span class=\"st0\">`tput cols`</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$h</span> <span class=\"sy0\">=</span> <span class=\"st0\">`tput lines`</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$r</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"<span class=\"es0\">\\0</span>33[H\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$green</span><span class=\"sy0\">,</span> <span class=\"re0\">$red</span><span class=\"sy0\">,</span> <span class=\"re0\">$yellow</span><span class=\"sy0\">,</span> <span class=\"re0\">$norm</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\0</span>33[32m\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\0</span>33[31m\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\0</span>33[33m\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\0</span>33[m\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$tree_prob</span> <span class=\"sy0\">=</span> <span class=\"sy0\">.</span>05<span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$burn_prob</span> <span class=\"sy0\">=</span> <span class=\"sy0\">.</span>0002<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@forest</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$tree_prob</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$w</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$h</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> iterate <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"sy0\">@</span><span class=\"kw2\">new</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$w</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"re0\">$h</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$h</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$j</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$w</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$new</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$forest</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$forest</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"re0\">$new</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">next</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span><span class=\"re0\">$forest</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$burn_prob</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"re0\">$new</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">next</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>\t<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t\t\t<span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> \t   <span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>\t\t\t\t<span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$h</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"co5\">$_</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$j</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$w</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$forest</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t\t\t<span class=\"re0\">$new</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\t\t\t<span class=\"kw1\">last</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/rand.html\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$tree_prob</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"re0\">$new</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span><span class=\"re0\">$forest</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"re0\">$new</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\t<span class=\"re0\">@forest</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"kw2\">new</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> forest <span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$r</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">@forest</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\twhen<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\t\t\twhen<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"${green}*\"</span><span class=\"br0\">}</span><br/>\t\t\twhen<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"${red}&amp;\"</span> <span class=\"br0\">}</span><br/>\t\t\twhen<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"${yellow}&amp;\"</span> <span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\0</span>33[E<span class=\"es0\">\\0</span>33[1G\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\titerate<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>forest <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 71, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$RED</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[1;31m\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$YELLOW</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[1;33m\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$GREEN</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[1;32m\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$CLEAR</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[0m\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">enum</span> Cell<span class=\"sy0\">-</span>State <span class=\"sy0\">&lt;</span>Empty Tree Heating Burning<span class=\"sy0\">&gt;;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@pix</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'  '</span><span class=\"sy0\">,</span> <span class=\"re0\">$GREEN</span> <span class=\"sy0\">~</span> <span class=\"st_h\">'\u6728'</span><span class=\"sy0\">,</span> <span class=\"re0\">$YELLOW</span> <span class=\"sy0\">~</span> <span class=\"st_h\">'\u6728'</span><span class=\"sy0\">,</span> <span class=\"re0\">$RED</span> <span class=\"sy0\">~</span> <span class=\"st_h\">'\u6728'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Forest <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> Rat <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">p</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0.01</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> Rat <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">f</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0.001</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> Int <span class=\"re0\">$!height</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> Int <span class=\"re0\">$!width</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">@!coords</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">@!spot</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">@!neighbors</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> <span class=\"kw2\">BUILD</span> <span class=\"br0\">(</span>Int <span class=\"sy0\">:</span><span class=\"re0\">$!height</span><span class=\"sy0\">,</span> Int <span class=\"sy0\">:</span><span class=\"re0\">$!width</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"re0\">@!coords</span> <span class=\"sy0\">=</span> <span class=\"sy0\">^</span><span class=\"re0\">$!height</span> <span class=\"kw1\">X</span> <span class=\"sy0\">^</span><span class=\"re0\">$!width</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">@!spot</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"br0\">(</span>Bool<span class=\"sy0\">.</span><span class=\"kw3\">pick</span> <span class=\"sy0\">??</span> Tree <span class=\"sy0\">!!</span> Empty<span class=\"br0\">)</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$!width</span> <span class=\"br0\">]</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$!height</span><span class=\"sy0\">;</span><br/>        self<span class=\"sy0\">!</span>init<span class=\"sy0\">-</span>neighbors<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> <span class=\"sy0\">!</span>init<span class=\"sy0\">-</span>neighbors <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@!coords</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$j</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">@!neighbors</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> eager gather <span class=\"kw1\">for</span><br/>                    <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"nu0\">0</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                    <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,+</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>        <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,+</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                    <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"nu0\">0</span><span class=\"sy0\">,+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">{</span><br/>\t\ttake<span class=\"sy0\">-</span>rw <span class=\"re0\">@!spot</span><span class=\"br0\">[</span><span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span> <span class=\"sy0\">+</span> <span class=\"sy0\">.</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">//</span> <span class=\"kw1\">next</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> step <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@heat</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"re0\">@!coords</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$j</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">given</span> <span class=\"re0\">@!spot</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">when</span> Empty   <span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"sy0\">=</span> Tree <span class=\"kw1\">if</span> <span class=\"kw3\">rand</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$!p</span> <span class=\"br0\">}</span><br/>                <span class=\"kw1\">when</span> Tree    <span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"sy0\">=</span> Heating <span class=\"kw1\">if</span> <span class=\"kw3\">rand</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$!f</span> <span class=\"br0\">}</span><br/>                <span class=\"kw1\">when</span> Heating <span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"sy0\">=</span> Burning<span class=\"sy0\">;</span> <span class=\"kw3\">push</span> <span class=\"re0\">@heat</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$j</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>                <span class=\"kw1\">when</span> Burning <span class=\"br0\">{</span> <span class=\"re0\">$_</span> <span class=\"sy0\">=</span> Empty <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"re0\">@heat</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"re0\">$j</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <span class=\"re0\">$_</span> <span class=\"sy0\">=</span> Heating <span class=\"kw1\">for</span> <span class=\"re0\">@!neighbors</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">grep</span><span class=\"br0\">(</span>Tree<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> show <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$!height</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span> <span class=\"br0\">{</span><br/>            <span class=\"kw3\">say</span> <span class=\"re0\">@pix</span><span class=\"br0\">[</span><span class=\"re0\">@!spot</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"me1\">list</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$ROWS</span><span class=\"sy0\">,</span> <span class=\"re0\">$COLS</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co2\">qx/stty size/</span><span class=\"sy0\">.</span><span class=\"kw3\">words</span><span class=\"sy0\">;</span><br/>\u00a0<br/>signal<span class=\"br0\">(</span>SIGINT<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">act</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[H<span class=\"es0\">\\e</span>[2J\"</span><span class=\"sy0\">;</span> exit <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> MAIN <span class=\"br0\">(</span>Int <span class=\"re0\">$height</span> <span class=\"sy0\">=</span> <span class=\"re0\">$ROWS</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> Int <span class=\"re0\">$width</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">$COLS</span> <span class=\"kw1\">div</span> <span class=\"nu0\">2</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> Forest <span class=\"re0\">$forest</span> <span class=\"sy0\">.=</span> <span class=\"kw2\">new</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"re0\">$height</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span><span class=\"re0\">$width</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[2J\"</span><span class=\"sy0\">;</span>      <span class=\"co1\"># ANSI clear screen</span><br/>    <span class=\"kw1\">loop</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\e</span>[H\"</span><span class=\"sy0\">;</span>   <span class=\"co1\"># ANSI home</span><br/>\t<span class=\"kw3\">say</span> $<span class=\"sy0\">++;</span><br/>\t<span class=\"re0\">$forest</span><span class=\"sy0\">.</span><span class=\"me1\">show</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$forest</span><span class=\"sy0\">.</span><span class=\"me1\">step</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 94, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo\\rosetta\\Forest_fire.exw<br/>--<br/>include pGUI.e<br/>\u00a0<br/>Ihandle dlg, canvas, hTimer<br/>cdCanvas cddbuffer, cdcanvas<br/>\u00a0<br/>constant TITLE = \"Forest Fire\"<br/>\u00a0<br/>sequence f = {}     -- the forest<br/>\u00a0<br/>atom P = 0.03       -- probability of new tree growing<br/>atom F = 0.00003    -- probability of new fire starting<br/>\u00a0<br/>enum EMPTY,TREE,FIRE    -- (1,2,3)<br/>constant colours = {CD_BLACK,CD_GREEN,CD_YELLOW}<br/>\u00a0<br/>function randomf()<br/>    return rand(1000000)/1000000    -- returns 0.000001..1.000000<br/>end function<br/>\u00a0<br/>function redraw_cb(Ihandle /*ih*/, integer /*posx*/, integer /*posy*/)<br/>integer {w, h} = IupGetIntInt(canvas, \"DRAWSIZE\")<br/>    cdCanvasActivate(cddbuffer)<br/>    if length(f)!=w+2<br/>    or length(f[1])!=h+2 then<br/>        f = sq_rand(repeat(repeat(2,h+2),w+2))  -- (EMPTY or TREE)<br/>    end if<br/>    sequence fn = f<br/>    for x = 2 to w+1 do<br/>        for y = 2 to h+1 do<br/>            integer fnxy<br/>            switch f[x,y] do<br/>                case EMPTY:<br/>                    fnxy = EMPTY+(randomf()&lt;P)  -- (EMPTY or TREE)<br/>                case TREE:<br/>                    fnxy = TREE<br/>                    if f[x-1,y-1]=FIRE or f[x,y-1]=FIRE or f[x+1,y-1]=FIRE <br/>                    or f[x-1,y  ]=FIRE or (randomf()&lt;F) or f[x+1,y  ]=FIRE<br/>                    or f[x-1,y+1]=FIRE or f[x,y+1]=FIRE or f[x+1,y+1]=FIRE then<br/>                        fnxy = FIRE<br/>                    end if<br/>                case FIRE:<br/>                    fnxy = EMPTY<br/>            end switch<br/>            fn[x,y] = fnxy<br/>            cdCanvasPixel(cddbuffer, x-2, y-2, colours[fnxy])<br/>        end for<br/>    end for<br/>    f = fn<br/>    cdCanvasFlush(cddbuffer)<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function map_cb(Ihandle ih)<br/>    cdcanvas = cdCreateCanvas(CD_IUP, ih)<br/>    cddbuffer = cdCreateCanvas(CD_DBUFFER, cdcanvas)<br/>    return IUP_DEFAULT<br/>end function<br/>\u00a0<br/>function key_cb(Ihandle /*ih*/, atom c)<br/>    if c=K_ESC then return IUP_CLOSE end if<br/>    return IUP_CONTINUE<br/>end function<br/>\u00a0<br/>function timer_cb(Ihandle /*ih*/)<br/>    IupUpdate(canvas)<br/>    return IUP_IGNORE<br/>end function<br/>\u00a0<br/>procedure main()<br/>    IupOpen()<br/>\u00a0<br/>    canvas = IupCanvas(NULL)<br/>    IupSetAttribute(canvas, \"RASTERSIZE\", \"200x200\") -- initial size<br/>    IupSetCallback(canvas, \"MAP_CB\", Icallback(\"map_cb\"))<br/>\u00a0<br/>    dlg = IupDialog(canvas)<br/>    IupSetAttribute(dlg, \"TITLE\", TITLE)<br/>    IupSetAttribute(dlg, \"MAXSIZE\", \"800x400\")  -- (too slow any bigger)<br/>    IupSetCallback(dlg, \"K_ANY\",     Icallback(\"key_cb\"))<br/>    IupSetCallback(canvas, \"ACTION\", Icallback(\"redraw_cb\"))<br/>\u00a0<br/>    hTimer = IupTimer(Icallback(\"timer_cb\"), 100)<br/>\u00a0<br/>    IupMap(dlg)<br/>    IupSetAttribute(canvas, \"RASTERSIZE\", NULL) -- release min limitation<br/>    IupShow(dlg)<br/>    IupMainLoop()<br/>    IupClose()<br/>end procedure<br/>\u00a0<br/>main()</pre>"}, {"lang": "PHP", "loc": 113, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/>\u00a0<br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'WIDTH'</span><span class=\"sy0\">,</span>      <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'HEIGHT'</span><span class=\"sy0\">,</span>     <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'GEN_CNT'</span><span class=\"sy0\">,</span>    <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'PAUSE'</span><span class=\"sy0\">,</span>  <span class=\"nu0\">250000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'TREE_PROB'</span><span class=\"sy0\">,</span>  <span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'GROW_PROB'</span><span class=\"sy0\">,</span>   <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'FIRE_PROB'</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'BARE'</span><span class=\"sy0\">,</span>      <span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'TREE'</span><span class=\"sy0\">,</span>      <span class=\"st_h\">'A'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/define\"><span class=\"kw3\">define</span></a><span class=\"br0\">(</span><span class=\"st_h\">'BURN'</span><span class=\"sy0\">,</span>      <span class=\"st_h\">'/'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"re0\">$forest</span> <span class=\"sy0\">=</span> makeNewForest<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> GEN_CNT<span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    displayForest<span class=\"br0\">(</span><span class=\"re0\">$forest</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$forest</span> <span class=\"sy0\">=</span> getNextForest<span class=\"br0\">(</span><span class=\"re0\">$forest</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>displayForest<span class=\"br0\">(</span><span class=\"re0\">$forest</span><span class=\"sy0\">,</span> <span class=\"st_h\">'done'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/exit\"><span class=\"kw3\">exit</span></a><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">function</span> makeNewForest<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> mapForest<span class=\"br0\">(</span><span class=\"br0\">[</span><br/>        <span class=\"st_h\">'func'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> isProb<span class=\"br0\">(</span>TREE_PROB<span class=\"br0\">)</span>\u00a0? TREE <span class=\"sy0\">:</span> BARE<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">function</span> displayForest<span class=\"br0\">(</span><span class=\"re0\">$forest</span><span class=\"sy0\">,</span> <span class=\"re0\">$generationNum</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.php.net/system\"><span class=\"kw3\">system</span></a><span class=\"br0\">(</span><span class=\"st0\">\"clear\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">echo</span> PHP_EOL <span class=\"sy0\">.</span> <span class=\"st0\">\"Generation: <span class=\"es4\">$generationNum</span>\"</span> <span class=\"sy0\">.</span> PHP_EOL<span class=\"sy0\">;</span><br/>    mapForest<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st_h\">'forest'</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$forest</span><span class=\"sy0\">,</span> <span class=\"st_h\">'func'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">echo</span> <span class=\"re0\">$f</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">==</span> WIDTH <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>\u00a0? PHP_EOL <span class=\"sy0\">:</span> <span class=\"st_h\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">echo</span> PHP_EOL<span class=\"sy0\">;</span><br/>    <a href=\"http://www.php.net/usleep\"><span class=\"kw3\">usleep</span></a><span class=\"br0\">(</span>PAUSE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">function</span> getNextForest<span class=\"br0\">(</span><span class=\"re0\">$oldForest</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> mapForest<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st_h\">'forest'</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$oldForest</span><span class=\"sy0\">,</span> <span class=\"st_h\">'func'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">switch</span> <span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> BURN<span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">return</span> BARE<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> BARE<span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">return</span> isProb<span class=\"br0\">(</span>GROW_PROB<span class=\"br0\">)</span>\u00a0? TREE <span class=\"sy0\">:</span> BARE<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> TREE<span class=\"sy0\">:</span><br/>                    <span class=\"re0\">$caughtFire</span> <span class=\"sy0\">=</span> isProb<span class=\"br0\">(</span>FIRE_PROB<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"re0\">$ablaze</span> <span class=\"sy0\">=</span> <span class=\"re0\">$caughtFire</span>\u00a0? <span class=\"kw4\">true</span> <span class=\"sy0\">:</span> getNumBurningNeighbors<span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span> <span class=\"re0\">$ablaze</span>\u00a0? BURN <span class=\"sy0\">:</span> TREE<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">function</span> getNumBurningNeighbors<span class=\"br0\">(</span><span class=\"re0\">$forest</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$burningNeighbors</span> <span class=\"sy0\">=</span> mapForest<span class=\"br0\">(</span><span class=\"br0\">[</span><br/>        <span class=\"st_h\">'forest'</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$forest</span><span class=\"sy0\">,</span> <br/>        <span class=\"st_h\">'x1'</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st_h\">'x2'</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>        <span class=\"st_h\">'y1'</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st_h\">'y2'</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>        <span class=\"st_h\">'default'</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>        <span class=\"st_h\">'func'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"re0\">$f</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"re0\">$f</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> BURN\u00a0? <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"re0\">$numOnFire</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$burningNeighbors</span> <span class=\"kw1\">as</span> <span class=\"re0\">$row</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$numOnFire</span> <span class=\"sy0\">+=</span> <a href=\"http://www.php.net/array_sum\"><span class=\"kw3\">array_sum</span></a><span class=\"br0\">(</span><span class=\"re0\">$row</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$numOnFire</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">function</span> mapForest<span class=\"br0\">(</span><span class=\"re0\">$params</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$p</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_merge\"><span class=\"kw3\">array_merge</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><br/>        <span class=\"st_h\">'forest'</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <br/>        <span class=\"st_h\">'func'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">echo</span> <span class=\"st0\">\"default<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>        <span class=\"st_h\">'x1'</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>        <span class=\"st_h\">'x2'</span> <span class=\"sy0\">=&gt;</span> WIDTH<span class=\"sy0\">,</span><br/>        <span class=\"st_h\">'y1'</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>        <span class=\"st_h\">'y2'</span> <span class=\"sy0\">=&gt;</span> HEIGHT<span class=\"sy0\">,</span><br/>        <span class=\"st_h\">'default'</span> <span class=\"sy0\">=&gt;</span> BARE<br/>    <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$params</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"re0\">$newForest</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"re0\">$p</span><span class=\"br0\">[</span><span class=\"st_h\">'y1'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$p</span><span class=\"br0\">[</span><span class=\"st_h\">'y2'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"re0\">$y</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$newRow</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">$p</span><span class=\"br0\">[</span><span class=\"st_h\">'x1'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$p</span><span class=\"br0\">[</span><span class=\"st_h\">'x2'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"re0\">$x</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$inBounds</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> WIDTH <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> HEIGHT<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$newRow</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$inBounds</span>\u00a0? <span class=\"re0\">$p</span><span class=\"br0\">[</span><span class=\"st_h\">'func'</span><span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"br0\">[</span><span class=\"st_h\">'forest'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"re0\">$p</span><span class=\"br0\">[</span><span class=\"st_h\">'default'</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$newForest</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$newRow</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$newForest</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">function</span> isProb<span class=\"br0\">(</span><span class=\"re0\">$prob</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <a href=\"http://www.php.net/rand\"><span class=\"kw3\">rand</span></a><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$prob</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 43, "block": "<pre class=\"text highlighted_source\">(load \"@lib/simul.l\")<br/>\u00a0<br/>(scl 3)<br/>\u00a0<br/>(de forestFire (Dim ProbT ProbP ProbF)<br/>   (let Grid (grid Dim Dim)<br/>      (for Col Grid<br/>         (for This Col<br/>            (=: tree (&gt; ProbT (rand 0 1.0))) ) )<br/>      (loop<br/>         (disp Grid NIL<br/>            '((This)<br/>               (cond<br/>                  ((: burn) \"# \")<br/>                  ((: tree) \"T \")<br/>                  (T \". \") ) ) )<br/>         (wait 1000)<br/>         (for Col Grid<br/>            (for This Col<br/>               (=: next<br/>                  (cond<br/>                     ((: burn) NIL)<br/>                     ((: tree)<br/>                        (if<br/>                           (or<br/>                              (find  # Neighbor burning?<br/>                                 '((Dir) (get (Dir This) 'burn))<br/>                                 (quote<br/>                                    west east south north<br/>                                    ((X) (south (west X)))<br/>                                    ((X) (north (west X)))<br/>                                    ((X) (south (east X)))<br/>                                    ((X) (north (east X))) ) )<br/>                              (&gt; ProbF (rand 0 1.0)) )<br/>                           'burn<br/>                           'tree ) )<br/>                     (T (and (&gt; ProbP (rand 0 1.0)) 'tree)) ) ) ) )<br/>         (for Col Grid<br/>            (for This Col<br/>               (if (: next)<br/>                  (put This @ T)<br/>                  (=: burn)<br/>                  (=: tree) ) ) ) ) ) )</pre>"}, {"lang": "PostScript", "loc": 64, "block": "<pre class=\"text highlighted_source\">%!PS-Adobe-3.0<br/>%%BoundingBox: 0 0 400 400<br/>\u00a0<br/>/size 400 def<br/>\u00a0<br/>/rand1 { rand 2147483647 div } def<br/>\u00a0<br/>/m { moveto } bind def<br/>/l { rlineto} bind def<br/>/drawforest {<br/>        0 1 n 1 sub { /y exch def<br/>        0 1 n 1 sub { /x exch def<br/>                forest x get y get dup 0 eq { pop } {<br/>                        1 eq { 0 1 0 } { 1 0 0 } ifelse setrgbcolor<br/>                        x c mul y c mul m<br/>                        c 0 l 0 c l c neg 0 l closepath fill<br/>                } ifelse<br/>        } for<br/>        } for<br/>} def<br/>\u00a0<br/>/r1n { dup 0 ge exch n lt and } def<br/>\u00a0<br/>/neighbors { /y exch def /x exch def /cnt 0 def<br/>        [<br/>        y 1 sub 1 y 1 add { /y1 exch def<br/>                y1 r1n {<br/>                        x 1 sub 1 x 1 add { /x1 exch def<br/>                                x1 r1n { forest x1 get y1 get } if<br/>                        } for<br/>                } if<br/>        } for]<br/>} def<br/>\u00a0<br/>/iter {<br/>        /nf [ n {[ n {0} repeat]} repeat ] def<br/>        0 1 n 1 sub { /x exch def<br/>        0 1 n 1 sub { /y exch def<br/>                nf x get y<br/>                forest x get y get dup<br/>                0 eq { pop rand1 treeprob le {1}{0} ifelse<br/>                } {<br/>                        1 eq {  /fire false def<br/>                                x y neighbors {<br/>                                        -1 eq { /fire true def } if<br/>                                } forall<br/>                                fire {-1}{<br/>                                        rand1 burnprob lt {-1}{1} ifelse<br/>                                } ifelse<br/>                        }{0} ifelse<br/>                } ifelse<br/>                put<br/>        } for } for<br/>        /forest nf def<br/>} def<br/>\u00a0<br/>/n 200 def<br/>/treeprob .05 def<br/>/burnprob .0001 def<br/>/c size n div def<br/>/forest [ n {[ n { rand1 treeprob le {1}{0} ifelse } repeat]} repeat ] def<br/>\u00a0<br/>1000 { drawforest showpage iter } repeat<br/>%%EOF</pre>"}, {"lang": "Python", "loc": 83, "block": "<pre class=\"python highlighted_source\"><span class=\"st0\">'''<br/>Forest-Fire Cellular automation<br/> See: http://en.wikipedia.org/wiki/Forest-fire_model<br/>'''</span><br/>\u00a0<br/>L <span class=\"sy0\">=</span> <span class=\"nu0\">15</span><br/><span class=\"co1\"># d = 2 # Fixed</span><br/>initial_trees <span class=\"sy0\">=</span> <span class=\"nu0\">0.55</span><br/>p <span class=\"sy0\">=</span> <span class=\"nu0\">0.01</span><br/>f <span class=\"sy0\">=</span> <span class=\"nu0\">0.001</span><br/>\u00a0<br/><span class=\"kw1\">try</span>:<br/>    <span class=\"kw2\">raw_input</span><br/><span class=\"kw1\">except</span>:<br/>    <span class=\"kw2\">raw_input</span> <span class=\"sy0\">=</span> <span class=\"kw2\">input</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">random</span><br/>\u00a0<br/>\u00a0<br/>tree<span class=\"sy0\">,</span> burning<span class=\"sy0\">,</span> space <span class=\"sy0\">=</span> <span class=\"st0\">'TB.'</span><br/>hood <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>-<span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>          <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>  <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>  <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> initialise<span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>    grid <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span>: <span class=\"br0\">(</span>tree <span class=\"kw1\">if</span> <span class=\"kw3\">random</span>.<span class=\"kw3\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;=</span> initial_trees <span class=\"kw1\">else</span> space<span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> grid<br/>\u00a0<br/><span class=\"kw1\">def</span> gprint<span class=\"br0\">(</span>grid<span class=\"br0\">)</span>:<br/>    txt <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>'</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>grid<span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span>txt<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> quickprint<span class=\"br0\">(</span>grid<span class=\"br0\">)</span>:<br/>    t <span class=\"sy0\">=</span> b <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    ll <span class=\"sy0\">=</span> L * L<br/>    <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> grid<span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"kw1\">in</span> <span class=\"br0\">(</span>tree<span class=\"sy0\">,</span> burning<span class=\"br0\">)</span>:<br/>                t +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>                <span class=\"kw1\">if</span> grid<span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> burning:<br/>                    b +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">'Of\u00a0%6i cells,\u00a0%6i are trees of which\u00a0%6i are currently burning.'</span><br/>          + <span class=\"st0\">' (%6.3f%%,\u00a0%6.3f%%)'</span><span class=\"br0\">)</span><br/>         \u00a0% <span class=\"br0\">(</span>ll<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> b<span class=\"sy0\">,</span> <span class=\"nu0\">100</span>. * t / ll<span class=\"sy0\">,</span> <span class=\"nu0\">100</span>. * b / ll<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> gnew<span class=\"br0\">(</span>grid<span class=\"br0\">)</span>:<br/>    newgrid <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> y <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>L<span class=\"br0\">)</span>:<br/>            <span class=\"kw1\">if</span> grid<span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> burning:<br/>                newgrid<span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> space<br/>            <span class=\"kw1\">elif</span> grid<span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> space:<br/>                newgrid<span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> tree <span class=\"kw1\">if</span> <span class=\"kw3\">random</span>.<span class=\"kw3\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;=</span> p <span class=\"kw1\">else</span> space<br/>            <span class=\"kw1\">elif</span> grid<span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> tree:<br/>                newgrid<span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>burning<br/>                                   <span class=\"kw1\">if</span> <span class=\"kw2\">any</span><span class=\"br0\">(</span>grid.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x+dx<span class=\"sy0\">,</span>y+dy<span class=\"br0\">)</span><span class=\"sy0\">,</span>space<span class=\"br0\">)</span> <span class=\"sy0\">==</span> burning<br/>                                            <span class=\"kw1\">for</span> dx<span class=\"sy0\">,</span>dy <span class=\"kw1\">in</span> hood<span class=\"br0\">)</span><br/>                                        <span class=\"kw1\">or</span> <span class=\"kw3\">random</span>.<span class=\"kw3\">random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;=</span> f <br/>                                   <span class=\"kw1\">else</span> tree<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> newgrid<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    grid <span class=\"sy0\">=</span> initialise<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">iter</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>        quickprint<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><br/>        inp <span class=\"sy0\">=</span> <span class=\"kw2\">raw_input</span><span class=\"br0\">(</span><span class=\"st0\">'Print/Quit/&lt;int&gt;/&lt;return&gt;\u00a0%6i: '</span>\u00a0% <span class=\"kw2\">iter</span><span class=\"br0\">)</span>.<span class=\"me1\">lower</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> inp:<br/>            <span class=\"kw1\">if</span> inp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'p'</span>:<br/>                gprint<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><br/>            <span class=\"kw1\">elif</span> inp.<span class=\"me1\">isdigit</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>                <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">(</span>inp<span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>                    <span class=\"kw2\">iter</span> +<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>                    grid <span class=\"sy0\">=</span> gnew<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><br/>                    quickprint<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><br/>            <span class=\"kw1\">elif</span> inp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">'q'</span>:<br/>                <span class=\"kw1\">break</span><br/>        grid <span class=\"sy0\">=</span> gnew<span class=\"br0\">(</span>grid<span class=\"br0\">)</span><br/>        <span class=\"kw2\">iter</span> +<span class=\"sy0\">=</span><span class=\"nu0\">1</span></pre>"}, {"lang": "Racket", "loc": 60, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require 2htdp/universe)<br/>(require 2htdp/image)<br/>\u00a0<br/>(define (initial-forest w p-tree)<br/>  (for/vector #:length w ((rw w))<br/>    (for/vector #:length w ((cl w))<br/>      (if (&lt; (random) p-tree) #\\T #\\_))))<br/>\u00a0<br/>(define (has-burning-neighbour? forest r# c# w)<br/> \u00a0;; note, this will check r# c#, too but it's not<br/> \u00a0;; worth checking that r=r# and c=c# each time in<br/> \u00a0;; this case<br/>  (for*/first<br/>      ((r (in-range (- r# 1) (+ r# 2)))<br/>       #:when (&lt; 0 r w)<br/>       (c (in-range (- c# 1) (+ c# 2)))<br/>       #:when (&lt; 0 c w)<br/>       #:when (equal? #\\* (vector-ref (vector-ref forest r) c)))<br/>    #t))<br/>\u00a0<br/>(define (fire-tick forest p-sprout f-combust w)<br/>  (for/vector #:length w ((rw forest) (r# (in-naturals)))<br/>    (for/vector #:length w ((cl rw) (c# (in-naturals)))<br/>      (case cl<br/>        ((#\\_) (if (&lt; (random) p-sprout) #\\T #\\_))<br/>        ((#\\*) #\\_)<br/>        ((#\\T)<br/>         (cond<br/>           [(has-burning-neighbour? forest r# c# w) #\\*]<br/>           [(&lt; (random) f-combust) #\\*]<br/>           [else #\\T]))))))<br/>\u00a0<br/>(define (render-forest state)<br/>  (for/fold<br/>      ((scn (empty-scene<br/>             (* (vector-length state) 8)                         <br/>             (* (vector-length (vector-ref state 0)) 8)<br/>             'black)))<br/>\u00a0<br/>    ((rw state) (r# (in-naturals)))<br/>    (for/fold<br/>        ((scn scn))<br/>      ((cl rw) (c# (in-naturals)))<br/>      (place-image (circle 4 'solid<br/>                           (case cl<br/>                             ((#\\_) 'brown)<br/>                             ((#\\T) 'green)<br/>                             ((#\\*) 'red)))<br/>                   (+ 4 (* c# 8)) (+ 4 (* r# 8)) scn))))<br/>\u00a0<br/>(define (forest-fire p-tree p-sprout f-combust w)<br/>  (big-bang<br/>   (initial-forest w p-tree)\u00a0;; initial state<br/>   [on-tick (lambda (state)<br/>             \u00a0;(displayln state)<br/>              (fire-tick state p-sprout f-combust w))]<br/>   [to-draw render-forest]))<br/>\u00a0<br/>(forest-fire 0 1/8 1/1024 50)</pre>"}, {"lang": "REXX", "loc": 1, "block": "<pre>             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500elided version\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n             \u251c\u2500\u2500\u2500 original version has many more options &amp; enhanced displays. \u2500\u2500\u2500\u2524\n             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre>"}, {"lang": "Ring", "loc": 86, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Forest fire<br/>\u00a0<br/>load \"guilib.ring\"<br/>load \"stdlib.ring\"<br/>\u00a0<br/>paint = null<br/>\u00a0<br/>new qapp <br/>        {<br/>        win1 = new qwidget() {<br/>                  setwindowtitle(\"Forest fire\")<br/>                  setgeometry(100,100,500,600)<br/>                  label1 = new qlabel(win1) {<br/>                              setgeometry(10,10,400,400)<br/>                              settext(\"\")<br/>                  }<br/>                  new qpushbutton(win1) {<br/>                          setgeometry(150,500,100,30)<br/>                          settext(\"draw\")<br/>                          setclickevent(\"draw()\")<br/>                  }<br/>                  show()<br/>        }<br/>        exec()<br/>        }<br/>\u00a0<br/>func draw<br/>        p1 = new qpicture()<br/>               color = new qcolor() {<br/>               setrgb(0,0,255,255)<br/>        }<br/>        pen = new qpen() {<br/>                 setcolor(color)<br/>                 setwidth(1)<br/>        }<br/>        paint = new qpainter() {<br/>                  begin(p1)<br/>                  setpen(pen)<br/>\u00a0<br/>pregen = newlist(200,200)<br/>newgen = newlist(200,200)<br/>\u00a0<br/> for gen = 1 to 20<br/>      see \"gen = \" + gen + nl<br/>      for x = 1 to 199<br/>           for y = 1 to 199<br/>                 switch pregen[x][y]<br/>                            on 0<br/>                                 if random(9)/10 &gt; 0.099 <br/>                                    newgen[x][y] = 1 <br/>                                    color = new qcolor()<br/>                                    color.setrgb(0,128,0,255)<br/>                                    pen.setcolor(color)<br/>                                    setpen(pen)    <br/>                                    drawpoint(x,y)<br/>                                 ok<br/>                            on 2<br/>                                 newgen[x][y] = 0<br/>                                 color = new qcolor()<br/>                                 color.setrgb(165,42,42,255)<br/>                                 pen.setcolor(color)<br/>                                 setpen(pen)    <br/>                                 drawpoint(x,y)                    <br/>                            on 1<br/>                                 if pregen[x][y] = 2 or pregen[x][y]   = 2 or pregen[x][y+1] = 2 or<br/>                                    pregen[x][y]   = 2 or pregen[x][y+1]   = 2 or pregen[x+1][y] = 2 or<br/>                                    pregen[x+1][y]   = 2 or pregen[x+1][y+1] = 2 or random(9)/10 &gt; 0.0999 <br/>                                    color = new qcolor()<br/>                                    color.setrgb(255,0,0,255) <br/>                                    pen.setcolor(color)<br/>                                    setpen(pen)    <br/>                                    drawpoint(x,y)<br/>                                    newgen[x][y] = 2<br/>                                 ok<br/>                 off<br/>                 pregen[x][y] = newgen[x][y]<br/>           next <br/>      next <br/>next <br/>\u00a0<br/>        endpaint()<br/>        }<br/>        label1 { setpicture(p1) show() }<br/>        return<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 44, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Forest_Fire<br/>  Neighborhood = <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">product</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>  States = <span class=\"br0\">{</span>empty:<span class=\"st0\">\" \"</span>, tree:<span class=\"st0\">\"T\"</span>, fire:<span class=\"st0\">\"#\"</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>xsize, ysize=xsize, <span class=\"kw3\">p</span>=<span class=\"nu0\">0.5</span>, f=<span class=\"nu0\">0.01</span><span class=\"br0\">)</span><br/>    <span class=\"re1\">@xsize</span>, <span class=\"re1\">@ysize</span>, @<span class=\"kw3\">p</span>, <span class=\"re1\">@f</span> = xsize, ysize, <span class=\"kw3\">p</span>, f<br/>    <span class=\"re1\">@field</span> = <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>xsize<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"kw3\">Array</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>ysize<span class=\"sy0\">+</span><span class=\"nu0\">1</span>, <span class=\"re3\">:empty</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"re1\">@generation</span> = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> evolve<br/>    <span class=\"re1\">@generation</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>    work = <span class=\"re1\">@field</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>row<span class=\"sy0\">|</span> row.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>cell<span class=\"sy0\">|</span> cell<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"nu0\">0</span><a class=\"__cf_email__\" data-cfemail=\"bd939393fdc5ced4c7d8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>      <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"nu0\">0</span><a class=\"__cf_email__\" data-cfemail=\"cde3e3e38db4bea4b7a8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>        <span class=\"kw1\">case</span> <a class=\"__cf_email__\" data-cfemail=\"fd9e989191c0bd9b94989199\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>        <span class=\"kw1\">when</span> <span class=\"re3\">:empty</span><br/>          cell = <span class=\"re3\">:tree</span>  <span class=\"kw1\">if</span> <span class=\"kw3\">rand</span> <span class=\"sy0\">&lt;</span> @<span class=\"kw3\">p</span><br/>        <span class=\"kw1\">when</span> <span class=\"re3\">:tree</span><br/>          cell = <span class=\"re3\">:fire</span>  <span class=\"kw1\">if</span> fire?<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span><br/>          cell = <span class=\"re3\">:empty</span><br/>        <span class=\"kw1\">end</span><br/>        work<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = cell<br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"re1\">@field</span> = work<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> fire?<span class=\"br0\">(</span>i,j<span class=\"br0\">)</span><br/>    <span class=\"kw3\">rand</span> <span class=\"sy0\">&lt;</span> <span class=\"re1\">@f</span> <span class=\"kw1\">or</span> Neighborhood.<span class=\"me1\">any</span>? <span class=\"br0\">{</span><span class=\"sy0\">|</span>di,dj<span class=\"sy0\">|</span> <span class=\"re1\">@field</span><span class=\"br0\">[</span>i<span class=\"sy0\">+</span>di<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy0\">+</span>dj<span class=\"br0\">]</span> == <span class=\"re3\">:fire</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> display<br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"Generation\u00a0: #@generation\"</span><br/>    <span class=\"kw3\">puts</span> <span class=\"re1\">@xsize</span>.<span class=\"me1\">times</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <span class=\"re1\">@ysize</span>.<span class=\"me1\">times</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>j<span class=\"sy0\">|</span> States<span class=\"br0\">[</span>@field<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>forest = Forest_Fire.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>,<span class=\"nu0\">30</span><span class=\"br0\">)</span><br/><span class=\"nu0\">10</span>.<span class=\"me1\">times</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>  forest.<span class=\"me1\">evolve</span><br/>  forest.<span class=\"me1\">display</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 159, "block": "<pre class=\"text highlighted_source\">extern crate rand;<br/>extern crate ansi_term;<br/>\u00a0<br/>#[derive(Copy, Clone, PartialEq)]<br/>enum Tile {<br/>    Empty,<br/>    Tree,<br/>    Burning,<br/>    Heating,<br/>}<br/>\u00a0<br/>impl fmt::Display for Tile {<br/>    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {<br/>        let output = match *self {<br/>            Empty =&gt; Black.paint(\" \"),<br/>            Tree =&gt; Green.bold().paint(\"T\"),<br/>            Burning =&gt; Red.bold().paint(\"B\"),<br/>            Heating =&gt; Yellow.bold().paint(\"T\"),<br/>        };<br/>        write!(f, \"{}\", output)<br/>    }<br/>}<br/>\u00a0<br/>// This has been added to the nightly rust build as of March 24, 2016<br/>// Remove when in stable branch!<br/>trait Contains&lt;T&gt; {<br/>    fn contains(&amp;self, T) -&gt; bool;<br/>}<br/>\u00a0<br/>impl&lt;T: PartialOrd&gt; Contains&lt;T&gt; for std::ops::Range&lt;T&gt; {<br/>    fn contains(&amp;self, elt: T) -&gt; bool {<br/>        self.start &lt;= elt &amp;&amp; elt &lt; self.end<br/>    }<br/>}<br/>\u00a0<br/>const NEW_TREE_PROB: f32 = 0.01;<br/>const INITIAL_TREE_PROB: f32 = 0.5;<br/>const FIRE_PROB: f32 = 0.001;<br/>\u00a0<br/>const FOREST_WIDTH: usize = 60;<br/>const FOREST_HEIGHT: usize = 30;<br/>\u00a0<br/>const SLEEP_MILLIS: u64 = 25;<br/>\u00a0<br/>use std::fmt;<br/>use std::io;<br/>use std::io::prelude::*;<br/>use std::io::BufWriter;<br/>use std::io::Stdout;<br/>use std::process::Command;<br/>use std::time::Duration;<br/>use rand::Rng;<br/>use ansi_term::Colour::*;<br/>\u00a0<br/>use Tile::{Empty, Tree, Burning, Heating};<br/>\u00a0<br/>fn main() {<br/>    let sleep_duration = Duration::from_millis(SLEEP_MILLIS);<br/>    let mut forest = [[Tile::Empty; FOREST_WIDTH]; FOREST_HEIGHT];<br/>\u00a0<br/>    prepopulate_forest(&amp;mut forest);<br/>    print_forest(forest, 0);<br/>\u00a0<br/>    std::thread::sleep(sleep_duration);<br/>\u00a0<br/>    for generation in 1.. {<br/>\u00a0<br/>        for row in forest.iter_mut() {<br/>            for tile in row.iter_mut() {<br/>                update_tile(tile);<br/>            }<br/>        }<br/>\u00a0<br/>        for y in 0..FOREST_HEIGHT {<br/>            for x in 0..FOREST_WIDTH {<br/>                if forest[y][x] == Burning {<br/>                    heat_neighbors(&amp;mut forest, y, x);<br/>                }<br/>            }<br/>        }<br/>\u00a0<br/>        print_forest(forest, generation);<br/>\u00a0<br/>        std::thread::sleep(sleep_duration);<br/>    }<br/>}<br/>\u00a0<br/>fn prepopulate_forest(forest: &amp;mut [[Tile; FOREST_WIDTH]; FOREST_HEIGHT]) {<br/>    for row in forest.iter_mut() {<br/>        for tile in row.iter_mut() {<br/>            *tile = if prob_check(INITIAL_TREE_PROB) {<br/>                Tree<br/>            } else {<br/>                Empty<br/>            };<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>fn update_tile(tile: &amp;mut Tile) {<br/>    *tile = match *tile {<br/>        Empty =&gt; {<br/>            if prob_check(NEW_TREE_PROB) == true {<br/>                Tree<br/>            } else {<br/>                Empty<br/>            }<br/>        }<br/>        Tree =&gt; {<br/>            if prob_check(FIRE_PROB) == true {<br/>                Burning<br/>            } else {<br/>                Tree<br/>            }<br/>        }<br/>        Burning =&gt; Empty,<br/>        Heating =&gt; Burning,<br/>    }<br/>}<br/>\u00a0<br/>fn heat_neighbors(forest: &amp;mut [[Tile; FOREST_WIDTH]; FOREST_HEIGHT], y: usize, x: usize) {<br/>    let neighbors = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)];<br/>\u00a0<br/>    for &amp;(xoff, yoff) in neighbors.iter() {<br/>        let nx: i32 = (x as i32) + xoff;<br/>        let ny: i32 = (y as i32) + yoff;<br/>        if (0..FOREST_WIDTH as i32).contains(nx) &amp;&amp; (0..FOREST_HEIGHT as i32).contains(ny) &amp;&amp;<br/>           forest[ny as usize][nx as usize] == Tree {<br/>            forest[ny as usize][nx as usize] = Heating<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>fn prob_check(chance: f32) -&gt; bool {<br/>    let roll = rand::thread_rng().gen::&lt;f32&gt;();<br/>    if chance - roll &gt; 0.0 {<br/>        true<br/>    } else {<br/>        false<br/>    }<br/>}<br/>\u00a0<br/>fn print_forest(forest: [[Tile; FOREST_WIDTH]; FOREST_HEIGHT], generation: u32) {<br/>    let mut writer = BufWriter::new(io::stdout());<br/>    clear_screen(&amp;mut writer);<br/>    writeln!(writer, \"Generation: {}\", generation + 1).unwrap();<br/>    for row in forest.iter() {<br/>        for tree in row.iter() {<br/>            write!(writer, \"{}\", tree).unwrap();<br/>        }<br/>        writer.write(b\"\\n\").unwrap();<br/>    }<br/>}<br/>\u00a0<br/>fn clear_screen(writer: &amp;mut BufWriter&lt;Stdout&gt;) {<br/>    let output = Command::new(\"clear\").output().unwrap();<br/>    write!(writer, \"{}\", String::from_utf8_lossy(&amp;output.stdout)).unwrap();<br/>}<br/>\u00a0</pre>"}, {"lang": "Sather", "loc": 196, "block": "<pre class=\"text highlighted_source\">class FORESTFIRE is<br/>  private attr fields:ARRAY{ARRAY{INT}};<br/>  private attr swapu:INT;<br/>  private attr rnd:RND;<br/>  private attr verbose:BOOL;<br/>  private attr generation:INT;<br/>  readonly attr width, height:INT;<br/>  const empty:INT\u00a0:= 0;<br/>  const tree:INT\u00a0:= 1;<br/>  const burning:INT\u00a0:= 2;<br/>\u00a0<br/>  attr prob_tree, prob_p, prob_f\u00a0:FLT;<br/>\u00a0<br/>  create(w, h:INT, v:BOOL):SAME is<br/>    res:FORESTFIRE\u00a0:= new;<br/>    res.fields\u00a0:= #(2);<br/>    res.fields[0]\u00a0:= #(w*h);<br/>    res.fields[1]\u00a0:= #(w*h);<br/>    res.width\u00a0:= w; res.height\u00a0:= h;<br/>    res.swapu\u00a0:= 0;<br/>    res.prob_tree\u00a0:= 0.55;<br/>    res.prob_p\u00a0:= 0.001;<br/>    res.prob_f\u00a0:= 0.00001;<br/>    res.rnd\u00a0:= #RND;<br/>    res.verbose\u00a0:= v;<br/>    res.generation\u00a0:= 0;<br/>    res.initfield;<br/>    return res;<br/>  end;<br/>\u00a0<br/>  -- to give variability<br/>  seed(i:INT) is<br/>    rnd.seed(i);<br/>  end;<br/>\u00a0<br/>  create(w, h:INT):SAME is<br/>    res\u00a0::= create(w, h, false);<br/>    return res;<br/>  end; <br/>\u00a0<br/>  initfield is<br/>    n\u00a0::= 0;<br/>    swapu\u00a0:= 0;<br/>    if verbose and generation &gt; 0 then<br/>      #ERR + \"Previous generation \" + generation + \"\\n\";<br/>    end;<br/>    generation\u00a0:= 0;<br/>    loop i\u00a0::= 0.upto!(width-1);<br/>      loop j\u00a0::= 0.upto!(height-1);<br/>        if rnd.uniform &gt; prob_tree.fltd then<br/>          cset(i, j, empty);<br/>        else<br/>\t  n\u00a0:= n + 1;<br/>          cset(i, j, tree);<br/>        end;<br/>      end;<br/>    end;<br/>    if verbose then<br/>      #ERR + #FMT(\"Field size is\u00a0%dx%d (%d)\", width, height, size) + \"\\n\";<br/>      #ERR + \"There are \" + n + \" trees (\" + (100.0*n.flt/size.flt) + \"%)\\n\";<br/>      #ERR + \"prob_tree = \" + prob_tree + \"\\n\";<br/>      #ERR + \"prob_f = \" + prob_f + \"\\n\";<br/>      #ERR + \"prob_p = \" + prob_p + \"\\n\";<br/>      #ERR + \"ratio = \" + prob_p/prob_f + \"\\n\";<br/>    end;<br/>  end;<br/>\u00a0<br/>  field:ARRAY{INT} is<br/>    return fields[swapu];<br/>  end;<br/>\u00a0<br/>  ofield:ARRAY{INT} is<br/>    return fields[swapu.bxor(1)];<br/>  end;<br/>\u00a0<br/>  size:INT is<br/>    return width*height;<br/>  end;<br/>\u00a0<br/>  set(i, j, t:INT)<br/>    pre bcheck(i, j) <br/>  is<br/>    ofield[j*width + i]\u00a0:= t;<br/>  end;<br/>\u00a0<br/>  cset(i, j, t:INT)<br/>    pre bcheck(i, j)<br/>  is<br/>    field[j*width + i]\u00a0:= t;<br/>  end;<br/>\u00a0<br/>  private bcheck(i, j:INT):BOOL is<br/>    if i.is_between(0, width-1) and j.is_between(0, height-1) then<br/>      return true; -- is inside<br/>    else<br/>      return false; -- is outside<br/>    end;<br/>  end;<br/>\u00a0<br/>  get(i, j:INT):INT is<br/>    if ~bcheck(i, j) then<br/>      return empty;<br/>    end;<br/>    return field[j*width + i];<br/>  end;<br/>\u00a0<br/>  oget(i, j:INT):INT is<br/>    if ~bcheck(i, j) then<br/>      return empty;<br/>    end;<br/>    return ofield[j*width + i];    <br/>  end;<br/>\u00a0<br/>  burning_neighbor(i, j:INT):BOOL is<br/>    loop x\u00a0::= (-1).upto!(1);<br/>      loop y\u00a0::= (-1).upto!(1);<br/>        if x /= y then<br/>          if get(i+x, j+y) = burning then return true; end;<br/>        end;<br/>      end;<br/>    end;<br/>    return false;<br/>  end;<br/>\u00a0<br/>  evolve is<br/>    bp\u00a0::= 0;<br/>    loop i\u00a0::= 0.upto!(width-1);<br/>      loop j\u00a0::= 0.upto!(height-1);<br/>\tcase get(i, j)<br/>        when burning then set(i, j, empty); bp\u00a0:= bp + 1;<br/>        when empty then<br/>          if rnd.uniform &gt; prob_p.fltd then <br/>            set(i, j, empty);<br/>          else<br/>            set(i, j, tree);<br/>          end;<br/>        when tree then<br/>          if burning_neighbor(i, j) then<br/>            set(i, j, burning);<br/>          else<br/>            if rnd.uniform &gt; prob_f.fltd then<br/>              set(i, j, tree);<br/>            else<br/>              set(i, j, burning);<br/>            end;<br/>          end;<br/>        else <br/>          #ERR + \"corrupted field\\n\";<br/>        end;<br/>      end;<br/>    end;<br/>    generation\u00a0:= generation + 1;<br/>    if verbose then<br/>      if bp &gt; 0 then<br/>        #ERR + #FMT(\"Burning at gen\u00a0%d:\u00a0%d\\n\", generation-1, bp);<br/>      end;<br/>    end;<br/>    swapu\u00a0:= swapu.bxor(1);<br/>  end;<br/>\u00a0<br/>  str:STR is<br/>    s\u00a0::= \"\";<br/>    loop j\u00a0::= 0.upto!(height -1);<br/>      loop i\u00a0::= 0.upto!(width -1);<br/>        case get(i, j)<br/>          when empty then s\u00a0:= s + \".\";<br/>          when tree then s\u00a0:= s + \"Y\";<br/>          when burning then s\u00a0:= s + \"*\";<br/>        end;<br/>      end;<br/>      s\u00a0:= s + \"\\n\";<br/>    end;<br/>    s\u00a0:= s + \"\\n\";<br/>    return s;<br/>  end;<br/>\u00a0<br/>end;<br/>\u00a0<br/>class MAIN is<br/>\u00a0<br/>  main is<br/>    forestfire\u00a0::= #FORESTFIRE(74, 40);<br/>    -- #FORESTFIRE(74, 40, true) to have some extra info<br/>    -- (redirecting stderr to a file is a good idea!)    <br/>\u00a0<br/>    #OUT + forestfire.str;<br/>    -- evolve 1000 times<br/>    loop i\u00a0::= 1000.times!; <br/>      forestfire.evolve;<br/>      -- ANSI clear screen sequence<br/>      #OUT + 0x1b.char + \"[H\" + 0x1b.char + \"[2J\";<br/>      #OUT + forestfire.str;<br/>    end;<br/>  end;<br/>\u00a0<br/>end;</pre>"}, {"lang": "Scala", "loc": 28, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Forest<span class=\"br0\">(</span>matrix<span class=\"sy0\">:</span>Array<span class=\"br0\">[</span>Array<span class=\"br0\">[</span>Char<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> Forest.<span class=\"sy0\">_</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f<span class=\"sy0\">=</span><span class=\"nu0\">0.01</span><span class=\"sy0\">;</span>\t <span class=\"co1\">// auto combustion probability</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p<span class=\"sy0\">=</span><span class=\"nu0\">0.1</span><span class=\"sy0\">;</span>\t <span class=\"co1\">// tree creation probability</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rows<span class=\"sy0\">=</span>matrix.<span class=\"me1\">size</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cols<span class=\"sy0\">=</span>matrix<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>.<span class=\"me1\">size</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> evolve<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>Forest<span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Forest<span class=\"br0\">(</span>Array.<span class=\"me1\">tabulate</span><span class=\"br0\">(</span>rows, cols<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"br0\">(</span>y,x<span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span><br/>    matrix<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> EMPTY <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>Random.<span class=\"me1\">nextDouble</span><span class=\"sy0\">&lt;</span>p<span class=\"br0\">)</span> TREE <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> EMPTY<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> BURNING <span class=\"sy0\">=&gt;</span> EMPTY<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> TREE <span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>neighbours<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span>.<span class=\"me1\">exists</span><span class=\"br0\">(</span><span class=\"sy0\">_==</span>BURNING<span class=\"br0\">)</span><span class=\"br0\">)</span> BURNING <br/>                  <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>Random.<span class=\"me1\">nextDouble</span><span class=\"sy0\">&lt;</span>f<span class=\"br0\">)</span> BURNING <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> TREE<br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> neighbours<span class=\"br0\">(</span>x<span class=\"sy0\">:</span>Int, y<span class=\"sy0\">:</span>Int<span class=\"br0\">)</span><span class=\"sy0\">=</span>matrix slice<span class=\"br0\">(</span>y-<span class=\"nu0\">1</span>, y+<span class=\"nu0\">2</span><span class=\"br0\">)</span> map<span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">slice</span><span class=\"br0\">(</span>x-<span class=\"nu0\">1</span>, x+<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> flatten<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>matrix map <span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> mkString <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Forest<span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> TREE<span class=\"sy0\">=</span><span class=\"st0\">'T'</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> BURNING<span class=\"sy0\">=</span><span class=\"st0\">'#'</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> EMPTY<span class=\"sy0\">=</span><span class=\"st0\">'.'</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> apply<span class=\"br0\">(</span>x<span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><span class=\"nu0\">30</span>, y<span class=\"sy0\">:</span>Int<span class=\"sy0\">=</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Forest<span class=\"br0\">(</span>Array.<span class=\"me1\">tabulate</span><span class=\"br0\">(</span>y, x<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span>y,x<span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>Random.<span class=\"me1\">nextDouble</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">0.5</span><span class=\"br0\">)</span> TREE <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> EMPTY<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sidef", "loc": 61, "block": "<pre class=\"ruby highlighted_source\">define w = <span class=\"st0\">`tput cols`</span>.<span class=\"me1\">to_i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>define h = <span class=\"st0\">`tput lines`</span>.<span class=\"me1\">to_i</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>define r = <span class=\"st0\">\"<span class=\"es0\">\\0</span>33[H\"</span><br/>\u00a0<br/>define red = <span class=\"st0\">\"<span class=\"es0\">\\0</span>33[31m\"</span><br/>define green = <span class=\"st0\">\"<span class=\"es0\">\\0</span>33[32m\"</span><br/>define yellow = <span class=\"st0\">\"<span class=\"es0\">\\0</span>33[33m\"</span><br/>\u00a0<br/>define chars = <span class=\"br0\">[</span><span class=\"st0\">' '</span>, green<span class=\"sy0\">+</span><span class=\"st0\">'*'</span>, yellow<span class=\"sy0\">+</span><span class=\"st0\">'&amp;'</span>, red<span class=\"sy0\">+</span><span class=\"st0\">'&amp;'</span><span class=\"br0\">]</span><br/>\u00a0<br/>define tree_prob = <span class=\"nu0\">0.05</span><br/>define burn_prob = <span class=\"nu0\">0.0002</span><br/>\u00a0<br/>enum <span class=\"sy0\">|</span>Empty, Tree, Heating, Burning<span class=\"sy0\">|</span><br/>\u00a0<br/>define dirs = <span class=\"br0\">[</span><br/>    <span class=\"sy0\">%</span>n<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"sy0\">%</span>n<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"sy0\">%</span>n<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"sy0\">%</span>n<span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>    <span class=\"sy0\">%</span>n<span class=\"br0\">(</span><span class=\"nu0\">0</span>   <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"sy0\">%</span>n<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"sy0\">%</span>n<span class=\"br0\">(</span><span class=\"nu0\">1</span>  <span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"sy0\">%</span>n<span class=\"br0\">(</span><span class=\"nu0\">1</span>  <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/><span class=\"br0\">]</span><br/>\u00a0<br/>var forest = h.<span class=\"me1\">of</span> <span class=\"br0\">{</span> w.<span class=\"me1\">of</span> <span class=\"br0\">{</span> <span class=\"nu0\">1</span>.<span class=\"kw3\">rand</span> <span class=\"sy0\">&lt;</span> tree_prob\u00a0? Tree\u00a0: Empty <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>var range_h = h.<span class=\"me1\">range</span><br/>var range_w = w.<span class=\"me1\">range</span><br/>\u00a0<br/>func iterate <span class=\"br0\">{</span><br/>    var new = h.<span class=\"me1\">of</span><span class=\"br0\">{</span> w.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> range_h <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> range_w <span class=\"br0\">{</span><br/>            given <span class=\"br0\">(</span>new<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = forest<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>              <span class=\"kw1\">when</span> <span class=\"br0\">(</span>Tree<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"nu0\">1</span>.<span class=\"kw3\">rand</span> <span class=\"sy0\">&lt;</span> burn_prob <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>new<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = Heating; <span class=\"kw1\">next</span><span class=\"br0\">)</span><br/>                dirs.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>pair<span class=\"sy0\">|</span><br/>                    var y = pair<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>i<br/>                    range_h.<span class=\"me1\">contains</span><span class=\"br0\">(</span>y<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw1\">next</span><br/>                    var x = pair<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>j<br/>                    range_w.<span class=\"me1\">contains</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw1\">next</span><br/>                    forest<span class=\"br0\">[</span>y<span class=\"br0\">]</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span> == Heating <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>new<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = Heating; <span class=\"kw1\">break</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><br/>              <span class=\"br0\">}</span><br/>              <span class=\"kw1\">when</span> <span class=\"br0\">(</span>Heating<span class=\"br0\">)</span>            <span class=\"br0\">{</span> new<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = Burning <span class=\"br0\">}</span><br/>              <span class=\"kw1\">when</span> <span class=\"br0\">(</span>Burning<span class=\"br0\">)</span>            <span class=\"br0\">{</span> new<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = Empty   <span class=\"br0\">}</span><br/>              <span class=\"kw1\">case</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>.<span class=\"kw3\">rand</span> <span class=\"sy0\">&lt;</span> tree_prob<span class=\"br0\">)</span> <span class=\"br0\">{</span> new<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = Tree    <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    forest = new<br/><span class=\"br0\">}</span><br/>\u00a0<br/>STDOUT.<span class=\"me1\">autoflush</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><br/>\u00a0<br/>func init_forest <span class=\"br0\">{</span><br/>    <span class=\"kw3\">print</span> r<br/>    forest.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>row<span class=\"sy0\">|</span><br/>        <span class=\"kw3\">print</span> chars<span class=\"br0\">[</span>row<span class=\"br0\">]</span><br/>        <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\0</span>33[E<span class=\"es0\">\\0</span>33[1G\"</span><br/>    <span class=\"br0\">}</span><br/>    iterate<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">loop</span> <span class=\"br0\">{</span> init_forest<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 78, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"co1\"># Build a grid</span><br/><span class=\"kw1\">proc</span> makeGrid <span class=\"br0\">{</span>w h <span class=\"br0\">{</span>treeProbability <span class=\"nu0\">0.5</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> grid gridW gridH<br/>    <span class=\"kw1\">set</span> gridW <span class=\"re0\">$w</span><br/>    <span class=\"kw1\">set</span> gridH <span class=\"re0\">$h</span><br/>    <span class=\"kw1\">set</span> grid <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$h</span> <span class=\"br0\">[</span>lrepeat <span class=\"re0\">$w</span> <span class=\"st0\">\" \"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$w</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> y <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$h</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$treeProbability</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lset</span> grid <span class=\"re0\">$y</span> <span class=\"re0\">$x</span> <span class=\"st0\">\"#\"</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Evolve the grid (builds a copy, then overwrites)</span><br/><span class=\"kw1\">proc</span> evolveGrid <span class=\"br0\">{</span><span class=\"br0\">{</span>fireProbability <span class=\"nu0\">0.01</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>plantProbability <span class=\"nu0\">0.05</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> grid gridW gridH<br/>    <span class=\"kw1\">set</span> newGrid <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> y <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$gridH</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> y<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> row <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> x <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$gridW</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> x<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">switch</span> -exact -- <span class=\"br0\">[</span><span class=\"kw1\">set</span> s <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$grid</span> <span class=\"re0\">$y</span> <span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"st0\">\" \"</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$plantProbability</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">set</span> s <span class=\"st0\">\"#\"</span><br/>\t\t    <span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"st0\">\"#\"</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>burningNeighbour<span class=\"sy0\">?</span> <span class=\"re0\">$x</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span> || rand<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$fireProbability</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">set</span> s <span class=\"st0\">\"o\"</span><br/>\t\t    <span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"st0\">\"o\"</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">set</span> s <span class=\"st0\">\" \"</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw2\">lappend</span> row <span class=\"re0\">$s</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw2\">lappend</span> newGrid <span class=\"re0\">$row</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> grid <span class=\"re0\">$newGrid</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># We supply the neighbourhood model as an optional parameter (not used...)</span><br/><span class=\"kw1\">proc</span> burningNeighbour<span class=\"sy0\">?</span> <span class=\"br0\">{</span><br/>    x y<br/>    <span class=\"br0\">{</span>neighbourhoodModel <span class=\"br0\">{</span>-<span class=\"nu0\">1</span> -<span class=\"nu0\">1</span>  -<span class=\"nu0\">1</span> <span class=\"nu0\">0</span>  -<span class=\"nu0\">1</span> <span class=\"nu0\">1</span>  <span class=\"nu0\">0</span> -<span class=\"nu0\">1</span>  <span class=\"nu0\">0</span> <span class=\"nu0\">1</span>  <span class=\"nu0\">1</span> -<span class=\"nu0\">1</span>  <span class=\"nu0\">1</span> <span class=\"nu0\">0</span>  <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> grid gridW gridH<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>dx dy<span class=\"br0\">}</span> <span class=\"re0\">$neighbourhoodModel</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> i <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$x</span> + <span class=\"re0\">$dx</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> || <span class=\"re0\">$i</span> <span class=\"sy0\">&gt;</span>= <span class=\"re0\">$gridW</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t<span class=\"kw1\">set</span> j <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$y</span> + <span class=\"re0\">$dy</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> || <span class=\"re0\">$j</span> <span class=\"sy0\">&gt;</span>= <span class=\"re0\">$gridH</span><span class=\"br0\">}</span> <span class=\"kw1\">continue</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$grid</span> <span class=\"re0\">$j</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span> eq <span class=\"st0\">\"o\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> printGrid <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">global</span> grid<br/>    <span class=\"kw1\">foreach</span> row <span class=\"re0\">$grid</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$row</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Simple main loop; press Return for the next step or send an EOF to stop</span><br/>makeGrid <span class=\"nu0\">70</span> <span class=\"nu0\">8</span><br/><span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>    evolveGrid<br/>    printGrid<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">gets</span> stdin line<span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"kw1\">break</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "uBasic/4tH", "loc": 107, "block": "<pre class=\"text highlighted_source\">B = 1                                  ' A burning tree<br/>E = 16                                 ' An empty space<br/>T = 256                                ' A living tree<br/>\u00a0<br/>Input \"%Chance a tree will burn: \";F   ' Enter chance of combustion<br/>Input \"%Chance a tree will grow: \";P   ' Enter chance of a new tree<br/>\u00a0<br/>Proc _CreateForest                     ' Now create a new forest<br/>\u00a0<br/>Do<br/>  Proc _PrintForest                    ' Print the current forest<br/>  Input \"Press '1' to continue, '0' to quit: \";A<br/>  Proc _BurnForest                     ' See what happens<br/>  Proc _UpdateForest                   ' Update from buffer<br/>  While A                              ' Until the user has enough<br/>Loop                                   ' and answers with zero<br/>\u00a0<br/>End<br/>\u00a0<br/>\u00a0<br/>_CreateForest                          ' Create an entire new forest<br/>  Local(1)<br/>\u00a0<br/>  For <a class=\"__cf_email__\" data-cfemail=\"761736\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0 to 120                    ' For each main cell determine<br/>    If RND(100) &lt; P Then               ' if a tree will grow here<br/>      @(<a class=\"__cf_email__\" data-cfemail=\"e180a1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = T                        ' Ok, we got a tree<br/>    Else                               ' Otherwise it remains empty<br/>      @(<a class=\"__cf_email__\" data-cfemail=\"cfae8f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = E<br/>    EndIf<br/>  Next<br/>Return<br/>\u00a0<br/>\u00a0<br/>_BurnForest                            ' Now the forest starts to burn<br/>  Local(2)<br/>\u00a0<br/>  For <a class=\"__cf_email__\" data-cfemail=\"086948\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0 To 10                     ' Loop vertical<br/>    For <a class=\"__cf_email__\" data-cfemail=\"335173\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0 To 10                   ' Loop horizontal<br/>      If @((<a class=\"__cf_email__\" data-cfemail=\"6e0f2e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * 11) + <a class=\"__cf_email__\" data-cfemail=\"066446\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = B Then @((<a class=\"__cf_email__\" data-cfemail=\"f190b1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * 11) + <a class=\"__cf_email__\" data-cfemail=\"adcfed\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 121) = E<br/>                                       ' A tree has been burned flat<br/>      If @((<a class=\"__cf_email__\" data-cfemail=\"ff9ebf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * 11) + <a class=\"__cf_email__\" data-cfemail=\"d5b795\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = E Then    ' For each open space determine<br/>        If RND(100) &lt; P Then           ' if a tree will grow here<br/>          @((<a class=\"__cf_email__\" data-cfemail=\"3a5b7a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * 11) + <a class=\"__cf_email__\" data-cfemail=\"84e6c4\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 121) = T<br/>        Else                           ' Otherwise it remains an empty space<br/>          @((<a class=\"__cf_email__\" data-cfemail=\"8beacb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * 11) + <a class=\"__cf_email__\" data-cfemail=\"8be9cb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 121) = E<br/>        EndIf<br/>      EndIf<br/>\u00a0<br/>      If @((<a class=\"__cf_email__\" data-cfemail=\"3b5a7b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * 11) + <a class=\"__cf_email__\" data-cfemail=\"432103\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = T Then    ' A tree grows here<br/>        If RND(100) &lt; F Then           ' See if it will spontaneously combust<br/>          @((<a class=\"__cf_email__\" data-cfemail=\"ceaf8e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * 11) + <a class=\"__cf_email__\" data-cfemail=\"442604\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 121) = B<br/>        Else                           ' No, then see if it got any burning<br/>          @((<a class=\"__cf_email__\" data-cfemail=\"7c1d3c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * 11) + <a class=\"__cf_email__\" data-cfemail=\"fc9ebc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> + 121) = FUNC(_BurningTrees(<a class=\"__cf_email__\" data-cfemail=\"c7a687\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <a class=\"__cf_email__\" data-cfemail=\"d3b193\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>))<br/>        EndIf                          ' neighbors that will set it ablaze<br/>      EndIf<br/>\u00a0<br/>    Next<br/>  Next<br/>Return<br/>\u00a0<br/>\u00a0<br/>_UpdateForest                          ' Update the main buffer<br/>  Local(1)<br/>\u00a0<br/>  For <a class=\"__cf_email__\" data-cfemail=\"3a5b7a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0 To 120                    ' Move from temporary buffer to main<br/>    @(<a class=\"__cf_email__\" data-cfemail=\"caab8a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = @(<a class=\"__cf_email__\" data-cfemail=\"dabb9a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+121)<br/>  Next<br/>Return<br/>\u00a0<br/>\u00a0<br/>_PrintForest                           ' Print the forest on screen<br/>  Local(2)<br/>  Print                                ' Let's make a little space<br/>\u00a0<br/>  For <a class=\"__cf_email__\" data-cfemail=\"93f2d3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0 To 10                     ' Loop vertical<br/>    For <a class=\"__cf_email__\" data-cfemail=\"076547\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = 0 To 10                   ' Loop horizontal<br/>      If @((<a class=\"__cf_email__\" data-cfemail=\"97f6d7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * 11) + <a class=\"__cf_email__\" data-cfemail=\"610321\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = B Then    ' This is a burning tree<br/>        Print \" *\";<br/>      Else                             ' Otherwise..<br/>        If @((<a class=\"__cf_email__\" data-cfemail=\"056445\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * 11) + <a class=\"__cf_email__\" data-cfemail=\"0d6f4d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = E Then  ' It may be an empty space<br/>          Print \"  \";<br/>        Else                           ' Otherwise<br/>          Print \" @\";                  ' It has to be a tree<br/>        EndIf<br/>      EndIf<br/>    Next<br/>    Print                              ' Terminate row<br/>  Next<br/>\u00a0<br/>  Print                                ' Terminate map<br/>Return<br/>\u00a0<br/>\u00a0<br/>_BurningTrees Param(2)                 ' Check the trees environment<br/>  Local(2)<br/>\u00a0<br/>  For <a class=\"__cf_email__\" data-cfemail=\"422102\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"d4b594f9e5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> To <a class=\"__cf_email__\" data-cfemail=\"157455\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+1                ' Loop vertical -1/+1<br/>    If <a class=\"__cf_email__\" data-cfemail=\"751635\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt; 0 Then Continue            ' Skip top edge<br/>  Until <a class=\"__cf_email__\" data-cfemail=\"422102\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &gt; 10                        ' End at bottom edge<br/>    For <a class=\"__cf_email__\" data-cfemail=\"1b7f5b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> = <a class=\"__cf_email__\" data-cfemail=\"6604264b57\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> To <a class=\"__cf_email__\" data-cfemail=\"f092b0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+1              ' Loop horizontal -1/+1<br/>      If <a class=\"__cf_email__\" data-cfemail=\"1a7e5a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt; 0 Then Continue          ' Skip left edge<br/>    Until <a class=\"__cf_email__\" data-cfemail=\"3c587c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &gt; 10                      ' End at right edge<br/>      If @((<a class=\"__cf_email__\" data-cfemail=\"2a496a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * 11) + <a class=\"__cf_email__\" data-cfemail=\"9efade\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) = B Then Unloop\u00a0: Unloop\u00a0: Return (B)<br/>    Next                               ' We found a burning tree, exit!<br/>  Next                                 ' Try next row<br/>\u00a0<br/>Return (T)                             ' No burning trees found</pre>"}, {"lang": "Vedit macro language", "loc": 75, "block": "<pre class=\"vedit highlighted_source\">#<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> <span class=\"nu0\">25</span>         <span class=\"co1\">// height of the grid</span><br/>#<span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">60</span>         <span class=\"co1\">// width of the grid</span><br/>#<span class=\"nu0\">3</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>          <span class=\"co1\">// probability of random fire, per 1000</span><br/>#<span class=\"nu0\">4</span> <span class=\"sy0\">=</span> <span class=\"nu0\">40</span>         <span class=\"co1\">// probability of new tree, per 1000</span><br/>\u00a0<br/>#<span class=\"nu0\">5</span> <span class=\"sy0\">=</span> #<span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">+</span>Newline_Chars                 <span class=\"co1\">// total length of a line</span><br/>#<span class=\"nu0\">90</span> <span class=\"sy0\">=</span> Time_Tick                         <span class=\"co1\">// seed for random number generator</span><br/>#<span class=\"nu0\">91</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span>                              <span class=\"co1\">// get random numbers in range 0 to 999</span><br/>\u00a0<br/><span class=\"co1\">// Fill the grid and draw border</span><br/>Buf_Switch<span class=\"br0\">(</span>Buf_Free<span class=\"br0\">)</span><br/>Ins_Char<span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"sy0\">,</span> COUNT<span class=\"sy0\">,</span> #<span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>Ins_Newline<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">11</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> #<span class=\"nu0\">11</span><span class=\"sy0\">&lt;</span>#<span class=\"nu0\">1</span><span class=\"sy0\">;</span> #<span class=\"nu0\">11</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Ins_Char<span class=\"br0\">(</span><span class=\"st0\">'|'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">12</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> #<span class=\"nu0\">12</span><span class=\"sy0\">&lt;</span>#<span class=\"nu0\">2</span><span class=\"sy0\">;</span> #<span class=\"nu0\">12</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Call<span class=\"br0\">(</span><span class=\"st0\">\"RANDOM\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Return_Value <span class=\"sy0\">&lt;</span> <span class=\"nu0\">500</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>               <span class=\"co1\">// 50% propability for a tree</span><br/>            Ins_Char<span class=\"br0\">(</span><span class=\"st0\">'\u2660'</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            Ins_Char<span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    Ins_Char<span class=\"br0\">(</span><span class=\"st0\">'|'</span><span class=\"br0\">)</span><br/>    Ins_Newline<br/><span class=\"br0\">}</span><br/>Ins_Char<span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"sy0\">,</span> COUNT<span class=\"sy0\">,</span> #<span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>#<span class=\"nu0\">8</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">Repeat</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    BOF<br/>    Update<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">// calculate one generation</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">11</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> #<span class=\"nu0\">11</span><span class=\"sy0\">&lt;</span>#<span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> #<span class=\"nu0\">11</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Goto_Line<span class=\"br0\">(</span>#<span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>#<span class=\"nu0\">12</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> #<span class=\"nu0\">12</span><span class=\"sy0\">&lt;</span>#<span class=\"nu0\">2</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> #<span class=\"nu0\">12</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Goto_Col<span class=\"br0\">(</span>#<span class=\"nu0\">12</span><span class=\"br0\">)</span><br/>            #<span class=\"nu0\">14</span><span class=\"sy0\">=</span>Cur_Pos<br/>            Call<span class=\"br0\">(</span><span class=\"st0\">\"RANDOM\"</span><span class=\"br0\">)</span><br/>            #<span class=\"nu0\">10</span> <span class=\"sy0\">=</span> Return_Value<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Cur_Char <span class=\"sy0\">==</span> <span class=\"st0\">'\u2660'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>                      <span class=\"co1\">// tree?</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">10</span> <span class=\"sy0\">&lt;</span> #<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    Ins_Char<span class=\"br0\">(</span><span class=\"st0\">'*'</span><span class=\"sy0\">,</span> OVERWRITE<span class=\"br0\">)</span>            <span class=\"co1\">// random combustion</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Search_Block<span class=\"br0\">(</span><span class=\"st0\">\"\u2591\"</span><span class=\"sy0\">,</span> CP<span class=\"sy0\">-</span>#<span class=\"nu0\">5</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> CP<span class=\"sy0\">+</span>#<span class=\"nu0\">5</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> COLUMN<span class=\"sy0\">+</span>BEGIN<span class=\"sy0\">+</span>NOERR<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        Goto_Pos<span class=\"br0\">(</span>#<span class=\"nu0\">14</span><span class=\"br0\">)</span><br/>                        Ins_Char<span class=\"br0\">(</span><span class=\"st0\">'*'</span><span class=\"sy0\">,</span> OVERWRITE<span class=\"br0\">)</span>        <span class=\"co1\">// combustion</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Cur_Char <span class=\"sy0\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>                  <span class=\"co1\">// empty space?</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>#<span class=\"nu0\">10</span> <span class=\"sy0\">&lt;</span> #<span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        Ins_Char<span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"sy0\">,</span> OVERWRITE<span class=\"br0\">)</span>        <span class=\"co1\">// new tree</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\">// convert tmp symbols</span><br/>    Replace<span class=\"br0\">(</span><span class=\"st0\">\"\u2591\"</span><span class=\"sy0\">,</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> BEGIN<span class=\"sy0\">+</span>ALL<span class=\"sy0\">+</span>NOERR<span class=\"br0\">)</span>           <span class=\"co1\">// old fire goes out</span><br/>    Replace<span class=\"br0\">(</span><span class=\"st0\">\"*\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\u2591\"</span><span class=\"sy0\">,</span> BEGIN<span class=\"sy0\">+</span>ALL<span class=\"sy0\">+</span>NOERR<span class=\"br0\">)</span>           <span class=\"co1\">// new fire</span><br/>    Replace<span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\u2660\"</span><span class=\"sy0\">,</span> BEGIN<span class=\"sy0\">+</span>ALL<span class=\"sy0\">+</span>NOERR<span class=\"br0\">)</span>           <span class=\"co1\">// new tree</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"co1\">//--------------------------------------------------------------</span><br/><span class=\"co1\">// Generate random numbers in range 0 &lt;= Return_Value &lt; #91</span><br/><span class=\"co1\">//  #90 = Seed    (0 to 0x7fffffff)</span><br/><span class=\"co1\">//  #91 = Scaling (0 to 0xffff)</span><br/>\u00a0<br/><span class=\"sy0\">:</span>RANDOM<span class=\"sy0\">:</span><br/>#<span class=\"nu0\">92</span> <span class=\"sy0\">=</span> 0x7fffffff <span class=\"sy0\">/</span> <span class=\"nu0\">48271</span><br/>#<span class=\"nu0\">93</span> <span class=\"sy0\">=</span> 0x7fffffff <span class=\"sy0\">%</span> <span class=\"nu0\">48271</span><br/>#<span class=\"nu0\">90</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">48271</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>#<span class=\"nu0\">90</span> <span class=\"sy0\">%</span> #<span class=\"nu0\">92</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> #<span class=\"nu0\">93</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>#<span class=\"nu0\">90</span> <span class=\"sy0\">/</span> #<span class=\"nu0\">92</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> 0x7fffffff<br/><span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>#<span class=\"nu0\">90</span> <span class=\"sy0\">&amp;</span> 0xffff<span class=\"br0\">)</span> <span class=\"sy0\">*</span> #<span class=\"nu0\">91</span> <span class=\"sy0\">/</span> 0x10000<span class=\"br0\">)</span></pre>"}]}