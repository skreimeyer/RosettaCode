{"task": "Proper_divisors", "blocks": [{"lang": "360 Assembly", "loc": 134, "block": "<pre class=\"text highlighted_source\">*        Proper divisors           14/06/2016<br/>PROPDIV  CSECT<br/>         USING  PROPDIV,R13        base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    prolog<br/>         ST     R13,4(R15)         \"<br/>         ST     R15,8(R13)         \" <br/>         LR     R13,R15            \"<br/>         LA     R10,1              n=1<br/>LOOPN1   C      R10,=F'10'         do n=1 to 10<br/>         BH     ELOOPN1<br/>         LR     R1,R10             n<br/>         BAL    R14,PDIV           pdiv(n)<br/>         ST     R0,NN              nn=pdiv(n)<br/>         MVC    PG,PGT             init buffer <br/>         LA     R11,PG             pgi=0<br/>         XDECO  R10,XDEC           edit n<br/>         MVC    0(3,R11),XDEC+9    output n<br/>         LA     R11,7(R11)         pgi=pgi+7<br/>         L      R1,NN              nn<br/>         XDECO  R1,XDEC            edit nn<br/>         MVC    0(3,R11),XDEC+9    output nn<br/>         LA     R11,20(R11)        pgi=pgi+20<br/>         LA     R5,1               i=1<br/>LOOPNI   C      R5,NN              do i=1 to nn<br/>         BH     ELOOPNI<br/>         LR     R1,R5              i<br/>         SLA    R1,2               *4<br/>         L      R2,TDIV-4(R1)      tdiv(i)<br/>         XDECO  R2,XDEC            edit tdiv(i)<br/>         MVC    0(3,R11),XDEC+9    output tdiv(i)<br/>         LA     R11,3(R11)         pgi=pgi+3<br/>         LA     R5,1(R5)           i=i+1<br/>         B      LOOPNI<br/>ELOOPNI  XPRNT  PG,80              print buffer<br/>         LA     R10,1(R10)         n=n+1<br/>         B      LOOPN1<br/>ELOOPN1  SR     R0,R0              0<br/>         ST     R0,M               m=0<br/>         LA     R10,1              n=1<br/>LOOPN2   C      R10,=F'20000'      do n=1 to 20000<br/>         BH     ELOOPN2<br/>         LR     R1,R10             n<br/>         BAL    R14,PDIV           nn=pdiv(n)<br/>         C      R0,M               if nn&gt;m<br/>         BNH    NNNHM<br/>         ST     R10,II             ii=n<br/>         ST     R0,M               m=nn<br/>NNNHM    LA     R10,1(R10)         n=n+1<br/>         B      LOOPN2<br/>ELOOPN2  MVC    PG,PGR             init buffer<br/>         L      R1,II              ii<br/>         XDECO  R1,XDEC            edit ii<br/>         MVC    PG(5),XDEC+7       output ii<br/>         L      R1,M               m<br/>         XDECO  R1,XDEC            edit m<br/>         MVC    PG+9(4),XDEC+8     output m<br/>         XPRNT  PG,80              print buffer<br/>         L      R13,4(0,R13)       epilog <br/>         LM     R14,R12,12(R13)    \"<br/>         XR     R15,R15            \"<br/>         BR     R14                exit<br/>*------- pdiv   --function(x)-----&gt;number of divisors---<br/>PDIV     ST     R1,X               x<br/>         C      R1,=F'1'           if x=1<br/>         BNE    NOTONE<br/>         LA     R0,0               return(0)<br/>         BR     R14<br/>NOTONE   LR     R4,R1              x<br/>         N      R4,=X'00000001'    mod(x,2)<br/>         LA     R4,1(R4)           +1<br/>         ST     R4,ODD             odd=mod(x,2)+1<br/>         LA     R8,1               ia=1<br/>         LA     R0,1               1<br/>         ST     R0,TDIV            tdiv(1)=1<br/>         SR     R9,R9              ib=0<br/>         L      R7,ODD             odd<br/>         LA     R7,1(R7)           j=odd+1<br/>LOOPJ    LR     R5,R7              do j=odd+1 by odd<br/>         MR     R4,R7              j*j<br/>         C      R5,X               while j*j&lt;x <br/>         BNL    ELOOPJ<br/>         L      R4,X               x<br/>         SRDA   R4,32              .<br/>         DR     R4,R7              /j<br/>         LTR    R4,R4              if mod(x,j)=0<br/>         BNZ    ITERJ<br/>         LA     R8,1(R8)           ia=ia+1<br/>         LR     R1,R8              ia<br/>         SLA    R1,2               *4 (F)<br/>         ST     R7,TDIV-4(R1)      tdiv(ia)=j<br/>         LA     R9,1(R9)           ib=ib+1<br/>         L      R4,X               x<br/>         SRDA   R4,32              .<br/>         DR     R4,R7              j<br/>         LR     R2,R9              ib<br/>         SLA    R2,2               *4 (F)<br/>         ST     R5,TDIVB-4(R2)     tdivb(ib)=x/j<br/>ITERJ    A      R7,ODD             j=j+odd<br/>         B      LOOPJ<br/>ELOOPJ   LR     R5,R7              j<br/>         MR     R4,R7              j*j<br/>         C      R5,X               if j*j=x<br/>         BNE    JTJNEX<br/>         LA     R8,1(R8)           ia=ia+1<br/>         LR     R1,R8              ia<br/>         SLA    R1,2               *4 (F)<br/>         ST     R7,TDIV-4(R1)      tdiv(ia)=j<br/>JTJNEX   LA     R1,TDIV(R1)        @tdiv(ia+1)<br/>         LA     R2,TDIVB-4(R2)     @tdivb(ib)<br/>         LTR    R6,R9              do i=ib to 1 by -1<br/>         BZ     ELOOPI<br/>LOOPI    MVC    0(4,R1),0(R2)      tdiv(ia)=tdivb(i)<br/>         LA     R8,1(R8)           ia=ia+1<br/>         LA     R1,4(R1)           r1+=4<br/>         SH     R2,=H'4'           r2-=4<br/>         BCT    R6,LOOPI           i=i-1<br/>ELOOPI   LR     R0,R8              return(ia)<br/>         BR     R14                return to caller<br/>*        ----   ----------------------------------------<br/>TDIV     DS     80F<br/>TDIVB    DS     40F<br/>M        DS     F<br/>NN       DS     F<br/>II       DS     F<br/>X        DS     F<br/>ODD      DS     F<br/>PGT      DC     CL80'... has .. proper divisors:'<br/>PGR      DC     CL80'..... has ... proper divisors.'<br/>PG       DC     CL80' '<br/>XDEC     DS     CL12<br/>         YREGS<br/>         END    PROPDIV</pre>"}, {"lang": "ALGOL 68", "loc": 92, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># MODE to hold an element of a list of proper divisors            #</span><br/><span class=\"kw4\">MODE</span> DIVISORLIST <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span> <span class=\"kw3\">INT</span> divisor<span class=\"sy1\">,</span> <span class=\"kw4\">REF</span> DIVISORLIST next <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># end of divisor list value                                       #</span><br/><span class=\"kw4\">REF</span> DIVISORLIST nil divisor list <span class=\"sy1\">=</span> <span class=\"kw4\">REF</span> DIVISORLIST<span class=\"br0\">(</span><span class=\"kw7\">NIL</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># resturns a DIVISORLIST containing the proper divisors of n      #</span><br/><span class=\"coMULTI\"># if n = 1, 0 or -1, we return no divisors                        #</span><br/><span class=\"kw4\">PROC</span> proper divisors <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"kw4\">REF</span> DIVISORLIST<span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>         <span class=\"kw4\">REF</span> DIVISORLIST result   <span class=\"sy1\">:=</span> nil divisor list<span class=\"sy1\">;</span><br/>         <span class=\"kw4\">REF</span> DIVISORLIST end list <span class=\"sy1\">:=</span> result<span class=\"sy1\">;</span><br/>         <span class=\"kw3\">INT</span> abs n  <span class=\"sy1\">=</span> <span class=\"kw8\">ABS</span> n<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">IF</span> abs n <span class=\"sy1\">&gt;</span> 1 <span class=\"kw2\">THEN</span><br/>             <span class=\"coMULTI\"># build the list of divisors backeards, so they are  #</span><br/>             <span class=\"coMULTI\"># returned in ascending order                        #</span><br/>             <span class=\"kw3\">INT</span> root n <span class=\"sy1\">=</span> <span class=\"kw8\">ENTIER</span> <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span> abs n <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>             <span class=\"kw2\">FOR</span> d <span class=\"kw2\">FROM</span> root n <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 2 <span class=\"kw2\">DO</span><br/>                 <span class=\"kw2\">IF</span> abs n <span class=\"kw12\">MOD</span> d <span class=\"sy1\">=</span> 0 <span class=\"kw2\">THEN</span><br/>                     <span class=\"coMULTI\"># found another divisor                      #</span><br/>                     result <span class=\"sy1\">:=</span> <span class=\"kw4\">HEAP</span> DIVISORLIST<br/>                            <span class=\"sy1\">:=</span> DIVISORLIST<span class=\"br0\">(</span> d<span class=\"sy1\">,</span> result <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                     <span class=\"kw2\">IF</span> end list <span class=\"kw7\">IS</span> nil divisor list <span class=\"kw2\">THEN</span><br/>                         <span class=\"coMULTI\"># first result                           #</span><br/>                         end list <span class=\"sy1\">:=</span> result<br/>                     <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                     <span class=\"kw2\">IF</span> d <span class=\"sy1\">*</span> d <span class=\"sy1\">/=</span> n <span class=\"kw2\">THEN</span><br/>                         <span class=\"coMULTI\"># add the other divisor to the end of    #</span><br/>                         <span class=\"coMULTI\"># the list                               #</span><br/>                         next <span class=\"kw6\">OF</span> end list <span class=\"sy1\">:=</span> <span class=\"kw4\">HEAP</span> DIVISORLIST<br/>                                          <span class=\"sy1\">:=</span> DIVISORLIST<span class=\"br0\">(</span> abs n <span class=\"kw12\">OVER</span> d<span class=\"sy1\">,</span> nil divisor list <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                         end list         <span class=\"sy1\">:=</span> next <span class=\"kw6\">OF</span> end list<br/>                     <span class=\"kw2\">FI</span><br/>                 <span class=\"kw2\">FI</span><br/>             <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>             <span class=\"coMULTI\"># 1 is always a proper divisor of numbers &gt; 1        #</span><br/>             result <span class=\"sy1\">:=</span> <span class=\"kw4\">HEAP</span> DIVISORLIST<br/>                    <span class=\"sy1\">:=</span> DIVISORLIST<span class=\"br0\">(</span> 1<span class=\"sy1\">,</span> result <span class=\"br0\">)</span><br/>         <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>         result<br/>     <span class=\"kw2\">END</span> <span class=\"coMULTI\"># proper divisors #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns the number of divisors in a DIVISORLIST                 #</span><br/><span class=\"kw4\">PROC</span> count divisors <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw4\">REF</span> DIVISORLIST list <span class=\"br0\">)</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>        <span class=\"kw3\">INT</span> result <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>        <span class=\"kw4\">REF</span> DIVISORLIST divisors <span class=\"sy1\">:=</span> list<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">WHILE</span> divisors <span class=\"kw7\">ISNT</span> nil divisor list <span class=\"kw2\">DO</span><br/>            result <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>            divisors <span class=\"sy1\">:=</span> next <span class=\"kw6\">OF</span> divisors<br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        result<br/>     <span class=\"kw2\">END</span> <span class=\"coMULTI\"># count divisors #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># find the proper divisors of 1\u00a0: 10                              #</span><br/><span class=\"kw2\">FOR</span> n <span class=\"kw2\">TO</span> 10 <span class=\"kw2\">DO</span><br/>    <span class=\"kw4\">REF</span> DIVISORLIST divisors <span class=\"sy1\">:=</span> proper divisors<span class=\"br0\">(</span> n <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Proper divisors of: \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> n<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>2 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\": \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">WHILE</span> divisors <span class=\"kw7\">ISNT</span> nil divisor list <span class=\"kw2\">DO</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> divisor <span class=\"kw6\">OF</span> divisors<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        divisors <span class=\"sy1\">:=</span> next <span class=\"kw6\">OF</span> divisors<br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># find the first/only number in 1\u00a0: 20 000 with the most divisors  #</span><br/><span class=\"kw3\">INT</span> max number         <span class=\"sy1\">=</span> 20 000<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> max divisors      <span class=\"sy1\">:=</span>      0<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> has max divisors  <span class=\"sy1\">:=</span>      0<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> with max divisors <span class=\"sy1\">:=</span>      0<span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> d <span class=\"kw2\">TO</span> max number <span class=\"kw2\">DO</span><br/>    <span class=\"kw3\">INT</span> divisor count <span class=\"sy1\">=</span> count divisors<span class=\"br0\">(</span> proper divisors<span class=\"br0\">(</span> d <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> divisor count <span class=\"sy1\">&gt;</span> max divisors <span class=\"kw2\">THEN</span><br/>        <span class=\"coMULTI\"># found a number with more divisors than the previous max  #</span><br/>        max divisors       <span class=\"sy1\">:=</span> divisor count<span class=\"sy1\">;</span><br/>        has max divisors   <span class=\"sy1\">:=</span> d<span class=\"sy1\">;</span><br/>        with max divisors  <span class=\"sy1\">:=</span> 1<br/>    <span class=\"kw2\">ELIF</span> divisor count <span class=\"sy1\">=</span> max divisors <span class=\"kw2\">THEN</span><br/>        <span class=\"coMULTI\"># found another number with that many divisors             #</span><br/>        with max divisors <span class=\"sy1\">+:=</span> 1<br/>    <span class=\"kw2\">FI</span><br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> has max divisors<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><br/>       <span class=\"sy1\">,</span> <span class=\"st0\">\" is the \"</span><br/>       <span class=\"sy1\">,</span> <span class=\"kw2\">IF</span> with max divisors <span class=\"sy1\">&lt;</span> 2 <span class=\"kw2\">THEN</span> <span class=\"st0\">\"only\"</span> <span class=\"kw2\">ELSE</span> <span class=\"st0\">\"first\"</span> <span class=\"kw2\">FI</span><br/>       <span class=\"sy1\">,</span> <span class=\"st0\">\" number upto \"</span><br/>       <span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> max number<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><br/>       <span class=\"sy1\">,</span> <span class=\"st0\">\" with \"</span><br/>       <span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> max divisors<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><br/>       <span class=\"sy1\">,</span> <span class=\"st0\">\" divisors\"</span><br/>       <span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><br/>       <span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 130, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- PROPER DIVISORS -----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- properDivisors\u00a0:: Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> properDivisors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>        <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> realRoot <span class=\"kw3\">to</span> n <span class=\"sy0\">^</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> intRoot <span class=\"kw3\">to</span> realRoot <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><br/>        <span class=\"kw3\">set</span> blnPerfectSquare <span class=\"kw3\">to</span> intRoot <span class=\"sy0\">=</span> realRoot<br/>\u00a0<br/>        <span class=\"co1\">-- isFactor\u00a0:: Int -&gt; Bool </span><br/>        <span class=\"kw3\">script</span> isFactor<br/>            <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                n <span class=\"kw2\">mod</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>            <span class=\"kw3\">end</span> |\u03bb|<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>        <span class=\"co1\">-- Factors up to square root of n,</span><br/>        <span class=\"kw3\">set</span> lows <span class=\"kw3\">to</span> filter<span class=\"br0\">(</span>isFactor, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, intRoot<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"co1\">-- and quotients of these factors beyond the square root,</span><br/>\u00a0<br/>        <span class=\"co1\">-- integerQuotient\u00a0:: Int -&gt; Int</span><br/>        <span class=\"kw3\">script</span> integerQuotient<br/>            <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>n <span class=\"sy0\">/</span> x<span class=\"br0\">)</span> <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><br/>            <span class=\"kw3\">end</span> |\u03bb|<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>        <span class=\"co1\">-- excluding n itself (last item)</span><br/>        <span class=\"kw1\">items</span> <span class=\"nu0\">1</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span> <span class=\"kw3\">of</span> <span class=\"br0\">(</span>lows <span class=\"sy0\">&amp;</span> map<span class=\"br0\">(</span>integerQuotient, \u00ac<br/>            <span class=\"kw1\">items</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>blnPerfectSquare <span class=\"kw2\">as</span> <span class=\"kw1\">integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> reverse <span class=\"kw3\">of</span> lows<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> properDivisors<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"co1\">-- numberAndDivisors\u00a0:: Int -&gt; [Int]</span><br/>    <span class=\"kw3\">script</span> numberAndDivisors<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span>num:n, divisors:properDivisors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"co1\">-- maxDivisorCount\u00a0:: Record -&gt; Int -&gt; Record</span><br/>    <span class=\"kw3\">script</span> maxDivisorCount<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, n<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> intDivisors <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> properDivisors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"kw3\">if</span> intDivisors \u2265 divisors <span class=\"kw3\">of</span> a <span class=\"kw3\">then</span><br/>                <span class=\"br0\">{</span>num:n, divisors:intDivisors<span class=\"br0\">}</span><br/>            <span class=\"kw3\">else</span><br/>                a<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"br0\">{</span>oneToTen:map<span class=\"br0\">(</span>numberAndDivisors, \u00ac<br/>        enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, mostDivisors:foldl<span class=\"br0\">(</span>maxDivisorCount, \u00ac<br/>        <span class=\"br0\">{</span>num:<span class=\"nu0\">0</span>, divisors:<span class=\"nu0\">0</span><span class=\"br0\">}</span>, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">20000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span> \u00ac<br/>\u00a0<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> m &gt; n <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> d <span class=\"kw3\">to</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n <span class=\"kw1\">by</span> d<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- filter\u00a0:: (a -&gt; Bool) -&gt; [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> filter<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs<br/>            <span class=\"kw3\">if</span> |\u03bb|<span class=\"br0\">(</span>v, i, xs<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> v<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> filter<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn</pre>"}, {"lang": "AWK", "loc": 38, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f PROPER_DIVISORS.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    show = <span class=\"nu0\">0</span> <span class=\"co1\"># show divisors: 0=no, 1=yes</span><br/>    <span class=\"kw5\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"    N  cnt  DIVISORS\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">1</span>; i<span class=\"sy2\">&lt;=</span><span class=\"nu0\">20000</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      divisors<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">10</span> <span class=\"sy1\">||</span> i <span class=\"sy2\">==</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># including 100 as it was an example in task description</span><br/>        <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%5d \u00a0%3d \u00a0%s<span class=\"es0\">\\n</span>\"</span>,i,Dcnt,Dstr<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Dcnt <span class=\"sy2\">&lt;</span> max_cnt<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">continue</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Dcnt <span class=\"sy2\">&gt;</span> max_cnt<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        rec = <span class=\"st0\">\"\"</span><br/>        max_cnt = Dcnt<br/>      <span class=\"br0\">}</span><br/>      rec = <span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s%5d \u00a0%3d \u00a0%s<span class=\"es0\">\\n</span>\"</span>,rec,i,Dcnt,show<span class=\"sy5\">?</span>Dstr<span class=\"sy5\">:</span><span class=\"st0\">\"divisors not shown\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s\"</span>,rec<span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> divisors<span class=\"br0\">(</span>n,  i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy2\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      Dcnt = <span class=\"nu0\">0</span><br/>      Dstr = <span class=\"st0\">\"\"</span><br/>      <span class=\"kw6\">return</span><br/>    <span class=\"br0\">}</span><br/>    Dcnt = Dstr = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">2</span>; i<span class=\"sy2\">&lt;</span>n; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy3\">%</span> i <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Dcnt<span class=\"sy3\">++</span><br/>        Dstr = <span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s\u00a0%s\"</span>,Dstr,i<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw6\">return</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BaCon", "loc": 32, "block": "<pre class=\"qbasic highlighted_source\">\u00a0<br/><span class=\"kw1\">FUNCTION</span> ProperDivisor<span class=\"br0\">(</span>nr<span class=\"sy0\">,</span> show<span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://www.qbasicnews.com/qboho/qcklocal.shtml\"><span class=\"kw3\">LOCAL</span></a> probe<span class=\"sy0\">,</span> total<br/>\u00a0<br/>    <span class=\"kw1\">FOR</span> probe <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> nr<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a><span class=\"br0\">(</span>nr<span class=\"sy0\">,</span> probe<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>            <span class=\"kw1\">IF</span> show <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> probe;<br/>            INCR total<br/>        <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>    <span class=\"kw1\">NEXT</span><br/>\u00a0<br/>    <span class=\"kw1\">RETURN</span> total<br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> x<span class=\"sy0\">,</span> <span class=\"st0\">\":\"</span>;<br/>    <span class=\"kw1\">IF</span> ProperDivisor<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\" 0\"</span>;<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a><br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">20000</span><br/>    DivisorCount <span class=\"sy0\">=</span> ProperDivisor<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">IF</span> DivisorCount <span class=\"sy0\">&gt;</span> MaxDivisors <span class=\"kw1\">THEN</span><br/>        MaxDivisors <span class=\"sy0\">=</span> DivisorCount<br/>        MagicNumber <span class=\"sy0\">=</span> x<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Most proper divisors for number in the range 1-20000: \"</span><span class=\"sy0\">,</span> MagicNumber<span class=\"sy0\">,</span> <span class=\"st0\">\" with \"</span><span class=\"sy0\">,</span> MaxDivisors<span class=\"sy0\">,</span> <span class=\"st0\">\" divisors.\"</span><br/>\u00a0</pre>"}, {"lang": "C", "loc": 44, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdbool.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> proper_divisors<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> bool print_flag<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            count<span class=\"sy0\">++;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>print_flag<span class=\"br0\">)</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>print_flag<span class=\"br0\">)</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> count<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d: \"</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        proper_divisors<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> max <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> max_i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">20000</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> v <span class=\"sy0\">=</span> proper_divisors<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>v <span class=\"sy0\">&gt;=</span> max<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            max <span class=\"sy0\">=</span> v<span class=\"sy0\">;</span><br/>            max_i <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d with\u00a0%d divisors<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> max_i<span class=\"sy0\">,</span> max<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 32, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">namespace</span> RosettaCode<span class=\"sy0\">.</span><span class=\"me1\">ProperDivisors</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">internal</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> ProperDivisors<span class=\"br0\">(</span><span class=\"kw4\">int</span> number<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span><br/>                Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, number <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                    <span class=\"sy0\">.</span><span class=\"kw1\">Where</span><span class=\"br0\">(</span>divisor <span class=\"sy0\">=&gt;</span> number <span class=\"sy0\">%</span> divisor <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> number <span class=\"kw1\">in</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}: {{{1}}}\"</span>, number,<br/>                    <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, ProperDivisors<span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> record <span class=\"sy0\">=</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">20000</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>number <span class=\"sy0\">=&gt;</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><br/>            <span class=\"br0\">{</span><br/>                Number <span class=\"sy0\">=</span> number,<br/>                Count <span class=\"sy0\">=</span> ProperDivisors<span class=\"br0\">(</span>number<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">OrderByDescending</span><span class=\"br0\">(</span>currentRecord <span class=\"sy0\">=&gt;</span> currentRecord<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">First</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}: {1}\"</span>, record<span class=\"sy0\">.</span><span class=\"me1\">Number</span>, record<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 39, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/>\u00a0<br/>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> properDivisors <span class=\"br0\">(</span> <span class=\"kw4\">int</span> number <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> divisors <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> number <span class=\"sy2\">/</span> <span class=\"nu0\">2</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span> <span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> number <span class=\"sy2\">%</span> i <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t divisors.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> divisors <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> divisors <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> maxdivisors <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw4\">int</span> corresponding_number <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">11</span> <span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      divisors <span class=\"sy1\">=</span>  properDivisors <span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Proper divisors of \"</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\":<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> number <span class=\"sy4\">:</span> divisors <span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>\t std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> number <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span> <span class=\"sy4\">;</span><br/>      divisors.<span class=\"me1\">clear</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">11</span> <span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">20001</span> <span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      divisors <span class=\"sy1\">=</span>  properDivisors <span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> divisors.<span class=\"me1\">size</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> maxdivisors <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t maxdivisors <span class=\"sy1\">=</span> divisors.<span class=\"me1\">size</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>\t corresponding_number <span class=\"sy1\">=</span> i <span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>      divisors.<span class=\"me1\">clear</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Most divisors has \"</span> <span class=\"sy1\">&lt;&lt;</span> corresponding_number <span class=\"sy1\">&lt;&lt;</span><br/>      <span class=\"st0\">\" , it has \"</span> <span class=\"sy1\">&lt;&lt;</span> maxdivisors <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" divisors!<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span> <br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Ceylon", "loc": 22, "block": "<pre class=\"text highlighted_source\">shared void run() {<br/>\u00a0<br/>\tfunction divisors(Integer int) =&gt; <br/>\t\t\tif(int &lt;= 1) <br/>\t\t\tthen {} <br/>\t\t\telse (1..int / 2).filter((Integer element) =&gt; element.divides(int));<br/>\u00a0<br/>\tfor(i in 1..10) {<br/>\t\tprint(\"``i`` =&gt; ``divisors(i)``\");<br/>\t}<br/>\u00a0<br/>\tvalue start = 1;<br/>\tvalue end = 20k;<br/>\u00a0<br/>\tvalue mostDivisors = <br/>\t\t\tmap {for(i in start..end) i-&gt;divisors(i).size}<br/>\t\t\t.inverse()<br/>\t\t\t.max(byKey(byIncreasing(Integer.magnitude)));<br/>\u00a0<br/>\tprint(\"the number(s) with the most divisors between ``start`` and ``end`` is/are:<br/>\t       ``mostDivisors?.item else \"nothing\"`` with ``mostDivisors?.key else \"no\"`` divisors\");<br/>}</pre>"}, {"lang": "Clojure", "loc": 36, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ns properdivisors<br/>  <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">gen-class</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defn proper-divisors <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Proper divisors of n\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>filter #<span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">rem</span> n <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>range <span class=\"nu0\">1</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Property divisors of numbers 1 to 20,000 inclusive</span><br/><span class=\"br0\">(</span>def data <span class=\"br0\">(</span>for <span class=\"br0\">[</span>n <span class=\"br0\">(</span>range <span class=\"nu0\">1</span> <span class=\"br0\">(</span>inc <span class=\"nu0\">20000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">[</span>n <span class=\"br0\">(</span>proper-divisors n<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Find Max</span><br/><span class=\"br0\">(</span>defn maximal-key <span class=\"br0\">[</span>k x <span class=\"sy0\">&amp;</span> xs<span class=\"br0\">]</span><br/>  <span class=\"st0\">\" Normal max-key only finds one key that produces maximum, while this function finds them all \"</span><br/>  <span class=\"br0\">(</span>reduce <span class=\"br0\">(</span>fn <span class=\"br0\">[</span>ys x<span class=\"br0\">]</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>c <span class=\"br0\">(</span>compare <span class=\"br0\">(</span>k x<span class=\"br0\">)</span> <span class=\"br0\">(</span>k <span class=\"br0\">(</span>peek ys<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>                <span class=\"br0\">(</span>pos? c<span class=\"br0\">)</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>                <span class=\"br0\">(</span>neg? c<span class=\"br0\">)</span> ys<br/>                <span class=\"sy0\">:</span><span class=\"me1\">else</span>    <span class=\"br0\">(</span>conj ys x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>          xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>println <span class=\"st0\">\"n<span class=\"es0\">\\t</span>cnt<span class=\"es0\">\\t</span>PROPER DIVISORS\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>doseq <span class=\"br0\">[</span>n <span class=\"br0\">(</span>range <span class=\"nu0\">1</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>factors <span class=\"br0\">(</span>proper-divisors n<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>println n <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span> <span class=\"br0\">(</span>count factors<span class=\"br0\">)</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span> factors<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>def max-data <span class=\"br0\">(</span><span class=\"kw1\">apply</span> maximal-key <span class=\"br0\">(</span>fn <span class=\"br0\">[</span><span class=\"br0\">[</span>i pd<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>count pd<span class=\"br0\">)</span><span class=\"br0\">)</span> data<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>doseq <span class=\"br0\">[</span><span class=\"br0\">[</span>n factors<span class=\"br0\">]</span> max-data<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>println n <span class=\"st0\">\" has \"</span> <span class=\"br0\">(</span>count factors<span class=\"br0\">)</span> <span class=\"st0\">\" divisors\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 36, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> proper-divisors-recursive <span class=\"br0\">(</span>product <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>results '<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"st0\">\"(int,list)-&gt;list::Function to find all proper divisors of a +ve integer.\"</span><br/>\u00a0<br/>   <span class=\"br0\">(</span><span class=\"kw1\">defun</span> smallest-divisor <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>      <span class=\"st0\">\"int-&gt;int::Find the smallest divisor of an integer &gt; 1.\"</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">evenp</span> x<span class=\"br0\">)</span> <span class=\"nu0\">2</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>lim <span class=\"br0\">(</span><span class=\"kw1\">truncate</span> <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>sd <span class=\"nu0\">3</span> <span class=\"br0\">(</span>+ sd <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span>integerp <span class=\"br0\">(</span>/ x sd<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> sd lim<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> sd lim<span class=\"br0\">)</span> x sd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"br0\">(</span><span class=\"kw1\">defun</span> pd-rec <span class=\"br0\">(</span>fac<span class=\"br0\">)</span><br/>      <span class=\"st0\">\"(int,int)-&gt;nil::Recursive function to find proper divisors of a +ve integer\"</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">member</span> fac results<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>push fac results<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>hifac <span class=\"br0\">(</span>/ fac <span class=\"br0\">(</span>smallest-divisor fac<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>pd-rec hifac<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>pd-rec <span class=\"br0\">(</span>/ product hifac<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"br0\">(</span>pd-rec product<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>butlast <span class=\"br0\">(</span>sort <span class=\"br0\">(</span>copy-<span class=\"kw1\">list</span> results<span class=\"br0\">)</span> #'<span class=\"sy0\">&lt;</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> task <span class=\"br0\">(</span>method <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>most-pds '<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i <span class=\"nu0\">19999</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>npds <span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> method <span class=\"br0\">(</span>incf n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>hiest <span class=\"br0\">(</span><span class=\"kw1\">car</span> most-pds<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> npds hiest<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> npds hiest<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">setf</span> most-pds <span class=\"br0\">(</span><span class=\"kw1\">list</span> npds <span class=\"br0\">(</span><span class=\"kw1\">list</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">setf</span> most-pds <span class=\"br0\">(</span><span class=\"kw1\">list</span> npds <span class=\"br0\">(</span><span class=\"kw1\">cons</span> n <span class=\"br0\">(</span>second most-pds<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   most-pds<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> main <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>format t <span class=\"st0\">\"Task 1:Proper Divisors of [1,10]:~%\"</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"~A:~A~%\"</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span> <span class=\"br0\">(</span>proper-divisors-recursive <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>format t <span class=\"st0\">\"Task 2:Count &amp; list of numbers &lt;=20,000 with the most Proper Divisors:~%~A~%\"</span><br/>           <span class=\"br0\">(</span>task #'proper-divisors-recursive<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 57, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> RosettaProperDivisor;<br/><span class=\"kw1\">IMPORT</span> StdLog;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Pd<span class=\"sy0\">*</span><span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;OUT r<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">VAR</span><br/>\ti<span class=\"sy0\">,</span>j<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;j <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>\t<span class=\"kw1\">IF</span> n &gt;  <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span><br/>\t\t<span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>i &lt; n<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>\t\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>n <span class=\"kw1\">MOD</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <br/>\t\t\t\t<span class=\"kw1\">IF</span> <span class=\"br0\">(</span>j &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> r<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> i <span class=\"kw1\">END</span>; <span class=\"kw3\">INC</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">END</span>;<br/>\t\t\t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">END</span>;<br/>\t<span class=\"kw1\">RETURN</span> j<br/><span class=\"kw1\">END</span> Pd;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\tr<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">128</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>;<br/>\ti<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>found<span class=\"sy0\">,</span>max<span class=\"sy0\">,</span>idxMx<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>\tmx<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">128</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span> <span class=\"kw1\">DO</span><br/>\t\tfound <span class=\"sy0\">:=</span> Pd<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>r<span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">IF</span> found &gt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"coMULTI\">(* Error. more pd than r can admit *)</span> <span class=\"kw3\">HALT</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\t\tStdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"[\"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>found<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"]:&gt; \"</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">FOR</span> j <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> found <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>\t\t\tStdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>r<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Char</span><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">END</span>;<br/>\t\tStdLog.<span class=\"me1\">Ln</span><br/>\t<span class=\"kw1\">END</span>;<br/>\u00a0<br/>\tmax <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;idxMx <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">20000</span> <span class=\"kw1\">DO</span><br/>  \tfound <span class=\"sy0\">:=</span> Pd<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>r<span class=\"br0\">)</span>;<br/>  \t<span class=\"kw1\">IF</span> found &gt; max <span class=\"kw1\">THEN</span><br/>    \tidxMx<span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;mx<span class=\"br0\">[</span>idxMx<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> i;max <span class=\"sy0\">:=</span> found<br/>\t  <span class=\"kw1\">ELSIF</span> found <span class=\"sy0\">=</span> max <span class=\"kw1\">THEN</span><br/>    \t<span class=\"kw3\">INC</span><span class=\"br0\">(</span>idxMx<span class=\"br0\">)</span>;mx<span class=\"br0\">[</span>idxMx<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> i<br/>  \t<span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">END</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Found: \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>idxMx <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>  StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" Numbers with the longest proper divisors [\"</span><span class=\"br0\">)</span>;<br/>\tStdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>max<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"]: \"</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span>;<br/>\t<span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> idxMx <span class=\"kw1\">DO</span><br/>  \tStdLog.<span class=\"me1\">Int</span><span class=\"br0\">(</span>mx<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/>\t<span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Do;<br/>\u00a0<br/><span class=\"kw1\">END</span> RosettaProperDivisor.<br/>\u00a0<br/>^Q RosettaProperDivisor.<span class=\"me1\">Do</span><span class=\"sy0\">~</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 9, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">immutable</span> properDivs <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"coMULTI\">/*@nogc*/</span> <span class=\"sy0\">=&gt;</span><br/>        iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">%</span> x <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> n <span class=\"sy0\">!=</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>properDivs.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span>_001<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> tuple<span class=\"br0\">(</span>properDivs<span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">count</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">reduce</span><span class=\"sy0\">!</span>max.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 45, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>lib '<span class=\"kw1\">list</span><span class=\"br0\">)</span> <span class=\"co1\">;; list-delete</span><br/>\u00a0<br/><span class=\"co1\">;; let n = product p_i^a_i , p_i prime</span><br/><span class=\"co1\">;; number of divisors = product (a_i + 1) - 1</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>numdivs n<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span>apply <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> g<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>group <span class=\"br0\">(</span>prime<span class=\"sy0\">-</span>factors n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>remember 'numdivs<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; prime powers</span><br/><span class=\"co1\">;; input\u00a0: a list g of grouped prime factors ( 3 3 3 ..)</span><br/><span class=\"co1\">;; returns (1 3 9 27 ...)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>ppows g <span class=\"br0\">(</span>mult <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span>fold <span class=\"br0\">(</span>ppows '<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a g<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">set!</span> mult <span class=\"br0\">(</span><span class=\"sy0\">*</span> mult a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">cons</span> mult ppows<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; proper divisors</span><br/><span class=\"co1\">;; decomp n into ((2 2 ..) ( 3 3 ..)  ) prime factors groups</span><br/><span class=\"co1\">;; combines (1 2 4 8 ..) (1 3 9 ..) lists</span><br/><span class=\"co1\">;; remove n from the list</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>divs n<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> null <br/>    <span class=\"br0\">(</span>list<span class=\"sy0\">-</span>delete<br/>        <span class=\"br0\">(</span>for<span class=\"sy0\">/</span>fold <span class=\"br0\">(</span>divs'<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>g <span class=\"br0\">(</span><span class=\"kw1\">map</span>  ppows <span class=\"br0\">(</span>group <span class=\"br0\">(</span>prime<span class=\"sy0\">-</span>factors n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t    <span class=\"br0\">(</span>for<span class=\"sy0\">*/</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a divs<span class=\"br0\">)</span> <span class=\"br0\">(</span>b g<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    n <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; find number(s) with max # of proper divisors</span><br/><span class=\"co1\">;; returns list of (n . maxdivs)  for n in range 2..N</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>most<span class=\"sy0\">-</span>proper N<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> maxdivs <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">define</span> ndivs <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>for<span class=\"sy0\">/</span>fold <span class=\"br0\">(</span>most<span class=\"sy0\">-</span>proper null<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"br0\">(</span>in<span class=\"sy0\">-</span>range <span class=\"nu0\">2</span> N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">set!</span> ndivs <span class=\"br0\">(</span>numdivs n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        #:continue <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> ndivs maxdivs<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>when <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> ndivs maxdivs<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>set<span class=\"sy0\">!-</span>values <span class=\"br0\">(</span>most<span class=\"sy0\">-</span>proper maxdivs<span class=\"br0\">)</span> <span class=\"br0\">(</span>values null ndivs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> n maxdivs<span class=\"br0\">)</span> most<span class=\"sy0\">-</span>proper<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Eiffel", "loc": 54, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tmake<br/>\t\t\t<span class=\"co1\">-- Test the feature proper_divisors.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tlist<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+linked_list&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">LINKED_LIST</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\t\tcount, number<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> <span class=\"nu0\">10</span> <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tlist <span class=\"sy0\">:=</span> proper_divisors <span class=\"br0\">(</span>c.<span class=\"me1\">item</span><span class=\"br0\">)</span><br/>\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>c.<span class=\"me1\">item</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\": \"</span><span class=\"br0\">)</span><br/>\t\t\t\tacross<br/>\t\t\t\t\tlist <span class=\"kw2\">as</span> l<br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>l.<span class=\"me1\">item</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> <span class=\"nu0\">20000</span> <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tlist <span class=\"sy0\">:=</span> proper_divisors <span class=\"br0\">(</span>c.<span class=\"me1\">item</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">if</span> list.<span class=\"me1\">count</span> <span class=\"sy0\">&gt;</span> count <span class=\"kw2\">then</span><br/>\t\t\t\t\tcount <span class=\"sy0\">:=</span> list.<span class=\"me1\">count</span><br/>\t\t\t\t\tnumber <span class=\"sy0\">:=</span> c.<span class=\"me1\">item</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>number.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" has with \"</span> <span class=\"sy0\">+</span> count.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" divisors the highest number of proper divisors.\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tproper_divisors <span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+linked_list&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">LINKED_LIST</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\t\t<span class=\"co1\">-- Proper divisors of 'n'.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">make</span><br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">if</span> n \\\\ c.<span class=\"me1\">item</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">extend</span> <span class=\"br0\">(</span>c.<span class=\"me1\">item</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 20, "block": "<pre class=\"text highlighted_source\">defmodule Proper do<br/>  def divisors(1), do: []<br/>  def divisors(n), do: [1 | divisors(2,n,:math.sqrt(n))] |&gt; Enum.sort<br/>\u00a0<br/>  defp divisors(k,_n,q) when k&gt;q, do: []<br/>  defp divisors(k,n,q) when rem(n,k)&gt;0, do: divisors(k+1,n,q)<br/>  defp divisors(k,n,q) when k * k == n, do: [k | divisors(k+1,n,q)]<br/>  defp divisors(k,n,q)                , do: [k,div(n,k) | divisors(k+1,n,q)]<br/>\u00a0<br/>  def most_divisors(limit) do<br/>    {length,nums} = Enum.group_by(1..limit, fn n -&gt; length(divisors(n)) end)<br/>                    |&gt; Enum.max_by(fn {length,_nums} -&gt; length end)<br/>    IO.puts \"With #{length}, Number #{inspect nums} has the most divisors\"<br/>  end<br/>end<br/>\u00a0<br/>Enum.each(1..10, fn n -&gt;<br/>  IO.puts \"#{n}: #{inspect Proper.divisors(n)}\"<br/>end)<br/>Proper.most_divisors(20000)</pre>"}, {"lang": "Erlang", "loc": 27, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>properdivs<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>divs<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>sumdivs<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>longest<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">divs</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">divs</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">divs</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">++</span> <span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sqrt</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">_N</span><span class=\"sy1\">,</span><span class=\"re5\">Q</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">K</span> <span class=\"sy3\">&gt;</span> <span class=\"re5\">Q</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">Q</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"re5\">K</span> <span class=\"sy3\">=/=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span> <br/>    <span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">Q</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">Q</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">K</span> <span class=\"sy3\">*</span> <span class=\"re5\">K</span>  <span class=\"sy3\">==</span> <span class=\"re5\">N</span> <span class=\"sy1\">-&gt;</span> <br/>    <span class=\"br0\">[</span><span class=\"re5\">K</span><span class=\"br0\">]</span> <span class=\"sy3\">++</span> <span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">Q</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">Q</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"re5\">K</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"kw2\">div</span> <span class=\"re5\">K</span><span class=\"br0\">]</span> <span class=\"sy3\">++</span> <span class=\"re3\">divisors</span><span class=\"br0\">(</span><span class=\"re5\">K</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">Q</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">sumdivs</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sum</span><span class=\"br0\">(</span><span class=\"re3\">divs</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">longest</span><span class=\"br0\">(</span><span class=\"re5\">Limit</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">longest</span><span class=\"br0\">(</span><span class=\"re5\">Limit</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">longest</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">Current</span><span class=\"sy1\">,</span><span class=\"re5\">CurLeng</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">Acc</span> <span class=\"sy3\">&gt;=</span> <span class=\"re5\">L</span> <span class=\"sy1\">-&gt;</span> <br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"With ~w, Number ~w has the most divisors~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">CurLeng</span><span class=\"sy1\">,</span><span class=\"re5\">Current</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">longest</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">Current</span><span class=\"sy1\">,</span><span class=\"re5\">CurLeng</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span>     <br/>    <span class=\"re5\">A</span> <span class=\"sy3\">=</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re3\">divs</span><span class=\"br0\">(</span><span class=\"re5\">Acc</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"kw1\">if</span> <span class=\"re5\">A</span> <span class=\"sy3\">&gt;</span> <span class=\"re5\">CurLeng</span> <span class=\"sy1\">-&gt;</span><br/>        <span class=\"re3\">longest</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"sy1\">,</span><span class=\"re5\">A</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        true <span class=\"sy1\">-&gt;</span> <span class=\"re3\">longest</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">Current</span><span class=\"sy1\">,</span><span class=\"re5\">CurLeng</span><span class=\"sy1\">,</span><span class=\"re5\">Acc</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "F#", "loc": 32, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>let mutable a=0<br/>let mutable b=0<br/>let mutable c=0<br/>let mutable d=0<br/>let mutable e=0<br/>let mutable f=0<br/>for k=1 to 10 do<br/>    b &lt;- 0<br/>    f &lt;- k/2  <br/>    printf \"divisor \"<br/>    for l=1 to f do<br/>        if k%l=0 then<br/>           b &lt;- b+1<br/>           printf \"\u00a0%i,\" l<br/>    printf \"no of divisor\u00a0%i\" b<br/>    printfn \"\"<br/>for i=1 to 20000 do<br/>    b &lt;- 0<br/>    f &lt;- i/2<br/>    for j=1 to f do<br/>       if i%j=0 then<br/>         b &lt;- b+1<br/>    if b=c then<br/>         d &lt;- 0<br/>         d &lt;- i<br/>    if c&lt;b then     <br/>        c &lt;- b<br/>\u00a0<br/>printfn \"%i has\u00a0%i divisor\" d c<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>USING: math.primes.factors math.ranges\u00a0;<br/>10 [1,b] [ divisors but-last ] map [ 1 + pprint bl . ] each-index<br/>20000 [1,b] [ divisors but-last length ] map dup supremum<br/>swap dupd index 1 + pprint \" with \" write pprint \" divisors.\" print<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 32, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/>\u00a0<br/>      <span class=\"kw1\">function</span> icntprop<span class=\"br0\">(</span>num  <span class=\"br0\">)</span><br/>      icnt<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>      <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> , num<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">mod</span><span class=\"br0\">(</span>num , i<span class=\"br0\">)</span>  <span class=\"kw2\">.<span class=\"me1\">eq</span>.</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>  <span class=\"kw1\">then</span><br/>          icnt <span class=\"sy0\">=</span> icnt <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"kw2\">.<span class=\"me1\">lt</span>.</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span> print <span class=\"sy0\">*</span>,<span class=\"st0\">'    '</span>,i<br/>          <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>          <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>      icntprop <span class=\"sy0\">=</span>  icnt<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>      limit <span class=\"sy0\">=</span> <span class=\"nu0\">20000</span><br/>      maxcnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      print <span class=\"sy0\">*</span>,<span class=\"st0\">'N   divisors'</span><br/>      <span class=\"kw1\">do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,limit,<span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>j <span class=\"kw2\">.<span class=\"me1\">lt</span>.</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span> print <span class=\"sy0\">*</span>,j<br/>      icnt <span class=\"sy0\">=</span> icntprop<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>icnt <span class=\"kw2\">.<span class=\"me1\">gt</span>.</span> maxcnt<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      maxcnt <span class=\"sy0\">=</span> icnt<br/>      maxj <span class=\"sy0\">=</span> j<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>      print <span class=\"sy0\">*</span>,<span class=\"st0\">' '</span><br/>      print <span class=\"sy0\">*</span>,<span class=\"st0\">' from 1 to '</span>,limit<br/>      print <span class=\"sy0\">*</span>,maxj,<span class=\"st0\">' has max proper divisors: '</span>,maxcnt<br/>      <span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 49, "block": "<pre class=\"freebasic highlighted_source\">\u00a0<br/><span class=\"co1\">' FreeBASIC v1.05.0 win64</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> ListProperDivisors<span class=\"br0\">(</span>limit <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> limit &lt; <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> limit<br/>     <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"##\"</span>; i; <br/>     <span class=\"kw1\">Print</span> <span class=\"st0\">\" -&gt;\"</span>;<br/>     <span class=\"kw1\">If</span> i = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <br/>       <span class=\"kw1\">Print</span> <span class=\"st0\">\" (None)\"</span><br/>       <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>     <span class=\"kw1\">End</span> <span class=\"kw1\">if</span><br/>     <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> i \\ <span class=\"nu0\">2</span><br/>       <span class=\"kw1\">If</span> i <span class=\"kw1\">Mod</span> j = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Print</span> <span class=\"st0\">\" \"</span>; j;<br/>     <span class=\"kw1\">Next</span> j<br/>     <span class=\"kw1\">Print</span><br/>  <span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> CountProperDivisors<span class=\"br0\">(</span>number <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">If</span> number &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Dim</span> count <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> number \\ <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">If</span> number <span class=\"kw1\">Mod</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> count += <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> count<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> n, count, most = <span class=\"nu0\">1</span>, maxCount = <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The proper divisors of the following numbers are\u00a0:\"</span><br/><span class=\"kw1\">Print</span><br/>ListProperDivisors<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">For</span> n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> <span class=\"nu0\">20000</span><br/>  count = CountProperDivisors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> count &gt; maxCount <span class=\"kw1\">Then</span><br/>    maxCount = count<br/>    most = n<br/>  EndIf<br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>most<span class=\"br0\">)</span>; <span class=\"st0\">\" has the most proper divisors, namely\"</span>; maxCount<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to exit the program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span><br/>\u00a0</pre>"}, {"lang": "GFA Basic", "loc": 77, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>OPENW 1<br/>CLEARW 1<br/>'<br/>' Array f% is used to hold the divisors<br/>DIM f%(SQR(20000))\u00a0! cannot redim arrays, so set size to largest needed<br/>'<br/>' 1. Show proper divisors of 1 to 10, inclusive<br/>'<br/>FOR i%=1 TO 10<br/>  num%<a class=\"__cf_email__\" data-cfemail=\"7c413c0c0e130c190e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>_divisors(i%)<br/>  PRINT \"Divisors for \";i%;\":\";<br/>  FOR j%=1 TO num%<br/>    PRINT \" \";f%(j%);<br/>  NEXT j%<br/>  PRINT<br/>NEXT i%<br/>'<br/>' 2. Find (smallest) number &lt;= 20000 with largest number of proper divisors<br/>'<br/>result%=1\u00a0! largest so far<br/>number%=0\u00a0! its number of divisors<br/>FOR i%=1 TO 20000<br/>  num%<a class=\"__cf_email__\" data-cfemail=\"ecd1ac9c9e839c899e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>_divisors(i%)<br/>  IF num%&gt;number%<br/>    result%=i%<br/>    number%=num%<br/>  ENDIF<br/>NEXT i%<br/>PRINT \"Largest number of divisors is \";number%;\" for \";result%<br/>'<br/>~INP(2)<br/>CLOSEW 1<br/>'<br/>' find the proper divisors of n%, placing results in f%<br/>' and return the number found<br/>'<br/>FUNCTION proper_divisors(n%)<br/>  LOCAL i%,root%,count%<br/>  '<br/>  ARRAYFILL f%(),0<br/>  count%=1\u00a0! index of next slot in f% to fill<br/>  '<br/>  IF n%&gt;1<br/>    f%(count%)=1<br/>    count%=count%+1<br/>    root%=SQR(n%)<br/>    FOR i%=2 TO root%<br/>      IF n% MOD i%=0<br/>        f%(count%)=i%<br/>        count%=count%+1<br/>        IF i%*i%&lt;&gt;n%\u00a0! root% is an integer, so check if i% is actual squa- lists:seq(1,10)].                                      <br/>X: 1, N: []<br/>X: 2, N: [1]<br/>X: 3, N: [1]<br/>X: 4, N: [1,2]<br/>X: 5, N: [1]<br/>X: 6, N: [1,2,3]<br/>X: 7, N: [1]<br/>X: 8, N: [1,2,4]<br/>X: 9, N: [1,3]<br/>X: 10, N: [1,2,5]<br/>[ok,ok,ok,ok,ok,ok,ok,ok,ok,ok]<br/>\u00a0<br/>2&gt; properdivs:longest(20000).<br/>With 79, Number 15120 has the most divisors<br/>re root of n%<br/>          f%(count%)=n%/i%<br/>          count%=count%+1<br/>        ENDIF<br/>      ENDIF<br/>    NEXT i%<br/>  ENDIF<br/>  '<br/>  RETURN count%-1<br/>ENDFUNC<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 62, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strconv\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> listProperDivisors<span class=\"sy1\">(</span>limit <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> limit &lt; <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    width <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>strconv<span class=\"sy3\">.</span>Itoa<span class=\"sy1\">(</span>limit<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> limit<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%*d -&gt; \"</span><span class=\"sy1\">,</span> width<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"(None)\"</span><span class=\"sy1\">)</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> j &lt;<span class=\"sy2\">=</span> <span class=\"nu2\">i</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"nu2\">i</span><span class=\"sy3\">%</span>j <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"\u00a0%d\"</span><span class=\"sy1\">,</span> j<span class=\"sy1\">)</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> countProperDivisors<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> n &lt; <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"sy1\">}</span><br/>    count <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> n<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> n<span class=\"sy3\">%</span><span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            count<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> count<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"The proper divisors of the following numbers are\u00a0:<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>    listProperDivisors<span class=\"sy1\">(</span><span class=\"nu0\">10</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/>    maxCount <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    most <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> n &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">20000</span><span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        count <span class=\"sy2\">:=</span> countProperDivisors<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> count <span class=\"sy3\">==</span> maxCount <span class=\"sy1\">{</span><br/>            most <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>most<span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> count &gt; maxCount <span class=\"sy1\">{</span><br/>            maxCount <span class=\"sy2\">=</span> count<br/>            most <span class=\"sy2\">=</span> most<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">:</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>            most<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> n<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"The following number(s) &lt;= 20000 have the most proper divisors, \"</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"namely\"</span><span class=\"sy1\">,</span> maxCount<span class=\"sy1\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\b</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> n <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> most <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>n<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 13, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/>\u00a0<br/>divisors <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>divisors n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">==</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span>n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>`<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"br0\">(</span>n `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"divisors of 1 to 10:\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">.</span> divisors<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"a number with the most divisors within 1 to 20000 (number, count):\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> maximumBy <span class=\"br0\">(</span>comparing <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a><span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">$</span> divisors n<span class=\"br0\">)</span> <span class=\"sy0\">|</span> n <span class=\"sy0\">&lt;-</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">20000</span><span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">factors=: [: /:<a class=\"__cf_email__\" data-cfemail=\"7e003e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, */&amp;&gt;@{@<span class=\"sy0\">((</span>^ <a class=\"__cf_email__\" data-cfemail=\"fb92d5bb\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;:<span class=\"sy0\">)</span>&amp;.&gt;/<span class=\"sy0\">)</span>@q:~&amp;<span class=\"nu0\">__</span><br/>properDivisors=: factors -. ]</pre>"}, {"lang": "Java", "loc": 33, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Collections</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.LinkedList</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Proper<span class=\"br0\">{</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> properDivs<span class=\"br0\">(</span><span class=\"kw3\">int</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> divs = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/LinkedList.html\"><span class=\"kw46\">LinkedList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>n == <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">return</span> divs<span class=\"sy0\">;</span><br/>        divs.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> x = <span class=\"nu0\">2</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> x++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> x == <span class=\"nu0\">0</span><span class=\"br0\">)</span> divs.<span class=\"me1\">add</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Collections.html\"><span class=\"kw46\">Collections</span></a>.<span class=\"me1\">sort</span><span class=\"br0\">(</span>divs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw2\">return</span> divs<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> x = <span class=\"nu0\">1</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">10</span><span class=\"sy0\">;</span> x++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>x + <span class=\"st0\">\": \"</span> + properDivs<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw3\">int</span> x = <span class=\"nu0\">0</span>, count = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> n = <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">20000</span><span class=\"sy0\">;</span> n++<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>properDivs<span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> count<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                x = n<span class=\"sy0\">;</span><br/>                count = properDivs<span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>x + <span class=\"st0\">\": \"</span> + count<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 69, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\">// Proper divisors</span><br/>    <span class=\"kw1\">function</span> properDivisors<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> rRoot <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                intRoot <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>rRoot<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>                lows <span class=\"sy0\">=</span> range<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> intRoot<span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> x<span class=\"br0\">)</span> <span class=\"sy0\">===</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> lows.<span class=\"me1\">concat</span><span class=\"br0\">(</span>lows.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> n <span class=\"sy0\">/</span> x<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"br0\">(</span>rRoot <span class=\"sy0\">===</span> intRoot<span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// [m..n]</span><br/>    <span class=\"kw1\">function</span> range<span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> m <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            i <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        while <span class=\"br0\">(</span>i<span class=\"sy0\">--</span><span class=\"br0\">)</span> a<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> a<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> tblOneToTen <span class=\"sy0\">=</span> <span class=\"br0\">[</span><br/>            <span class=\"br0\">[</span><span class=\"st0\">'Number'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Proper Divisors'</span><span class=\"sy0\">,</span> <span class=\"st0\">'Count'</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>range<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> ds <span class=\"sy0\">=</span> properDivisors<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> <span class=\"br0\">[</span>x<span class=\"sy0\">,</span> ds.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> ds.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>\u00a0<br/>        dctMostBelow20k <span class=\"sy0\">=</span> range<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">20000</span><span class=\"br0\">)</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> lng <span class=\"sy0\">=</span> properDivisors<span class=\"br0\">(</span>x<span class=\"br0\">)</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> lng <span class=\"sy0\">&gt;</span> a.<span class=\"me1\">divisorCount</span> <span class=\"sy0\">?</span> <span class=\"br0\">{</span><br/>                n<span class=\"sy0\">:</span> x<span class=\"sy0\">,</span><br/>                divisorCount<span class=\"sy0\">:</span> lng<br/>            <span class=\"br0\">}</span> <span class=\"sy0\">:</span> a<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>            n<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>            divisorCount<span class=\"sy0\">:</span> <span class=\"nu0\">0</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">// [[a]] -&gt; bool -&gt; s -&gt; s</span><br/>    <span class=\"kw1\">function</span> wikiTable<span class=\"br0\">(</span>lstRows<span class=\"sy0\">,</span> blnHeaderRow<span class=\"sy0\">,</span> strStyle<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">'{| class=\"wikitable\" '</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><br/>            strStyle <span class=\"sy0\">?</span> <span class=\"st0\">'style=\"'</span> <span class=\"sy0\">+</span> strStyle <span class=\"sy0\">+</span> <span class=\"st0\">'\"'</span> <span class=\"sy0\">:</span> <span class=\"st0\">''</span><br/>        <span class=\"br0\">)</span> <span class=\"sy0\">+</span> lstRows.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>lstRow<span class=\"sy0\">,</span> iRow<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> strDelim <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>blnHeaderRow <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>iRow<span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">'!'</span> <span class=\"sy0\">:</span> <span class=\"st0\">'|'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>|-<span class=\"es0\">\\n</span>'</span> <span class=\"sy0\">+</span> strDelim <span class=\"sy0\">+</span> <span class=\"st0\">' '</span> <span class=\"sy0\">+</span> lstRow.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"kw1\">function</span> <span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw1\">typeof</span> v <span class=\"sy0\">===</span> <span class=\"st0\">'undefined'</span> <span class=\"sy0\">?</span> <span class=\"st0\">' '</span> <span class=\"sy0\">:</span> v<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span> <span class=\"sy0\">+</span> strDelim <span class=\"sy0\">+</span> strDelim <span class=\"sy0\">+</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>|}'</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> wikiTable<span class=\"br0\">(</span><br/>        tblOneToTen<span class=\"sy0\">,</span><br/>        <span class=\"kw2\">true</span><br/>    <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>Most proper divisors below 20,000:<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>  '</span> <span class=\"sy0\">+</span> JSON.<span class=\"me1\">stringify</span><span class=\"br0\">(</span><br/>        dctMostBelow20k<br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 21, "block": "<pre class=\"text highlighted_source\">def count(stream): reduce stream as $i (0; . + 1);<br/>\u00a0<br/># unordered<br/>def proper_divisors:<br/>  . as $n<br/>  | if $n &gt; 1 then 1,<br/>      ( range(2; 1 + (sqrt|floor)) as $i<br/>        | if ($n\u00a0% $i) == 0 then $i,<br/>            (($n / $i) | if . == $i then empty else . end)<br/>         else empty<br/>\t end)<br/>    else empty<br/>    end;<br/>\u00a0<br/># The first integer in 1 .. n inclusive<br/># with the maximal number of proper divisors in that range:<br/>def most_proper_divisors(n):<br/>  reduce range(1; n+1) as $i<br/>    ( [null, 0];<br/>      count( $i | proper_divisors ) as $count<br/>      | if $count &gt; .[1] then [$i, $count] else . end);</pre>"}, {"lang": "Julia", "loc": 41, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>function properdivisors{T&lt;:Integer}(n::T)<br/>    0 &lt; n || throw(ArgumentError(\"number to be factored must be \u2265 0, got $n\"))<br/>    1 &lt; n || return T[]<br/>   \u00a0!isprime(n) || return T[one(T), n]<br/>    f = factor(n)<br/>    d = T[one(T)]<br/>    for (k, v) in f<br/>        c = T[k^i for i in 0:v]<br/>        d = d*c'<br/>        d = reshape(d, length(d))<br/>    end<br/>    sort!(d)<br/>    return d[1:end-1]<br/>end<br/>\u00a0<br/>lo = 1<br/>hi = 10<br/>println(\"List the proper divisors for \", lo, \" through \", hi, \".\")<br/>for i in lo:hi<br/>    println(@sprintf(\"%4d\", i), \" \", properdivisors(i))<br/>end<br/>\u00a0<br/>hi = 2*10^4<br/>println(\"\\nFind the numbers within [\", lo, \",\", hi, \"] having the most divisors.\")<br/>\u00a0<br/>maxdiv = 0<br/>nlst = Int[]<br/>\u00a0<br/>for i in lo:hi<br/>    ndiv = length(properdivisors(i))<br/>    if ndiv &gt; maxdiv<br/>        maxdiv = ndiv<br/>        nlst = [i]<br/>    elseif ndiv == maxdiv<br/>        push!(nlst, i)<br/>    end<br/>end<br/>\u00a0<br/>println(nlst, \" have the maximum proper divisor count of \", maxdiv, \".\")<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 40, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.5-2</span><br/>\u00a0<br/>fun listProperDivisors<span class=\"br0\">(</span>limit<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>limit <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"me1\">limit</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span>i.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">padStart</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> + <span class=\"st0\">\" -&gt; \"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"(None)\"</span><span class=\"br0\">)</span><br/>            continue<br/>        <span class=\"br0\">}</span><br/>        <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">i</span>/<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">{</span> i <span class=\"sy0\">%</span> it <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> print<span class=\"br0\">(</span><span class=\"st0\">\" $it\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun countProperDivisors<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span>/<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">count</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> it<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The proper divisors of the following numbers are\u00a0:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    listProperDivisors<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count<span class=\"sy0\">:</span> Int<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> maxCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> most<span class=\"sy0\">:</span> MutableList<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span> <span class=\"sy0\">=</span> mutableListOf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n in <span class=\"nu0\">2</span>..<span class=\"nu0\">20000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        count <span class=\"sy0\">=</span> countProperDivisors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> maxCount<span class=\"br0\">)</span><br/>            most.<span class=\"me1\">add</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>count <span class=\"sy0\">&gt;</span> maxCount<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            maxCount <span class=\"sy0\">=</span> count<br/>            most.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            most.<span class=\"me1\">add</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"The following number(s) have the most proper divisors, namely \"</span> + maxCount + <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>n in most<span class=\"br0\">)</span> println<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 32, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Return a table of the proper divisors of n</span><br/><span class=\"kw1\">function</span> propDivs <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">local</span> divs<span class=\"sy0\">,</span> sqr <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> sqr <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy0\">%</span> d <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>divs<span class=\"sy0\">,</span> d<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> d <span class=\"sy0\">~=</span> sqr <span class=\"kw1\">then</span> <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>divs<span class=\"sy0\">,</span> n<span class=\"sy0\">/</span>d<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">table.sort</span><span class=\"br0\">(</span>divs<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> divs<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Show n followed by all values in t</span><br/><span class=\"kw1\">function</span> show <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> t<span class=\"br0\">)</span><br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span>n <span class=\"sy0\">..</span> <span class=\"st0\">\":<span class=\"es1\">\\t</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw3\">io.write</span><span class=\"br0\">(</span>v <span class=\"sy0\">..</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Main procedure</span><br/><span class=\"kw1\">local</span> mostDivs<span class=\"sy0\">,</span> numDivs<span class=\"sy0\">,</span> answer <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span> show<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> propDivs<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">20000</span> <span class=\"kw1\">do</span><br/>    numDivs <span class=\"sy0\">=</span> <span class=\"sy0\">#</span>propDivs<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> numDivs <span class=\"sy0\">&gt;</span> mostDivs <span class=\"kw1\">then</span><br/>        mostDivs <span class=\"sy0\">=</span> numDivs<br/>        answer <span class=\"sy0\">=</span> i<br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>answer <span class=\"sy0\">..</span> <span class=\"st0\">\" has \"</span> <span class=\"sy0\">..</span> mostDivs <span class=\"sy0\">..</span> <span class=\"st0\">\" proper divisors.\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">ProperDivisors[n_Integer /; n &gt; 0]\u00a0:= <a class=\"__cf_email__\" data-cfemail=\"da97b5a9ae9a9eb3acb3a9b5a8a9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@n;</pre>"}, {"lang": "Modula-2", "loc": 54, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> ProperDivisors;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> WriteInt<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span> buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">15</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%i\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> n<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><br/><span class=\"kw1\">END</span> WriteInt;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> proper_divisors<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>; print_flag <span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">VAR</span> count<span class=\"sy0\">,</span>i <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>        <span class=\"kw1\">IF</span> n <span class=\"kw1\">MOD</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>            <span class=\"kw3\">INC</span><span class=\"br0\">(</span>count<span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">IF</span> print_flag <span class=\"kw1\">THEN</span><br/>                WriteInt<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>                WriteString<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">END</span><br/>        <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">IF</span> print_flag <span class=\"kw1\">THEN</span> WriteLn <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">RETURN</span> count;<br/><span class=\"kw1\">END</span> proper_divisors;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    i<span class=\"sy0\">,</span>max<span class=\"sy0\">,</span>max_i<span class=\"sy0\">,</span>v <span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span> <span class=\"kw1\">DO</span><br/>        WriteInt<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>        WriteString<span class=\"br0\">(</span><span class=\"st0\">\": \"</span><span class=\"br0\">)</span>;<br/>        proper_divisors<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"kw2\">TRUE</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    max <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    max_i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>\u00a0<br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">20000</span> <span class=\"kw1\">DO</span><br/>        v <span class=\"sy0\">:=</span> proper_divisors<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"kw2\">FALSE</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">IF</span> v&gt;<span class=\"sy0\">=</span> max <span class=\"kw1\">THEN</span><br/>            max <span class=\"sy0\">:=</span> v;<br/>            max_i <span class=\"sy0\">:=</span> i<br/>        <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%i with\u00a0%i divisors<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> max_i<span class=\"sy0\">,</span> max<span class=\"br0\">)</span>;<br/>    WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span>;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> ProperDivisors.</pre>"}, {"lang": "Objeck", "loc": 44, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">use</span> Collection<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Proper<span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>x <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> x<span class=\"sy0\">++;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      Print<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> ProperDivs<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    x <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>n <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">20000</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>ProperDivs<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> count<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        x <span class=\"sy0\">:=</span> n<span class=\"sy0\">;</span><br/>        count <span class=\"sy0\">:=</span> ProperDivs<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"{$x}: {$count}\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> ProperDivs<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ IntVector <span class=\"br0\">{</span><br/>    divs <span class=\"sy0\">:=</span> IntVector<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> divs<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    divs<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>x <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> x <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> x<span class=\"sy0\">++;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        divs<span class=\"sy0\">-&gt;</span><span class=\"me1\">AddBack</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    divs<span class=\"sy0\">-&gt;</span><span class=\"me1\">Sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> divs<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Print<span class=\"br0\">(</span>x <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">,</span> result <span class=\"sy0\">:</span> IntVector<span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"{$x}: \"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    result<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Oberon-2", "loc": 98, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> ProperDivisors;<br/><span class=\"kw1\">IMPORT</span><br/>  Out;<br/>\u00a0<br/><span class=\"kw1\">CONST</span> <br/>    initialSize <span class=\"sy0\">=</span> <span class=\"nu0\">128</span>;<br/><span class=\"kw1\">TYPE</span><br/>  Result<span class=\"sy0\">*</span> <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> ResultDesc;<br/>  ResultDesc <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span> <br/>    found<span class=\"sy0\">-:</span> <span class=\"kw4\">LONGINT</span>; <span class=\"coMULTI\">(* number of slots in pd *)</span><br/>    pd<span class=\"sy0\">-:</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>;<br/>    cap<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;   <span class=\"coMULTI\">(* Capacity *)</span><br/>  <span class=\"kw1\">END</span>;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>  i<span class=\"sy0\">,</span>found<span class=\"sy0\">,</span>max<span class=\"sy0\">,</span>idxMx<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  mx<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">32</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">LONGINT</span>;<br/>  rs<span class=\"sy0\">:</span> Result;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Result<span class=\"br0\">)</span> Init<span class=\"br0\">(</span>size<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">BEGIN</span> <br/>    r.<span class=\"me1\">found</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    r.<span class=\"me1\">cap</span> <span class=\"sy0\">:=</span> size;<br/>    <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>r.<span class=\"me1\">pd</span><span class=\"sy0\">,</span>r.<span class=\"me1\">cap</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span> Init;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>r<span class=\"sy0\">:</span> Result<span class=\"br0\">)</span> Add<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"coMULTI\">(* Out.String(\"---&gt;\");Out.LongInt(n,0);Out.String(\" At: \");Out.LongInt(r.found,0);Out.Ln; *)</span><br/>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>r.<span class=\"me1\">found</span> &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>r.<span class=\"me1\">pd</span>^<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <br/>      r.<span class=\"me1\">pd</span><span class=\"br0\">[</span>r.<span class=\"me1\">found</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> n;<br/>    <span class=\"kw1\">ELSE</span><br/>      <span class=\"coMULTI\">(* expand pd for more room *)</span><br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw3\">INC</span><span class=\"br0\">(</span>r.<span class=\"me1\">found</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span> Add;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>r<span class=\"sy0\">:</span>Result<span class=\"br0\">)</span> Show<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">VAR</span><br/>    i<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>      Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"(Result:\"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>r.<span class=\"me1\">found</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;<span class=\"coMULTI\">(* Out.String(\"/\");Out.LongInt(r.cap,0);*)</span><br/>      Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">IF</span> r.<span class=\"me1\">found</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> r.<span class=\"me1\">found</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>          Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>r.<span class=\"me1\">pd</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>          <span class=\"kw1\">IF</span> i <span class=\"sy0\">=</span> r.<span class=\"me1\">found</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> Out.<span class=\"me1\">Char</span><span class=\"br0\">(</span><span class=\"st_h\">')'</span><span class=\"br0\">)</span> <span class=\"kw1\">ELSE</span> Out.<span class=\"me1\">Char</span><span class=\"br0\">(</span><span class=\"st_h\">','</span><span class=\"br0\">)</span> <span class=\"kw1\">END</span><br/>        <span class=\"kw1\">END</span><br/>      <span class=\"kw1\">END</span>;<br/>      Out.<span class=\"me1\">Ln</span><br/>  <span class=\"kw1\">END</span> Show;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> <span class=\"br0\">(</span>r<span class=\"sy0\">:</span>Result<span class=\"br0\">)</span> Reset<span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">BEGIN</span> <br/>    r.<span class=\"me1\">found</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>  <span class=\"kw1\">END</span> Reset;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> GetFor<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<span class=\"kw1\">VAR</span> rs<span class=\"sy0\">:</span> Result<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">VAR</span><br/>    i<span class=\"sy0\">:</span> <span class=\"kw4\">LONGINT</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    <span class=\"kw1\">IF</span> n &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <br/>      rs.<span class=\"me1\">Add</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;i <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span>;<br/>      <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>i &lt; n<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>n <span class=\"kw1\">MOD</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> rs.<span class=\"me1\">Add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>        <span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>      <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">END</span> GetFor;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>rs<span class=\"br0\">)</span>;rs.<span class=\"me1\">Init</span><span class=\"br0\">(</span>initialSize<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">10</span> <span class=\"kw1\">DO</span> <br/>    Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Char</span><span class=\"br0\">(</span><span class=\"st_h\">':'</span><span class=\"br0\">)</span>;<br/>    GetFor<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>rs<span class=\"br0\">)</span>;<br/>    rs.<span class=\"me1\">Show</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>    rs.<span class=\"me1\">Reset</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span>;<br/>  Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Char</span><span class=\"br0\">(</span><span class=\"st_h\">':'</span><span class=\"br0\">)</span>;GetFor<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"sy0\">,</span>rs<span class=\"br0\">)</span>;rs.<span class=\"me1\">Show</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;rs.<span class=\"me1\">Reset</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>  max <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;idxMx <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;found <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">20000</span> <span class=\"kw1\">DO</span><br/>    GetFor<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>rs<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">IF</span> rs.<span class=\"me1\">found</span> &gt; max <span class=\"kw1\">THEN</span><br/>      idxMx<span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;mx<span class=\"br0\">[</span>idxMx<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> i;max <span class=\"sy0\">:=</span> rs.<span class=\"me1\">found</span><br/>    <span class=\"kw1\">ELSIF</span> rs.<span class=\"me1\">found</span> <span class=\"sy0\">=</span> max <span class=\"kw1\">THEN</span><br/>      <span class=\"kw3\">INC</span><span class=\"br0\">(</span>idxMx<span class=\"br0\">)</span>;mx<span class=\"br0\">[</span>idxMx<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> i<br/>    <span class=\"kw1\">END</span>;<br/>    rs.<span class=\"me1\">Reset</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">END</span>;<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\"Found: \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>idxMx <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\" Numbers with most proper divisors \"</span><span class=\"br0\">)</span>;<br/>  Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>max<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\": \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span>;<br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">TO</span> idxMx <span class=\"kw1\">DO</span><br/>    Out.<span class=\"me1\">LongInt</span><span class=\"br0\">(</span>mx<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/>  <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> ProperDivisors.<br/>\u00a0</pre>"}, {"lang": "Oforth", "loc": 4, "block": "<pre class=\"text highlighted_source\">Integer method: properDivs  self 2 / seq filter(#[ self swap mod 0 == ]) }<br/>\u00a0<br/>10 seq apply(#[ dup print \"\u00a0: \" print properDivs println ])<br/>20000 seq map(#[ dup properDivs size Pair new ]) reduce(#maxKey) println</pre>"}, {"lang": "PARI/GP", "loc": 3, "block": "<pre class=\"parigp highlighted_source\">proper<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">==</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> my<span class=\"br0\">(</span>d<span class=\"sy0\">=</span><span class=\"kw1\">divisors</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> d<span class=\"br0\">[</span><span class=\"nu1\">2</span>..#d<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">apply</span><span class=\"br0\">(</span>proper<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu1\">1</span>..<span class=\"nu1\">10</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>r<span class=\"sy0\">=</span>at<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">;</span> <span class=\"kw1\">for</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><span class=\"nu1\">20000</span><span class=\"sy0\">,</span> t<span class=\"sy0\">=</span><span class=\"kw1\">numdiv</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>t<span class=\"sy0\">&gt;</span>r<span class=\"sy0\">,</span> r<span class=\"sy0\">=</span>t<span class=\"sy0\">;</span> at<span class=\"sy0\">=</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">[</span>at<span class=\"sy0\">,</span> <span class=\"kw1\">numdiv</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">]</span></pre>"}, {"lang": "Pascal", "loc": 220, "block": "<pre class=\"pascal highlighted_source\"><span class=\"co2\">{$IFDEF FPC}{$MODE DELPHI}{$ELSE}{$APPTYPE CONSOLE}{$ENDIF}</span><br/><span class=\"kw1\">uses</span><br/>  sysutils<span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  MAXPROPERDIVS <span class=\"sy3\">=</span> <span class=\"nu0\">1920</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">type</span><br/>  tRes <span class=\"sy3\">=</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">MAXPROPERDIVS</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> LongWord<span class=\"sy1\">;</span><br/>  tPot <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>           potPrim<span class=\"sy1\">,</span><br/>           potMax <span class=\"sy1\">:</span>LongWord<span class=\"sy1\">;</span><br/>         <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  tprimeFac <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>                 pfPrims <span class=\"sy1\">:</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">..</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> tPot<span class=\"sy1\">;</span><br/>                 pfCnt<span class=\"sy1\">,</span><br/>                 pfNum   <span class=\"sy1\">:</span> LongWord<span class=\"sy1\">;</span><br/>               <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  tSmallPrimes <span class=\"sy3\">=</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"nu0\">6541</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> longWord<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  SmallPrimes<span class=\"sy1\">:</span> tSmallPrimes<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> InitSmallPrimes<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  pr<span class=\"sy1\">,</span>testPr<span class=\"sy1\">,</span>j<span class=\"sy1\">,</span>maxprimidx<span class=\"sy1\">:</span> Longword<span class=\"sy1\">;</span><br/>  isPrime <span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  maxprimidx <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  SmallPrimes<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>  pr <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    isprime <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">true</span><span class=\"sy1\">;</span><br/>    j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">repeat</span><br/>      testPr <span class=\"sy1\">:</span><span class=\"sy3\">=</span> SmallPrimes<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">IF</span> testPr<span class=\"sy3\">*</span>testPr &gt; pr <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">break</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">If</span> pr <span class=\"kw1\">mod</span> testPr <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">Begin</span><br/>        isprime <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">break</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">until</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> isprime <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">Begin</span><br/>      inc<span class=\"br0\">(</span>maxprimidx<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      SmallPrimes<span class=\"br0\">[</span>maxprimidx<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> pr<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>pr<span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> pr &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">shl</span> <span class=\"nu0\">16</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> PrimeFacOut<span class=\"br0\">(</span>primeDecomp<span class=\"sy1\">:</span>tprimeFac<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i <span class=\"sy1\">:</span> LongWord<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">with</span> primeDecomp <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    <span class=\"kw3\">write</span><span class=\"br0\">(</span>pfNum<span class=\"sy1\">,</span><span class=\"st0\">' = '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> pfCnt<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">with</span> pfPrims<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">If</span> potMax <span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>          <span class=\"kw3\">write</span><span class=\"br0\">(</span>potPrim<span class=\"sy1\">,</span><span class=\"st0\">'*'</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span><br/>          <span class=\"kw3\">write</span><span class=\"br0\">(</span>potPrim<span class=\"sy1\">,</span><span class=\"st0\">'^'</span><span class=\"sy1\">,</span>potMax<span class=\"sy1\">,</span><span class=\"st0\">'*'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">with</span> pfPrims<span class=\"br0\">[</span>pfCnt<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">If</span> potMax <span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw3\">write</span><span class=\"br0\">(</span>potPrim<span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"kw3\">write</span><span class=\"br0\">(</span>potPrim<span class=\"sy1\">,</span><span class=\"st0\">'^'</span><span class=\"sy1\">,</span>potMax<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> PrimeDecomposition<span class=\"br0\">(</span>n<span class=\"sy1\">:</span>LongWord<span class=\"sy1\">;</span><span class=\"kw1\">var</span> res<span class=\"sy1\">:</span>tprimeFac<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span>pr<span class=\"sy1\">,</span>cnt<span class=\"sy1\">,</span>quot<span class=\"coMULTI\">{to minimize divisions}</span> <span class=\"sy1\">:</span> LongWord<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  res<span class=\"sy1\">.</span><span class=\"me1\">pfNum</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy1\">;</span><br/>  res<span class=\"sy1\">.</span><span class=\"me1\">pfCnt</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  cnt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">repeat</span><br/>    pr <span class=\"sy1\">:</span><span class=\"sy3\">=</span> SmallPrimes<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> pr<span class=\"sy3\">*</span>pr&gt;n <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">Break</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    quot <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n <span class=\"kw1\">div</span> pr<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> pr<span class=\"sy3\">*</span>quot <span class=\"sy3\">=</span> n <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">with</span> res <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">Begin</span><br/>        inc<span class=\"br0\">(</span>pfCnt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw1\">with</span> pfPrims<span class=\"br0\">[</span>pfCnt<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">Begin</span><br/>          potPrim <span class=\"sy1\">:</span><span class=\"sy3\">=</span> pr<span class=\"sy1\">;</span><br/>          potMax <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>          <span class=\"kw1\">repeat</span><br/>            n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> quot<span class=\"sy1\">;</span><br/>            quot <span class=\"sy1\">:</span><span class=\"sy3\">=</span> quot <span class=\"kw1\">div</span> pr<span class=\"sy1\">;</span><br/>            inc<span class=\"br0\">(</span>potMax<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>          <span class=\"kw1\">until</span> pr<span class=\"sy3\">*</span>quot &lt;&gt; n<span class=\"sy1\">;</span><br/>        <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>     inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">until</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//a big prime left over?</span><br/>  <span class=\"kw1\">IF</span> n &lt;&gt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">with</span> res <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">Begin</span><br/>      inc<span class=\"br0\">(</span>pfCnt<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">with</span> pfPrims<span class=\"br0\">[</span>pfCnt<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">Begin</span><br/>        potPrim <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy1\">;</span><br/>        potMax <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> CntProperDivs<span class=\"br0\">(</span><span class=\"kw1\">const</span> primeDecomp<span class=\"sy1\">:</span>tprimeFac<span class=\"br0\">)</span><span class=\"sy1\">:</span>LongWord<span class=\"sy1\">;</span><br/><span class=\"co1\">//count of proper divisors</span><br/><span class=\"kw1\">var</span><br/>   i<span class=\"sy1\">:</span> LongWord<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">with</span> primeDecomp <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> pfCnt <span class=\"kw1\">do</span><br/>      result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> result<span class=\"sy3\">*</span><span class=\"br0\">(</span>pfPrims<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">potMax</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//remove</span><br/>  dec<span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> findProperdivs<span class=\"br0\">(</span>n<span class=\"sy1\">:</span>LongWord<span class=\"sy1\">;</span><span class=\"kw1\">var</span> res<span class=\"sy1\">:</span>TRes<span class=\"br0\">)</span><span class=\"sy1\">:</span>LongWord<span class=\"sy1\">;</span><br/><span class=\"co1\">//simple trial division to get a sorted list of all proper divisors</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span>j<span class=\"sy1\">:</span> LongWord<span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> j&gt;i <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n <span class=\"kw1\">DIV</span> i<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> i<span class=\"sy3\">*</span>j <span class=\"sy3\">=</span> n <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">Begin</span><br/>      <span class=\"co1\">//smaller factor part at the beginning upwards</span><br/>      res<span class=\"br0\">[</span>result<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">IF</span> i &lt;&gt; j <span class=\"kw1\">then</span><br/>        <span class=\"co1\">//bigger factor at the end downwards</span><br/>        res<span class=\"br0\">[</span>MAXPROPERDIVS<span class=\"sy3\">-</span>result<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> j<br/>      <span class=\"kw1\">else</span><br/>        <span class=\"co1\">//n is square number</span><br/>        res<span class=\"br0\">[</span>MAXPROPERDIVS<span class=\"sy3\">-</span>result<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> result&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">Begin</span><br/>    <span class=\"co1\">//move close together</span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> result<span class=\"sy1\">;</span><br/>    j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> MAXPROPERDIVS<span class=\"sy3\">-</span>result<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy3\">*</span>result<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">repeat</span><br/>      res<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> res<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      inc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">until</span> i &gt; result<span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> res<span class=\"br0\">[</span>result<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      dec<span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> AllFacsOut<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> Longword<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  res<span class=\"sy1\">:</span>TRes<span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">,</span>k<span class=\"sy1\">,</span>j<span class=\"sy1\">:</span><span class=\"kw4\">LongInt</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">Begin</span><br/>   j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> findProperdivs<span class=\"br0\">(</span>n<span class=\"sy1\">,</span>res<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw3\">write</span><span class=\"br0\">(</span>n<span class=\"sy1\">:</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"st0\">'\u00a0: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">For</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> j<span class=\"sy3\">-</span><span class=\"nu0\">2</span> <span class=\"kw1\">do</span> <span class=\"kw3\">write</span><span class=\"br0\">(</span>res<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">IF</span> j&gt;<span class=\"sy3\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>     <span class=\"kw3\">write</span><span class=\"br0\">(</span>res<span class=\"br0\">[</span>j<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>   <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  primeDecomp<span class=\"sy1\">:</span> tprimeFac<span class=\"sy1\">;</span><br/>  rs <span class=\"sy1\">:</span> tRes<span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">,</span>j<span class=\"sy1\">,</span>max<span class=\"sy1\">,</span>maxcnt<span class=\"sy1\">:</span> LongWord<span class=\"sy1\">;</span><br/><span class=\"kw1\">BEGIN</span><br/>  InitSmallPrimes<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span><br/>    AllFacsOut<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  max    <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  maxCnt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">20</span><span class=\"sy3\">*</span><span class=\"nu0\">1000</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">Begin</span><br/>    PrimeDecomposition<span class=\"br0\">(</span>i<span class=\"sy1\">,</span>primeDecomp<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> CntProperDivs<span class=\"br0\">(</span>primeDecomp<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">IF</span> j&gt; maxCnt <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">Begin</span><br/>      maxcnt <span class=\"sy1\">:</span><span class=\"sy3\">=</span> j<span class=\"sy1\">;</span><br/>      max <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  PrimeDecomposition<span class=\"br0\">(</span>max<span class=\"sy1\">,</span>primeDecomp<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> CntProperDivs<span class=\"br0\">(</span>primeDecomp<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  PrimeFacOut<span class=\"br0\">(</span>primeDecomp<span class=\"br0\">)</span><span class=\"sy1\">;</span><span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'  '</span><span class=\"sy1\">,</span>j<span class=\"sy1\">:</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span><span class=\"st0\">' factors'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/>  <span class=\"co1\">//https://en.wikipedia.org/wiki/Highly_composite_number &lt;= HCN</span><br/>  <span class=\"co1\">//http://wwwhomes.uni-bielefeld.de/achim/highly.txt the first 1200 HCN</span><br/>  max <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">3491888400</span><span class=\"sy1\">;</span><br/>  PrimeDecomposition<span class=\"br0\">(</span>max<span class=\"sy1\">,</span>primeDecomp<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  j <span class=\"sy1\">:</span><span class=\"sy3\">=</span> CntProperDivs<span class=\"br0\">(</span>primeDecomp<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  PrimeFacOut<span class=\"br0\">(</span>primeDecomp<span class=\"br0\">)</span><span class=\"sy1\">;</span><span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">'  '</span><span class=\"sy1\">,</span>j<span class=\"sy1\">:</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span><span class=\"st0\">' factors'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw3\">writeln</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">END</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 23, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> ntheory <span class=\"co2\">qw/divisors/</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">sub</span> proper_divisors <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"co1\"># Like Pari/GP, divisors(0) = (0,1) and divisors(1) = ()</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">@d</span> <span class=\"sy0\">=</span> divisors<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/pop.html\"><span class=\"kw3\">pop</span></a> <span class=\"re0\">@d</span><span class=\"sy0\">;</span>  <span class=\"co1\"># divisors are in sorted order, so last entry is the input</span><br/>  <span class=\"re0\">@d</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>say <span class=\"st0\">\"$_: \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> proper_divisors<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># 1. For the max, we can do a traditional loop.</span><br/><span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$max</span><span class=\"sy0\">,</span><span class=\"re0\">$ind</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">20000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$nd</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a> proper_divisors<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"br0\">(</span><span class=\"re0\">$max</span><span class=\"sy0\">,</span><span class=\"re0\">$ind</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$nd</span><span class=\"sy0\">,</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$nd</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$max</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>say <span class=\"st0\">\"$max $ind\"</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># 2. Or we can use List::Util's max with decoration (this exploits its implementation)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <span class=\"co2\">qw/max/</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/no.html\"><span class=\"kw3\">no</span></a> warnings <span class=\"st_h\">'numeric'</span><span class=\"sy0\">;</span><br/>  say max<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span>proper_divisors<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\" $_\"</span> <span class=\"br0\">}</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">20000</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 22, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> propdiv <span class=\"br0\">(</span>\\<span class=\"kw1\">x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@l</span> <span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"kw1\">x</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> gather <span class=\"kw1\">for</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"kw1\">x</span><span class=\"sy0\">.</span><span class=\"kw3\">sqrt</span><span class=\"sy0\">.</span><span class=\"kw3\">floor</span> <span class=\"sy0\">-&gt;</span> \\d <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> \\y <span class=\"sy0\">=</span> <span class=\"kw1\">x</span> <span class=\"kw1\">div</span> d<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> y <span class=\"sy0\">*</span> d <span class=\"sy0\">==</span> <span class=\"kw1\">x</span> <span class=\"br0\">{</span> take d<span class=\"sy0\">;</span> take y <span class=\"kw1\">unless</span> y <span class=\"sy0\">==</span> d <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    gather <span class=\"re0\">@l</span><span class=\"sy0\">.</span><span class=\"me1\">deepmap</span><span class=\"br0\">(</span><span class=\"sy0\">*.</span><span class=\"me1\">take</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"$_ \"</span><span class=\"sy0\">,</span> propdiv<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@candidates</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">20000</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@pd</span> <span class=\"sy0\">=</span> propdiv<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$pd</span> <span class=\"sy0\">=</span> <span class=\"re0\">@pd</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"re0\">$pd</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$max</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@candidates</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <span class=\"re0\">$pd</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw3\">push</span> <span class=\"re0\">@candidates</span><span class=\"sy0\">,</span> <span class=\"re0\">$_</span> <span class=\"kw1\">if</span> <span class=\"re0\">$pd</span> <span class=\"sy0\">==</span> <span class=\"re0\">$max</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"max = $max, candidates = @candidates[]\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 27, "block": "<pre class=\"text highlighted_source\">global function factors(atom n, integer include1=0)<br/>-- returns a list of all integer factors of n<br/>--  if include1 is 0 (the default), result does not contain either 1 or n<br/>--  if include1 is 1, and n&gt;1, the result contains 1 and n<br/>--  if include1 is -1, and n&gt;1, the result contains 1 but not n<br/>sequence lfactors = {}, hfactors = {}<br/>atom hfactor<br/>integer p = 2,<br/>        lim = floor(sqrt(n))<br/>\u00a0<br/>    if n!=1 and include1!=0 then<br/>        lfactors = {1}<br/>        if include1=1 then<br/>            hfactors = {n}<br/>        end if<br/>    end if<br/>    while p&lt;=lim do<br/>        if remainder(n,p)=0 then<br/>            lfactors = append(lfactors,p)<br/>            hfactor = n/p<br/>            if hfactor=p then exit end if<br/>            hfactors = prepend(hfactors,hfactor)<br/>        end if<br/>        p += 1<br/>    end while <br/>    return lfactors &amp; hfactors<br/>end function</pre>"}, {"lang": "PHP", "loc": 38, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> ProperDivisors<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  yield <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$large_divisors</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;=</span> <a href=\"http://www.php.net/sqrt\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"re0\">$i</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      yield <span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span> <span class=\"sy0\">!=</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$large_divisors</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">/</span> <span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/array_reverse\"><span class=\"kw3\">array_reverse</span></a><span class=\"br0\">(</span><span class=\"re0\">$large_divisors</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    yield <span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.php.net/assert\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"nu0\">20</span><span class=\"sy0\">,</span> <span class=\"nu0\">25</span><span class=\"sy0\">,</span> <span class=\"nu0\">50</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span><br/>        <a href=\"http://www.php.net/iterator_to_array\"><span class=\"kw3\">iterator_to_array</span></a><span class=\"br0\">(</span>ProperDivisors<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/range\"><span class=\"kw3\">range</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es4\">$n</span> =&gt;\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>ProperDivisors<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$divisor</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">echo</span> <span class=\"st0\">\" <span class=\"es4\">$divisor</span>\"</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$divisorsCount</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">20000</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"re0\">$divisorsCount</span><span class=\"br0\">[</span><a href=\"http://www.php.net/sizeof\"><span class=\"kw3\">sizeof</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/iterator_to_array\"><span class=\"kw3\">iterator_to_array</span></a><span class=\"br0\">(</span>ProperDivisors<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.php.net/ksort\"><span class=\"kw3\">ksort</span></a><span class=\"br0\">(</span><span class=\"re0\">$divisorsCount</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"Numbers with most divisors: \"</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/implode\"><span class=\"kw3\">implode</span></a><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/end\"><span class=\"kw3\">end</span></a><span class=\"br0\">(</span><span class=\"re0\">$divisorsCount</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\".<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"They have \"</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/key\"><span class=\"kw3\">key</span></a><span class=\"br0\">(</span><span class=\"re0\">$divisorsCount</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" divisors.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 10, "block": "<pre class=\"text highlighted_source\"># Generate all proper divisors.<br/>(de propdiv (N)<br/>   (head -1 (filter<br/>      '((X) (=0 (% N X)))<br/>      (range 1 N) )) )<br/>\u00a0<br/># Obtaining the values from 1 to 10 inclusive.<br/>(mapcar propdiv (range 1 10))<br/># Output:<br/># (NIL (1) (1) (1 2) (1) (1 2 3) (1) (1 2 4) (1 3) (1 2 5))</pre>"}, {"lang": "PL/I", "loc": 64, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process source xref<span class=\"sy0\">;</span><br/> <span class=\"br0\">(</span><span class=\"kw1\">subrg</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><br/> cpd<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> p9a<span class=\"sy0\">=</span><span class=\"kw1\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>p9a<span class=\"sy0\">,</span>p9b<span class=\"br0\">)</span> <span class=\"kw1\">Pic</span><span class=\"st0\">'(9)9'</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> cnt<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> x <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> pd<span class=\"br0\">(</span><span class=\"nu0\">300</span><span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> sumpd   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> npd     <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> hi      <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>xl<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>xi<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> i       <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> x<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Call</span> proper_divisors<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>pd<span class=\"sy0\">,</span>npd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span><span class=\"st0\">' -&gt; '</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>pd<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> npd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> xi<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> x<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">20000</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Call</span> proper_divisors<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>pd<span class=\"sy0\">,</span>npd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Select</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span>npd<span class=\"sy0\">&gt;</span>hi<span class=\"br0\">)</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>       xi<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>       xl<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>x<span class=\"sy0\">;</span><br/>       hi<span class=\"sy0\">=</span>npd<span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span>npd<span class=\"sy0\">=</span>hi<span class=\"br0\">)</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>       xi<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>       xl<span class=\"br0\">(</span>xi<span class=\"br0\">)</span><span class=\"sy0\">=</span>x<span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">Otherwise</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>hi<span class=\"sy0\">,</span><span class=\"st0\">' -&gt; '</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>xl<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> xi<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> x<span class=\"sy0\">=</span> <span class=\"nu0\">166320</span><span class=\"sy0\">;</span> <span class=\"kw1\">Call</span> proper_divisors<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>pd<span class=\"sy0\">,</span>npd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span><span class=\"st0\">' -&gt; '</span><span class=\"sy0\">,</span>npd<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> x<span class=\"sy0\">=</span><span class=\"nu0\">1441440</span><span class=\"sy0\">;</span> <span class=\"kw1\">Call</span> proper_divisors<span class=\"br0\">(</span>x<span class=\"sy0\">,</span>pd<span class=\"sy0\">,</span>npd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span><span class=\"st0\">' -&gt; '</span><span class=\"sy0\">,</span>npd<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/> p9b<span class=\"sy0\">=</span><span class=\"kw1\">time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"br0\">(</span>p9b<span class=\"sy0\">-</span>p9a<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">1000</span><span class=\"sy0\">,</span><span class=\"st0\">' seconds elapsed'</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"sy0\">;</span><br/>\u00a0<br/> proper_divisors<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>pd<span class=\"sy0\">,</span>npd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span>pd<span class=\"br0\">(</span><span class=\"nu0\">300</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>npd<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>d<span class=\"sy0\">,</span>delta<span class=\"br0\">)</span>       <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> npd<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">If</span> n<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> <span class=\"kw1\">mod</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">Then</span>  <span class=\"coMULTI\">/* odd number  */</span><br/>     delta<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Else</span>                <span class=\"coMULTI\">/* even number */</span><br/>     delta<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> d<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"kw1\">By</span> delta<span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> <span class=\"kw1\">mod</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>d<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>       npd<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>       pd<span class=\"br0\">(</span>npd<span class=\"br0\">)</span><span class=\"sy0\">=</span>d<span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 19, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> proper<span class=\"sy0\">-</span>divisor <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-ge</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$lim</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Floor<span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Sqrt<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"re0\">$less</span><span class=\"sy0\">,</span> <span class=\"re0\">$greater</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">for</span><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$lim</span>; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">%</span><span class=\"re0\">$i</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$less</span> <span class=\"sy0\">+=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>                <span class=\"re0\">$greater</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">/</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"re0\">$greater</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw3\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$lim</span> <span class=\"kw4\">-ne</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw4\">-and</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">%</span><span class=\"re0\">$lim</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$less</span> <span class=\"sy0\">+=</span> <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"re0\">$lim</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>        $<span class=\"br0\">(</span><span class=\"re0\">$less</span> <span class=\"sy0\">+</span> <span class=\"re0\">$greater</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <span class=\"kw3\">else</span> <span class=\"br0\">{</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"st0\">\"$(proper-divisor 100)\"</span><br/><span class=\"st0\">\"$(proper-divisor 496)\"</span><br/><span class=\"st0\">\"$(proper-divisor 2048)\"</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 48, "block": "<pre class=\"prolog highlighted_source\">divisor<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Divisor<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    UpperBound <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">round</span></a><span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sqrt</span></a><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    between<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> UpperBound<span class=\"sy4\">,</span> D<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    <span class=\"nu0\">0</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> D<span class=\"sy4\">,</span><br/>    <span class=\"br0\">(</span><br/>        Divisor <span class=\"sy6\">=</span> D<br/>     <span class=\"sy4\">;</span><br/>        LargerDivisor <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N<span class=\"sy3\">/</span>D<span class=\"sy4\">,</span><br/>        LargerDivisor <span class=\"sy6\">=</span>\\<span class=\"sy6\">=</span> D<span class=\"sy4\">,</span><br/>        Divisor <span class=\"sy6\">=</span> LargerDivisor<br/>    <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>proper_divisor<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> D<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    divisor<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> D<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    D <span class=\"sy6\">=</span>\\<span class=\"sy6\">=</span> N<span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">%% Task 1</span><br/><span class=\"co1\">%</span><br/>\u00a0<br/>proper_divisors<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Ds<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">setof</span></a><span class=\"br0\">(</span>D<span class=\"sy4\">,</span> proper_divisor<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> D<span class=\"br0\">)</span><span class=\"sy4\">,</span> Ds<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">%% Task 2</span><br/><span class=\"co1\">%</span><br/>\u00a0<br/>show_proper_divisors_of_range<span class=\"br0\">(</span>Low<span class=\"sy4\">,</span> High<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">findall</span></a><span class=\"br0\">(</span> N<span class=\"sy4\">:</span>Ds<span class=\"sy4\">,</span><br/>             <span class=\"br0\">(</span> between<span class=\"br0\">(</span>Low<span class=\"sy4\">,</span> High<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>               proper_divisors<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Ds<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>             Results <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    maplist<span class=\"br0\">(</span>writeln<span class=\"sy4\">,</span> Results<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">%% Task 3</span><br/><span class=\"co1\">%</span><br/>\u00a0<br/>proper_divisor_count<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Count<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    proper_divisors<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Ds<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    length<span class=\"br0\">(</span>Ds<span class=\"sy4\">,</span> Count<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>find_most_proper_divisors_in_range<span class=\"br0\">(</span>Low<span class=\"sy4\">,</span> High<span class=\"sy4\">,</span> Result<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    aggregate_all<span class=\"br0\">(</span> max<span class=\"br0\">(</span>Count<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>                   <span class=\"br0\">(</span> between<span class=\"br0\">(</span>Low<span class=\"sy4\">,</span> High<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>                     proper_divisor_count<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Count<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>                   max<span class=\"br0\">(</span>MaxCount<span class=\"sy4\">,</span> Num<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    Result <span class=\"sy6\">=</span> <span class=\"br0\">(</span>num<span class=\"br0\">(</span>Num<span class=\"br0\">)</span><span class=\"sy3\">-</span>divisor_count<span class=\"br0\">(</span>MaxCount<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 58, "block": "<pre class=\"purebasic highlighted_source\">\u00a0<br/><span class=\"kw1\">EnableExplicit</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> ListProperDivisors<span class=\"br0\">(</span>Number, List Lst<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> Number <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Protected</span> i<br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> Number <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">If</span> Number <span class=\"sy0\">%</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>Lst<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      Lst<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> i<br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.i CountProperDivisors<span class=\"br0\">(</span>Number<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> Number <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span>\u00a0: <span class=\"kw1\">ProcedureReturn</span> <span class=\"nu0\">0</span>\u00a0: <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Protected</span> i, count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> Number <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">If</span> Number <span class=\"sy0\">%</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> count<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Define</span> n, count, most <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, maxCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"The proper divisors of the following numbers are\u00a0: \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">NewList</span> lst<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10</span><br/>    ListProperDivisors<span class=\"br0\">(</span>n, lst<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" -&gt; \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> ListSize<span class=\"br0\">(</span>lst<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"(None)\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Else</span>  <br/>      <span class=\"kw1\">ForEach</span> lst<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>lst<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw2\">ClearList</span><span class=\"br0\">(</span>lst<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">For</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> <span class=\"nu0\">20000</span><br/>    count <span class=\"sy0\">=</span> CountProperDivisors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> count <span class=\"sy0\">&gt;</span> maxCount<br/>      maxCount <span class=\"sy0\">=</span> count<br/>      most <span class=\"sy0\">=</span> n<br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>most<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" has the most proper divisors, namely \"</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Str</span><span class=\"br0\">(</span>maxCount<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"Press any key to close the console\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Repeat</span>: <span class=\"kw2\">Delay</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Until</span> <span class=\"kw2\">Inkey</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"\"</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 12, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> proper_divs2<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>...     <span class=\"kw1\">return</span> <span class=\"br0\">{</span>x <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span> // <span class=\"nu0\">2</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> n\u00a0% x <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">and</span> n <span class=\"sy0\">!=</span> x<span class=\"br0\">}</span><br/>... <br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"br0\">[</span>proper_divs2<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <br/><span class=\"sy0\">&gt;&gt;&gt;</span> n<span class=\"sy0\">,</span> length <span class=\"sy0\">=</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>proper_divs2<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">20001</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> pd: pd<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> n<br/><span class=\"nu0\">15120</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> length<br/><span class=\"nu0\">79</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "R", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Proper divisors. 12/10/16 aev<br/>require(numbers);<br/>V &lt;- sapply(1:20000, Sigma, k = 0, proper = TRUE); ind &lt;- which(V==max(V));<br/>cat(\"  *** max number of divisors:\", max(V), \"\\n\",\" *** for the following indices:\",ind, \"\\n\");<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 11, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require math)<br/>(define (proper-divisors n) (drop-right (divisors n) 1))<br/>(for ([n (in-range 1 (add1 10))])<br/>  (printf \"proper divisors of: ~a\\t~a\\n\" n (proper-divisors n)))<br/>(define most-under-20000<br/>  (for/fold ([best '(1)]) ([n (in-range 2 (add1 20000))])<br/>    (define divs (proper-divisors n))<br/>    (if (&lt; (length (cdr best)) (length divs)) (cons n divs) best)))<br/>(printf \"~a has ~a proper divisors\\n\"<br/>        (car most-under-20000) (length (cdr most-under-20000)))</pre>"}, {"lang": "REXX", "loc": 47, "block": "<pre class=\"rexx highlighted_source\"><span class=\"kw1\">Call</span> <span class=\"kw6\">time</span> <span class=\"st0\">'R'</span><br/><span class=\"kw1\">Do</span> x=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">10</span><br/>  <span class=\"kw1\">Say</span> x <span class=\"st0\">'-&gt;'</span> proper_divisors<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/>\u00a0<br/>hi=<span class=\"nu0\">1</span><br/><span class=\"kw1\">Do</span> x=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">20000</span><br/>  <span class=\"coMULTI\">/* If x//1000=0 Then Say x */</span><br/>  npd=count_proper_divisors<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Select</span><br/>    <span class=\"kw3\">When</span> npd<span class=\"sy0\">&gt;</span>hi <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>      list<span class=\"sy0\">.</span>npd=x<br/>      hi=npd<br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">When</span> npd=hi <span class=\"kw3\">Then</span><br/>      list<span class=\"sy0\">.</span>hi=list<span class=\"sy0\">.</span>hi x<br/>    <span class=\"kw3\">Otherwise</span><br/>      <span class=\"kw1\">Nop</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/>\u00a0<br/><span class=\"kw1\">Say</span> hi <span class=\"st0\">'-&gt;'</span> list<span class=\"sy0\">.</span>hi<br/>\u00a0<br/><span class=\"kw1\">Say</span> <span class=\"st0\">' 166320 -&gt;'</span> count_proper_divisors<span class=\"br0\">(</span><span class=\"nu0\">166320</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'1441440 -&gt;'</span> count_proper_divisors<span class=\"br0\">(</span><span class=\"nu0\">1441440</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Say</span> <span class=\"kw6\">time</span><span class=\"br0\">(</span><span class=\"st0\">'E'</span><span class=\"br0\">)</span> <span class=\"st0\">'seconds elapsed'</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>proper_divisors: <span class=\"kw1\">Procedure</span><br/><span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> n<br/><span class=\"kw1\">If</span> n=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Return</span> <span class=\"st0\">''</span><br/>pd=<span class=\"st0\">''</span><br/><span class=\"coMULTI\">/* Optimization reduces 37 seconds to 28 seconds */</span><br/><span class=\"kw1\">If</span> n<span class=\"sy0\">//</span><span class=\"nu0\">2</span>=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span>  <span class=\"coMULTI\">/* odd number  */</span><br/>  delta=<span class=\"nu0\">2</span><br/><span class=\"kw3\">Else</span>            <span class=\"coMULTI\">/* even number */</span><br/>  delta=<span class=\"nu0\">1</span><br/><span class=\"kw1\">Do</span> d=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> n%2 <span class=\"kw2\">By</span> delta<br/>  <span class=\"kw1\">If</span> n<span class=\"sy0\">//</span>d=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>    pd=pd d<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span> <span class=\"kw6\">space</span><span class=\"br0\">(</span>pd<span class=\"br0\">)</span><br/>\u00a0<br/>count_proper_divisors: <span class=\"kw1\">Procedure</span><br/><span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> n<br/><span class=\"kw1\">Return</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>proper_divisors<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ring", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Proper divisors<br/>\u00a0<br/>limit = 10<br/>for n=1 to limit<br/>    if n=1<br/>       see \"\" + 1 + \" -&gt; (None)\" + nl<br/>       loop<br/>    ok<br/>    see \"\" + n + \" -&gt; \"<br/>    for m=1 to n-1<br/>        if n%m = 0<br/>           see \" \" + m <br/>        ok<br/>    next<br/>    see nl<br/>next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 18, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">\"prime\"</span><br/>\u00a0<br/><span class=\"kw1\">class</span> <span class=\"kw3\">Integer</span><br/>  <span class=\"kw1\">def</span> proper_divisors<br/>    <span class=\"kw2\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> <span class=\"kw2\">self</span> == <span class=\"nu0\">1</span><br/>    primes = prime_division.<span class=\"me1\">flat_map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>prime, freq<span class=\"sy0\">|</span> <span class=\"br0\">[</span>prime<span class=\"br0\">]</span> <span class=\"sy0\">*</span> freq<span class=\"br0\">}</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">1</span>...<span class=\"me1\">primes</span>.<span class=\"me1\">size</span><span class=\"br0\">)</span>.<span class=\"me1\">each_with_object</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>n, res<span class=\"sy0\">|</span><br/>      primes.<span class=\"me1\">combination</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>combi<span class=\"sy0\">|</span> res <span class=\"sy0\">&lt;&lt;</span> combi.<span class=\"me1\">inject</span><span class=\"br0\">(</span>:<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span>.<span class=\"me1\">flatten</span>.<span class=\"me1\">uniq</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{n}: #{n.proper_divisors}\"</span><span class=\"br0\">}</span><br/>\u00a0<br/>size, <span class=\"kw3\">select</span> = <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">20</span>_000<span class=\"br0\">)</span>.<span class=\"me1\">group_by</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>n<span class=\"sy0\">|</span> n.<span class=\"me1\">proper_divisors</span>.<span class=\"me1\">size</span><span class=\"br0\">}</span>.<span class=\"me1\">max</span><br/><span class=\"kw3\">select</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>n<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{n} has #{size} divisors\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 39, "block": "<pre class=\"text highlighted_source\">trait ProperDivisors {<br/>    fn proper_divisors(&amp;self) -&gt; Option&lt;Vec&lt;u64&gt;&gt;;<br/>}<br/>\u00a0<br/>impl ProperDivisors for u64 {<br/>    fn proper_divisors(&amp;self) -&gt; Option&lt;Vec&lt;u64&gt;&gt; {<br/>        if self.le(&amp;1) {<br/>            return None;<br/>        }<br/>        let mut divisors: Vec&lt;u64&gt; = Vec::new();<br/>\u00a0<br/>        for i in 1..*self {<br/>            if *self\u00a0% i == 0 {<br/>                divisors.push(i);<br/>            }<br/>        }<br/>        Option::from(divisors)<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    for i in 1..11 {<br/>        println!(\"Proper divisors of {:2}: {:?}\", i,<br/>                 i.proper_divisors().unwrap_or(vec![]));<br/>    }<br/>\u00a0<br/>    let mut most_idx: u64 = 0;<br/>    let mut most_divisors: Vec&lt;u64&gt; = Vec::new();<br/>    for i in 1..20_001 {<br/>        let divs = i.proper_divisors().unwrap_or(vec![]);<br/>        if divs.len() &gt; most_divisors.len() {<br/>            most_divisors = divs;<br/>            most_idx = i;<br/>        }<br/>    }<br/>    println!(\"In 1 to 20000, {} has the most proper divisors at {}\", most_idx,<br/>             most_divisors.len());<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 13, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> properDivisors<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> to n/<span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> format<span class=\"br0\">(</span>i<span class=\"sy0\">:</span> Int, divisors<span class=\"sy0\">:</span> Seq<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> f<span class=\"st0\">\"$i%5d    ${divisors.length}%2d   ${divisors mkString \"</span> <span class=\"st0\">\"}\"</span><br/>\u00a0<br/>println<span class=\"br0\">(</span>f<span class=\"st0\">\"    n   cnt   PROPER DIVISORS\"</span><span class=\"br0\">)</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>count, list<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> to <span class=\"nu0\">20000</span><span class=\"br0\">)</span>.<span class=\"me1\">foldLeft</span><span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span>max, i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> divisors <span class=\"sy0\">=</span> properDivisors<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10</span> || i <span class=\"sy0\">==</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span> format<span class=\"br0\">(</span>i, divisors<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>max.<span class=\"sy0\">_</span>1 <span class=\"sy0\">&lt;</span> divisors.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>divisors.<span class=\"me1\">length</span>, List<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>max.<span class=\"sy0\">_</span>1 <span class=\"sy0\">==</span> divisors.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>divisors.<span class=\"me1\">length</span>, max.<span class=\"sy0\">_</span>2 <span class=\"sy0\">:::</span> List<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> max<br/><span class=\"br0\">}</span><br/>\u00a0<br/>list.<span class=\"me1\">foreach</span><span class=\"br0\">(</span> number <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>f<span class=\"st0\">\"$number%5d    ${properDivisors(number).length}\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span></pre>"}, {"lang": "Sidef", "loc": 24, "block": "<pre class=\"ruby highlighted_source\">func propdiv <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    gather <span class=\"br0\">{</span><br/>        <span class=\"br0\">{</span> <span class=\"sy0\">|</span>d<span class=\"sy0\">|</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"st0\">`divides`</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                take<span class=\"br0\">(</span>d, n<span class=\"sy0\">//</span>d<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span>..<span class=\"me1\">n</span>.<span class=\"me1\">isqrt</span><br/>    <span class=\"br0\">}</span>.<span class=\"me1\">grep</span><span class=\"br0\">{</span> _\u00a0!= n <span class=\"br0\">}</span>.<span class=\"me1\">uniq</span>.<span class=\"me1\">sort</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> say <span class=\"st0\">\"#{i}<span class=\"es0\">\\t</span>#{propdiv(i)}\"</span> <span class=\"br0\">}</span> <span class=\"sy0\">&lt;&lt;</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><br/>\u00a0<br/>var max = <span class=\"nu0\">0</span><br/>var candidates = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><span class=\"nu0\">20</span>_000.<span class=\"me1\">times</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>    var divs = propdiv<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">len</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>divs <span class=\"sy0\">&gt;</span> max<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        candidates = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        max = divs<br/>    <span class=\"br0\">}</span><br/>    candidates <span class=\"sy0\">&lt;&lt;</span> i <span class=\"kw1\">if</span> <span class=\"br0\">(</span>divs == max<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say <span class=\"st0\">\"max = #{max}, candidates = #{candidates}\"</span></pre>"}, {"lang": "Swift", "loc": 4, "block": "<pre class=\"text highlighted_source\">func properDivs1(n: Int) -&gt; [Int] {<br/>\u00a0<br/>    return filter (1 ..&lt; n) { n\u00a0% $0 == 0 }<br/>}</pre>"}, {"lang": "Tcl", "loc": 26, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> properDivisors <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">set</span> divs <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">lappend</span> divs <span class=\"re0\">$i</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">*</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">lappend</span> divs <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> / <span class=\"re0\">$i</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$divs</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">10</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"$i =&gt; {[join [lsort -int [properDivisors $i]] ,]}\"</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">set</span> maxI <span class=\"br0\">[</span><span class=\"kw1\">set</span> maxC <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">20000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> c <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"br0\">[</span>properDivisors <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$c</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$maxC</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> maxI <span class=\"re0\">$i</span><br/>\t<span class=\"kw1\">set</span> maxC <span class=\"re0\">$c</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"max: $maxI =&gt; (...$maxC\u2026)\"</span></pre>"}, {"lang": "VBA", "loc": 28, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Public</span> <span class=\"kw2\">Sub</span> Proper_Divisor()<br/><span class=\"kw4\">Dim</span> t() <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, l <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, c <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> 10<br/>        Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Proper divisor of \"</span> &amp; i &amp; <span class=\"st0\">\"\u00a0: \"</span> &amp; Join(S(i), <span class=\"st0\">\", \"</span>)<br/>    <span class=\"kw3\">Next</span><br/>    <span class=\"kw3\">For</span> i = 2 <span class=\"kw3\">To</span> 20000<br/>        l = <span class=\"kw4\">UBound</span>(S(i)) + 1<br/>        <span class=\"kw3\">If</span> l &gt; c <span class=\"kw3\">Then</span> c = l: j = i<br/>    <span class=\"kw3\">Next</span><br/>    Debug.<span class=\"kw4\">Print</span> <span class=\"st0\">\"Number in the range 1 to 20,000 with the most proper divisors is\u00a0: \"</span> &amp; j<br/>    Debug.<span class=\"kw4\">Print</span> j &amp; <span class=\"st0\">\" count \"</span> &amp; c &amp; <span class=\"st0\">\" proper divisors\"</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw2\">Function</span> S(n <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>()<br/><span class=\"co1\">'returns the proper divisors of n<br/></span><span class=\"kw4\">Dim</span> j <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, t() <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, c <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    <span class=\"co1\">'t = list of proper divisor of n<br/></span>    <span class=\"kw3\">If</span> n &gt; 1 <span class=\"kw3\">Then</span><br/>        <span class=\"kw3\">For</span> j = 1 <span class=\"kw3\">To</span> n \\ 2<br/>            <span class=\"kw3\">If</span> n <span class=\"kw4\">Mod</span> j = 0 <span class=\"kw3\">Then</span><br/>                <span class=\"kw4\">ReDim</span> <span class=\"kw4\">Preserve</span> t(c)<br/>                t(c) = j<br/>                c = c + 1<br/>            <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>        <span class=\"kw3\">Next</span><br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    S = t<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "zkl", "loc": 5, "block": "<pre class=\"text highlighted_source\">fcn properDivs(n){ [1.. (n + 1)/2 + 1].filter('wrap(x){ n%x==0 and n!=x }) }<br/>[1..10].apply(properDivs).println();<br/>[1..20_001].apply('wrap(n){ T(properDivs(n).len(),n) })<br/>   .reduce(fcn([(a,_)]ab, [(c,_)]cd){ a&gt;c and ab or cd },T(0,0))<br/>   .println();</pre>"}]}