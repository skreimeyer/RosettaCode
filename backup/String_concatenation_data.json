{"task": "String_concatenation", "blocks": [{"lang": "ABAP", "loc": 8, "block": "<pre class=\"abap highlighted_source\"><a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">DATA</span></a><span class=\"sy0\">:</span> s1 <span class=\"kw4\">TYPE</span> <span class=\"kw4\">string</span><span class=\"sy0\">,</span><br/>      s2 <span class=\"kw4\">TYPE</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><br/>\u00a0<br/>s1 <span class=\"sy1\">=</span> <span class=\"st0\">'Hello'</span><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPCONCATENATE.htm\"><span class=\"kw3\">CONCATENATE</span></a> s1 <span class=\"st0\">' literal'</span> <span class=\"kw4\">INTO</span> s2 <span class=\"kw9\">RESPECTING BLANKS</span><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> s1<span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> s2<span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "ActionScript", "loc": 13, "block": "<pre class=\"actionscript highlighted_source\">package<br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">public</span> <span class=\"kw2\">class</span> Str<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">public</span> <span class=\"kw3\">static</span> <span class=\"kw2\">function</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>:<span class=\"kw3\">void</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw2\">var</span> s:<span class=\"kw3\">String</span> = <span class=\"st0\">\"hello\"</span>;<br/>            <span class=\"kw3\">trace</span><span class=\"br0\">(</span>s + <span class=\"st0\">\" literal\"</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw2\">var</span> s2:<span class=\"kw3\">String</span> = s + <span class=\"st0\">\" literal\"</span>;<br/>            <span class=\"kw3\">trace</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span>;<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 9, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;  <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> String_Concatenation <span class=\"kw1\">is</span><br/>   S1\u00a0: <span class=\"kw3\">constant</span> String\u00a0:= <span class=\"st0\">\"Hello\"</span>;<br/>   S2\u00a0: <span class=\"kw3\">constant</span> String\u00a0:= S1 &amp; <span class=\"st0\">\" literal\"</span>;<br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span>S1<span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span>S2<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> String_Concatenation;</pre>"}, {"lang": "Aime", "loc": 8, "block": "<pre class=\"text highlighted_source\">text s, v;<br/>\u00a0<br/>s = \"Hello\";<br/>o_text(s);<br/>o_newline();<br/>v = cat(s, \", World!\");<br/>o_text(v);<br/>o_newline();</pre>"}, {"lang": "Apex", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>String s1 = 'Hello ';<br/>String s2 = 'Salesforce Developer!';<br/>\u00a0<br/>String s3 = s1+s2;<br/>\u00a0<br/>// Print output<br/>System.debug(s3);</pre>"}, {"lang": "AppleScript", "loc": 5, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">try</span><br/>    <span class=\"kw3\">set</span> endMsg <span class=\"kw3\">to</span> <span class=\"st0\">\"world!\"</span><br/>    <span class=\"kw3\">set</span> totMsg <span class=\"kw3\">to</span> <span class=\"st0\">\"Hello, \"</span> <span class=\"sy0\">&amp;</span> endMsg<br/>    <span class=\"kw1\">display dialog</span> totMsg<br/><span class=\"kw3\">end</span> <span class=\"kw3\">try</span></pre>"}, {"lang": "AutoHotkey", "loc": 4, "block": "<pre class=\"autohotkey highlighted_source\">s <span class=\"sy0\">:=</span> <span class=\"st0\">\"hello\"</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%s%</span><br/>s1 <span class=\"sy0\">:=</span> s <span class=\"sy0\">.</span> <span class=\"st0\">\"  literal\"</span> <span class=\"co1\">;the . is optional</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%s1%</span></pre>"}, {"lang": "AWK", "loc": 6, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>   s = <span class=\"st0\">\"hello\"</span><br/>   <span class=\"kw5\">print</span> s <span class=\"st0\">\" literal\"</span><br/>   s1 = s <span class=\"st0\">\" literal\"</span><br/>   <span class=\"kw5\">print</span> s1<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Axe", "loc": 5, "block": "<pre class=\"text highlighted_source\">Lbl CONCAT<br/>Copy(r\u2081,L\u2081,length(r\u2081))<br/>Copy(r\u2082,L\u2081+length(r\u2081),length(r\u2082)+1)<br/>L\u2081<br/>Return</pre>"}, {"lang": "ALGOL 68", "loc": 4, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw3\">STRING</span> s <span class=\"sy1\">:=</span> <span class=\"st0\">\"hello\"</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"sy1\">+</span> <span class=\"st0\">\" literal\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw3\">STRING</span> s1 <span class=\"sy1\">:=</span> s <span class=\"sy1\">+</span> <span class=\"st0\">\" literal\"</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s1<span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "BASIC", "loc": 4, "block": "<pre class=\"qbasic highlighted_source\">s$ <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> s$;<span class=\"st0\">\" literal\"</span> <span class=\"co1\">'or s$ + \" literal\"</span><br/>s2$ <span class=\"sy0\">=</span> s$ <span class=\"sy0\">+</span> <span class=\"st0\">\" literal\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> s2$</pre>"}, {"lang": "Batch File", "loc": 4, "block": "<pre class=\"dos highlighted_source\"><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> string=Hello<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">string</span><span class=\"sy0\">%</span> World<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> string2=<span class=\"sy0\">%</span><span class=\"re3\">string</span><span class=\"sy0\">%</span> World<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">string2</span><span class=\"sy0\">%</span></pre>"}, {"lang": "Bracmat", "loc": 4, "block": "<pre class=\"text highlighted_source\">\"Hello \":?var1 <br/>&amp; \"World\":?var2 <br/>&amp; str$(!var1\u00a0!var2):?var12 <br/>&amp; put$(\"var1=\"\u00a0!var1 \", var2=\"\u00a0!var2 \", var12=\"\u00a0!var12 \"\\n\")</pre>"}, {"lang": "Burlesque", "loc": 2, "block": "<pre class=\"text highlighted_source\">blsq ) \"Hello, \"\"world!\"?+<br/>\"Hello, world!\"</pre>"}, {"lang": "C", "loc": 25, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>sconcat<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s1<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s2<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s0 <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>s1<span class=\"br0\">)</span><span class=\"sy0\">+</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>s0<span class=\"sy0\">,</span> s1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcat.html\"><span class=\"kw3\">strcat</span></a><span class=\"br0\">(</span>s0<span class=\"sy0\">,</span> s2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> s0<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span><span class=\"sy0\">;</span><br/>   <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s2<span class=\"sy0\">;</span><br/>\u00a0<br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s literal<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"coMULTI\">/* or */</span><br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> <span class=\"st0\">\" literal\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   s2 <span class=\"sy0\">=</span> sconcat<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">\" literal\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "ChucK", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\"Hello\" =&gt; string A;<br/>A + \" World!\" =&gt; string B;<br/>&lt;&lt;&lt; B &gt;&gt;&gt;;<br/>\u00a0</pre>"}, {"lang": "C++", "loc": 10, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> s <span class=\"sy1\">=</span> <span class=\"st0\">\"hello\"</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> s <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" literal\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> s2 <span class=\"sy1\">=</span> s <span class=\"sy2\">+</span> <span class=\"st0\">\" literal\"</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> s2 <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 11, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\" literal\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> s2 <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> <span class=\"st0\">\" literal\"</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>def a-str <span class=\"st0\">\"abcd\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println <span class=\"br0\">(</span>str a-str <span class=\"st0\">\"efgh\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>def a-new-str <span class=\"br0\">(</span>str a-str <span class=\"st0\">\"efgh\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>println a-new-str<span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 15, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> Concat<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  Str  <span class=\"kw3\">PIC</span> X<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"kw3\">VALUE</span> <span class=\"st0\">\"Hello, \"</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  Str2 <span class=\"kw3\">PIC</span> X<span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"Str \u00a0: \"</span> Str<br/>           <span class=\"kw3\">STRING</span> Str <span class=\"st0\">\" World!\"</span> <span class=\"kw3\">DELIMITED</span> <span class=\"kw3\">BY</span> <span class=\"kw3\">SIZE</span> <span class=\"kw2\">INTO</span> Str2<br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"Str2\u00a0: \"</span> Str2<br/>\u00a0<br/>           GOBACK<br/>           <span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s <span class=\"st0\">\"hello\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>format t <span class=\"st0\">\"~a there!~%\"</span> s<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>s2 <span class=\"st0\">\" there!\"</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>s <span class=\"br0\">(</span>concatenate 'string s s2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>format t <span class=\"st0\">\"~a~%\"</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 15, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> StringConcatenation;<br/><span class=\"kw1\">IMPORT</span> StdLog;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\tstr1<span class=\"sy0\">,</span>str2<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">128</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>\tstr1 <span class=\"sy0\">:=</span> <span class=\"st0\">\"Hello\"</span>;<br/>\tstr2 <span class=\"sy0\">:=</span> str1 <span class=\"sy0\">+</span> <span class=\"st0\">\" world\"</span>;<br/>\tStdLog.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\":&gt; \"</span> <span class=\"sy0\">+</span> str2<span class=\"br0\">)</span>;StdLog.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> Do;<br/>\u00a0<br/><span class=\"kw1\">END</span> StringConcatenation.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 8, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">string</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>s <span class=\"sy0\">~</span> <span class=\"st0\">\" world\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> s2 <span class=\"sy0\">=</span> s <span class=\"sy0\">~</span> <span class=\"st0\">\" world\"</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "DCL", "loc": 3, "block": "<pre class=\"dcl highlighted_source\">$ string1 <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span><br/>$ string2 <span class=\"sy0\">=</span> string1 + <span class=\"st0\">\" world\"</span><br/>$ <span class=\"kw1\">show symbol</span> string*</pre>"}, {"lang": "Delphi", "loc": 12, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> Concat<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  s1<span class=\"sy1\">,</span> s2<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  s1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'Hello'</span><span class=\"sy1\">;</span><br/>  s2 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> s1 <span class=\"sy3\">+</span> <span class=\"st0\">' literal'</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">WriteLn</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 3, "block": "<pre class=\"text highlighted_source\">local\u00a0:s1 \"hello\"<br/>local\u00a0:s2 concat( s1 \", world\" )<br/>!print s2</pre>"}, {"lang": "DWScript", "loc": 5, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">var</span> s1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'Hello'</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span> s2 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> s1 <span class=\"sy3\">+</span> <span class=\"st0\">' World'</span><span class=\"sy1\">;</span><br/>\u00a0<br/>PrintLn<span class=\"br0\">(</span>s1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>PrintLn<span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Dylan.NET", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>//to be compiled using dylan.NET v. 11.5.1.2 or later.<br/>#refstdasm mscorlib.dll<br/>\u00a0<br/>import System<br/>\u00a0<br/>assembly concatex exe<br/>ver 1.3.0.0<br/>\u00a0<br/>class public Program<br/>\u00a0<br/>   method public static void main()<br/>        var s as string = \"hello\"<br/>        Console::Write(s)<br/>        Console::WriteLine(\" literal\")<br/>        var s2 as string = s + \" literal\"<br/>        Console::WriteLine(s2)<br/>  end method<br/>\u00a0<br/>end class</pre>"}, {"lang": "Ela", "loc": 3, "block": "<pre class=\"text highlighted_source\">hello = \"Hello\"<br/>hello'world = hello ++ \", \" ++ \"world\"<br/>(hello, hello'world)</pre>"}, {"lang": "Elena", "loc": 9, "block": "<pre class=\"text highlighted_source\">program =<br/>[<br/>    var s\u00a0:= \"Hello\".<br/>    var s2\u00a0:= s + \" literal\".<br/>\u00a0<br/>    console writeLine:s.<br/>    console writeLine:s2.<br/>    console readChar.<br/>].</pre>"}, {"lang": "Elixir", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>s = \"hello\"<br/>t = s &lt;&gt; \" literal\"<br/>\u00a0<br/>IO.puts s<br/>IO.puts t<br/>\u00a0</pre>"}, {"lang": "Emacs Lisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(defun glue (str1 str2)<br/>  (concat str1 str2) )<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 4, "block": "<pre class=\"erlang highlighted_source\"><span class=\"re5\">S</span> <span class=\"sy3\">=</span> <span class=\"st0\">\"hello\"</span><span class=\"sy1\">,</span><br/><span class=\"re5\">S1</span> <span class=\"sy3\">=</span> <span class=\"re5\">S</span> <span class=\"sy3\">++</span> <span class=\"st0\">\" literal\"</span><span class=\"sy1\">,</span><br/><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span> <span class=\"br0\">(</span><span class=\"st0\">\"~s literal~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">S</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span> <span class=\"br0\">(</span><span class=\"st0\">\"~s~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">S1</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "ERRE", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>  ..........<br/>  S$=\"HELLO\"<br/>  PRINT(S$;\" LITERAL\")\u00a0! or S$+\" LITERAL\"<br/>  S2$=S$+\" LITERAL\"<br/>  PRINT(S2$)<br/>  ..........<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 7, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw2\">sequence</span> s<span class=\"sy2\">,</span> s1<br/>s <span class=\"sy1\">=</span> <span class=\"st0\">\"hello\"</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> s <span class=\"sy1\">&amp;</span> <span class=\"st0\">\" literal\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/>s1 <span class=\"sy1\">=</span> s <span class=\"sy1\">&amp;</span> <span class=\"st0\">\" literal\"</span><br/><span class=\"kw2\">print</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> s1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Excel", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\u00a0<br/>=CONCATENATE(A1;\" \";B1)<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 10, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main args <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span><br/>    Console.<span class=\"me1\">Write</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\" literal\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> s2 <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> <span class=\"st0\">\" literal\"</span><br/>    Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"wake up\" [ \" sheeple\" append print ] [ \", you sheep\" append ] bi print</pre>"}, {"lang": "Falcon", "loc": 9, "block": "<pre class=\"falcon highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* created by Aykayayciti Earl Lamont Montgomery<br/>April 9th, 2018 */</span><br/>\u00a0<br/>s <span class=\"sy0\">=</span> <span class=\"st0\">\"critical\"</span><br/><span class=\"sy0\">&gt;</span> s <span class=\"sy0\">+</span> <span class=\"st0\">\" literal\"</span><br/>s2 <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> <span class=\"st0\">\" literal\"</span><br/><span class=\"sy0\">&gt;</span> s2<br/>\u00a0</pre>"}, {"lang": "Fantom", "loc": 8, "block": "<pre class=\"text highlighted_source\">fansh&gt; a\u00a0:= \"abc\"<br/>abc<br/>fansh&gt; b\u00a0:= a + \"def\"<br/>abcdef<br/>fansh&gt; a<br/>abc<br/>fansh&gt; b<br/>abcdef</pre>"}, {"lang": "Forth", "loc": 4, "block": "<pre class=\"text highlighted_source\">s\" hello\" pad place<br/>pad count type<br/>s\"  there!\" pad +place    \\ +place is called \"append\" on some Forths<br/>pad count type</pre>"}, {"lang": "Fortran", "loc": 10, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> StringConcatenation<br/>\u00a0<br/><span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span>          <span class=\"sy0\">::</span> <span class=\"me2\">maxstringlength</span> <span class=\"sy0\">=</span> <span class=\"nu0\">64</span><br/><span class=\"co1\">character (maxstringlength)\u00a0:: s1, s = \"hello\"</span><br/>\u00a0<br/>print <span class=\"sy0\">*</span>,s <span class=\"sy0\">//</span> <span class=\"st0\">\" literal\"</span><br/>s1 <span class=\"sy0\">=</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">//</span> <span class=\"st0\">\" literal\"</span><br/>print <span class=\"sy0\">*</span>,s1<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 7, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/>Var s1 = <span class=\"st0\">\"String\"</span><br/>Var s2 = s1 + <span class=\"st0\">\" concatenation\"</span><br/><span class=\"kw1\">Print</span> s1<br/><span class=\"kw1\">Print</span> s2<br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>a = \"Frink\"<br/>b = a + \" rules!\"<br/>println[b]<br/>\u00a0</pre>"}, {"lang": "Gambas", "loc": 10, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">sub</span></a> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">DIM</span></a> bestclub <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">AS</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">DIM</span></a> myconcat <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">AS</span></a> <a href=\"http://gambasdoc.org/help/lang/type/string\"><span class=\"kw4\">String</span></a><br/>\u00a0<br/>bestclub <span class=\"sy0\">=</span> <span class=\"st0\">\"Liverpool\"</span><br/>myconcat <span class=\"sy0\">=</span> bestclub <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" Football Club\"</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> myconcat<br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "GlovePIE", "loc": 2, "block": "<pre class=\"text highlighted_source\">var.text1=\"Hello, \"<br/>debug=var.text1+\"world!\"</pre>"}, {"lang": "Go", "loc": 21, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// text assigned to a string variable</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"st0\">\"hello\"</span><br/>\u00a0<br/>    <span class=\"co1\">// output string variable</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// this output requested by original task descrption, although</span><br/>    <span class=\"co1\">// not really required by current wording of task description.</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>s <span class=\"sy3\">+</span> <span class=\"st0\">\" literal\"</span><span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// concatenate variable and literal, assign result to another string variable</span><br/>    s2 <span class=\"sy2\">:=</span> s <span class=\"sy3\">+</span> <span class=\"st0\">\" literal\"</span><br/>\u00a0<br/>    <span class=\"co1\">// output second string variable</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>s2<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Golfscript", "loc": 4, "block": "<pre class=\"text highlighted_source\">\"Greetings \":s;<br/>s\"Earthlings\"+puts<br/>s\"Earthlings\"+:s1;<br/>s1 puts</pre>"}, {"lang": "Groovy", "loc": 5, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"Greetings \"</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> s <span class=\"sy0\">+</span> <span class=\"st0\">\"Earthlings\"</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> s1 <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> <span class=\"st0\">\"Earthlings\"</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> s1</pre>"}, {"lang": "Halon", "loc": 1, "block": "<pre class=\"text highlighted_source\">echo \"Hello\" . \"World \" . 123;</pre>"}, {"lang": "Haskell", "loc": 5, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a><br/>s <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span><br/>s1 <span class=\"sy0\">=</span> s <span class=\"sy0\">++</span> <span class=\"st0\">\" literal\"</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"br0\">(</span>s <span class=\"sy0\">++</span> <span class=\"st0\">\" literal\"</span><span class=\"br0\">)</span><br/>          <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> s1</pre>"}, {"lang": "HicEst", "loc": 5, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">CHARACTER</span> s <span class=\"sy1\">=</span> <span class=\"st0\">\"hello\"</span><span class=\"sy1\">,</span> sl<span class=\"sy1\">*</span><span class=\"nu0\">100</span><br/>\u00a0<br/><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span><span class=\"br0\">)</span> s <span class=\"sy1\">//</span> <span class=\"st0\">\" literal\"</span><br/>sl <span class=\"sy1\">=</span> s <span class=\"sy1\">//</span> <span class=\"st0\">\" literal\"</span><br/><span class=\"kw1\">WRITE</span><span class=\"br0\">(</span><span class=\"br0\">)</span> sl</pre>"}, {"lang": "Icon and Unicon", "loc": 5, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>s1 <span class=\"sy1\">:=</span> <span class=\"st0\">\"hello\"</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span>s2 <span class=\"sy1\">:=</span> s1 <span class=\"sy1\">||</span> <span class=\"st0\">\" there.\"</span><span class=\"br0\">)</span>  <span class=\"co1\"># capture the reuslt for </span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span>                     <span class=\"co1\"># ... the 2nd write</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "IDL", "loc": 4, "block": "<pre class=\"idl highlighted_source\">s1<span class=\"sy0\">=</span><span class=\"st0\">'Hello'</span><br/>print, s1 <span class=\"sy0\">+</span> <span class=\"st0\">' literal'</span><br/>s2<span class=\"sy0\">=</span>s1 <span class=\"sy0\">+</span> <span class=\"st0\">' literal'</span><br/>print, s2</pre>"}, {"lang": "J", "loc": 5, "block": "<pre class=\"j highlighted_source\">   s1 =. <span class=\"st_h\">'Some '</span><br/>   ]s1, <span class=\"st_h\">'text '</span><br/>Some text <br/>   ]s2 =. s1 , <span class=\"st_h\">'more text!'</span><br/>Some more text!</pre>"}, {"lang": "Java", "loc": 8, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Str<span class=\"br0\">{</span><br/>   <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> s = <span class=\"st0\">\"hello\"</span><span class=\"sy0\">;</span><br/>      <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>s + <span class=\"st0\">\" literal\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a> s2 = s + <span class=\"st0\">\" literal\"</span><span class=\"sy0\">;</span><br/>      <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 2, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span><br/>print<span class=\"br0\">(</span>s <span class=\"sy0\">+</span> <span class=\"st0\">\" there!\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"hello\" as $s | $s + \" there!\"</pre>"}, {"lang": "Julia", "loc": 2, "block": "<pre class=\"text highlighted_source\">s = \"hello\"<br/>println(s * \" there!\")</pre>"}, {"lang": "K", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>s1: \"Some \"<br/>s1, \"text \"<br/>s2: s1 , \"more text!\"<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 8, "block": "<pre class=\"scala highlighted_source\">fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s1 <span class=\"sy0\">=</span> <span class=\"st0\">\"James\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s2 <span class=\"sy0\">=</span> <span class=\"st0\">\"Bond\"</span><br/>    println<span class=\"br0\">(</span>s1<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span>s2<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s3 <span class=\"sy0\">=</span> s1 + <span class=\"st0\">\" \"</span> + s2<br/>    println<span class=\"br0\">(</span>s3<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LabVIEW", "loc": 2, "block": "<pre class=\"text highlighted_source\">: concat  2 compress \"\" join\u00a0;<br/>'hello \" literal\" concat</pre>"}, {"lang": "Lang5", "loc": 2, "block": "<pre class=\"text highlighted_source\">: concat  2 compress \"\" join\u00a0;<br/>'hello \" literal\" concat</pre>"}, {"lang": "Lasso", "loc": 4, "block": "<pre class=\"text highlighted_source\">local(x = 'Hello')<br/>local(y = #x + ', World!')<br/>#x // Hello<br/>#y // Hello, World!</pre>"}, {"lang": "Liberty BASIC", "loc": 4, "block": "<pre class=\"text highlighted_source\">a = \"Hello\"<br/>b = a &amp; \" world!\"<br/>put b<br/>-- \"Hello world!\"</pre>"}, {"lang": "Lingo", "loc": 4, "block": "<pre class=\"text highlighted_source\">a = \"Hello\"<br/>b = a &amp; \" world!\"<br/>put b<br/>-- \"Hello world!\"</pre>"}, {"lang": "Lisaac", "loc": 17, "block": "<pre class=\"text highlighted_source\">Section Header<br/>\u00a0<br/>+ name\u00a0:= STRING_CONCATENATION;<br/>\u00a0<br/>Section Public<br/>\u00a0<br/>- main &lt;- (<br/>  + sc\u00a0: STRING_CONSTANT;<br/>  + sv\u00a0: STRING;<br/>\u00a0<br/>  sc\u00a0:= \"Hello\";<br/>  (sc + \" literal\").println;<br/>\u00a0<br/>  sv\u00a0:= sc + \" literal\";<br/>  sv.println;<br/>\u00a0<br/>);</pre>"}, {"lang": "LiveCode", "loc": 3, "block": "<pre class=\"text highlighted_source\">local str=\"live\"<br/>put str &amp; \"code\" into str2<br/>put str &amp;&amp; str2</pre>"}, {"lang": "Logo", "loc": 2, "block": "<pre class=\"text highlighted_source\">make \"s \"hello<br/>print word\u00a0:s \"| there!|</pre>"}, {"lang": "Lua", "loc": 4, "block": "<pre class=\"lua highlighted_source\">a <span class=\"sy0\">=</span> <span class=\"st0\">\"hello \"</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>a <span class=\"sy0\">..</span> <span class=\"st0\">\"world\"</span><span class=\"br0\">)</span><br/>c <span class=\"sy0\">=</span> a <span class=\"sy0\">..</span> <span class=\"st0\">\"world\"</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckString {<br/>      s$ = \"hello\"<br/>      PRINT s$;\" literal\" 'or s$ + \" literal\"<br/>      s2$ = s$ + \" literal\"<br/>      PRINT s2$<br/>      Print Len(s2$)=13<br/>      \\\\ get an ansi string<br/>      k$=Str$(\"Hello\")<br/>      Print Len(k$)=2.5  ' 2.5 words or 5 bytes<br/>      Print Chr$(k$)<br/>      k2$=k$+Str$(\" literal\")<br/>      Print Len(k2$)=6.5  ' 13 bytes<br/>      Print Chr$(k2$)<br/>      Print Len(Chr$(k2$))=13 ' words<br/>}<br/>CheckString<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 4, "block": "<pre class=\"text highlighted_source\">str\u00a0:= \"Hello\":<br/>newstr\u00a0:= cat(str,\", world!\"):<br/>str;<br/>newstr;</pre>"}, {"lang": "Mathematica", "loc": 2, "block": "<pre class=\"text highlighted_source\">str= \"Hello \";<br/>str&lt;&gt;\"Literal\"</pre>"}, {"lang": "MATLAB / Octave", "loc": 11, "block": "<pre class=\"matlab highlighted_source\">&gt;&gt; string1 = <span class=\"co2\">'1 Fish'</span><br/>\u00a0<br/>string1 =<br/>\u00a0<br/><span class=\"nu0\">1</span> Fish<br/>\u00a0<br/>&gt;&gt; string2 = <span class=\"br0\">[</span>string1 <span class=\"co2\">', 2 Fish, Red Fish, Blue Fish'</span><span class=\"br0\">]</span> <br/>\u00a0<br/>string2 =<br/>\u00a0<br/><span class=\"nu0\">1</span> Fish, <span class=\"nu0\">2</span> Fish, Red Fish, Blue Fish</pre>"}, {"lang": "Maxima", "loc": 4, "block": "<pre class=\"text highlighted_source\">s: \"the quick brown fox\";<br/>t: \"jumps over the lazy dog\";<br/>sconcat(s, \" \", t);<br/>/* \"the quick brown fox jumps over the lazy dog\" */</pre>"}, {"lang": "Mercury", "loc": 14, "block": "<pre class=\"text highlighted_source\">:- module string_concat.<br/>:- interface.<br/>\u00a0<br/>:- import_module io.<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>:- import_module string.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>    S = \"hello\",<br/>    S1 = S ++ \" world\",<br/>    io.write_string(S,\u00a0!IO), io.nl(!IO),<br/>    io.write_string(S1,\u00a0!IO), io.nl(!IO).</pre>"}, {"lang": "MUMPS", "loc": 6, "block": "<pre class=\"text highlighted_source\">STRCAT<br/> SET S=\"STRING\"<br/> WRITE\u00a0!,S<br/> SET T=S_\" LITERAL\"<br/> WRITE\u00a0!,T<br/> QUIT</pre>"}, {"lang": "M4", "loc": 5, "block": "<pre class=\"text highlighted_source\">define(`concat',`$1$2')dnl<br/>define(`A',`any text value')dnl<br/>concat(`A',` concatenated with string literal')<br/>define(`B',`concat(`A',` and string literal')')dnl<br/>B</pre>"}, {"lang": "MAXScript", "loc": 4, "block": "<pre class=\"text highlighted_source\">s = \"hello\"<br/>print (s + \" literal\")<br/>s1 = s + \" literal\"<br/>print s1</pre>"}, {"lang": "Metafont", "loc": 5, "block": "<pre class=\"text highlighted_source\">string a, b;<br/>a\u00a0:= \"String\";<br/>message a &amp; \" literal\";<br/>b\u00a0:= a &amp; \" literal\";<br/>message b;</pre>"}, {"lang": "Modula-3", "loc": 12, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> Concat <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> string<span class=\"sy0\">:</span> <span class=\"kw4\">TEXT</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"String\"</span>;<br/>    string1<span class=\"sy0\">:</span> <span class=\"kw4\">TEXT</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>string &amp; <span class=\"st0\">\" literal.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>  string1 <span class=\"sy0\">:=</span> string &amp; <span class=\"st0\">\" literal.<span class=\"es0\">\\n</span>\"</span>;<br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span>string1<span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> Concat.</pre>"}, {"lang": "Nemerle", "loc": 14, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>using Nemerle.Utility.NString; // contains method Concat()<br/>\u00a0<br/>module Stringcat<br/>{<br/>    Main()\u00a0: void<br/>    {<br/>        def text1 = \"This string has\";<br/>        def cat1  = Concat( \" \", [text, \"been concatenated\"]);<br/>        def cat2  = text1 + \" also been concatenated\";<br/>        Write($\"$cat1\\n$cat2\\n\");<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 20, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>\u00a0<br/>options replace format comments java crossref savelog symbols<br/>\u00a0<br/>s1 = <span class=\"st0\">'any text value'</span><br/>s2 = <span class=\"st0\">'another string literal'</span><br/>s3 = s1    s2 <span class=\"co1\">-- concatenate variables with blank space (note that only one blank space is added)</span><br/>s4 = s1 <span class=\"sy0\">||</span> s2 <span class=\"co1\">-- concatenate variables with abuttal (here, no blank spaces are added)</span><br/>s5 = s1    <span class=\"st0\">'another string literal'</span> <span class=\"co1\">-- concatenate a variable and a literal with blank space</span><br/>s6 = s1<span class=\"st0\">'another string literal'</span>     <span class=\"co1\">-- concatenate a variable and a literal using abuttal</span><br/>s7 = s1 <span class=\"sy0\">||</span> <span class=\"st0\">'another string literal'</span> <span class=\"co1\">-- ditto</span><br/>\u00a0<br/><span class=\"kw1\">say</span> <span class=\"st0\">'s1:'</span> s1 <span class=\"co1\">-- concatenation with blank space is employed here too</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'s2:'</span> s2<br/><span class=\"kw1\">say</span> <span class=\"st0\">'s3:'</span> s3<br/><span class=\"kw1\">say</span> <span class=\"st0\">'s4:'</span> s4<br/><span class=\"kw1\">say</span> <span class=\"st0\">'s5:'</span> s5<br/><span class=\"kw1\">say</span> <span class=\"st0\">'s6:'</span> s6<br/><span class=\"kw1\">say</span> <span class=\"st0\">'s7:'</span> s7<br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 4, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#let\"><span class=\"kw1\">let</span></a> <span class=\"br0\">(</span>str1 <span class=\"st0\">\"foo\"</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> str1<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#let\"><span class=\"kw1\">let</span></a> <span class=\"br0\">(</span>str2 <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#string\"><span class=\"kw1\">string</span></a> str1 <span class=\"st0\">\"bar\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t  <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#println\"><span class=\"kw1\">println</span></a> str2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 6, "block": "<pre class=\"text highlighted_source\">var str, str1 = \"String\"<br/>echo(str &amp; \" literal.\")<br/>str1 = str1 &amp; \" literal.\"<br/>echo(str1)<br/>\u00a0<br/># -&gt; String literal.</pre>"}, {"lang": "Objeck", "loc": 11, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Repeat <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      s <span class=\"sy0\">:=</span> <span class=\"st0\">\"hello\"</span><span class=\"sy0\">;</span><br/>      s<span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"st0\">\" literal\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      s<span class=\"sy0\">-&gt;</span><span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\" literal\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      s<span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Objective-C", "loc": 20, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span>s <span class=\"sy0\">=</span> <span class=\"co3\">@</span><span class=\"st0\">\"hello\"</span>;<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s%s<span class=\"es0\">\\n</span>\"</span>, <span class=\"br0\">[</span>s UTF8String<span class=\"br0\">]</span>, <span class=\"st0\">\" literal\"</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span>s2 <span class=\"sy0\">=</span> <span class=\"br0\">[</span>s stringByAppendingString<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\" literal\"</span><span class=\"br0\">]</span>;<br/>    <span class=\"co2\">// or, NSString *s2 = [NSString stringWithFormat:@\"%@%@\", s, @\" literal\"];</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>s2 UTF8String<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>    <span class=\"coMULTI\">/* or */</span><br/>    <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableString_Class/\"><span class=\"kw5\">NSMutableString</span></a> <span class=\"sy0\">*</span>s3 <span class=\"sy0\">=</span> <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableString_Class/\"><span class=\"kw5\">NSMutableString</span></a> stringWithString<span class=\"sy0\">:</span> s<span class=\"br0\">]</span>;<br/>    <span class=\"br0\">[</span>s3 appendString<span class=\"sy0\">:</span> <span class=\"co3\">@</span><span class=\"st0\">\" literal\"</span><span class=\"br0\">]</span>;<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span>s3 UTF8String<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 6, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span><br/><span class=\"kw1\">let</span> s1 <span class=\"sy0\">=</span> s <span class=\"sy0\">^</span> <span class=\"st0\">\" literal\"</span><br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"br0\">(</span>s <span class=\"sy0\">^</span> <span class=\"st0\">\" literal\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"co1\">(* or Printf.printf \"%s literal\\n\" s; *)</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> s1</pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"Hello\" dup \" World!\" + .s </pre>"}, {"lang": "Openscad", "loc": 4, "block": "<pre class=\"text highlighted_source\">a=\"straw\";<br/>b=\"berry\";<br/>c=str(a,b);    /* Concatenate a and b */<br/>echo (c);</pre>"}, {"lang": "Oz", "loc": 5, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>S = <span class=\"st0\">\"hello\"</span><br/><span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo S<span class=\"sy0\">#</span><span class=\"st0\">\" literal\"</span><span class=\"br0\">}</span> <span class=\"co1\">%% virtual strings are constructed with \"#\"</span><br/>S1 = <span class=\"br0\">{</span>Append S <span class=\"st0\">\" literal\"</span><span class=\"br0\">}</span><br/><span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo S1<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 5, "block": "<pre class=\"parigp highlighted_source\">s <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello \"</span><span class=\"sy0\">;</span><br/>s <span class=\"sy0\">=</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span> <span class=\"st0\">\"world\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">\\\\ Alternately, this could have been:</span><br/><span class=\"co1\">\\\\ s = concat(s, \"world\");</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 11, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> StringConcat<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">Var</span><br/>     s<span class=\"sy1\">,</span> s1   <span class=\"sy1\">:</span> <span class=\"kw4\">String</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">Begin</span><br/>    s <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'hello'</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>s <span class=\"sy3\">+</span> <span class=\"st0\">' literal'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    s1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> concat<span class=\"br0\">(</span>s<span class=\"sy1\">,</span> <span class=\"st0\">' literal'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"coMULTI\">{ s1\u00a0:= s + ' literal'; works too, with FreePascal }</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">End</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 4, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'hello'</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$s</span> <span class=\"sy0\">.</span> <span class=\"st_h\">' literal'</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$s1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$s</span> <span class=\"sy0\">.</span> <span class=\"st_h\">' literal'</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"re0\">$s1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 9, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'hello'</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$s</span> <span class=\"sy0\">~</span> <span class=\"st_h\">' literal'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">$s1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$s</span> <span class=\"sy0\">~</span> <span class=\"st_h\">' literal'</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$s1</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># or, using mutating concatenation:</span><br/>\u00a0<br/><span class=\"re0\">$s</span> <span class=\"sy0\">~=</span> <span class=\"st_h\">' literal'</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$s</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 5, "block": "<pre class=\"text highlighted_source\">string s1 = \"at\"                               \u00a0?s1<br/>string s2 = \"c\"&amp;s1                             \u00a0?s2<br/>string s3 = \"s\"&amp;s1                             \u00a0?s3<br/>string s4 = \"m\"&amp;s1                             \u00a0?s4<br/>string s5 = \"The \"&amp;s2&amp;\" \"&amp;s3&amp;\" on the \"&amp;s4&amp;\".\" \u00a0?s5</pre>"}, {"lang": "PHL", "loc": 11, "block": "<pre class=\"text highlighted_source\">module stringcat;<br/>\u00a0<br/>extern printf;<br/>\u00a0<br/>@Integer main [<br/>    var a = \"hello\";<br/>    var b = a + \" literal\";<br/>    printf(\"%s\\n\", b);<br/>\u00a0<br/>    return 0;<br/>]</pre>"}, {"lang": "PHP", "loc": 6, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"re0\">$s</span> <span class=\"sy0\">.</span> <span class=\"st0\">\" literal\"</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$s1</span> <span class=\"sy0\">=</span> <span class=\"re0\">$s</span> <span class=\"sy0\">.</span> <span class=\"st0\">\" literal\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"re0\">$s1</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 4, "block": "<pre class=\"text highlighted_source\">(let Str1 \"First text\"<br/>   (prinl Str1 \" literal\")<br/>   (let Str2 (pack Str1 \" literal\")<br/>      (prinl Str2) ) )</pre>"}, {"lang": "PL/I", "loc": 6, "block": "<pre class=\"text highlighted_source\">declare (s, t) character (30) varying;<br/>\u00a0<br/>s = 'hello from me';<br/>display (s || ' to you.' );<br/>t = s || ' to you all';<br/>display (t);</pre>"}, {"lang": "PowerShell", "loc": 8, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello\"</span><br/><span class=\"kw1\">Write-Host</span> <span class=\"re0\">$s</span> World.<br/>\u00a0<br/><span class=\"co1\"># alternative, using variable expansion in strings</span><br/><span class=\"kw1\">Write-Host</span> <span class=\"st0\">\"$s World.\"</span><br/>\u00a0<br/><span class=\"re0\">$s2</span> <span class=\"sy0\">=</span> <span class=\"re0\">$s</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" World.\"</span><br/><span class=\"kw1\">Write-Host</span> $s2</pre>"}, {"lang": "PureBasic", "loc": 11, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  s$ <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span> s$ <span class=\"sy0\">+</span> <span class=\"st0\">\" literal\"</span><span class=\"br0\">)</span><br/>  s2$ <span class=\"sy0\">=</span> s$ <span class=\"sy0\">+</span> <span class=\"st0\">\" literal\"</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>s2$<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 5, "block": "<pre class=\"python highlighted_source\">s1 <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span><br/><span class=\"kw1\">print</span> s1 + <span class=\"st0\">\" world\"</span><br/>\u00a0<br/>s2 <span class=\"sy0\">=</span> s1 + <span class=\"st0\">\" world\"</span><br/><span class=\"kw1\">print</span> s2</pre>"}, {"lang": "R", "loc": 4, "block": "<pre class=\"text highlighted_source\">hello &lt;- \"hello\"<br/>paste(hello, \"literal\") # \"hello literal\"<br/>hl &lt;- paste(hello, \"literal\") #saves concatenates string to a new variable<br/>paste(\"no\", \"spaces\", \"between\", \"words\", sep=\"\") # \"nospacesbetweenwords\"</pre>"}, {"lang": "Racket", "loc": 10, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define hello \"hello\")<br/>(displayln hello)<br/>\u00a0<br/>(define world (string-append hello \" \" \"world\" \"!\"))<br/>(displayln world)<br/>\u00a0<br/>;outputs:<br/>;  hello<br/>;  hello world!</pre>"}, {"lang": "Raven", "loc": 15, "block": "<pre class=\"text highlighted_source\"># Cat strings<br/>\"First string and \" \"second string\" cat print<br/>\u00a0<br/># Join<br/>[ \"First string\" \"second string\" \"third string\" ] \" and \" join print<br/>\u00a0<br/># print<br/>[ \"First string\" \"second string\" \"third string\" ] each print<br/>\u00a0<br/># Formatted print<br/>\"\\n\" \"Third string\" \"Second string\" \"First string\" \"%s\u00a0%s\u00a0%s\u00a0%s\" print<br/>\u00a0<br/># Heredoc<br/>\" - NOT!!\" as $x<br/>\"This is the only way to do it%($x)s\" print</pre>"}, {"lang": "REBOL", "loc": 3, "block": "<pre class=\"rebol highlighted_source\">s: <span class=\"st0\">\"hello\"</span><br/><span class=\"kw3\">print</span> s1: <span class=\"kw3\">rejoin</span> <span class=\"br0\">[</span>s <span class=\"st0\">\" literal\"</span><span class=\"br0\">]</span><br/><span class=\"kw3\">print</span> s1</pre>"}, {"lang": "Red", "loc": 6, "block": "<pre class=\"text highlighted_source\">&gt;&gt;str1: \"Hello\"<br/>&gt;&gt;str2: append str1 \" World\"<br/>&gt;&gt; print str2<br/>Hello World<br/>&gt;&gt; print str1 <br/>Hello World</pre>"}, {"lang": "REXX", "loc": 9, "block": "<pre class=\"rexx highlighted_source\">s = <span class=\"st0\">\"hello\"</span><br/><span class=\"kw1\">say</span> s <span class=\"st0\">\"literal\"</span> <br/>t = s <span class=\"st0\">\"literal\"</span>    <span class=\"coMULTI\">/* Whitespace between the two strings causes a space in the output */</span><br/><span class=\"kw1\">say</span> t<br/>\u00a0<br/>                        <span class=\"coMULTI\">/* The above method works without spaces too */</span><br/>genus=<span class=\"st0\">\"straw\"</span><br/><span class=\"kw1\">say</span> genus<span class=\"st0\">\"berry\"</span>        <span class=\"coMULTI\">/* This outputs strawberry */</span><br/><span class=\"kw1\">say</span> genus <span class=\"sy0\">||</span> <span class=\"st0\">\"berry\"</span>    <span class=\"coMULTI\">/* Concatenation using a doublepipe does not cause spaces */</span></pre>"}, {"lang": "Retro", "loc": 2, "block": "<pre class=\"text highlighted_source\">with strings'<br/>\"hello\" \"literal\" append puts</pre>"}, {"lang": "Ring", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>aString = \"Welcome to the \"<br/>bString = \"Ring Programming Language\"<br/>\u00a0<br/>see astring + bString + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 10, "block": "<pre class=\"ruby highlighted_source\">s = <span class=\"st0\">\"hello\"</span><br/><span class=\"kw3\">p</span> s <span class=\"sy0\">+</span> <span class=\"st0\">\" literal\"</span>        <span class=\"co1\">#=&gt; \"hello literal\"</span><br/>s1 = s <span class=\"sy0\">+</span> <span class=\"st0\">\" literal\"</span><br/><span class=\"kw3\">p</span> s1                    <span class=\"co1\">#=&gt; \"hello literal\"</span><br/>s1 <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\" another\"</span> <span class=\"co1\"># append to s1</span><br/><span class=\"kw3\">p</span> s1                    <span class=\"co1\">#=&gt; \"hello literal another\"</span><br/>\u00a0<br/>s = <span class=\"st0\">\"hello\"</span><br/><span class=\"kw3\">p</span> s.<span class=\"me1\">concat</span><span class=\"br0\">(</span><span class=\"st0\">\" literal\"</span><span class=\"br0\">)</span>  <span class=\"co1\">#=&gt; \"hello literal\"</span><br/><span class=\"kw3\">p</span> s                     <span class=\"co1\">#=&gt; \"hello literal\"</span></pre>"}, {"lang": "Rust", "loc": 7, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    let s = \"hello\".to_owned();<br/>    println!(\"{}\", s);<br/>\u00a0<br/>    let s1 = s + \" world\";<br/>    println!(\"{}\", s1);<br/>}</pre>"}, {"lang": "SAS", "loc": 9, "block": "<pre class=\"sas highlighted_source\"><span class=\"kw6\">data</span> <span class=\"kw1\">_null_</span>;<br/>   a=<span class=\"st0\">\"Hello,\"</span>;<br/>   b=<span class=\"st0\">\"World!\"</span>;<br/>   c=a\u00a0!! <span class=\"st0\">\" \"</span>\u00a0!! b;<br/>   <span class=\"kw3\">put</span> c;<br/>   <span class=\"coMULTI\">*Alternative using the catx function;</span><br/>   c=catx <span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, a, b<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">put</span> c;<br/><span class=\"kw6\">run</span>;</pre>"}, {"lang": "Sather", "loc": 8, "block": "<pre class=\"text highlighted_source\">class MAIN is<br/>  main is<br/>    s\u00a0::= \"hello\";<br/>    #OUT + s + \" literal\\n\";<br/>    s2\u00a0::= s + \" literal\";<br/>    #OUT + s2 + \"\\n\";<br/>  end;<br/>end;</pre>"}, {"lang": "Scala", "loc": 5, "block": "<pre class=\"scala highlighted_source\">  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"hello\"</span>                                 <span class=\"co1\">//&gt; s \u00a0: String = hello</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s2 <span class=\"sy0\">=</span> s + <span class=\"st0\">\" world\"</span>                           <span class=\"co1\">//&gt; s2 \u00a0: String = hello world</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> f2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span>  <span class=\"st0\">\"\u00a0!\"</span>                            <span class=\"co1\">//&gt; f2 \u00a0: () =&gt; String = &lt;function0&gt;</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>s2 + f2<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                              <span class=\"co1\">//&gt; hello world\u00a0!</span></pre>"}, {"lang": "Scheme", "loc": 6, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"kw1\">s</span> <span class=\"st0\">\"hello\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"kw1\">s</span> <span class=\"st0\">\" literal\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> s1 <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"kw1\">s</span> <span class=\"st0\">\" literal\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">display</span> s1<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scilab", "loc": 5, "block": "<pre class=\"text highlighted_source\">s1=\"Hello\"<br/>s1+\" world!\"<br/>s2=s1+\" world\"<br/>s2<br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 11, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var string: s is \"hello\";<br/>    var string: s2 is \"\";<br/>  begin<br/>    writeln(s &lt;&amp; \" world\");<br/>    s2\u00a0:= s &amp; \" world\";<br/>    writeln(s2);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 4, "block": "<pre class=\"ruby highlighted_source\">var s = <span class=\"st0\">'hello'</span>;<br/>say s<span class=\"sy0\">+</span><span class=\"st0\">' literal'</span>;<br/>var s1 = s<span class=\"sy0\">+</span><span class=\"st0\">' literal'</span>;<br/>say s1;</pre>"}, {"lang": "Simula", "loc": 14, "block": "<pre class=\"text highlighted_source\">TEXT PROCEDURE concatenate(head, tail);<br/>    TEXT head, tail;<br/>BEGIN TEXT c;<br/>    c\u00a0:- blanks(head.length + tail.length);<br/>    c.sub(c.start, head.length)\u00a0:= head;\u00a0! putText(), anyone?;<br/>    c.sub(c.start + head.length, tail.length)\u00a0:= tail;<br/>    concatenate:- c;<br/>END;<br/>\u00a0<br/>TEXT stringVariable, another;<br/>stringVariable\u00a0:- \"head \";<br/>another\u00a0:- concatenate(stringVariable, \"and tail\");<br/>OutText(\"stringVariable: \"\"\"); OutText(stringVariable);<br/>OutText(\"\"\", another: \"); OutText(another); Outimage;</pre>"}, {"lang": "Slate", "loc": 4, "block": "<pre class=\"text highlighted_source\">define: #s -&gt; 'hello'.<br/>inform: s\u00a0; ' literal'.<br/>define: #s1 -&gt; (s\u00a0; ' literal').<br/>inform: s1.</pre>"}, {"lang": "Smalltalk", "loc": 4, "block": "<pre class=\"smalltalk highlighted_source\">|<span class=\"re3\">s s1</span>| <span class=\"re6\">s</span> <span class=\"sy0\">:=</span> <span class=\"st0\">'hello'</span>.<br/><span class=\"br0\">(</span><span class=\"re5\">s</span>,<span class=\"st0\">' literal'</span><span class=\"br0\">)</span> printNl.<br/><span class=\"re5\">s1</span> <span class=\"sy0\">:=</span> <span class=\"re5\">s</span>,<span class=\"st0\">' literal'</span>.<br/><span class=\"re5\">s1</span> printNl.</pre>"}, {"lang": "SNOBOL4", "loc": 5, "block": "<pre class=\"text highlighted_source\">\tgreet1 = \"Hello, \"<br/>\toutput = greet1<br/>\tgreet2 = greet1 \"World!\"<br/>\toutput = greet2<br/>end</pre>"}, {"lang": "Sparkling", "loc": 3, "block": "<pre class=\"text highlighted_source\">let s1 = \"Hello\";<br/>let s2 = \" world!\";<br/>print(s1 .. s2); // prints \"Hello world!\"</pre>"}, {"lang": "Standard ML", "loc": 5, "block": "<pre class=\"text highlighted_source\">val s = \"hello\"<br/>val s1 = s ^ \" literal\\n\"<br/>val () =<br/>  print (s ^ \" literal\\n\");<br/>  print s1</pre>"}, {"lang": "Stata", "loc": 5, "block": "<pre class=\"text highlighted_source\">sca a = \"foo\"<br/>sca b = \"bar\"<br/>sca c = a+b<br/>di c<br/>  foobar</pre>"}, {"lang": "Swift", "loc": 4, "block": "<pre class=\"text highlighted_source\">let s = \"hello\"<br/>println(s + \" literal\")<br/>let s1 = s + \" literal\"<br/>println(s1)</pre>"}, {"lang": "Tcl", "loc": 4, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> s hello<br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"$s there!\"</span><br/><span class=\"kw2\">append</span> s <span class=\"st0\">\" there!\"</span><br/><span class=\"kw2\">puts</span> <span class=\"re0\">$s</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 2, "block": "<pre class=\"text highlighted_source\">\"HELLO\"\u2192Str0<br/>Str0+\" WORLD!\"\u2192Str0</pre>"}, {"lang": "TI-89 BASIC", "loc": 3, "block": "<pre class=\"text highlighted_source\">\"aard\" \u2192 sv<br/>Disp sv &amp; \"vark\"<br/>sv &amp; \"wolf\" \u2192 sv2</pre>"}, {"lang": "TorqueScript", "loc": 5, "block": "<pre class=\"text highlighted_source\">%string = \"Hello\";<br/>echo(%string);<br/>%other = \" world!\";<br/>echo(%other);<br/>echo(%string @\u00a0%other);</pre>"}, {"lang": "TUSCRIPT", "loc": 6, "block": "<pre class=\"text highlighted_source\">$$ MODE TUSCRIPT<br/>s = \"Hello \"<br/>print s, \"literal\"<br/>\u00a0<br/>s1 = CONCAT (s,\"literal\")<br/>print s1</pre>"}, {"lang": "UNIX Shell", "loc": 9, "block": "<pre class=\"text highlighted_source\">s=\"hello\"<br/>echo \"$s literal\"<br/>s1=\"$s literal\"    # This method only works with a space between the strings<br/>echo $s1<br/>\u00a0<br/># To concatenate without the space we need squiggly brackets:<br/>genus='straw'<br/>fruit=${genus}berry  # This outputs the word strawberry<br/>echo $fruit</pre>"}, {"lang": "UnixPipes", "loc": 2, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw3\">echo</span> <span class=\"st0\">\"hello\"</span> <br/> <span class=\"sy0\">|</span> <span class=\"kw2\">xargs</span> <span class=\"re5\">-n1</span> <span class=\"re5\">-i</span> <span class=\"kw3\">echo</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> literal</pre>"}, {"lang": "Ursa", "loc": 9, "block": "<pre class=\"text highlighted_source\">decl string s1 s2<br/># make s1 contain \"hello \"<br/>set s1 \"hello \"<br/>\u00a0<br/># set s2 to contain s1 and \"world\"<br/>set s2 (+ s1 \"world\")<br/>\u00a0<br/># outputs \"hello world\"<br/>out s2 endl console</pre>"}, {"lang": "Visual Basic .NET", "loc": 4, "block": "<pre class=\"vbnet highlighted_source\">s <span class=\"sy0\">=</span> <span class=\"st0\">\"Hello\"</span><br/>Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>s <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" literal\"</span><span class=\"br0\">)</span><br/>s1 <span class=\"sy0\">=</span> s <span class=\"sy0\">+</span> <span class=\"st0\">\" literal\"</span><br/>Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>s1<span class=\"br0\">)</span></pre>"}, {"lang": "VBA", "loc": 13, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> String_Concatenation()<br/><span class=\"kw4\">Dim</span> str1 <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, str2 <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/>    str1 = <span class=\"st0\">\"Rosetta\"</span><br/>    Debug.<span class=\"kw4\">Print</span> str1<br/>    Debug.<span class=\"kw4\">Print</span> str1 &amp; <span class=\"st0\">\" code!\"</span><br/>    str2 = str1 &amp; <span class=\"st0\">\" code...\"</span><br/>    Debug.<span class=\"kw4\">Print</span> str2 &amp; <span class=\"st0\">\" based on concatenation of\u00a0: \"</span> &amp; str1 &amp; <span class=\"st0\">\" and code...\"</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 23, "block": "<pre class=\"text highlighted_source\">func Concat(S1, S2, S3);        \\Concatenate strings: S3:= S1 + S2<br/>char S1, S2, S3;<br/>int  C, I, J;<br/>[I:= 0;<br/>repeat  C:= S1(I);<br/>        S3(I):= C &amp; $7F;        \\remove MSb terminator from first string<br/>        I:= I+1;<br/>until   C &gt;= $80;<br/>J:= 0;<br/>repeat  C:= S2(J);<br/>        S3(I+J):= C;<br/>        J:= J+1;<br/>until   C &gt;= $80;<br/>return S3;<br/>];<br/>\u00a0<br/>code Text=12;<br/>char A, B, C(80);<br/>[A:= \"Hello\";<br/> B:= \" World!\";<br/>Concat(A, B, C);<br/>Text(0, C);<br/>]</pre>"}, {"lang": "Yorick", "loc": 4, "block": "<pre class=\"text highlighted_source\">var1 = \"Hello\";<br/>var2 = var1 + \", world!\";<br/>write, var1;<br/>write, var2;</pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">var s=\"Hello\";<br/>s2:=s+\", world!\"; s2.println(); //--&gt;Hello, world!<br/>s3:=String(s,\" \",s2); s3.println(); //--&gt;Hello Hello, world!</pre>"}]}