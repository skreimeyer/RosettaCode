{"task": "Huffman_coding", "blocks": [{"lang": "Ada", "loc": 83, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Indefinite_Ordered_Maps</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Ordered_Maps</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Finalization</span>;<br/><span class=\"kw3\">generic</span><br/>   <span class=\"kw3\">type</span> Symbol_Type <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"&lt;\"</span> <span class=\"br0\">(</span>Left, Right\u00a0: Symbol_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> &lt;&gt;;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">procedure</span> Put <span class=\"br0\">(</span>Item\u00a0: Symbol_Type<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">type</span> Symbol_Sequence <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Symbol_Type;<br/>   <span class=\"kw3\">type</span> Frequency_Type <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"+\"</span> <span class=\"br0\">(</span>Left, Right\u00a0: Frequency_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Frequency_Type<br/>     <span class=\"kw1\">is</span> &lt;&gt;;<br/>   <span class=\"kw3\">with</span> <span class=\"kw3\">function</span> <span class=\"st0\">\"&lt;\"</span> <span class=\"br0\">(</span>Left, Right\u00a0: Frequency_Type<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span> &lt;&gt;;<br/><span class=\"kw3\">package</span> Huffman <span class=\"kw1\">is</span><br/>   <span class=\"co1\">-- bits = booleans (true/false = 1/0)</span><br/>   <span class=\"kw3\">type</span> Bit_Sequence <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Positive <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Boolean;<br/>   Zero_Sequence\u00a0: <span class=\"kw3\">constant</span> Bit_Sequence <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">0</span><span class=\"br0\">)</span>\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; False<span class=\"br0\">)</span>;<br/>   <span class=\"co1\">-- output the sequence</span><br/>   <span class=\"kw3\">procedure</span> Put <span class=\"br0\">(</span>Code\u00a0: Bit_Sequence<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- type for freqency map</span><br/>   <span class=\"kw3\">package</span> Frequency_Maps <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Ordered_Maps</span><br/>     <span class=\"br0\">(</span>Element_Type =&gt; Frequency_Type,<br/>      Key_Type     =&gt; Symbol_Type<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Huffman_Tree <span class=\"kw1\">is</span> <span class=\"kw3\">private</span>;<br/>   <span class=\"co1\">-- create a huffman tree from frequency map</span><br/>   <span class=\"kw3\">procedure</span> Create_Tree<br/>     <span class=\"br0\">(</span>Tree       \u00a0: <span class=\"kw3\">out</span> Huffman_Tree;<br/>      Frequencies\u00a0: Frequency_Maps.<span class=\"me1\">Map</span><span class=\"br0\">)</span>;<br/>   <span class=\"co1\">-- encode a single symbol</span><br/>   <span class=\"kw3\">function</span> Encode<br/>     <span class=\"br0\">(</span>Tree  \u00a0: Huffman_Tree;<br/>      Symbol\u00a0: Symbol_Type<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span>   Bit_Sequence;<br/>   <span class=\"co1\">-- encode a symbol sequence</span><br/>   <span class=\"kw3\">function</span> Encode<br/>     <span class=\"br0\">(</span>Tree   \u00a0: Huffman_Tree;<br/>      Symbols\u00a0: Symbol_Sequence<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span>    Bit_Sequence;<br/>   <span class=\"co1\">-- decode a bit sequence</span><br/>   <span class=\"kw3\">function</span> Decode<br/>     <span class=\"br0\">(</span>Tree\u00a0: Huffman_Tree;<br/>      Code\u00a0: Bit_Sequence<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> Symbol_Sequence;<br/>   <span class=\"co1\">-- dump the encoding table</span><br/>   <span class=\"kw3\">procedure</span> Dump_Encoding <span class=\"br0\">(</span>Tree\u00a0: Huffman_Tree<span class=\"br0\">)</span>;<br/><span class=\"kw3\">private</span><br/>   <span class=\"co1\">-- type for encoding map</span><br/>   <span class=\"kw3\">package</span> Encoding_Maps <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Indefinite_Ordered_Maps</span><br/>     <span class=\"br0\">(</span>Element_Type =&gt; Bit_Sequence,<br/>      Key_Type     =&gt; Symbol_Type<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Huffman_Node;<br/>   <span class=\"kw3\">type</span> Node_Access <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> Huffman_Node;<br/>   <span class=\"co1\">-- a node is either internal (left_child/right_child used)</span><br/>   <span class=\"co1\">-- or a leaf (left_child/right_child are null)</span><br/>   <span class=\"kw3\">type</span> Huffman_Node <span class=\"kw1\">is</span> <span class=\"kw3\">record</span><br/>      Frequency  \u00a0: Frequency_Type;<br/>      Left_Child \u00a0: Node_Access\u00a0:= <span class=\"kw3\">null</span>;<br/>      Right_Child\u00a0: Node_Access\u00a0:= <span class=\"kw3\">null</span>;<br/>      Symbol     \u00a0: Symbol_Type;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/>   <span class=\"co1\">-- create a leaf node</span><br/>   <span class=\"kw3\">function</span> Create_Node<br/>     <span class=\"br0\">(</span>Symbol   \u00a0: Symbol_Type;<br/>      Frequency\u00a0: Frequency_Type<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span>      Node_Access;<br/>   <span class=\"co1\">-- create an internal node</span><br/>   <span class=\"kw3\">function</span> Create_Node <span class=\"br0\">(</span>Left, Right\u00a0: Node_Access<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Node_Access;<br/>   <span class=\"co1\">-- fill the encoding map</span><br/>   <span class=\"kw3\">procedure</span> Fill<br/>     <span class=\"br0\">(</span>The_Node\u00a0: Node_Access;<br/>      Map     \u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Encoding_Maps.<span class=\"me1\">Map</span>;<br/>      Prefix  \u00a0: Bit_Sequence<span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"co1\">-- huffman tree has a tree and an encoding map</span><br/>   <span class=\"kw3\">type</span> Huffman_Tree <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Finalization</span>.<span class=\"me1\">Controlled</span> <span class=\"kw3\">with</span> <span class=\"kw3\">record</span><br/>      Tree\u00a0: Node_Access      \u00a0:= <span class=\"kw3\">null</span>;<br/>      Map \u00a0: Encoding_Maps.<span class=\"me1\">Map</span>\u00a0:= Encoding_Maps.<span class=\"me1\">Empty_Map</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/>   <span class=\"co1\">-- free memory after finalization</span><br/>   <span class=\"kw3\">overriding</span> <span class=\"kw3\">procedure</span> Finalize <span class=\"br0\">(</span>Object\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Huffman_Tree<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Huffman;</pre>"}, {"lang": "BBC BASIC", "loc": 53, "block": "<pre class=\"text highlighted_source\">      INSTALL @lib$+\"SORTSALIB\"<br/>      SortUp% = FN_sortSAinit(0,0)\u00a0: REM Ascending<br/>      SortDn% = FN_sortSAinit(1,0)\u00a0: REM Descending<br/>\u00a0<br/>      Text$ = \"this is an example for huffman encoding\"<br/>\u00a0<br/>      DIM tree{(127) ch&amp;, num%, lkl%, lkr%}<br/>      FOR i% = 1 TO LEN(Text$)<br/>        c% = ASCMID$(Text$,i%)<br/>        tree{(c%)}.ch&amp; = c%<br/>        tree{(c%)}.num% += 1<br/>      NEXT<br/>\u00a0<br/>      C% = DIM(tree{()},1) + 1<br/>      CALL SortDn%, tree{()}, tree{(0)}.num%<br/>      FOR i% = 0 TO DIM(tree{()},1)<br/>        IF tree{(i%)}.num% = 0 EXIT FOR<br/>      NEXT<br/>      size% = i%<br/>\u00a0<br/>      linked% = 0<br/>      REPEAT<br/>        C% = size%<br/>        CALL SortUp%, tree{()}, tree{(0)}.num%<br/>        i% = 0\u00a0: WHILE tree{(i%)}.lkl% OR tree{(i%)}.lkr% i% += 1\u00a0: ENDWHILE<br/>        tree{(i%)}.lkl% = size%<br/>        j% = 0\u00a0: WHILE tree{(j%)}.lkl% OR tree{(j%)}.lkr% j% += 1\u00a0: ENDWHILE<br/>        tree{(j%)}.lkr% = size%<br/>        linked% += 2<br/>        tree{(size%)}.num% = tree{(i%)}.num% + tree{(j%)}.num%<br/>        size% += 1<br/>      UNTIL linked% = (size% - 1)<br/>\u00a0<br/>      FOR i% = size% - 1 TO 0 STEP -1<br/>        IF tree{(i%)}.ch&amp; THEN<br/>          h$ = \"\"<br/>          j% = i%<br/>          REPEAT<br/>            CASE TRUE OF<br/>              WHEN tree{(j%)}.lkl% &lt;&gt; 0:<br/>                h$ = \"0\" + h$<br/>                j% = tree{(j%)}.lkl%<br/>              WHEN tree{(j%)}.lkr% &lt;&gt; 0:<br/>                h$ = \"1\" + h$<br/>                j% = tree{(j%)}.lkr%<br/>              OTHERWISE:<br/>                EXIT REPEAT<br/>            ENDCASE<br/>          UNTIL FALSE<br/>          VDU tree{(i%)}.ch&amp;\u00a0: PRINT \"  \" h$<br/>        ENDIF<br/>      NEXT<br/>      END</pre>"}, {"lang": "Bracmat", "loc": 56, "block": "<pre class=\"text highlighted_source\">( \"this is an example for huffman encoding\":?S<br/>&amp; 0:?chars<br/>&amp; 0:?p<br/>&amp; ( @(\u00a0!S<br/>    \u00a0:  \u00a0?<br/>         ( [!p\u00a0%?char [?p\u00a0?<br/>         &amp;\u00a0!char+!chars:?chars<br/>         &amp; ~<br/>         )<br/>     )<br/>  | <br/>  )<br/>&amp; 0:?prioritized<br/>&amp;   whl<br/>  ' (\u00a0!chars:?n*%@?w+?chars<br/>    &amp; (!n.!w)+!prioritized:?prioritized<br/>    )<br/>&amp;   whl<br/>  ' (\u00a0!prioritized:(?p.?x)+(?q.?y)+?nprioritized<br/>    &amp; (!p+!q.(!p.0,!x)+(!q.1,!y))+!nprioritized:?prioritized<br/>    )<br/>&amp; 0:?L<br/>&amp; ( walk<br/>  =   bits tree bit subtree<br/>    .  \u00a0!arg:(?bits.?tree)<br/>      &amp;   whl<br/>        ' (\u00a0!tree:(?p.?bit,?subtree)+?tree<br/>          &amp; (  \u00a0!subtree:@<br/>              &amp; (!subtree.str$(!bits\u00a0!bit))+!L:?L<br/>            | walk$(!bits\u00a0!bit.!subtree)<br/>            )<br/>          )<br/>  )<br/>&amp;\u00a0!prioritized:(?.?prioritized)<br/>&amp; walk$(.!prioritized)<br/>&amp; lst$L<br/>&amp;\u00a0:?encoded<br/>&amp; 0:?p<br/>&amp; ( @(\u00a0!S<br/>    \u00a0:  \u00a0?<br/>         ( [!p\u00a0%?char [?p\u00a0?<br/>         &amp;\u00a0!L:?+(!char.?code)+?<br/>         &amp;\u00a0!encoded\u00a0!code:?encoded<br/>         &amp; ~<br/>         )<br/>     )<br/>  | out$(str$!encoded)<br/>  )<br/>&amp; ( decode<br/>  =   char bits<br/>    .      \u00a0!L<br/>         \u00a0:\u00a0?+(?char.?bits&amp;@(!arg:!bits\u00a0?arg))+?<br/>        &amp;\u00a0!char decode$!arg<br/>      |\u00a0!arg<br/>  )<br/>&amp; out$(\"decoded:\" str$(decode$(str$!encoded)));</pre>"}, {"lang": "C", "loc": 174, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define BYTES 256</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> huffcode <span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> nbits<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> code<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> huffcode huffcode_t<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> huffheap <span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>h<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> cs<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">long</span> <span class=\"sy0\">*</span>f<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> huffheap heap_t<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* heap handling funcs */</span><br/><span class=\"kw4\">static</span> heap_t <span class=\"sy0\">*</span>_heap_create<span class=\"br0\">(</span><span class=\"kw4\">int</span> s<span class=\"sy0\">,</span> <span class=\"kw4\">long</span> <span class=\"sy0\">*</span>f<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  heap_t <span class=\"sy0\">*</span>h<span class=\"sy0\">;</span><br/>  h <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>heap_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  h<span class=\"sy0\">-&gt;</span>h <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  h<span class=\"sy0\">-&gt;</span>s <span class=\"sy0\">=</span> h<span class=\"sy0\">-&gt;</span>cs <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>  h<span class=\"sy0\">-&gt;</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  h<span class=\"sy0\">-&gt;</span>f <span class=\"sy0\">=</span> f<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> h<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">void</span> _heap_destroy<span class=\"br0\">(</span>heap_t <span class=\"sy0\">*</span>heap<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>heap<span class=\"sy0\">-&gt;</span>h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>heap<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define swap_(I,J) do { int t_; t_ = a[(I)];\t\\<br/>      a[(I)] = a[(J)]; a[(J)] = t_; } while(0)</span><br/><span class=\"kw4\">static</span> <span class=\"kw4\">void</span> _heap_sort<span class=\"br0\">(</span>heap_t <span class=\"sy0\">*</span>heap<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> j<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* gnome sort */</span><br/>  <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>a <span class=\"sy0\">=</span> heap<span class=\"sy0\">-&gt;</span>h<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> heap<span class=\"sy0\">-&gt;</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"coMULTI\">/* smaller values are kept at the end */</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> heap<span class=\"sy0\">-&gt;</span>f<span class=\"br0\">[</span>a<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> heap<span class=\"sy0\">-&gt;</span>f<span class=\"br0\">[</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      i <span class=\"sy0\">=</span> j<span class=\"sy0\">;</span> j<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      swap_<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      i<span class=\"sy0\">--;</span><br/>      i <span class=\"sy0\">=</span> <span class=\"br0\">(</span>i<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> j<span class=\"sy0\">++</span> <span class=\"sy0\">:</span> i<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"co2\">#undef swap_</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">void</span> _heap_add<span class=\"br0\">(</span>heap_t <span class=\"sy0\">*</span>heap<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>heap<span class=\"sy0\">-&gt;</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> heap<span class=\"sy0\">-&gt;</span>s <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    heap<span class=\"sy0\">-&gt;</span>h <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>heap<span class=\"sy0\">-&gt;</span>h<span class=\"sy0\">,</span> heap<span class=\"sy0\">-&gt;</span>s <span class=\"sy0\">+</span> heap<span class=\"sy0\">-&gt;</span>cs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    heap<span class=\"sy0\">-&gt;</span>s <span class=\"sy0\">+=</span> heap<span class=\"sy0\">-&gt;</span>cs<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  heap<span class=\"sy0\">-&gt;</span>h<span class=\"br0\">[</span>heap<span class=\"sy0\">-&gt;</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> c<span class=\"sy0\">;</span><br/>  heap<span class=\"sy0\">-&gt;</span>n<span class=\"sy0\">++;</span><br/>  _heap_sort<span class=\"br0\">(</span>heap<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw4\">int</span> _heap_remove<span class=\"br0\">(</span>heap_t <span class=\"sy0\">*</span>heap<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span> heap<span class=\"sy0\">-&gt;</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    heap<span class=\"sy0\">-&gt;</span>n<span class=\"sy0\">--;</span><br/>    <span class=\"kw1\">return</span> heap<span class=\"sy0\">-&gt;</span>h<span class=\"br0\">[</span>heap<span class=\"sy0\">-&gt;</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* huffmann code generator */</span><br/>huffcode_t <span class=\"sy0\">**</span>create_huffman_codes<span class=\"br0\">(</span><span class=\"kw4\">long</span> <span class=\"sy0\">*</span>freqs<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  huffcode_t <span class=\"sy0\">**</span>codes<span class=\"sy0\">;</span><br/>  heap_t <span class=\"sy0\">*</span>heap<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">long</span> efreqs<span class=\"br0\">[</span>BYTES<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> preds<span class=\"br0\">[</span>BYTES<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> extf<span class=\"sy0\">=</span>BYTES<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> r1<span class=\"sy0\">,</span> r2<span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html\"><span class=\"kw3\">memcpy</span></a><span class=\"br0\">(</span>efreqs<span class=\"sy0\">,</span> freqs<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">long</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>BYTES<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>efreqs<span class=\"br0\">[</span>BYTES<span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">long</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>BYTES<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  heap <span class=\"sy0\">=</span> _heap_create<span class=\"br0\">(</span>BYTES<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> efreqs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span> heap <span class=\"sy0\">==</span> NULL <span class=\"br0\">)</span> <span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> BYTES<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span> efreqs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> _heap_add<span class=\"br0\">(</span>heap<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span> heap<span class=\"sy0\">-&gt;</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    r1 <span class=\"sy0\">=</span> _heap_remove<span class=\"br0\">(</span>heap<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    r2 <span class=\"sy0\">=</span> _heap_remove<span class=\"br0\">(</span>heap<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    efreqs<span class=\"br0\">[</span>extf<span class=\"br0\">]</span> <span class=\"sy0\">=</span> efreqs<span class=\"br0\">[</span>r1<span class=\"br0\">]</span> <span class=\"sy0\">+</span> efreqs<span class=\"br0\">[</span>r2<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    _heap_add<span class=\"br0\">(</span>heap<span class=\"sy0\">,</span> extf<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    preds<span class=\"br0\">[</span>r1<span class=\"br0\">]</span> <span class=\"sy0\">=</span> extf<span class=\"sy0\">;</span><br/>    preds<span class=\"br0\">[</span>r2<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span>extf<span class=\"sy0\">;</span><br/>    extf<span class=\"sy0\">++;</span><br/>  <span class=\"br0\">}</span><br/>  r1 <span class=\"sy0\">=</span> _heap_remove<span class=\"br0\">(</span>heap<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  preds<span class=\"br0\">[</span>r1<span class=\"br0\">]</span> <span class=\"sy0\">=</span> r1<span class=\"sy0\">;</span><br/>  _heap_destroy<span class=\"br0\">(</span>heap<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  codes <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>huffcode_t <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>BYTES<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">int</span> bc<span class=\"sy0\">,</span> bn<span class=\"sy0\">,</span> ix<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> BYTES<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    bc<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> bn<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> efreqs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> codes<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    ix <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span>preds<span class=\"br0\">[</span>ix<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> ix <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      bc <span class=\"sy0\">|=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>preds<span class=\"br0\">[</span>ix<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"sy0\">&lt;&lt;</span> bn<span class=\"sy0\">;</span><br/>      ix <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/abs.html\"><span class=\"kw3\">abs</span></a><span class=\"br0\">(</span>preds<span class=\"br0\">[</span>ix<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      bn<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>    codes<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>huffcode_t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    codes<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span>nbits <span class=\"sy0\">=</span> bn<span class=\"sy0\">;</span><br/>    codes<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span>code <span class=\"sy0\">=</span> bc<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> codes<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> free_huffman_codes<span class=\"br0\">(</span>huffcode_t <span class=\"sy0\">**</span>c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> BYTES<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>c<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co2\">#define MAXBITSPERCODE 100</span><br/>\u00a0<br/><span class=\"kw4\">void</span> inttobits<span class=\"br0\">(</span><span class=\"kw4\">int</span> c<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  s<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    s<span class=\"br0\">[</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>c<span class=\"sy0\">%</span><span class=\"nu19\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/>    c <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n<span class=\"sy0\">--;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>test <span class=\"sy0\">=</span> <span class=\"st0\">\"this is an example for huffman encoding\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  huffcode_t <span class=\"sy0\">**</span>r<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">char</span> strbit<span class=\"br0\">[</span>MAXBITSPERCODE<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>p<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">long</span> freqs<span class=\"br0\">[</span>BYTES<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span>freqs<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span> freqs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  p <span class=\"sy0\">=</span> test<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>p <span class=\"sy0\">!=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"br0\">)</span> freqs<span class=\"br0\">[</span><span class=\"sy0\">*</span>p<span class=\"sy0\">++</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\u00a0<br/>  r <span class=\"sy0\">=</span> create_huffman_codes<span class=\"br0\">(</span>freqs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> BYTES<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> r<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> NULL <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      inttobits<span class=\"br0\">(</span>r<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span>code<span class=\"sy0\">,</span> r<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span>nbits<span class=\"sy0\">,</span> strbit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%c (%d)\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> r<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span>code<span class=\"sy0\">,</span> strbit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  free_huffman_codes<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 314, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> Huffman_Encoding<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> PriorityQueue<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> <span class=\"kw1\">where</span> T <span class=\"sy0\">:</span> IComparable<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">protected</span> List<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> LstHeap <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">virtual</span> <span class=\"kw4\">int</span> Count<br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> LstHeap<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">virtual</span> <span class=\"kw4\">void</span> <span class=\"kw1\">Add</span><span class=\"br0\">(</span>T val<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            LstHeap<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>val<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            SetAt<span class=\"br0\">(</span>LstHeap<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, val<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            UpHeap<span class=\"br0\">(</span>LstHeap<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">virtual</span> T Peek<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>LstHeap<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> IndexOutOfRangeException<span class=\"br0\">(</span><span class=\"st0\">\"Peeking at an empty priority queue\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> LstHeap<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">virtual</span> T Pop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>LstHeap<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> IndexOutOfRangeException<span class=\"br0\">(</span><span class=\"st0\">\"Popping an empty priority queue\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            T valRet <span class=\"sy0\">=</span> LstHeap<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            SetAt<span class=\"br0\">(</span><span class=\"nu0\">0</span>, LstHeap<span class=\"br0\">[</span>LstHeap<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            LstHeap<span class=\"sy0\">.</span><span class=\"me1\">RemoveAt</span><span class=\"br0\">(</span>LstHeap<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            DownHeap<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> valRet<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">protected</span> <span class=\"kw1\">virtual</span> <span class=\"kw4\">void</span> SetAt<span class=\"br0\">(</span><span class=\"kw4\">int</span> i, T val<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            LstHeap<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> val<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">protected</span> <span class=\"kw4\">bool</span> RightSonExists<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> RightChildIndex<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> LstHeap<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">protected</span> <span class=\"kw4\">bool</span> LeftSonExists<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> LeftChildIndex<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> LstHeap<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">protected</span> <span class=\"kw4\">int</span> ParentIndex<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">protected</span> <span class=\"kw4\">int</span> LeftChildIndex<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">protected</span> <span class=\"kw4\">int</span> RightChildIndex<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">protected</span> T ArrayVal<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> LstHeap<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">protected</span> T Parent<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> LstHeap<span class=\"br0\">[</span>ParentIndex<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">protected</span> T Left<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> LstHeap<span class=\"br0\">[</span>LeftChildIndex<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">protected</span> T Right<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> LstHeap<span class=\"br0\">[</span>RightChildIndex<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">protected</span> <span class=\"kw4\">void</span> Swap<span class=\"br0\">(</span><span class=\"kw4\">int</span> i, <span class=\"kw4\">int</span> j<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            T valHold <span class=\"sy0\">=</span> ArrayVal<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            SetAt<span class=\"br0\">(</span>i, LstHeap<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            SetAt<span class=\"br0\">(</span>j, valHold<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">protected</span> <span class=\"kw4\">void</span> UpHeap<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> ArrayVal<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>Parent<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Swap<span class=\"br0\">(</span>i, ParentIndex<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                i <span class=\"sy0\">=</span> ParentIndex<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">protected</span> <span class=\"kw4\">void</span> DownHeap<span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw4\">int</span> iContinue <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>RightSonExists<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> Right<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>ArrayVal<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    iContinue <span class=\"sy0\">=</span> Left<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>Right<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> RightChildIndex<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">:</span> LeftChildIndex<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>LeftSonExists<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> Left<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span>ArrayVal<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    iContinue <span class=\"sy0\">=</span> LeftChildIndex<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>iContinue <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> iContinue <span class=\"sy0\">&lt;</span> LstHeap<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    Swap<span class=\"br0\">(</span>i, iContinue<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>\u00a0<br/>                i <span class=\"sy0\">=</span> iContinue<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">internal</span> <span class=\"kw4\">class</span> HuffmanNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> <span class=\"sy0\">:</span> IComparable<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">internal</span> HuffmanNode<span class=\"br0\">(</span><span class=\"kw4\">double</span> probability, T <span class=\"kw1\">value</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Probability <span class=\"sy0\">=</span> probability<span class=\"sy0\">;</span><br/>            LeftSon <span class=\"sy0\">=</span> RightSon <span class=\"sy0\">=</span> Parent <span class=\"sy0\">=</span> <span class=\"kw1\">null</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">Value</span> <span class=\"sy0\">=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>            IsLeaf <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">internal</span> HuffmanNode<span class=\"br0\">(</span>HuffmanNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> leftSon, HuffmanNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> rightSon<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            LeftSon <span class=\"sy0\">=</span> leftSon<span class=\"sy0\">;</span><br/>            RightSon <span class=\"sy0\">=</span> rightSon<span class=\"sy0\">;</span><br/>            Probability <span class=\"sy0\">=</span> leftSon<span class=\"sy0\">.</span><span class=\"me1\">Probability</span> <span class=\"sy0\">+</span> rightSon<span class=\"sy0\">.</span><span class=\"me1\">Probability</span><span class=\"sy0\">;</span><br/>            leftSon<span class=\"sy0\">.</span><span class=\"me1\">IsZero</span> <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>            rightSon<span class=\"sy0\">.</span><span class=\"me1\">IsZero</span> <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>            leftSon<span class=\"sy0\">.</span><span class=\"me1\">Parent</span> <span class=\"sy0\">=</span> rightSon<span class=\"sy0\">.</span><span class=\"me1\">Parent</span> <span class=\"sy0\">=</span> <span class=\"kw1\">this</span><span class=\"sy0\">;</span><br/>            IsLeaf <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">internal</span> HuffmanNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> LeftSon <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">internal</span> HuffmanNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> RightSon <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">internal</span> HuffmanNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> Parent <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">internal</span> T <span class=\"kw1\">Value</span> <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">internal</span> <span class=\"kw4\">bool</span> IsLeaf <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">internal</span> <span class=\"kw4\">bool</span> IsZero <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">internal</span> <span class=\"kw4\">int</span> Bit<br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> IsZero <span class=\"sy0\">?</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">internal</span> <span class=\"kw4\">bool</span> IsRoot<br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">get</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> Parent <span class=\"sy0\">==</span> <span class=\"kw1\">null</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">internal</span> <span class=\"kw4\">double</span> Probability <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> CompareTo<span class=\"br0\">(</span><span class=\"kw4\">object</span> obj<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"sy0\">-</span>Probability<span class=\"sy0\">.</span><span class=\"me1\">CompareTo</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>HuffmanNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> obj<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Probability</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Huffman<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> <span class=\"kw1\">where</span> T <span class=\"sy0\">:</span> IComparable<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">readonly</span> Dictionary<span class=\"sy0\">&lt;</span>T, HuffmanNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span> _leafDictionary <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Dictionary<span class=\"sy0\">&lt;</span>T, HuffmanNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">readonly</span> HuffmanNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> _root<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> Huffman<span class=\"br0\">(</span>IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> values<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> counts <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Dictionary<span class=\"sy0\">&lt;</span>T, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> priorityQueue <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> PriorityQueue<span class=\"sy0\">&lt;</span>HuffmanNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> valueCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>T <span class=\"kw1\">value</span> <span class=\"kw1\">in</span> values<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>counts<span class=\"sy0\">.</span><span class=\"me1\">ContainsKey</span><span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    counts<span class=\"br0\">[</span><span class=\"kw1\">value</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                counts<span class=\"br0\">[</span><span class=\"kw1\">value</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>                valueCount<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>T <span class=\"kw1\">value</span> <span class=\"kw1\">in</span> counts<span class=\"sy0\">.</span><span class=\"me1\">Keys</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> node <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> HuffmanNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> counts<span class=\"br0\">[</span><span class=\"kw1\">value</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> valueCount, <span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                priorityQueue<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                _leafDictionary<span class=\"br0\">[</span><span class=\"kw1\">value</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> node<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>priorityQueue<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                HuffmanNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> leftSon <span class=\"sy0\">=</span> priorityQueue<span class=\"sy0\">.</span><span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                HuffmanNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> rightSon <span class=\"sy0\">=</span> priorityQueue<span class=\"sy0\">.</span><span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">var</span> parent <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> HuffmanNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>leftSon, rightSon<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                priorityQueue<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            _root <span class=\"sy0\">=</span> priorityQueue<span class=\"sy0\">.</span><span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            _root<span class=\"sy0\">.</span><span class=\"me1\">IsZero</span> <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> Encode<span class=\"br0\">(</span>T <span class=\"kw1\">value</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> returnValue <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Encode<span class=\"br0\">(</span><span class=\"kw1\">value</span>, returnValue<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> returnValue<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> Encode<span class=\"br0\">(</span>T <span class=\"kw1\">value</span>, List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> encoding<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>_leafDictionary<span class=\"sy0\">.</span><span class=\"me1\">ContainsKey</span><span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Invalid value in Encode\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            HuffmanNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> nodeCur <span class=\"sy0\">=</span> _leafDictionary<span class=\"br0\">[</span><span class=\"kw1\">value</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> reverseEncoding <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>nodeCur<span class=\"sy0\">.</span><span class=\"me1\">IsRoot</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                reverseEncoding<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>nodeCur<span class=\"sy0\">.</span><span class=\"me1\">Bit</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                nodeCur <span class=\"sy0\">=</span> nodeCur<span class=\"sy0\">.</span><span class=\"me1\">Parent</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            reverseEncoding<span class=\"sy0\">.</span><span class=\"me1\">Reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            encoding<span class=\"sy0\">.</span><span class=\"me1\">AddRange</span><span class=\"br0\">(</span>reverseEncoding<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> Encode<span class=\"br0\">(</span>IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> values<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> returnValue <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span>T <span class=\"kw1\">value</span> <span class=\"kw1\">in</span> values<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Encode<span class=\"br0\">(</span><span class=\"kw1\">value</span>, returnValue<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> returnValue<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> T Decode<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> bitString, <span class=\"kw1\">ref</span> <span class=\"kw4\">int</span> position<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            HuffmanNode<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> nodeCur <span class=\"sy0\">=</span> _root<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>nodeCur<span class=\"sy0\">.</span><span class=\"me1\">IsLeaf</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>position <span class=\"sy0\">&gt;</span> bitString<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Invalid bitstring in Decode\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                nodeCur <span class=\"sy0\">=</span> bitString<span class=\"br0\">[</span>position<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> nodeCur<span class=\"sy0\">.</span><span class=\"me1\">LeftSon</span> <span class=\"sy0\">:</span> nodeCur<span class=\"sy0\">.</span><span class=\"me1\">RightSon</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> nodeCur<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> List<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> Decode<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> bitString<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> position <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> returnValue <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>position <span class=\"sy0\">!=</span> bitString<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                returnValue<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>Decode<span class=\"br0\">(</span>bitString, <span class=\"kw1\">ref</span> position<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> returnValue<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">internal</span> <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">const</span> <span class=\"kw4\">string</span> Example <span class=\"sy0\">=</span> <span class=\"st0\">\"this is an example for huffman encoding\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> huffman <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Huffman<span class=\"sy0\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>Example<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> encoding <span class=\"sy0\">=</span> huffman<span class=\"sy0\">.</span><span class=\"me1\">Encode</span><span class=\"br0\">(</span>Example<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            List<span class=\"sy0\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy0\">&gt;</span> decoding <span class=\"sy0\">=</span> huffman<span class=\"sy0\">.</span><span class=\"me1\">Decode</span><span class=\"br0\">(</span>encoding<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> outString <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">string</span><span class=\"br0\">(</span>decoding<span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>outString <span class=\"sy0\">==</span> Example <span class=\"sy0\">?</span> <span class=\"st0\">\"Encoding/decoding worked\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"Encoding/Decoding failed\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">var</span> chars <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> HashSet<span class=\"sy0\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>Example<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> c <span class=\"kw1\">in</span> chars<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                encoding <span class=\"sy0\">=</span> huffman<span class=\"sy0\">.</span><span class=\"me1\">Encode</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}:  \"</span>, c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> bit <span class=\"kw1\">in</span> encoding<span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}\"</span>, bit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadKey</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 115, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;queue&gt;</span><br/><span class=\"co2\">#include &lt;map&gt;</span><br/><span class=\"co2\">#include &lt;climits&gt; // for CHAR_BIT</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> UniqueSymbols <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"kw2\">CHAR_BIT</span><span class=\"sy4\">;</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> SampleString <span class=\"sy1\">=</span> <span class=\"st0\">\"this is an example for huffman encoding\"</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">bool</span><span class=\"sy1\">&gt;</span> HuffCode<span class=\"sy4\">;</span><br/><span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">map</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">char</span>, HuffCode<span class=\"sy1\">&gt;</span> HuffCodeMap<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> INode<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">int</span> f<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">virtual</span> ~INode<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">protected</span><span class=\"sy4\">:</span><br/>    INode<span class=\"br0\">(</span><span class=\"kw4\">int</span> f<span class=\"br0\">)</span> <span class=\"sy4\">:</span> f<span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> InternalNode <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> INode<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    INode <span class=\"sy2\">*</span><span class=\"kw4\">const</span> left<span class=\"sy4\">;</span><br/>    INode <span class=\"sy2\">*</span><span class=\"kw4\">const</span> right<span class=\"sy4\">;</span><br/>\u00a0<br/>    InternalNode<span class=\"br0\">(</span>INode<span class=\"sy2\">*</span> c0, INode<span class=\"sy2\">*</span> c1<span class=\"br0\">)</span> <span class=\"sy4\">:</span> INode<span class=\"br0\">(</span>c0<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>f <span class=\"sy2\">+</span> c1<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>f<span class=\"br0\">)</span>, left<span class=\"br0\">(</span>c0<span class=\"br0\">)</span>, right<span class=\"br0\">(</span>c1<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    ~InternalNode<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">delete</span> left<span class=\"sy4\">;</span><br/>        <span class=\"kw3\">delete</span> right<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> LeafNode <span class=\"sy4\">:</span> <span class=\"kw2\">public</span> INode<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> c<span class=\"sy4\">;</span><br/>\u00a0<br/>    LeafNode<span class=\"br0\">(</span><span class=\"kw4\">int</span> f, <span class=\"kw4\">char</span> c<span class=\"br0\">)</span> <span class=\"sy4\">:</span> INode<span class=\"br0\">(</span>f<span class=\"br0\">)</span>, c<span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> NodeCmp<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">bool</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">const</span> INode<span class=\"sy2\">*</span> lhs, <span class=\"kw4\">const</span> INode<span class=\"sy2\">*</span> rhs<span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> lhs<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>f <span class=\"sy1\">&gt;</span> rhs<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>f<span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>INode<span class=\"sy2\">*</span> BuildTree<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">int</span> <span class=\"br0\">(</span><span class=\"sy3\">&amp;</span>frequencies<span class=\"br0\">)</span><span class=\"br0\">[</span>UniqueSymbols<span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">priority_queue</span><span class=\"sy1\">&lt;</span>INode<span class=\"sy2\">*</span>, std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>INode<span class=\"sy2\">*</span><span class=\"sy1\">&gt;</span>, NodeCmp<span class=\"sy1\">&gt;</span> trees<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> UniqueSymbols<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>frequencies<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            trees.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw3\">new</span> LeafNode<span class=\"br0\">(</span>frequencies<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>trees.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        INode<span class=\"sy2\">*</span> childR <span class=\"sy1\">=</span> trees.<span class=\"me1\">top</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        trees.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        INode<span class=\"sy2\">*</span> childL <span class=\"sy1\">=</span> trees.<span class=\"me1\">top</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        trees.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        INode<span class=\"sy2\">*</span> parent <span class=\"sy1\">=</span> <span class=\"kw3\">new</span> InternalNode<span class=\"br0\">(</span>childR, childL<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        trees.<span class=\"me1\">push</span><span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> trees.<span class=\"me1\">top</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> GenerateCodes<span class=\"br0\">(</span><span class=\"kw4\">const</span> INode<span class=\"sy2\">*</span> node, <span class=\"kw4\">const</span> HuffCode<span class=\"sy3\">&amp;</span> prefix, HuffCodeMap<span class=\"sy3\">&amp;</span> outCodes<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> LeafNode<span class=\"sy2\">*</span> lf <span class=\"sy1\">=</span> <span class=\"kw2\">dynamic_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">const</span> LeafNode<span class=\"sy2\">*</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        outCodes<span class=\"br0\">[</span>lf<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>c<span class=\"br0\">]</span> <span class=\"sy1\">=</span> prefix<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> InternalNode<span class=\"sy2\">*</span> in <span class=\"sy1\">=</span> <span class=\"kw2\">dynamic_cast</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">const</span> InternalNode<span class=\"sy2\">*</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        HuffCode leftPrefix <span class=\"sy1\">=</span> prefix<span class=\"sy4\">;</span><br/>        leftPrefix.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        GenerateCodes<span class=\"br0\">(</span>in<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>left, leftPrefix, outCodes<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>        HuffCode rightPrefix <span class=\"sy1\">=</span> prefix<span class=\"sy4\">;</span><br/>        rightPrefix.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        GenerateCodes<span class=\"br0\">(</span>in<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>right, rightPrefix, outCodes<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"co1\">// Build frequency table</span><br/>    <span class=\"kw4\">int</span> frequencies<span class=\"br0\">[</span>UniqueSymbols<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> ptr <span class=\"sy1\">=</span> SampleString<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>ptr <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"br0\">)</span><br/>        <span class=\"sy2\">++</span>frequencies<span class=\"br0\">[</span><span class=\"sy2\">*</span>ptr<span class=\"sy2\">++</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    INode<span class=\"sy2\">*</span> root <span class=\"sy1\">=</span> BuildTree<span class=\"br0\">(</span>frequencies<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    HuffCodeMap codes<span class=\"sy4\">;</span><br/>    GenerateCodes<span class=\"br0\">(</span>root, HuffCode<span class=\"br0\">(</span><span class=\"br0\">)</span>, codes<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw3\">delete</span> root<span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>HuffCodeMap<span class=\"sy4\">::</span><span class=\"me2\">const_iterator</span> it <span class=\"sy1\">=</span> codes.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> codes.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> it<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>first <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>        std<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span>it<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>second.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, it<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>second.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>                  std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">bool</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 34, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span>require '<span class=\"br0\">[</span>clojure<span class=\"sy0\">.</span>pprint\u00a0:<span class=\"kw1\">refer</span>\u00a0:<span class=\"me1\">all</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> probs <span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>freqs <span class=\"br0\">(</span>frequencies s<span class=\"br0\">)</span> sum <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">vals</span> freqs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">into</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>k v<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>k <span class=\"br0\">(</span><span class=\"sy0\">/</span> v sum<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> freqs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> init<span class=\"sy0\">-</span>pq <span class=\"br0\">[</span>weighted<span class=\"sy0\">-</span>items<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>comp <span class=\"br0\">(</span><span class=\"kw1\">proxy</span> <span class=\"br0\">[</span>java<span class=\"sy0\">.</span>util<span class=\"sy0\">.</span>Comparator<span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>                <span class=\"br0\">(</span>compare <span class=\"br0\">[</span>a b<span class=\"br0\">]</span> <span class=\"br0\">(</span>compare <span class=\"br0\">(</span>:<span class=\"me1\">priority</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span>:<span class=\"me1\">priority</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        pq <span class=\"br0\">(</span>java<span class=\"sy0\">.</span>util<span class=\"sy0\">.</span>PriorityQueue<span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> weighted<span class=\"sy0\">-</span>items<span class=\"br0\">)</span> comp<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>item prob<span class=\"br0\">]</span> weighted<span class=\"sy0\">-</span>items<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span>add pq <span class=\"br0\">{</span>\u00a0:<span class=\"me1\">symbol</span> item,\u00a0:<span class=\"me1\">priority</span> prob <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    pq<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> huffman<span class=\"sy0\">-</span>tree <span class=\"br0\">[</span>pq<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>while <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">.</span>size pq<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>a <span class=\"br0\">(</span><span class=\"sy0\">.</span>poll pq<span class=\"br0\">)</span> b <span class=\"br0\">(</span><span class=\"sy0\">.</span>poll pq<span class=\"br0\">)</span><br/>\t  new<span class=\"sy0\">-</span>node <span class=\"br0\">{</span>:<span class=\"me1\">priority</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>:<span class=\"me1\">priority</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span>:<span class=\"me1\">priority</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0:<span class=\"me1\">left</span> a\u00a0:<span class=\"me1\">right</span> b<span class=\"br0\">}</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">.</span>add pq new<span class=\"sy0\">-</span>node<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">.</span>poll pq<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> symbol<span class=\"sy0\">-</span><span class=\"kw1\">map</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"br0\">(</span>symbol<span class=\"sy0\">-</span><span class=\"kw1\">map</span> t <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">{</span>:<span class=\"kw1\">keys</span> <span class=\"br0\">[</span>symbol priority left right<span class=\"br0\">]</span>\u00a0:<span class=\"me1\">as</span> t<span class=\"br0\">}</span> code<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> symbol <span class=\"br0\">[</span><span class=\"br0\">{</span>:<span class=\"me1\">symbol</span> symbol\u00a0:<span class=\"me1\">weight</span> priority\u00a0:<span class=\"me1\">code</span> code<span class=\"br0\">}</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">concat</span> <span class=\"br0\">(</span>symbol<span class=\"sy0\">-</span><span class=\"kw1\">map</span> left <span class=\"br0\">(</span><span class=\"kw1\">str</span> code \\<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>symbol<span class=\"sy0\">-</span><span class=\"kw1\">map</span> right <span class=\"br0\">(</span><span class=\"kw1\">str</span> code \\<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> huffman<span class=\"sy0\">-</span>encode <span class=\"br0\">[</span>items<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> items probs init<span class=\"sy0\">-</span>pq huffman<span class=\"sy0\">-</span>tree symbol<span class=\"sy0\">-</span><span class=\"kw1\">map</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> display<span class=\"sy0\">-</span>huffman<span class=\"sy0\">-</span>encode <span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> s huffman<span class=\"sy0\">-</span>encode <span class=\"br0\">(</span><span class=\"kw1\">sort-by</span>\u00a0:<span class=\"me1\">weight</span> <span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> print<span class=\"sy0\">-</span>table<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>display<span class=\"sy0\">-</span>huffman<span class=\"sy0\">-</span>encode <span class=\"st0\">\"this is an example for huffman encoding\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 87, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>huffman_encoding_table = <span class=\"br0\">(</span>counts<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># counts is a hash where keys are characters and</span><br/>  <span class=\"co1\"># values are frequencies;</span><br/>  <span class=\"co1\"># return a hash where keys are codes and values</span><br/>  <span class=\"co1\"># are characters</span><br/>\u00a0<br/>  build_huffman_tree = <span class=\"sy0\">-&gt;</span><br/>    <span class=\"co1\"># returns a Huffman tree.  Each node has</span><br/>    <span class=\"co1\">#   cnt: total frequency of all chars in subtree</span><br/>    <span class=\"co1\">#   c: character to be encoded (leafs only)</span><br/>    <span class=\"co1\">#   children: children nodes (branches only)</span><br/>    q = min_queue<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> c<span class=\"sy0\">,</span> cnt <span class=\"kw1\">of</span> counts<br/>      q.<span class=\"me1\">enqueue</span> cnt<span class=\"sy0\">,</span><br/>        cnt<span class=\"sy0\">:</span> cnt<br/>        c<span class=\"sy0\">:</span> c<br/>    <span class=\"kw1\">while</span> q.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">2</span><br/>      a = q.<span class=\"me1\">dequeue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      b = q.<span class=\"me1\">dequeue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      cnt = a.<span class=\"me1\">cnt</span> <span class=\"sy0\">+</span> b.<span class=\"me1\">cnt</span><br/>      node = <br/>        cnt<span class=\"sy0\">:</span> cnt<br/>        children<span class=\"sy0\">:</span> <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">]</span><br/>      q.<span class=\"me1\">enqueue</span> cnt<span class=\"sy0\">,</span> node<br/>    root = q.<span class=\"me1\">dequeue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  root = build_huffman_tree<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  codes = <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  encode = <span class=\"br0\">(</span>node<span class=\"sy0\">,</span> code<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">if</span> node.<span class=\"me1\">c</span><span class=\"sy0\">?</span><br/>      codes<span class=\"br0\">[</span>code<span class=\"br0\">]</span> = node.<span class=\"me1\">c</span><br/>    <span class=\"kw1\">else</span><br/>      encode node.<span class=\"me1\">children</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> code <span class=\"sy0\">+</span> <span class=\"st0\">\"0\"</span><br/>      encode node.<span class=\"me1\">children</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> code <span class=\"sy0\">+</span> <span class=\"st0\">\"1\"</span><br/>\u00a0<br/>  encode<span class=\"br0\">(</span>root<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  codes<br/>\u00a0<br/>min_queue = <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># This is very non-optimized; you could use a binary heap for better</span><br/>  <span class=\"co1\"># performance.  Items with smaller priority get dequeued first.</span><br/>  arr = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  enqueue<span class=\"sy0\">:</span> <span class=\"br0\">(</span>priority<span class=\"sy0\">,</span> data<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    i = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> i <span class=\"sy0\">&lt;</span> arr.<span class=\"me1\">length</span><br/>      <span class=\"kw1\">if</span> priority <span class=\"sy0\">&lt;</span> arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">priority</span><br/>        <span class=\"kw1\">break</span><br/>      i <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span>  <br/>    arr.<span class=\"me1\">splice</span> i<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>      priority<span class=\"sy0\">:</span> priority<br/>      data<span class=\"sy0\">:</span> data<br/>  dequeue<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span><br/>    arr.<span class=\"me1\">shift</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">data</span><br/>  size<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span> arr.<span class=\"me1\">length</span><br/>  _internal<span class=\"sy0\">:</span> <span class=\"sy0\">-&gt;</span><br/>    arr<br/>\u00a0<br/>freq_count = <span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  cnts = <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> s<br/>    cnts<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">?</span>= <span class=\"nu0\">0</span><br/>    cnts<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>  cnts<br/>\u00a0<br/>rpad = <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"kw1\">while</span> s.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> n<br/>    s <span class=\"sy0\">+</span>= <span class=\"st0\">' '</span><br/>  s<br/>\u00a0<br/>examples = <span class=\"br0\">[</span><br/>  <span class=\"st0\">\"this is an example for huffman encoding\"</span><br/>  <span class=\"st0\">\"abcd\"</span><br/>  <span class=\"st0\">\"abbccccddddddddeeeeeeeee\"</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">for</span> s <span class=\"kw1\">in</span> examples<br/>  console.<span class=\"me1\">log</span> <span class=\"st0\">\"---- #{s}\"</span><br/>  counts = freq_count<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  huffman_table = huffman_encoding_table<span class=\"br0\">(</span>counts<span class=\"br0\">)</span><br/>  codes = <span class=\"br0\">(</span>code <span class=\"kw1\">for</span> code <span class=\"kw1\">of</span> huffman_table<span class=\"br0\">)</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> code <span class=\"kw1\">in</span> codes<br/>    c = huffman_table<span class=\"br0\">[</span>code<span class=\"br0\">]</span><br/>    console.<span class=\"me1\">log</span> <span class=\"st0\">\"#{rpad(code, 5)}: #{c} (#{counts[c]})\"</span><br/>  console.<span class=\"me1\">log</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 59, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defstruct huffman-node<br/>  <span class=\"br0\">(</span>weight <span class=\"nu0\">0</span> <span class=\"sy0\">:</span><span class=\"me1\">type</span> number<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>element <span class=\"kw1\">nil</span> <span class=\"sy0\">:</span><span class=\"me1\">type</span> t<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>encoding <span class=\"kw1\">nil</span> <span class=\"sy0\">:</span><span class=\"me1\">type</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"kw1\">null</span> bit-vector<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>left <span class=\"kw1\">nil</span> <span class=\"sy0\">:</span><span class=\"me1\">type</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"kw1\">null</span> huffman-node<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>right <span class=\"kw1\">nil</span> <span class=\"sy0\">:</span><span class=\"me1\">type</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"kw1\">null</span> huffman-node<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> initial-huffman-nodes <span class=\"br0\">(</span>sequence <span class=\"sy0\">&amp;</span>key <span class=\"br0\">(</span>test '<span class=\"kw1\">eql</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">length</span> <span class=\"br0\">(</span><span class=\"kw1\">length</span> sequence<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>increment <span class=\"br0\">(</span>/ <span class=\"nu0\">1</span> <span class=\"kw1\">length</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>nodes <span class=\"br0\">(</span>make-hash-table <span class=\"sy0\">:</span><span class=\"me1\">size</span> <span class=\"kw1\">length</span> <span class=\"sy0\">:</span><span class=\"me1\">test</span> test<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>queue '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>map <span class=\"kw1\">nil</span> #'<span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>element<span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>node presentp<span class=\"br0\">)</span> <span class=\"br0\">(</span>gethash element nodes<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">if</span> presentp<br/>                     <span class=\"br0\">(</span>incf <span class=\"br0\">(</span>huffman-node-weight node<span class=\"br0\">)</span> increment<span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>node <span class=\"br0\">(</span>make-huffman-node <span class=\"sy0\">:</span><span class=\"me1\">weight</span> increment<br/>                                                    <span class=\"sy0\">:</span><span class=\"me1\">element</span> element<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>gethash element nodes<span class=\"br0\">)</span> node<br/>                             queue <span class=\"br0\">(</span><span class=\"kw1\">list</span>* node queue<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         sequence<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>values nodes <span class=\"br0\">(</span>sort queue '<span class=\"sy0\">&lt;</span> <span class=\"sy0\">:</span><span class=\"me1\">key</span> 'huffman-node-weight<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> huffman-tree <span class=\"br0\">(</span>sequence <span class=\"sy0\">&amp;</span>key <span class=\"br0\">(</span>test '<span class=\"kw1\">eql</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>nodes queue<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>initial-huffman-nodes sequence <span class=\"sy0\">:</span><span class=\"me1\">test</span> test<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>endp <span class=\"br0\">(</span>rest queue<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>values nodes <span class=\"br0\">(</span>first queue<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>destructuring-bind <span class=\"br0\">(</span>n1 n2 <span class=\"sy0\">&amp;</span>rest queue-rest<span class=\"br0\">)</span> queue<br/>        <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n3 <span class=\"br0\">(</span>make-huffman-node<br/>                   <span class=\"sy0\">:</span><span class=\"me1\">left</span> n1<br/>                   <span class=\"sy0\">:</span><span class=\"me1\">right</span> n2<br/>                   <span class=\"sy0\">:</span><span class=\"me1\">weight</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>huffman-node-weight n1<span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span>huffman-node-weight n2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">setf</span> queue <span class=\"br0\">(</span>merge '<span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> n3<span class=\"br0\">)</span> queue-rest '<span class=\"sy0\">&lt;</span><br/>                             <span class=\"sy0\">:</span><span class=\"me1\">key</span> 'huffman-node-weight<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> huffman-codes <span class=\"br0\">(</span>sequence <span class=\"sy0\">&amp;</span>key <span class=\"br0\">(</span>test '<span class=\"kw1\">eql</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>nodes tree<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>huffman-tree sequence <span class=\"sy0\">:</span><span class=\"me1\">test</span> test<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>hc <span class=\"br0\">(</span>node <span class=\"kw1\">length</span> bits<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>left <span class=\"br0\">(</span>huffman-node-left node<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>right <span class=\"br0\">(</span>huffman-node-right node<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>                  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> left<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> right<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>huffman-node-encoding node<span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"kw1\">length</span> <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> 'bit<br/>                                     <span class=\"sy0\">:</span><span class=\"me1\">initial-contents</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> bits<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>t <span class=\"br0\">(</span>hc left <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"kw1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span>* <span class=\"nu0\">0</span> bits<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>hc right <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"kw1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span>* <span class=\"nu0\">1</span> bits<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>hc tree <span class=\"nu0\">0</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      nodes<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-huffman-code-table <span class=\"br0\">(</span>nodes <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>out *standard-output*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format out <span class=\"st0\">\"~&amp;Element~10tWeight~20tCode\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for node being each hash-<span class=\"kw1\">value</span> of nodes<br/>        <span class=\"kw1\">do</span> <span class=\"br0\">(</span>format out <span class=\"st0\">\"~&amp;~s~10t~s~20t~s\"</span><br/>                   <span class=\"br0\">(</span>huffman-node-element node<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>huffman-node-weight node<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>huffman-node-encoding node<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 21, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">container</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> encode<span class=\"br0\">(</span><span class=\"kw2\">alias</span> eq<span class=\"sy0\">,</span> R<span class=\"br0\">)</span><span class=\"br0\">(</span>Group<span class=\"sy0\">!</span><span class=\"br0\">(</span>eq<span class=\"sy0\">,</span> R<span class=\"br0\">)</span> sf<span class=\"br0\">)</span> <span class=\"coMULTI\">/*pure nothrow @safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> heap <span class=\"sy0\">=</span> sf.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>s <span class=\"sy0\">=&gt;</span> tuple<span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>tuple<span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                .<span class=\"me1\">array</span>.<span class=\"me1\">heapify</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span>b <span class=\"sy0\">&lt;</span> a<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>heap.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">auto</span> lo <span class=\"sy0\">=</span> heap.<span class=\"me1\">front</span><span class=\"sy0\">;</span> heap.<span class=\"me1\">removeFront</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">auto</span> hi <span class=\"sy0\">=</span> heap.<span class=\"me1\">front</span><span class=\"sy0\">;</span> heap.<span class=\"me1\">removeFront</span><span class=\"sy0\">;</span><br/>        lo<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">ref</span> pair<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> pair<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span> <span class=\"sy0\">~</span> pair<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        hi<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">each</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw2\">ref</span> pair<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> pair<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span> <span class=\"sy0\">~</span> pair<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        heap.<span class=\"me1\">insert</span><span class=\"br0\">(</span>tuple<span class=\"br0\">(</span>lo<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> hi<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> lo<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">~</span> hi<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> heap.<span class=\"me1\">front</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">schwartzSort</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> tuple<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"sy0\">,</span> a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"this is an example for huffman encoding\"</span>d<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> p<span class=\"sy0\">;</span> s.<span class=\"me1\">dup</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">group</span>.<span class=\"me1\">encode</span><span class=\"br0\">)</span><br/>        writefln<span class=\"br0\">(</span><span class=\"st0\">\"'%s' \u00a0%s\"</span><span class=\"sy0\">,</span> p<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Eiffel", "loc": 190, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span> HUFFMAN_NODE<span class=\"br0\">[</span>T <span class=\"sy0\">-&gt;</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+comparable&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">COMPARABLE</span></a><span class=\"br0\">]</span><br/><span class=\"kw1\">inherit</span><br/>\t<a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+comparable&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">COMPARABLE</span></a><br/>\t<span class=\"kw2\">redefine</span><br/>\t\tthree_way_comparison<br/>\t<span class=\"kw2\">end</span><br/><span class=\"kw2\">create</span><br/>\tleaf_node, inner_node<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span><br/>\tleaf_node <span class=\"br0\">(</span>a_probability<span class=\"sy0\">:</span> REAL_64; a_value<span class=\"sy0\">:</span> T<span class=\"br0\">)</span><br/>\t<span class=\"kw2\">do</span><br/>\t\tprobability <span class=\"sy0\">:=</span> a_probability<br/>\t\tvalue <span class=\"sy0\">:=</span> a_value<br/>\t\tis_leaf <span class=\"sy0\">:=</span> <span class=\"kw3\">true</span><br/>\u00a0<br/>\t\tleft <span class=\"sy0\">:=</span> <span class=\"kw3\">void</span><br/>\t\tright <span class=\"sy0\">:=</span> <span class=\"kw3\">void</span><br/>\t\tparent <span class=\"sy0\">:=</span> <span class=\"kw3\">void</span><br/>\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tinner_node <span class=\"br0\">(</span>a_left, a_right<span class=\"sy0\">:</span> HUFFMAN_NODE<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"kw2\">do</span><br/>\t\tleft <span class=\"sy0\">:=</span> a_left<br/>\t\tright <span class=\"sy0\">:=</span> a_right<br/>\u00a0<br/>\t\ta_left.<span class=\"me1\">parent</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">Current</span><br/>\t\ta_right.<span class=\"me1\">parent</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">Current</span><br/>\t\ta_left.<span class=\"me1\">is_zero</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">true</span><br/>\t\ta_right.<span class=\"me1\">is_zero</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">false</span><br/>\u00a0<br/>\t\tprobability <span class=\"sy0\">:=</span> a_left.<span class=\"me1\">probability</span> <span class=\"sy0\">+</span> a_right.<span class=\"me1\">probability</span><br/>\t\tis_leaf <span class=\"sy0\">:=</span> <span class=\"kw3\">false</span><br/>\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\tprobability<span class=\"sy0\">:</span> REAL_64<br/>\tvalue<span class=\"sy0\">:</span> detachable T<br/>\u00a0<br/>\u00a0<br/>\tis_leaf<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\tis_zero<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a> assign set_is_zero<br/>\u00a0<br/>\tset_is_zero <span class=\"br0\">(</span>a_value<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><span class=\"br0\">)</span><br/>\t<span class=\"kw2\">do</span><br/>\t\tis_zero <span class=\"sy0\">:=</span> a_value<br/>\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tleft<span class=\"sy0\">:</span> detachable HUFFMAN_NODE<span class=\"br0\">[</span>T<span class=\"br0\">]</span><br/>\tright<span class=\"sy0\">:</span> detachable HUFFMAN_NODE<span class=\"br0\">[</span>T<span class=\"br0\">]</span><br/>\tparent<span class=\"sy0\">:</span> detachable HUFFMAN_NODE<span class=\"br0\">[</span>T<span class=\"br0\">]</span> assign set_parent<br/>\u00a0<br/>\tset_parent <span class=\"br0\">(</span>a_parent<span class=\"sy0\">:</span> detachable HUFFMAN_NODE<span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"kw2\">do</span><br/>\t\tparent <span class=\"sy0\">:=</span> a_parent<br/>\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tis_root<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t<span class=\"kw2\">do</span><br/>\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> parent <span class=\"sy0\">=</span> <span class=\"kw3\">void</span><br/>\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tbit_value<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t<span class=\"kw2\">do</span><br/>\t\t<span class=\"kw2\">if</span> is_zero <span class=\"kw2\">then</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">else</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw2\">end</span><br/>\t<span class=\"kw2\">end</span><br/><span class=\"kw1\">feature</span> <span class=\"co1\">-- comparable implementation</span><br/>\tis_less <span class=\"kw2\">alias</span> <span class=\"st0\">\"&lt;\"</span> <span class=\"br0\">(</span>other<span class=\"sy0\">:</span> <span class=\"kw2\">like</span> <span class=\"kw3\">Current</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t<span class=\"kw2\">do</span><br/>\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> three_way_comparison <span class=\"br0\">(</span>other<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tthree_way_comparison <span class=\"br0\">(</span>other<span class=\"sy0\">:</span> <span class=\"kw2\">like</span> <span class=\"kw3\">Current</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t<span class=\"kw2\">do</span><br/>\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"sy0\">-</span>probability.<span class=\"me1\">three_way_comparison</span> <span class=\"br0\">(</span>other.<span class=\"me1\">probability</span><span class=\"br0\">)</span><br/>\t<span class=\"kw2\">end</span><br/><span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">class</span> HUFFMAN<br/><span class=\"kw2\">create</span><br/>\tmake<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span><br/>\tmake<span class=\"br0\">(</span>a_string<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><span class=\"br0\">)</span><br/>\t<span class=\"kw2\">require</span><br/>\t\tnon_empty_string<span class=\"sy0\">:</span> a_string.<span class=\"me1\">count</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw2\">local</span><br/>\t\tl_queue<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+heap_priority_queue&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">HEAP_PRIORITY_QUEUE</span></a><span class=\"br0\">[</span>HUFFMAN_NODE<span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+character&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">CHARACTER</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t\tl_counts<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+hash_table&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">HASH_TABLE</span></a><span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a>, <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+character&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">CHARACTER</span></a><span class=\"br0\">]</span><br/>\t\tl_node<span class=\"sy0\">:</span> HUFFMAN_NODE<span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+character&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">CHARACTER</span></a><span class=\"br0\">]</span><br/>\t\tl_left, l_right<span class=\"sy0\">:</span> HUFFMAN_NODE<span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+character&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">CHARACTER</span></a><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">do</span><br/>\t\t<span class=\"kw2\">create</span> l_queue.<span class=\"me1\">make</span> <span class=\"br0\">(</span>a_string.<span class=\"me1\">count</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">create</span> l_counts.<span class=\"me1\">make</span> <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\tacross a_string <span class=\"kw2\">as</span>  char<br/>\t\t<span class=\"kw2\">loop</span><br/>\t\t\t<span class=\"kw2\">if</span> <span class=\"kw2\">not</span> l_counts.<span class=\"me1\">has</span> <span class=\"br0\">(</span>char.<span class=\"me1\">item</span><span class=\"br0\">)</span> <span class=\"kw2\">then</span><br/>\t\t\t\tl_counts.<span class=\"me1\">put</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, char.<span class=\"me1\">item</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\tl_counts.<span class=\"me1\">replace</span> <span class=\"br0\">(</span>l_counts.<span class=\"me1\">at</span> <span class=\"br0\">(</span>char.<span class=\"me1\">item</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, char.<span class=\"me1\">item</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">create</span> leaf_dictionary.<span class=\"me1\">make</span><span class=\"br0\">(</span>l_counts.<span class=\"me1\">count</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\tacross l_counts <span class=\"kw2\">as</span> kv<br/>\t\t<span class=\"kw2\">loop</span><br/>\t\t\t<span class=\"kw2\">create</span> l_node.<span class=\"me1\">leaf_node</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>kv.<span class=\"me1\">item</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> a_string.<span class=\"me1\">count</span>, kv.<span class=\"me1\">key</span><span class=\"br0\">)</span><br/>\t\t\tl_queue.<span class=\"me1\">put</span> <span class=\"br0\">(</span>l_node<span class=\"br0\">)</span><br/>\t\t\tleaf_dictionary.<span class=\"me1\">put</span> <span class=\"br0\">(</span>l_node, kv.<span class=\"me1\">key</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">from</span><br/>\t\t<span class=\"kw2\">until</span><br/>\t\t\tl_queue.<span class=\"me1\">count</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"kw2\">loop</span><br/>\t\t\tl_left <span class=\"sy0\">:=</span> l_queue.<span class=\"me1\">item</span><br/>\t\t\tl_queue.<span class=\"me1\">remove</span><br/>\t\t\tl_right <span class=\"sy0\">:=</span> l_queue.<span class=\"me1\">item</span><br/>\t\t\tl_queue.<span class=\"me1\">remove</span><br/>\u00a0<br/>\t\t\t<span class=\"kw2\">create</span> l_node.<span class=\"me1\">inner_node</span> <span class=\"br0\">(</span>l_left, l_right<span class=\"br0\">)</span><br/>\t\t\tl_queue.<span class=\"me1\">put</span> <span class=\"br0\">(</span>l_node<span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\t\t<span class=\"kw5\">root</span> <span class=\"sy0\">:=</span> l_queue.<span class=\"me1\">item</span><br/>\t\t<span class=\"kw5\">root</span>.<span class=\"me1\">is_zero</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">false</span><br/>\t<span class=\"kw2\">end</span><br/><span class=\"kw1\">feature</span><br/>\t<span class=\"kw5\">root</span><span class=\"sy0\">:</span> HUFFMAN_NODE<span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+character&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">CHARACTER</span></a><span class=\"br0\">]</span><br/>\tleaf_dictionary<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+hash_table&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">HASH_TABLE</span></a><span class=\"br0\">[</span>HUFFMAN_NODE<span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+character&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">CHARACTER</span></a><span class=\"br0\">]</span>, <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+character&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">CHARACTER</span></a><span class=\"br0\">]</span><br/>\u00a0<br/>\tencode<span class=\"br0\">(</span>a_value<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+character&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">CHARACTER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/>\t<span class=\"kw2\">require</span><br/>\t\tencodable<span class=\"sy0\">:</span> leaf_dictionary.<span class=\"me1\">has</span> <span class=\"br0\">(</span>a_value<span class=\"br0\">)</span><br/>\t<span class=\"kw2\">local</span><br/>\t\tl_node<span class=\"sy0\">:</span> HUFFMAN_NODE<span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+character&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">CHARACTER</span></a><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">do</span><br/>\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"st0\">\"\"</span><br/>\t\t<span class=\"kw2\">if</span> attached  leaf_dictionary.<span class=\"me1\">item</span> <span class=\"br0\">(</span>a_value<span class=\"br0\">)</span> <span class=\"kw2\">as</span> attached_node <span class=\"kw2\">then</span><br/>\t\t\tl_node <span class=\"sy0\">:=</span> attached_node<br/>\t\t\t<span class=\"kw2\">from</span><br/>\u00a0<br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\tl_node.<span class=\"me1\">is_root</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">append_integer</span> <span class=\"br0\">(</span>l_node.<span class=\"me1\">bit_value</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">if</span> attached l_node.<span class=\"me1\">parent</span> <span class=\"kw2\">as</span> parent <span class=\"kw2\">then</span><br/>\t\t\t\t\tl_node <span class=\"sy0\">:=</span> parent<br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">mirror</span><br/>\t\t<span class=\"kw2\">end</span><br/>\t<span class=\"kw2\">end</span><br/><span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span><br/>\tmake <span class=\"co1\">-- entry point</span><br/>\t<span class=\"kw2\">local</span><br/>\t\tl_str<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+string&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">STRING</span></a><br/>\t\thuff<span class=\"sy0\">:</span> HUFFMAN<br/>\t\tchars<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+binary_search_tree_set&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BINARY_SEARCH_TREE_SET</span></a><span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+character&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">CHARACTER</span></a><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">do</span><br/>\t\tl_str <span class=\"sy0\">:=</span> <span class=\"st0\">\"this is an example for huffman encoding\"</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">create</span> huff.<span class=\"me1\">make</span> <span class=\"br0\">(</span>l_str<span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">create</span> chars.<span class=\"me1\">make</span><br/>\t\tchars.<span class=\"me1\">fill</span> <span class=\"br0\">(</span>l_str<span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">from</span><br/>\t\t\tchars.<span class=\"me1\">start</span><br/>\t\t<span class=\"kw2\">until</span><br/>\t\t\tchars.<span class=\"me1\">off</span><br/>\t\t<span class=\"kw2\">loop</span><br/>\t\t\tprint <span class=\"br0\">(</span>chars.<span class=\"me1\">item</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\": \"</span> <span class=\"sy0\">+</span> huff.<span class=\"me1\">encode</span> <span class=\"br0\">(</span>chars.<span class=\"me1\">item</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\tchars.<span class=\"me1\">forth</span><br/>\t\t<span class=\"kw2\">end</span><br/>\t<span class=\"kw2\">end</span><br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 63, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>huffman<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>encode<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> decode<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> main<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">encode</span><span class=\"br0\">(</span><span class=\"re5\">Text</span><span class=\"br0\">)</span>  <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Tree</span>  <span class=\"sy3\">=</span> <span class=\"re3\">tree</span><span class=\"br0\">(</span><span class=\"re3\">freq_table</span><span class=\"br0\">(</span><span class=\"re5\">Text</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Dict</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">from_list</span><span class=\"br0\">(</span><span class=\"re3\">codewords</span><span class=\"br0\">(</span><span class=\"re5\">Tree</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">Code</span> <span class=\"sy3\">=</span> <span class=\"sy2\">&lt;&lt;</span> <span class=\"sy2\">&lt;&lt;</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fetch</span><span class=\"br0\">(</span><span class=\"re5\">Char</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">/</span>bitstring<span class=\"sy2\">&gt;&gt;</span> <span class=\"sy3\">||</span> <span class=\"re5\">Char</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Text</span> <span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">Code</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">decode</span><span class=\"br0\">(</span><span class=\"re5\">Code</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">decode</span><span class=\"br0\">(</span><span class=\"re5\">Code</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>    <span class=\"br0\">{</span><span class=\"re5\">Code</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <span class=\"re3\">encode</span><span class=\"br0\">(</span><span class=\"st0\">\"this is an example for huffman encoding\"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">[</span><span class=\"kw1\">begin</span> <br/>        <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~s: \"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re5\">Key</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>        <span class=\"re3\">print_bits</span><span class=\"br0\">(</span><span class=\"re5\">Value</span><span class=\"br0\">)</span><br/>     <span class=\"kw1\">end</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">Key</span><span class=\"sy1\">,</span> <span class=\"re5\">Value</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">to_list</span><span class=\"br0\">(</span><span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"encoded: \"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">print_bits</span><span class=\"br0\">(</span><span class=\"re5\">Code</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"decoded: \"</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~s<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re3\">decode</span><span class=\"br0\">(</span><span class=\"re5\">Code</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">decode</span><span class=\"br0\">(</span><span class=\"sy2\">&lt;&lt;&gt;&gt;</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"re5\">Result</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">Result</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">decode</span><span class=\"br0\">(</span><span class=\"sy2\">&lt;&lt;</span><span class=\"nu0\">0</span>:<span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Rest</span><span class=\"sy3\">/</span>bits<span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">L</span> <span class=\"sy3\">=</span> <span class=\"br0\">{</span><span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">_R</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Result</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">decode</span><span class=\"br0\">(</span><span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">Rest</span><span class=\"sy3\">/</span>bits<span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"re5\">L</span><span class=\"sy1\">,</span> <span class=\"re5\">Result</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">decode</span><span class=\"br0\">(</span><span class=\"sy2\">&lt;&lt;</span><span class=\"nu0\">0</span>:<span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Rest</span><span class=\"sy3\">/</span>bits<span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">L</span><span class=\"sy1\">,</span> <span class=\"re5\">_R</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Result</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">decode</span><span class=\"br0\">(</span><span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">Rest</span><span class=\"sy3\">/</span>bits<span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">L</span> | <span class=\"re5\">Result</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">decode</span><span class=\"br0\">(</span><span class=\"sy2\">&lt;&lt;</span><span class=\"nu0\">1</span>:<span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Rest</span><span class=\"sy3\">/</span>bits<span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">_L</span><span class=\"sy1\">,</span> <span class=\"re5\">R</span> <span class=\"sy3\">=</span> <span class=\"br0\">{</span><span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Result</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">decode</span><span class=\"br0\">(</span><span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">Rest</span><span class=\"sy3\">/</span>bits<span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"re5\">R</span><span class=\"sy1\">,</span> <span class=\"re5\">Result</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">decode</span><span class=\"br0\">(</span><span class=\"sy2\">&lt;&lt;</span><span class=\"nu0\">1</span>:<span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Rest</span><span class=\"sy3\">/</span>bits<span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">_L</span><span class=\"sy1\">,</span> <span class=\"re5\">R</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Result</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">decode</span><span class=\"br0\">(</span><span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">Rest</span><span class=\"sy3\">/</span>bits<span class=\"sy2\">&gt;&gt;</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">R</span> | <span class=\"re5\">Result</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">codewords</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">L</span><span class=\"sy1\">,</span> <span class=\"re5\">R</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">codewords</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"sy1\">,</span> <span class=\"sy2\">&lt;&lt;</span><span class=\"nu0\">0</span>:<span class=\"nu0\">1</span><span class=\"sy2\">&gt;&gt;</span><span class=\"br0\">)</span> <span class=\"sy3\">++</span> <span class=\"re3\">codewords</span><span class=\"br0\">(</span><span class=\"re5\">R</span><span class=\"sy1\">,</span> <span class=\"sy2\">&lt;&lt;</span><span class=\"nu0\">1</span>:<span class=\"nu0\">1</span><span class=\"sy2\">&gt;&gt;</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">codewords</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"re5\">L</span><span class=\"sy1\">,</span> <span class=\"re5\">R</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">Bits</span><span class=\"sy3\">/</span>bits<span class=\"sy2\">&gt;&gt;</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">codewords</span><span class=\"br0\">(</span><span class=\"re5\">L</span><span class=\"sy1\">,</span> <span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">Bits</span><span class=\"sy3\">/</span>bits<span class=\"sy1\">,</span> <span class=\"nu0\">0</span>:<span class=\"nu0\">1</span><span class=\"sy2\">&gt;&gt;</span><span class=\"br0\">)</span> <span class=\"sy3\">++</span> <span class=\"re3\">codewords</span><span class=\"br0\">(</span><span class=\"re5\">R</span><span class=\"sy1\">,</span> <span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">Bits</span><span class=\"sy3\">/</span>bits<span class=\"sy1\">,</span> <span class=\"nu0\">1</span>:<span class=\"nu0\">1</span><span class=\"sy2\">&gt;&gt;</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">codewords</span><span class=\"br0\">(</span><span class=\"re5\">Symbol</span><span class=\"sy1\">,</span> <span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">Bits</span><span class=\"sy3\">/</span>bitstring<span class=\"sy2\">&gt;&gt;</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">Symbol</span><span class=\"sy1\">,</span> <span class=\"re5\">Bits</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">tree</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">_</span><span class=\"br0\">}</span> | <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">N</span><span class=\"sy1\">;</span><br/><span class=\"re3\">tree</span><span class=\"br0\">(</span><span class=\"re5\">Ns</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">N1</span><span class=\"sy1\">,</span> <span class=\"re5\">C1</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">N2</span><span class=\"sy1\">,</span> <span class=\"re5\">C2</span><span class=\"br0\">}</span> | <span class=\"re5\">Rest</span><span class=\"br0\">]</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">keysort</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">Ns</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">tree</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"re5\">N1</span><span class=\"sy1\">,</span> <span class=\"re5\">N2</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">C1</span> <span class=\"sy3\">+</span> <span class=\"re5\">C2</span><span class=\"br0\">}</span> | <span class=\"re5\">Rest</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">freq_table</span><span class=\"br0\">(</span><span class=\"re5\">Text</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">freq_table</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span><span class=\"re5\">Text</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">freq_table</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Acc</span><span class=\"sy1\">;</span><br/><span class=\"re3\">freq_table</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">S</span> | <span class=\"re5\">Rest</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"br0\">{</span><span class=\"re5\">Block</span><span class=\"sy1\">,</span> <span class=\"re5\">MoreBlocks</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">splitwith</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">X</span> <span class=\"sy3\">==</span> <span class=\"re5\">S</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span> <span class=\"re5\">Rest</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">freq_table</span><span class=\"br0\">(</span><span class=\"re5\">MoreBlocks</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">S</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span> <span class=\"sy3\">+</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Block</span><span class=\"br0\">)</span><span class=\"br0\">}</span> | <span class=\"re5\">Acc</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">print_bits</span><span class=\"br0\">(</span><span class=\"sy2\">&lt;&lt;&gt;&gt;</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">print_bits</span><span class=\"br0\">(</span><span class=\"sy2\">&lt;&lt;</span><span class=\"re5\">Bit</span>:<span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">Rest</span><span class=\"sy3\">/</span>bitstring<span class=\"sy2\">&gt;&gt;</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~w\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Bit</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"re3\">print_bits</span><span class=\"br0\">(</span><span class=\"re5\">Rest</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "F#", "loc": 35, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">type</span> <span class=\"st0\">'a HuffmanTree =<br/>    | Leaf of int * '</span>a<br/>    | Node <span class=\"kw1\">of</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span> <span class=\"st0\">'a HuffmanTree * '</span>a HuffmanTree<br/>\u00a0<br/><span class=\"kw1\">let</span> freq <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> Leaf <span class=\"br0\">(</span>f, _<span class=\"br0\">)</span> | Node <span class=\"br0\">(</span>f, _, _<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> f<br/><span class=\"kw1\">let</span> freqCompare a b <span class=\"sy0\">=</span> compare <span class=\"br0\">(</span>freq a<span class=\"br0\">)</span> <span class=\"br0\">(</span>freq b<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> buildTree charFreqs <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> leaves <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>c,f<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> Leaf <span class=\"br0\">(</span>f,c<span class=\"br0\">)</span><span class=\"br0\">)</span> charFreqs<br/>    <span class=\"kw1\">let</span> freqSort <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">sortWith</span> freqCompare<br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>        | <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw5\">failwith</span> <span class=\"st0\">\"empty list\"</span><br/>        | <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> a<br/>        | a::b::tl <span class=\"sy0\">-&gt;</span><br/>            <span class=\"kw1\">let</span> node <span class=\"sy0\">=</span> Node<span class=\"br0\">(</span>freq a <span class=\"sy0\">+</span> freq b, a, b<span class=\"br0\">)</span><br/>            aux <span class=\"br0\">(</span>freqSort<span class=\"br0\">(</span>node::tl<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    aux <span class=\"br0\">(</span>freqSort leaves<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> printTree <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  | code, Leaf <span class=\"br0\">(</span>f, c<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>      printfn <span class=\"st0\">\"%c<span class=\"es0\">\\t</span>%d<span class=\"es0\">\\t</span>%s\"</span> c f <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">String</span></a>.<span class=\"me1\">concat</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">rev</span> code<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  | code, Node <span class=\"br0\">(</span>_, l, r<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>      printTree <span class=\"br0\">(</span><span class=\"st0\">\"0\"</span>::code, l<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      printTree <span class=\"br0\">(</span><span class=\"st0\">\"1\"</span>::code, r<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> str <span class=\"sy0\">=</span> <span class=\"st0\">\"this is an example for huffman encoding\"</span><br/>  <span class=\"kw1\">let</span> charFreqs <span class=\"sy0\">=</span><br/>    str <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">groupBy</span> id<br/>        <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>c, vals<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>c, <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">length</span> vals<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Map</span></a>.<span class=\"me1\">ofSeq</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> tree <span class=\"sy0\">=</span> charFreqs <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Map</span></a>.<span class=\"me1\">toList</span> <span class=\"sy0\">|&gt;</span> buildTree<br/>  printfn <span class=\"st0\">\"Symbol<span class=\"es0\">\\t</span>Weight<span class=\"es0\">\\t</span>Huffman code\"</span><span class=\"sy0\">;</span><br/>  printTree <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, tree<span class=\"br0\">)</span></pre>"}, {"lang": "Fantom", "loc": 99, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Node<br/>{<br/>  Float probability\u00a0:= 0.0f<br/>}<br/>\u00a0<br/>class Leaf\u00a0: Node<br/>{<br/>  Int character<br/>\u00a0<br/>  new make (Int character, Float probability)<br/>  {<br/>    this.character = character<br/>    this.probability = probability<br/>  }<br/>}<br/>\u00a0<br/>class Branch\u00a0: Node<br/>{<br/>  Node left<br/>  Node right<br/>\u00a0<br/>  new make (Node left, Node right)<br/>  {<br/>    this.left = left<br/>    this.right = right<br/>    probability = this.left.probability + this.right.probability<br/>  }<br/>}<br/>\u00a0<br/>class Huffman<br/>{<br/>  Node[] queue\u00a0:= [,]<br/>  Str:Str table\u00a0:= [:]<br/>\u00a0<br/>  new make (Int[] items)<br/>  {<br/>    uniqueItems\u00a0:= items.dup.unique<br/>    uniqueItems.each |Int item|<br/>    {<br/>      num\u00a0:= items.findAll { it == item }.size<br/>      queue.add (Leaf(item, num.toFloat / items.size)) <br/>    }<br/>    createTree <br/>    createTable<br/>  }<br/>\u00a0<br/>  Void createTree ()<br/>  {<br/>    while (queue.size &gt; 1)<br/>    {<br/>      queue.sort |a,b| {a.probability &lt;=&gt; b.probability}<br/>      node1\u00a0:= queue.removeAt (0)<br/>      node2\u00a0:= queue.removeAt (0)<br/>      queue.add (Branch (node1, node2))<br/>    }<br/>  }<br/>\u00a0<br/>  Void traverse (Node node, Str encoding)<br/>  {<br/>    if (node is Leaf)<br/>    {<br/>      table[(node as Leaf).character.toChar] = encoding<br/>    }<br/>    else // (node is Branch)<br/>    {<br/>      traverse ((node as Branch).left, encoding + \"0\")<br/>      traverse ((node as Branch).right, encoding + \"1\")<br/>    }<br/>  }<br/>\u00a0<br/>  Void createTable ()<br/>  {<br/>    if (queue.size\u00a0!= 1) return // error!<br/>    traverse (queue.first, \"\")<br/>  }<br/>\u00a0<br/>  override Str toStr ()<br/>  {<br/>    result\u00a0:= \"Huffman Encoding Table:\\n\"<br/>    table.keys.sort.each |Str key|<br/>    {<br/>      result += \"$key -&gt; ${table[key]}\\n\"<br/>    }<br/>    return result<br/>  }<br/>}<br/>\u00a0<br/>class Main<br/>{<br/>  public static Void main ()<br/>  {<br/>    example\u00a0:= \"this is an example for huffman encoding\"<br/>    huffman\u00a0:= Huffman (example.chars)<br/>    echo (\"From \\\"$example\\\"\")<br/>    echo (huffman)<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 149, "block": "<pre class=\"fortran highlighted_source\"><span class=\"co1\">! output:</span><br/><span class=\"co1\">! d-&gt; 00000, t-&gt; 00001, h-&gt; 0001, s-&gt; 0010, </span><br/><span class=\"co1\">! c-&gt; 00110, x-&gt; 00111, m-&gt; 0100, o-&gt; 0101, </span><br/><span class=\"co1\">! n-&gt; 011, u-&gt; 10000, l-&gt; 10001, a-&gt; 1001, </span><br/><span class=\"co1\">! r-&gt; 10100, g-&gt; 101010, p-&gt; 101011, </span><br/><span class=\"co1\">! e-&gt; 1011, i-&gt; 1100, f-&gt; 1101,  -&gt; 111</span><br/><span class=\"co1\">!</span><br/><span class=\"co1\">! 00001|0001|1100|0010|111|1100|0010|111|1001|011|</span><br/><span class=\"co1\">! 111|1011|00111|1001|0100|101011|10001|1011|111|</span><br/><span class=\"co1\">! 1101|0101|10100|111|0001|10000|1101|1101|0100|</span><br/><span class=\"co1\">! 1001|011|111|1011|011|00110|0101|00000|1100|011|101010|</span><br/><span class=\"co1\">!</span><br/><span class=\"kw1\">module</span> huffman<br/><span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/><span class=\"kw3\">type</span> node<br/>  <span class=\"kw3\">character</span> <span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">sym</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">character</span> <span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">code</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <br/>  <span class=\"kw3\">integer</span>                         <span class=\"sy0\">::</span> <span class=\"me2\">freq</span><br/><span class=\"co1\">contains</span><br/>  <span class=\"kw1\">procedure</span>                       <span class=\"sy0\">::</span> <span class=\"me2\">show</span> <span class=\"sy0\">=</span>&gt; show_node<br/><span class=\"kw1\">end</span> <span class=\"kw3\">type</span><br/>\u00a0<br/><span class=\"kw3\">type</span> queue<br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">buf</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span>                 <span class=\"sy0\">::</span> <span class=\"me2\">n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"co1\">contains</span><br/>  <span class=\"kw1\">procedure</span> <span class=\"sy0\">::</span> <span class=\"me2\">extractmin</span><br/>  <span class=\"kw1\">procedure</span> <span class=\"sy0\">::</span> <span class=\"me2\">append</span><br/>  <span class=\"kw1\">procedure</span> <span class=\"sy0\">::</span> <span class=\"me2\">siftdown</span><br/><span class=\"kw1\">end</span> <span class=\"kw3\">type</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">subroutine</span> siftdown<span class=\"br0\">(</span>this, a<span class=\"br0\">)</span><br/>  class <span class=\"br0\">(</span>queue<span class=\"br0\">)</span>           <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>  <span class=\"kw3\">integer</span>                 <span class=\"sy0\">::</span> <span class=\"me2\">a</span>, parent, child<br/>  associate <span class=\"br0\">(</span>x <span class=\"sy0\">=</span>&gt; this<span class=\"sy0\">%</span>buf<span class=\"br0\">)</span><br/>  parent <span class=\"sy0\">=</span> a<br/>  <span class=\"kw1\">do</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span>parent<span class=\"sy0\">*</span><span class=\"nu0\">2</span> &lt;<span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>n<span class=\"br0\">)</span><br/>    child <span class=\"sy0\">=</span> parent<span class=\"sy0\">*</span><span class=\"nu0\">2</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>child <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> &lt;<span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"br0\">(</span>child<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">%</span>freq &lt; x<span class=\"br0\">(</span>child<span class=\"br0\">)</span><span class=\"sy0\">%</span>freq <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        child <span class=\"sy0\">=</span> child <span class=\"sy0\">+</span><span class=\"nu0\">1</span> <br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"br0\">(</span>parent<span class=\"br0\">)</span><span class=\"sy0\">%</span>freq &gt; x<span class=\"br0\">(</span>child<span class=\"br0\">)</span><span class=\"sy0\">%</span>freq<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      x<span class=\"br0\">(</span><span class=\"br0\">[</span>child, parent<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x<span class=\"br0\">(</span><span class=\"br0\">[</span>parent, child<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      parent <span class=\"sy0\">=</span> child<br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">exit</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>  <br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span>      <br/>  <span class=\"kw1\">end</span> associate<br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/>\u00a0<br/><span class=\"kw1\">function</span> extractmin<span class=\"br0\">(</span>this<span class=\"br0\">)</span> <span class=\"kw3\">result</span> <span class=\"br0\">(</span>res<span class=\"br0\">)</span><br/>  class<span class=\"br0\">(</span>queue<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span>   <span class=\"sy0\">::</span> <span class=\"me2\">res</span><br/>  res <span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>buf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  this<span class=\"sy0\">%</span>buf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>buf<span class=\"br0\">(</span>this<span class=\"sy0\">%</span>n<span class=\"br0\">)</span><br/>  this<span class=\"sy0\">%</span>n <span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">call</span> this<span class=\"sy0\">%</span>siftdown<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">subroutine</span> append<span class=\"br0\">(</span>this, x<span class=\"br0\">)</span><br/>  class<span class=\"br0\">(</span>queue<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span>                  <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span>     <span class=\"sy0\">::</span> <span class=\"me2\">tmp</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span>                     <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>  this<span class=\"sy0\">%</span>n <span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>n <span class=\"sy0\">+</span><span class=\"nu0\">1</span>  <br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>.<span class=\"kw4\">not</span>.<span class=\"kw4\">allocated</span><span class=\"br0\">(</span>this<span class=\"sy0\">%</span>buf<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>this<span class=\"sy0\">%</span>buf<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>this<span class=\"sy0\">%</span>buf<span class=\"br0\">)</span>&lt;this<span class=\"sy0\">%</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>tmp<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>this<span class=\"sy0\">%</span>buf<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    tmp<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>this<span class=\"sy0\">%</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>buf<br/>    <span class=\"kw1\">call</span> move_alloc<span class=\"br0\">(</span>tmp, this<span class=\"sy0\">%</span>buf<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  this<span class=\"sy0\">%</span>buf<span class=\"br0\">(</span>this<span class=\"sy0\">%</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> x<br/>  i <span class=\"sy0\">=</span> this<span class=\"sy0\">%</span>n<br/>  <span class=\"kw1\">do</span> <br/>    i <span class=\"sy0\">=</span> i <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">exit</span><br/>    <span class=\"kw1\">call</span> this<span class=\"sy0\">%</span>siftdown<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/>\u00a0<br/><span class=\"kw1\">function</span> join<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span>             <span class=\"sy0\">::</span> <span class=\"me2\">a</span>, b, c<br/>  <span class=\"kw3\">integer</span>                <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, n, n1<br/>  n1 <span class=\"sy0\">=</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>a<span class=\"sy0\">%</span>sym<span class=\"br0\">)</span><br/>  n <span class=\"sy0\">=</span> n1 <span class=\"sy0\">+</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>b<span class=\"sy0\">%</span>sym<span class=\"br0\">)</span>  <br/>  c<span class=\"sy0\">%</span>freq <span class=\"sy0\">=</span> a<span class=\"sy0\">%</span>freq <span class=\"sy0\">+</span> b<span class=\"sy0\">%</span>freq<br/>  <span class=\"kw1\">allocate</span> <span class=\"br0\">(</span>c<span class=\"sy0\">%</span>sym<span class=\"br0\">(</span>n<span class=\"br0\">)</span>, c<span class=\"sy0\">%</span>code<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n1<br/>    c<span class=\"sy0\">%</span>sym<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a<span class=\"sy0\">%</span>sym<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    c<span class=\"sy0\">%</span>code<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span> <span class=\"sy0\">//</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span>a<span class=\"sy0\">%</span>code<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">(</span>b<span class=\"sy0\">%</span>sym<span class=\"br0\">)</span><br/>    c<span class=\"sy0\">%</span>sym<span class=\"br0\">(</span>i<span class=\"sy0\">+</span>n1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> b<span class=\"sy0\">%</span>sym<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    c<span class=\"sy0\">%</span>code<span class=\"br0\">(</span>i<span class=\"sy0\">+</span>n1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"1\"</span> <span class=\"sy0\">//</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span>b<span class=\"sy0\">%</span>code<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">subroutine</span> show_node<span class=\"br0\">(</span>this<span class=\"br0\">)</span><br/>  class<span class=\"br0\">(</span>node<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>  <span class=\"kw3\">integer</span>     <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(*(g0,'-&gt; ',g0,:,', '))\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span><br/>   <span class=\"br0\">(</span>this<span class=\"sy0\">%</span>sym<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, <span class=\"kw4\">trim</span><span class=\"br0\">(</span>this<span class=\"sy0\">%</span>code<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>, i<span class=\"sy0\">=</span><span class=\"nu0\">1</span>,<span class=\"kw4\">size</span><span class=\"br0\">(</span>this<span class=\"sy0\">%</span>sym<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  print <span class=\"sy0\">*</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/>\u00a0<br/><span class=\"kw1\">function</span> create<span class=\"br0\">(</span>letter, freq<span class=\"br0\">)</span> <span class=\"kw3\">result</span> <span class=\"br0\">(</span>this<span class=\"br0\">)</span><br/>  <span class=\"kw3\">character</span> <span class=\"sy0\">::</span> <span class=\"me2\">letter</span><br/>  <span class=\"kw3\">integer</span>   <span class=\"sy0\">::</span> <span class=\"me2\">freq</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">this</span><br/>  <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>this<span class=\"sy0\">%</span>sym<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, this<span class=\"sy0\">%</span>code<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  this<span class=\"sy0\">%</span>sym<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> letter\u00a0; this<span class=\"sy0\">%</span>code<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>  this<span class=\"sy0\">%</span>freq <span class=\"sy0\">=</span> freq<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> <br/>\u00a0<br/><span class=\"kw1\">program</span> main<br/>  <span class=\"kw3\">use</span> huffman<br/>  <span class=\"kw3\">character</span> <span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span>   <span class=\"sy0\">::</span> <span class=\"me2\">txt</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span><br/>   <span class=\"st0\">\"this is an example for huffman encoding\"</span><br/>  <span class=\"kw3\">integer</span>                        <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, freq<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">255</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>queue<span class=\"br0\">)</span>                    <span class=\"sy0\">::</span> <span class=\"me2\">Q</span><br/>  <span class=\"kw3\">type</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span>                     <span class=\"sy0\">::</span> <span class=\"me2\">x</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">len</span><span class=\"br0\">(</span>txt<span class=\"br0\">)</span><br/>    freq<span class=\"br0\">(</span><span class=\"kw4\">ichar</span><span class=\"br0\">(</span>txt<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> freq<span class=\"br0\">(</span><span class=\"kw4\">ichar</span><span class=\"br0\">(</span>txt<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">255</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>freq<span class=\"br0\">(</span>i<span class=\"br0\">)</span>&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">call</span> Q<span class=\"sy0\">%</span>append<span class=\"br0\">(</span>create<span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>, freq<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, Q<span class=\"sy0\">%</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">call</span> Q<span class=\"sy0\">%</span>append<span class=\"br0\">(</span>join<span class=\"br0\">(</span>Q<span class=\"sy0\">%</span>extractmin<span class=\"br0\">(</span><span class=\"br0\">)</span>,Q<span class=\"sy0\">%</span>extractmin<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  x <span class=\"sy0\">=</span> Q<span class=\"sy0\">%</span>extractmin<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> x<span class=\"sy0\">%</span>show<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">len</span><span class=\"br0\">(</span>txt<span class=\"br0\">)</span> <br/>    <span class=\"kw1\">do</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">(</span>x<span class=\"sy0\">%</span>sym<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>x<span class=\"sy0\">%</span>sym<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">==</span>txt<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">exit</span><br/>     <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>     write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a,'|')\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span>  <span class=\"kw4\">trim</span><span class=\"br0\">(</span>x<span class=\"sy0\">%</span>code<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  print <span class=\"sy0\">*</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 97, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"container/heap\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> HuffmanTree <span class=\"kw4\">interface</span> <span class=\"sy1\">{</span><br/>    Freq<span class=\"sy1\">()</span> <span class=\"kw4\">int</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> HuffmanLeaf <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    freq  <span class=\"kw4\">int</span><br/>    value rune<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> HuffmanNode <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    freq        <span class=\"kw4\">int</span><br/>    left<span class=\"sy1\">,</span> right HuffmanTree<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>self HuffmanLeaf<span class=\"sy1\">)</span> Freq<span class=\"sy1\">()</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> self<span class=\"sy3\">.</span>freq<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>self HuffmanNode<span class=\"sy1\">)</span> Freq<span class=\"sy1\">()</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> self<span class=\"sy3\">.</span>freq<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> treeHeap <span class=\"sy1\">[]</span>HuffmanTree<br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>th treeHeap<span class=\"sy1\">)</span> Len<span class=\"sy1\">()</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>th<span class=\"sy1\">)</span> <span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>th treeHeap<span class=\"sy1\">)</span> Less<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> th<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>Freq<span class=\"sy1\">()</span> &lt; th<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>Freq<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>th <span class=\"sy3\">*</span>treeHeap<span class=\"sy1\">)</span> Push<span class=\"sy1\">(</span>ele <span class=\"kw4\">interface</span><span class=\"sy1\">{})</span> <span class=\"sy1\">{</span><br/>    <span class=\"sy3\">*</span>th <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span><span class=\"sy3\">*</span>th<span class=\"sy1\">,</span> ele<span class=\"sy3\">.</span><span class=\"sy1\">(</span>HuffmanTree<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>th <span class=\"sy3\">*</span>treeHeap<span class=\"sy1\">)</span> Pop<span class=\"sy1\">()</span> <span class=\"sy1\">(</span>popped <span class=\"kw4\">interface</span><span class=\"sy1\">{})</span> <span class=\"sy1\">{</span><br/>    popped <span class=\"sy2\">=</span> <span class=\"sy1\">(</span><span class=\"sy3\">*</span>th<span class=\"sy1\">)[</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span>th<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>    <span class=\"sy3\">*</span>th <span class=\"sy2\">=</span> <span class=\"sy1\">(</span><span class=\"sy3\">*</span>th<span class=\"sy1\">)[:</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span>th<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>    <span class=\"kw1\">return</span><br/><span class=\"sy1\">}</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>th treeHeap<span class=\"sy1\">)</span> Swap<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span> th<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">],</span> th<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> th<span class=\"sy1\">[</span>j<span class=\"sy1\">],</span> th<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> buildTree<span class=\"sy1\">(</span>symFreqs <span class=\"kw4\">map</span><span class=\"sy1\">[</span>rune<span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> HuffmanTree <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> trees treeHeap<br/>    <span class=\"kw1\">for</span> c<span class=\"sy1\">,</span> f <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> symFreqs <span class=\"sy1\">{</span><br/>        trees <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>trees<span class=\"sy1\">,</span> HuffmanLeaf<span class=\"sy1\">{</span>f<span class=\"sy1\">,</span> c<span class=\"sy1\">})</span><br/>    <span class=\"sy1\">}</span><br/>    heap<span class=\"sy3\">.</span>Init<span class=\"sy1\">(</span>&amp;trees<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> trees<span class=\"sy3\">.</span>Len<span class=\"sy1\">()</span> &gt; <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// two trees with least frequency</span><br/>        a <span class=\"sy2\">:=</span> heap<span class=\"sy3\">.</span><span class=\"me1\">Pop</span><span class=\"sy1\">(</span><span class=\"sy3\">&amp;</span>trees<span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"sy1\">(</span>HuffmanTree<span class=\"sy1\">)</span><br/>        b <span class=\"sy2\">:=</span> heap<span class=\"sy3\">.</span><span class=\"me1\">Pop</span><span class=\"sy1\">(</span><span class=\"sy3\">&amp;</span>trees<span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"sy1\">(</span>HuffmanTree<span class=\"sy1\">)</span><br/>\u00a0<br/>        <span class=\"co1\">// put into new node and re-insert into queue</span><br/>        heap<span class=\"sy3\">.</span>Push<span class=\"sy1\">(</span>&amp;trees<span class=\"sy1\">,</span> HuffmanNode<span class=\"sy1\">{</span>a<span class=\"sy3\">.</span>Freq<span class=\"sy1\">()</span> <span class=\"sy3\">+</span> b<span class=\"sy3\">.</span>Freq<span class=\"sy1\">(),</span> a<span class=\"sy1\">,</span> b<span class=\"sy1\">})</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> heap<span class=\"sy3\">.</span>Pop<span class=\"sy1\">(</span>&amp;trees<span class=\"sy1\">)</span><span class=\"sy3\">.</span><span class=\"sy1\">(</span>HuffmanTree<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> printCodes<span class=\"sy1\">(</span>tree HuffmanTree<span class=\"sy1\">,</span> prefix <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">switch</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> tree<span class=\"sy3\">.</span><span class=\"sy1\">(</span><span class=\"kw1\">type</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">case</span> HuffmanLeaf<span class=\"sy1\">:</span><br/>        <span class=\"co1\">// print out symbol, frequency, and code for this</span><br/>        <span class=\"co1\">// leaf (which is just the prefix)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"%c<span class=\"es1\">\\t</span>%d<span class=\"es1\">\\t</span>%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy3\">.</span>value<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy3\">.</span>freq<span class=\"sy1\">,</span> <span class=\"kw4\">string</span><span class=\"sy1\">(</span>prefix<span class=\"sy1\">))</span><br/>    <span class=\"kw1\">case</span> HuffmanNode<span class=\"sy1\">:</span><br/>        <span class=\"co1\">// traverse left</span><br/>        prefix <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>prefix<span class=\"sy1\">,</span> <span class=\"st0\">'0'</span><span class=\"sy1\">)</span><br/>        printCodes<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy3\">.</span>left<span class=\"sy1\">,</span> prefix<span class=\"sy1\">)</span><br/>        prefix <span class=\"sy2\">=</span> prefix<span class=\"sy1\">[:</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>prefix<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>\u00a0<br/>        <span class=\"co1\">// traverse right</span><br/>        prefix <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>prefix<span class=\"sy1\">,</span> <span class=\"st0\">'1'</span><span class=\"sy1\">)</span><br/>        printCodes<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy3\">.</span>right<span class=\"sy1\">,</span> prefix<span class=\"sy1\">)</span><br/>        prefix <span class=\"sy2\">=</span> prefix<span class=\"sy1\">[:</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>prefix<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    test <span class=\"sy2\">:=</span> <span class=\"st0\">\"this is an example for huffman encoding\"</span><br/>\u00a0<br/>    symFreqs <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span>rune<span class=\"sy1\">]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span><br/>    <span class=\"co1\">// read each symbol and record the frequencies</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> test <span class=\"sy1\">{</span><br/>        symFreqs<span class=\"sy1\">[</span>c<span class=\"sy1\">]</span><span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// build tree</span><br/>    tree <span class=\"sy2\">:=</span> buildTree<span class=\"sy1\">(</span>symFreqs<span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// print out results</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"SYMBOL<span class=\"es1\">\\t</span>WEIGHT<span class=\"es1\">\\t</span>HUFFMAN CODE\"</span><span class=\"sy1\">)</span><br/>    printCodes<span class=\"sy1\">(</span>tree<span class=\"sy1\">,</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">{})</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 52, "block": "<pre class=\"groovy highlighted_source\">\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20import\"><span class=\"kw2\">import</span></a> <span class=\"co2\">groovy.transform.*</span><br/>\u00a0<br/>@Canonical<br/>@Sortable<span class=\"br0\">(</span>includes <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">'freq'</span>, <span class=\"st0\">'letter'</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> Node <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> letter<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> freq<br/>    Node left<br/>    Node right<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20boolean\"><span class=\"kw4\">boolean</span></a> isLeaf<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> left <span class=\"sy0\">==</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20null\"><span class=\"kw2\">null</span></a> <span class=\"sy0\">&amp;&amp;</span> right <span class=\"sy0\">==</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20null\"><span class=\"kw2\">null</span></a> <span class=\"br0\">}</span>    <br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?as_q=Map&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Map</span></a> correspondance<span class=\"br0\">(</span>Node n, <a href=\"http://www.google.de/search?as_q=Map&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Map</span></a> corresp <span class=\"sy0\">=</span> <span class=\"br0\">[</span>:<span class=\"br0\">]</span>, <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> prefix <span class=\"sy0\">=</span> <span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n.<span class=\"me1\">isLeaf</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        corresp<span class=\"br0\">[</span>n.<span class=\"me1\">letter</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> prefix <span class=\"sy0\">?</span>: <span class=\"st0\">'0'</span><br/>    <span class=\"br0\">}</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20else\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>        correspondance<span class=\"br0\">(</span>n.<span class=\"me1\">left</span>,  corresp, prefix <span class=\"sy0\">+</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span><br/>        correspondance<span class=\"br0\">(</span>n.<span class=\"me1\">right</span>, corresp, prefix <span class=\"sy0\">+</span> <span class=\"st0\">'1'</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> corresp<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?as_q=Map&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Map</span></a> huffmanCode<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> message<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> queue <span class=\"sy0\">=</span> message.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20toList\"><span class=\"kw5\">toList</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">countBy</span> <span class=\"br0\">{</span> it <span class=\"br0\">}</span> <span class=\"co1\">// char frequencies</span><br/>        .<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> letter, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> freq <span class=\"sy0\">-&gt;</span>   <span class=\"co1\">// transformed into tree nodes</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Node<span class=\"br0\">(</span>letter, freq<span class=\"br0\">)</span> <br/>        <span class=\"br0\">}</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=TreeSet&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">TreeSet</span></a> <span class=\"co1\">// put in a queue that maintains ordering</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a><span class=\"br0\">(</span>queue.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> <span class=\"br0\">(</span>nodeLeft, nodeRight<span class=\"br0\">)</span>  <span class=\"sy0\">=</span> <span class=\"br0\">[</span>queue.<span class=\"me1\">pollFirst</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, queue.<span class=\"me1\">pollFirst</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>        queue <span class=\"sy0\">&lt;&lt;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Node<span class=\"br0\">(</span><br/>            freq:   nodeLeft.<span class=\"me1\">freq</span>   <span class=\"sy0\">+</span> nodeRight.<span class=\"me1\">freq</span>,<br/>            letter: nodeLeft.<span class=\"me1\">letter</span> <span class=\"sy0\">+</span> nodeRight.<span class=\"me1\">letter</span>,<br/>            left: nodeLeft, right: nodeRight<br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> correspondance<span class=\"br0\">(</span>queue.<span class=\"me1\">pollFirst</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> encode<span class=\"br0\">(</span>CharSequence msg, <a href=\"http://www.google.de/search?as_q=Map&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Map</span></a> codeTable<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    msg.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> codeTable<span class=\"br0\">[</span>it<span class=\"br0\">]</span> <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20join\"><span class=\"kw5\">join</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> decode<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> codedMsg, <a href=\"http://www.google.de/search?as_q=Map&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Map</span></a> codeTable, <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> decoded <span class=\"sy0\">=</span> <span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> pair <span class=\"sy0\">=</span> codeTable.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20find\"><span class=\"kw5\">find</span></a> <span class=\"br0\">{</span> k, v <span class=\"sy0\">-&gt;</span> codedMsg.<span class=\"me1\">startsWith</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    pair <span class=\"sy0\">?</span> pair.<span class=\"me1\">key</span> <span class=\"sy0\">+</span> decode<span class=\"br0\">(</span>codedMsg.<span class=\"me1\">substring</span><span class=\"br0\">(</span>pair.<span class=\"me1\">value</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, codeTable<span class=\"br0\">)</span><br/>        \u00a0: decoded   <br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 37, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Arrow<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a><br/>\u00a0<br/><span class=\"kw1\">data</span> HTree a<br/>  <span class=\"sy0\">=</span> Leaf a<br/>  <span class=\"sy0\">|</span> Branch <span class=\"br0\">(</span>HTree a<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>HTree a<span class=\"br0\">)</span><br/>  <span class=\"kw1\">deriving</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Show\"><span class=\"kw4\">Show</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Eq\"><span class=\"kw4\">Eq</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>test <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>test <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span>\\<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\'</span>'</span>\u00a0: a\u00a0: <span class=\"st0\">\"<span class=\"es0\">\\'</span>\u00a0: \"</span> <span class=\"sy0\">++</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span><br/>  serialize <span class=\"sy0\">.</span> huffmanTree <span class=\"sy0\">.</span> freq<br/>\u00a0<br/>serialize <span class=\"sy0\">::</span> HTree a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>serialize <span class=\"br0\">(</span>Branch l r<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"br0\">(</span>second <span class=\"br0\">(</span><span class=\"st0\">'0'</span>\u00a0:<span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> serialize l<span class=\"br0\">)</span> <span class=\"sy0\">++</span> <span class=\"br0\">(</span>second <span class=\"br0\">(</span><span class=\"st0\">'1'</span>\u00a0:<span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> serialize r<span class=\"br0\">)</span><br/>serialize <span class=\"br0\">(</span>Leaf x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/>huffmanTree<br/>  <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> w<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> w<span class=\"br0\">)</span><br/>  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>w<span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> HTree a<br/>huffmanTree <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> <span class=\"sy0\">.</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:until\"><span class=\"kw3\">until</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:null\"><span class=\"kw3\">null</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a><span class=\"br0\">)</span> hstep <span class=\"sy0\">.</span> sortBy <span class=\"br0\">(</span>comparing <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span>second Leaf <span class=\"sy0\">&lt;$&gt;</span><span class=\"br0\">)</span><br/>\u00a0<br/>hstep<br/>  <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a<span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> a<span class=\"br0\">)</span><br/>  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> HTree b<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> HTree b<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>hstep <span class=\"br0\">(</span><span class=\"br0\">(</span>w1<span class=\"sy0\">,</span> t1<span class=\"br0\">)</span>:<span class=\"br0\">(</span>w2<span class=\"sy0\">,</span> t2<span class=\"br0\">)</span>:wts<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  insertBy <span class=\"br0\">(</span>comparing <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst\"><span class=\"kw3\">fst</span></a><span class=\"br0\">)</span> <span class=\"br0\">(</span>w1 <span class=\"sy0\">+</span> w2<span class=\"sy0\">,</span> Branch t1 t2<span class=\"br0\">)</span> wts<br/>\u00a0<br/>freq<br/>  <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Ord\"><span class=\"kw4\">Ord</span></a> a<br/>  <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>freq <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"sy0\">&amp;&amp;</span>&amp; <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a><span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> group <span class=\"sy0\">.</span> sort</pre>"}, {"lang": "Icon and Unicon", "loc": 60, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">record</span> huffnode<span class=\"br0\">(</span>l<span class=\"sy1\">,</span>r<span class=\"sy1\">,</span>n<span class=\"sy1\">,</span>c<span class=\"br0\">)</span>                        <span class=\"co1\"># internal and leaf nodes </span><br/><span class=\"kw1\">record</span> huffcode<span class=\"br0\">(</span>c<span class=\"sy1\">,</span>n<span class=\"sy1\">,</span>b<span class=\"sy1\">,</span>i<span class=\"br0\">)</span>                        <span class=\"co1\"># encoding table char, freq, bitstring, bits (int)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>s <span class=\"sy1\">:=</span> <span class=\"st0\">\"this is an example for huffman encoding\"</span>  <br/>\u00a0<br/>Count <span class=\"sy1\">:=</span> huffcount<span class=\"br0\">(</span>s<span class=\"br0\">)</span>                           <span class=\"co1\"># frequency count</span><br/>Tree <span class=\"sy1\">:=</span> huffTree<span class=\"br0\">(</span>Count<span class=\"br0\">)</span>                         <span class=\"co1\"># heap and tree</span><br/>\u00a0<br/>Code <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>                                      <span class=\"co1\"># extract encodings</span><br/>CodeT <span class=\"sy1\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">every</span> x <span class=\"sy1\">:=</span> huffBits<span class=\"br0\">(</span>Tree<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <br/>   <span class=\"kw4\">put</span><span class=\"br0\">(</span> Code<span class=\"sy1\">,</span> CodeT<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> huffcode<span class=\"br0\">(</span> c <span class=\"sy1\">:=</span> x<span class=\"br0\">[</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> Count<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">n</span><span class=\"sy1\">,</span> b <span class=\"sy1\">:=</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span><span class=\"st0\">\"2r\"</span><span class=\"sy1\">||</span>b<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>Code <span class=\"sy1\">:=</span> <span class=\"kw4\">sortf</span><span class=\"br0\">(</span> Code<span class=\"sy1\">,</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span>                        <span class=\"co1\"># show table in char order</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Input String\u00a0: \"</span><span class=\"sy1\">,</span><span class=\"kw4\">image</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span>               <br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"st0\">\"char\"</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"st0\">\"freq\"</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" encoding\"</span> <span class=\"br0\">)</span> <br/><span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span><span class=\"kw4\">image</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>Code<span class=\"br0\">)</span><span class=\"sy1\">.</span><span class=\"me1\">c</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw4\">right</span><span class=\"br0\">(</span>x<span class=\"sy1\">.</span><span class=\"me1\">n</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> x<span class=\"sy1\">.</span><span class=\"me1\">b</span> <span class=\"br0\">)</span> <br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> huffBits<span class=\"br0\">(</span>N<span class=\"br0\">)</span>                           <span class=\"co1\"># generates huffman bitcodes with trailing character</span><br/><span class=\"kw1\">if</span> <span class=\"sy1\">\\</span>N<span class=\"sy1\">.</span><span class=\"me1\">c</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> N<span class=\"sy1\">.</span><span class=\"me1\">c</span>                         <span class=\"co1\"># . append leaf char code</span><br/><span class=\"kw1\">suspend</span> <span class=\"st0\">\"0\"</span> <span class=\"sy1\">||</span> huffBits<span class=\"br0\">(</span>N<span class=\"sy1\">.</span><span class=\"me1\">l</span><span class=\"br0\">)</span>                    <span class=\"co1\"># . left</span><br/><span class=\"kw1\">suspend</span> <span class=\"st0\">\"1\"</span> <span class=\"sy1\">||</span> huffBits<span class=\"br0\">(</span>N<span class=\"sy1\">.</span><span class=\"me1\">r</span><span class=\"br0\">)</span>                    <span class=\"co1\"># . right</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">procedure</span> huffTree<span class=\"br0\">(</span><span class=\"kw7\">T</span><span class=\"br0\">)</span>                           <span class=\"co1\"># two queue huffman tree method</span><br/><span class=\"kw2\">local</span> Q1<span class=\"sy1\">,</span>Q2<span class=\"sy1\">,</span>x<span class=\"sy1\">,</span>n1<span class=\"sy1\">,</span>n2<br/>\u00a0<br/>Q1 <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>                                        <span class=\"co1\"># queue of characters and weights</span><br/><span class=\"kw1\">every</span> x <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span><span class=\"kw7\">T</span> <span class=\"kw1\">do</span>                                <span class=\"co1\"># ensure all are huffnodes</span><br/>   <span class=\"kw1\">if</span> <span class=\"kw4\">type</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"st0\">\"huffnode\"</span> <span class=\"kw1\">then</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>Q1<span class=\"sy1\">,</span>x<span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"kw4\">runerr</span><span class=\"br0\">(</span><span class=\"nu0\">205</span><span class=\"sy1\">,</span>x<span class=\"br0\">)</span><br/>Q1 <span class=\"sy1\">:=</span> <span class=\"kw4\">sortf</span><span class=\"br0\">(</span>Q1<span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>                               <span class=\"co1\"># sort by weight ( 3 means by .n  )</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"sy1\">*</span>Q1 <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> Q2 <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>   <br/><span class=\"kw1\">while</span> <span class=\"sy1\">*</span>Q1<span class=\"sy1\">+*\\</span>Q2 <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span>                         <span class=\"co1\"># While there is more than one node ...</span><br/>\u00a0<br/>   n1 <span class=\"sy1\">:=</span> <span class=\"kw1\">if</span> Q1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">&amp;</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> Q1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">n</span> <span class=\"sy1\">&lt;=</span> Q2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">n</span> <span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw1\">not</span> Q2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw4\">get</span><span class=\"br0\">(</span>Q1<span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"kw4\">get</span><span class=\"br0\">(</span>Q2<span class=\"br0\">)</span>  <span class=\"co1\"># lowest weight from Q1 or Q2</span><br/>   n2 <span class=\"sy1\">:=</span> <span class=\"kw1\">if</span> Q1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">&amp;</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> Q1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">n</span> <span class=\"sy1\">&lt;=</span> Q2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">n</span> <span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw1\">not</span> Q2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw4\">get</span><span class=\"br0\">(</span>Q1<span class=\"br0\">)</span> <span class=\"kw1\">else</span> <span class=\"kw4\">get</span><span class=\"br0\">(</span>Q2<span class=\"br0\">)</span>  <span class=\"co1\"># lowest weight from Q1 or Q2</span><br/>\u00a0<br/>   <span class=\"kw4\">put</span><span class=\"br0\">(</span> Q2<span class=\"sy1\">,</span> huffnode<span class=\"br0\">(</span> n1<span class=\"sy1\">,</span> n2<span class=\"sy1\">,</span> n1<span class=\"sy1\">.</span><span class=\"me1\">n</span> <span class=\"sy1\">+</span> n2<span class=\"sy1\">.</span><span class=\"me1\">n</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>   <span class=\"co1\"># new weighted node to end of Q2</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"sy1\">\\</span>Q2 <span class=\"sy1\">|</span> Q1<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>                            <span class=\"co1\"># return the root node</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> huffcount<span class=\"br0\">(</span>s<span class=\"br0\">)</span>                          <span class=\"co1\"># return characters and frequencies in a table of huffnodes by char</span><br/><span class=\"kw2\">local</span> c<span class=\"sy1\">,</span><span class=\"kw7\">T</span><br/>\u00a0<br/><span class=\"kw7\">T</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">every</span> c <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>s <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>   <span class=\"sy1\">/</span><span class=\"kw7\">T</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> huffnode<span class=\"br0\">(</span><span class=\"sy1\">,,</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span>c<span class=\"br0\">)</span> <br/>   <span class=\"kw7\">T</span><span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">n</span> <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span>\t  <br/>   <span class=\"br0\">}</span><br/><span class=\"kw1\">return</span> <span class=\"kw7\">T</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 14, "block": "<pre class=\"j highlighted_source\">hc=: <span class=\"nu0\">4</span>\u00a0: <span class=\"nu0\">0</span>  <br/> <span class=\"kw1\">if.</span> <span class=\"nu0\">1</span>=#<span class=\"kw2\">x</span> <span class=\"kw1\">do.</span> <span class=\"kw2\">y</span><br/> <span class=\"kw1\">else.</span> <span class=\"sy0\">((</span>i{<span class=\"kw2\">x</span><span class=\"sy0\">)</span>,+/j{<span class=\"kw2\">x</span><span class=\"sy0\">)</span> hc <span class=\"sy0\">(</span>i{<span class=\"kw2\">y</span><span class=\"sy0\">)</span>,&lt;j{<span class=\"kw2\">y</span> [ i=. <span class=\"sy0\">(</span>i.#<span class=\"kw2\">x</span><span class=\"sy0\">)</span> -. j=. <span class=\"nu0\">2</span>{./:<span class=\"kw2\">x</span> <span class=\"kw1\">end.</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>hcodes=: <span class=\"nu0\">4</span>\u00a0: <span class=\"nu0\">0</span><br/> <span class=\"kw1\">assert.</span> <span class=\"kw2\">x</span> -:&amp;$ <span class=\"kw2\">y</span>           <span class=\"co1\">NB. weights and words have same shape</span><br/> <span class=\"kw1\">assert.</span> <span class=\"sy0\">(</span><span class=\"nu0\">0</span>&lt;:<span class=\"kw2\">x</span><span class=\"sy0\">)</span> *. <span class=\"nu0\">1</span>=#$<span class=\"kw2\">x</span>    <span class=\"co1\">NB. weights are non-negative</span><br/> <span class=\"kw1\">assert.</span> <span class=\"nu0\">1</span> &gt;: L.<span class=\"kw2\">y</span>           <span class=\"co1\">NB. words are boxed not more than once</span><br/> w=. ,&amp;.&gt; <span class=\"kw2\">y</span>                 <span class=\"co1\">NB. standardized words</span><br/> <span class=\"kw1\">assert.</span> w -: ~.w           <span class=\"co1\">NB. words are unique</span><br/> t=. <span class=\"nu0\">0</span> {:: <span class=\"kw2\">x</span> hc w           <span class=\"co1\">NB. minimal weight binary tree</span><br/> <span class=\"sy0\">((</span>&lt; S: <span class=\"nu0\">0</span> t<span class=\"sy0\">)</span> i. w<span class=\"sy0\">)</span> { &lt;@<span class=\"sy0\">(</span><span class=\"nu0\">1</span>&amp;=<span class=\"sy0\">)</span>@; S: <span class=\"nu0\">1</span> {:: t<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 95, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">abstract</span> <span class=\"kw1\">class</span> HuffmanTree <span class=\"kw1\">implements</span> Comparable<span class=\"sy0\">&lt;</span>HuffmanTree<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> frequency<span class=\"sy0\">;</span> <span class=\"co1\">// the frequency of this tree</span><br/>    <span class=\"kw1\">public</span> HuffmanTree<span class=\"br0\">(</span><span class=\"kw4\">int</span> freq<span class=\"br0\">)</span> <span class=\"br0\">{</span> frequency <span class=\"sy0\">=</span> freq<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// compares on the frequency</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> compareTo<span class=\"br0\">(</span>HuffmanTree tree<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> frequency <span class=\"sy0\">-</span> tree.<span class=\"me1\">frequency</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> HuffmanLeaf <span class=\"kw1\">extends</span> HuffmanTree <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> <span class=\"kw4\">char</span> value<span class=\"sy0\">;</span> <span class=\"co1\">// the character this leaf represents</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> HuffmanLeaf<span class=\"br0\">(</span><span class=\"kw4\">int</span> freq, <span class=\"kw4\">char</span> val<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">super</span><span class=\"br0\">(</span>freq<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        value <span class=\"sy0\">=</span> val<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> HuffmanNode <span class=\"kw1\">extends</span> HuffmanTree <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> HuffmanTree left, right<span class=\"sy0\">;</span> <span class=\"co1\">// subtrees</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> HuffmanNode<span class=\"br0\">(</span>HuffmanTree l, HuffmanTree r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">super</span><span class=\"br0\">(</span>l.<span class=\"me1\">frequency</span> <span class=\"sy0\">+</span> r.<span class=\"me1\">frequency</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        left <span class=\"sy0\">=</span> l<span class=\"sy0\">;</span><br/>        right <span class=\"sy0\">=</span> r<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> HuffmanCode <span class=\"br0\">{</span><br/>    <span class=\"co1\">// input is an array of frequencies, indexed by character code</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> HuffmanTree buildTree<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> charFreqs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        PriorityQueue<span class=\"sy0\">&lt;</span>HuffmanTree<span class=\"sy0\">&gt;</span> trees <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> PriorityQueue<span class=\"sy0\">&lt;</span>HuffmanTree<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// initially, we have a forest of leaves</span><br/>        <span class=\"co1\">// one for each non-empty character</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> charFreqs.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>charFreqs<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                trees.<span class=\"me1\">offer</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> HuffmanLeaf<span class=\"br0\">(</span>charFreqs<span class=\"br0\">[</span>i<span class=\"br0\">]</span>, <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">assert</span> trees.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// loop until there is only one tree left</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>trees.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co1\">// two trees with least frequency</span><br/>            HuffmanTree a <span class=\"sy0\">=</span> trees.<span class=\"me1\">poll</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            HuffmanTree b <span class=\"sy0\">=</span> trees.<span class=\"me1\">poll</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// put into new node and re-insert into queue</span><br/>            trees.<span class=\"me1\">offer</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> HuffmanNode<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> trees.<span class=\"me1\">poll</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> printCodes<span class=\"br0\">(</span>HuffmanTree tree, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astringbuffer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">StringBuffer</span></a> prefix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">assert</span> tree <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tree <span class=\"kw1\">instanceof</span> HuffmanLeaf<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            HuffmanLeaf leaf <span class=\"sy0\">=</span> <span class=\"br0\">(</span>HuffmanLeaf<span class=\"br0\">)</span>tree<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// print out character, frequency, and code for this leaf (which is just the prefix)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>leaf.<span class=\"me1\">value</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">+</span> leaf.<span class=\"me1\">frequency</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">+</span> prefix<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tree <span class=\"kw1\">instanceof</span> HuffmanNode<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            HuffmanNode node <span class=\"sy0\">=</span> <span class=\"br0\">(</span>HuffmanNode<span class=\"br0\">)</span>tree<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// traverse left</span><br/>            prefix.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            printCodes<span class=\"br0\">(</span>node.<span class=\"me1\">left</span>, prefix<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            prefix.<span class=\"me1\">deleteCharAt</span><span class=\"br0\">(</span>prefix.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"co1\">// traverse right</span><br/>            prefix.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">'1'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            printCodes<span class=\"br0\">(</span>node.<span class=\"me1\">right</span>, prefix<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            prefix.<span class=\"me1\">deleteCharAt</span><span class=\"br0\">(</span>prefix.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> test <span class=\"sy0\">=</span> <span class=\"st0\">\"this is an example for huffman encoding\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// we will assume that all our characters will have</span><br/>        <span class=\"co1\">// code less than 256, for simplicity</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> charFreqs <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"nu0\">256</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">// read each character and record the frequencies</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> c <span class=\"sy0\">:</span> test.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            charFreqs<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\u00a0<br/>        <span class=\"co1\">// build tree</span><br/>        HuffmanTree tree <span class=\"sy0\">=</span> buildTree<span class=\"br0\">(</span>charFreqs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// print out results</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"SYMBOL<span class=\"es0\">\\t</span>WEIGHT<span class=\"es0\">\\t</span>HUFFMAN CODE\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        printCodes<span class=\"br0\">(</span>tree, <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astringbuffer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">StringBuffer</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 63, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> HuffmanEncoding<span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">str</span> <span class=\"sy0\">=</span> str<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> count_chars <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> str.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">in</span> count_chars<span class=\"br0\">)</span> <br/>            count_chars<span class=\"br0\">[</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">++;</span><br/>        <span class=\"kw1\">else</span> <br/>            count_chars<span class=\"br0\">[</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> pq <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> BinaryHeap<span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">return</span> x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> ch <span class=\"kw1\">in</span> count_chars<span class=\"br0\">)</span> <br/>        pq.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"br0\">[</span>count_chars<span class=\"br0\">[</span>ch<span class=\"br0\">]</span><span class=\"sy0\">,</span> ch<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    while <span class=\"br0\">(</span>pq.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> pair1 <span class=\"sy0\">=</span> pq.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> pair2 <span class=\"sy0\">=</span> pq.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        pq.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"br0\">[</span>pair1<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>pair2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>pair1<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> pair2<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> tree <span class=\"sy0\">=</span> pq.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">encoding</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>._generate_encoding<span class=\"br0\">(</span>tree<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">encoded_string</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"kw1\">this</span>.<span class=\"me1\">str</span>.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">encoded_string</span> <span class=\"sy0\">+=</span> <span class=\"kw1\">this</span>.<span class=\"me1\">encoding</span><span class=\"br0\">[</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>HuffmanEncoding.<span class=\"kw1\">prototype</span>._generate_encoding <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>ary<span class=\"sy0\">,</span> prefix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ary <span class=\"kw1\">instanceof</span> <span class=\"kw4\">Array</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>._generate_encoding<span class=\"br0\">(</span>ary<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> prefix <span class=\"sy0\">+</span> <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span>._generate_encoding<span class=\"br0\">(</span>ary<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> prefix <span class=\"sy0\">+</span> <span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span>.<span class=\"me1\">encoding</span><span class=\"br0\">[</span>ary<span class=\"br0\">]</span> <span class=\"sy0\">=</span> prefix<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>HuffmanEncoding.<span class=\"kw1\">prototype</span>.<span class=\"me1\">inspect_encoding</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> ch <span class=\"kw1\">in</span> <span class=\"kw1\">this</span>.<span class=\"me1\">encoding</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"'\"</span> <span class=\"sy0\">+</span> ch <span class=\"sy0\">+</span> <span class=\"st0\">\"': \"</span> <span class=\"sy0\">+</span> <span class=\"kw1\">this</span>.<span class=\"me1\">encoding</span><span class=\"br0\">[</span>ch<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>HuffmanEncoding.<span class=\"kw1\">prototype</span>.<span class=\"me1\">decode</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>encoded<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> rev_enc <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> ch <span class=\"kw1\">in</span> <span class=\"kw1\">this</span>.<span class=\"me1\">encoding</span><span class=\"br0\">)</span> <br/>        rev_enc<span class=\"br0\">[</span><span class=\"kw1\">this</span>.<span class=\"me1\">encoding</span><span class=\"br0\">[</span>ch<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> ch<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> decoded <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> pos <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    while <span class=\"br0\">(</span>pos <span class=\"sy0\">&lt;</span> encoded.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> key <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>        while <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>key <span class=\"kw1\">in</span> rev_enc<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            key <span class=\"sy0\">+=</span> encoded<span class=\"br0\">[</span>pos<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            pos<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>        decoded <span class=\"sy0\">+=</span> rev_enc<span class=\"br0\">[</span>key<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> decoded<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 54, "block": "<pre class=\"text highlighted_source\">import java.util.*<br/>\u00a0<br/>abstract class HuffmanTree(var freq: Int)\u00a0: Comparable&lt;HuffmanTree&gt; {<br/>    override fun compareTo(other: HuffmanTree) = freq - other.freq<br/>}<br/>\u00a0<br/>class HuffmanLeaf(freq: Int, var value: Char)\u00a0: HuffmanTree(freq)<br/>\u00a0<br/>class HuffmanNode(var left: HuffmanTree, var right: HuffmanTree)\u00a0: HuffmanTree(left.freq + right.freq)<br/>\u00a0<br/>fun buildTree(charFreqs: IntArray)\u00a0: HuffmanTree {<br/>    val trees = PriorityQueue&lt;HuffmanTree&gt;()<br/>\u00a0<br/>    charFreqs.forEachIndexed { index, freq -&gt;<br/>        if(freq &gt; 0) trees.offer(HuffmanLeaf(freq, index.toChar()))<br/>    }<br/>\u00a0<br/>    assert(trees.size &gt; 0)<br/>    while (trees.size &gt; 1) {<br/>        val a = trees.poll()<br/>        val b = trees.poll()<br/>        trees.offer(HuffmanNode(a, b))<br/>    }<br/>\u00a0<br/>    return trees.poll()<br/>}<br/>\u00a0<br/>fun printCodes(tree: HuffmanTree, prefix: StringBuffer) {<br/>    when(tree) {<br/>        is HuffmanLeaf -&gt; println(\"${tree.value}\\t${tree.freq}\\t$prefix\")<br/>        is HuffmanNode -&gt; {<br/>            //traverse left<br/>            prefix.append('0')<br/>            printCodes(tree.left, prefix)<br/>            prefix.deleteCharAt(prefix.lastIndex)<br/>            //traverse right<br/>            prefix.append('1')<br/>            printCodes(tree.right, prefix)<br/>            prefix.deleteCharAt(prefix.lastIndex)<br/>        }<br/>    }<br/>}<br/>\u00a0<br/>fun main(args: Array&lt;String&gt;) {<br/>    val test = \"this is an example for huffman encoding\"<br/>\u00a0<br/>    val maxIndex = test.max()!!.toInt() + 1<br/>    val freqs = IntArray(maxIndex) //256 enough for latin ASCII table, but dynamic size is more fun<br/>    test.forEach { freqs[it.toInt()] += 1 }<br/>\u00a0<br/>    val tree = buildTree(freqs)<br/>    println(\"SYMBOL\\tWEIGHT\\tHUFFMAN CODE\")<br/>    printCodes(tree, StringBuffer())<br/>}</pre>"}, {"lang": "Lua", "loc": 75, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> build_freqtable <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>data<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> freq <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>data <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">local</span> cur <span class=\"sy0\">=</span> <span class=\"kw3\">string.sub</span> <span class=\"br0\">(</span>data<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> count <span class=\"sy0\">=</span> freq <span class=\"br0\">[</span>cur<span class=\"br0\">]</span> <span class=\"kw2\">or</span> <span class=\"nu0\">0</span><br/>    freq <span class=\"br0\">[</span>cur<span class=\"br0\">]</span> <span class=\"sy0\">=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">local</span> nodes <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> w<span class=\"sy0\">,</span> f <span class=\"kw2\">in</span> <span class=\"kw3\">next</span><span class=\"sy0\">,</span> freq <span class=\"kw1\">do</span><br/>    nodes <span class=\"br0\">[</span><span class=\"sy0\">#</span>nodes <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> word <span class=\"sy0\">=</span> w<span class=\"sy0\">,</span> freq <span class=\"sy0\">=</span> f <span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw3\">table.sort</span> <span class=\"br0\">(</span>nodes<span class=\"sy0\">,</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"kw1\">return</span> a<span class=\"sy0\">.</span>freq <span class=\"sy0\">&gt;</span> b<span class=\"sy0\">.</span>freq <span class=\"kw1\">end</span><span class=\"br0\">)</span> <span class=\"co1\">--- reverse order!</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> nodes<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> build_hufftree <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>nodes<span class=\"br0\">)</span><br/>  <span class=\"kw1\">while</span> <span class=\"kw4\">true</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">local</span> n <span class=\"sy0\">=</span> <span class=\"sy0\">#</span>nodes<br/>    <span class=\"kw1\">local</span> left <span class=\"sy0\">=</span> nodes <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>    nodes <span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">nil</span><br/>\u00a0<br/>    <span class=\"kw1\">local</span> right <span class=\"sy0\">=</span> nodes <span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    nodes <span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">nil</span><br/>\u00a0<br/>    <span class=\"kw1\">local</span> new <span class=\"sy0\">=</span> <span class=\"br0\">{</span> freq <span class=\"sy0\">=</span> left<span class=\"sy0\">.</span>freq <span class=\"sy0\">+</span> right<span class=\"sy0\">.</span>freq<span class=\"sy0\">,</span> left <span class=\"sy0\">=</span> left<span class=\"sy0\">,</span> right <span class=\"sy0\">=</span> right <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> new <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\">--- insert new node at correct priority</span><br/>    <span class=\"kw1\">local</span> prio <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">while</span> prio <span class=\"sy0\">&lt;</span> <span class=\"sy0\">#</span>nodes <span class=\"kw2\">and</span> nodes <span class=\"br0\">[</span>prio<span class=\"br0\">]</span><span class=\"sy0\">.</span>freq <span class=\"sy0\">&gt;</span> new<span class=\"sy0\">.</span>freq <span class=\"kw1\">do</span><br/>      prio <span class=\"sy0\">=</span> prio <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">table.insert</span> <span class=\"br0\">(</span>nodes<span class=\"sy0\">,</span> prio<span class=\"sy0\">,</span> new<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">local</span> print_huffcodes <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">local</span> rec_build_huffcodes<br/>  rec_build_huffcodes <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>node<span class=\"sy0\">,</span> bits<span class=\"sy0\">,</span> acc<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> node<span class=\"sy0\">.</span>word <span class=\"sy0\">==</span> <span class=\"kw4\">nil</span> <span class=\"kw1\">then</span><br/>      rec_build_huffcodes <span class=\"br0\">(</span>node<span class=\"sy0\">.</span>left<span class=\"sy0\">,</span>  bits <span class=\"sy0\">..</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span> acc<span class=\"br0\">)</span><br/>      rec_build_huffcodes <span class=\"br0\">(</span>node<span class=\"sy0\">.</span>right<span class=\"sy0\">,</span> bits <span class=\"sy0\">..</span> <span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span> acc<span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> acc<br/>    <span class=\"kw1\">else</span> <span class=\"co1\">--- leaf</span><br/>      acc <span class=\"br0\">[</span><span class=\"sy0\">#</span>acc <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> node<span class=\"sy0\">.</span>freq<span class=\"sy0\">,</span> node<span class=\"sy0\">.</span>word<span class=\"sy0\">,</span> bits <span class=\"br0\">}</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> acc<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  print_huffcodes <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>root<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> codes <span class=\"sy0\">=</span> rec_build_huffcodes <span class=\"br0\">(</span>root<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">table.sort</span> <span class=\"br0\">(</span>codes<span class=\"sy0\">,</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"kw1\">return</span> a <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> b <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span> <span class=\"br0\">(</span><span class=\"st0\">\"frequency<span class=\"es1\">\\t</span>word<span class=\"es1\">\\t</span>huffman code\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>codes <span class=\"kw1\">do</span><br/>      <span class=\"kw3\">print</span> <span class=\"br0\">(</span><span class=\"kw3\">string.format</span> <span class=\"br0\">(</span><span class=\"st0\">\"%9d<span class=\"es1\">\\t</span>\u2018%s\u2019<span class=\"es1\">\\t</span>\u201c%s\u201d\"</span><span class=\"sy0\">,</span> <span class=\"kw3\">table</span><span class=\"sy0\">.</span><span class=\"kw3\">unpack</span> <span class=\"br0\">(</span>codes <span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">local</span> huffcode <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>data<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> nodes <span class=\"sy0\">=</span> build_freqtable <span class=\"br0\">(</span>data<span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> huff <span class=\"sy0\">=</span> build_hufftree <span class=\"br0\">(</span>nodes<span class=\"br0\">)</span><br/>  print_huffcodes <span class=\"br0\">(</span>huff<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">return</span> huffcode <span class=\"st0\">\"this is an example for huffman encoding\"</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "M2000 Interpreter", "loc": 86, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module Huffman {<br/>      comp=lambda (a, b) -&gt;{<br/>            =array(a, 0)&lt;array(b, 0)<br/>      }<br/>      module InsertPQ (a, n, &amp;comp) {<br/>            if len(a)=0 then stack a {data n}\u00a0: exit<br/>            if comp(n, stackitem(a)) then stack a {push n}\u00a0: exit<br/>             stack a {<br/>                  push n<br/>                  t=2: b=len(a)<br/>                   m=b<br/>                   While t&lt;=b {<br/>                         t1=m<br/>                        m=(b+t) div 2<br/>                        if m=0 then  m=t1\u00a0: exit <br/>                        If comp(stackitem(m),n) then t=m+1:  continue<br/>                        b=m-1<br/>                        m=b<br/>                  }<br/>                  if m&gt;1 then shiftback m<br/>            }<br/>      }<br/>\u00a0<br/>      a$=\"this is an example for huffman encoding\"<br/>\u00a0<br/>      inventory queue freq<br/>      For i=1 to len(a$)   {<br/>            b$=mid$(a$,i,1)<br/>            if exist(freq, b$) then Return freq, b$:=freq(b$)+1\u00a0: continue<br/>            append freq, b$:=1<br/>      }<br/>      sort ascending freq<br/>      b=stack<br/>      K=each(freq)<br/>      LenA=len(a$)<br/>      While k {<br/>            InsertPQ b, (Round(Eval(k)/lenA, 4), eval$(k, k^)), &amp;comp<br/>      }<br/>      While len(b)&gt;1 {<br/>            Stack b {<br/>                 Read m1, m2<br/>                 InsertPQ b, (Array(m1)+Array(m2), (m1, m2) ), &amp;comp<br/>            }<br/>      }<br/>      Print  \"Size of stack object (has only Root):\"; len(b)<br/>      Print \"Root probability:\";Round(Array(Stackitem(b)), 3)<br/>      inventory encode, decode<br/>\u00a0<br/>      Traverse(stackitem(b), \"\")<br/>      message$=\"\"<br/>      For i=1 to len(a$)<br/>      message$+=encode$(mid$(a$, i, 1))<br/>      Next i<br/>\u00a0<br/>      Print  message$<br/>      j=1<br/>      check$=\"\"<br/>      For i=1 to len(a$)<br/>            d=each(encode)<br/>            While d {<br/>                  code$=eval$(d)<br/>                  if mid$(message$, j, len(code$))=code$ then {<br/>                        check$+=decode$(code$)<br/>                        Print decode$(code$);\u00a0: j+=len(code$)<br/>                  }<br/>            }<br/>      Next i<br/>      Print<br/>      Print len(message$);\" bits \", if$(a$=check$-&gt;\"Encoding/decoding worked\", \"Encoding/Decoding failed\")<br/>\u00a0<br/>\u00a0<br/>      Sub Traverse(a, a$)<br/>            local b=array(a,1)      <br/>            if type$(b)=\"mArray\"  Else {<br/>                  Print  @(10); quote$(array$(a, 1));\" \"; a$,@(20),array(a)<br/>                  Append decode, a$\u00a0:=array$(a, 1)<br/>                  Append encode, array$(a, 1):=a$<br/>                  Exit Sub   <br/>            }<br/>            traverse(array(b), a$+\"0\")<br/>            traverse(array(b,1), a$+\"1\")<br/>      End Sub<br/>}<br/>Huffman<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 13, "block": "<pre class=\"text highlighted_source\">huffman[s_String]\u00a0:= huffman[Characters[s]];<br/>huffman[l_List]\u00a0:= Module[{merge, structure, rules},<br/>\u00a0<br/>   (*merge front two branches. list is assumed to be sorted*)<br/>   merge[k_]\u00a0:= Replace[k, {{a_, aC_}, {b_, bC_}, rest___}\u00a0:&gt; {{{a, b}, aC + bC}, rest}];<br/>\u00a0<br/>   structure = FixedPoint[<br/>      Composition[merge, SortBy[#, Last] &amp;],<br/>      Tally[l]][[1, 1]];<br/>\u00a0<br/>   rules = (# -&gt; Flatten[Position[structure, #] - 1]) &amp; /@ DeleteDuplicates[l];<br/>\u00a0<br/>   {Flatten[l /. rules], rules}];</pre>"}, {"lang": "Nim", "loc": 75, "block": "<pre class=\"text highlighted_source\">import tables, seqUtils<br/>\u00a0<br/>const sampleString = \"this is an example for huffman encoding\"<br/>\u00a0<br/>type<br/>    # Following range can be changed to produce Huffman codes on arbitrary alphabet (e.g. ternary codes)<br/>    CodeSymbol = range[0..1]<br/>    HuffCode = seq[CodeSymbol]<br/>    Node = ref object<br/>        f: int<br/>        parent: Node<br/>        case isLeaf: bool<br/>        of true:<br/>            c: char<br/>        else:<br/>            childs: array[CodeSymbol, Node]<br/>\u00a0<br/>proc `&lt;`(a: Node, b: Node): bool =<br/>    # For min operator<br/>    a.f &lt; b.f<br/>\u00a0<br/>proc `$`(hc: HuffCode): string =<br/>    result = \"\"<br/>    for symbol in hc:<br/>        result &amp;= $symbol<br/>\u00a0<br/>proc freeChildList(tree: seq[Node], parent: Node = nil): seq[Node] =<br/>    # Constructs a sequence of nodes which can be adopted<br/>    # Optional parent parameter can be set to ensure node will not adopt itself<br/>    result = @[]<br/>    for node in tree:<br/>        if node.parent == nil and node\u00a0!= parent:<br/>            result.add(node)<br/>\u00a0<br/>proc connect(parent: Node, child: Node) =<br/>    # Only call this proc when sure that parent has a free child slot<br/>    child.parent = parent<br/>    parent.f += child.f<br/>    for i in parent.childs.low..parent.childs.high:<br/>        if parent.childs[i] == nil:<br/>            parent.childs[i] = child<br/>            return<br/>\u00a0<br/>proc generateCodes(codes: TableRef[char, HuffCode], currentNode: Node, currentCode: HuffCode = @[]) =<br/>    if currentNode.isLeaf:<br/>        let key = currentNode.c<br/>        codes[key] = currentCode<br/>        return<br/>    for i in currentNode.childs.low..currentNode.childs.high:<br/>        if currentNode.childs[i]\u00a0!= nil:<br/>            let newCode = currentCode &amp; i<br/>            generateCodes(codes, currentNode.childs[i], newCode)<br/>\u00a0<br/>proc buildTree(frequencies: CountTable[char]): seq[Node] =<br/>    result = newSeq[Node](frequencies.len)<br/>    for i in result.low..result.high:<br/>        let key = toSeq(frequencies.keys)[i]<br/>        result[i] = Node(f: frequencies[key], isLeaf: true, c: key)<br/>    while result.freeChildList.len &gt; 1:<br/>        let currentNode = new Node<br/>        result.add(currentNode)<br/>        for c in currentNode.childs:<br/>            currentNode.connect(min(result.freeChildList(currentNode)))<br/>            if result.freeChildList.len &lt;= 1:<br/>                break<br/>\u00a0<br/>var sampleFrequencies = initCountTable[char]()<br/>for c in sampleString:<br/>    sampleFrequencies.inc(c)<br/>let <br/>    tree = buildTree(sampleFrequencies)<br/>    root = tree.freeChildList[0]<br/>var huffCodes = newTable[char, HuffCode]()<br/>generateCodes(huffCodes, root)<br/>echo huffCodes</pre>"}, {"lang": "Oberon-2", "loc": 93, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> HuffmanEncoding;<br/><span class=\"kw1\">IMPORT</span> <br/>  Object<span class=\"sy0\">,</span><br/>  PriorityQueue<span class=\"sy0\">,</span><br/>  Strings<span class=\"sy0\">,</span><br/>  Out;<br/><span class=\"kw1\">TYPE</span><br/>  Leaf <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> LeafDesc;<br/>  LeafDesc <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>    <span class=\"br0\">(</span>Object.<span class=\"me1\">ObjectDesc</span><span class=\"br0\">)</span><br/>    c<span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span>;<br/>  <span class=\"kw1\">END</span>;<br/>\u00a0<br/>  Inner <span class=\"sy0\">=</span> <span class=\"kw1\">POINTER</span> <span class=\"kw1\">TO</span> InnerDesc;<br/>  InnerDesc <span class=\"sy0\">=</span> <span class=\"kw1\">RECORD</span><br/>    <span class=\"br0\">(</span>Object.<span class=\"me1\">ObjectDesc</span><span class=\"br0\">)</span><br/>    left<span class=\"sy0\">,</span>right<span class=\"sy0\">:</span> Object.<span class=\"me1\">Object</span>;<br/>  <span class=\"kw1\">END</span>;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>  str<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">128</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>  i<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>; <br/>  f<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">96</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">INTEGER</span>;<br/>  q<span class=\"sy0\">:</span> PriorityQueue.<span class=\"me1\">Queue</span>;<br/>  a<span class=\"sy0\">:</span> PriorityQueue.<span class=\"me1\">Node</span>;<br/>  b<span class=\"sy0\">:</span> PriorityQueue.<span class=\"me1\">Node</span>;<br/>  c<span class=\"sy0\">:</span> PriorityQueue.<span class=\"me1\">Node</span>;<br/>  h<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">64</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> NewLeaf<span class=\"br0\">(</span>c<span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Leaf;<br/><span class=\"kw1\">VAR</span><br/>  x<span class=\"sy0\">:</span> Leaf;<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;x.<span class=\"me1\">c</span> <span class=\"sy0\">:=</span> c; <span class=\"kw1\">RETURN</span> x<br/><span class=\"kw1\">END</span> NewLeaf;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> NewInner<span class=\"br0\">(</span>l<span class=\"sy0\">,</span>r<span class=\"sy0\">:</span> Object.<span class=\"me1\">Object</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Inner;<br/><span class=\"kw1\">VAR</span><br/>  x<span class=\"sy0\">:</span> Inner;<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>; x.<span class=\"me1\">left</span> <span class=\"sy0\">:=</span> l; x.<span class=\"me1\">right</span> <span class=\"sy0\">:=</span> r; <span class=\"kw1\">RETURN</span> x<br/><span class=\"kw1\">END</span> NewInner;<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Preorder<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Object.<span class=\"me1\">Object</span>; <span class=\"kw1\">VAR</span> x<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">IF</span> n <span class=\"kw1\">IS</span> Leaf <span class=\"kw1\">THEN</span><br/>    Out.<span class=\"me1\">Char</span><span class=\"br0\">(</span>n<span class=\"br0\">(</span>Leaf<span class=\"br0\">)</span>.<span class=\"me1\">c</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">String</span><span class=\"br0\">(</span><span class=\"st0\">\": \"</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">String</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/>  <span class=\"kw1\">ELSE</span><br/>    <span class=\"kw1\">IF</span> n<span class=\"br0\">(</span>Inner<span class=\"br0\">)</span>.<span class=\"me1\">left</span> <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span> <span class=\"kw1\">THEN</span> <br/>      Strings.<span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"sy0\">,</span>x<span class=\"br0\">)</span>;<br/>      Preorder<span class=\"br0\">(</span>n<span class=\"br0\">(</span>Inner<span class=\"br0\">)</span>.<span class=\"me1\">left</span><span class=\"sy0\">,</span>x<span class=\"br0\">)</span>;<br/>      Strings.<span class=\"me1\">Delete</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span><span class=\"br0\">(</span>Strings.<span class=\"me1\">Length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">IF</span> n<span class=\"br0\">(</span>Inner<span class=\"br0\">)</span>.<span class=\"me1\">right</span> <span class=\"sy0\">#</span> <span class=\"kw2\">NIL</span> <span class=\"kw1\">THEN</span> <br/>      Strings.<span class=\"me1\">Append</span><span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"sy0\">,</span>x<span class=\"br0\">)</span>;<br/>      Preorder<span class=\"br0\">(</span>n<span class=\"br0\">(</span>Inner<span class=\"br0\">)</span>.<span class=\"me1\">right</span><span class=\"sy0\">,</span>x<span class=\"br0\">)</span>;<br/>      Strings.<span class=\"me1\">Delete</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span><span class=\"br0\">(</span>Strings.<span class=\"me1\">Length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">END</span><br/>  <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> Preorder;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  str <span class=\"sy0\">:=</span> <span class=\"st0\">\"this is an example for huffman encoding\"</span>;<br/>\u00a0<br/>  <span class=\"coMULTI\">(* Collect letter frecuencies *)</span><br/>  i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>  <span class=\"kw1\">WHILE</span> str<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">#</span> 0X <span class=\"kw1\">DO</span> <span class=\"kw3\">INC</span><span class=\"br0\">(</span>f<span class=\"br0\">[</span><span class=\"kw3\">ORD</span><span class=\"br0\">(</span><span class=\"kw3\">CAP</span><span class=\"br0\">(</span>str<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"kw3\">ORD</span><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">END</span>;<br/>\u00a0<br/>  <span class=\"coMULTI\">(* Create Priority Queue *)</span><br/>  <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>q<span class=\"br0\">)</span>;q.<span class=\"me1\">Clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>  <span class=\"coMULTI\">(* Insert into the queue *)</span><br/>  i <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>  <span class=\"kw1\">WHILE</span> <span class=\"br0\">(</span>i &lt; <span class=\"kw3\">LEN</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>    <span class=\"kw1\">IF</span> f<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">#</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <br/>      q.<span class=\"me1\">Insert</span><span class=\"br0\">(</span>f<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">/</span>Strings.<span class=\"me1\">Length</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"sy0\">,</span>NewLeaf<span class=\"br0\">(</span><span class=\"kw3\">CHR</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"kw3\">ORD</span><span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <span class=\"kw1\">END</span>;<br/>    <span class=\"kw3\">INC</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">END</span>;<br/>\u00a0<br/>  <span class=\"coMULTI\">(* create tree *)</span><br/>  <span class=\"kw1\">WHILE</span> q.<span class=\"me1\">Length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span> <br/>    q.<span class=\"me1\">Remove</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>;q.<span class=\"me1\">Remove</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span>;<br/>    q.<span class=\"me1\">Insert</span><span class=\"br0\">(</span>a.<span class=\"me1\">w</span> <span class=\"sy0\">+</span> b.<span class=\"me1\">w</span><span class=\"sy0\">,</span>NewInner<span class=\"br0\">(</span>a.<span class=\"me1\">d</span><span class=\"sy0\">,</span>b.<span class=\"me1\">d</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">END</span>;<br/>\u00a0<br/>  <span class=\"coMULTI\">(* tree traversal *)</span><br/>  h<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> 0X;q.<span class=\"me1\">Remove</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span>;Preorder<span class=\"br0\">(</span>c.<span class=\"me1\">d</span><span class=\"sy0\">,</span>h<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">END</span> HuffmanEncoding.<br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 150, "block": "<pre class=\"objc highlighted_source\"><span class=\"co1\">#import &lt;Foundation/Foundation.h&gt;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">@interface</span> HuffmanTree <span class=\"sy0\">:</span> <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/\"><span class=\"kw5\">NSObject</span></a> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> freq;<br/><span class=\"br0\">}</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithFreq<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>f;<br/><span class=\"kw1\">@property</span> <span class=\"br0\">(</span>nonatomic, readonly<span class=\"br0\">)</span> <span class=\"kw4\">int</span> freq;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> HuffmanTree<br/><span class=\"kw1\">@synthesize</span> freq; <span class=\"co2\">// the frequency of this tree</span><br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithFreq<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>f <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>self <span class=\"sy0\">=</span> <span class=\"br0\">[</span>super init<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tfreq <span class=\"sy0\">=</span> f;<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> self;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>HuffmanRetain<span class=\"br0\">(</span>CFAllocatorRef allocator, <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>ptr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">(</span>__bridge_retained <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">(</span>__bridge <span class=\"kw4\">id</span><span class=\"br0\">)</span>ptr;<br/><span class=\"br0\">}</span><br/><span class=\"kw4\">void</span> HuffmanRelease<span class=\"br0\">(</span>CFAllocatorRef allocator, <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>ptr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span><span class=\"br0\">(</span>__bridge_transfer <span class=\"kw4\">id</span><span class=\"br0\">)</span>ptr;<br/><span class=\"br0\">}</span><br/>CFComparisonResult HuffmanCompare<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>ptr1, <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>ptr2, <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>unused<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">int</span> f1 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>__bridge HuffmanTree <span class=\"sy0\">*</span><span class=\"br0\">)</span>ptr1<span class=\"br0\">)</span>.freq;<br/>\t<span class=\"kw4\">int</span> f2 <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>__bridge HuffmanTree <span class=\"sy0\">*</span><span class=\"br0\">)</span>ptr2<span class=\"br0\">)</span>.freq;<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>f1 <span class=\"sy0\">==</span> f2<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> kCFCompareEqualTo;<br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f1 &gt; f2<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> kCFCompareGreaterThan;<br/>\t<span class=\"kw1\">else</span><br/>\t\t<span class=\"kw1\">return</span> kCFCompareLessThan;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">@interface</span> HuffmanLeaf <span class=\"sy0\">:</span> HuffmanTree <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> value; <span class=\"co2\">// the character this leaf represents</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@property</span> <span class=\"br0\">(</span>readonly<span class=\"br0\">)</span> <span class=\"kw4\">char</span> value;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithFreq<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>f character<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span>c;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> HuffmanLeaf<br/><span class=\"kw1\">@synthesize</span> value;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithFreq<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>f character<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span>c <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>self <span class=\"sy0\">=</span> <span class=\"br0\">[</span>super initWithFreq<span class=\"sy0\">:</span>f<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tvalue <span class=\"sy0\">=</span> c;<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> self;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">@interface</span> HuffmanNode <span class=\"sy0\">:</span> HuffmanTree <span class=\"br0\">{</span><br/>\tHuffmanTree <span class=\"sy0\">*</span>left, <span class=\"sy0\">*</span>right; <span class=\"co2\">// subtrees</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@property</span> <span class=\"br0\">(</span>readonly<span class=\"br0\">)</span> HuffmanTree <span class=\"sy0\">*</span>left, <span class=\"sy0\">*</span>right;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithLeft<span class=\"sy0\">:</span><span class=\"br0\">(</span>HuffmanTree <span class=\"sy0\">*</span><span class=\"br0\">)</span>l right<span class=\"sy0\">:</span><span class=\"br0\">(</span>HuffmanTree <span class=\"sy0\">*</span><span class=\"br0\">)</span>r;<br/><span class=\"kw1\">@end</span><br/>\u00a0<br/><span class=\"kw1\">@implementation</span> HuffmanNode<br/><span class=\"kw1\">@synthesize</span> left, right;<br/><span class=\"sy0\">-</span><span class=\"br0\">(</span>instancetype<span class=\"br0\">)</span>initWithLeft<span class=\"sy0\">:</span><span class=\"br0\">(</span>HuffmanTree <span class=\"sy0\">*</span><span class=\"br0\">)</span>l right<span class=\"sy0\">:</span><span class=\"br0\">(</span>HuffmanTree <span class=\"sy0\">*</span><span class=\"br0\">)</span>r <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>self <span class=\"sy0\">=</span> <span class=\"br0\">[</span>super initWithFreq<span class=\"sy0\">:</span>l.freq<span class=\"sy0\">+</span>r.freq<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tleft <span class=\"sy0\">=</span> l;<br/>\t\tright <span class=\"sy0\">=</span> r;<br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> self;<br/><span class=\"br0\">}</span><br/><span class=\"kw1\">@end</span><br/>\u00a0<br/>\u00a0<br/>HuffmanTree <span class=\"sy0\">*</span>buildTree<span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSCountedSet_Class/\"><span class=\"kw5\">NSCountedSet</span></a> <span class=\"sy0\">*</span>chars<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>\tCFBinaryHeapCallBacks callBacks <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span>, HuffmanRetain, HuffmanRelease, <span class=\"kw2\">NULL</span>, HuffmanCompare<span class=\"br0\">}</span>;<br/>\tCFBinaryHeapRef trees <span class=\"sy0\">=</span> CFBinaryHeapCreate<span class=\"br0\">(</span><span class=\"kw2\">NULL</span>, <span class=\"nu0\">0</span>, <span class=\"sy0\">&amp;</span>callBacks, <span class=\"kw2\">NULL</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>\t<span class=\"co2\">// initially, we have a forest of leaves</span><br/>\t<span class=\"co2\">// one for each non-empty character</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSNumber_Class/\"><span class=\"kw5\">NSNumber</span></a> <span class=\"sy0\">*</span>ch <span class=\"kw1\">in</span> chars<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw4\">int</span> freq <span class=\"sy0\">=</span> <span class=\"br0\">[</span>chars countForObject<span class=\"sy0\">:</span>ch<span class=\"br0\">]</span>;<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>freq &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\t\t\tCFBinaryHeapAddValue<span class=\"br0\">(</span>trees, <span class=\"br0\">(</span>__bridge <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">[</span>HuffmanLeaf alloc<span class=\"br0\">]</span> initWithFreq<span class=\"sy0\">:</span>freq character<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"br0\">[</span>ch intValue<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tNSCAssert<span class=\"br0\">(</span>CFBinaryHeapGetCount<span class=\"br0\">(</span>trees<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span>, <span class=\"co3\">@</span><span class=\"st0\">\"String must have at least one character\"</span><span class=\"br0\">)</span>;<br/>\t<span class=\"co2\">// loop until there is only one tree left</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>CFBinaryHeapGetCount<span class=\"br0\">(</span>trees<span class=\"br0\">)</span> &gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"co2\">// two trees with least frequency</span><br/>\t\tHuffmanTree <span class=\"sy0\">*</span>a <span class=\"sy0\">=</span> <span class=\"br0\">(</span>__bridge HuffmanTree <span class=\"sy0\">*</span><span class=\"br0\">)</span>CFBinaryHeapGetMinimum<span class=\"br0\">(</span>trees<span class=\"br0\">)</span>;<br/>\t\tCFBinaryHeapRemoveMinimumValue<span class=\"br0\">(</span>trees<span class=\"br0\">)</span>;<br/>\t\tHuffmanTree <span class=\"sy0\">*</span>b <span class=\"sy0\">=</span> <span class=\"br0\">(</span>__bridge HuffmanTree <span class=\"sy0\">*</span><span class=\"br0\">)</span>CFBinaryHeapGetMinimum<span class=\"br0\">(</span>trees<span class=\"br0\">)</span>;<br/>\t\tCFBinaryHeapRemoveMinimumValue<span class=\"br0\">(</span>trees<span class=\"br0\">)</span>;<br/>\u00a0<br/>\t\t<span class=\"co2\">// put into new node and re-insert into queue</span><br/>\t\tCFBinaryHeapAddValue<span class=\"br0\">(</span>trees, <span class=\"br0\">(</span>__bridge <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">[</span>HuffmanNode alloc<span class=\"br0\">]</span> initWithLeft<span class=\"sy0\">:</span>a right<span class=\"sy0\">:</span>b<span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\t<span class=\"br0\">}</span><br/>\tHuffmanTree <span class=\"sy0\">*</span>result <span class=\"sy0\">=</span> <span class=\"br0\">(</span>__bridge HuffmanTree <span class=\"sy0\">*</span><span class=\"br0\">)</span>CFBinaryHeapGetMinimum<span class=\"br0\">(</span>trees<span class=\"br0\">)</span>;<br/>\tCFRelease<span class=\"br0\">(</span>trees<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">return</span> result;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> printCodes<span class=\"br0\">(</span>HuffmanTree <span class=\"sy0\">*</span>tree, <a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableString_Class/\"><span class=\"kw5\">NSMutableString</span></a> <span class=\"sy0\">*</span>prefix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tNSCAssert<span class=\"br0\">(</span>tree <span class=\"sy0\">!=</span> <span class=\"kw2\">nil</span>, <span class=\"co3\">@</span><span class=\"st0\">\"tree must not be nil\"</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>tree isKindOfClass<span class=\"sy0\">:</span><span class=\"br0\">[</span>HuffmanLeaf class<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tHuffmanLeaf <span class=\"sy0\">*</span>leaf <span class=\"sy0\">=</span> <span class=\"br0\">(</span>HuffmanLeaf <span class=\"sy0\">*</span><span class=\"br0\">)</span>tree;<br/>\u00a0<br/>\t\t<span class=\"co2\">// print out character, frequency, and code for this leaf (which is just the prefix)</span><br/>\t\tNSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%c<span class=\"es0\">\\t</span>%d<span class=\"es0\">\\t</span>%@\"</span>, leaf.value, leaf.freq, prefix<span class=\"br0\">)</span>;<br/>\u00a0<br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>tree isKindOfClass<span class=\"sy0\">:</span><span class=\"br0\">[</span>HuffmanNode class<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tHuffmanNode <span class=\"sy0\">*</span>node <span class=\"sy0\">=</span> <span class=\"br0\">(</span>HuffmanNode <span class=\"sy0\">*</span><span class=\"br0\">)</span>tree;<br/>\u00a0<br/>\t\t<span class=\"co2\">// traverse left</span><br/>\t\t<span class=\"br0\">[</span>prefix appendString<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"0\"</span><span class=\"br0\">]</span>;<br/>\t\tprintCodes<span class=\"br0\">(</span>node.left, prefix<span class=\"br0\">)</span>;<br/>\t\t<span class=\"br0\">[</span>prefix deleteCharactersInRange<span class=\"sy0\">:</span>NSMakeRange<span class=\"br0\">(</span><span class=\"br0\">[</span>prefix length<span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>\t\t<span class=\"co2\">// traverse right</span><br/>\t\t<span class=\"br0\">[</span>prefix appendString<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"1\"</span><span class=\"br0\">]</span>;<br/>\t\tprintCodes<span class=\"br0\">(</span>node.right, prefix<span class=\"br0\">)</span>;<br/>\t\t<span class=\"br0\">[</span>prefix deleteCharactersInRange<span class=\"sy0\">:</span>NSMakeRange<span class=\"br0\">(</span><span class=\"br0\">[</span>prefix length<span class=\"br0\">]</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    @autoreleasepool <span class=\"br0\">{</span><br/>\u00a0<br/>\t<a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span>test <span class=\"sy0\">=</span> <span class=\"co3\">@</span><span class=\"st0\">\"this is an example for huffman encoding\"</span>;<br/>\u00a0<br/>\t<span class=\"co2\">// read each character and record the frequencies</span><br/>\t<a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSCountedSet_Class/\"><span class=\"kw5\">NSCountedSet</span></a> <span class=\"sy0\">*</span>chars <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSCountedSet_Class/\"><span class=\"kw5\">NSCountedSet</span></a> alloc<span class=\"br0\">]</span> init<span class=\"br0\">]</span>;<br/>\t<span class=\"kw4\">int</span> n <span class=\"sy0\">=</span> <span class=\"br0\">[</span>test length<span class=\"br0\">]</span>;<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>; i &lt; n; i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">[</span>chars addObject<span class=\"sy0\">:</span>@<span class=\"br0\">(</span><span class=\"br0\">[</span>test characterAtIndex<span class=\"sy0\">:</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>\t<span class=\"co2\">// build tree</span><br/>\tHuffmanTree <span class=\"sy0\">*</span>tree <span class=\"sy0\">=</span> buildTree<span class=\"br0\">(</span>chars<span class=\"br0\">)</span>;<br/>\u00a0<br/>\t<span class=\"co2\">// print out results</span><br/>\tNSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"SYMBOL<span class=\"es0\">\\t</span>WEIGHT<span class=\"es0\">\\t</span>HUFFMAN CODE\"</span><span class=\"br0\">)</span>;<br/>\tprintCodes<span class=\"br0\">(</span>tree, <span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableString_Class/\"><span class=\"kw5\">NSMutableString</span></a> <span class=\"kw4\">string</span><span class=\"br0\">]</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 50, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">type</span> <span class=\"sy0\">'</span>a huffman_tree <span class=\"sy0\">=</span><br/>  <span class=\"sy0\">|</span> Leaf <span class=\"kw1\">of</span> <span class=\"sy0\">'</span>a<br/>  <span class=\"sy0\">|</span> Node <span class=\"kw1\">of</span> <span class=\"sy0\">'</span>a huffman_tree <span class=\"sy0\">*</span> <span class=\"sy0\">'</span>a huffman_tree<br/>\u00a0<br/><span class=\"kw1\">module</span> HSet <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Set.html\"><span class=\"kw2\">Set</span></a><span class=\"sy0\">.</span>Make<br/>  <span class=\"br0\">(</span><span class=\"kw1\">struct</span><br/>     <span class=\"kw1\">type</span> t <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"sy0\">*</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEchar\"><span class=\"kw4\">char</span></a> huffman_tree <span class=\"co1\">(* pair of frequency and the tree *)</span><br/>     <span class=\"kw1\">let</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a> <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare\"><span class=\"kw3\">compare</span></a><br/>       <span class=\"co1\">(* We can use the built-in compare function to order this: it will order<br/>          first by the first element (frequency) and then by the second (the tree),<br/>          the latter of which we don't care about but which helps prevent elements<br/>          from being equal, since Set does not allow duplicate elements *)</span><br/>   <span class=\"kw1\">end</span><span class=\"br0\">)</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> build_tree charFreqs <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> leaves <span class=\"sy0\">=</span> HSet<span class=\"sy0\">.</span>of_list <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>c,f<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>f, Leaf c<span class=\"br0\">)</span><span class=\"br0\">)</span> charFreqs<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> aux trees <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> f1, a <span class=\"sy0\">=</span> HSet<span class=\"sy0\">.</span>min_elt trees <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> trees<span class=\"sy0\">'</span> <span class=\"sy0\">=</span> HSet<span class=\"sy0\">.</span>remove <span class=\"br0\">(</span>f1,a<span class=\"br0\">)</span> trees <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">if</span> HSet<span class=\"sy0\">.</span>is_empty trees<span class=\"sy0\">'</span> <span class=\"kw1\">then</span><br/>      a<br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">let</span> f2, b <span class=\"sy0\">=</span> HSet<span class=\"sy0\">.</span>min_elt trees<span class=\"sy0\">'</span> <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> trees<span class=\"sy0\">''</span> <span class=\"sy0\">=</span> HSet<span class=\"sy0\">.</span>remove <span class=\"br0\">(</span>f2,b<span class=\"br0\">)</span> trees<span class=\"sy0\">'</span> <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">let</span> trees<span class=\"sy0\">'''</span> <span class=\"sy0\">=</span> HSet<span class=\"sy0\">.</span>add <span class=\"br0\">(</span>f1 <span class=\"sy0\">+</span> f2, Node <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><span class=\"br0\">)</span> trees<span class=\"sy0\">''</span> <span class=\"kw1\">in</span><br/>      aux trees<span class=\"sy0\">'''</span><br/>  <span class=\"kw1\">in</span><br/>  aux leaves<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> print_tree code <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> Leaf c <span class=\"sy0\">-&gt;</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%c\\t%s\\n\"</span> c <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>concat <span class=\"st0\">\"\"</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>rev code<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"sy0\">|</span> Node <span class=\"br0\">(</span>l, r<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>      print_tree <span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"sy0\">::</span>code<span class=\"br0\">)</span> l<span class=\"sy0\">;</span><br/>      print_tree <span class=\"br0\">(</span><span class=\"st0\">\"1\"</span><span class=\"sy0\">::</span>code<span class=\"br0\">)</span> r<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> str <span class=\"sy0\">=</span> <span class=\"st0\">\"this is an example for huffman encoding\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> charFreqs <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>create <span class=\"nu0\">42</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><span class=\"kw1\">fun</span> c <span class=\"sy0\">-&gt;</span><br/>      <span class=\"kw1\">let</span> old <span class=\"sy0\">=</span><br/>        <span class=\"kw1\">try</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>find charFreqs c<br/>        <span class=\"kw1\">with</span> Not_found <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">in</span><br/>      <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>replace charFreqs c <span class=\"br0\">(</span>old<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span> str<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> charFreqs <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Hashtbl.html\"><span class=\"kw2\">Hashtbl</span></a><span class=\"sy0\">.</span>fold <span class=\"br0\">(</span><span class=\"kw1\">fun</span> c f acc <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>c,f<span class=\"br0\">)</span><span class=\"sy0\">::</span>acc<span class=\"br0\">)</span> charFreqs <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> tree <span class=\"sy0\">=</span> build_tree charFreqs <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string\"><span class=\"kw3\">print_string</span></a> <span class=\"st0\">\"Symbol\\tHuffman code\\n\"</span><span class=\"sy0\">;</span><br/>  print_tree <span class=\"br0\">[</span><span class=\"br0\">]</span> tree</pre>"}, {"lang": "Perl", "loc": 57, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> 5<span class=\"sy0\">.</span>10<span class=\"sy0\">.</span>0<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"co1\"># produce encode and decode dictionary from a tree</span><br/><span class=\"kw2\">sub</span> walk <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$node</span><span class=\"sy0\">,</span> <span class=\"re0\">$code</span><span class=\"sy0\">,</span> <span class=\"re0\">$h</span><span class=\"sy0\">,</span> <span class=\"re0\">$rev_h</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"re0\">$node</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a> <span class=\"re0\">$c</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> walk<span class=\"br0\">(</span><span class=\"re0\">$c</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$code</span><span class=\"sy0\">.</span><span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"re0\">$h</span><span class=\"sy0\">,</span> <span class=\"re0\">$rev_h</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">else</span>        <span class=\"br0\">{</span> <span class=\"re0\">$h</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"re0\">$c</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$code</span><span class=\"sy0\">;</span> <span class=\"re0\">$rev_h</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"re0\">$code</span><span class=\"br0\">}</span> <span class=\"sy0\">=</span> <span class=\"re0\">$c</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"re0\">$h</span><span class=\"sy0\">,</span> <span class=\"re0\">$rev_h</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># make a tree, and return resulting dictionaries</span><br/><span class=\"kw2\">sub</span> mktree <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">%freq</span><span class=\"sy0\">,</span> <span class=\"re0\">@nodes</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$freq</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">++</span> <span class=\"kw1\">for</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">@nodes</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"sy0\">,</span> <span class=\"re0\">$freq</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%freq</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">do</span> <span class=\"br0\">{</span>\t<span class=\"co1\"># poor man's priority queue</span><br/>\t\t<span class=\"re0\">@nodes</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"br0\">{</span><span class=\"re0\">$a</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$b</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"re0\">@nodes</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/splice.html\"><span class=\"kw3\">splice</span></a> <span class=\"re0\">@nodes</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@nodes</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$y</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">@nodes</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\twalk<span class=\"br0\">(</span><span class=\"re0\">$nodes</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> encode <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"sy0\">,</span> <span class=\"re0\">$dict</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a> <span class=\"re0\">$dict</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span><span class=\"sy0\">//</span><a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a><span class=\"br0\">(</span><span class=\"st0\">\"bad char $_\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"re0\">$str</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> decode <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"sy0\">,</span> <span class=\"re0\">$dict</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$seg</span><span class=\"sy0\">,</span> <span class=\"re0\">@out</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"co1\"># append to current segment until it's in the dictionary</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"re0\">$str</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$seg</span> <span class=\"sy0\">.=</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"re0\">$dict</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span><span class=\"re0\">$seg</span><span class=\"br0\">}</span> <span class=\"sy0\">//</span> <span class=\"kw1\">next</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@out</span><span class=\"sy0\">,</span> <span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"re0\">$seg</span> <span class=\"sy0\">=</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"bad code\"</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/length.html\"><span class=\"kw3\">length</span></a><span class=\"br0\">(</span><span class=\"re0\">$seg</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"re0\">@out</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$txt</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'this is an example for huffman encoding'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$h</span><span class=\"sy0\">,</span> <span class=\"re0\">$rev_h</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> mktree<span class=\"br0\">(</span><span class=\"re0\">$txt</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/keys.html\"><span class=\"kw3\">keys</span></a> <span class=\"re0\">%$h</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"'$_': $h-&gt;{$_}<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$enc</span> <span class=\"sy0\">=</span> encode<span class=\"br0\">(</span><span class=\"re0\">$txt</span><span class=\"sy0\">,</span> <span class=\"re0\">$h</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$enc<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> decode<span class=\"br0\">(</span><span class=\"re0\">$enc</span><span class=\"sy0\">,</span> <span class=\"re0\">$rev_h</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 13, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> huffman <span class=\"br0\">(</span><span class=\"re0\">%frequencies</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@queue</span> <span class=\"sy0\">=</span> <span class=\"re0\">%frequencies</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span><span class=\"br0\">{</span> <span class=\"br0\">[</span><span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"sy0\">,</span> <span class=\"sy0\">.</span><span class=\"me1\">key</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"re0\">@queue</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">given</span> <span class=\"re0\">@queue</span><span class=\"sy0\">.</span><span class=\"kw3\">splice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$freq1</span><span class=\"sy0\">,</span> <span class=\"re0\">$node1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re0\">$freq2</span><span class=\"sy0\">,</span> <span class=\"re0\">$node2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">@queue</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">|</span><span class=\"re0\">@queue</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re0\">$freq1</span> <span class=\"sy0\">+</span> <span class=\"re0\">$freq2</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"re0\">$node1</span><span class=\"sy0\">,</span> <span class=\"re0\">$node2</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    hash gather walk <span class=\"re0\">@queue</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">multi</span> walk <span class=\"br0\">(</span><span class=\"re0\">$node</span><span class=\"sy0\">,</span>            <span class=\"re0\">$prefix</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> take <span class=\"re0\">$node</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$prefix</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">multi</span> walk <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re0\">$node1</span><span class=\"sy0\">,</span> <span class=\"re0\">$node2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$prefix</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> walk <span class=\"re0\">$node1</span><span class=\"sy0\">,</span> <span class=\"re0\">$prefix</span> <span class=\"sy0\">~</span> <span class=\"st_h\">'0'</span><span class=\"sy0\">;</span><br/>                                         walk <span class=\"re0\">$node2</span><span class=\"sy0\">,</span> <span class=\"re0\">$prefix</span> <span class=\"sy0\">~</span> <span class=\"st_h\">'1'</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 98, "block": "<pre class=\"text highlighted_source\">function store_nodes(object key, object data, integer nodes)<br/>    setd({data,key},0,nodes)<br/>    return 1<br/>end function<br/>constant r_store_nodes = routine_id(\"store_nodes\")<br/>\u00a0<br/>function build_freqtable(string data)<br/>integer freq = new_dict(),<br/>        nodes = new_dict()<br/>    for i=1 to length(data) do<br/>        integer di = data[i]<br/>        setd(di,getd(di,freq)+1,freq)<br/>    end for<br/>    traverse_dict(r_store_nodes, nodes, freq)<br/>    destroy_dict(freq)<br/>    return nodes<br/>end function<br/>\u00a0<br/>function build_hufftree(integer nodes)<br/>sequence lkey, rkey, node<br/>integer lfreq, rfreq<br/>    while true do<br/>        lkey = getd_partial_key({0,0},nodes)<br/>        lfreq = lkey[1]<br/>        deld(lkey,nodes)<br/>        rkey = getd_partial_key({0,0},nodes)<br/>        rfreq = rkey[1]<br/>        deld(rkey,nodes)<br/>\u00a0<br/>        node = {lfreq+rfreq,{lkey,rkey}}<br/>\u00a0<br/>        if dict_size(nodes)=0 then exit end if<br/>\u00a0<br/>        setd(node,0,nodes)<br/>    end while<br/>    destroy_dict(nodes)<br/>    return node<br/>end function<br/>\u00a0<br/>procedure build_huffcodes(object node, string bits, integer d)<br/>    {integer freq, object data} = node<br/>    if sequence(data) then<br/>        build_huffcodes(data[1],bits&amp;'0',d)<br/>        build_huffcodes(data[2],bits&amp;'1',d)<br/>    else<br/>        setd(data,{freq,bits},d)<br/>    end if<br/>end procedure<br/>\u00a0<br/>function print_huffcode(integer key, sequence data, integer /*user_data*/)<br/>    printf(1,\"'%c' [%d]\u00a0%s\\n\",key&amp;data)<br/>    return 1<br/>end function<br/>constant r_print_huffcode = routine_id(\"print_huffcode\")<br/>\u00a0<br/>procedure print_huffcodes(integer d)<br/>    traverse_dict(r_print_huffcode, 0, d)<br/>end procedure<br/>\u00a0<br/>function invert_huffcode(integer key, sequence data, integer rd)<br/>    setd(data[2],key,rd)<br/>    return 1<br/>end function<br/>constant r_invert_huffcode = routine_id(\"invert_huffcode\")<br/>\u00a0<br/>procedure main(string data)<br/>    if length(data)&lt;2 then\u00a0?9/0 end if<br/>    integer nodes = build_freqtable(data)<br/>    sequence huff = build_hufftree(nodes)<br/>    integer d = new_dict()<br/>    build_huffcodes(huff, \"\", d)<br/>    print_huffcodes(d)<br/>\u00a0<br/>    string encoded = \"\"<br/>    for i=1 to length(data) do<br/>        encoded &amp;= getd(data[i],d)[2]<br/>    end for<br/>   \u00a0?encoded<br/>\u00a0<br/>    integer rd = new_dict()<br/>    traverse_dict(r_invert_huffcode, rd, d)<br/>    string decoded = \"\"<br/>    integer done = 0<br/>    while done&lt;length(encoded) do<br/>        string key = \"\"<br/>        integer node = 0<br/>        while node=0 do<br/>            done += 1<br/>            key &amp;= encoded[done]<br/>            node = getd_index(key, rd) <br/>        end while<br/>        decoded &amp;= getd_by_index(node,rd)<br/>    end while<br/>   \u00a0?decoded<br/>\u00a0<br/>end procedure<br/>\u00a0<br/>main(\"this is an example for huffman encoding\")</pre>"}, {"lang": "PHP", "loc": 28, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> encode<span class=\"br0\">(</span><span class=\"re0\">$symb2freq</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$heap</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> SplPriorityQueue<span class=\"sy0\">;</span><br/>    <span class=\"re0\">$heap</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setExtractFlags</span><span class=\"br0\">(</span>SplPriorityQueue<span class=\"sy0\">::</span><span class=\"me2\">EXTR_BOTH</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$symb2freq</span> <span class=\"kw1\">as</span> <span class=\"re0\">$sym</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$wt</span><span class=\"br0\">)</span><br/>        <span class=\"re0\">$heap</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">insert</span><span class=\"br0\">(</span><a href=\"http://www.php.net/array\"><span class=\"kw3\">array</span></a><span class=\"br0\">(</span><span class=\"re0\">$sym</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">''</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"re0\">$wt</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$heap</span><span class=\"sy0\">-&gt;</span><a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$lo</span> <span class=\"sy0\">=</span> <span class=\"re0\">$heap</span><span class=\"sy0\">-&gt;</span><a href=\"http://www.php.net/extract\"><span class=\"kw3\">extract</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$hi</span> <span class=\"sy0\">=</span> <span class=\"re0\">$heap</span><span class=\"sy0\">-&gt;</span><a href=\"http://www.php.net/extract\"><span class=\"kw3\">extract</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$lo</span><span class=\"br0\">[</span><span class=\"st_h\">'data'</span><span class=\"br0\">]</span> <span class=\"kw1\">as</span> <span class=\"sy0\">&amp;</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><br/>            <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'0'</span><span class=\"sy0\">.</span><span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$hi</span><span class=\"br0\">[</span><span class=\"st_h\">'data'</span><span class=\"br0\">]</span> <span class=\"kw1\">as</span> <span class=\"sy0\">&amp;</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><br/>            <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'1'</span><span class=\"sy0\">.</span><span class=\"re0\">$x</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$heap</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">insert</span><span class=\"br0\">(</span><span class=\"re0\">$lo</span><span class=\"br0\">[</span><span class=\"st_h\">'data'</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$hi</span><span class=\"br0\">[</span><span class=\"st_h\">'data'</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                      <span class=\"re0\">$lo</span><span class=\"br0\">[</span><span class=\"st_h\">'priority'</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$hi</span><span class=\"br0\">[</span><span class=\"st_h\">'priority'</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$result</span> <span class=\"sy0\">=</span> <span class=\"re0\">$heap</span><span class=\"sy0\">-&gt;</span><a href=\"http://www.php.net/extract\"><span class=\"kw3\">extract</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><span class=\"br0\">[</span><span class=\"st_h\">'data'</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$txt</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'this is an example for huffman encoding'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$symb2freq</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_count_values\"><span class=\"kw3\">array_count_values</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/str_split\"><span class=\"kw3\">str_split</span></a><span class=\"br0\">(</span><span class=\"re0\">$txt</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$huff</span> <span class=\"sy0\">=</span> encode<span class=\"br0\">(</span><span class=\"re0\">$symb2freq</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"Symbol<span class=\"es1\">\\t</span>Weight<span class=\"es1\">\\t</span>Huffman Code<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"re0\">$huff</span> <span class=\"kw1\">as</span> <span class=\"re0\">$sym</span> <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$code</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es4\">$sym</span><span class=\"es1\">\\t</span><span class=\"es4\">$symb2freq</span>[<span class=\"es4\">$sym</span>]<span class=\"es1\">\\t</span><span class=\"es4\">$code</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 18, "block": "<pre class=\"text highlighted_source\">(de prio (Idx)<br/>   (while (cadr Idx) (setq Idx @))<br/>   (car Idx) )<br/>\u00a0<br/>(let (A NIL  P NIL  L NIL)<br/>   (for C (chop \"this is an example for huffman encoding\")<br/>      (accu 'A C 1) )                  # Count characters<br/>   (for X A                            # Build index tree as priority queue<br/>      (idx 'P (cons (cdr X) (car X)) T) )<br/>   (while (or (cadr P) (cddr P))       # Remove entries, insert as nodes<br/>      (let (A (car (idx 'P (prio P) NIL))  B (car (idx 'P (prio P) NIL)))<br/>         (idx 'P (cons (+ (car A) (car B)) A B) T) ) )<br/>   (setq P (car P))<br/>   (recur (P L)                        # Traverse and print<br/>      (if (atom (cdr P))<br/>         (prinl (cdr P)  \" \" L)<br/>         (recurse (cadr P) (cons 0 L))<br/>         (recurse (cddr P) (cons 1 L)) ) ) )</pre>"}, {"lang": "PL/I", "loc": 258, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process source attributes xref or<span class=\"br0\">(</span>!<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> hencode<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*--------------------------------------------------------------------<br/> * 28.12.013 Walter Pachl  translated from REXX<br/> *-------------------------------------------------------------------*/</span><br/> <span class=\"kw1\">Dcl</span> debug <span class=\"kw1\">Bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>k<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> c <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> s <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'this is an example for huffman encoding'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> sc <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> sr <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span>  <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"nu0\">1</span> cocc<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      <span class=\"nu0\">2</span> c  <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      <span class=\"nu0\">2</span> occ <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> cocc_n <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">dcl</span> <span class=\"nu0\">1</span> node<span class=\"sy0\">,</span><br/>      <span class=\"nu0\">2</span> id      <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>         <span class=\"coMULTI\">/* Node id               */</span><br/>      <span class=\"nu0\">2</span> c       <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>               <span class=\"coMULTI\">/* character             */</span><br/>      <span class=\"nu0\">2</span> occ     <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>         <span class=\"coMULTI\">/* number of occurrences */</span><br/>      <span class=\"nu0\">2</span> <span class=\"kw1\">left</span>    <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>         <span class=\"coMULTI\">/* left child            */</span><br/>      <span class=\"nu0\">2</span> rite    <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>         <span class=\"coMULTI\">/* right child           */</span><br/>      <span class=\"nu0\">2</span> father  <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>         <span class=\"coMULTI\">/* father                */</span><br/>      <span class=\"nu0\">2</span> digit   <span class=\"kw1\">Pic</span><span class=\"st0\">'9'</span><span class=\"sy0\">,</span>                <span class=\"coMULTI\">/* digit (0 or 1)        */</span><br/>      <span class=\"nu0\">2</span> term    <span class=\"kw1\">Pic</span><span class=\"st0\">'9'</span><span class=\"sy0\">;</span>                <span class=\"coMULTI\">/* 1=terminal node       */</span><br/> node<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"nu0\">1</span> m<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Like</span> node<span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> m_n <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> father<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">Dcl</span> <span class=\"nu0\">1</span> t<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      <span class=\"nu0\">2</span> <span class=\"kw1\">char</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>      <span class=\"nu0\">2</span> code <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> t_n <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span>               <span class=\"coMULTI\">/* first collect used characters */</span><br/>   c<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>                 <span class=\"coMULTI\">/* and number of occurrences     */</span><br/>   <span class=\"kw1\">Do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> cocc_n<span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> cocc<span class=\"br0\">(</span>j<span class=\"br0\">)</span>.<span class=\"me1\">c</span><span class=\"sy0\">=</span>c <span class=\"kw1\">Then</span> <span class=\"kw1\">Leave</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> j<span class=\"sy0\">&lt;=</span> cocc_n <span class=\"kw1\">Then</span><br/>     cocc<span class=\"br0\">(</span>j<span class=\"br0\">)</span>.<span class=\"me1\">occ</span><span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Else</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>     cocc<span class=\"br0\">(</span>j<span class=\"br0\">)</span>.<span class=\"me1\">c</span><span class=\"sy0\">=</span>c<span class=\"sy0\">;</span><br/>     cocc<span class=\"br0\">(</span>j<span class=\"br0\">)</span>.<span class=\"me1\">occ</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>     cocc_n<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">Do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> cocc_n<span class=\"sy0\">;</span>                     <span class=\"coMULTI\">/* create initial node list   */</span><br/>   node.<span class=\"me1\">id</span><span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   node.<span class=\"me1\">c</span><span class=\"sy0\">=</span>cocc<span class=\"br0\">(</span>j<span class=\"br0\">)</span>.<span class=\"me1\">c</span><span class=\"sy0\">;</span><br/>   node.<span class=\"me1\">occ</span><span class=\"sy0\">=</span>cocc<span class=\"br0\">(</span>j<span class=\"br0\">)</span>.<span class=\"me1\">occ</span><span class=\"sy0\">;</span><br/>   node.<span class=\"me1\">term</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Call</span> add_node<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">If</span> debug <span class=\"kw1\">Then</span><br/>   <span class=\"kw1\">Call</span> show<span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">Do</span> <span class=\"kw1\">While</span><span class=\"br0\">(</span>pairs<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* while there is more than one fatherless node */</span><br/>   <span class=\"kw1\">Call</span> mk_node<span class=\"sy0\">;</span>                       <span class=\"coMULTI\">/* create a father node       */</span><br/>   <span class=\"kw1\">If</span> debug <span class=\"kw1\">Then</span><br/>     <span class=\"kw1\">Call</span> show<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">Call</span> show<span class=\"sy0\">;</span>                            <span class=\"coMULTI\">/* show the node table        */</span><br/>\u00a0<br/> <span class=\"kw1\">Call</span> mk_trans<span class=\"sy0\">;</span>                        <span class=\"coMULTI\">/* create the translate table */</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'The translate table:'</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> t_n<span class=\"sy0\">;</span>                        <span class=\"coMULTI\">/* show it                    */</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>t<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"kw1\">char</span><span class=\"sy0\">,</span><span class=\"st0\">' -&gt; '</span><span class=\"sy0\">,</span>t<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">code</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">Call</span> encode<span class=\"sy0\">;</span>                          <span class=\"coMULTI\">/* encode the string s -&gt; sc  */</span><br/>\u00a0<br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'length(sc)='</span><span class=\"sy0\">,</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>sc<span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"coMULTI\">/* show it                    */</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">By</span> <span class=\"nu0\">70</span> <span class=\"kw1\">To</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span>sc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>sc<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">70</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">Call</span> decode<span class=\"sy0\">;</span>                          <span class=\"coMULTI\">/* decode the string sc -&gt; sr */</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'input\u00a0: '</span><span class=\"sy0\">,</span>s<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">skip</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'result: '</span><span class=\"sy0\">,</span>sr<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">skip</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"sy0\">;</span><br/>\u00a0<br/> add_node<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*--------------------------------------------------------------------<br/> * Insert the node according to increasing occurrences<br/> *-------------------------------------------------------------------*/</span><br/> il<span class=\"sy0\">:</span><br/>   <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> m_n<span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">occ</span><span class=\"sy0\">&gt;=</span>node.<span class=\"me1\">occ</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">Do</span> k<span class=\"sy0\">=</span>m_n <span class=\"kw1\">To</span> i <span class=\"kw1\">By</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>         m<span class=\"br0\">(</span>k<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>m<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">Leave</span> il<span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   m<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>node<span class=\"sy0\">;</span><br/>   m_n<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> show<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*--------------------------------------------------------------------<br/> * Show the contents of the node table<br/> *-------------------------------------------------------------------*/</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'The list of nodes:'</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'id c oc  l  r  f d  t'</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> m_n<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">id</span><span class=\"sy0\">,</span>m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">c</span><span class=\"sy0\">,</span>m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">occ</span><span class=\"sy0\">,</span><br/>            m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"kw1\">left</span><span class=\"sy0\">,</span>m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">rite</span><span class=\"sy0\">,</span>m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">father</span><span class=\"sy0\">,</span>m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">digit</span><span class=\"sy0\">,</span>m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">term</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> mk_node<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*--------------------------------------------------------------------<br/> * construct and store a new intermediate node or the top node<br/> *-------------------------------------------------------------------*/</span><br/> <span class=\"kw1\">Dcl</span> z <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> node<span class=\"sy0\">=</span><span class=\"st0\">''</span><span class=\"sy0\">;</span><br/> node.<span class=\"me1\">id</span><span class=\"sy0\">=</span>m_n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>                <span class=\"coMULTI\">/* the next node id                   */</span><br/> node.<span class=\"me1\">c</span><span class=\"sy0\">=</span><span class=\"st0\">'*'</span><span class=\"sy0\">;</span><br/> ni<span class=\"sy0\">=</span>m_n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/> loop<span class=\"sy0\">:</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> m_n<span class=\"sy0\">;</span>                <span class=\"coMULTI\">/* loop over node lines               */</span><br/>  <span class=\"kw1\">If</span> m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">father</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span>    <span class=\"coMULTI\">/* a fatherless node                  */</span><br/>    z<span class=\"sy0\">=</span>m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">id</span><span class=\"sy0\">;</span>                 <span class=\"coMULTI\">/* its id                             */</span><br/>    <span class=\"kw1\">If</span> node.<span class=\"kw1\">left</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span>    <span class=\"coMULTI\">/* new node has no left child         */</span><br/>       node.<span class=\"kw1\">left</span><span class=\"sy0\">=</span>z<span class=\"sy0\">;</span>            <span class=\"coMULTI\">/* make this the lect child           */</span><br/>       node.<span class=\"me1\">occ</span><span class=\"sy0\">=</span>m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">occ</span><span class=\"sy0\">;</span>      <span class=\"coMULTI\">/* occurrences                        */</span><br/>       m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">father</span><span class=\"sy0\">=</span>ni<span class=\"sy0\">;</span>         <span class=\"coMULTI\">/* store father info                  */</span><br/>       m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">digit</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>           <span class=\"coMULTI\">/* digit 0 to be used                 */</span><br/>       father<span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">=</span>ni<span class=\"sy0\">;</span>           <span class=\"coMULTI\">/* remember z's father (redundant)    */</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">Else</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span>                  <span class=\"coMULTI\">/* New node has already left child    */</span><br/>       node.<span class=\"me1\">rite</span><span class=\"sy0\">=</span>z<span class=\"sy0\">;</span>            <span class=\"coMULTI\">/* make this the right child          */</span><br/>       node.<span class=\"me1\">occ</span><span class=\"sy0\">=</span>node.<span class=\"me1\">occ</span><span class=\"sy0\">+</span>m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">occ</span><span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* add in the occurrences        */</span><br/>       m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">father</span><span class=\"sy0\">=</span>ni<span class=\"sy0\">;</span>         <span class=\"coMULTI\">/* store father info                  */</span><br/>       m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">digit</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>           <span class=\"coMULTI\">/* digit 1 to be used                 */</span><br/>       father<span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"sy0\">=</span>ni<span class=\"sy0\">;</span>           <span class=\"coMULTI\">/* remember z's father (redundant)    */</span><br/>       <span class=\"kw1\">Leave</span> loop<span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> add_node<span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> pairs<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Bit</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*--------------------------------------------------------------------<br/> * Return true if there are at least 2 fatherless nodes<br/> *-------------------------------------------------------------------*/</span><br/> <span class=\"kw1\">Dcl</span> i   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> cnt <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> m_n<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">father</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>     cnt<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> cnt<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"kw1\">Then</span><br/>       <span class=\"kw1\">Return</span><span class=\"br0\">(</span><span class=\"st0\">'1'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> mk_trans<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*--------------------------------------------------------------------<br/> * Compute the codes for all terminal nodes (characters)<br/> * and store the relation char -&gt; code in array t(*)<br/> *-------------------------------------------------------------------*/</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>fi<span class=\"sy0\">,</span>fid<span class=\"sy0\">,</span>fidz<span class=\"sy0\">,</span>node<span class=\"sy0\">,</span>z<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> code <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> m_n<span class=\"sy0\">;</span>     <span class=\"coMULTI\">/* now we loop over all lines representing nodes */</span><br/>   <span class=\"kw1\">If</span> m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">term</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span>   <span class=\"coMULTI\">/* for each terminal node                 */</span><br/>     code<span class=\"sy0\">=</span>m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">digit</span><span class=\"sy0\">;</span>      <span class=\"coMULTI\">/* its digit is the last code digit       */</span><br/>     node<span class=\"sy0\">=</span>m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">id</span><span class=\"sy0\">;</span>         <span class=\"coMULTI\">/* its id                                 */</span><br/>     <span class=\"kw1\">Do</span> fi<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1000</span><span class=\"sy0\">;</span>      <span class=\"coMULTI\">/* actually Forever                       */</span><br/>       fid<span class=\"sy0\">=</span>father<span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"coMULTI\">/* id of father                           */</span><br/>       <span class=\"kw1\">If</span> fid<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span>   <span class=\"coMULTI\">/* father exists                          */</span><br/>         fidz<span class=\"sy0\">=</span>zeile<span class=\"br0\">(</span>fid<span class=\"br0\">)</span><span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* line that contains the father          */</span><br/>         code<span class=\"sy0\">=</span>m<span class=\"br0\">(</span>fidz<span class=\"br0\">)</span>.<span class=\"me1\">digit</span>!!code<span class=\"sy0\">;</span>    <span class=\"coMULTI\">/* prepend the digit           */</span><br/>         node<span class=\"sy0\">=</span>fid<span class=\"sy0\">;</span>         <span class=\"coMULTI\">/* look for next father                   */</span><br/>         <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">Else</span>                <span class=\"coMULTI\">/* no father (we reached the top          */</span><br/>         <span class=\"kw1\">Leave</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span>code<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"coMULTI\">/* more than one character in input      */</span><br/>       code<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>code<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* remove the the top node's 0           */</span><br/>     <span class=\"kw1\">call</span> dbg<span class=\"br0\">(</span>m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">c</span>!!<span class=\"st0\">' -&gt; '</span>!!code<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* character is encoded this way*/</span><br/> ti_loop<span class=\"sy0\">:</span><br/>     <span class=\"kw1\">Do</span> ti<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> t_n<span class=\"sy0\">;</span><br/>       <span class=\"kw1\">If</span> t<span class=\"br0\">(</span>ti<span class=\"br0\">)</span>.<span class=\"me1\">char</span><span class=\"sy0\">&gt;</span>m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">c</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">Do</span> tj<span class=\"sy0\">=</span>t_n <span class=\"kw1\">To</span> ti <span class=\"kw1\">By</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>           t<span class=\"br0\">(</span>tj<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>t<span class=\"br0\">(</span>tj<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>           <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>         <span class=\"kw1\">Leave</span> ti_loop<span class=\"sy0\">;</span><br/>         <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     t<span class=\"br0\">(</span>ti<span class=\"br0\">)</span>.<span class=\"kw1\">char</span><span class=\"sy0\">=</span>m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">c</span><span class=\"sy0\">;</span><br/>     t<span class=\"br0\">(</span>ti<span class=\"br0\">)</span>.<span class=\"me1\">code</span><span class=\"sy0\">=</span>code<span class=\"sy0\">;</span><br/>     t_n<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">Call</span> dbg<span class=\"br0\">(</span>t<span class=\"br0\">(</span>ti<span class=\"br0\">)</span>.<span class=\"kw1\">char</span>!!<span class=\"st0\">' -&gt; '</span>!!t<span class=\"br0\">(</span>ti<span class=\"br0\">)</span>.<span class=\"me1\">code</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> zeile<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>nid<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*--------------------------------------------------------------------<br/> * find and return line number containing node-id<br/> *-------------------------------------------------------------------*/</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>nid<span class=\"sy0\">,</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> m_n<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">If</span> m<span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">id</span><span class=\"sy0\">=</span>nid <span class=\"kw1\">Then</span><br/>     <span class=\"kw1\">Return</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Stop</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> dbg<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>txt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*--------------------------------------------------------------------<br/> * Show text if debug is enabled<br/> *-------------------------------------------------------------------*/</span><br/> <span class=\"kw1\">Dcl</span> txt <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">If</span> debug <span class=\"kw1\">Then</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">Skip</span> <span class=\"kw1\">List</span><span class=\"br0\">(</span>txt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> encode<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*--------------------------------------------------------------------<br/> * encode the string s -&gt; sc<br/> *-------------------------------------------------------------------*/</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   c<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> t_n<span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> c<span class=\"sy0\">=</span>t<span class=\"br0\">(</span>j<span class=\"br0\">)</span>.<span class=\"kw1\">char</span> <span class=\"kw1\">Then</span><br/>       <span class=\"kw1\">Leave</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   sc<span class=\"sy0\">=</span>sc!!t<span class=\"br0\">(</span>j<span class=\"br0\">)</span>.<span class=\"me1\">code</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> decode<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*--------------------------------------------------------------------<br/> * decode the string sc -&gt; sr<br/> *-------------------------------------------------------------------*/</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> <span class=\"kw1\">While</span><span class=\"br0\">(</span>sc<span class=\"sy0\">&gt;</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> t_n<span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> <span class=\"kw1\">substr</span><span class=\"br0\">(</span>sc<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>t<span class=\"br0\">(</span>j<span class=\"br0\">)</span>.<span class=\"me1\">code</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">=</span>t<span class=\"br0\">(</span>j<span class=\"br0\">)</span>.<span class=\"me1\">code</span> <span class=\"kw1\">Then</span><br/>       <span class=\"kw1\">Leave</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   sr<span class=\"sy0\">=</span>sr!!t<span class=\"br0\">(</span>j<span class=\"br0\">)</span>.<span class=\"kw1\">char</span><span class=\"sy0\">;</span><br/>   sc<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>sc<span class=\"sy0\">,</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>t<span class=\"br0\">(</span>j<span class=\"br0\">)</span>.<span class=\"me1\">code</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 63, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Get<span class=\"sy0\">-</span>HuffmanEncodingTable <span class=\"br0\">(</span> <span class=\"re0\">$String</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"co1\">#  Create leaf nodes</span><br/>    <span class=\"re0\">$ID</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"re0\">$Nodes</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"re3\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"re0\">$String</span> <span class=\"sy0\">|</span><br/>        <span class=\"kw1\">Group-Object</span> <span class=\"sy0\">|</span><br/>        <span class=\"kw3\">ForEach</span> <span class=\"br0\">{</span> <span class=\"re0\">$ID</span><span class=\"sy0\">++</span>; <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"br0\">}</span> <span class=\"sy0\">|</span><br/>        <span class=\"kw2\">Select</span>  <span class=\"sy0\">@</span><span class=\"br0\">{</span> Label <span class=\"sy0\">=</span> <span class=\"st0\">'Symbol'</span> \u00a0; Expression <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.Name  <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                <span class=\"sy0\">@</span><span class=\"br0\">{</span> Label <span class=\"sy0\">=</span> <span class=\"st0\">'Count'</span>  \u00a0; Expression <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.Count <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                <span class=\"sy0\">@</span><span class=\"br0\">{</span> Label <span class=\"sy0\">=</span> <span class=\"st0\">'ID'</span>     \u00a0; Expression <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"re0\">$ID</span>      <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                <span class=\"sy0\">@</span><span class=\"br0\">{</span> Label <span class=\"sy0\">=</span> <span class=\"st0\">'Parent'</span> \u00a0; Expression <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>        <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                <span class=\"sy0\">@</span><span class=\"br0\">{</span> Label <span class=\"sy0\">=</span> <span class=\"st0\">'Code'</span>   \u00a0; Expression <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">''</span>       <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">#  Grow stems under leafs</span><br/>    <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$Branch</span> <span class=\"kw3\">in</span> <span class=\"nu0\">2</span>..<span class=\"br0\">(</span><span class=\"re0\">$Nodes</span>.Count<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"co1\">#  Get the two nodes with the lowest count</span><br/>        <span class=\"re0\">$LowNodes</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Nodes</span> <span class=\"sy0\">|</span> <span class=\"kw3\">Where</span> Parent <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span> <span class=\"sy0\">|</span> <span class=\"kw2\">Sort</span> Count <span class=\"sy0\">|</span> <span class=\"kw2\">Select</span> <span class=\"kw5\">-First</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>        <span class=\"co1\">#  Create a new stem node</span><br/>        <span class=\"re0\">$ID</span><span class=\"sy0\">++</span><br/>        <span class=\"re0\">$Nodes</span> <span class=\"sy0\">+=</span> <span class=\"st0\">''</span> <span class=\"sy0\">|</span><br/>            <span class=\"kw2\">Select</span>  <span class=\"sy0\">@</span><span class=\"br0\">{</span> Label <span class=\"sy0\">=</span> <span class=\"st0\">'Symbol'</span> \u00a0; Expression <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">''</span>       <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                    <span class=\"sy0\">@</span><span class=\"br0\">{</span> Label <span class=\"sy0\">=</span> <span class=\"st0\">'Count'</span>  \u00a0; Expression <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"re0\">$LowNodes</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.Count <span class=\"sy0\">+</span> <span class=\"re0\">$LowNodes</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.Count <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                    <span class=\"sy0\">@</span><span class=\"br0\">{</span> Label <span class=\"sy0\">=</span> <span class=\"st0\">'ID'</span>     \u00a0; Expression <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"re0\">$ID</span>      <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                    <span class=\"sy0\">@</span><span class=\"br0\">{</span> Label <span class=\"sy0\">=</span> <span class=\"st0\">'Parent'</span> \u00a0; Expression <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"nu0\">0</span>        <span class=\"br0\">}</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>                    <span class=\"sy0\">@</span><span class=\"br0\">{</span> Label <span class=\"sy0\">=</span> <span class=\"st0\">'Code'</span>   \u00a0; Expression <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">''</span>       <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">#  Put the two nodes in the new stem node</span><br/>        <span class=\"re0\">$LowNodes</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.Parent <span class=\"sy0\">=</span> <span class=\"re0\">$ID</span><br/>        <span class=\"re0\">$LowNodes</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.Parent <span class=\"sy0\">=</span> <span class=\"re0\">$ID</span><br/>\u00a0<br/>        <span class=\"co1\">#  Assign 0 and 1 to the left and right nodes</span><br/>        <span class=\"re0\">$LowNodes</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.Code <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span><br/>        <span class=\"re0\">$LowNodes</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.Code <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">#  Assign coding to nodes</span><br/>    <span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$Node</span> <span class=\"kw3\">in</span> <span class=\"re0\">$Nodes</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"re0\">$Nodes</span>.Count<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>..<span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>        <span class=\"re0\">$Node</span>.Code <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"re0\">$Nodes</span> <span class=\"sy0\">|</span> <span class=\"kw3\">Where</span> ID <span class=\"kw4\">-eq</span> <span class=\"re0\">$Node</span>.Parent <span class=\"br0\">)</span>.Code <span class=\"sy0\">+</span> <span class=\"re0\">$Node</span>.Code<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$EncodingTable</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Nodes</span> <span class=\"sy0\">|</span> <span class=\"kw3\">Where</span> <span class=\"br0\">{</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a>.Symbol <span class=\"br0\">}</span> <span class=\"sy0\">|</span> <span class=\"kw2\">Select</span> Symbol<span class=\"sy0\">,</span> Code <span class=\"sy0\">|</span> <span class=\"kw2\">Sort</span> Symbol<br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$EncodingTable</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#  Get table for given string</span><br/><span class=\"re0\">$String</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"this is an example for huffman encoding\"</span><br/><span class=\"re0\">$HuffmanEncodingTable</span> <span class=\"sy0\">=</span> Get<span class=\"sy0\">-</span>HuffmanEncodingTable <span class=\"re0\">$String</span><br/>\u00a0<br/><span class=\"co1\">#  Display table</span><br/><span class=\"re0\">$HuffmanEncodingTable</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Format-Table</span> <span class=\"kw5\">-AutoSize</span><br/>\u00a0<br/><span class=\"co1\">#  Encode string</span><br/><span class=\"re0\">$EncodedString</span> <span class=\"sy0\">=</span> <span class=\"re0\">$String</span><br/><span class=\"kw3\">ForEach</span> <span class=\"br0\">(</span> <span class=\"re0\">$Node</span> <span class=\"kw3\">in</span> <span class=\"re0\">$HuffmanEncodingTable</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>    <span class=\"re0\">$EncodedString</span> <span class=\"sy0\">=</span> <span class=\"re0\">$EncodedString</span>.Replace<span class=\"br0\">(</span> <span class=\"re0\">$Node</span>.Symbol<span class=\"sy0\">,</span> <span class=\"re0\">$Node</span>.Code <span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"re0\">$EncodedString</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 47, "block": "<pre class=\"prolog highlighted_source\">huffman <span class=\"sy1\">:-</span><br/>\tL <span class=\"sy6\">=</span> <span class=\"st_h\">'this is an example for huffman encoding'</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom_chars</span></a><span class=\"br0\">(</span>L<span class=\"sy4\">,</span> LA<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmsort<span class=\"br0\">(</span>LA<span class=\"sy4\">,</span> LS<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tpackList<span class=\"br0\">(</span>LS<span class=\"sy4\">,</span> PL<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsort<span class=\"br0\">(</span>PL<span class=\"sy4\">,</span> PLS<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tbuild_tree<span class=\"br0\">(</span>PLS<span class=\"sy4\">,</span> A<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tcoding<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> C<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tsort<span class=\"br0\">(</span>C<span class=\"sy4\">,</span> SC<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'Symbol~t   Weight~t~30|Code~n'</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>print_code<span class=\"sy4\">,</span> SC<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>build_tree<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span>V1<span class=\"sy5\">|</span>R1<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>V2<span class=\"sy5\">|</span>R2<span class=\"br0\">]</span><span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> AF<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>\tV <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> V1 <span class=\"sy3\">+</span> V2<span class=\"sy4\">,</span> <br/>\tA <span class=\"sy6\">=</span> <span class=\"br0\">[</span>V<span class=\"sy4\">,</span> <span class=\"br0\">[</span>V1<span class=\"sy5\">|</span>R1<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>V2<span class=\"sy5\">|</span>R2<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   T<span class=\"sy6\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> AF<span class=\"sy6\">=</span>A <span class=\"sy4\">;</span>  sort<span class=\"br0\">(</span><span class=\"br0\">[</span>A<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> NT<span class=\"br0\">)</span><span class=\"sy4\">,</span> build_tree<span class=\"br0\">(</span>NT<span class=\"sy4\">,</span> AF<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>coding<span class=\"br0\">(</span><span class=\"br0\">[</span>_A<span class=\"sy4\">,</span>FG<span class=\"sy4\">,</span>FD<span class=\"br0\">]</span><span class=\"sy4\">,</span> Code<span class=\"sy4\">,</span> CF<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"br0\">(</span>   is_node<span class=\"br0\">(</span>FG<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>  coding<span class=\"br0\">(</span>FG<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy5\">|</span> Code<span class=\"br0\">]</span><span class=\"sy4\">,</span> C1<span class=\"br0\">)</span><br/>\t\t\t <span class=\"sy4\">;</span>  leaf_coding<span class=\"br0\">(</span>FG<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy5\">|</span> Code<span class=\"br0\">]</span><span class=\"sy4\">,</span> C1<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   is_node<span class=\"br0\">(</span>FD<span class=\"br0\">)</span> <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>  coding<span class=\"br0\">(</span>FD<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy5\">|</span> Code<span class=\"br0\">]</span><span class=\"sy4\">,</span> C2<span class=\"br0\">)</span><br/>\t\t\t <span class=\"sy4\">;</span>  leaf_coding<span class=\"br0\">(</span>FD<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy5\">|</span> Code<span class=\"br0\">]</span><span class=\"sy4\">,</span> C2<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tappend<span class=\"br0\">(</span>C1<span class=\"sy4\">,</span> C2<span class=\"sy4\">,</span> CF<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>leaf_coding<span class=\"br0\">(</span><span class=\"br0\">[</span>FG<span class=\"sy4\">,</span>FD<span class=\"br0\">]</span><span class=\"sy4\">,</span> Code<span class=\"sy4\">,</span> CF<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\treverse<span class=\"br0\">(</span>Code<span class=\"sy4\">,</span> CodeR<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tCF <span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>FG<span class=\"sy4\">,</span> FD<span class=\"sy4\">,</span> CodeR<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy4\">.</span><br/>\u00a0<br/>is_node<span class=\"br0\">(</span><span class=\"br0\">[</span>_V<span class=\"sy4\">,</span> _FG<span class=\"sy4\">,</span> _FD<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>print_code<span class=\"br0\">(</span><span class=\"br0\">[</span>N<span class=\"sy4\">,</span> Car<span class=\"sy4\">,</span> Code<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'~w\u00a0:~t~w~t~30|'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Car<span class=\"sy4\">,</span> N<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tforall<span class=\"br0\">(</span>member<span class=\"br0\">(</span>V<span class=\"sy4\">,</span> Code<span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span>V<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">.</span><br/>\u00a0<br/>packList<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>packList<span class=\"br0\">(</span><span class=\"br0\">[</span>X<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span>X<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>packList<span class=\"br0\">(</span><span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Rest<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>XRun<span class=\"sy5\">|</span>Packed<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>    run<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> Rest<span class=\"sy4\">,</span> XRun<span class=\"sy4\">,</span> RRest<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    packList<span class=\"br0\">(</span>RRest<span class=\"sy4\">,</span> Packed<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>run<span class=\"br0\">(</span>V<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span>V<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>run<span class=\"br0\">(</span>V<span class=\"sy4\">,</span> <span class=\"br0\">[</span>V<span class=\"sy5\">|</span>LRest<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>N1<span class=\"sy4\">,</span>V<span class=\"br0\">]</span><span class=\"sy4\">,</span> RRest<span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>    run<span class=\"br0\">(</span>V<span class=\"sy4\">,</span> LRest<span class=\"sy4\">,</span> <span class=\"br0\">[</span>N<span class=\"sy4\">,</span> V<span class=\"br0\">]</span><span class=\"sy4\">,</span> RRest<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    N1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">.</span><br/>run<span class=\"br0\">(</span>V<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Other<span class=\"sy5\">|</span>RRest<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span>V<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Other<span class=\"sy5\">|</span>RRest<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">:-</span><br/>    dif<span class=\"br0\">(</span>V<span class=\"sy4\">,</span> Other<span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 85, "block": "<pre class=\"purebasic highlighted_source\">\u00a0<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>SampleString.s<span class=\"sy0\">=</span><span class=\"st0\">\"this is an example for huffman encoding\"</span><br/>datalen<span class=\"sy0\">=</span><span class=\"kw2\">Len</span><span class=\"br0\">(</span>SampleString<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Structure</span> ztree<br/>  linked.c<br/>  ischar.c<br/>  char.c<br/>  number.l<br/>  <span class=\"kw2\">left</span>.l<br/>  <span class=\"kw2\">right</span>.l<br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> memc.c<span class=\"br0\">(</span>datalen<span class=\"br0\">)</span><br/><span class=\"kw2\">CopyMemory</span><span class=\"br0\">(</span>@SampleString, @memc<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>, datalen <span class=\"sy0\">*</span> <span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>Character<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> tree.ztree<span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> datalen<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>  tree<span class=\"br0\">(</span>memc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>char<span class=\"sy0\">=</span>memc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>  tree<span class=\"br0\">(</span>memc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>number<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  tree<span class=\"br0\">(</span>memc<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>ischar<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw2\">SortStructuredArray</span><span class=\"br0\">(</span>tree<span class=\"br0\">(</span><span class=\"br0\">)</span>,#PB_Sort_Descending,<span class=\"kw2\">OffsetOf</span><span class=\"br0\">(</span>ztree<span class=\"sy0\">\\</span>number<span class=\"br0\">)</span>,#PB_Integer<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">255</span><br/>  <span class=\"kw1\">If</span> tree<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>number<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">ReDim</span> tree<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Break</span><br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/>dimsize<span class=\"sy0\">=</span>ArraySize<span class=\"br0\">(</span>tree<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Repeat</span><br/>  min1.l<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>  min2.l<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> dimsize<br/>    <span class=\"kw1\">If</span> tree<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>linked<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>      <span class=\"kw1\">If</span> tree<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>number<span class=\"sy0\">&lt;</span>min1 <span class=\"kw1\">Or</span> min1<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>        min1<span class=\"sy0\">=</span>tree<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>number<br/>        hmin1<span class=\"sy0\">=</span>i<br/>      <span class=\"kw1\">ElseIf</span> tree<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>number<span class=\"sy0\">&lt;</span>min2 <span class=\"kw1\">Or</span> min2<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>        min2<span class=\"sy0\">=</span>tree<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>number<br/>        hmin2<span class=\"sy0\">=</span>i<br/>      <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/>\u00a0<br/>  <span class=\"kw1\">If</span> min1<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">Or</span> min2<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    <span class=\"kw1\">Break</span><br/>  <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>  dimsize<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">ReDim</span> tree<span class=\"br0\">(</span>dimsize<span class=\"br0\">)</span><br/>  tree<span class=\"br0\">(</span>dimsize<span class=\"br0\">)</span><span class=\"sy0\">\\</span>number<span class=\"sy0\">=</span>tree<span class=\"br0\">(</span>hmin1<span class=\"br0\">)</span><span class=\"sy0\">\\</span>number<span class=\"sy0\">+</span>tree<span class=\"br0\">(</span>hmin2<span class=\"br0\">)</span><span class=\"sy0\">\\</span>number<br/>  tree<span class=\"br0\">(</span>hmin1<span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"kw2\">left</span><span class=\"sy0\">=</span>dimsize<br/>  tree<span class=\"br0\">(</span>hmin2<span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"kw2\">right</span><span class=\"sy0\">=</span>dimsize<br/>  tree<span class=\"br0\">(</span>hmin1<span class=\"br0\">)</span><span class=\"sy0\">\\</span>linked<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>  tree<span class=\"br0\">(</span>hmin2<span class=\"br0\">)</span><span class=\"sy0\">\\</span>linked<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">ForEver</span><br/>\u00a0<br/>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/><span class=\"kw1\">While</span> tree<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>ischar<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>  <span class=\"kw2\">str</span>.s<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>  k<span class=\"sy0\">=</span>i<br/>  ZNEXT:<br/>  <span class=\"kw1\">If</span> tree<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">\\</span>left<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span><br/>    <span class=\"kw2\">str</span><span class=\"sy0\">=</span><span class=\"st0\">\"0\"</span><span class=\"sy0\">+</span><span class=\"kw2\">str</span><br/>    k<span class=\"sy0\">=</span>tree<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"kw2\">left</span><br/>    <span class=\"kw1\">Goto</span> ZNEXT<br/>  <span class=\"kw1\">ElseIf</span> tree<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">\\</span>right<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span><br/>    <span class=\"kw2\">str</span><span class=\"sy0\">=</span><span class=\"st0\">\"1\"</span><span class=\"sy0\">+</span><span class=\"kw2\">str</span><br/>    k<span class=\"sy0\">=</span>tree<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">\\</span><span class=\"kw2\">right</span><br/>    <span class=\"kw1\">Goto</span> ZNEXT<br/>  <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">Chr</span><span class=\"br0\">(</span>tree<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">\\</span>char<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"sy0\">+</span><span class=\"kw2\">str</span><span class=\"br0\">)</span><br/>  i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">Wend</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 27, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">heapq</span> <span class=\"kw1\">import</span> heappush<span class=\"sy0\">,</span> heappop<span class=\"sy0\">,</span> heapify<br/><span class=\"kw1\">from</span> <span class=\"kw3\">collections</span> <span class=\"kw1\">import</span> defaultdict<br/>\u00a0<br/><span class=\"kw1\">def</span> encode<span class=\"br0\">(</span>symb2freq<span class=\"br0\">)</span>:<br/>    <span class=\"st0\">\"\"\"Huffman encode the given dict mapping symbols to weights\"\"\"</span><br/>    heap <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>wt<span class=\"sy0\">,</span> <span class=\"br0\">[</span>sym<span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"kw1\">for</span> sym<span class=\"sy0\">,</span> wt <span class=\"kw1\">in</span> symb2freq.<span class=\"me1\">items</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    heapify<span class=\"br0\">(</span>heap<span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>heap<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>:<br/>        lo <span class=\"sy0\">=</span> heappop<span class=\"br0\">(</span>heap<span class=\"br0\">)</span><br/>        hi <span class=\"sy0\">=</span> heappop<span class=\"br0\">(</span>heap<span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> pair <span class=\"kw1\">in</span> lo<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span>:<br/>            pair<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span> + pair<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">for</span> pair <span class=\"kw1\">in</span> hi<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span>:<br/>            pair<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'1'</span> + pair<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        heappush<span class=\"br0\">(</span>heap<span class=\"sy0\">,</span> <span class=\"br0\">[</span>lo<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> + hi<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> + lo<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span> + hi<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>heappop<span class=\"br0\">(</span>heap<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><span class=\"sy0\">,</span> key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> p: <span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>p<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>txt <span class=\"sy0\">=</span> <span class=\"st0\">\"this is an example for huffman encoding\"</span><br/>symb2freq <span class=\"sy0\">=</span> defaultdict<span class=\"br0\">(</span><span class=\"kw2\">int</span><span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> ch <span class=\"kw1\">in</span> txt:<br/>    symb2freq<span class=\"br0\">[</span>ch<span class=\"br0\">]</span> +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><span class=\"co1\"># in Python 3.1+:</span><br/><span class=\"co1\"># symb2freq = collections.Counter(txt)</span><br/>huff <span class=\"sy0\">=</span> encode<span class=\"br0\">(</span>symb2freq<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Symbol<span class=\"es0\">\\t</span>Weight<span class=\"es0\">\\t</span>Huffman Code\"</span><br/><span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> huff:<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"%s<span class=\"es0\">\\t</span>%s<span class=\"es0\">\\t</span>%s\"</span>\u00a0% <span class=\"br0\">(</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> symb2freq<span class=\"br0\">[</span>p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 106, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(require data/heap<br/>         data/bit-vector)<br/>\u00a0<br/>;; A node is either an interior, or a leaf.<br/>;; In either case, they record an item with an associated frequency.<br/>(struct node (freq) #:transparent)<br/>(struct interior node (left right) #:transparent)<br/>(struct leaf node (val) #:transparent)<br/>\u00a0<br/>;; node&lt;=?: node node -&gt; boolean<br/>;; Compares two nodes by frequency.<br/>(define (node&lt;=? x y)<br/>  (&lt;= (node-freq x) (node-freq y)))<br/>\u00a0<br/>;; make-huffman-tree: (listof leaf) -&gt; interior-node<br/>(define (make-huffman-tree leaves)<br/>  (define a-heap (make-heap node&lt;=?))<br/>  (heap-add-all! a-heap leaves)<br/>  (for ([i (sub1 (length leaves))])<br/>    (define min-1 (heap-min a-heap))<br/>    (heap-remove-min! a-heap)<br/>    (define min-2 (heap-min a-heap))<br/>    (heap-remove-min! a-heap)<br/>    (heap-add! a-heap (interior (+ (node-freq min-1) (node-freq min-2))<br/>                                min-1 min-2)))<br/>  (heap-min a-heap))<br/>\u00a0<br/>;; string-&gt;huffman-tree: string -&gt; node<br/>;; Given a string, produces its huffman tree.  The leaves hold the characters<br/>;; and their relative frequencies.<br/>(define (string-&gt;huffman-tree str)<br/>  (define ht (make-hash))<br/>  (define n (sequence-length str))<br/>  (for ([ch str])<br/>     (hash-update! ht ch add1 (\u03bb () 0)))<br/>  (make-huffman-tree<br/>   (for/list ([(k v) (in-hash ht)])<br/>     (leaf (/ v n) k))))<br/>\u00a0<br/>;; make-encoder: node -&gt; (string -&gt; bit-vector)<br/>;; Given a huffman tree, generates the encoder function.<br/>(define (make-encoder a-tree) <br/>  (define dict (huffman-tree-&gt;dictionary a-tree))<br/>  (lambda (a-str)<br/>    (list-&gt;bit-vector (apply append (for/list ([ch a-str]) (hash-ref dict ch))))))<br/>\u00a0<br/>;; huffman-tree-&gt;dictionary: node -&gt; (hashof val (listof boolean))<br/>;; A helper for the encoder: maps characters to their code sequences.<br/>(define (huffman-tree-&gt;dictionary a-node)<br/>  (define ht (make-hash))<br/>  (let loop ([a-node a-node]<br/>             [path/rev '()])<br/>    (cond<br/>      [(interior? a-node)<br/>       (loop (interior-left a-node) (cons #f path/rev))<br/>       (loop (interior-right a-node) (cons #t path/rev))]<br/>      [(leaf? a-node)<br/>        (hash-set! ht (reverse path/rev) (leaf-val a-node))]))<br/>\u00a0<br/>  (for/hash ([(k v) ht])<br/>    (values v k)))<br/>\u00a0<br/>;; make-decoder: interior-node -&gt; (bit-vector -&gt; string)<br/>;; Generates the decoder function from the tree.<br/>(define (make-decoder a-tree)<br/>  (lambda (a-bitvector)<br/>    (define-values (decoded/rev _)<br/>      (for/fold ([decoded/rev '()]<br/>                 [a-node a-tree])<br/>                ([bit a-bitvector])<br/>        (define next-node <br/>          (cond<br/>            [(not bit)<br/>             (interior-left a-node)]<br/>            [else<br/>             (interior-right a-node)]))<br/>        (cond [(leaf? next-node)<br/>               (values (cons (leaf-val next-node) decoded/rev) <br/>                       a-tree)]<br/>              [else<br/>               (values decoded/rev next-node)])))<br/>    (apply string (reverse decoded/rev))))<br/>\u00a0<br/>\u00a0<br/>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br/>;; Example application:<br/>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;<br/>(define msg \"this is an example for huffman encoding\")<br/>\u00a0<br/>(define tree (string-&gt;huffman-tree msg))<br/>\u00a0<br/>;; We can print out the mapping for inspection:<br/>(huffman-tree-&gt;dictionary tree)<br/>\u00a0<br/>(define encode (make-encoder tree))<br/>(define encoded (encode msg))<br/>\u00a0<br/>;; Here's what the encoded message looks like:<br/>(bit-vector-&gt;string encoded)<br/>\u00a0<br/>(define decode (make-decoder tree))<br/>;; Here's what the decoded message looks like:<br/>(decode encoded)</pre>"}, {"lang": "Red", "loc": 92, "block": "<pre class=\"text highlighted_source\">Red [file:\u00a0%huffy.red]<br/>\u00a0<br/>;; message to encode:<br/>msg: \"this is an example for huffman encoding\"<br/>\u00a0<br/>;;map to collect leave knots  per uniq character of message<br/>m: make map! []\t<br/>\u00a0<br/>knot: make object! [<br/>\tleft: right: none   \u00a0;; pointer to left/right sibling<br/>\tcode: none       \u00a0;; first holds char for debugging, later binary code<br/>\tcount: depth: 1    \u00a0;;occurence of character - length of branch<br/>]<br/>\u00a0<br/>;;-----------------------------------------<br/>set-code: func  [\"recursive function to generate binary code sequence\"<br/>\t\t\twknot  <br/>\t\t\twcode [string!]] [<br/>;;-----------------------------------------<br/>\teither wknot/left = none [<br/>\t\twknot/code:  wcode <br/>\t] [<br/>\t\tset-code wknot/left rejoin [wcode \"1\"]<br/>\t\tset-code wknot/right rejoin [wcode \"0\"]<br/>\t]<br/>]\t;;-- end func<br/>\u00a0<br/>;-------------------------------<br/>merge-2knots: func [\"function to merge 2 knots into 1 new\"<br/>\tt [block!]][<br/>;-------------------------------<br/>\tnknot: copy knot     \u00a0;; create new knot<br/>\tnknot/count:  t/1/count + t/2/count<br/>\tnknot/right: t/1<br/>\tnknot/left: t/2<br/>\tnknot/depth: t/1/depth + 1<br/>\ttab: remove/part t 2\t;; delete first 2 knots<br/>\tinsert t nknot \u00a0;; insert new generated knot<br/>]\t;;-- end func<br/>\u00a0<br/>;; count occurence of characters, save in map: m <br/>foreach chr msg [<br/>\teither k:  select/case m chr [<br/>\t\t\tk/count: k/count + 1\t<br/>\t][  <br/>\t\tput/case m chr nknot: copy knot<br/>\t\tnknot/code: chr<br/>\t]<br/>]<br/>\u00a0<br/>;; create sortable block (=tab) for use as prio queue<br/>foreach k  keys-of m [\tappend tab: [] \u00a0:m/:k ]<br/>\u00a0<br/>;; build tree <br/>while [ 1 &lt;  length? tab][<br/>\tsort/compare tab function [a b] [<br/>\t\t\t\t\ta/count  &lt;  b/count <br/>\t\t  or (   a/count = b/count and ( a/depth &gt; b/depth ) )<br/>\t]<br/>\tmerge-2knots tab\t;; merge 2 knots with lowest count / max depth<br/>]<br/>\u00a0<br/>set-code tab/1 \"\"\t\t;; generate binary codes, save at leave knot<br/>\u00a0<br/>;;  display codes<br/>foreach k sort keys-of m [<br/>\tprint [k \" = \" m/:k/code]\t<br/>\tappend codes: \"\" m/:k/code\t<br/>]<br/>\u00a0<br/>;; encode orig message string<br/>foreach chr msg [<br/>\tk: select/case m chr<br/>\t append msg-new: \"\"   k/code<br/>]<br/>\u00a0<br/>print [ \"length of encoded msg \"  length? msg-new]<br/>print [ \"length of (binary) codes \"  length? codes ]<br/>\u00a0<br/>print [\"orig. message: \"  msg newline \"encoded message: \" \"^/\" msg-new]<br/>prin \"decoded: \"<br/>\u00a0<br/>;; decode message (destructive! ):<br/>while [ not empty? msg-new ][<br/>  foreach [k v] body-of   m [<br/>    if  t: find/match msg-new v/code   [<br/>      prin k<br/>      msg-new: t<br/>    ]<br/>  ]<br/> ]<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 258, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX ---------------------------------------------------------------<br/>* 27.12.2013 Walter Pachl<br/>* 29.12.2013 -\"- changed for test of s=xrange('00'x,'ff'x)<br/>* 14.03.2018 -\"- use format instead of right to diagnose size poblems<br/>* Stem m contains eventually the following node data<br/>* m.i.0id Node id<br/>* m.i.0c  character<br/>* m.i.0o  number of occurrences<br/>* m.i.0l  left child<br/>* m.i.0r  right child<br/>* m.i.0f  father<br/>* m.i.0d  digit (0 or 1)<br/>* m.i.0t  1=a terminal node 0=an intermediate or the top node<br/>*--------------------------------------------------------------------*/</span><br/><span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> s<br/><span class=\"kw1\">If</span> s=<span class=\"st0\">''</span> <span class=\"kw3\">Then</span><br/>  s=<span class=\"st0\">'this is an example for huffman encoding'</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'We encode this string:'</span><br/><span class=\"kw1\">Say</span> s<br/>debug=<span class=\"nu0\">0</span><br/>o<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>c<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>codel<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>code<span class=\"sy0\">.</span>=<span class=\"st0\">''</span><br/>father<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>cl=<span class=\"st0\">''</span>                                  <span class=\"coMULTI\">/* list of characters         */</span><br/><span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Call</span> memorize <span class=\"kw6\">substr</span><span class=\"br0\">(</span>s,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">If</span> debug <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>  <span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> c<span class=\"sy0\">.</span>0<br/>    c=c<span class=\"sy0\">.</span>i<br/>    <span class=\"kw1\">Say</span> i c o<span class=\"sy0\">.</span>c<br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/>n<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> c<span class=\"sy0\">.</span>0<br/>  c=c<span class=\"sy0\">.</span>i<br/>  n<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0c=c<br/>  n<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0o=o<span class=\"sy0\">.</span>c<br/>  n<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0id=i<br/>  <span class=\"kw1\">Call</span> dbg i n<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0id n<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0c n<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0o<br/>  <span class=\"kw3\">End</span><br/>n=c<span class=\"sy0\">.</span>0                                  <span class=\"coMULTI\">/* number of nodes            */</span><br/>m<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> n                            <span class=\"coMULTI\">/* construct initial array    */</span><br/>  <span class=\"kw1\">Do</span> j=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> m<span class=\"sy0\">.</span>0                        <span class=\"coMULTI\">/* sorted by occurrences      */</span><br/>    <span class=\"kw1\">If</span> m<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>0o<span class=\"sy0\">&gt;</span>n<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0o <span class=\"kw3\">Then</span><br/>      <span class=\"kw1\">Leave</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Do</span> k=m<span class=\"sy0\">.</span>0 <span class=\"kw2\">To</span> j <span class=\"kw2\">By</span> -<span class=\"nu0\">1</span><br/>    k1=k+<span class=\"nu0\">1</span><br/>    m<span class=\"sy0\">.</span>k1<span class=\"sy0\">.</span>0id=m<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>0id<br/>    m<span class=\"sy0\">.</span>k1<span class=\"sy0\">.</span>0c =m<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>0c<br/>    m<span class=\"sy0\">.</span>k1<span class=\"sy0\">.</span>0o =m<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>0o<br/>    m<span class=\"sy0\">.</span>k1<span class=\"sy0\">.</span>0t =m<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>0t<br/>    <span class=\"kw3\">End</span><br/>  m<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>0id=i<br/>  m<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>0c =n<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0c<br/>  m<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>0o =n<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0o<br/>  m<span class=\"sy0\">.</span>j<span class=\"sy0\">.</span>0t =<span class=\"nu0\">1</span><br/>  m<span class=\"sy0\">.</span>0=m<span class=\"sy0\">.</span>0+<span class=\"nu0\">1</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">If</span> debug <span class=\"kw3\">Then</span><br/>  <span class=\"kw1\">Call</span> show<br/>\u00a0<br/><span class=\"kw1\">Do</span> <span class=\"kw2\">While</span> pairs<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>    <span class=\"coMULTI\">/* while there are at least 2 fatherless nodes */</span><br/>  <span class=\"kw1\">Call</span> mknode         <span class=\"coMULTI\">/* create and fill a new father node           */</span><br/>  <span class=\"kw1\">If</span> debug <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Call</span> show<br/>  <span class=\"kw3\">End</span><br/>\u00a0<br/><span class=\"kw1\">Call</span> show<br/>c<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> m<span class=\"sy0\">.</span>0       <span class=\"coMULTI\">/* now we loop over all lines representing nodes */</span><br/>  <span class=\"kw1\">If</span> m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0t <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>   <span class=\"coMULTI\">/* for each terminal node                 */</span><br/>    code=m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0d       <span class=\"coMULTI\">/* its digit is the last code digit            */</span><br/>    node=m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0id      <span class=\"coMULTI\">/* its id                                      */</span><br/>    <span class=\"kw1\">Do</span> fi=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">1000</span>   <span class=\"coMULTI\">/* actually Forever                            */</span><br/>      fid=father<span class=\"sy0\">.</span>node           <span class=\"coMULTI\">/* id of father                      */</span><br/>      <span class=\"kw1\">If</span> fid<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>         <span class=\"coMULTI\">/* father exists                     */</span><br/>        fidz=zeile<span class=\"br0\">(</span>fid<span class=\"br0\">)</span>         <span class=\"coMULTI\">/* line that contains the father     */</span><br/>        code=m<span class=\"sy0\">.</span>fidz<span class=\"sy0\">.</span>0d<span class=\"sy0\">||</span>code    <span class=\"coMULTI\">/* prepend the digit                 */</span><br/>        node=fid                <span class=\"coMULTI\">/* look for next father              */</span><br/>        <span class=\"kw3\">End</span><br/>      <span class=\"kw3\">Else</span>                      <span class=\"coMULTI\">/* no father (we reached the top     */</span><br/>        <span class=\"kw1\">Leave</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>code<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"kw3\">Then</span>      <span class=\"coMULTI\">/* more than one character in input  */</span><br/>      code=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>code,<span class=\"nu0\">2</span><span class=\"br0\">)</span>       <span class=\"coMULTI\">/* remove the the top node's 0       */</span><br/>    <span class=\"kw1\">call</span> dbg m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0c <span class=\"st0\">'-&gt;'</span> code   <span class=\"coMULTI\">/* character is encoded this way     */</span><br/>    char=m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0c<br/>    code<span class=\"sy0\">.</span>char=code<br/>    z=codel<span class=\"sy0\">.</span>0+<span class=\"nu0\">1</span><br/>    codel<span class=\"sy0\">.</span>z=code<br/>    codel<span class=\"sy0\">.</span>0=z<br/>    char<span class=\"sy0\">.</span>code=char<br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/>\u00a0<br/><span class=\"kw1\">Call</span> show_char2code  <span class=\"coMULTI\">/* show used characters and corresponding codes */</span><br/>\u00a0<br/>codes<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>               <span class=\"coMULTI\">/* now we build the array of codes/characters */</span><br/><span class=\"kw1\">Do</span> j=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> codel<span class=\"sy0\">.</span>0<br/>  z=codes<span class=\"sy0\">.</span>0+<span class=\"nu0\">1</span><br/>  code=codel<span class=\"sy0\">.</span>j<br/>  codes<span class=\"sy0\">.</span>z=code<br/>  <span class=\"kw6\">chars</span><span class=\"sy0\">.</span>z=char<span class=\"sy0\">.</span>code<br/>  codes<span class=\"sy0\">.</span>0=z<br/>  <span class=\"kw1\">Call</span> dbg codes<span class=\"sy0\">.</span>z <span class=\"st0\">'-----&gt;'</span> <span class=\"kw6\">chars</span><span class=\"sy0\">.</span>z<br/>  <span class=\"kw3\">End</span><br/>\u00a0<br/>sc=<span class=\"st0\">''</span>                  <span class=\"coMULTI\">/* here we ecnode the string                  */</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>    <span class=\"coMULTI\">/* loop over input                            */</span><br/>  c=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>s,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span>      <span class=\"coMULTI\">/* a character                                */</span><br/>  sc=sc<span class=\"sy0\">||</span>code<span class=\"sy0\">.</span>c        <span class=\"coMULTI\">/* append the corresponding code              */</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'Length of encoded string:'</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>sc<span class=\"br0\">)</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>sc<span class=\"br0\">)</span> <span class=\"kw2\">by</span> <span class=\"nu0\">70</span><br/>  <span class=\"kw1\">Say</span> <span class=\"kw6\">substr</span><span class=\"br0\">(</span>sc,i,<span class=\"nu0\">70</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/>\u00a0<br/>sr=<span class=\"st0\">''</span>                  <span class=\"coMULTI\">/* now decode the string                      */</span><br/><span class=\"kw1\">Do</span> si=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">999</span> <span class=\"kw2\">While</span> sc<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">''</span><br/>  <span class=\"kw1\">Do</span> i=codes<span class=\"sy0\">.</span>0 <span class=\"kw2\">To</span> <span class=\"nu0\">1</span> <span class=\"kw2\">By</span> -<span class=\"nu0\">1</span>              <span class=\"coMULTI\">/* loop over codes            */</span><br/>    cl=<span class=\"kw6\">length</span><span class=\"br0\">(</span>codes<span class=\"sy0\">.</span>i<span class=\"br0\">)</span>                 <span class=\"coMULTI\">/* length of code             */</span><br/>    <span class=\"kw1\">If</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>sc,cl<span class=\"br0\">)</span>==codes<span class=\"sy0\">.</span>i <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>    <span class=\"coMULTI\">/* found on top of string     */</span><br/>      sr=sr<span class=\"sy0\">||</span><span class=\"kw6\">chars</span><span class=\"sy0\">.</span>i                   <span class=\"coMULTI\">/* append character to result */</span><br/>      sc=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>sc,cl+<span class=\"nu0\">1</span><span class=\"br0\">)</span>               <span class=\"coMULTI\">/* cut off the used code      */</span><br/>      <span class=\"kw1\">Leave</span>                            <span class=\"coMULTI\">/* this was one character     */</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'Input =\"'</span>s<span class=\"st0\">'\"'</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'result=\"'</span>sr<span class=\"st0\">'\"'</span><br/>\u00a0<br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>show:<br/><span class=\"coMULTI\">/*---------------------------------------------------------------------<br/>* show all lines representing node data<br/>*--------------------------------------------------------------------*/</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'  i   pp  id   c   f   l r d'</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> m<span class=\"sy0\">.</span>0<br/>  <span class=\"kw1\">Say</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>i,<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0o,<span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0id,<span class=\"nu0\">3</span><span class=\"br0\">)</span>,<br/>          <span class=\"kw6\">format</span><span class=\"br0\">(</span>m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0f,<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0l,<span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0r,<span class=\"nu0\">3</span><span class=\"br0\">)</span> m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0d m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0t<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Call</span> dbg <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span>,<span class=\"nu0\">21</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>pairs: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> m<span class=\"sy0\">.</span><br/><span class=\"coMULTI\">/*---------------------------------------------------------------------<br/>* return number of fatherless nodes<br/>*--------------------------------------------------------------------*/</span><br/>  res=<span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> m<span class=\"sy0\">.</span>0<br/>    <span class=\"kw1\">If</span> m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0f=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>      res=res+<span class=\"nu0\">1</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span> res<br/>\u00a0<br/>mknode:<br/><span class=\"coMULTI\">/*---------------------------------------------------------------------<br/>* construct and store a new intermediate or the top node<br/>*--------------------------------------------------------------------*/</span><br/>new<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>ni=m<span class=\"sy0\">.</span>0+<span class=\"nu0\">1</span>                 <span class=\"coMULTI\">/* the next node id                         */</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> m<span class=\"sy0\">.</span>0            <span class=\"coMULTI\">/* loop over node lines                     */</span><br/>  <span class=\"kw1\">If</span> m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0f=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>    <span class=\"coMULTI\">/* a fatherless node                        */</span><br/>    z=m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0id            <span class=\"coMULTI\">/* its id                                   */</span><br/>    <span class=\"kw1\">If</span> new<span class=\"sy0\">.</span>0l=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>  <span class=\"coMULTI\">/* new node has no left child               */</span><br/>      new<span class=\"sy0\">.</span>0l=z           <span class=\"coMULTI\">/* make this the lect child                 */</span><br/>      new<span class=\"sy0\">.</span>0o=m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0o      <span class=\"coMULTI\">/* occurrences                              */</span><br/>      m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0f=ni          <span class=\"coMULTI\">/* store father info                        */</span><br/>      m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0d=<span class=\"st0\">'0'</span>         <span class=\"coMULTI\">/* digit 0 to be used                       */</span><br/>      father<span class=\"sy0\">.</span>z=ni        <span class=\"coMULTI\">/* remember z's father (redundant)          */</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">Else</span> <span class=\"kw1\">Do</span>              <span class=\"coMULTI\">/* New node has already left child          */</span><br/>      new<span class=\"sy0\">.</span>0r=z           <span class=\"coMULTI\">/* make this the right child                */</span><br/>      new<span class=\"sy0\">.</span>0o=new<span class=\"sy0\">.</span>0o+m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0o  <span class=\"coMULTI\">/* add in the occurrences                */</span><br/>      m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0f=ni          <span class=\"coMULTI\">/* store father info                        */</span><br/>      m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0d=<span class=\"nu0\">1</span>           <span class=\"coMULTI\">/* digit 1 to be used                       */</span><br/>      father<span class=\"sy0\">.</span>z=ni        <span class=\"coMULTI\">/* remember z's father (redundant)          */</span><br/>      <span class=\"kw1\">Leave</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> m<span class=\"sy0\">.</span>0            <span class=\"coMULTI\">/* Insert new node according to occurrences */</span><br/>  <span class=\"kw1\">If</span> m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0o<span class=\"sy0\">&gt;</span>=new<span class=\"sy0\">.</span>0o <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">Do</span> k=m<span class=\"sy0\">.</span>0 <span class=\"kw2\">To</span> i <span class=\"kw2\">By</span> -<span class=\"nu0\">1</span><br/>      k1=k+<span class=\"nu0\">1</span><br/>      m<span class=\"sy0\">.</span>k1<span class=\"sy0\">.</span>0id=m<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>0id<br/>      m<span class=\"sy0\">.</span>k1<span class=\"sy0\">.</span>0o =m<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>0o<br/>      m<span class=\"sy0\">.</span>k1<span class=\"sy0\">.</span>0c =m<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>0c<br/>      m<span class=\"sy0\">.</span>k1<span class=\"sy0\">.</span>0l =m<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>0l<br/>      m<span class=\"sy0\">.</span>k1<span class=\"sy0\">.</span>0r =m<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>0r<br/>      m<span class=\"sy0\">.</span>k1<span class=\"sy0\">.</span>0f =m<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>0f<br/>      m<span class=\"sy0\">.</span>k1<span class=\"sy0\">.</span>0d =m<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>0d<br/>      m<span class=\"sy0\">.</span>k1<span class=\"sy0\">.</span>0t =m<span class=\"sy0\">.</span>k<span class=\"sy0\">.</span>0t<br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw1\">Leave</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/>m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0id=ni<br/>m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0c =<span class=\"st0\">'*'</span><br/>m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0o =new<span class=\"sy0\">.</span>0o<br/>m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0l =new<span class=\"sy0\">.</span>0l<br/>m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0r =new<span class=\"sy0\">.</span>0r<br/>m<span class=\"sy0\">.</span>i<span class=\"sy0\">.</span>0t =<span class=\"nu0\">0</span><br/>father<span class=\"sy0\">.</span>ni=<span class=\"nu0\">0</span><br/>m<span class=\"sy0\">.</span>0=ni<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>zeile:<br/><span class=\"coMULTI\">/*---------------------------------------------------------------------<br/>* find and return line number containing node-id<br/>*--------------------------------------------------------------------*/</span><br/>  <span class=\"kw1\">do</span> fidz=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> m<span class=\"sy0\">.</span>0<br/>    <span class=\"kw1\">If</span> m<span class=\"sy0\">.</span>fidz<span class=\"sy0\">.</span>0id=<span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span><br/>      <span class=\"kw1\">Return</span> fidz<br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Call</span> dbg <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">'not found'</span><br/>  <span class=\"kw1\">Pull</span> <span class=\"sy0\">.</span><br/>\u00a0<br/>dbg:<br/><span class=\"coMULTI\">/*---------------------------------------------------------------------<br/>* Show text if debug is enabled<br/>*--------------------------------------------------------------------*/</span><br/>  <span class=\"kw1\">If</span> debug=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Say</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Return</span><br/>\u00a0<br/>\u00a0<br/>memorize: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> c<span class=\"sy0\">.</span> o<span class=\"sy0\">.</span><br/><span class=\"coMULTI\">/*---------------------------------------------------------------------<br/>* store characters and corresponding occurrences<br/>*--------------------------------------------------------------------*/</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> c<br/>  <span class=\"kw1\">If</span> o<span class=\"sy0\">.</span>c=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    z=c<span class=\"sy0\">.</span>0+<span class=\"nu0\">1</span><br/>    c<span class=\"sy0\">.</span>z=c<br/>    c<span class=\"sy0\">.</span>0=z<br/>    <span class=\"kw3\">End</span><br/>  o<span class=\"sy0\">.</span>c=o<span class=\"sy0\">.</span>c+<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Return</span><br/>\u00a0<br/>show_char2code:<br/><span class=\"coMULTI\">/*---------------------------------------------------------------------<br/>* show used characters and corresponding codes<br/>*--------------------------------------------------------------------*/</span><br/>cl=<span class=\"kw6\">xrange</span><span class=\"br0\">(</span><span class=\"st0\">'00'</span>x,<span class=\"st0\">'ff'</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'char --&gt; code'</span><br/><span class=\"kw1\">Do</span> <span class=\"kw2\">While</span> cl<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">''</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> cl c +<span class=\"nu0\">1</span> cl<br/>  <span class=\"kw1\">If</span> code<span class=\"sy0\">.</span>c<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">''</span> <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Say</span> <span class=\"st0\">'   '</span>c <span class=\"st0\">'--&gt;'</span> code<span class=\"sy0\">.</span>c<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span></pre>"}, {"lang": "Ruby", "loc": 54, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'priority_queue'</span><br/>\u00a0<br/><span class=\"kw1\">def</span> huffman_encoding<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>  char_count = <span class=\"kw4\">Hash</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>  str.<span class=\"me1\">each_char</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> char_count<span class=\"br0\">[</span>c<span class=\"br0\">]</span> <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\u00a0<br/>  pq = CPriorityQueue.<span class=\"me1\">new</span><br/>  <span class=\"co1\"># chars with fewest count have highest priority</span><br/>  char_count.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>char, count<span class=\"sy0\">|</span> pq.<span class=\"me1\">push</span><span class=\"br0\">(</span>char, count<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">while</span> pq.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>    key1, prio1 = pq.<span class=\"me1\">delete_min</span><br/>    key2, prio2 = pq.<span class=\"me1\">delete_min</span><br/>    pq.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"br0\">[</span>key1, key2<span class=\"br0\">]</span>, prio1 <span class=\"sy0\">+</span> prio2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw4\">Hash</span><span class=\"br0\">[</span><span class=\"sy0\">*</span>generate_encoding<span class=\"br0\">(</span>pq.<span class=\"me1\">min_key</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> generate_encoding<span class=\"br0\">(</span>ary, prefix=<span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">case</span> ary<br/>  <span class=\"kw1\">when</span> <span class=\"kw3\">Array</span><br/>    generate_encoding<span class=\"br0\">(</span>ary<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"st0\">\"#{prefix}0\"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> generate_encoding<span class=\"br0\">(</span>ary<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"st0\">\"#{prefix}1\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"br0\">[</span>ary, prefix<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> encode<span class=\"br0\">(</span>str, encoding<span class=\"br0\">)</span><br/>  str.<span class=\"me1\">each_char</span>.<span class=\"me1\">collect</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>char<span class=\"sy0\">|</span> encoding<span class=\"br0\">[</span>char<span class=\"br0\">]</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> decode<span class=\"br0\">(</span>encoded, encoding<span class=\"br0\">)</span><br/>  rev_enc = encoding.<span class=\"me1\">invert</span><br/>  decoded = <span class=\"st0\">\"\"</span><br/>  pos = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">while</span> pos <span class=\"sy0\">&lt;</span> encoded.<span class=\"me1\">length</span><br/>    key = <span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">while</span> rev_enc<span class=\"br0\">[</span>key<span class=\"br0\">]</span>.<span class=\"kw2\">nil</span>?<br/>      key <span class=\"sy0\">&lt;&lt;</span> encoded<span class=\"br0\">[</span>pos<span class=\"br0\">]</span><br/>      pos <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span><br/>    decoded <span class=\"sy0\">&lt;&lt;</span> rev_enc<span class=\"br0\">[</span>key<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/>  decoded<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>str = <span class=\"st0\">\"this is an example for huffman encoding\"</span><br/>encoding = huffman_encoding<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>encoding.<span class=\"me1\">to_a</span>.<span class=\"me1\">sort</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> <span class=\"kw3\">p</span> x<span class=\"br0\">}</span><br/>\u00a0<br/>enc = encode<span class=\"br0\">(</span>str, encoding<span class=\"br0\">)</span><br/>dec = decode<span class=\"br0\">(</span>enc, encoding<span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"success!\"</span> <span class=\"kw1\">if</span> str == dec</pre>"}, {"lang": "Rust", "loc": 88, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>use std::collections::BTreeMap;<br/>use std::collections::binary_heap::BinaryHeap;<br/>\u00a0<br/>#[derive(Debug, Eq, PartialEq)]<br/>enum NodeKind {<br/>    Internal(Box&lt;Node&gt;, Box&lt;Node&gt;),<br/>    Leaf(char),<br/>}<br/>\u00a0<br/>#[derive(Debug, Eq, PartialEq)]<br/>struct Node {<br/>    frequency: usize,<br/>    kind: NodeKind,<br/>}<br/>\u00a0<br/>impl Ord for Node {<br/>    fn cmp(&amp;self, rhs: &amp;Self) -&gt; std::cmp::Ordering {<br/>        rhs.frequency.cmp(&amp;self.frequency)<br/>    }<br/>}<br/>\u00a0<br/>impl PartialOrd for Node {<br/>    fn partial_cmp(&amp;self, rhs: &amp;Self) -&gt; Option&lt;std::cmp::Ordering&gt; {<br/>        Some(self.cmp(&amp;rhs))<br/>    }<br/>}<br/>\u00a0<br/>type HuffmanCodeMap = BTreeMap&lt;char, Vec&lt;u8&gt;&gt;;<br/>\u00a0<br/>fn main() {<br/>    let text = \"this is an example for huffman encoding\";<br/>\u00a0<br/>    let mut frequencies = BTreeMap::new();<br/>    for ch in text.chars() {<br/>        *frequencies.entry(ch).or_insert(0) += 1;<br/>    }<br/>\u00a0<br/>    let mut prioritized_frequencies = BinaryHeap::new();<br/>    for counted_char in frequencies {<br/>        prioritized_frequencies.push(Node {<br/>            frequency: counted_char.1,<br/>            kind: NodeKind::Leaf(counted_char.0),<br/>        });<br/>    }<br/>\u00a0<br/>    while prioritized_frequencies.len() &gt; 1 {<br/>        let left_child = prioritized_frequencies.pop().unwrap();<br/>        let right_child = prioritized_frequencies.pop().unwrap();<br/>        prioritized_frequencies.push(Node {<br/>            frequency: right_child.frequency + left_child.frequency,<br/>            kind: NodeKind::Internal(Box::new(left_child), Box::new(right_child)),<br/>        });<br/>    }<br/>\u00a0<br/>    let mut codes = HuffmanCodeMap::new();<br/>    generate_codes(<br/>        prioritized_frequencies.peek().unwrap(),<br/>        vec![0u8; 0],<br/>        &amp;mut codes,<br/>    );<br/>\u00a0<br/>    for item in codes {<br/>        print!(\"{}: \", item.0);<br/>        for bit in item.1 {<br/>            print!(\"{}\", bit);<br/>        }<br/>        println!();<br/>    }<br/>}<br/>\u00a0<br/>fn generate_codes(node: &amp;Node, prefix: Vec&lt;u8&gt;, out_codes: &amp;mut HuffmanCodeMap) {<br/>    match node.kind {<br/>        NodeKind::Internal(ref left_child, ref right_child) =&gt; {<br/>            let mut left_prefix = prefix.clone();<br/>            left_prefix.push(0);<br/>            generate_codes(&amp;left_child, left_prefix, out_codes);<br/>\u00a0<br/>            let mut right_prefix = prefix;<br/>            right_prefix.push(1);<br/>            generate_codes(&amp;right_child, right_prefix, out_codes);<br/>        }<br/>        NodeKind::Leaf(ch) =&gt; {<br/>            out_codes.insert(ch, prefix);<br/>        }<br/>    }<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 49, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Huffman <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">collection</span>.<span class=\"me1\">mutable</span>.<span class=\"br0\">{</span>Map, PriorityQueue<span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">sealed</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">abstract</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Tree<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Node<span class=\"br0\">(</span>left<span class=\"sy0\">:</span> Tree, right<span class=\"sy0\">:</span> Tree<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Tree<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Leaf<span class=\"br0\">(</span>c<span class=\"sy0\">:</span> Char<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Tree<br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> treeOrdering<span class=\"br0\">(</span>m<span class=\"sy0\">:</span> Map<span class=\"br0\">[</span>Tree, Int<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Ordering<span class=\"br0\">[</span>Tree<span class=\"br0\">]</span> <span class=\"br0\">{</span> <br/>     <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> compare<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> Tree, y<span class=\"sy0\">:</span> Tree<span class=\"br0\">)</span> <span class=\"sy0\">=</span> m<span class=\"br0\">(</span>y<span class=\"br0\">)</span>.<span class=\"me1\">compare</span><span class=\"br0\">(</span>m<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> stringMap<span class=\"br0\">(</span>text<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> text groupBy <span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> Leaf<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Tree<span class=\"br0\">)</span> mapValues <span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> buildNode<span class=\"br0\">(</span>queue<span class=\"sy0\">:</span> PriorityQueue<span class=\"br0\">[</span>Tree<span class=\"br0\">]</span>, map<span class=\"sy0\">:</span> Map<span class=\"br0\">[</span>Tree,Int<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> right <span class=\"sy0\">=</span> queue.<span class=\"me1\">dequeue</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> left <span class=\"sy0\">=</span> queue.<span class=\"me1\">dequeue</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> node <span class=\"sy0\">=</span> Node<span class=\"br0\">(</span>left, right<span class=\"br0\">)</span><br/>    map<span class=\"br0\">(</span>node<span class=\"br0\">)</span> <span class=\"sy0\">=</span> map<span class=\"br0\">(</span>left<span class=\"br0\">)</span> + map<span class=\"br0\">(</span>right<span class=\"br0\">)</span><br/>    queue.<span class=\"me1\">enqueue</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> codify<span class=\"br0\">(</span>tree<span class=\"sy0\">:</span> Tree, map<span class=\"sy0\">:</span> Map<span class=\"br0\">[</span>Tree, Int<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> recurse<span class=\"br0\">(</span>tree<span class=\"sy0\">:</span> Tree, prefix<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span><span class=\"br0\">(</span>Char, <span class=\"br0\">(</span>Int, String<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> tree <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Node<span class=\"br0\">(</span>left, right<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> recurse<span class=\"br0\">(</span>left, prefix+<span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"sy0\">:::</span> recurse<span class=\"br0\">(</span>right, prefix+<span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> leaf <span class=\"sy0\">@</span> Leaf<span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> c -<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>map<span class=\"br0\">(</span>leaf<span class=\"br0\">)</span>, prefix<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> Nil<br/>    <span class=\"br0\">}</span><br/>    recurse<span class=\"br0\">(</span>tree, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> encode<span class=\"br0\">(</span>text<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> map <span class=\"sy0\">=</span> Map.<span class=\"me1\">empty</span><span class=\"br0\">[</span>Tree,Int<span class=\"br0\">]</span> ++<span class=\"sy0\">=</span> stringMap<span class=\"br0\">(</span>text<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> queue <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> PriorityQueue<span class=\"br0\">[</span>Tree<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span>treeOrdering<span class=\"br0\">(</span>map<span class=\"br0\">)</span><span class=\"br0\">)</span> ++<span class=\"sy0\">=</span> map.<span class=\"me1\">keysIterator</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a><span class=\"br0\">(</span>queue.<span class=\"me1\">size</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      buildNode<span class=\"br0\">(</span>queue, map<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    codify<span class=\"br0\">(</span>queue.<span class=\"me1\">dequeue</span>, map<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> text <span class=\"sy0\">=</span> <span class=\"st0\">\"this is an example for huffman encoding\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> code <span class=\"sy0\">=</span> encode<span class=\"br0\">(</span>text<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Char<span class=\"es1\">\\t</span>Weight<span class=\"es1\">\\t</span><span class=\"es1\">\\t</span>Encoding\"</span><span class=\"br0\">)</span><br/>    code sortBy <span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"sy0\">_</span>2.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span> foreach <span class=\"br0\">{</span> <br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>c, <span class=\"br0\">(</span>weight, encoding<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span><span class=\"st0\">\"%c:<span class=\"es1\">\\t</span>%3d/%-3d<span class=\"es1\">\\t</span><span class=\"es1\">\\t</span>%s\"</span> format <span class=\"br0\">(</span>c, weight, text.<span class=\"me1\">length</span>, encoding<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 54, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>char<span class=\"sy0\">-</span>freq port table<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">eof-object?</span> <span class=\"br0\">(</span><span class=\"kw1\">peek-char</span> port<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   table<br/>   <span class=\"br0\">(</span>char<span class=\"sy0\">-</span>freq port <span class=\"br0\">(</span>add<span class=\"sy0\">-</span>char <span class=\"br0\">(</span><span class=\"kw1\">read-char</span> port<span class=\"br0\">)</span> table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>add<span class=\"sy0\">-</span>char char table<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> table<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> char <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq?</span> <span class=\"br0\">(</span><span class=\"kw1\">caar</span> table<span class=\"br0\">)</span> char<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> char <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>cadar table<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>#t <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> table<span class=\"br0\">)</span> <span class=\"br0\">(</span>add<span class=\"sy0\">-</span>char char <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>nodeify table<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> x '<span class=\"br0\">(</span><span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> table<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> node<span class=\"sy0\">-</span>freq cadar<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>huffman<span class=\"sy0\">-</span>tree nodes<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>queue <span class=\"br0\">(</span>sort nodes <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x y<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>node<span class=\"sy0\">-</span>freq x<span class=\"br0\">)</span> <span class=\"br0\">(</span>node<span class=\"sy0\">-</span>freq y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">null?</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> queue<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">car</span> queue<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>huffman<span class=\"sy0\">-</span>tree<br/>      <span class=\"br0\">(</span><span class=\"kw1\">cons</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">list</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">list</span> 'notleaf <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>node<span class=\"sy0\">-</span>freq <span class=\"br0\">(</span><span class=\"kw1\">car</span> queue<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>node<span class=\"sy0\">-</span>freq <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> queue<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">car</span> queue<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> queue<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>cddr queue<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>list<span class=\"sy0\">-</span>encodings tree chars<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">for-each</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">(</span>format #t <span class=\"st0\">\"~a:~a~%\"</span> c <span class=\"br0\">(</span>encode c tree<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> chars<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>encode char tree<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> tree<span class=\"br0\">)</span> #f<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq?</span> <span class=\"br0\">(</span><span class=\"kw1\">caar</span> tree<span class=\"br0\">)</span> char<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>#t<br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>left <span class=\"br0\">(</span>encode char <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> tree<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>right <span class=\"br0\">(</span>encode char <span class=\"br0\">(</span><span class=\"kw1\">caddr</span> tree<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>       <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> left right<span class=\"br0\">)</span><span class=\"br0\">)</span> #f<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>left <span class=\"br0\">(</span><span class=\"kw1\">cons</span> #\\<span class=\"nu0\">1</span> left<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>right <span class=\"br0\">(</span><span class=\"kw1\">cons</span> #\\<span class=\"nu0\">0</span> right<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>decode digits tree<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">eq?</span> <span class=\"br0\">(</span><span class=\"kw1\">caar</span> tree<span class=\"br0\">)</span> 'notleaf<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">caar</span> tree<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">eq?</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> digits<span class=\"br0\">)</span> #\\<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>decode <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> digits<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> tree<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>#t <span class=\"br0\">(</span>decode <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> digits<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">caddr</span> tree<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> input <span class=\"st0\">\"this is an example for huffman encoding\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> freq<span class=\"sy0\">-</span>table <span class=\"br0\">(</span>char<span class=\"sy0\">-</span>freq <span class=\"br0\">(</span>open<span class=\"sy0\">-</span>input<span class=\"sy0\">-</span><span class=\"kw1\">string</span> input<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> tree <span class=\"br0\">(</span>huffman<span class=\"sy0\">-</span>tree <span class=\"br0\">(</span>nodeify freq<span class=\"sy0\">-</span>table<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>list<span class=\"sy0\">-</span>encodings tree <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">car</span> freq<span class=\"sy0\">-</span>table<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "SETL", "loc": 38, "block": "<pre class=\"text highlighted_source\">var forest\u00a0:= {}, encTab\u00a0:= {};<br/>\u00a0<br/>plaintext\u00a0:= 'this is an example for huffman encoding';<br/>\u00a0<br/>ft\u00a0:= {};<br/>(for c in plaintext)<br/>  ft(c) +:= 1;<br/>end;<br/>\u00a0<br/>forest\u00a0:= {[f, c]: [c, f] in ft};<br/>(while 1 &lt; #forest)<br/>  [f1, n1]\u00a0:= getLFN();<br/>  [f2, n2]\u00a0:= getLFN();<br/>  forest with:= [f1+f2, [n1,n2]];<br/>end;<br/>addToTable('', arb range forest);<br/>\u00a0<br/>(for e = encTab(c))<br/>  print(c, ft(c), e);<br/>end;<br/>\u00a0<br/>print(+/ [encTab(c): c in plaintext]);<br/>\u00a0<br/>proc addToTable(prefix, node);<br/>  if is_tuple node then<br/>    addToTable(prefix + '0', node(1));<br/>    addToTable(prefix + '1', node(2));<br/>  else<br/>    encTab(node)\u00a0:= prefix;<br/>  end;<br/>end proc;<br/>\u00a0<br/>proc getLFN();<br/>  f\u00a0:= min/ domain forest;<br/>  n\u00a0:= arb forest{f};<br/>  forest less:= [f, n];<br/>  return [f, n];<br/>end proc;</pre>"}, {"lang": "Sidef", "loc": 54, "block": "<pre class=\"ruby highlighted_source\">func walk<span class=\"br0\">(</span>n, s, h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"re3\">:a</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        h<span class=\"br0\">{</span>n<span class=\"br0\">{</span>:a<span class=\"br0\">}</span><span class=\"br0\">}</span> = s<br/>        say <span class=\"st0\">\"#{n{:a}}: #{s}\"</span><br/>        <span class=\"kw2\">return</span> <span class=\"kw2\">nil</span><br/>    <span class=\"br0\">}</span><br/>    walk<span class=\"br0\">(</span>n<span class=\"br0\">{</span>:<span class=\"nu0\">0</span><span class=\"br0\">}</span>, s<span class=\"sy0\">+</span><span class=\"st0\">'0'</span>, h<span class=\"br0\">)</span><br/>    walk<span class=\"br0\">(</span>n<span class=\"br0\">{</span>:<span class=\"nu0\">1</span><span class=\"br0\">}</span>, s<span class=\"sy0\">+</span><span class=\"st0\">'1'</span>, h<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func make_tree<span class=\"br0\">(</span>text<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var letters = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    text.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> letters<span class=\"br0\">{</span>c<span class=\"br0\">}</span>\u00a0:= <span class=\"nu0\">0</span> <span class=\"sy0\">++</span> <span class=\"br0\">}</span><br/>    var nodes = letters.<span class=\"me1\">keys</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>l<span class=\"sy0\">|</span><br/>        <span class=\"kw4\">Hash</span><span class=\"br0\">(</span>a <span class=\"sy0\">=&gt;</span> l, freq <span class=\"sy0\">=&gt;</span> letters<span class=\"br0\">{</span>l<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    var n = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>nodes.<span class=\"me1\">sort_by</span>!<span class=\"br0\">{</span><span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> c<span class=\"br0\">{</span>:freq<span class=\"br0\">}</span> <span class=\"br0\">}</span>.<span class=\"me1\">len</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        n = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span>:<span class=\"nu0\">0</span> <span class=\"sy0\">=&gt;</span> nodes.<span class=\"me1\">shift</span>,\u00a0:<span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> nodes.<span class=\"me1\">shift</span><span class=\"br0\">)</span><br/>        n<span class=\"br0\">{</span>:freq<span class=\"br0\">}</span> = <span class=\"br0\">(</span>n<span class=\"br0\">{</span>:<span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">{</span>:freq<span class=\"br0\">}</span> <span class=\"sy0\">+</span> n<span class=\"br0\">{</span>:<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">{</span>:freq<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        nodes.<span class=\"me1\">append</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    walk<span class=\"br0\">(</span>n, <span class=\"st0\">\"\"</span>, n<span class=\"br0\">{</span>:tree<span class=\"br0\">}</span> = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">return</span> n<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func encode<span class=\"br0\">(</span>s, t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    t = t<span class=\"br0\">{</span>:tree<span class=\"br0\">}</span><br/>    s.<span class=\"me1\">chars</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> t<span class=\"br0\">{</span>c<span class=\"br0\">}</span> <span class=\"br0\">}</span>.<span class=\"me1\">join</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func decode <span class=\"br0\">(</span>enc, tree<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var n = tree<br/>    var out = <span class=\"st0\">\"\"</span><br/>\u00a0<br/>    enc.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>bit<span class=\"sy0\">|</span><br/>        n = n<span class=\"br0\">{</span>bit<span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n.<span class=\"me1\">contains</span><span class=\"br0\">(</span><span class=\"re3\">:a</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            out <span class=\"sy0\">+</span>= n<span class=\"br0\">{</span>:a<span class=\"br0\">}</span><br/>            n = tree<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">return</span> out<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var text = <span class=\"st0\">\"this is an example for huffman encoding\"</span><br/>var tree = make_tree<span class=\"br0\">(</span>text<span class=\"br0\">)</span><br/>var enc = encode<span class=\"br0\">(</span>text, tree<span class=\"br0\">)</span><br/>\u00a0<br/>say enc<br/>say decode<span class=\"br0\">(</span>enc, tree<span class=\"br0\">)</span></pre>"}, {"lang": "Standard ML", "loc": 57, "block": "<pre class=\"text highlighted_source\">datatype 'a huffman_tree =<br/>         Leaf of 'a<br/>       | Node of 'a huffman_tree * 'a huffman_tree<br/>\u00a0<br/>structure HuffmanPriority = struct<br/>  type priority = int<br/>(* reverse comparison to achieve min-heap *)<br/>  fun compare (a, b) = Int.compare (b, a)<br/>  type item = int * char huffman_tree<br/>  val priority\u00a0: item -&gt; int = #1<br/>end<br/>\u00a0<br/>structure HPQueue = LeftPriorityQFn (HuffmanPriority)<br/>\u00a0<br/>fun buildTree charFreqs = let<br/>    fun aux trees = let<br/>        val ((f1,a), trees) = HPQueue.remove trees<br/>    in<br/>        if HPQueue.isEmpty trees then<br/>            a<br/>        else let<br/>                val ((f2,b), trees) = HPQueue.remove trees<br/>                val trees = HPQueue.insert ((f1 + f2, Node (a, b)),<br/>                                            trees)<br/>            in<br/>                aux trees<br/>            end<br/>    end<br/>    val trees = HPQueue.fromList (map (fn (c,f) =&gt; (f, Leaf c)) charFreqs)<br/>in<br/>    aux trees<br/>end<br/>\u00a0<br/>fun printCodes (revPrefix, Leaf c) =<br/>    print (String.str c ^ \"\\t\" ^<br/>           implode (rev revPrefix) ^ \"\\n\")<br/>  | printCodes (revPrefix, Node (l, r)) = (<br/>    printCodes (#\"0\"::revPrefix, l);<br/>    printCodes (#\"1\"::revPrefix, r)<br/>    );<br/>\u00a0<br/>let<br/>    val test = \"this is an example for huffman encoding\"<br/>    val charFreqs = HashTable.mkTable<br/>                        (HashString.hashString o String.str, op=)<br/>                        (42, Empty)<br/>    val () =<br/>        app (fn c =&gt;<br/>                let val old = getOpt (HashTable.find charFreqs c, 0)<br/>                in HashTable.insert charFreqs (c, old+1)<br/>                end)<br/>            (explode test)<br/>    val tree = buildTree (HashTable.listItemsi charFreqs)<br/>in<br/>    print \"SYMBOL\\tHUFFMAN CODE\\n\";<br/>    printCodes ([], tree)<br/>end</pre>"}, {"lang": "Swift", "loc": 66, "block": "<pre class=\"text highlighted_source\">enum HuffmanTree&lt;T&gt; {<br/>  case Leaf(T)<br/>  indirect case Node(HuffmanTree&lt;T&gt;, HuffmanTree&lt;T&gt;)<br/>\u00a0<br/>  func printCodes(prefix: String) {<br/>    switch(self) {<br/>    case let .Leaf(c):<br/>      print(\"\\(c)\\t\\(prefix)\")<br/>    case let .Node(l, r):<br/>      l.printCodes(prefix + \"0\")<br/>      r.printCodes(prefix + \"1\")<br/>    }<br/>  }<br/>}<br/>\u00a0<br/>func buildTree&lt;T&gt;(freqs: [(T, Int)]) -&gt; HuffmanTree&lt;T&gt; {<br/>  assert(freqs.count &gt; 0, \"must contain at least one character\")<br/>  // leaves sorted by increasing frequency<br/>  let leaves\u00a0: [(Int, HuffmanTree&lt;T&gt;)] = freqs.sort { (p1, p2) in p1.1 &lt; p2.1 }.map { (x, w) in (w, .Leaf(x)) }<br/>  // nodes sorted by increasing frequency<br/>  var nodes = [(Int, HuffmanTree&lt;T&gt;)]()<br/>  // iterate through leaves and nodes in order of increasing frequency<br/>  for var i = 0, j = 0;\u00a0; {<br/>    assert(i &lt; leaves.count || j &lt; nodes.count)<br/>    // get subtree of least frequency<br/>    var e1\u00a0: (Int, HuffmanTree&lt;T&gt;)<br/>    if j == nodes.count || i &lt; leaves.count &amp;&amp; leaves[i].0 &lt; nodes[j].0 {<br/>      e1 = leaves[i]<br/>      i++<br/>    } else {<br/>      e1 = nodes[j]<br/>      j++<br/>    }<br/>\u00a0<br/>    // if there's no subtrees left, then that one was the answer<br/>    if i == leaves.count &amp;&amp; j == nodes.count {<br/>      return e1.1<br/>    }<br/>\u00a0<br/>    // get next subtree of least frequency<br/>    var e2\u00a0: (Int, HuffmanTree&lt;T&gt;)<br/>    if j == nodes.count || i &lt; leaves.count &amp;&amp; leaves[i].0 &lt; nodes[j].0 {<br/>      e2 = leaves[i]<br/>      i++<br/>    } else {<br/>      e2 = nodes[j]<br/>      j++<br/>    }<br/>    // create node from two subtrees<br/>    nodes.append((e1.0 + e2.0, .Node(e1.1, e2.1)))<br/>  }<br/>}<br/>\u00a0<br/>func getFreqs&lt;S\u00a0: SequenceType where S.Generator.Element\u00a0: Hashable&gt;(seq: S) -&gt; [(S.Generator.Element, Int)] {<br/>  var freqs\u00a0: [S.Generator.Element\u00a0: Int] = [:]<br/>  for c in seq {<br/>    freqs[c] = (freqs[c]\u00a0?? 0) + 1<br/>  }<br/>  return Array(freqs)<br/>}<br/>\u00a0<br/>let str = \"this is an example for huffman encoding\"<br/>let charFreqs = getFreqs(str.characters)<br/>let tree = buildTree(charFreqs)<br/>print(\"Symbol\\tHuffman code\")<br/>tree.printCodes(\"\")</pre>"}, {"lang": "Tcl", "loc": 53, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw2\">package</span> require struct::<span class=\"me1\">prioqueue</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> huffmanEncode <span class=\"br0\">{</span>str args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    array <span class=\"kw1\">set</span> opts <span class=\"br0\">[</span><span class=\"kw2\">concat</span> -dump false <span class=\"re0\">$args</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> charcount <span class=\"br0\">[</span>dict create<span class=\"br0\">]</span><br/>    <span class=\"kw1\">foreach</span> char <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"re0\">$str</span> <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        dict <span class=\"kw2\">incr</span> charcount <span class=\"re0\">$char</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> pq <span class=\"br0\">[</span>struct::<span class=\"me1\">prioqueue</span> -dictionary<span class=\"br0\">]</span> <span class=\"sy0\">;</span><span class=\"co1\"># want lower values to have higher priority</span><br/>    dict <span class=\"kw1\">for</span> <span class=\"br0\">{</span>char count<span class=\"br0\">}</span> <span class=\"re0\">$charcount</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$pq</span> put <span class=\"re0\">$char</span> <span class=\"re0\">$count</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re0\">$pq</span> size<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        lassign <span class=\"br0\">[</span><span class=\"re0\">$pq</span> peekpriority <span class=\"nu0\">2</span><span class=\"br0\">]</span> p1 p2<br/>        <span class=\"re0\">$pq</span> put <span class=\"br0\">[</span><span class=\"re0\">$pq</span> get <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$p1</span> + <span class=\"re0\">$p2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> encoding <span class=\"br0\">[</span>walkTree <span class=\"br0\">[</span><span class=\"re0\">$pq</span> get<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$opts</span><span class=\"br0\">(</span>-dump<span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">{</span>char huffCode<span class=\"br0\">}</span> <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -index <span class=\"nu0\">1</span> -stride <span class=\"nu0\">2</span> -command compare <span class=\"re0\">$encoding</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">puts</span> <span class=\"st0\">\"$char<span class=\"es0\">\\t</span>[dict get $charcount $char]<span class=\"es0\">\\t</span>$huffCode\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"re0\">$pq</span> destroy<br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$encoding</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> walkTree <span class=\"br0\">{</span>tree <span class=\"br0\">{</span>prefix <span class=\"st0\">\"\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$tree</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$tree</span> <span class=\"re0\">$prefix</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    lassign <span class=\"re0\">$tree</span> left right<br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">concat</span> <span class=\"br0\">[</span>walkTree <span class=\"re0\">$left</span> <span class=\"st0\">\"${prefix}0\"</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>walkTree <span class=\"re0\">$right</span> <span class=\"st0\">\"${prefix}1\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> compare <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$a</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$b</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> -<span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$a</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$b</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span>  <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> compare <span class=\"re0\">$a</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">set</span> str <span class=\"st0\">\"this is an example for huffman encoding\"</span><br/>\u00a0<br/><span class=\"kw1\">set</span> encoding <span class=\"br0\">[</span>huffmanEncode <span class=\"re0\">$str</span> -dump true<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"re0\">$str</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> map <span class=\"re0\">$encoding</span> <span class=\"re0\">$str</span><span class=\"br0\">]</span></pre>"}, {"lang": "Ursala", "loc": 14, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>#import flo<br/>\u00a0<br/>code_table = # takes a training dataset to a table &lt;char: code...&gt;<br/>\u00a0<br/>-+<br/>   *^ ~&amp;v?\\~&amp;iNC @v ~&amp;t?\\~&amp;h ~&amp;plrDSLrnPlrmPCAS/'01',<br/>   ~&amp;itB-&gt;h fleq-&lt;&amp;d; ^C\\~&amp;tt @hthPX ^V\\~&amp;lrNCC <a class=\"__cf_email__\" data-cfemail=\"4939253c3a092b2d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,<br/>   ^V(<a class=\"__cf_email__\" data-cfemail=\"32565b44724040625e6a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,~&amp;rlNVNC)^*D(plus:<a class=\"__cf_email__\" data-cfemail=\"85a8b5abc5f7d6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>,~&amp;)+ *K2 ^/~&amp;h float+ length+-<br/>\u00a0<br/>#cast\u00a0%csAL<br/>\u00a0<br/>table = code_table 'this is an example for huffman encoding'</pre>"}, {"lang": "zkl", "loc": 23, "block": "<pre class=\"text highlighted_source\">fcn buildHuffman(text){  //--&gt;(encode dictionary, decode dictionary)<br/>   ft:=Dictionary();<br/>   foreach c in (text){ ft[c]=ft.find(c,0)+1 }  // leafs w/count<br/>\u00a0<br/>   // build the tree, which is a list of lists of ...<br/>   tree:=ft.pump(List,fcn([(c,cnt)]){  //--&gt;L( (cnt, ((sym,code))), ...)<br/>      L(cnt, L(L(c,\"\")))<br/>   }).copy();\t// make it writable<br/>\u00a0<br/>   while(tree.len()&gt;1){  // fake up a [lame] priorty queue<br/>      tree=tree.sort(fcn(a,b){ a[0]&gt;b[0] }); //prioritize high to low<br/>      a,b:=tree.pop(-2,2);\t        //remove 2 least frequent symbols<br/>      mc:=fcn(n,c){ n[1] = c + n[1]; };\t//(sym,code),\"0\"|\"1\"<br/>      a[1].apply2(mc,\"0\"); b[1].apply2(mc,\"1\"); // mc(a[1],\"0\")<br/>      tree.append( L(a[0]+b[0],a[1].extend(b[1])) ); //(a,b)--&gt;new node<br/>   }//--&gt;L(L(39, L( L(\" \",\"000\"),L(\"e\",\"0010\"),L(\"a\",\"0011\") ...<br/>\u00a0<br/>   tree=tree[0][1].pump(List,fcn(i){ // flatten rather than traverse<br/>\tif(T.isType(i))return(Void.Recurse,i,self.fcn); i });<br/>   encodeTable:=tree.toDictionary();  // symbol:Huffman code<br/>   decodeTable:=encodeTable.pump(Dictionary(),\"reverse\"); // code:symbol<br/>   return(encodeTable,decodeTable);<br/>}</pre>"}]}