{"task": "Split_a_character_string_based_on_change_of_character", "blocks": [{"lang": "Ada", "loc": 18, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">procedure</span> Split <span class=\"kw1\">is</span> <br/>  <span class=\"kw3\">procedure</span> Print_Tokens <span class=\"br0\">(</span>s\u00a0: String<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>    i, j\u00a0: Integer\u00a0:= s'First;<br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">while</span> j&lt;=s'Last <span class=\"kw2\">and</span> <span class=\"kw1\">then</span> s<span class=\"br0\">(</span>j<span class=\"br0\">)</span>=s<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">loop</span> j\u00a0:= j + <span class=\"nu0\">1</span>; <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">if</span> i/=s'first <span class=\"kw1\">then</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span>; <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>s<span class=\"br0\">(</span>i..<span class=\"me1\">j</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      i\u00a0:= j;<br/>      <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> j&gt;s'last;<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>  <span class=\"kw1\">end</span> Print_Tokens;<br/><span class=\"kw1\">begin</span><br/>  Print_Tokens <span class=\"br0\">(</span><span class=\"st0\">\"gHHH5YY+++\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> split;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 30, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>    <span class=\"coMULTI\"># returns s with \", \" added between each change of character #</span><br/>    <span class=\"kw4\">PROC</span> split on characters <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> s <span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span><br/>         <span class=\"kw2\">IF</span> s <span class=\"sy1\">=</span> <span class=\"st0\">\"\"</span> <span class=\"kw2\">THEN</span><br/>            <span class=\"coMULTI\"># empty string #</span><br/>            <span class=\"st0\">\"\"</span><br/>         <span class=\"kw2\">ELSE</span><br/>            <span class=\"coMULTI\"># allow for 3 times as many characters as in the string #</span><br/>            <span class=\"coMULTI\"># this would handle a string of unique characters       #</span><br/>            <span class=\"br0\">[</span> 3 <span class=\"sy1\">*</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw8\">UPB</span> s <span class=\"sy1\">-</span> <span class=\"kw8\">LWB</span> s <span class=\"br0\">)</span> <span class=\"sy1\">+</span> 1 <span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"kw3\">CHAR</span> result<span class=\"sy1\">;</span><br/>            <span class=\"kw3\">INT</span>  r pos  <span class=\"sy1\">:=</span> <span class=\"kw8\">LWB</span> result<span class=\"sy1\">;</span><br/>            <span class=\"kw3\">INT</span>  s pos  <span class=\"sy1\">:=</span> <span class=\"kw8\">LWB</span> s<span class=\"sy1\">;</span><br/>            <span class=\"kw3\">CHAR</span> s char <span class=\"sy1\">:=</span> s<span class=\"br0\">[</span> <span class=\"kw8\">LWB</span> s <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>            <span class=\"kw2\">FOR</span> s pos <span class=\"kw2\">FROM</span> <span class=\"kw8\">LWB</span> s <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> s <span class=\"kw2\">DO</span><br/>                <span class=\"kw2\">IF</span> s char <span class=\"sy1\">/=</span> s<span class=\"br0\">[</span> s pos <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span><br/>                    <span class=\"coMULTI\"># change of character - insert \", \" #</span><br/>                    result<span class=\"br0\">[</span> r pos     <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"st0\">\",\"</span><span class=\"sy1\">;</span><br/>                    result<span class=\"br0\">[</span> r pos <span class=\"sy1\">+</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">;</span><br/>                    r pos <span class=\"sy1\">+:=</span> 2<span class=\"sy1\">;</span><br/>                    s char <span class=\"sy1\">:=</span> s<span class=\"br0\">[</span> s pos <span class=\"br0\">]</span><br/>                <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>                result<span class=\"br0\">[</span> r pos <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> s<span class=\"br0\">[</span> s pos <span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>                r pos <span class=\"sy1\">+:=</span> 1<br/>            <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>            <span class=\"coMULTI\"># return the used portion of the result #</span><br/>            result<span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> r pos <span class=\"sy1\">-</span> 1 <span class=\"br0\">]</span><br/>         <span class=\"kw2\">FI</span> <span class=\"sy1\">;</span> <span class=\"coMULTI\"># split on characters #</span><br/>\u00a0<br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> split on characters<span class=\"br0\">(</span> <span class=\"st0\">\"gHHH5YY++///\\\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/><span class=\"kw2\">END</span></pre>"}, {"lang": "AppleScript", "loc": 117, "block": "<pre class=\"applescript highlighted_source\">intercalate<span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, \u00ac<br/>    map<span class=\"br0\">(</span>curry<span class=\"br0\">(</span>intercalate<span class=\"br0\">)</span>'s |\u03bb|<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>, \u00ac<br/>        group<span class=\"br0\">(</span><span class=\"st0\">\"gHHH5YY++///<span class=\"es0\">\\\\</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">--&gt; \"g, HHH, 5, YY, ++, ///, \\\\\"</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ----------------------------------------------------------</span><br/><span class=\"co1\">-- curry\u00a0:: (Script|Handler) -&gt; Script</span><br/><span class=\"kw3\">on</span> curry<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>                    |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"kw3\">of</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> curry<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- group\u00a0:: Eq a =&gt; [a] -&gt; [[a]]</span><br/><span class=\"kw3\">on</span> group<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span> eq<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>            a <span class=\"sy0\">=</span> b<br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    groupBy<span class=\"br0\">(</span>eq, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> group<br/>\u00a0<br/><span class=\"co1\">-- groupBy\u00a0:: (a -&gt; a -&gt; Bool) -&gt; [a] -&gt; [[a]]</span><br/><span class=\"kw3\">on</span> groupBy<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> mf <span class=\"kw3\">to</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> enGroup<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, x<span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> <span class=\"br0\">(</span>active <span class=\"kw3\">of</span> a<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>                <span class=\"kw3\">set</span> h <span class=\"kw3\">to</span> <span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> active <span class=\"kw3\">of</span> a<br/>            <span class=\"kw3\">else</span><br/>                <span class=\"kw3\">set</span> h <span class=\"kw3\">to</span> <span class=\"kw1\">missing value</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>            <span class=\"kw3\">if</span> h <span class=\"kw3\">is</span> <span class=\"kw2\">not</span> <span class=\"kw1\">missing value</span> <span class=\"kw2\">and</span> mf<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>h, x<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>                <span class=\"br0\">{</span>active:<span class=\"br0\">(</span>active <span class=\"kw3\">of</span> a<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> x, sofar:sofar <span class=\"kw3\">of</span> a<span class=\"br0\">}</span><br/>            <span class=\"kw3\">else</span><br/>                <span class=\"br0\">{</span>active:<span class=\"br0\">{</span>x<span class=\"br0\">}</span>, sofar:<span class=\"br0\">(</span>sofar <span class=\"kw3\">of</span> a<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">{</span>active <span class=\"kw3\">of</span> a<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">tell</span> foldl<span class=\"br0\">(</span>enGroup, <span class=\"br0\">{</span>active:<span class=\"br0\">{</span><span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<span class=\"br0\">}</span>, sofar:<span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span>, tail<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> <span class=\"br0\">(</span>its active<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>                its sofar <span class=\"sy0\">&amp;</span> its active<br/>            <span class=\"kw3\">else</span><br/>                <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> groupBy<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- tail\u00a0:: [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> tail<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw1\">items</span> <span class=\"nu0\">2</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> tail</pre>"}, {"lang": "BaCon", "loc": 12, "block": "<pre class=\"freebasic highlighted_source\">txt$ = <span class=\"st0\">\"gHHH5YY++///<span class=\"es0\">\\\\</span>\"</span><br/>\u00a0<br/>c$ = <span class=\"kw1\">LEFT</span>$<span class=\"br0\">(</span>txt$, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">LEN</span><span class=\"br0\">(</span>txt$<span class=\"br0\">)</span><br/>    d$ = <span class=\"kw1\">MID</span>$<span class=\"br0\">(</span>txt$, x, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">IF</span> d$ &lt;&gt; c$ <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">PRINT</span> <span class=\"st0\">\", \"</span>;<br/>        c$ = d$<br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>    <span class=\"kw1\">PRINT</span> d$;<br/><span class=\"kw1\">NEXT</span></pre>"}, {"lang": "BBC BASIC", "loc": 17, "block": "<pre class=\"text highlighted_source\">REM &gt;split<br/>PRINT FN_split( \"gHHH5YY++///\\\" )<br/>END<br/>:<br/>DEF FN_split( s$ )<br/>LOCAL c$, d$, split$, i%<br/>c$ = LEFT$( s$, 1 )<br/>split$ = \"\"<br/>FOR i% = 1 TO LEN s$<br/>  d$ = MID$( s$, i%, 1 )<br/>  IF d$ &lt;&gt; c$ THEN<br/>    split$ += \", \"<br/>    c$ = d$<br/>  ENDIF<br/>  split$ += d$<br/>NEXT<br/>= split$</pre>"}, {"lang": "C", "loc": 24, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>split<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>str<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span><span class=\"kw4\">char</span> <span class=\"sy0\">**</span>argv<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> input<span class=\"br0\">[</span><span class=\"nu0\">13</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"st0\">\"gHHH5YY++///<span class=\"es1\">\\\\</span>\"</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span>split<span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>split<span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>str<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span> last<span class=\"sy0\">=*</span>str<span class=\"sy0\">,*</span>result<span class=\"sy0\">=</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">*</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,*</span>counter<span class=\"sy0\">=</span>result<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> <span class=\"sy0\">*</span>c<span class=\"sy0\">=</span>str<span class=\"sy0\">;*</span>c<span class=\"sy0\">;</span>c<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>c<span class=\"sy0\">!=</span>last<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strcpy.html\"><span class=\"kw3\">strcpy</span></a><span class=\"br0\">(</span>counter<span class=\"sy0\">,</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tcounter<span class=\"sy0\">+=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\t\t\tlast<span class=\"sy0\">=*</span>c<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"sy0\">*</span>counter<span class=\"sy0\">=*</span>c<span class=\"sy0\">;</span><br/>\t\tcounter<span class=\"sy0\">++;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"sy0\">*</span><span class=\"br0\">(</span>counter<span class=\"sy0\">--</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/realloc.html\"><span class=\"kw3\">realloc</span></a><span class=\"br0\">(</span>result<span class=\"sy0\">,</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 32, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">string</span> s <span class=\"sy0\">=</span> <span class=\"st_h\">@\"gHHH5YY++///\\\"</span><span class=\"sy0\">;</span><br/>    Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>s<span class=\"sy0\">.</span><span class=\"me1\">RunLengthSplit</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">Delimit</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Extensions<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> RunLengthSplit<span class=\"br0\">(</span><span class=\"kw1\">this</span> <span class=\"kw4\">string</span> source<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">using</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> enumerator <span class=\"sy0\">=</span> source<span class=\"sy0\">.</span><span class=\"me1\">GetEnumerator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>enumerator<span class=\"sy0\">.</span><span class=\"me1\">MoveNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">yield</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">char</span> previous <span class=\"sy0\">=</span> enumerator<span class=\"sy0\">.</span><span class=\"me1\">Current</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>enumerator<span class=\"sy0\">.</span><span class=\"me1\">MoveNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>previous <span class=\"sy0\">==</span> enumerator<span class=\"sy0\">.</span><span class=\"me1\">Current</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    count<span class=\"sy0\">++;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">string</span><span class=\"br0\">(</span>Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Repeat</span><span class=\"br0\">(</span>previous, count<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    previous <span class=\"sy0\">=</span> enumerator<span class=\"sy0\">.</span><span class=\"me1\">Current</span><span class=\"sy0\">;</span><br/>                    count <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">string</span><span class=\"br0\">(</span>Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Repeat</span><span class=\"br0\">(</span>previous, count<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">string</span> Delimit<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"kw1\">this</span> IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> source, <span class=\"kw4\">string</span> separator <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span>separator <span class=\"sy0\">??</span> <span class=\"st0\">\"\"</span>, source<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 26, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co1\">// Solution for http://rosettacode.org/wiki/Split_a_character_string_based_on_change_of_character</span><br/><span class=\"co2\">#include&lt;string&gt;</span><br/><span class=\"co2\">#include&lt;iostream&gt;</span><br/><span class=\"kw4\">auto</span> spliter<span class=\"br0\">(</span><span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"sy3\">&amp;</span>input<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw4\">auto</span> firstCommaPast <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> res <span class=\"sy1\">=</span><span class=\"st0\">\"\"</span><span class=\"sy4\">;</span><br/>   <span class=\"kw4\">auto</span> prev <span class=\"sy1\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">auto</span> it <span class=\"sy1\">=</span> input.<span class=\"me1\">cbegin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> input.<span class=\"me1\">cend</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><span class=\"sy2\">++</span>it<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>it<span class=\"sy3\">!</span><span class=\"sy1\">=</span>prev<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>         <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy3\">!</span>firstCommaPast<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            firstCommaPast <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>         <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>            res<span class=\"sy2\">+</span><span class=\"sy1\">=</span><span class=\"st0\">\", \"</span><span class=\"sy4\">;</span><br/>         <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      res<span class=\"sy2\">+</span><span class=\"sy1\">=</span><span class=\"sy2\">*</span>it<span class=\"sy4\">;</span><br/>      prev<span class=\"sy1\">=</span><span class=\"sy2\">*</span>it<span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> res<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw4\">auto</span> input <span class=\"sy1\">=</span> R<span class=\"st0\">\"(gHHH5  ))YY++,,,///\\)\"</span><span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span><span class=\"sy1\">&lt;&lt;</span>spliter<span class=\"br0\">(</span>input<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span>  </pre>"}, {"lang": "Clojure", "loc": 5, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> print<span class=\"sy0\">-</span>cchanges <span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>println <span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>string<span class=\"sy0\">/</span>join <span class=\"st0\">\", \"</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"kw1\">first</span> <span class=\"br0\">(</span><span class=\"kw1\">re-seq</span> #<span class=\"st0\">\"(.)<span class=\"es0\">\\1</span>*\"</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>print<span class=\"sy0\">-</span>cchanges <span class=\"st0\">\"gHHH5YY++///<span class=\"es0\">\\\\</span>\"</span><span class=\"br0\">)</span> <br/>\u00a0</pre>"}, {"lang": "COBOL", "loc": 63, "block": "<pre class=\"cobol highlighted_source\">\u00a0<br/>       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> split-<span class=\"kw3\">ch</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">1</span> split-str <span class=\"kw3\">pic</span> x<span class=\"br0\">(</span><span class=\"nu0\">30</span><span class=\"br0\">)</span> <span class=\"kw3\">value</span> <span class=\"kw3\">space</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">88</span> str-<span class=\"nu0\">1</span> <span class=\"kw3\">value</span> <span class=\"st0\">\"gHHH5YY++///<span class=\"es0\">\\\"</span>.<br/>       88 str-2 value \"</span>gHHH5  <span class=\"br0\">)</span><span class=\"br0\">)</span>YY++<span class=\"sy0\">,,,</span>///\\<span class=\"st0\">\".<br/>       1 binary.<br/>        2 ptr pic 9(4) value 1.<br/>        2 str-start pic 9(4) value 1.<br/>        2 delim-len pic 9(4) value 1.<br/>        2 split-str-len pic 9(4) value 0.<br/>        2 trash-9 pic 9(4) value 0.<br/>       1 delim-char pic x value space.<br/>       1 delim-str pic x(6) value space.<br/>       1 trash-x pic x.<br/>       procedure division.<br/>           display \"</span>Requested <span class=\"kw3\">string</span><span class=\"st0\">\"<br/>           set str-1 to true<br/>           perform split-init-and-go<br/>           display space<br/>           display \"</span><span class=\"kw3\">With</span> <span class=\"kw3\">spaces</span> <span class=\"kw3\">and</span> commas<span class=\"st0\">\"<br/>           set str-2 to true<br/>           perform split-init-and-go<br/>           stop run<br/>           .<br/>\u00a0<br/>       split-init-and-go.<br/>           move 1 to ptr<br/>           move 0 to split-str-len<br/>           perform split<br/>           .<br/>\u00a0<br/>       split.<br/>           perform get-split-str-len<br/>           display split-str (1:split-str-len)<br/>           perform until ptr &gt; split-str-len<br/>               move ptr to str-start<br/>               move split-str (ptr:1) to delim-char<br/>               unstring split-str (1:split-str-len)<br/>                   delimited all delim-char<br/>                   into trash-x delimiter delim-str<br/>                   pointer ptr<br/>               end-unstring<br/>               subtract str-start from ptr giving delim-len<br/>               move split-str (str-start:delim-len)<br/>                   to delim-str (1:delim-len)<br/>               display delim-str (1:delim-len) with no advancing<br/>               if ptr &lt;= split-str-len<br/>                   display \"</span><span class=\"sy0\">,</span> <span class=\"st0\">\" with no advancing<br/>               end-if<br/>           end-perform<br/>           display space<br/>           .<br/>\u00a0<br/>       get-split-str-len.<br/>           inspect function reverse (split-str) tallying<br/>               trash-9 for leading space<br/>               split-str-len for characters after space<br/>           .<br/>\u00a0<br/>       end program split-ch.<br/></span></pre>"}, {"lang": "Common Lisp", "loc": 7, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> split <span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop <span class=\"sy0\">:</span><span class=\"me1\">for</span> prev <span class=\"sy0\">:=</span> <span class=\"kw1\">nil</span> <span class=\"sy0\">:</span><span class=\"me1\">then</span> c<br/>     <span class=\"sy0\">:</span><span class=\"me1\">for</span> c <span class=\"sy0\">:</span><span class=\"me1\">across</span> string<br/>     <span class=\"sy0\">:</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\"~:[~;, ~]~c\"</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> prev <span class=\"br0\">(</span>char/<span class=\"sy0\">=</span> c prev<span class=\"br0\">)</span><span class=\"br0\">)</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>split <span class=\"st0\">\"gHHH5YY++///<span class=\"es0\">\\\\</span>\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 15, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> source <span class=\"sy0\">=</span> <span class=\"st0\">\"gHHH5YY++///<span class=\"es1\">\\\\</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">char</span> prev <span class=\"sy0\">=</span> source<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span><span class=\"br0\">(</span>ch<span class=\"sy0\">;</span> source<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>prev <span class=\"sy0\">!=</span> ch<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            prev <span class=\"sy0\">=</span> ch<span class=\"sy0\">;</span><br/>            write<span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        write<span class=\"br0\">(</span>ch<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    writeln<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 9, "block": "<pre class=\"text highlighted_source\">split = fn str -&gt;<br/>          IO.puts \" input string: #{str}\"<br/>          String.graphemes(str)<br/>          |&gt; Enum.chunk_by(&amp;(&amp;1))<br/>          |&gt; Enum.map_join(\", \", &amp;Enum.join &amp;1)<br/>          |&gt; fn s -&gt; IO.puts \"output string: #{s}\" end.()<br/>        end<br/>\u00a0<br/>split.(\"gHHH5YY++///\\\\\")</pre>"}, {"lang": "F#", "loc": 3, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System.<span class=\"me1\">Text</span>.<span class=\"me1\">RegularExpressions</span><br/><span class=\"kw1\">let</span> splitRuns s <span class=\"sy0\">=</span> Regex<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"(.)<span class=\"es0\">\\1</span>*\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">Matches</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">cast</span><span class=\"sy0\">&lt;</span>Match<span class=\"sy0\">&gt;</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> m <span class=\"sy0\">-&gt;</span> m.<span class=\"me1\">Value</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">toList</span><br/>printfn <span class=\"st0\">\"%A\"</span> <span class=\"br0\">(</span>splitRuns <span class=\"st0\">\"\"</span><span class=\"st0\">\"gHHH5YY++///<span class=\"es0\">\\\"</span>\"</span><span class=\"st0\">\")</span></pre>"}, {"lang": "Factor", "loc": 6, "block": "<pre class=\"text highlighted_source\">USE: splitting.monotonic<br/>\u00a0<br/>: splitc ( str -- str' ) [ = ] monotonic-split \", \" join\u00a0;<br/>\u00a0<br/>\"gHHH5YY++///\\\\\" splitc print<br/>\"aaabbccccdeeff\" splitc print</pre>"}, {"lang": "Forth", "loc": 13, "block": "<pre class=\"text highlighted_source\">CREATE A 0 ,               <br/>: <a class=\"__cf_email__\" data-cfemail=\"60232021\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+   A @ <a class=\"__cf_email__\" data-cfemail=\"226162\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  [ 1 CHARS ]L A +!\u00a0;<br/>: SPLIT. ( c-addr u --) SWAP A\u00a0!  A @ <a class=\"__cf_email__\" data-cfemail=\"286b68\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>   BEGIN OVER WHILE<br/>     <a class=\"__cf_email__\" data-cfemail=\"8dcecdcc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+  TUCK  &lt;&gt; IF .\" , \" THEN   <br/>     DUP EMIT  SWAP 1- SWAP<br/>   REPEAT  DROP\u00a0;<br/>: TEST   OVER OVER<br/>   .\" input: \" TYPE CR<br/>   .\" split: \" SPLIT. CR\u00a0;<br/>s\" gHHH5YY++///\\\"        TEST<br/>s\" gHHH5  ))YY++,,,///\\\" TEST<br/>BYE</pre>"}, {"lang": "Fortran", "loc": 21, "block": "<pre class=\"fortran highlighted_source\">      <span class=\"kw1\">SUBROUTINE</span> SPLATTER<span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span>\t<span class=\"co1\">!Print a comma-separated list. Repeated characters constitute one item.</span><br/><span class=\"co1\">Can't display the inserted commas in a different colour so as not to look like any commas in TEXT.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> TEXT\t<span class=\"co1\">!The text.</span><br/>       <span class=\"kw3\">INTEGER</span> L\t<span class=\"co1\">!A finger.</span><br/>       <span class=\"kw3\">CHARACTER</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span> C\t<span class=\"co1\">!A state follower.</span><br/>        <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">LEN</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span>.<span class=\"me1\">LE</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">RETURN</span>\t<span class=\"co1\">!Prevent surprises in the following..</span><br/>        C <span class=\"sy0\">=</span> TEXT<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Syncopation: what went before.</span><br/>        <span class=\"kw1\">DO</span> L <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,<span class=\"kw4\">LEN</span><span class=\"br0\">(</span>TEXT<span class=\"br0\">)</span>\t<span class=\"co1\">!Step through the text.</span><br/>          <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>C.<span class=\"me1\">NE</span>.<span class=\"me1\">TEXT</span><span class=\"br0\">(</span>L<span class=\"sy0\">:</span>L<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span>\t<span class=\"co1\">!A change of character?</span><br/>            C <span class=\"sy0\">=</span> TEXT<span class=\"br0\">(</span>L<span class=\"sy0\">:</span>L<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!Yes. This is the new normal.</span><br/>            WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">\", \"</span>\t\t\t<span class=\"co1\">!Set off from what went before. This is not from TEXT.</span><br/>          <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span>\t\t\t<span class=\"co1\">!So much for changes.</span><br/>          WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span> C\t\t\t<span class=\"co1\">!Roll the current character. (=TEXT(L:L))</span><br/>    <span class=\"nu0\">1</span>     FORMAT <span class=\"br0\">(</span>A,$<span class=\"br0\">)</span>\t\t\t<span class=\"co1\">!The $ sez: do not end the line.</span><br/>        <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span>\t\t\t<span class=\"co1\">!On to the next character.</span><br/>        WRITE <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span>\t<span class=\"co1\">!Thus end the line. No output item means that the $ is not reached, so the line is ended.</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">SUBROUTINE</span> SPLATTER\t<span class=\"co1\">!TEXT with spaces, or worse, commas, will produce an odd-looking list.</span><br/>\u00a0<br/>      <span class=\"kw1\">PROGRAM</span> POKE<br/>      <span class=\"kw1\">CALL</span> SPLATTER<span class=\"br0\">(</span><span class=\"st0\">\"gHHH5YY++///<span class=\"es0\">\\\"</span>)\t!The example given.<br/>      END</span></pre>"}, {"lang": "Go", "loc": 27, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>scc<span class=\"sy1\">(</span><span class=\"co2\">`gHHH5YY++///\\`</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> scc<span class=\"sy1\">(</span>s <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> &lt; <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> s<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">var</span> b strings<span class=\"sy3\">.</span>Builder<br/>    p <span class=\"sy2\">:=</span> s<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>    b<span class=\"sy3\">.</span>WriteByte<span class=\"sy1\">(</span>p<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span>s<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:])</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> c <span class=\"sy2\">!=</span> p <span class=\"sy1\">{</span><br/>            b<span class=\"sy3\">.</span>WriteString<span class=\"sy1\">(</span><span class=\"st0\">\", \"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        b<span class=\"sy3\">.</span>WriteByte<span class=\"sy1\">(</span>c<span class=\"sy1\">)</span><br/>        p <span class=\"sy2\">=</span> c<br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> b<span class=\"sy3\">.</span>String<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 4, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>group<span class=\"sy0\">,</span> intercalate<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> intercalate <span class=\"st0\">\", \"</span> <span class=\"br0\">(</span>group <span class=\"st0\">\"gHHH5YY++///<span class=\"es0\">\\\\</span>\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">splitChars=: <span class=\"sy0\">(</span><span class=\"nu0\">1</span> ,~ <span class=\"nu0\">2</span> ~:/\\ ]<span class=\"sy0\">)</span> &lt;;.<span class=\"nu0\">2</span> ]<br/>delimitChars=: <span class=\"st_h\">', '</span> joinstring splitChars</pre>"}, {"lang": "Java", "loc": 65, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">package</span> <span class=\"co2\">org.rosettacode</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co3\">/**<br/> * This class provides a main method that will, for each arg provided,<br/> * transform a String into a list of sub-strings, where each contiguous<br/> * series of characters is made into a String, then the next, and so on,<br/> * and then it will output them all separated by a comma and a space.<br/> */</span><br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> SplitStringByCharacterChange <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>... <span class=\"me1\">args</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> string <span class=\"sy0\">:</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>            List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> resultStrings <span class=\"sy0\">=</span> splitStringByCharacter<span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> output <span class=\"sy0\">=</span> formatList<span class=\"br0\">(</span>resultStrings<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>     * @param string String - String to split<br/>     * @return List&lt;\\String&gt; - substrings of contiguous characters<br/>     */</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> splitStringByCharacter<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> string<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>        List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> resultStrings <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ArrayList<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        StringBuilder currentString <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> pointer <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> pointer <span class=\"sy0\">&lt;</span> string.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> pointer<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>            currentString.<span class=\"me1\">append</span><span class=\"br0\">(</span>string.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>pointer<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pointer <span class=\"sy0\">==</span> string.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <br/>                    <span class=\"sy0\">||</span> currentString.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> string.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>pointer <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                resultStrings.<span class=\"me1\">add</span><span class=\"br0\">(</span>currentString.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                currentString <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> resultStrings<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>     * @param list List&lt;\\String&gt; - list of strings to format as a comma+space-delimited string<br/>     * @return String<br/>     */</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> formatList<span class=\"br0\">(</span>List<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> list<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>        StringBuilder output <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> pointer <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> pointer <span class=\"sy0\">&lt;</span> list.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> pointer<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            output.<span class=\"me1\">append</span><span class=\"br0\">(</span>list.<span class=\"me1\">get</span><span class=\"br0\">(</span>pointer<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pointer <span class=\"sy0\">!=</span> list.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                output.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> output.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 56, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// GENERIC FUNCTIONS ------------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// concat\u00a0:: [[a]] -&gt; [a] | [String] -&gt; String</span><br/>    <span class=\"kw1\">const</span> concat <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span><br/>        xs.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">const</span> unit <span class=\"sy0\">=</span> <span class=\"kw1\">typeof</span> xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">===</span> <span class=\"st0\">'string'</span> <span class=\"sy0\">?</span> <span class=\"st0\">''</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> unit.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span>unit<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// group\u00a0:: Eq a =&gt; [a] -&gt; [[a]]</span><br/>    <span class=\"kw1\">const</span> group <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> groupBy<span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">===</span> b<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// groupBy\u00a0:: (a -&gt; a -&gt; Bool) -&gt; [a] -&gt; [[a]]</span><br/>    <span class=\"kw1\">const</span> groupBy <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> dct <span class=\"sy0\">=</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">const</span><br/>                    h <span class=\"sy0\">=</span> a.<span class=\"me1\">active</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> a.<span class=\"me1\">active</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"kw2\">undefined</span><span class=\"sy0\">,</span><br/>                    blnGroup <span class=\"sy0\">=</span> h <span class=\"sy0\">!==</span> <span class=\"kw2\">undefined</span> <span class=\"sy0\">&amp;&amp;</span> f<span class=\"br0\">(</span>h<span class=\"sy0\">,</span> x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">return</span> <span class=\"br0\">{</span><br/>                    active<span class=\"sy0\">:</span> blnGroup <span class=\"sy0\">?</span> a.<span class=\"me1\">active</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span><span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                    sofar<span class=\"sy0\">:</span> blnGroup <span class=\"sy0\">?</span> a.<span class=\"me1\">sofar</span> <span class=\"sy0\">:</span> a.<span class=\"me1\">sofar</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span><span class=\"br0\">[</span>a.<span class=\"me1\">active</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">{</span><br/>                active<span class=\"sy0\">:</span> xs.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span>xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                sofar<span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> dct.<span class=\"me1\">sofar</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>dct.<span class=\"me1\">active</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span>dct.<span class=\"me1\">active</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// intercalate\u00a0:: String -&gt; [a] -&gt; String</span><br/>    <span class=\"kw1\">const</span> intercalate <span class=\"sy0\">=</span> <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">join</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/>    <span class=\"kw1\">const</span> map <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// show\u00a0:: a -&gt; String</span><br/>    <span class=\"kw1\">const</span> show <span class=\"sy0\">=</span> <span class=\"br0\">(</span>...<span class=\"me1\">x</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        JSON.<span class=\"me1\">stringify</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><br/>            <span class=\"kw2\">null</span><span class=\"sy0\">,</span> x.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span>x<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw2\">null</span><span class=\"sy0\">,</span> x<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> x<br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// stringChars\u00a0:: String -&gt; [Char]</span><br/>    <span class=\"kw1\">const</span> stringChars <span class=\"sy0\">=</span> s <span class=\"sy0\">=&gt;</span> s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"co1\">// TEST -------------------------------------------------------------------</span><br/>    <span class=\"kw1\">return</span> show<span class=\"br0\">(</span><br/>        intercalate<span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"sy0\">,</span><br/>            map<span class=\"br0\">(</span>concat<span class=\"sy0\">,</span> group<span class=\"br0\">(</span>stringChars<span class=\"br0\">(</span><span class=\"st0\">'gHHH5YY++///<span class=\"es0\">\\\\</span>'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// -&gt; \"g, HHH, 5, YY, ++, ///, \\\\\"</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 13, "block": "<pre class=\"text highlighted_source\"># input: a string<br/># output: a stream of runs<br/>def runs:<br/>  def init:<br/>    explode as $s<br/>    | $s[0] as $i<br/>    | (1 | until( $s[.]\u00a0!= $i; .+1));<br/>  if length == 0 then empty<br/>  elif length == 1 then .<br/>  else init as $n | .[0:$n], (.[$n:] | runs)<br/>  end;<br/>\u00a0<br/>\"gHHH5YY++///\\\\\" | [runs] | join(\", \")</pre>"}, {"lang": "Julia", "loc": 6, "block": "<pre class=\"text highlighted_source\"># v0.6<br/>using IterTools<br/>\u00a0<br/>str = \"gHHH5YY++///\\\\\"<br/>sep = map(join, groupby(identity, str))<br/>println(\"string: $str\\nseparated: \", join(sep, \", \"))</pre>"}, {"lang": "Kotlin", "loc": 15, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun splitOnChange<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> s<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> t <span class=\"sy0\">=</span> s.<span class=\"me1\">take</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span> until s.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>t.<span class=\"me1\">last</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> t +<span class=\"sy0\">=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> t +<span class=\"sy0\">=</span> <span class=\"st0\">\", \"</span> + s<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> t<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"gHHH5YY++///<span class=\"es1\">\\\"</span>\"</span><span class=\"st0\">\"<br/>    println(splitOnChange(s))<br/>}</span></pre>"}, {"lang": "Lua", "loc": 13, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> charSplit <span class=\"br0\">(</span>inStr<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> outStr<span class=\"sy0\">,</span> nextChar <span class=\"sy0\">=</span> inStr<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> pos <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>inStr <span class=\"kw1\">do</span><br/>        nextChar <span class=\"sy0\">=</span> inStr<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span>pos<span class=\"sy0\">,</span> pos<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> nextChar <span class=\"sy0\">~=</span> outStr<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"sy0\">#</span>outStr<span class=\"sy0\">,</span> <span class=\"sy0\">#</span>outStr<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            outStr <span class=\"sy0\">=</span> outStr <span class=\"sy0\">..</span> <span class=\"st0\">\", \"</span><br/>        <span class=\"kw1\">end</span><br/>        outStr <span class=\"sy0\">=</span> outStr <span class=\"sy0\">..</span> nextChar<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> outStr<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>charSplit<span class=\"br0\">(</span><span class=\"st0\">\"gHHH5YY++///<span class=\"es1\">\\\\</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module PrintParts(splitthis$) {<br/>      Def string m$, p$<br/>      Def long c<br/>      Stack New {<br/>            if len(splitthis$)=0 then exit<br/>            For i=1 to len(splitthis$)<br/>                  p$=mid$(splitthis$,i,1)<br/>                  if m$&lt;&gt;p$ then {<br/>                        if c&gt;0 then data string$(m$, c)<br/>                        m$=p$<br/>                        c=1<br/>                  } else c++<br/>            Next i<br/>            if c&gt;0 then data string$(m$, c)<br/>            While stack.size&gt;1 {<br/>                  Print letter$+\", \";<br/>            }<br/>            If not empty then Print letter$<br/>      }<br/>}<br/>PrintParts \"gHHH5YY++///\\\"<br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 13, "block": "<pre class=\"text highlighted_source\">splitChange\u00a0:= proc(str::string)<br/>\tlocal start,i,len;<br/>\tstart\u00a0:= 1;<br/>\tlen\u00a0:= StringTools:-Length(str);<br/>\tfor i from 2 to len do<br/>\t\tif str[i] &lt;&gt; str[start] then<br/>\t\t\tprintf(\"%s, \",  str[start..i-1]);<br/>\t\t\tstart\u00a0:= i:<br/>\t\tend if;<br/>\tend do;<br/>\tprintf(\"%s\", str[start..len]);<br/>end proc;<br/>splitChange(\"gHHH5YY++///\\\\\");</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\"><a class=\"__cf_email__\" data-cfemail=\"eebd9a9c878089a4818780ae\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@Riffle[StringCases[\"gHHH5YY++///\\\\\", p\u00a0: (x_) .. -&gt; p], \", \"]</pre>"}, {"lang": "Nim", "loc": 21, "block": "<pre class=\"text highlighted_source\"> proc splitOnDiff(str: string)\u00a0: string =<br/>  result = \"\"<br/>\u00a0<br/>  if str.len &lt; 1: return result<br/>\u00a0<br/>  var prevChar\u00a0: char = str[0]<br/>\u00a0<br/>  for idx in 0 .. &lt; str.len:<br/>    if str[idx]\u00a0!= prevChar:<br/>      result &amp;= \", \"<br/>      prevChar = str[idx]<br/>\u00a0<br/>    result &amp;= str[idx]<br/>\u00a0<br/>\u00a0<br/>assert splitOnDiff(\"\"\"X\"\"\") == \"\"\"X\"\"\"<br/>assert splitOnDiff(\"\"\"XX\"\"\") == \"\"\"XX\"\"\"<br/>assert splitOnDiff(\"\"\"XY\"\"\") == \"\"\"X, Y\"\"\"<br/>assert splitOnDiff(\"\"\"gHHH5YY++///\\\"\"\") == \"\"\"g, HHH, 5, YY, ++, ///, \\\"\"\"<br/>\u00a0<br/>echo splitOnDiff(\"\"\"gHHH5YY++///\\\"\"\")</pre>"}, {"lang": "ooRexx", "loc": 14, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> str  <span class=\"sy0\">.</span>                                  <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">If</span> str==<span class=\"st0\">''</span> <span class=\"kw3\">Then</span> str= <span class=\"st0\">'gHHH5YY++///\\'</span>        <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>i=<span class=\"nu0\">1</span><br/>ol=<span class=\"st0\">''</span><br/><span class=\"kw1\">Do</span> <span class=\"kw2\">Forever</span><br/>  j=<span class=\"kw6\">verify</span><span class=\"br0\">(</span>str,<span class=\"kw6\">substr</span><span class=\"br0\">(</span>str,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span>,<span class=\"st0\">'N'</span>,i,<span class=\"nu0\">99</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/* find first character that's different */</span><br/>  <span class=\"kw1\">If</span> j=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>                          <span class=\"coMULTI\">/* End of strin reached                  */</span><br/>    ol=ol<span class=\"sy0\">||</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>str,i<span class=\"br0\">)</span>                  <span class=\"coMULTI\">/* the final substring                   */</span><br/>    <span class=\"kw1\">Leave</span><br/>    <span class=\"kw3\">End</span><br/>  ol=ol<span class=\"sy0\">||</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>str,i,j-i<span class=\"br0\">)</span><span class=\"st0\">', '</span>            <span class=\"coMULTI\">/* add substring and delimiter           */</span><br/>  i=j<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> ol</pre>"}, {"lang": "Perl", "loc": 5, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'gHHH5YY++///<span class=\"es_h\">\\\\</span>'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$str</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/((.)\\g{-1}*)/$1, /g</span><span class=\"sy0\">;</span> <br/><span class=\"re0\">$str</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/, $//</span><span class=\"sy0\">;</span> <span class=\"co1\"># remove trailing ,</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"$str<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 8, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> group<span class=\"sy0\">-</span><span class=\"kw3\">chars</span> <span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$str</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"sy0\">:</span> <span class=\"co2\">/ (.) $0* /</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Testing:</span><br/>\u00a0<br/><span class=\"kw1\">for</span> Q<span class=\"br0\">[</span>gHHH5YY<span class=\"sy0\">++///</span>\\<span class=\"br0\">]</span><span class=\"sy0\">,</span> Q<span class=\"br0\">[</span>fff\ufeff\ufeff\ufeffn\u20d7n\u20d7n\u20d7\u00bb\u00bb\u00bb  \u2135\u2135\u2604\u2604\u2603\u2603\u0302\u2603\ud83e\udd14\ud83c\uddfa\ud83c\uddf8\ud83e\udd26\u200d\u2642\ufe0f\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$string</span> <span class=\"br0\">{</span><br/>    put <span class=\"st_h\">'Original: '</span><span class=\"sy0\">,</span> <span class=\"re0\">$string</span><span class=\"sy0\">;</span><br/>    put <span class=\"st_h\">'   Split: '</span><span class=\"sy0\">,</span> group<span class=\"sy0\">-</span><span class=\"kw3\">chars</span><span class=\"br0\">(</span><span class=\"re0\">$string</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st_h\">', '</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 17, "block": "<pre class=\"text highlighted_source\">function split_on_change(string in)<br/>string out = \"\"<br/>    if length(in) then<br/>        integer prev = in[1]<br/>        for i=1 to length(in) do<br/>            integer ch = in[i]<br/>            if ch!=prev then<br/>                out &amp;= \", \"<br/>                prev = ch<br/>            end if<br/>            out &amp;= ch<br/>        end for<br/>    end if<br/>    return out<br/>end function<br/>\u00a0<br/>puts(1,split_on_change(`gHHH5YY++///\\`))</pre>"}, {"lang": "PowerShell", "loc": 22, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Split<span class=\"sy0\">-</span>String <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$String</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"re0\">$String</span>.Substring<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$splitString</span> <span class=\"sy0\">=</span> <span class=\"re0\">$c</span><br/>\u00a0<br/>    <span class=\"kw3\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>; <span class=\"re0\">$i</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$String</span>.Length; <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span> <br/>        <span class=\"br0\">[</span><span class=\"re3\">string</span><span class=\"br0\">]</span><span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"re0\">$String</span>.Substring<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$d</span> <span class=\"kw4\">-ne</span> <span class=\"re0\">$c</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"re0\">$splitString</span> <span class=\"sy0\">+=</span> <span class=\"st0\">\", \"</span><br/>            <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"re0\">$d</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"re0\">$splitString</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$d</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"re0\">$splitString</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Python", "loc": 11, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">itertools</span><br/>\u00a0<br/><span class=\"kw1\">try</span>: <span class=\"kw2\">input</span> <span class=\"sy0\">=</span> <span class=\"kw2\">raw_input</span><br/><span class=\"kw1\">except</span>: <span class=\"kw1\">pass</span><br/>\u00a0<br/>s <span class=\"sy0\">=</span> <span class=\"kw2\">input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>groups <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> g <span class=\"kw1\">in</span> <span class=\"kw3\">itertools</span>.<span class=\"me1\">groupby</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>:<br/>    groups.<span class=\"me1\">append</span><span class=\"br0\">(</span><span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>g<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'      input string: \u00a0%s'</span>\u00a0% s<span class=\"br0\">)</span><br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'     output string: \u00a0%s'</span>\u00a0% <span class=\"st0\">', '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>groups<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 9, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(define (split-strings-on-change s)<br/>  (map list-&gt;string (group-by values (string-&gt;list s) char=?)))<br/>\u00a0<br/>(displayln (string-join (split-strings-on-change #&lt;&lt;&lt;<br/>gHHH5YY++///\\<br/>&lt;<br/>                                                 )<br/>                        \", \"))</pre>"}, {"lang": "REXX", "loc": 11, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program splits a string based on change of character \u2500\u2500\u2500\u25ba a comma delimited list.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> str                                    <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> str==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> str= <span class=\"st0\">'gHHH5YY++///\\'</span>            <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>p=<span class=\"kw6\">left</span><span class=\"br0\">(</span>str, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                                   <span class=\"coMULTI\">/*placeholder for the \"previous\" string*/</span><br/>$=                                               <span class=\"coMULTI\">/*     \"       \"   \"    output      \"  */</span><br/>     <span class=\"kw1\">do</span> j=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span>;  @=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>str,j,<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*obtain a character from the string.  */</span><br/>     <span class=\"kw1\">if</span> @<span class=\"sy0\">\\</span>==p  <span class=\"kw3\">then</span> $=$<span class=\"st0\">', '</span>                      <span class=\"coMULTI\">/*Not replicated char? Append delimiter*/</span><br/>     <a class=\"__cf_email__\" data-cfemail=\"6b1b562b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>;           $=$ <span class=\"sy0\">||</span> @                     <span class=\"coMULTI\">/*append a character to the  $  string.*/</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                                 <span class=\"coMULTI\">/* [\u2193]  keep peeling chars until done. */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'          input string: '</span>      str          <span class=\"coMULTI\">/*display the original string &amp; output.*/</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'         output string: '</span>      $            <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>see split(\"gHHH5YY++///\\\")<br/>\u00a0<br/>func split(s )<br/>     c =left (s, 1)<br/>     split = \"\"<br/>     for i = 1 to len(s)<br/>         d = substr(s, i, 1)<br/>         if d\u00a0!= c<br/>            split = split + \", \"<br/>            c = d <br/>         ok<br/>         split = split + d <br/>     next<br/>     return split <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 8, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> <span class=\"kw3\">split</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\" input string: #{str}\"</span><br/>  s = str.<span class=\"me1\">chars</span>.<span class=\"me1\">chunk</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:itself<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>_,a<span class=\"sy0\">|</span> a.<span class=\"me1\">join</span><span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"output string: #{s}\"</span><br/>  s<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"gHHH5YY++///<span class=\"es0\">\\\\</span>\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Rust", "loc": 34, "block": "<pre class=\"text highlighted_source\">fn splitter(string: &amp;str) -&gt; String {<br/>    let chars: Vec&lt;_&gt; = string.chars().collect();<br/>    let mut result = Vec::new();<br/>    let mut last_mismatch = 0;<br/>    for i in 0..chars.len() {<br/>        if chars.len() == 1 {<br/>            return chars[0..1].iter().collect();<br/>        }<br/>        if i &gt; 0 &amp;&amp; chars[i-1]\u00a0!= chars[i] {<br/>            let temp_result: String = chars[last_mismatch..i].iter().collect();<br/>            result.push(temp_result);<br/>            last_mismatch = i;<br/>        }<br/>        if i == chars.len() - 1 {<br/>            let temp_result: String = chars[last_mismatch..chars.len()].iter().collect();<br/>            result.push(temp_result);<br/>        }<br/>    }<br/>    result.join(\", \")<br/>}<br/>\u00a0<br/>fn main() {<br/>    let test_string = \"g\";<br/>    println!(\"input string: {}\", test_string);<br/>    println!(\"output string: {}\", splitter(test_string));<br/>\u00a0<br/>    let test_string = \"\";<br/>    println!(\"input string: {}\", test_string);<br/>    println!(\"output string: {}\", splitter(test_string));<br/>\u00a0<br/>    let test_string = \"gHHH5YY++///\\\\\";<br/>    println!(\"input string: {}\", test_string);<br/>    println!(\"output string: {}\", splitter(test_string));<br/>}</pre>"}, {"lang": "Scala", "loc": 8, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// Split a (character) string into comma (plus a blank) delimited strings</span><br/><span class=\"co1\">// based on a change of character (left to right).</span><br/><span class=\"co1\">// See https://rosettacode.org/wiki/Split_a_character_string_based_on_change_of_character#Scala</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> runLengthSplit<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"co1\">/// Add a guard letter</span><br/>  <span class=\"br0\">(</span>s + <span class=\"st0\">'X'</span><span class=\"br0\">)</span>.<span class=\"me1\">sliding</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>pair <span class=\"sy0\">=&gt;</span> pair.<span class=\"me1\">head</span> + <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>pair.<span class=\"me1\">head</span> <span class=\"sy0\">!=</span> pair.<span class=\"me1\">last</span><span class=\"br0\">)</span> <span class=\"st0\">\", \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>println<span class=\"br0\">(</span>runLengthSplit<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"gHHH5YY++///<span class=\"es1\">\\\"</span>\"</span><span class=\"st0\">\"))</span></pre>"}, {"lang": "Sed", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>echo 'gHHH5YY++///\\' | sed 's/\\(.\\)\\1*/&amp;, /g;s/, $//'<br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 9, "block": "<pre class=\"ruby highlighted_source\">func group<span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    gather <span class=\"br0\">{</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>var match = <span class=\"br0\">(</span>str =~ <span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"br0\">(</span>.<span class=\"br0\">)</span>\\g<span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>g<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            take<span class=\"br0\">(</span>match<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say group<span class=\"br0\">(</span>ARGV<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> \\\\ <span class=\"st0\">'gHHH5YY++///<span class=\"es0\">\\\\</span>'</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span></pre>"}, {"lang": "Standard ML", "loc": 10, "block": "<pre class=\"text highlighted_source\">(*<br/> * Head-Tail implementation of grouping<br/> *)<br/>fun group'     ac      nil = [ac]<br/>  | group'     nil (y::ys) = group' [y] ys<br/>  | group' (x::ac) (y::ys) = if x=y then group' (y::x::ac) ys else (x::ac)\u00a0:: group' [y] ys<br/>\u00a0<br/>fun group xs = group' nil xs<br/>\u00a0<br/>fun groupString str = String.concatWith \", \" (map implode (group (explode str)))</pre>"}, {"lang": "Tcl", "loc": 5, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> <span class=\"kw2\">string</span> <span class=\"st0\">\"gHHH5YY++///<span class=\"es0\">\\\\</span>\"</span><br/>\u00a0<br/><span class=\"kw2\">regsub</span> -all <span class=\"br0\">{</span><span class=\"br0\">(</span>.<span class=\"br0\">)</span>\\<span class=\"nu0\">1</span><span class=\"sy0\">*</span><span class=\"br0\">}</span> <span class=\"re0\">$string</span> <span class=\"br0\">{</span>\\<span class=\"nu0\">0</span>, <span class=\"br0\">}</span> <span class=\"kw2\">string</span><br/><span class=\"kw2\">regsub</span> <span class=\"br0\">{</span>, <span class=\"sy0\">$</span><span class=\"br0\">}</span> <span class=\"re0\">$string</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"kw2\">string</span><br/><span class=\"kw2\">puts</span> <span class=\"re0\">$string</span></pre>"}, {"lang": "VBA", "loc": 35, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> Split_string_based_on_change_character()<br/><span class=\"kw4\">Dim</span> myArr() <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, T <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/>Const STRINPUT <span class=\"kw4\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\"gHHH5YY++///\\\"</span><br/>Const SEP <span class=\"kw4\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\", \"</span><br/>\u00a0<br/>    myArr = Split_Special(STRINPUT)<br/>    T = Join(myArr, SEP)<br/>    Debug.<span class=\"kw4\">Print</span> Left(T, Len(T) - Len(SEP))<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> Split_Special(Ch <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>()<br/><span class=\"co1\">'return an array of Strings<br/></span><span class=\"kw4\">Dim</span> tb, i&amp;, st <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, cpt <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, R() <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>\u00a0<br/>    tb = Split(StrConv(Ch, vbUnicode), Chr(0))<br/>    st = tb(<span class=\"kw4\">LBound</span>(tb))<br/>    <span class=\"kw4\">ReDim</span> R(cpt)<br/>    R(cpt) = st<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> <span class=\"kw4\">UBound</span>(tb)<br/>        <span class=\"kw3\">If</span> tb(i) = st <span class=\"kw3\">Then</span><br/>            R(cpt) = R(cpt) &amp; st<br/>        <span class=\"kw3\">Else</span><br/>            st = tb(i)<br/>            cpt = cpt + 1<br/>            <span class=\"kw4\">ReDim</span> <span class=\"kw4\">Preserve</span> R(cpt)<br/>            R(cpt) = st<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span><br/>    Split_Special = R<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0</pre>"}, {"lang": "XLISP", "loc": 12, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> delimit <span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">defun</span> delim <span class=\"br0\">(</span>old-<span class=\"kw1\">list</span> new-<span class=\"kw1\">list</span> current-char<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> old-<span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>\t\t\tnew-<span class=\"kw1\">list</span><br/>\t\t\t<span class=\"br0\">(</span>delim <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> old-<span class=\"kw1\">list</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">append</span> new-<span class=\"kw1\">list</span><br/>\t\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">equal</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> old-<span class=\"kw1\">list</span><span class=\"br0\">)</span> current-char<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t`<span class=\"br0\">(</span>#\\<span class=\"sy0\">,</span> #\\Space <span class=\"sy0\">,</span><span class=\"br0\">(</span><span class=\"kw1\">car</span> old-<span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> old-<span class=\"kw1\">list</span><span class=\"br0\">)</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"kw1\">car</span> old-<span class=\"kw1\">list</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>list-<span class=\"sy0\">&gt;</span>string <span class=\"br0\">(</span>delim <span class=\"br0\">(</span>string-<span class=\"sy0\">&gt;</span><span class=\"kw1\">list</span> s<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> <span class=\"br0\">(</span>string-<span class=\"sy0\">&gt;</span><span class=\"kw1\">list</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>display <span class=\"br0\">(</span>delimit <span class=\"st0\">\"gHHH5YY++///<span class=\"es0\">\\\\</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">;; NB. The \"\\\" character needs to be escaped</span></pre>"}, {"lang": "zkl", "loc": 6, "block": "<pre class=\"text highlighted_source\">fcn group(str){<br/>   C,out\u00a0:= str[0],Sink(C);<br/>   foreach c in (str[1,*]){ out.write(if(c==C) c else String(\", \",C=c)) }<br/>   out.close();<br/>}<br/>group(\"gHHH5YY++///\\\\\").println();</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 9, "block": "<pre class=\"text highlighted_source\"> 10 LET s$=\"gHHH5YY++///\\\"<br/> 20 LET c$=s$(1)<br/> 30 LET n$=c$<br/> 40 FOR i=2 TO LEN s$<br/> 50 IF s$(i)&lt;&gt;c$ THEN LET n$=n$+\", \"<br/> 60 LET n$=n$+s$(i)<br/> 70 LET c$=s$(i)<br/> 80 NEXT i<br/> 90 PRINT n$</pre>"}]}