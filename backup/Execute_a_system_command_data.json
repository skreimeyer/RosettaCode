{"task": "Execute_a_system_command", "blocks": [{"lang": "ABAP", "loc": 134, "block": "<pre class=\"abap highlighted_source\"><span class=\"co2\">*&amp;---------------------------------------------------------------------*</span><br/><span class=\"co2\">*&amp; Report  ZEXEC_SYS_CMD</span><br/><span class=\"co2\">*&amp;</span><br/><span class=\"co2\">*&amp;---------------------------------------------------------------------*</span><br/><span class=\"co2\">*&amp;</span><br/><span class=\"co2\">*&amp;</span><br/><span class=\"co2\">*&amp;---------------------------------------------------------------------*</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPREPORT.htm\"><span class=\"kw3\">REPORT</span></a>  zexec_sys_cmd<span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">DATA</span></a><span class=\"sy0\">:</span> lv_opsys      <span class=\"kw4\">TYPE</span>          syst<span class=\"sy0\">-</span>opsys<span class=\"sy0\">,</span><br/>      lt_sxpgcotabe <span class=\"kw4\">TYPE</span> <span class=\"kw9\"><span class=\"kw4\">TABLE</span> OF</span> sxpgcotabe<span class=\"sy0\">,</span><br/>      ls_sxpgcotabe <span class=\"kw4\">LIKE</span> <span class=\"kw9\"><span class=\"kw4\">LINE</span> OF</span>  lt_sxpgcotabe<span class=\"sy0\">,</span><br/>      ls_sxpgcolist <span class=\"kw4\">TYPE</span>          sxpgcolist<span class=\"sy0\">,</span><br/>      lv_name       <span class=\"kw4\">TYPE</span>          sxpgcotabe<span class=\"sy0\">-</span><span class=\"kw4\">name</span><span class=\"sy0\">,</span><br/>      lv_opcommand  <span class=\"kw4\">TYPE</span>          sxpgcotabe<span class=\"sy0\">-</span>opcommand<span class=\"sy0\">,</span><br/>      lv_index      <span class=\"kw4\">TYPE</span>          c<span class=\"sy0\">,</span><br/>      lt_btcxpm     <span class=\"kw4\">TYPE</span> <span class=\"kw9\"><span class=\"kw4\">TABLE</span> OF</span> btcxpm<span class=\"sy0\">,</span><br/>      ls_btcxpm     <span class=\"kw4\">LIKE</span> <span class=\"kw9\"><span class=\"kw4\">LINE</span> OF</span>  lt_btcxpm<br/>      <span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"co2\">* Initialize</span><br/>lv_opsys <span class=\"sy1\">=</span> sy<span class=\"sy0\">-</span>opsys<span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPCLEAR.htm\"><span class=\"kw3\">CLEAR</span></a> lt_sxpgcotabe<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">IF</span></a> lv_opsys <span class=\"kw4\">EQ</span> <span class=\"st0\">'Windows NT'</span><span class=\"sy0\">.</span><br/>  lv_opcommand <span class=\"sy1\">=</span> <span class=\"st0\">'dir'</span><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPELSE.htm\"><span class=\"kw1\">ELSE</span></a><span class=\"sy0\">.</span><br/>  lv_opcommand <span class=\"sy1\">=</span> <span class=\"st0\">'ls'</span><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">ENDIF</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"co2\">* Check commands</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPSELECT.htm\"><span class=\"kw3\">SELECT</span></a> <span class=\"sy0\">*</span> <span class=\"kw4\">FROM</span> sxpgcotabe <span class=\"kw4\">INTO</span> <span class=\"kw4\">TABLE</span> lt_sxpgcotabe<br/>  <span class=\"kw4\">WHERE</span> opsystem  <span class=\"kw4\">EQ</span> lv_opsys<br/>    <span class=\"kw4\">AND</span> opcommand <span class=\"kw4\">EQ</span> lv_opcommand<span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">IF</span></a> lt_sxpgcotabe <span class=\"kw4\">IS</span> <span class=\"kw4\">INITIAL</span><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPCLEAR.htm\"><span class=\"kw3\">CLEAR</span></a> ls_sxpgcolist<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPCLEAR.htm\"><span class=\"kw3\">CLEAR</span></a> lv_name<span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPWHILE.htm\"><span class=\"kw1\">WHILE</span></a> lv_name <span class=\"kw4\">IS</span> <span class=\"kw4\">INITIAL</span><span class=\"sy0\">.</span><br/><span class=\"co2\">* Don't mess with other users' commands</span><br/>    lv_index <span class=\"sy1\">=</span> sy<span class=\"sy0\">-</span><span class=\"kw4\">index</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPCONCATENATE.htm\"><span class=\"kw3\">CONCATENATE</span></a> <span class=\"st0\">'ZLS'</span> lv_index <span class=\"kw4\">INTO</span> lv_name<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPSELECT.htm\"><span class=\"kw3\">SELECT</span></a> <span class=\"sy0\">*</span> <span class=\"kw4\">FROM</span> sxpgcostab <span class=\"kw4\">INTO</span> ls_sxpgcotabe<br/>      <span class=\"kw4\">WHERE</span> <span class=\"kw4\">name</span> <span class=\"kw4\">EQ</span> lv_name<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDSELECT.htm\"><span class=\"kw3\">ENDSELECT</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">IF</span></a> sy<span class=\"sy0\">-</span>subrc <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPCLEAR.htm\"><span class=\"kw3\">CLEAR</span></a> lv_name<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">ENDIF</span></a><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDWHILE.htm\"><span class=\"kw1\">ENDWHILE</span></a><span class=\"sy0\">.</span><br/>  ls_sxpgcolist<span class=\"sy0\">-</span><span class=\"kw4\">name</span>      <span class=\"sy1\">=</span> lv_name<span class=\"sy0\">.</span><br/>  ls_sxpgcolist<span class=\"sy0\">-</span>opsystem  <span class=\"sy1\">=</span> lv_opsys<span class=\"sy0\">.</span><br/>  ls_sxpgcolist<span class=\"sy0\">-</span>opcommand <span class=\"sy1\">=</span> lv_opcommand<span class=\"sy0\">.</span><br/><span class=\"co2\">* Create own ls command when nothing is declared</span><br/>  <span class=\"kw8\">CALL FUNCTION</span> <span class=\"st0\">'SXPG_COMMAND_INSERT'</span><br/>    <span class=\"kw4\">EXPORTING</span><br/>      command                <span class=\"sy1\">=</span> ls_sxpgcolist<br/>      <span class=\"kw4\">public</span>                 <span class=\"sy1\">=</span> <span class=\"st0\">'X'</span><br/>    <span class=\"kw4\">EXCEPTIONS</span><br/>      command_already_exists <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>      no_permission          <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><br/>      parameters_wrong       <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><br/>      foreign_lock           <span class=\"sy1\">=</span> <span class=\"nu0\">4</span><br/>      system_failure         <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><br/>      <span class=\"kw4\">OTHERS</span>                 <span class=\"sy1\">=</span> <span class=\"nu0\">6</span><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">IF</span></a> sy<span class=\"sy0\">-</span>subrc <span class=\"sy1\">&lt;&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/><span class=\"co2\">* Implement suitable error handling here</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPELSE.htm\"><span class=\"kw1\">ELSE</span></a><span class=\"sy0\">.</span><br/><span class=\"co2\">* Hooray it worked! Let's try to call it</span><br/>    <span class=\"kw8\">CALL FUNCTION</span> <span class=\"st0\">'SXPG_COMMAND_EXECUTE_LONG'</span><br/>      <span class=\"kw4\">EXPORTING</span><br/>        commandname                   <span class=\"sy1\">=</span> lv_name<br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPTABLES.htm\"><span class=\"kw2\">TABLES</span></a><br/>        exec_protocol                 <span class=\"sy1\">=</span> lt_btcxpm<br/>      <span class=\"kw4\">EXCEPTIONS</span><br/>        no_permission                 <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>        command_not_found             <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><br/>        parameters_too_long           <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><br/>        security_risk                 <span class=\"sy1\">=</span> <span class=\"nu0\">4</span><br/>        wrong_check_call_interface    <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><br/>        program_start_error           <span class=\"sy1\">=</span> <span class=\"nu0\">6</span><br/>        program_termination_error     <span class=\"sy1\">=</span> <span class=\"nu0\">7</span><br/>        x_error                       <span class=\"sy1\">=</span> <span class=\"nu0\">8</span><br/>        parameter_expected            <span class=\"sy1\">=</span> <span class=\"nu0\">9</span><br/>        too_many_parameters           <span class=\"sy1\">=</span> <span class=\"nu0\">10</span><br/>        illegal_command               <span class=\"sy1\">=</span> <span class=\"nu0\">11</span><br/>        wrong_asynchronous_parameters <span class=\"sy1\">=</span> <span class=\"nu0\">12</span><br/>        cant_enq_tbtco_entry          <span class=\"sy1\">=</span> <span class=\"nu0\">13</span><br/>        jobcount_generation_error     <span class=\"sy1\">=</span> <span class=\"nu0\">14</span><br/>        <span class=\"kw4\">OTHERS</span>                        <span class=\"sy1\">=</span> <span class=\"nu0\">15</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">IF</span></a> sy<span class=\"sy0\">-</span>subrc <span class=\"sy1\">&lt;&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/><span class=\"co2\">* Implement suitable error handling here</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"st0\">'Cant execute ls - '</span><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPCASE.htm\"><span class=\"kw1\">CASE</span></a> sy<span class=\"sy0\">-</span>subrc<span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>          <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> <span class=\"st0\">' no permission!'</span><span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">2</span><span class=\"sy0\">.</span><br/>          <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> <span class=\"st0\">' command could not be created!'</span><span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">3</span><span class=\"sy0\">.</span><br/>          <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> <span class=\"st0\">' parameter list too long!'</span><span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">4</span><span class=\"sy0\">.</span><br/>          <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> <span class=\"st0\">' security risk!'</span><span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">5</span><span class=\"sy0\">.</span><br/>          <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> <span class=\"st0\">' wrong call of SXPG_COMMAND_EXECUTE_LONG!'</span><span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">6</span><span class=\"sy0\">.</span><br/>          <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> <span class=\"st0\">' command cant be started!'</span><span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">7</span><span class=\"sy0\">.</span><br/>          <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> <span class=\"st0\">' program terminated!'</span><span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">8</span><span class=\"sy0\">.</span><br/>          <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> <span class=\"st0\">' x_error!'</span><span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>          <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> <span class=\"st0\">' parameter missing!'</span><span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">10</span><span class=\"sy0\">.</span><br/>          <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> <span class=\"st0\">' too many parameters!'</span><span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">11</span><span class=\"sy0\">.</span><br/>          <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> <span class=\"st0\">' illegal command!'</span><span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">12</span><span class=\"sy0\">.</span><br/>          <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> <span class=\"st0\">' wrong asynchronous parameters!'</span><span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">13</span><span class=\"sy0\">.</span><br/>          <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> <span class=\"st0\">' cant enqueue job!'</span><span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">14</span><span class=\"sy0\">.</span><br/>          <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> <span class=\"st0\">' cant create job!'</span><span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> <span class=\"nu0\">15</span><span class=\"sy0\">.</span><br/>          <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> <span class=\"st0\">' unknown error!'</span><span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWHEN.htm\"><span class=\"kw1\">WHEN</span></a> <span class=\"kw4\">OTHERS</span><span class=\"sy0\">.</span><br/>          <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> <span class=\"st0\">' unknown error!'</span><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPENDCASE.htm\"><span class=\"kw1\">ENDCASE</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPELSE.htm\"><span class=\"kw1\">ELSE</span></a><span class=\"sy0\">.</span><br/>      <span class=\"kw7\"><a href=\"http://help.sap.com/abapdocu/en/ABAPLOOP.htm\"><span class=\"kw1\">LOOP</span></a> AT</span> lt_btcxpm <span class=\"kw4\">INTO</span> ls_btcxpm<span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a><span class=\"sy0\">:</span> <span class=\"sy0\">/</span> ls_btcxpm<span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPENDLOOP.htm\"><span class=\"kw1\">ENDLOOP</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">ENDIF</span></a><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">ENDIF</span></a><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">ENDIF</span></a><span class=\"sy0\">.</span></pre>"}, {"lang": "Ada", "loc": 8, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> POSIX.<span class=\"me1\">Unsafe_Process_Primitives</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Execute_A_System_Command <span class=\"kw1\">is</span><br/>   Arguments\u00a0: POSIX.<span class=\"me1\">POSIX_String_List</span>;<br/><span class=\"kw1\">begin</span><br/>   POSIX.<span class=\"me1\">Append</span> <span class=\"br0\">(</span>Arguments, <span class=\"st0\">\"ls\"</span><span class=\"br0\">)</span>;<br/>   POSIX.<span class=\"me1\">Unsafe_Process_Primitives</span>.<span class=\"me1\">Exec_Search</span> <span class=\"br0\">(</span><span class=\"st0\">\"ls\"</span>, Arguments<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Execute_A_System_Command;</pre>"}, {"lang": "Aikido", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>var lines = system (\"ls\")<br/>foreach line lines {<br/>    println (line)<br/>}<br/>\u00a0</pre>"}, {"lang": "Aime", "loc": 6, "block": "<pre class=\"text highlighted_source\">sshell ss;<br/>\u00a0<br/>ss.argv.insert(\"ls\");<br/>\u00a0<br/>o_(ss.link);<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 1, "block": "<pre class=\"algol68 highlighted_source\">system<span class=\"br0\">(</span><span class=\"st0\">\"ls\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "AppleScript", "loc": 1, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw1\">do shell script</span> <span class=\"st0\">\"ls\"</span> <span class=\"kw3\">without</span> altering line endings</pre>"}, {"lang": "Applesoft BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">? CHR$(4)\"CATALOG\"</pre>"}, {"lang": "AutoHotkey", "loc": 1, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/Run.htm\"><span class=\"kw3\">Run</span></a><span class=\"sy0\">,</span> <span class=\"re0\">%comspec%</span> <span class=\"sy0\">/</span>k dir <span class=\"sy0\">&amp;</span> <span class=\"kw6\">pause</span></pre>"}, {"lang": "AutoIt", "loc": 1, "block": "<pre class=\"autoit highlighted_source\"><a href=\"http://www.autoitscript.com/autoit3/docs/functions/Run.htm\"><span class=\"kw3\">Run</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@ComSpec</span></span></a> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" /c \"</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">'pause'</span><span class=\"sy0\">,</span> <span class=\"st0\">\"\"</span><span class=\"sy0\">,</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@SW_HIDE</span></span></a><span class=\"br0\">)</span></pre>"}, {"lang": "AWK", "loc": 4, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>  <span class=\"kw5\">system</span><span class=\"br0\">(</span><span class=\"st0\">\"ls\"</span><span class=\"br0\">)</span>\t\t<span class=\"co1\"># Unix</span><br/> <span class=\"co1\">#system(\"dir\")\t\t# DOS/MS-Windows</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 1, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckshell.shtml\"><span class=\"kw3\">SHELL</span></a> <span class=\"st0\">\"dir\"</span></pre>"}, {"lang": "Batch File", "loc": 1, "block": "<pre class=\"text highlighted_source\">dir</pre>"}, {"lang": "BBC BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">OSCLI \"CAT\"</pre>"}, {"lang": "Bracmat", "loc": 1, "block": "<pre class=\"text highlighted_source\">sys$dir</pre>"}, {"lang": "Brat", "loc": 3, "block": "<pre class=\"text highlighted_source\">include\u00a0:subprocess <br/>\u00a0<br/>p subprocess.run\u00a0:ls  #Lists files in directory</pre>"}, {"lang": "Brlcad", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>exec ls<br/>\u00a0</pre>"}, {"lang": "C", "loc": 7, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/system.html\"><span class=\"kw3\">system</span></a><span class=\"br0\">(</span><span class=\"st0\">\"ls\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 1, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw3\">system</span><span class=\"br0\">(</span><span class=\"st0\">\"pause\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span></pre>"}, {"lang": "C#", "loc": 12, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System.Diagnostics</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> Execute<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Process<span class=\"sy0\">.</span><span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"st0\">\"cmd.exe\"</span>, <span class=\"st0\">\"/c dir\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"sy0\">..</span> Runtime getRuntime <span class=\"br0\">(</span>exec <span class=\"st0\">\"cmd /C dir\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CMake", "loc": 1, "block": "<pre class=\"cmake highlighted_source\"><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:execute_process\"><span class=\"kw1\">execute_process</span></a><span class=\"sy0\">(</span><span class=\"kw3\">COMMAND</span> ls<span class=\"sy0\">)</span></pre>"}, {"lang": "COBOL", "loc": 1, "block": "<pre class=\"cobol highlighted_source\"><span class=\"kw2\">CALL</span> <span class=\"st0\">\"SYSTEM\"</span> <span class=\"kw3\">USING</span> <span class=\"kw3\">BY</span> <span class=\"kw3\">CONTENT</span> <span class=\"st0\">\"ls\"</span></pre>"}, {"lang": "CoffeeScript", "loc": 11, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/><span class=\"br0\">{</span> spawn <span class=\"br0\">}</span> = require <span class=\"st0\">'child_process'</span><br/>\u00a0<br/>ls = spawn <span class=\"st0\">'ls'</span><br/>\u00a0<br/>ls.<span class=\"me1\">stdout</span>.<span class=\"kw4\">on</span> <span class=\"st0\">'data'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span> data <span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> console.<span class=\"me1\">log</span> <span class=\"st0\">\"Output: #{ data }\"</span><br/>\u00a0<br/>ls.<span class=\"me1\">stderr</span>.<span class=\"kw4\">on</span> <span class=\"st0\">'data'</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span> data <span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> console.<span class=\"me1\">error</span> <span class=\"st0\">\"Error: #{ data }\"</span><br/>\u00a0<br/>ls.<span class=\"kw4\">on</span> <span class=\"st0\">'close'</span><span class=\"sy0\">,</span> <span class=\"sy0\">-&gt;</span> console.<span class=\"me1\">log</span> <span class=\"st0\">\"'ls' has finished executing.\"</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>with-output-to-string <span class=\"br0\">(</span>stream<span class=\"br0\">)</span> <span class=\"br0\">(</span>extensions<span class=\"sy0\">:</span><span class=\"me1\">run-program</span> <span class=\"st0\">\"ls\"</span> <span class=\"kw1\">nil</span> <span class=\"sy0\">:</span><span class=\"me1\">output</span> stream<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 11, "block": "<pre class=\"d highlighted_source\">\u00a0<br/><span class=\"kw2\">import</span> std.<span class=\"me1\">process</span><span class=\"sy0\">,</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">;</span><br/><span class=\"co1\">//these two alternatives wait for the process to return, and capture the output</span><br/><span class=\"co1\">//each process function returns a Tuple of (int)\"status\" and (string)\"output</span><br/><span class=\"kw4\">auto</span> ls_string <span class=\"sy0\">=</span> executeShell<span class=\"br0\">(</span><span class=\"st0\">\"ls -l\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//takes single string</span><br/>writeln<span class=\"br0\">(</span><span class=\"br0\">(</span>ls_string.<span class=\"me1\">status</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> ls_string.<span class=\"me1\">output</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"command failed\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> ls_array <span class=\"sy0\">=</span> execute<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"ls\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"-l\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//takes array of strings</span><br/>writeln<span class=\"br0\">(</span><span class=\"br0\">(</span>ls_array.<span class=\"me1\">status</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> ls_array.<span class=\"me1\">output</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"command failed\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">//other alternatives exist to spawn processes in parallel and capture output via pipes</span><br/>\u00a0</pre>"}, {"lang": "dc", "loc": 1, "block": "<pre class=\"text highlighted_source\">! ls</pre>"}, {"lang": "DCL", "loc": 1, "block": "<pre class=\"dcl highlighted_source\"><span class=\"kw1\">Directory</span></pre>"}, {"lang": "Delphi", "loc": 9, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> ExecuteSystemCommand<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">uses</span> Windows<span class=\"sy1\">,</span> ShellApi<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  ShellExecute<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"kw1\">nil</span><span class=\"sy1\">,</span> <span class=\"st0\">'cmd.exe'</span><span class=\"sy1\">,</span> <span class=\"st0\">' /c dir'</span><span class=\"sy1\">,</span> <span class=\"kw1\">nil</span><span class=\"sy1\">,</span> SW_HIDE<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "E", "loc": 10, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> ls <span class=\"sy0\">:=</span> <a href=\"http://wiki.erights.org/wiki/makeCommand\"><span class=\"kw7\">makeCommand</span></a><span class=\"br0\">(</span><span class=\"st0\">\"ls\"</span><span class=\"br0\">)</span><br/>ls<span class=\"br0\">(</span><span class=\"st0\">\"-l\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> <span class=\"br0\">[</span>results<span class=\"sy0\">,</span> _<span class=\"sy0\">,</span> _<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> ls.<span class=\"me1\">exec</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"-l\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>when <span class=\"br0\">(</span>results<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> <span class=\"br0\">[</span>exitCode<span class=\"sy0\">,</span> out<span class=\"sy0\">,</span> err<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> results<br/>  <a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span>out<span class=\"br0\">)</span><br/><span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/catch\"><span class=\"kw2\">catch</span></a> problem <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">`failed to execute ls: $problem`</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Emacs Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>shell-command <span class=\"st0\">\"ls\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre class=\"erlang highlighted_source\"><a href=\"http://erlang.org/doc/man/os.html\"><span class=\"kw5\">os</span></a>:<span class=\"re3\">cmd</span><span class=\"br0\">(</span><span class=\"st0\">\"ls\"</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 1, "block": "<pre class=\"text highlighted_source\"> SHELL(\"DIR/W\")</pre>"}, {"lang": "Euphoria", "loc": 32, "block": "<pre class=\"euphoria highlighted_source\"> <span class=\"co1\">-- system --</span><br/><span class=\"co1\">-- the simplest way --</span><br/><span class=\"co1\">-- system spawns a new shell so I/O redirection is possible --</span><br/>\u00a0<br/><span class=\"kw2\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"dir /w c:<span class=\"es0\">\\t</span>emp<span class=\"es0\">\\ </span>\"</span> <span class=\"br0\">)</span> <span class=\"co1\">-- Microsoft --</span><br/>\u00a0<br/><span class=\"kw2\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"/bin/ls -l /tmp\"</span> <span class=\"br0\">)</span> <span class=\"co1\">-- Linux BSD OSX --</span><br/>\u00a0<br/><span class=\"co1\">----</span><br/>\u00a0<br/> <span class=\"co1\">-- system_exec() --                                                                                                                                         </span><br/> <span class=\"co1\">-- system_exec does not spawn a new shell --                                                                                                                  </span><br/> <span class=\"co1\">-- ( like bash or cmd.exe ) --                                                                                                                                 </span><br/>\u00a0<br/><span class=\"kw2\">integer</span> exit_code <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw2\">sequence</span> ls_command <span class=\"sy1\">=</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/>ifdef UNIX <span class=\"kw1\">or</span> LINUX <span class=\"kw1\">or</span> OSX <span class=\"kw1\">then</span><br/>    ls_command <span class=\"sy1\">=</span> <span class=\"st0\">\"/bin/ls -l \"</span><br/>elsifdef WINDOWS <span class=\"kw1\">then</span><br/>    ls_command <span class=\"sy1\">=</span> <span class=\"st0\">\"dir /w \"</span><br/><span class=\"kw1\">end</span> ifdef<br/>\u00a0<br/>exit_code <span class=\"sy1\">=</span> <span class=\"kw2\">system_exec</span><span class=\"br0\">(</span> ls_command <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">if</span> exit_code <span class=\"sy1\">=</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw2\">puts</span><span class=\"br0\">(</span> STDERR<span class=\"sy2\">,</span> <span class=\"st0\">\" could not execute \"</span> <span class=\"sy1\">&amp;</span> ls_command <span class=\"sy1\">&amp;</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">)</span><br/><span class=\"kw1\">elsif</span> exit_code <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw2\">puts</span><span class=\"br0\">(</span> STDERR<span class=\"sy2\">,</span> ls_command <span class=\"sy1\">&amp;</span> <span class=\"st0\">\" succeeded<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">else</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span> STDERR<span class=\"sy2\">,</span> <span class=\"st0\">\"command\u00a0%s failed with code\u00a0%d<span class=\"es0\">\\n</span>\"</span><span class=\"sy2\">,</span> ls_command<span class=\"sy2\">,</span> exit_code<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span></pre>"}, {"lang": "F#", "loc": 1, "block": "<pre class=\"fsharp highlighted_source\">System.<span class=\"me1\">Diagnostics</span>.<span class=\"me1\">Process</span>.<span class=\"me1\">Start</span><span class=\"br0\">(</span><span class=\"st0\">\"cmd\"</span>, <span class=\"st0\">\"/c dir\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"ls\" run-process wait-for-process</pre>"}, {"lang": "Fantom", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Main<br/>{<br/>  public static Void main ()<br/>  {<br/>    p\u00a0:= Process ([\"ls\"])<br/>    p.run<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 1, "block": "<pre class=\"text highlighted_source\">s\" ls\" system</pre>"}, {"lang": "Fortran", "loc": 6, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> SystemTest<br/><span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/> <span class=\"kw1\">call</span> execute_command_line <span class=\"br0\">(</span><span class=\"st0\">\"ls\"</span>, exitstat<span class=\"sy0\">=</span>i<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> SystemTest<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 4, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Shell</span> <span class=\"st0\">\"dir\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 2, "block": "<pre class=\"text highlighted_source\">r = callJava[\"java.lang.Runtime\", \"getRuntime\"]<br/>println[read[r.exec[\"dir\"].getInputStream[]]]</pre>"}, {"lang": "FunL", "loc": 3, "block": "<pre class=\"text highlighted_source\">import sys.execute<br/>\u00a0<br/>execute( if $os.startsWith('Windows') then 'dir' else 'ls' )</pre>"}, {"lang": "FutureBasic", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>local fn DoUnixCommand( cmd as str255 )<br/>  dim as str255 s<br/>\u00a0<br/>  open \"Unix\", 2, cmd<br/>  while ( not eof(2) )<br/>    line input #2, s<br/>    print s<br/>  wend<br/>  close 2<br/>end fn<br/>\u00a0<br/>fn DoUnixCommand( \"ls -A\" )<br/>\u00a0</pre>"}, {"lang": "Gambas", "loc": 5, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/shell\"><span class=\"kw1\">Shell</span></a> <span class=\"st0\">\"ls -aul\"</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Go", "loc": 16, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"log\"</span><br/>    <span class=\"st0\">\"os\"</span><br/>    <span class=\"st0\">\"os/exec\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    cmd <span class=\"sy2\">:=</span> exec<span class=\"sy3\">.</span>Command<span class=\"sy1\">(</span><span class=\"st0\">\"ls\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"-l\"</span><span class=\"sy1\">)</span><br/>    cmd<span class=\"sy3\">.</span>Stdout <span class=\"sy2\">=</span> os<span class=\"sy3\">.</span>Stdout<br/>    cmd<span class=\"sy3\">.</span>Stderr <span class=\"sy2\">=</span> os<span class=\"sy3\">.</span>Stderr<br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">:=</span> cmd<span class=\"sy3\">.</span>Run<span class=\"sy1\">();</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        log<span class=\"sy3\">.</span>Fatal<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "gnuplot", "loc": 1, "block": "<pre class=\"gnuplot highlighted_source\"><span class=\"sy0\">!</span><span class=\"kw5\">ls</span></pre>"}, {"lang": "Groovy", "loc": 1, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"ls -la\"</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20execute\"><span class=\"kw9\">execute</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">text</span></pre>"}, {"lang": "GUISS", "loc": 1, "block": "<pre class=\"text highlighted_source\">Start,Programs,Accessories,MSDOS Prompt,Type:dir[enter]</pre>"}, {"lang": "Haskell", "loc": 4, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Cmd<br/>\u00a0<br/>main <span class=\"sy0\">=</span> system <span class=\"st0\">\"ls\"</span><br/>\u00a0</pre>"}, {"lang": "HicEst", "loc": 2, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">SYSTEM</span><span class=\"br0\">(</span>CoMmand<span class=\"sy1\">=</span><span class=\"st0\">'pause'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">SYSTEM</span><span class=\"br0\">(</span>CoMmand<span class=\"sy1\">=</span><span class=\"st0\">'dir &amp; pause'</span><span class=\"br0\">)</span> </pre>"}, {"lang": "HolyC", "loc": 1, "block": "<pre class=\"text highlighted_source\">Dir;</pre>"}, {"lang": "Icon and Unicon", "loc": 6, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Trying command \"</span><span class=\"sy1\">,</span>cmd <span class=\"sy1\">:=</span> <span class=\"kw1\">if</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">features</span> <span class=\"sy1\">==</span> <span class=\"st0\">\"UNIX\"</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"ls\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"dir\"</span><span class=\"br0\">)</span><br/><span class=\"kw4\">system</span><span class=\"br0\">(</span>cmd<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "IDL", "loc": 1, "block": "<pre class=\"idl highlighted_source\">$ls</pre>"}, {"lang": "Io", "loc": 1, "block": "<pre class=\"io highlighted_source\"><span class=\"kw2\">System</span> runCommand<span class=\"br0\">(</span><span class=\"st0\">\"ls\"</span><span class=\"br0\">)</span> stdout println</pre>"}, {"lang": "J", "loc": 15, "block": "<pre class=\"j highlighted_source\">load<span class=\"st_h\">'task'</span><br/>\u00a0<br/><span class=\"co1\">NB.  Execute a command and wait for it to complete</span><br/>shell <span class=\"st_h\">'dir'</span><br/>\u00a0<br/><span class=\"co1\">NB.  Execute a command but don't wait for it to complete </span><br/>fork <span class=\"st_h\">'notepad'</span><br/>\u00a0<br/><span class=\"co1\">NB.  Execute a command and capture its stdout</span><br/>stdout   =:  shell <span class=\"st_h\">'dir'</span>  <br/>\u00a0<br/><span class=\"co1\">NB.  Execute a command, provide it with stdin, </span><br/><span class=\"co1\">NB.  and capture its stdout</span><br/>stdin    =:  <span class=\"st_h\">'blahblahblah'</span><br/>stdout   =:  stdin spawn <span class=\"st_h\">'grep blah'</span></pre>"}, {"lang": "Java", "loc": 15, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Scanner</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.io.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Program <span class=\"br0\">{</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span>    \t<br/>    \t<span class=\"kw2\">try</span> <span class=\"br0\">{</span><br/>    \t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Process.html\"><span class=\"kw21\">Process</span></a> p = <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Runtime.html\"><span class=\"kw21\">Runtime</span></a>.<span class=\"me1\">getRuntime</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">exec</span><span class=\"br0\">(</span><span class=\"st0\">\"cmd /C dir\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"co1\">//Windows command, use \"ls -oa\" for UNIX</span><br/>    \t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Scanner.html\"><span class=\"kw46\">Scanner</span></a> sc = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Scanner.html\"><span class=\"kw46\">Scanner</span></a><span class=\"br0\">(</span>p.<span class=\"me1\">getInputStream</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    \t\t<br/>    \t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>sc.<span class=\"me1\">hasNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>sc.<span class=\"me1\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    \t<span class=\"br0\">}</span><br/>    \t<span class=\"kw2\">catch</span> <span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/io/IOException.html\"><span class=\"kw20\">IOException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    \t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>e.<span class=\"me1\">getMessage</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    \t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 2, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> shell <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> ActiveXObject<span class=\"br0\">(</span><span class=\"st0\">\"WScript.Shell\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>shell.<span class=\"me1\">run</span><span class=\"br0\">(</span><span class=\"st0\">\"cmd /c dir &amp; pause\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Joy", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"ls\" system.</pre>"}, {"lang": "Julia", "loc": 1, "block": "<pre class=\"text highlighted_source\">run(`ls`)</pre>"}, {"lang": "K", "loc": 1, "block": "<pre class=\"text highlighted_source\">    \\ls</pre>"}, {"lang": "Kotlin", "loc": 10, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Scanner</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> proc <span class=\"sy0\">=</span> Runtime.<span class=\"me1\">getRuntime</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">exec</span><span class=\"br0\">(</span><span class=\"st0\">\"cmd /C dir\"</span><span class=\"br0\">)</span>  <span class=\"co1\">// testing on Windows 10</span><br/>    Scanner<span class=\"br0\">(</span>proc.<span class=\"me1\">inputStream</span><span class=\"br0\">)</span>.<span class=\"me1\">use</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>it.<span class=\"me1\">hasNextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span>it.<span class=\"me1\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lang5", "loc": 1, "block": "<pre class=\"text highlighted_source\">'ls system</pre>"}, {"lang": "Lasso", "loc": 8, "block": "<pre class=\"text highlighted_source\">local(<br/>\tpath\t= file_forceroot,<br/>\tls\t= sys_process('/bin/ls', (:'-l', #path)),<br/>\tlswait\t= #ls -&gt; wait<br/>)<br/>'&lt;pre&gt;'<br/>#ls -&gt; read<br/>'&lt;/pre&gt;'</pre>"}, {"lang": "LFE", "loc": 3, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>os<span class=\"sy0\">:</span><span class=\"me1\">cmd</span> <span class=\"st0\">\"ls -alrt\"</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Liberty BASIC", "loc": 4, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/> drive1$ <span class=\"sy0\">=</span> <span class=\"kw2\">left$</span><span class=\"br0\">(</span><span class=\"kw3\">Drives$</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">run</span> <span class=\"st0\">\"cmd.exe /\"</span>;drive1$;<span class=\"st0\">\" dir &amp; pause\"</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 6, "block": "<pre class=\"text highlighted_source\">sx = xtra(\"Shell\").new()<br/>if the platform contains \"win\" then<br/>  put sx.shell_cmd(\"dir\")<br/>else<br/>  put sx.shell_cmd(\"ls\")<br/>end if</pre>"}, {"lang": "Limbo", "loc": 24, "block": "<pre class=\"text highlighted_source\">implement Runls;<br/>\u00a0<br/>include \"sys.m\"; sys: Sys;<br/>include \"draw.m\";<br/>include \"sh.m\";<br/>\u00a0<br/>Runls: module {<br/>\tinit: fn(ctxt: ref Draw-&gt;Context, args: list of string);<br/>};<br/>\u00a0<br/>init(ctxt: ref Draw-&gt;Context, args: list of string)<br/>{<br/>\tsys = load Sys Sys-&gt;PATH;<br/>\tls\u00a0:= load Command \"/dis/ls.dis\";<br/>\tif(ls == nil)<br/>\t\tdie(\"Couldn't load /dis/ls.dis\");<br/>\tls-&gt;init(ctxt, \"ls\"\u00a0:: tl args);<br/>}<br/>\u00a0<br/>die(s: string)<br/>{<br/>\tsys-&gt;fprint(sys-&gt;fildes(2), \"runls:\u00a0%s:\u00a0%r\", s);<br/>\traise \"fail:errors\";<br/>}</pre>"}, {"lang": "Locomotive Basic", "loc": 1, "block": "<pre class=\"text highlighted_source\">LIST</pre>"}, {"lang": "Logo", "loc": 1, "block": "<pre class=\"text highlighted_source\">print first butfirst shell [ls -a]  \u00a0; ..</pre>"}, {"lang": "Logtalk", "loc": 1, "block": "<pre class=\"logtalk highlighted_source\">os<span class=\"sy1\">::</span>shell(<span class=\"st0\">'ls -a'</span>).</pre>"}, {"lang": "Lua", "loc": 6, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- just executing the command</span><br/><span class=\"kw3\">os.execute</span><span class=\"br0\">(</span><span class=\"st0\">\"ls\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- to execute and capture the output, use io.popen</span><br/><span class=\"kw1\">local</span> f <span class=\"sy0\">=</span> <span class=\"kw3\">io</span><span class=\"sy0\">.</span>popen<span class=\"br0\">(</span><span class=\"st0\">\"ls\"</span><span class=\"br0\">)</span> <span class=\"co1\">-- store the output in a \"file\"</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> f<span class=\"sy0\">:</span><span class=\"kw3\">read</span><span class=\"br0\">(</span><span class=\"st0\">\"*a\"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>    <span class=\"co1\">-- print out the \"file\"'s content</span></pre>"}, {"lang": "M4", "loc": 1, "block": "<pre class=\"text highlighted_source\">syscmd(ifdef(`__windows__',`dir',`ls'))</pre>"}, {"lang": "Make", "loc": 2, "block": "<pre class=\"make highlighted_source\">contents<span class=\"sy0\">=$</span><span class=\"br0\">(</span><span class=\"re1\">shell</span> cat foo<span class=\"br0\">)</span><br/>curdir<span class=\"sy0\">=</span>`pwd`</pre>"}, {"lang": "Maple", "loc": 1, "block": "<pre class=\"text highlighted_source\">ssystem(\"dir\");</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">Run[\"ls\"]</pre>"}, {"lang": "MATLAB", "loc": 9, "block": "<pre class=\"matlab highlighted_source\">&gt;&gt; system<span class=\"br0\">(</span><span class=\"co2\">'PAUSE'</span><span class=\"br0\">)</span><br/>\u00a0<br/>Press <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/any.html\"><span class=\"kw2\">any</span></a> key to <span class=\"kw1\">continue</span> . . . <br/>\u00a0<br/>\u00a0<br/><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html\"><span class=\"kw2\">ans</span></a> =<br/>\u00a0<br/>     <span class=\"nu0\">0</span><br/>\u00a0</pre>"}, {"lang": "Maxima", "loc": 1, "block": "<pre class=\"text highlighted_source\">system(\"dir &gt; list.txt\")$</pre>"}, {"lang": "MAXScript", "loc": 1, "block": "<pre class=\"text highlighted_source\">dosCommand \"pause\"</pre>"}, {"lang": "Mercury", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>:- module execute_sys_cmd.<br/>:- interface.<br/>:- import_module io.<br/>\u00a0<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>   io.call_system(\"ls\", _Result,\u00a0!IO).<br/>\u00a0</pre>"}, {"lang": "Modula-2", "loc": 34, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> tri;<br/>\u00a0<br/><span class=\"kw1\">FROM</span>   SYSTEM           <span class=\"kw1\">IMPORT</span>  ADR;<br/><span class=\"kw1\">FROM</span>   SysLib           <span class=\"kw1\">IMPORT</span>  system;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> TextIO<span class=\"sy0\">,</span> InOut<span class=\"sy0\">,</span> ASCII;<br/>\u00a0<br/><span class=\"kw1\">VAR</span>   fd                <span class=\"sy0\">:</span> TextIO.File;<br/>      ch                <span class=\"sy0\">:</span> <span class=\"kw4\">CHAR</span>;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> SystemCommand <span class=\"br0\">(</span><span class=\"kw1\">VAR</span>  command <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>   <span class=\"kw1\">IF</span>  system <span class=\"br0\">(</span>ADR <span class=\"br0\">(</span>command<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>  <span class=\"kw1\">THEN</span><br/>      <span class=\"kw1\">RETURN</span> <span class=\"kw2\">TRUE</span><br/>   <span class=\"kw1\">ELSE</span><br/>      <span class=\"kw1\">RETURN</span> <span class=\"kw2\">FALSE</span><br/>   <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> SystemCommand;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>   <span class=\"kw1\">IF</span>  SystemCommand <span class=\"br0\">(</span><span class=\"st0\">\"ls -1 tri.mod | \"</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">TRUE</span>  <span class=\"kw1\">THEN</span><br/>      InOut.WriteString <span class=\"br0\">(</span><span class=\"st0\">\"No error reported.\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">ELSE</span><br/>      InOut.WriteString <span class=\"br0\">(</span><span class=\"st0\">\"Error reported!\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">END</span>;<br/>   <span class=\"kw1\">LOOP</span><br/>      InOut.Read <span class=\"br0\">(</span>ch<span class=\"br0\">)</span>;<br/>      InOut.Write <span class=\"br0\">(</span>ch<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">IF</span>  ch &lt; <span class=\"st_h\">' '</span>  <span class=\"kw1\">THEN</span>  <span class=\"kw1\">EXIT</span>  <span class=\"kw1\">END</span><br/>   <span class=\"kw1\">END</span>;<br/>   InOut.WriteLn;<br/>   InOut.WriteBf<br/><span class=\"kw1\">END</span> tri.</pre>"}, {"lang": "Modula-3", "loc": 10, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">UNSAFE</span> <span class=\"kw1\">MODULE</span> Exec <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> Unix<span class=\"sy0\">,</span> M3toC;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> command <span class=\"sy0\">:=</span> M3toC.<span class=\"me1\">CopyTtoS</span><span class=\"br0\">(</span><span class=\"st0\">\"ls\"</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">EVAL</span> Unix.<span class=\"me1\">system</span><span class=\"br0\">(</span>command<span class=\"br0\">)</span>;<br/>  M3toC.<span class=\"me1\">FreeCopiedS</span><span class=\"br0\">(</span>command<span class=\"br0\">)</span>;<br/><span class=\"kw1\">END</span> Exec.</pre>"}, {"lang": "MUMPS", "loc": 1, "block": "<pre class=\"text highlighted_source\">Set X=$ZF(-1,\"DIR\")</pre>"}, {"lang": "NetRexx", "loc": 24, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/><span class=\"kw1\">import</span> java.<span class=\"me0\">util</span>.<span class=\"me0\">Scanner</span><br/>\u00a0<br/>runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span><br/><span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"co1\">-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br/>method runSample<span class=\"br0\">(</span>arg<span class=\"br0\">)</span> <span class=\"kw2\">private</span> <span class=\"kw2\">static</span><br/>  <span class=\"kw1\">parse</span> arg command<br/>  <span class=\"kw1\">if</span> command = <span class=\"st0\">''</span> <span class=\"kw3\">then</span> command = <span class=\"st0\">'ls -oa'</span> <span class=\"co1\">-- for Windows change to: 'cmd /C dir'</span><br/>  <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'Executing command:'</span> command<br/>    jprocess = Runtime.<span class=\"me0\">getRunTime</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me0\">exec</span><span class=\"br0\">(</span>command<span class=\"br0\">)</span><br/>    jscanner = Scanner<span class=\"br0\">(</span>jprocess.<span class=\"me0\">getInputStream</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">loop</span> <span class=\"kw2\">label</span> scanning while jscanner.<span class=\"me0\">hasNext</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">say</span> jscanner.<span class=\"me0\">nextLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span> scanning<br/>  <span class=\"kw3\">catch</span> ex = IOException<br/>    ex.<span class=\"me0\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 1, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#exec\"><span class=\"kw1\">exec</span></a> <span class=\"st0\">\"ls\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 4, "block": "<pre class=\"text highlighted_source\">import osproc<br/>\u00a0<br/>let exitCode = execCmd \"ls\"<br/>let (output, exitCode2) = execCmdEx \"ls\"</pre>"}, {"lang": "Objective-C", "loc": 5, "block": "<pre class=\"objc highlighted_source\"><span class=\"kw4\">void</span> runls<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSTask_Class/\"><span class=\"kw5\">NSTask</span></a> launchedTaskWithLaunchPath<span class=\"sy0\">:</span><span class=\"co3\">@</span><span class=\"st0\">\"/bin/ls\"</span><br/>        arguments<span class=\"sy0\">:</span>@<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">]</span> waitUntilExit<span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 1, "block": "<pre class=\"ocaml highlighted_source\"><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html\"><span class=\"kw2\">Sys</span></a><span class=\"sy0\">.</span>command <span class=\"st0\">\"ls\"</span></pre>"}, {"lang": "Octave", "loc": 1, "block": "<pre class=\"octave highlighted_source\"><a href=\"http://octave.sourceforge.net/octave/function/system.html\"><span class=\"kw5\">system</span></a><span class=\"br0\">(</span><span class=\"co4\">\"ls\"</span><span class=\"br0\">)</span><span class=\"sy5\">;</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">System cmd(\"pause\")</pre>"}, {"lang": "Oz", "loc": 1, "block": "<pre class=\"oz highlighted_source\"><span class=\"br0\">{</span>OS<span class=\"sy0\">.</span>system <span class=\"st0\">\"ls\"</span> _<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 1, "block": "<pre class=\"parigp highlighted_source\"><span class=\"kw1\">system</span><span class=\"br0\">(</span><span class=\"st0\">\"ls\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 7, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> ExecuteSystemCommand<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  SysUtils<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  ExecuteProcess<span class=\"br0\">(</span><span class=\"st0\">'/bin/ls'</span><span class=\"sy1\">,</span> <span class=\"st0\">'-alh'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 13, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">@results</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qx.html\"><span class=\"kw3\">qx</span></a><span class=\"br0\">(</span>ls<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># runs command and returns its STDOUT as a string</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@results</span> <span class=\"sy0\">=</span> <span class=\"st0\">`ls`</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># ditto, alternative syntax</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/system.html\"><span class=\"kw3\">system</span></a> <span class=\"st0\">\"ls\"</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># runs command and returns its exit status; its STDOUT gets output to our STDOUT</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">`ls`</span><span class=\"sy0\">;</span><br/><span class=\"co1\">#The same, but with back quotes</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/exec.html\"><span class=\"kw3\">exec</span></a> <span class=\"st0\">\"ls\"</span><span class=\"sy0\">;</span><br/><span class=\"co1\"># replace current process with another</span></pre>"}, {"lang": "Perl 6", "loc": 6, "block": "<pre class=\"perl6 highlighted_source\">run <span class=\"st0\">\"ls\"</span> <span class=\"kw1\">or</span> <span class=\"kw1\">die</span> $<span class=\"sy0\">!;</span> <span class=\"co1\"># output to stdout</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@ls</span> <span class=\"sy0\">=</span> <span class=\"co2\">qx/ls/</span><span class=\"sy0\">;</span>    <span class=\"co1\"># output to variable</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$cmd</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'ls'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">@ls</span> <span class=\"sy0\">=</span> qqx<span class=\"sy0\">/</span><span class=\"re0\">$cmd</span><span class=\"sy0\">/;</span>  <span class=\"co1\"># same thing with interpolation</span></pre>"}, {"lang": "PDP-11 Assembly", "loc": 58, "block": "<pre class=\"text highlighted_source\">; Execute a file - the equivalent of system() in stdio<br/>;<br/>; On entry, r1=&gt;nul-terminated command string<br/>; On exit,  VS=Couldn't fork<br/>;           VC=Forked successfully, r0=return value<br/>;<br/>.CLIsystem<br/>trap 2\t\t\t; fork()<br/>br   CLIchild\t\t; Child process returns here<br/>bcc  CLIparent\t\t; Parent process returns here<br/>mov  (sp)+,r1<br/>tst  (sp)+<br/>sev\t\t\t; Couldn't fork, set V<br/>rts  pc<br/>.CLIparent<br/>mov  r0,-(sp)\t\t; Save child's PID<br/>.CLIwait<br/>trap 7\t\t\t; wait()<br/>cmp  r0,(sp)<br/>beq  CLIfinished<br/>cmp  r0,#&amp;FFFF<br/>bne  CLIwait\t\t; Loop until child finished<br/>.CLIfinished<br/>tst  (sp)+\t\t; Drop child's PID<br/>mov  r1,r0\t\t; R0=return value<br/>mov  (sp)+,r1\t\t; Restore R1<br/>tst  (sp)+\t\t; Drop original R0<br/>swab r0\t\t\t; Move return value to bottom byte<br/>rts  pc<br/>\u00a0<br/>; CLI child process<br/>; -----------------<br/>.CLIchild<br/>clr  -(sp)\t\t\t; end of string array<br/>mov  r1,-(sp)\t\t\t; =&gt; command string<br/>mov  #UXsh3,-(sp)\t\t; =&gt; \"-c\"<br/>mov  #UXsh2,-(sp)\t\t; =&gt; \"sh\"<br/>mov  #&amp;890B,TRAP_BUF\t\t; exec<br/>mov  #UXsh1,TRAP_BUF+2\t\t; =&gt; \"/bin/sh\"<br/>mov  sp,TRAP_BUF+4\t\t; =&gt; pointers to command strings<br/>;mov  SV_ENVPTR,TRAP_BUF+6\t; =&gt; \"PATH=etc\"<br/>trap 0\t\t\t\t; indir()<br/>EQUW TRAP_BUF\t\t\t; exec(shell, parameters)<br/>add  #8,sp\t\t\t; If we get back, we didn't fork, we spawned<br/>mov  (sp)+,r1\t\t\t; So, restore registers<br/>clr  (sp)+\t\t\t; and return exit value in R0<br/>rts  pc<br/>\u00a0<br/>.UXsh1\tEQUS \"/bin/sh\",0<br/>.UXsh2\tEQUS \"sh\",0<br/>.UXsh3\tEQUS \"-c\",0<br/>ALIGN<br/>\u00a0<br/>.TRAP_BUF<br/>EQUW 0<br/>EQUW 0<br/>EQUW 0<br/>EQUW 0</pre>"}, {"lang": "Phix", "loc": 3, "block": "<pre class=\"text highlighted_source\">string cmd = {\"dir\",\"ls\"}[platform()-1]<br/>system(cmd)<br/>integer res = system_exec(\"pause\",4)</pre>"}, {"lang": "PHP", "loc": 2, "block": "<pre class=\"php highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.php.net/exec\"><span class=\"kw3\">exec</span></a><span class=\"br0\">(</span><span class=\"re0\">$command</span><span class=\"sy0\">,</span><span class=\"re0\">$output</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/nl2br\"><span class=\"kw3\">nl2br</span></a><span class=\"br0\">(</span><span class=\"re0\">$output</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 1, "block": "<pre class=\"text highlighted_source\">(call \"ls\")</pre>"}, {"lang": "Pike", "loc": 12, "block": "<pre class=\"pike highlighted_source\">int main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <span class=\"co1\">// Process.run was added in Pike 7.8 as a wrapper to simplify the use of Process.create_process()</span><br/>   mapping response <span class=\"sy0\">=</span> Process.<span class=\"me1\">run</span><span class=\"br0\">(</span><span class=\"st0\">\"ls -l\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"co1\">// response is now a map containing 3 fields</span><br/>   <span class=\"co1\">// stderr, stdout, and exitcode. We want stdout.</span><br/>   write<span class=\"br0\">(</span>response<span class=\"br0\">[</span><span class=\"st0\">\"stdout\"</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>   <span class=\"co1\">// with older versions of pike it's a bit more complicated:</span><br/>   Stdio.<span class=\"me1\">File</span> stdout <span class=\"sy0\">=</span> Stdio.<span class=\"me1\">File</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   Process.<span class=\"me1\">create_process</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"ls\"</span>, <span class=\"st0\">\"-l\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"br0\">[</span> <span class=\"st0\">\"stdout\"</span>\u00a0: stdout<span class=\"sy0\">-</span>&gt;pipe<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   write<span class=\"br0\">(</span>stdout<span class=\"sy0\">-</span>&gt;read<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Pop11", "loc": 1, "block": "<pre class=\"text highlighted_source\">sysobey('ls');</pre>"}, {"lang": "PowerShell", "loc": 3, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw2\">dir</span><br/><span class=\"kw2\">ls</span><br/><span class=\"kw1\">Get-ChildItem</span></pre>"}, {"lang": "Prolog", "loc": 1, "block": "<pre class=\"prolog highlighted_source\">shell<span class=\"br0\">(</span><span class=\"st_h\">'ls'</span><span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 11, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">ImportC</span> <span class=\"st0\">\"msvcrt.lib\"</span><br/>  system<span class=\"br0\">(</span><span class=\"kw2\">str</span>.p<span class=\"sy0\">-</span>ascii<span class=\"br0\">)</span><br/><span class=\"kw1\">EndImport</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  system<span class=\"br0\">(</span><span class=\"st0\">\"dir &amp; pause\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 3, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">os</span><br/>exit_code <span class=\"sy0\">=</span> <span class=\"kw3\">os</span>.<span class=\"me1\">system</span><span class=\"br0\">(</span><span class=\"st0\">'ls'</span><span class=\"br0\">)</span>       <span class=\"co1\"># Just execute the command, return a success/fail code</span><br/>output    <span class=\"sy0\">=</span> <span class=\"kw3\">os</span>.<span class=\"me1\">popen</span><span class=\"br0\">(</span><span class=\"st0\">'ls'</span><span class=\"br0\">)</span>.<span class=\"me1\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"co1\"># If you want to get the output data. Deprecated.</span></pre>"}, {"lang": "R", "loc": 2, "block": "<pre class=\"text highlighted_source\">system(\"ls\")<br/>output=system(\"ls\",intern=TRUE)</pre>"}, {"lang": "Racket", "loc": 16, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>;; simple execution of a shell command<br/>(system \"ls\")<br/>\u00a0<br/>;; capture output<br/>(string-split (with-output-to-string (\u03bb() (system \"ls\"))) \"\\n\")<br/>\u00a0<br/>;; Warning: passing random string to be run in a shell is a bad idea!<br/>;; much safer: avoids shell parsing, arguments passed separately<br/>(system* \"/bin/ls\" \"-l\")<br/>\u00a0<br/>;; avoid specifying the executable path<br/>(system* (find-executable-path \"/bin/ls\") \"-l\")<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 1, "block": "<pre class=\"text highlighted_source\">`ls -la` as listing</pre>"}, {"lang": "REBOL", "loc": 15, "block": "<pre class=\"rebol highlighted_source\"><span class=\"co1\">; Capture output to string variable:</span><br/>\u00a0<br/>x: <span class=\"st0\">\"\"</span>  call<span class=\"sy0\">/</span>output <span class=\"st0\">\"dir\"</span> x<br/><span class=\"kw3\">print</span> x<br/>\u00a0<br/><span class=\"co1\">; The 'console' refinement displays the command output on the REBOL command line.</span><br/>\u00a0<br/>call<span class=\"sy0\">/</span>console <span class=\"st0\">\"dir *.r\"</span><br/>call<span class=\"sy0\">/</span>console <span class=\"st0\">\"ls *.r\"</span><br/>\u00a0<br/>call<span class=\"sy0\">/</span>console <span class=\"st0\">\"pause\"</span><br/>\u00a0<br/><span class=\"co1\">; The 'shell' refinement may be necessary to launch some programs.</span><br/>\u00a0<br/>call<span class=\"sy0\">/</span>shell <span class=\"st0\">\"notepad.exe\"</span></pre>"}, {"lang": "Red", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>call/show\u00a0%pause       \u00a0;The /show refinement forces the display of system's shell window (Windows only).<br/>call/show\u00a0%dir<br/>call/show\u00a0%notepad.exe</pre>"}, {"lang": "REXX", "loc": 1, "block": "<pre class=\"rexx highlighted_source\"><span class=\"st0\">\"dir /a:d\"</span></pre>"}, {"lang": "Ring", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>system(\"dir\")<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 18, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">string</span> = <span class=\"st0\">`ls`</span><br/><span class=\"co1\"># runs command and returns its STDOUT as a string</span><br/><span class=\"kw3\">string</span> = <span class=\"sy0\">%</span>x<span class=\"br0\">{</span>ls<span class=\"br0\">}</span><br/><span class=\"co1\"># ditto, alternative syntax</span><br/>\u00a0<br/><span class=\"kw3\">system</span> <span class=\"st0\">\"ls\"</span><br/><span class=\"co1\"># runs command and returns its exit status; its STDOUT gets output to our STDOUT</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"st0\">`ls`</span><br/><span class=\"co1\">#The same, but with back quotes</span><br/>\u00a0<br/><span class=\"kw3\">exec</span> <span class=\"st0\">\"ls\"</span><br/><span class=\"co1\"># replace current process with another</span><br/>\u00a0<br/><span class=\"co1\"># call system command and read output asynchronously</span><br/>io = <span class=\"kw4\">IO</span>.<span class=\"me1\">popen</span><span class=\"br0\">(</span><span class=\"st0\">'ls'</span><span class=\"br0\">)</span><br/><span class=\"co1\"># ... later</span><br/>io.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>line<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> line<span class=\"br0\">}</span></pre>"}, {"lang": "Run BASIC", "loc": 2, "block": "<pre class=\"text highlighted_source\">print shell$(\"ls\")  ' prints the returned data from the OS<br/>a$ =  shell$(\"ls\")  ' holds returned data in a$</pre>"}, {"lang": "Rust", "loc": 8, "block": "<pre class=\"text highlighted_source\">use std::process::Command;<br/>fn main() {<br/>    let output = Command::new(\"ls\").output().unwrap_or_else(|e| {<br/>        panic!(\"failed to execute process: {}\", e)<br/>    });<br/>    println!(\"{}\", String::from_utf8_lossy(&amp;output.stdout));<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 2, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">sys</span>.<span class=\"me1\">process</span>.<span class=\"me1\">Process</span><br/>Process<span class=\"br0\">(</span><span class=\"st0\">\"ls\"</span>, Seq<span class=\"br0\">(</span><span class=\"st0\">\"-oa\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">!</span></pre>"}, {"lang": "Scheme", "loc": 1, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>system <span class=\"st0\">\"ls\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 7, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"shell.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    cmd_sh(\"ls\");<br/>  end func;</pre>"}, {"lang": "SETL", "loc": 1, "block": "<pre class=\"text highlighted_source\">system(\"ls\");</pre>"}, {"lang": "Sidef", "loc": 10, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># Pipe in read-only mode</span><br/><span class=\"sy0\">%</span><span class=\"kw3\">p</span><span class=\"br0\">(</span>ls<span class=\"br0\">)</span>.<span class=\"me1\">open_r</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>line<span class=\"sy0\">|</span><br/>    <span class=\"kw3\">print</span> line;<br/><span class=\"br0\">}</span>;<br/>\u00a0<br/>var str1 = <span class=\"st0\">`ls`</span>;         <span class=\"co1\"># backtick: returns a string</span><br/>var str2 = <span class=\"sy0\">%</span>x<span class=\"br0\">(</span>ls<span class=\"br0\">)</span>;       <span class=\"co1\"># ditto, alternative syntax</span><br/>\u00a0<br/>Sys.<span class=\"kw3\">system</span><span class=\"br0\">(</span><span class=\"st0\">'ls'</span><span class=\"br0\">)</span>;   <span class=\"co1\"># system: executes a command and prints the result</span><br/>Sys.<span class=\"kw3\">exec</span><span class=\"br0\">(</span><span class=\"st0\">'ls'</span><span class=\"br0\">)</span>;     <span class=\"co1\"># replaces current process with another</span></pre>"}, {"lang": "Slate", "loc": 1, "block": "<pre class=\"text highlighted_source\">Platform run: 'ls'.</pre>"}, {"lang": "Smalltalk", "loc": 1, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Smalltalk</span> system: <span class=\"st0\">'ls'</span>.</pre>"}, {"lang": "Standard ML", "loc": 1, "block": "<pre class=\"text highlighted_source\">OS.Process.system \"ls\"</pre>"}, {"lang": "SQL PL", "loc": 3, "block": "<pre class=\"sql highlighted_source\">\u00a0<br/>!ls<br/>\u00a0</pre>"}, {"lang": "Stata", "loc": 13, "block": "<pre class=\"text highlighted_source\">!dir<br/>\u00a0<br/>* print a message and wait<br/>!echo Ars Longa Vita Brevis &amp; pause<br/>\u00a0<br/>* load Excel from Stata<br/>!start excel<br/>\u00a0<br/>* run a Python program (Python must be installed and accessible in the PATH environment variable)<br/>!python preprocessing.py<br/>\u00a0<br/>* load Windows Notepad<br/>winexec notepad</pre>"}, {"lang": "Tcl", "loc": 1, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">exec</span> ls<span class=\"br0\">]</span></pre>"}, {"lang": "Toka", "loc": 2, "block": "<pre class=\"text highlighted_source\">needs shell<br/>\" ls\" system</pre>"}, {"lang": "TUSCRIPT", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>system=SYSTEM ()<br/>IF (system==\"WIN\") THEN<br/>EXECUTE \"dir\"<br/>ELSEIF (system.sw.\"LIN\") THEN<br/>EXECUTE \"ls -l\"<br/>ENDIF<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 1, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw2\">ls</span></pre>"}, {"lang": "Ursa", "loc": 11, "block": "<pre class=\"text highlighted_source\">decl string&lt;&gt; arg<br/>decl string&lt;&gt; output<br/>decl iodevice iod<br/>\u00a0<br/>append \"ls\" arg<br/>set iod (ursa.util.process.start arg)<br/>set output (iod.readlines)<br/>\u00a0<br/>for (decl int i) (&lt; i (size output)) (inc i)<br/>        out output&lt;i&gt; endl console<br/>end for</pre>"}, {"lang": "Ursala", "loc": 6, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import cli<br/>\u00a0<br/>#executable ('parameterized','')<br/>\u00a0<br/>myls = &lt;.file$[contents: --&lt;''&gt;]&gt;@hm+ (ask bash)/0+ -[ls --color=no]-!</pre>"}, {"lang": "VBScript", "loc": 4, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw4\">Set</span> objShell = <span class=\"kw2\">CreateObject</span>(<span class=\"st0\">\"WScript.Shell\"</span>)<br/>objShell.Run <span class=\"st0\">\"%comspec% /K dir\"</span>,3,<span class=\"kw5\">True</span><br/>\u00a0</pre>"}, {"lang": "Vedit macro language", "loc": 1, "block": "<pre class=\"vedit highlighted_source\">system<span class=\"br0\">(</span><span class=\"st0\">\"dir\"</span><span class=\"sy0\">,</span> DOS<span class=\"br0\">)</span></pre>"}, {"lang": "Visual Basic", "loc": 76, "block": "<pre class=\"vb highlighted_source\">Attribute VB_Name = <span class=\"st0\">\"mdlShellAndWait\"</span><br/><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw4\">Declare</span> <span class=\"kw2\">Function</span> OpenProcess Lib <span class=\"st0\">\"kernel32\"</span> _<br/>    (<span class=\"kw4\">ByVal</span> dwDesiredAccess <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, <span class=\"kw4\">ByVal</span> bInheritHandle <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, _<br/>    <span class=\"kw4\">ByVal</span> dwProcessId <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> <span class=\"kw4\">Declare</span> <span class=\"kw2\">Function</span> GetExitCodeProcess Lib <span class=\"st0\">\"kernel32\"</span> _<br/>    (<span class=\"kw4\">ByVal</span> hProcess <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, lpExitCode <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>\u00a0<br/><span class=\"kw2\">Private</span> Const STATUS_PENDING = &amp;H103&amp;<br/><span class=\"kw2\">Private</span> Const PROCESS_QUERY_INFORMATION = &amp;H400<br/>\u00a0<br/><span class=\"co1\">'<br/></span><span class=\"co1\">' Little function go get exit code given processId<br/></span><span class=\"co1\">'<br/></span><span class=\"kw2\">Function</span> ProcessIsRunning( processId <span class=\"kw4\">as</span> <span class=\"kw1\">Long</span> ) <span class=\"kw4\">as</span> <span class=\"kw1\">Boolean</span><br/>    <span class=\"kw4\">Dim</span> exitCode <span class=\"kw4\">as</span> <span class=\"kw1\">Long</span><br/>    <span class=\"kw2\">Call</span> GetExitCodeProcess(lProcessId, exitCode)<br/>    ProcessIsRunning = (exitCode = STATUS_PENDING)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">' Spawn subprocess and wait for it to complete.<br/></span><span class=\"co1\">'   I believe that the command in the command line must be an exe or a bat file.<br/></span><span class=\"co1\">'   Maybe, however, it can reference any file the system knows how to \"Open\"<br/></span><span class=\"co1\">'<br/></span><span class=\"co1\">' commandLine is an executable. <br/></span><span class=\"co1\">' expectedDuration - is for poping up a dialog for whatever<br/></span><span class=\"co1\">' infoText - text for progressDialog dialog<br/></span><br/><span class=\"kw2\">Public</span> <span class=\"kw2\">Function</span> ShellAndWait( commandLine <span class=\"kw4\">As</span> <span class=\"kw1\">String</span>, _<br/>    expectedDuration <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span> ) <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>\u00a0<br/>    <span class=\"kw4\">Dim</span> inst <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    <span class=\"kw4\">Dim</span> startTime <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    <span class=\"kw4\">Dim</span> expirationTime <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    <span class=\"kw4\">Dim</span> pid <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>    <span class=\"kw4\">Dim</span> expiresSameDay <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>\u00a0<br/>    <span class=\"kw4\">On</span> <span class=\"kw4\">Error</span> <span class=\"kw3\">GoTo</span> HandleError<br/>\u00a0<br/>    <span class=\"co1\">'Deal with timeout being reset at Midnight ($hitForBrains VB folks)<br/></span>    startTime = CLng(Timer)<br/>    expirationTime = startTime + expectedDuration<br/>    expiresSameDay = expirationTime &lt; 86400<br/>    <span class=\"kw3\">If</span> <span class=\"kw3\">Not</span> expiresSameDay <span class=\"kw3\">Then</span><br/>        expirationTime = expirationTime - 86400<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0<br/>    inst = Shell(commandLine, vbMinimizedNoFocus)<br/>\u00a0<br/>    <span class=\"kw3\">If</span> inst &lt;&gt; 0 <span class=\"kw3\">Then</span><br/>        pid = OpenProcess(PROCESS_QUERY_INFORMATION, <span class=\"kw5\">False</span>, inst)<br/>\u00a0<br/>        <span class=\"kw3\">Do</span> <span class=\"kw3\">While</span> ProcessIsRunning( pid)<br/>            <span class=\"kw3\">DoEvents</span><br/>            <span class=\"kw3\">If</span> Timer &gt; expirationTime <span class=\"kw3\">And</span> (expiresSameDay <span class=\"kw3\">Or</span> Timer &lt; startTime) <span class=\"kw3\">Then</span><br/>                <span class=\"kw2\">Exit</span> <span class=\"kw3\">Do</span><br/>            <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>        <span class=\"kw3\">Loop</span> <br/>        ShellAndWait = <span class=\"kw5\">True</span><br/>    <span class=\"kw3\">Else</span><br/>        MsgBox (<span class=\"st0\">\"Couldn't execute command: \"</span> &amp; commandLine)<br/>        ShellAndWait = <span class=\"kw5\">False</span><br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\u00a0<br/>    <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/>HandleError:<br/>    MsgBox (<span class=\"st0\">\"Couldn't execute command: \"</span> &amp; commandLine)<br/>    ShellAndWait = <span class=\"kw5\">False</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> SpawnDir()<br/>   ShellAndWait(<span class=\"st0\">\"dir\"</span>, 10)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span></pre>"}, {"lang": "Wart", "loc": 1, "block": "<pre class=\"text highlighted_source\">system \"ls\"</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">System.cmd(System.isWindows and \"dir\" or \"ls\")</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 1, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"kw1\">PAUSE</span> <span class=\"nu0\">100</span></pre>"}]}