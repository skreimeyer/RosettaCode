{"task": "String_interpolation_(included)", "blocks": [{"lang": "Ada", "loc": 11, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>, Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">use</span>  Ada.<span class=\"me1\">Strings</span>, Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">procedure</span> String_Replace <span class=\"kw1\">is</span><br/>   Original\u00a0: <span class=\"kw3\">constant</span> String\u00a0:= <span class=\"st0\">\"Mary had a @<a class=\"__cf_email__\" data-cfemail=\"702f2f30\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> lamb.\"</span>;<br/>   Tbr\u00a0: <span class=\"kw3\">constant</span> String\u00a0:= <span class=\"st0\">\"@<a class=\"__cf_email__\" data-cfemail=\"90cfcfd0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span>;<br/>   New_Str\u00a0: <span class=\"kw3\">constant</span> String\u00a0:= <span class=\"st0\">\"little\"</span>;<br/>   Index\u00a0: Natural\u00a0:= Fixed.<span class=\"me1\">Index</span> <span class=\"br0\">(</span>Original, Tbr<span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span>Fixed.<span class=\"me1\">Replace_Slice</span> <span class=\"br0\">(</span><br/>     Original, Index, Index + Tbr'Length - <span class=\"nu0\">1</span>, New_Str<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> String_Replace;</pre>"}, {"lang": "Aikido", "loc": 5, "block": "<pre class=\"text highlighted_source\">const little = \"little\"<br/>printf (\"Mary had a\u00a0%s lamb\\n\", little)<br/>\u00a0<br/>// alternatively<br/>println (\"Mary had a \" + little + \" lamb\")</pre>"}, {"lang": "ALGOL 68", "loc": 12, "block": "<pre class=\"algol68 highlighted_source\">main<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/><span class=\"coMULTI\"># as a STRING #</span><br/>  <span class=\"kw3\">STRING</span> extra <span class=\"sy1\">=</span> <span class=\"st0\">\"little\"</span><span class=\"sy1\">;</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"Mary had a \"</span>g<span class=\"st0\">\" lamb.\"</span>l$<span class=\"sy1\">,</span> extra<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># as a FORMAT #</span><br/>  <span class=\"kw6\">FORMAT</span> extraf <span class=\"sy1\">=</span> $<span class=\"st0\">\"little\"</span>$<span class=\"sy1\">;</span><br/>  <span class=\"kw22\">printf</span><span class=\"br0\">(</span>$<span class=\"st0\">\"Mary had a \"</span>f<span class=\"br0\">(</span>extraf<span class=\"br0\">)</span><span class=\"st0\">\" lamb.\"</span>l$<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># or: use simply use STRING concatenation #</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Mary had a \"</span><span class=\"sy1\">+</span>extra<span class=\"sy1\">+</span><span class=\"st0\">\" lamb.\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 9, "block": "<pre class=\"autohotkey highlighted_source\"><span class=\"co1\">; Using the = operator</span><br/>LIT <span class=\"sy0\">=</span> little<br/>string <span class=\"sy0\">=</span> Mary had a <span class=\"re0\">%LIT%</span> lamb<span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"co1\">; Using the\u00a0:= operator</span><br/>LIT <span class=\"sy0\">:=</span> <span class=\"st0\">\"little\"</span><br/>string <span class=\"sy0\">:=</span> <span class=\"st0\">\"Mary had a\"</span> LIT <span class=\"st0\">\" lamb.\"</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a> <span class=\"re0\">%string%</span></pre>"}, {"lang": "AWK", "loc": 6, "block": "<pre class=\"awk highlighted_source\"><span class=\"co1\">#!/usr/bin/awk -f</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>\tstr=<span class=\"st0\">\"Mary had a # lamb.\"</span><br/>\t<span class=\"kw4\">gsub</span><span class=\"br0\">(</span><span class=\"sy3\">/</span><span class=\"co1\">#/, \"little\", str)</span><br/>\t<span class=\"kw5\">print</span> str<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Batch File", "loc": 11, "block": "<pre class=\"dos highlighted_source\"><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>\u00a0:<span class=\"re0\">interpolate</span> <span class=\"sy0\">%</span><span class=\"re3\">1</span> <span class=\"sy0\">%</span><span class=\"re3\">2</span> res<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">res</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">eof</span><br/>\u00a0<br/>:<span class=\"re0\">interpolate</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> pat=<span class=\"sy0\">%</span><span class=\"re3\">~1</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> str=<span class=\"sy0\">%</span><span class=\"re3\">~2</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> <span class=\"sy0\">%</span><span class=\"re3\">3</span>=<span class=\"sy0\">!</span><span class=\"re2\">pat:X=%<span class=\"re3\">str</span>%</span><span class=\"sy0\">!</span> <br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">eof</span></pre>"}, {"lang": "Bracmat", "loc": 1, "block": "<pre class=\"text highlighted_source\">@(\"Mary had a X lamb\":?a X\u00a0?z) &amp; str$(!a little\u00a0!z)</pre>"}, {"lang": "C", "loc": 7, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>extra <span class=\"sy0\">=</span> <span class=\"st0\">\"little\"</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Mary had a\u00a0%s lamb.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> extra<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 11, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> original<span class=\"br0\">(</span> <span class=\"st0\">\"Mary had a X lamb.\"</span> <span class=\"br0\">)</span> , toBeReplaced<span class=\"br0\">(</span> <span class=\"st0\">\"X\"</span> <span class=\"br0\">)</span> ,<br/>      replacement <span class=\"br0\">(</span> <span class=\"st0\">\"little\"</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> newString <span class=\"sy1\">=</span> original.<span class=\"me1\">replace</span><span class=\"br0\">(</span> original.<span class=\"me1\">find</span><span class=\"br0\">(</span> <span class=\"st0\">\"X\"</span> <span class=\"br0\">)</span> ,<br/>\t toBeReplaced.<span class=\"me1\">length</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , replacement <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"String after replacement: \"</span> <span class=\"sy1\">&lt;&lt;</span> newString <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" <span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 44, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co1\">// Variable argument template</span><br/>\u00a0<br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">;</span><br/><span class=\"kw2\">using</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> S, <span class=\"kw2\">typename</span>... <span class=\"me1\">Args</span><span class=\"sy1\">&gt;</span><br/>string interpolate<span class=\"br0\">(</span> <span class=\"kw4\">const</span> S<span class=\"sy3\">&amp;</span> orig , <span class=\"kw4\">const</span> Args<span class=\"sy3\">&amp;</span>... <span class=\"me1\">args</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>   string out<span class=\"br0\">(</span>orig<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>   <span class=\"co1\">// populate vector from argument list</span><br/>   <span class=\"kw4\">auto</span> va <span class=\"sy1\">=</span> <span class=\"br0\">{</span>args...<span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>   vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span> v<span class=\"br0\">{</span>va<span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>   <span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span> string s<span class=\"sy4\">:</span> v<span class=\"br0\">)</span><br/>     <span class=\"br0\">{</span><br/>       string is <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">to_string</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>       string t <span class=\"sy1\">=</span> <span class=\"st0\">\"{\"</span> <span class=\"sy2\">+</span>  is <span class=\"sy2\">+</span> <span class=\"st0\">\"}\"</span><span class=\"sy4\">;</span>  <span class=\"co1\">// \"{1}\", \"{2}\", ...</span><br/>       <span class=\"kw2\">try</span><br/>\t <span class=\"br0\">{</span><br/>\t   <span class=\"kw4\">auto</span> pos <span class=\"sy1\">=</span> out.<span class=\"me1\">find</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t   <span class=\"kw1\">if</span> <span class=\"br0\">(</span> pos <span class=\"sy3\">!</span><span class=\"sy1\">=</span> out.<span class=\"me1\">npos</span><span class=\"br0\">)</span>  <span class=\"co1\">// found token</span><br/>\t     <span class=\"br0\">{</span><br/>\t       out.<span class=\"me1\">erase</span><span class=\"br0\">(</span>pos, t.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"co1\">//erase token</span><br/>\t       out.<span class=\"me1\">insert</span><span class=\"br0\">(</span> pos, s<span class=\"br0\">)</span><span class=\"sy4\">;</span>       <span class=\"co1\">// insert arg</span><br/>\t     <span class=\"br0\">}</span><br/>\u00a0<br/>\t   i<span class=\"sy2\">++</span><span class=\"sy4\">;</span>                           <span class=\"co1\">// next </span><br/>\t <span class=\"br0\">}</span><br/>\t <span class=\"kw2\">catch</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"me2\">exception</span><span class=\"sy3\">&amp;</span> e<span class=\"br0\">)</span><br/>\t   <span class=\"br0\">{</span><br/>\t     std<span class=\"sy4\">::</span><span class=\"kw3\">cerr</span> <span class=\"sy1\">&lt;&lt;</span> e.<span class=\"me1\">what</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\t   <span class=\"br0\">}</span><br/>\u00a0<br/>     <span class=\"br0\">}</span> <span class=\"co1\">// for</span><br/>\u00a0<br/>   <span class=\"kw1\">return</span> out<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 9, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw4\">string</span> extra <span class=\"sy0\">=</span> <span class=\"st0\">\"little\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">string</span> formatted <span class=\"sy0\">=</span> $<span class=\"st0\">\"Mary had a {extra} lamb.\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw5\">System</span><span class=\"sy0\">.</span><span class=\"me1\">Console</span><span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>formatted<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>little <span class=\"st0\">\"little\"</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>println <span class=\"br0\">(</span>format <span class=\"st0\">\"Mary had a\u00a0%s lamb.\"</span> little<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 12, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> interpolation-included<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  extra <span class=\"kw3\">PIC</span> X<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span> <span class=\"kw3\">VALUE</span> <span class=\"st0\">\"little\"</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"kw3\">FUNCTION</span> SUBSTITUTE<span class=\"br0\">(</span><span class=\"st0\">\"Mary had a X lamb.\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"sy0\">,</span> extra<span class=\"br0\">)</span><br/>\u00a0<br/>           GOBACK<br/>           <span class=\"sy0\">.</span></pre>"}, {"lang": "Coco", "loc": 2, "block": "<pre class=\"text highlighted_source\">size = 'little'<br/>console.log \"Mary had a #size lamb.\"</pre>"}, {"lang": "CoffeeScript", "loc": 11, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>size = <span class=\"st0\">'little'</span><br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"Mary had a #{size} lamb.\"</span> <span class=\"co1\"># Mary had a little lamb.</span><br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"Escaping: <span class=\"es0\">\\#</span>{}\"</span> <span class=\"co1\"># Escaping: #{}</span><br/>console.<span class=\"me1\">log</span> <span class=\"st0\">'No #{ interpolation} with single quotes'</span> <span class=\"co1\"># No #{ interpolation} with single quotes</span><br/>\u00a0<br/><span class=\"co1\"># Multi-line strings and arbtrary expressions work: 20</span><br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"\"\"<br/>  Multi-line strings and arbtrary expressions work: #{ 5 * 4 }<br/>  \"\"\"</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 2, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>extra <span class=\"st0\">\"little\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"Mary had a ~A lamb.~%\"</span> extra<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 6, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"st0\">\"Mary had a\u00a0%s lamb.\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"little\"</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"Mary had a\u00a0%2$s\u00a0%1$s lamb.\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"little\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"white\"</span><span class=\"br0\">)</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 36, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> Project1<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  System<span class=\"sy1\">.</span><span class=\"me1\">SysUtils</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  Template <span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  Marker <span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  Description <span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  Value <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  Output <span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"co1\">// StringReplace can be used if you are definitely using strings</span><br/>  <span class=\"co1\">// http://docwiki.embarcadero.com/Libraries/XE7/en/System.SysUtils.StringReplace</span><br/>  Template <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'Mary had a X lamb.'</span><span class=\"sy1\">;</span><br/>  Marker <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'X'</span><span class=\"sy1\">;</span><br/>  Description <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'little'</span><span class=\"sy1\">;</span><br/>  Output <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">StringReplace</span><span class=\"br0\">(</span>Template<span class=\"sy1\">,</span> Marker<span class=\"sy1\">,</span> Description<span class=\"sy1\">,</span> <span class=\"br0\">[</span>rfReplaceAll<span class=\"sy1\">,</span> rfIgnoreCase<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>Output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// You could also use format to do the same thing.</span><br/>  <span class=\"co1\">// http://docwiki.embarcadero.com/Libraries/XE7/en/System.SysUtils.Format</span><br/>  Template <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'Mary had a\u00a0%s lamb.'</span><span class=\"sy1\">;</span><br/>  Description <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'little'</span><span class=\"sy1\">;</span><br/>  Output <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">format</span><span class=\"br0\">(</span>Template<span class=\"sy1\">,</span><span class=\"br0\">[</span>Description<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>Output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// Unlike StringReplace, format is not restricted to strings.</span><br/>  Template <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'Mary had a\u00a0%s lamb. It was worth $%d.'</span><span class=\"sy1\">;</span><br/>  Description <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">'little'</span><span class=\"sy1\">;</span><br/>  Value <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">20</span><span class=\"sy1\">;</span><br/>  Output <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">format</span><span class=\"br0\">(</span>Template<span class=\"sy1\">,</span><span class=\"br0\">[</span>Description<span class=\"sy1\">,</span> Value<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>Output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "DWScript", "loc": 1, "block": "<pre class=\"delphi highlighted_source\">PrintLn<span class=\"br0\">(</span><span class=\"kw3\">Format</span><span class=\"br0\">(</span><span class=\"st0\">'Mary had a\u00a0%s lamb.'</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'little'</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "E", "loc": 2, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> adjective <span class=\"sy0\">:=</span> <span class=\"st0\">\"little\"</span><br/><span class=\"st0\">`Mary had a $adjective lamb`</span></pre>"}, {"lang": "EchoLisp", "loc": 7, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"co1\">;; format uses\u00a0%a or ~a as replacement directive</span><br/><span class=\"br0\">(</span>format <span class=\"st0\">\"Mary had a ~a lamb\"</span> <span class=\"st0\">\"little\"</span><span class=\"br0\">)</span><br/>   \u2192 <span class=\"st0\">\"Mary had a little lamb\"</span><br/><span class=\"br0\">(</span>format <span class=\"st0\">\"Mary had a\u00a0%a lamb\"</span> <span class=\"st0\">\"little\"</span><span class=\"br0\">)</span><br/>   \u2192 <span class=\"st0\">\"Mary had a little lamb\"</span><br/>\u00a0</pre>"}, {"lang": "ECL", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>IMPORT STD;<br/>STD.Str.FindReplace('Mary had a X Lamb', 'X','little');<br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 7, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>\u00a0<br/>program =<br/>[    <br/>    var s\u00a0:= \"little\".<br/>    console printLineFormatted(\"Mary had a {0} lamb.\",s); readChar.<br/>].</pre>"}, {"lang": "Elixir", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>x = \"little\"<br/>IO.puts \"Mary had a #{x} lamb\"<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre>7&gt; S1 = \"Mary had a ~s lamb\".\n8&gt; S2 = lists:flatten( io_lib:format(S1, [\"big\"]) ).\n9&gt; S2.\n\"Mary had a big lamb\"\n</pre>"}, {"lang": "Euphoria", "loc": 4, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">constant</span> lambType <span class=\"sy1\">=</span> <span class=\"st0\">\"little\"</span><br/><span class=\"kw2\">sequence</span> s<br/>s <span class=\"sy1\">=</span> <span class=\"kw2\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"Mary had a\u00a0%s lamb.\"</span><span class=\"sy2\">,</span><span class=\"br0\">{</span>lambType<span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span>s<span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 2, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> lambType <span class=\"sy0\">=</span> <span class=\"st0\">\"little\"</span><br/>printfn <span class=\"st0\">\"Mary had a\u00a0%s lamb.\"</span> lambType</pre>"}, {"lang": "Factor", "loc": 7, "block": "<pre class=\"text highlighted_source\">USE: formatting <br/>\u00a0<br/>SYMBOL: little<br/>\u00a0<br/>\"little\" little set<br/>\u00a0<br/>little get \"Mary had a\u00a0%s lamb\" sprintf</pre>"}, {"lang": "Falcon", "loc": 10, "block": "<pre class=\"falcon highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* created by Aykayayciti Earl Lamont Montgomery<br/>April 9th, 2018 */</span><br/>\u00a0<br/>size <span class=\"sy0\">=</span> <span class=\"st0\">\"little\"</span><br/><span class=\"sy0\">&gt;</span> <span class=\"sy0\">@</span> <span class=\"st0\">\"Mary had a $size lamb\"</span><br/>\u00a0<br/><span class=\"co1\">// line 1: use of the = operator</span><br/><span class=\"co1\">// line 2: use of the @ and $ operator</span><br/>\u00a0</pre>"}, {"lang": "Fantom", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fansh&gt; x\u00a0:= \"little\"<br/>little<br/>fansh&gt; echo (\"Mary had a $x lamb\")<br/>Mary had a little lamb<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 19, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> interpolate<br/>\u00a0<br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw4\">trim</span><span class=\"br0\">(</span>inter<span class=\"br0\">(</span><span class=\"st0\">\"Mary had a X lamb.\"</span>,<span class=\"st0\">\"X\"</span>,<span class=\"st0\">\"little\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  elemental <span class=\"kw1\">function</span> inter<span class=\"br0\">(</span>string,place,ins<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>new<span class=\"br0\">)</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=*</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span>                          <span class=\"sy0\">::</span> <span class=\"me2\">string</span>,place,ins<br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"kw4\">len</span><span class=\"sy0\">=</span><span class=\"kw4\">len</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw4\">max</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"kw4\">len</span><span class=\"br0\">(</span>ins<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"kw4\">len</span><span class=\"br0\">(</span>place<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">new</span><br/>    <span class=\"kw3\">integer</span>                                               <span class=\"sy0\">::</span> <span class=\"me2\">idx</span><br/>    idx <span class=\"sy0\">=</span> <span class=\"kw4\">index</span><span class=\"br0\">(</span>string,place<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> idx <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      new <span class=\"sy0\">=</span> string<br/>    <span class=\"kw1\">else</span><br/>      new <span class=\"sy0\">=</span> string<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>idx<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">//</span>ins<span class=\"sy0\">//</span>string<span class=\"br0\">(</span>idx<span class=\"sy0\">+</span><span class=\"kw4\">len</span><span class=\"br0\">(</span>place<span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"kw4\">len</span><span class=\"br0\">(</span>string<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> inter<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> interpolate</pre>"}, {"lang": "FreeBASIC", "loc": 9, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"co2\">#Include \"crt/stdio.bi\"  '' header needed for printf</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> x <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\"big\"</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Mary had a \"</span>; x; <span class=\"st0\">\" lamb\"</span>   <span class=\"co1\">'' FB's native Print statement</span><br/>x = <span class=\"st0\">\"little\"</span><br/>printf<span class=\"br0\">(</span><span class=\"st0\">\"Mary also had a\u00a0%s lamb\"</span>, x<span class=\"br0\">)</span> <br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "Frink", "loc": 2, "block": "<pre class=\"text highlighted_source\">x = \"little\"<br/>println[\"Mary had a $x lamb.\"]</pre>"}, {"lang": "FunL", "loc": 2, "block": "<pre class=\"text highlighted_source\">X = 'little'<br/>println( \"Mary had a $X lamb.\" )</pre>"}, {"lang": "Gambas", "loc": 5, "block": "<pre class=\"gambas highlighted_source\"><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> <a href=\"http://gambasdoc.org/help/lang/subst\"><span class=\"kw2\">Subst</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Mary had a &amp;1 lamb\"</span>, <span class=\"st0\">\"little\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "Gastona", "loc": 7, "block": "<pre class=\"text highlighted_source\">#listix#<br/>\u00a0<br/>   &lt;how&gt;   //little<br/>   &lt;what&gt;  //has a @&lt;how&gt; lamb<br/>\u00a0<br/>   &lt;main&gt;  //Mary @&lt;what&gt;<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 14, "block": "<pre class=\"go highlighted_source\">\u00a0<br/><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    str <span class=\"sy2\">:=</span> <span class=\"st0\">\"Mary had a\u00a0%s lamb\"</span><br/>    txt <span class=\"sy2\">:=</span> <span class=\"st0\">\"little\"</span><br/>    out <span class=\"sy2\">:=</span> fmt<span class=\"sy3\">.</span><span class=\"me1\">Sprintf</span><span class=\"sy1\">(</span>str<span class=\"sy1\">,</span> txt<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span>out<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0</pre>"}, {"lang": "Groovy", "loc": 2, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> adj <span class=\"sy0\">=</span> <span class=\"st0\">'little'</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> <span class=\"st0\">'Mary had a little lamb.'</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"Mary had a ${adj} lamb.\"</span></pre>"}, {"lang": "Haskell", "loc": 3, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Printf<br/>\u00a0<br/>main <span class=\"sy0\">=</span> printf <span class=\"st0\">\"Mary had a\u00a0%s lamb<span class=\"es0\">\\n</span>\"</span> <span class=\"st0\">\"little\"</span></pre>"}, {"lang": "HicEst", "loc": 4, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">CHARACTER</span> original<span class=\"sy1\">=</span><span class=\"st0\">\"Mary had a X lamb\"</span><span class=\"sy1\">,</span> little <span class=\"sy1\">=</span> <span class=\"st0\">\"little\"</span><span class=\"sy1\">,</span> output_string<span class=\"sy1\">*</span><span class=\"nu0\">100</span><br/>\u00a0<br/>output_string <span class=\"sy1\">=</span> original<br/><span class=\"kw1\">EDIT</span><span class=\"br0\">(</span>Text<span class=\"sy1\">=</span>output_string<span class=\"sy1\">,</span> Right<span class=\"sy1\">=</span><span class=\"st0\">'X'</span><span class=\"sy1\">,</span> RePLaceby<span class=\"sy1\">=</span>little<span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 5, "block": "<pre class=\"icon highlighted_source\">  s2 <span class=\"sy1\">:=</span> <span class=\"st0\">\"humongous\"</span><br/>  s3 <span class=\"sy1\">:=</span> <span class=\"st0\">\"little\"</span><br/>  s1 <span class=\"sy1\">:=</span>  <span class=\"st0\">\"Mary had a humongous lamb.\"</span><br/>  s1 <span class=\"sy1\">?:=</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">find</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">||</span> <span class=\"br0\">(</span><span class=\"sy1\">=</span>s2<span class=\"sy1\">,</span>s3<span class=\"br0\">)</span> <span class=\"sy1\">||</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>          <span class=\"co1\"># replaces the first instance of s2 with s3</span><br/>  <span class=\"kw1\">while</span> s1 <span class=\"sy1\">?:=</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">find</span><span class=\"br0\">(</span>s2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">||</span> <span class=\"br0\">(</span><span class=\"sy1\">=</span>s2<span class=\"sy1\">,</span>s3<span class=\"br0\">)</span> <span class=\"sy1\">||</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>    <span class=\"co1\"># replaces all instances of s2 with s3, equivalent to replace</span></pre>"}, {"lang": "J", "loc": 9, "block": "<pre class=\"j highlighted_source\">   require <span class=\"st_h\">'printf'</span><br/>   <span class=\"st_h\">'Mary had a\u00a0%s lamb.'</span> sprintf &lt;<span class=\"st_h\">'little'</span><br/>Mary had a little lamb.<br/>\u00a0<br/>   require <span class=\"st_h\">'strings'</span><br/>   <span class=\"sy0\">(</span><span class=\"st_h\">'%s'</span>;<span class=\"st_h\">'little'</span><span class=\"sy0\">)</span> stringreplace <span class=\"st_h\">'Mary had a\u00a0%s lamb.'</span><br/>Mary had a little lamb.<br/>   <span class=\"st_h\">'Mary had a\u00a0%s lamb.'</span> rplc <span class=\"st_h\">'%s'</span>;<span class=\"st_h\">'little'</span><br/>Mary had a little lamb.</pre>"}, {"lang": "Java", "loc": 9, "block": "<pre class=\"java highlighted_source\"><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> original <span class=\"sy0\">=</span> <span class=\"st0\">\"Mary had a X lamb\"</span><span class=\"sy0\">;</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> little <span class=\"sy0\">=</span> <span class=\"st0\">\"little\"</span><span class=\"sy0\">;</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> replaced <span class=\"sy0\">=</span> original.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"X\"</span>, little<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//does not change the original String</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>replaced<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">//Alternative:</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Mary had a\u00a0%s lamb.\"</span>, little<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"co1\">//Alternative:</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> formatted <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"Mary had a\u00a0%s lamb.\"</span>, little<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>formatted<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "JavaScript", "loc": 3, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> original <span class=\"sy0\">=</span> <span class=\"st0\">\"Mary had a X lamb\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> little <span class=\"sy0\">=</span> <span class=\"st0\">\"little\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> replaced <span class=\"sy0\">=</span> original.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"X\"</span><span class=\"sy0\">,</span> little<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">//does not change the original string</span></pre>"}, {"lang": "jq", "loc": 2, "block": "<pre class=\"text highlighted_source\">\"little\" as $x<br/>  | \"Mary had a \\($x) lamb\"</pre>"}, {"lang": "Julia", "loc": 2, "block": "<pre class=\"text highlighted_source\">X = \"little\"<br/>\"Mary had a $X lamb\"</pre>"}, {"lang": "Kotlin", "loc": 14, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <span class=\"st0\">\"little\"</span><br/>    <span class=\"co1\">// String interpolation using a simple variable</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Mary had a $s lamb\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// String interpolation using an expression (need to wrap it in braces)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Mary had a ${s.toUpperCase()} lamb\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// However if a simple variable is immediately followed by a letter, digit or underscore</span><br/>    <span class=\"co1\">// it must be treated as an expression</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Mary had a ${s}r lamb\"</span><span class=\"br0\">)</span> <span class=\"co1\">// not $sr    </span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 1, "block": "<pre class=\"text highlighted_source\">email_merge(\"Mary had a #adjective# lamb\", map(\"token\"=\"little\", \"adjective\"=\"\"), null, 'plain')</pre>"}, {"lang": "LiveCode", "loc": 4, "block": "<pre class=\"text highlighted_source\">local str=\"little\"<br/>put merge(\"Mary had a [[str]] lamb.\")<br/>\u00a0<br/>-- Mary had a little lamb.</pre>"}, {"lang": "Lua", "loc": 2, "block": "<pre class=\"lua highlighted_source\">str <span class=\"sy0\">=</span> <span class=\"kw3\">string.gsub</span><span class=\"br0\">(</span> <span class=\"st0\">\"Mary had a X lamb.\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"X\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"little\"</span> <span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span> str <span class=\"br0\">)</span></pre>"}, {"lang": "M2000 Interpreter", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>module checkit {<br/>      size$=\"little\"<br/>      m$=format$(\"Mary had a {0} lamb.\", size$)<br/>      Print m$<br/>      Const RightJustify=1<br/>      \\\\ format$(string_expression)  process escape codes<br/>      Report RightJustify, format$(format$(\"Mary had a {0} {1} lamb.\\r\\n We use {0} for size, and {1} for color\\r\\n\", size$, \"wh\"+\"ite\"))<br/>      \\\\ we can use { } for multi line string<br/>      Report RightJustify, format$({Mary had a {0} {1} lamb.<br/>             We use {0} for size, and {1} for color<br/>             }, size$, \"wh\"+\"ite\")<br/>}<br/>checkit<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 3, "block": "<pre class=\"text highlighted_source\">Extra = \"little\";<br/>StringReplace[\"Mary had a X lamb.\", {\"X\" -&gt; Extra}]<br/>-&gt;\"Mary had a little lamb.\"</pre>"}, {"lang": "Maxima", "loc": 1, "block": "<pre class=\"text highlighted_source\">printf(true, \"Mary had a ~a lamb\", \"little\");</pre>"}, {"lang": "Nemerle", "loc": 14, "block": "<pre class=\"text highlighted_source\">using System;<br/>using System.Console;<br/>using Nemerle.IO;  // contains printf() and print()<br/>\u00a0<br/>module Stringy<br/>{<br/>    Main()\u00a0: void<br/>    {<br/>        def extra = \"little\";<br/>        printf(\"Mary had a\u00a0%s lamb.\\n\", extra);<br/>        print(\"Mary had a $extra lamb.\\n\");<br/>        WriteLine($\"Mary had a $extra lamb.\");<br/>    }<br/>}</pre>"}, {"lang": "NetRexx", "loc": 36, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>\u00a0<br/>options replace format comments java crossref savelog symbols<br/>\u00a0<br/><span class=\"kw1\">import</span> java.<span class=\"me0\">text</span>.<span class=\"me0\">MessageFormat</span><br/><span class=\"kw1\">import</span> java.<span class=\"me0\">text</span>.<span class=\"me0\">FieldPosition</span><br/>\u00a0<br/>useBif<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>useMessageFormat<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/>method useBif <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  st = <span class=\"st0\">\"Mary had a\u00a0%1$ lamb.\"</span><br/>  si = <span class=\"st0\">'little'</span><br/>\u00a0<br/>  <span class=\"kw1\">say</span> st.<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">'%1$'</span>, si<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/>method useMessageFormat <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  <span class=\"kw4\">result</span> = StringBuffer<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>\u00a0<br/>  args = Object <span class=\"br0\">[</span>                       -<br/>    Object Integer<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>,                  -<br/>    Object Date<span class=\"br0\">(</span><span class=\"br0\">)</span>,                      -<br/>    Object <span class=\"st0\">'a disturbance in the Force'</span> -<br/>  <span class=\"br0\">]</span><br/>  msgfmt = MessageFormat<span class=\"br0\">(</span><span class=\"st0\">'At {1, time} on {1, date}, there was {2} on planet {0, number, integer}.'</span><span class=\"br0\">)</span><br/>  <span class=\"kw4\">result</span> = msgfmt.<span class=\"me0\">format</span><span class=\"br0\">(</span>args, <span class=\"kw4\">result</span>, FieldPosition<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">say</span> <span class=\"kw4\">result</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 5, "block": "<pre class=\"text highlighted_source\">import strutils<br/>\u00a0<br/>var str = \"little\"<br/>echo \"Mary had a $# lamb\"\u00a0% [str]   <br/># doesn't need an array for one substitution, but use an array for multiple substitutions</pre>"}, {"lang": "OCaml", "loc": 2, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> extra <span class=\"sy0\">=</span> <span class=\"st0\">\"little\"</span> <span class=\"kw1\">in</span><br/><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"Mary had a\u00a0%s lamb.\"</span> extra</pre>"}, {"lang": "OOC", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>main: func {<br/>  X\u00a0:= \"little\"<br/>  \"Mary had a #{X} lamb\" println()<br/>}<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 4, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  X = <span class=\"st0\">\"little\"</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"Mary had a \"</span><span class=\"sy0\">#</span>X<span class=\"sy0\">#</span><span class=\"st0\">\" lamb\"</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 6, "block": "<pre class=\"c highlighted_source\">GEN<br/>string_interpolate<span class=\"br0\">(</span>GEN n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  pari_printf<span class=\"br0\">(</span><span class=\"st0\">\"The value was:\u00a0%Ps.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  GEN s <span class=\"sy0\">=</span> pari_sprintf<span class=\"br0\">(</span><span class=\"st0\">\"Storing\u00a0%Ps in a string\"</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 3, "block": "<pre class=\"perl highlighted_source\"><span class=\"re0\">$extra</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"little\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Mary had a $extra lamb.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"Mary had a\u00a0%s lamb.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$extra</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 7, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$extra</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"little\"</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Mary had a $extra lamb\"</span><span class=\"sy0\">;</span>           <span class=\"co1\"># variable interpolation</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"Mary had a { $extra } lamb\"</span><span class=\"sy0\">;</span>       <span class=\"co1\"># expression interpolation</span><br/><span class=\"kw3\">printf</span> <span class=\"st0\">\"Mary had a\u00a0%s lamb.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$extra</span><span class=\"sy0\">;</span> <span class=\"co1\"># standard printf</span><br/><span class=\"kw3\">say</span> <span class=\"re0\">$extra</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"Mary had a\u00a0%s lamb\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"co1\"># inside-out printf</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@lambs</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span>Jimmy Bobby Tommy<span class=\"sy0\">&gt;;</span><br/><span class=\"kw3\">say</span> Q <span class=\"sy0\">:</span>array <span class=\"br0\">{</span> $$$ The lambs are called <span class=\"re0\">@lambs</span><span class=\"br0\">[</span><span class=\"br0\">]</span>\\\\\\<span class=\"sy0\">.</span><span class=\"br0\">}</span> <span class=\"co1\"># only @-sigiled containers are interpolated</span></pre>"}, {"lang": "Phix", "loc": 3, "block": "<pre class=\"text highlighted_source\">string size = \"little\"<br/>string s = sprintf(\"Mary had a\u00a0%s lamb.\",{size})<br/>?s</pre>"}, {"lang": "PHP", "loc": 5, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$extra</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'little'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"Mary had a <span class=\"es4\">$extra</span> lamb.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://www.php.net/printf\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Mary had a <span class=\"es6\">%s</span> lamb.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">$extra</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 2, "block": "<pre class=\"text highlighted_source\">(let Extra \"little\"<br/>   (prinl (text \"Mary had a @1 lamb.\" Extra)) )</pre>"}, {"lang": "PL/I", "loc": 32, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process or<span class=\"br0\">(</span>!<span class=\"br0\">)</span> source xref attributes<span class=\"sy0\">;</span><br/> sit<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * Test string replacement<br/> * 02.08.2013 Walter Pachl<br/> *********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> s <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'Mary had a &amp;X lamb. It is &amp;X'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>repl<span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"st0\">'little'</span><span class=\"sy0\">,</span><span class=\"st0\">'&amp;X'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>A<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> repl<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>str<span class=\"sy0\">,</span><span class=\"kw1\">new</span><span class=\"sy0\">,</span>old<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * ooREXX has CHANGESTR(old,str,new[,count])<br/> * repl follows, however, the translate \"philosophy\"<br/> * translate(str,new,old) when old and new are just  a character each<br/> * and replaces all occurrences of old in str by new<br/> *********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> str <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span><span class=\"kw1\">new</span><span class=\"sy0\">,</span>old<span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>res<span class=\"sy0\">,</span>tmp<span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">init</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> p <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> tmp<span class=\"sy0\">=</span>str<span class=\"sy0\">;</span>                             <span class=\"coMULTI\">/* copy the input string       */</span><br/> <span class=\"kw1\">Do</span> <span class=\"kw1\">Until</span><span class=\"br0\">(</span>p<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   p<span class=\"sy0\">=</span><span class=\"kw1\">index</span><span class=\"br0\">(</span>tmp<span class=\"sy0\">,</span>old<span class=\"br0\">)</span><span class=\"sy0\">;</span>                  <span class=\"coMULTI\">/* position of old in tmp      */</span><br/>   <span class=\"kw1\">If</span> p<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span>                    <span class=\"coMULTI\">/* found                       */</span><br/>     res<span class=\"sy0\">=</span>res!!<span class=\"kw1\">left</span><span class=\"br0\">(</span>tmp<span class=\"sy0\">,</span>p<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>!!<span class=\"kw1\">new</span><span class=\"sy0\">;</span>     <span class=\"coMULTI\">/* append new to current result*/</span><br/>     tmp<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>tmp<span class=\"sy0\">,</span>p<span class=\"sy0\">+</span><span class=\"kw1\">length</span><span class=\"br0\">(</span>old<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   <span class=\"coMULTI\">/* prepare rest of input       */</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> res<span class=\"sy0\">=</span>res!!tmp<span class=\"sy0\">;</span>                        <span class=\"coMULTI\">/* final append                */</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span>res<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PowerShell", "loc": 2, "block": "<pre class=\"powershell highlighted_source\"><span class=\"re0\">$extra</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"little\"</span><br/><span class=\"st0\">\"Mary had a {0} lamb.\"</span> <span class=\"kw4\">-f</span> $extra</pre>"}, {"lang": "Prolog", "loc": 3, "block": "<pre class=\"prolog highlighted_source\">Extra <span class=\"sy6\">=</span> little<span class=\"sy4\">,</span><br/>format<span class=\"br0\">(</span><span class=\"st_h\">'Mary had a ~w lamb.'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Extra<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span>  <span class=\"co1\">% display result</span><br/>format<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom</span></a><span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Atom</span></a><span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"st_h\">'Mary had a ~w lamb.'</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Extra<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span>  <span class=\"co1\">% ... or store it a variable</span></pre>"}, {"lang": "PureBasic", "loc": 1, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw2\">ReplaceString</span><span class=\"br0\">(</span><span class=\"st0\">\"Mary had a X lamb.\"</span>,<span class=\"st0\">\"X\"</span>,<span class=\"st0\">\"little\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 4, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> original <span class=\"sy0\">=</span> <span class=\"st0\">'Mary had a\u00a0%s lamb.'</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> extra <span class=\"sy0\">=</span> <span class=\"st0\">'little'</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> original\u00a0% extra<br/><span class=\"st0\">'Mary had a little lamb.'</span></pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(format \"Mary had a ~a lamb\" \"little\")<br/>\u00a0</pre>"}, {"lang": "REBOL", "loc": 7, "block": "<pre class=\"rebol highlighted_source\">str: <span class=\"st0\">\"Mary had a &lt;%size%&gt; lamb\"</span><br/>size: <span class=\"st0\">\"little\"</span><br/>build-markup str<br/>\u00a0<br/><span class=\"co1\">;REBOL3 also has the REWORD function</span><br/>str: <span class=\"st0\">\"Mary had a $size lamb\"</span><br/>reword str <span class=\"br0\">[</span>size <span class=\"st0\">\"little\"</span><span class=\"br0\">]</span></pre>"}, {"lang": "REXX", "loc": 27, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program to demonstrate string interpolation (string replacement).*/</span><br/>                                       <span class=\"coMULTI\">/*the string to be replaced is   */</span><br/>replace   = <span class=\"st0\">\"little\"</span>                   <span class=\"coMULTI\">/*usually a unique character(s)  */</span><br/>                                       <span class=\"coMULTI\">/*string and is  case  sensative.*/</span><br/>original1 = <span class=\"st0\">\"Mary had a X lamb.\"</span><br/>new1      = <span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">'X'</span>, original1, replace<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'original1 ='</span> original1<br/><span class=\"kw1\">say</span> <span class=\"st0\">'replaced  ='</span> new1<br/><span class=\"kw1\">say</span><br/>\u00a0<br/>original2 = <span class=\"st0\">\"Mary had a\u00a0% lamb.\"</span><br/>new2      = <span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">'%'</span>, original2, replace<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'original2 ='</span> original2<br/><span class=\"kw1\">say</span> <span class=\"st0\">'replaced  ='</span> new2<br/><span class=\"kw1\">say</span><br/>\u00a0<br/>original3 = <span class=\"st0\">\"Mary had a $$$ lamb.\"</span><br/>new3      = <span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">'$$$'</span>,original3,replace<span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'original3 ='</span> original3<br/><span class=\"kw1\">say</span> <span class=\"st0\">'replaced3 ='</span> new3<br/><span class=\"kw1\">say</span><br/>\u00a0<br/>original4 = <span class=\"st0\">\"Mary had a someKindOf lamb.\"</span><br/>new3      = <span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">'someKindOf'</span>, original4, <span class=\"st0\">\"little\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'original4 ='</span> original4<br/><span class=\"kw1\">say</span> <span class=\"st0\">'replaced4 ='</span> new3<br/>                                       <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span></pre>"}, {"lang": "Ring", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>aString =substr(\"Mary had a X lamb.\", \"X\", \"little\")<br/>see aString + nl<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 6, "block": "<pre class=\"ruby highlighted_source\">irb<span class=\"br0\">(</span>main<span class=\"br0\">)</span>:001:<span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span> extra = <span class=\"st0\">'little'</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"little\"</span><br/>irb<span class=\"br0\">(</span>main<span class=\"br0\">)</span>:002:<span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span> <span class=\"st0\">\"Mary had a #{extra} lamb.\"</span><br/><span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"Mary had a little lamb.\"</span><br/>irb<span class=\"br0\">(</span>main<span class=\"br0\">)</span>:003:<span class=\"nu0\">0</span><span class=\"sy0\">&gt;</span> <span class=\"st0\">\"Mary had a\u00a0%s lamb.\"</span> <span class=\"sy0\">%</span> extra<br/><span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"Mary had a little lamb.\"</span></pre>"}, {"lang": "Run BASIC", "loc": 3, "block": "<pre class=\"text highlighted_source\">a$ = Mary had a X lamb.\"<br/>a$ = word$(a$,1,\"X\")+\"little\"+word$(a$,2,\"X\")<br/>\u00a0</pre>"}, {"lang": "Rust", "loc": 7, "block": "<pre class=\"text highlighted_source\">fn main() {<br/>    println!(\"Mary had a {} lamb\", \"little\");<br/>    // You can specify order<br/>    println!(\"{1} had a {0} lamb\", \"little\", \"Mary\");<br/>    // Or named arguments if you prefer<br/>    println!(\"{name} had a {adj} lamb\", adj=\"little\", name=\"Mary\");<br/>}</pre>"}, {"lang": "Scala", "loc": 49, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> StringInterpolation <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> util.<span class=\"me1\">matching</span>.<span class=\"me1\">Regex</span>.<span class=\"sy0\">_</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> size <span class=\"sy0\">=</span> <span class=\"st0\">\"little\"</span><br/>\u00a0<br/>  <span class=\"br0\">{</span> <span class=\"co1\">// Method I (preferred)</span><br/>    <span class=\"co1\">// Scala 2.10.0 supports direct string interpolation</span><br/>    <span class=\"co1\">// by putting \"s\" at the beginning of the string.</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"V2.10+ \u00a0: \"</span> + s<span class=\"st0\">\"Mary had a $size lamb,\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">{</span> <span class=\"co1\">// Method II</span><br/>    <span class=\"co1\">// Pre Scala 2.10 indirect use of Java Class Formatter</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> originalFormatter <span class=\"sy0\">=</span> <span class=\"st0\">\"Mary had a\u00a0%s lamb,\"</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"V2.10- 1: \"</span> + originalFormatter format size<span class=\"br0\">)</span><br/>    <span class=\"co1\">// Above mentioned is Scala's postfix notation and equivalent for: </span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"V2.10- 2: \"</span> + originalFormatter.<span class=\"me1\">format</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">// Also possible</span><br/>    printf<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"V2.10- 3: \"</span> + originalFormatter + <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">// All will be expanded to</span><br/>    print<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"V2.10- 3: \"</span> + originalFormatter + <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Formatter</span><span class=\"br0\">)</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"V2.10- 4: \"</span> + originalFormatter + <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span>, size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">{</span> <span class=\"co1\">// Method III</span><br/>    <span class=\"co1\">// Regular expressions, only for demonstration</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> extractor <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"<span class=\"es1\">\\$</span><span class=\"es0\">\\{</span>([^}]+)<span class=\"es0\">\\}</span>\"</span><span class=\"st0\">\"\"</span>.<span class=\"me1\">r</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">(</span>extractor.<span class=\"me1\">replaceAllIn</span><span class=\"br0\">(</span><span class=\"st0\">\"Regex  1: Mary had a ${x} lamb,\"</span>, <span class=\"st0\">\"snow white\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// RegEx freaking</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> interpolate<span class=\"br0\">(</span>text<span class=\"sy0\">:</span> String, vars<span class=\"sy0\">:</span> <span class=\"br0\">(</span>String, String<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>      extractor.<span class=\"me1\">replaceAllIn</span><span class=\"br0\">(</span>text,<br/>        <span class=\"sy0\">_</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Groups<span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> vars.<span class=\"me1\">toMap</span>.<span class=\"me1\">getOrElse</span><span class=\"br0\">(</span>v, <span class=\"st0\">\"\"</span> <span class=\"coMULTI\">/*in case nothing provided*/</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>    println<span class=\"br0\">(</span>interpolate<span class=\"br0\">(</span><span class=\"st0\">\"Regex  2: ${who} had a ${size} ${pet}, ${unknown}\"</span>,<br/>      <span class=\"br0\">(</span><span class=\"st0\">\"pet\"</span>, <span class=\"st0\">\"lamb\"</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"st0\">\"size\"</span>, <span class=\"st0\">\"fat\"</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"st0\">\"size\"</span>, <span class=\"st0\">\"humongous\"</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"st0\">\"who\"</span>, <span class=\"st0\">\"Mary\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">{</span> <span class=\"co1\">// Method IV, not recommended.</span><br/>    <span class=\"co1\">// Standard API method, search argument (1st ones) supposed to be a regular expression</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Replace1: \"</span> + <span class=\"st0\">\"Mary had a ${x} lamb\"</span>.<span class=\"me1\">replaceAll</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"<span class=\"es1\">\\$</span><span class=\"es0\">\\{</span>x<span class=\"es0\">\\}</span>\"</span><span class=\"st0\">\"\"</span>, size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">// Standard API method, literally, on regular expression</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Replace2: \"</span> + <span class=\"st0\">\"Mary had a ${x} lamb\"</span>.<span class=\"me1\">replaceAllLiterally</span><span class=\"br0\">(</span><span class=\"st0\">\"${x}\"</span>, size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"br0\">{</span> <span class=\"co1\">// Method IV, not recommended.</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Split  \u00a0: \"</span> + <span class=\"st0\">\"Mary had a ${x} lamb.\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"<span class=\"es1\">\\$</span><span class=\"es0\">\\{</span>([^}]+)<span class=\"es0\">\\}</span>\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">mkString</span><span class=\"br0\">(</span>size<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Sed", "loc": 3, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#!/bin/bash</span><br/><span class=\"co0\"># Usage example: . interpolate \"Mary has a X lamb\" \"quite annoying\"</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"$1\"</span> <span class=\"sy0\">|</span> <span class=\"kw2\">sed</span> <span class=\"st0\">\"s/ X / $2 /g\"</span></pre>"}, {"lang": "Seed7", "loc": 11, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    const string: original is \"Mary had a X lamb\";<br/>    const string: little is \"little\";<br/>    var string: replaced is \"\";<br/>  begin<br/>    replaced\u00a0:= replace(original, \"X\", little);<br/>    writeln(replaced);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 2, "block": "<pre class=\"ruby highlighted_source\">var extra = <span class=\"st0\">'little'</span>;<br/>say <span class=\"st0\">\"Mary had a #{extra} lamb\"</span>;</pre>"}, {"lang": "SNOBOL4", "loc": 5, "block": "<pre class=\"text highlighted_source\">        s1 = \"Mary had a humongous lamb.\"<br/>\ts2 = \"humongous\"<br/>        s3 = \"little\"           <br/>\ts1 s2 = s3 <br/>end</pre>"}, {"lang": "Stata", "loc": 2, "block": "<pre class=\"text highlighted_source\">: printf(\"Mary had a\u00a0%s lamb.\\n\", \"little\")<br/>Mary had a little lamb.</pre>"}, {"lang": "Swift", "loc": 2, "block": "<pre class=\"text highlighted_source\">let extra = \"little\"<br/>println(\"Mary had a \\(extra) lamb.\")</pre>"}, {"lang": "Tcl", "loc": 7, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">set</span> size <span class=\"st0\">\"little\"</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Mary had a $size lamb.\"</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> RandomWord <span class=\"br0\">{</span>args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>   <span class=\"kw2\">lindex</span> <span class=\"re0\">$args</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>int<span class=\"br0\">(</span>rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$args</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Mary had a [RandomWord little big] lamb.\"</span></pre>"}, {"lang": "TUSCRIPT", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>\u00a0<br/>sentence_old=\"Mary had a X lamb.\"<br/>\u00a0<br/>values=*<br/>DATA little<br/>DATA big<br/>\u00a0<br/>sentence_new=SUBSTITUTE (sentence_old,\":X:\",0,0,values)<br/>PRINT sentence_old<br/>PRINT sentence_new<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 4, "block": "<pre class=\"text highlighted_source\">extra='little'<br/>echo Mary had a $extra lamb.<br/>echo \"Mary had a $extra lamb.\"<br/>printf \"Mary had a\u00a0%s lamb.\\n\" $extra</pre>"}, {"lang": "Ursala", "loc": 1, "block": "<pre class=\"text highlighted_source\">-[foo-[ x ]-bar]-</pre>"}, {"lang": "VBA", "loc": 1, "block": "<pre>a=\"little\"\ndebug.print replace(\"Mary had a X lamb\",\"X\",a)  'prints Mary had a little lamb\n</pre>"}, {"lang": "Verbexx", "loc": 15, "block": "<pre class=\"text highlighted_source\">////////////////////////////////////////////////////////////////////////////////////////<br/>//<br/>//  The @INTERPOLATE verb processes a string with imbedded blocks of code.  The code<br/>//  blocks are parsed and evaluated.  Any results are converted to a string, which <br/>//  is then inserted into the output string, replacing the code and braces.<br/>//  <br/>// example: @INTERPOLATE \"text{ @IF (x &gt; y) then:{x} else:{y} }more text \"<br/>//<br/>////////////////////////////////////////////////////////////////////////////////////////<br/>\u00a0<br/>@VAR v = \"little\"; <br/>\u00a0<br/>@SAY (@INTERPOLATE \"Mary had a { v } lamb\");<br/>\u00a0<br/>//   output:    Mary had a litle lamb</pre>"}, {"lang": "Visual Basic .NET", "loc": 6, "block": "<pre class=\"vbnet highlighted_source\">\u00a0<br/><span class=\"kw1\">Dim</span> name <span class=\"kw1\">as</span> <span class=\"kw2\">String</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"J. Doe\"</span><br/><span class=\"kw1\">Dim</span> balance <span class=\"kw1\">as</span> <span class=\"kw2\">Double</span> <span class=\"sy0\">=</span> <span class=\"nu0\">123.45</span><br/><span class=\"kw1\">Dim</span> prompt <span class=\"kw1\">as</span> <span class=\"kw2\">String</span> <span class=\"sy0\">=</span> <span class=\"kw2\">String</span><span class=\"sy0\">.</span><a href=\"http://www.google.com/search?q=FORMAT+site:msdn.microsoft.com\"><span class=\"kw7\">Format</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Hello {0}, your balance is {1}.\"</span>, name, balance<span class=\"br0\">)</span><br/>Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>prompt<span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"Mary had a X lamb.\".replace(\"X\",\"big\")</pre>"}]}