{"task": "Arithmetic_evaluation", "blocks": [{"lang": "Ada", "loc": 142, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw3\">INT</span> base<span class=\"sy1\">=</span>10<span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> FIXED <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># numbers in the format 9,999.999 #</span><br/>\u00a0<br/><span class=\"coMULTI\">#IF build abstract syntax tree and then EVAL tree #</span><br/><span class=\"kw4\">MODE</span> AST <span class=\"sy1\">=</span> <span class=\"kw6\">UNION</span><span class=\"br0\">(</span>NODE<span class=\"sy1\">,</span> FIXED<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> NUM <span class=\"sy1\">=</span> <span class=\"kw4\">REF</span> AST<span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> NODE <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span>FIXED<span class=\"sy1\">,</span>FIXED<span class=\"br0\">)</span>FIXED op<span class=\"sy1\">,</span> NUM b<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> EVAL <span class=\"sy1\">=</span> <span class=\"br0\">(</span>NUM ast<span class=\"br0\">)</span>FIXED<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw2\">CASE</span> ast <span class=\"kw2\">IN</span><br/>    <span class=\"br0\">(</span>FIXED num<span class=\"br0\">)</span><span class=\"sy1\">:</span> num<span class=\"sy1\">,</span><br/>    <span class=\"br0\">(</span>NODE fork<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span>op <span class=\"kw6\">OF</span> fork<span class=\"br0\">)</span><span class=\"br0\">(</span>EVAL<span class=\"br0\">(</span> a <span class=\"kw6\">OF</span> fork<span class=\"br0\">)</span><span class=\"sy1\">,</span> EVAL <span class=\"br0\">(</span>b <span class=\"kw6\">OF</span> fork<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">ESAC</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"sy1\">+</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"kw4\">HEAP</span> AST <span class=\"sy1\">:=</span> NODE<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> <span class=\"br0\">(</span>FIXED a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>FIXED<span class=\"sy1\">:</span>a<span class=\"sy1\">+</span>b<span class=\"sy1\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">-</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"kw4\">HEAP</span> AST <span class=\"sy1\">:=</span> NODE<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> <span class=\"br0\">(</span>FIXED a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>FIXED<span class=\"sy1\">:</span>a<span class=\"sy1\">-</span>b<span class=\"sy1\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">*</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"kw4\">HEAP</span> AST <span class=\"sy1\">:=</span> NODE<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> <span class=\"br0\">(</span>FIXED a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>FIXED<span class=\"sy1\">:</span>a<span class=\"sy1\">*</span>b<span class=\"sy1\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">/</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"kw4\">HEAP</span> AST <span class=\"sy1\">:=</span> NODE<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> <span class=\"br0\">(</span>FIXED a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>FIXED<span class=\"sy1\">:</span>a<span class=\"sy1\">/</span>b<span class=\"sy1\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">**=</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"kw4\">HEAP</span> AST <span class=\"sy1\">:=</span> NODE<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> <span class=\"br0\">(</span>FIXED a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>FIXED<span class=\"sy1\">:</span>a<span class=\"sy1\">**</span>b<span class=\"sy1\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">#ELSE simply use REAL arithmetic with no abstract syntax tree at all #</span> CO<br/><span class=\"kw4\">MODE</span> NUM <span class=\"sy1\">=</span> FIXED<span class=\"sy1\">,</span> AST <span class=\"sy1\">=</span> FIXED<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> EVAL <span class=\"sy1\">=</span> <span class=\"br0\">(</span>FIXED num<span class=\"br0\">)</span>FIXED<span class=\"sy1\">:</span> num<span class=\"sy1\">;</span><br/><span class=\"coMULTI\">#FI#</span> <span class=\"kw2\">END</span> CO<br/>\u00a0<br/><span class=\"kw4\">MODE</span> LEX <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span>TOK<span class=\"br0\">)</span>NUM<span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> MONADIC <span class=\"sy1\">=</span><span class=\"kw4\">PROC</span> <span class=\"br0\">(</span>NUM<span class=\"br0\">)</span>NUM<span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> DIADIC <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span>NUM<span class=\"sy1\">,</span>NUM<span class=\"br0\">)</span>NUM<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> TOK <span class=\"sy1\">=</span> <span class=\"kw3\">CHAR</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> ACTION <span class=\"sy1\">=</span> <span class=\"kw6\">UNION</span><span class=\"br0\">(</span>STACKACTION<span class=\"sy1\">,</span> LEX<span class=\"sy1\">,</span> MONADIC<span class=\"sy1\">,</span> DIADIC<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> OPVAL <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">INT</span> prio<span class=\"sy1\">,</span> ACTION action<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> OPITEM <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span>TOK token<span class=\"sy1\">,</span> OPVAL opval<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"br0\">[</span>256<span class=\"br0\">]</span>STACKITEM stack<span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> STACKITEM <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span>NUM value<span class=\"sy1\">,</span> OPVAL op<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> STACKACTION <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> STACKITEM<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> begin <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> STACKITEM top<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> prio <span class=\"kw6\">OF</span> op <span class=\"kw6\">OF</span> top <span class=\"sy1\">-:=</span> <span class=\"sy1\">+</span>10<span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> end <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> STACKITEM top<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> prio <span class=\"kw6\">OF</span> op <span class=\"kw6\">OF</span> top <span class=\"sy1\">-:=</span> <span class=\"sy1\">-</span>10<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"sy1\">**</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">COMPL</span> a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"kw3\">COMPL</span><span class=\"sy1\">:</span> complex <span class=\"kw24\">exp</span><span class=\"br0\">(</span>complex <span class=\"kw24\">ln</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy1\">*</span>b<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"br0\">[</span>8<span class=\"br0\">]</span>OPITEM op list <span class=\"sy1\">:=</span><span class=\"br0\">(</span><br/><span class=\"coMULTI\">#  OP  PRIO ACTION #</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"^\"</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span>8<span class=\"sy1\">,</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> a<span class=\"sy1\">**</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"*\"</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span>7<span class=\"sy1\">,</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> a<span class=\"sy1\">*</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span>7<span class=\"sy1\">,</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> a<span class=\"sy1\">/</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span>6<span class=\"sy1\">,</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> a<span class=\"sy1\">+</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span>6<span class=\"sy1\">,</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> a<span class=\"sy1\">-</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"(\"</span><span class=\"sy1\">,</span><span class=\"br0\">(</span><span class=\"sy1\">+</span>10<span class=\"sy1\">,</span> begin<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\")\"</span><span class=\"sy1\">,</span><span class=\"br0\">(</span><span class=\"sy1\">-</span>10<span class=\"sy1\">,</span> end<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"?\"</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span>9<span class=\"sy1\">,</span> LEX<span class=\"sy1\">:</span><span class=\"kw7\">SKIP</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> op dict <span class=\"sy1\">=</span> <span class=\"br0\">(</span>TOK op<span class=\"br0\">)</span><span class=\"kw4\">REF</span> OPVAL<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/><span class=\"coMULTI\"># This can be unrolled to increase performance #</span><br/>  <span class=\"kw4\">REF</span> OPITEM candidate<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> op list <span class=\"kw2\">WHILE</span><br/>    candidate <span class=\"sy1\">:=</span> op list<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># WHILE #</span> op <span class=\"sy1\">/=</span> token <span class=\"kw6\">OF</span> candidate <span class=\"kw2\">DO</span><br/>    <span class=\"kw7\">SKIP</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  opval <span class=\"kw6\">OF</span> candidate<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> build ast <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> expr<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>\u00a0<br/>  <span class=\"kw3\">INT</span> top<span class=\"sy1\">:=</span>0<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">PROC</span> compress ast stack <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> prio<span class=\"sy1\">,</span> NUM in value<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    NUM out value <span class=\"sy1\">:=</span> in value<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> loc <span class=\"kw2\">FROM</span> top <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 1 <span class=\"kw2\">WHILE</span> <br/>      <span class=\"kw4\">REF</span> STACKITEM stack top <span class=\"sy1\">:=</span> stack<span class=\"br0\">[</span>loc<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  <span class=\"coMULTI\"># WHILE #</span> <span class=\"br0\">(</span> top <span class=\"sy1\">&gt;=</span> <span class=\"kw8\">LWB</span> stack <span class=\"sy1\">|</span> prio <span class=\"sy1\">&lt;=</span> prio <span class=\"kw6\">OF</span> op <span class=\"kw6\">OF</span> stack top <span class=\"sy1\">|</span> <span class=\"kw7\">FALSE</span> <span class=\"br0\">)</span> <span class=\"kw2\">DO</span><br/>      top <span class=\"sy1\">:=</span> loc <span class=\"sy1\">-</span> 1<span class=\"sy1\">;</span><br/>      out value <span class=\"sy1\">:=</span> <br/>        <span class=\"kw2\">CASE</span> action <span class=\"kw6\">OF</span> op <span class=\"kw6\">OF</span> stack top <span class=\"kw2\">IN</span><br/>          <span class=\"br0\">(</span>MONADIC op<span class=\"br0\">)</span><span class=\"sy1\">:</span> op<span class=\"br0\">(</span>value <span class=\"kw6\">OF</span> stack top<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"coMULTI\"># not implemented #</span><br/>          <span class=\"br0\">(</span>DIADIC op<span class=\"br0\">)</span><span class=\"sy1\">:</span> op<span class=\"br0\">(</span>value <span class=\"kw6\">OF</span> stack top<span class=\"sy1\">,</span>out value<span class=\"br0\">)</span><br/>        <span class=\"kw2\">ESAC</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    out value<br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  NUM value <span class=\"sy1\">:=</span> <span class=\"kw7\">NIL</span><span class=\"sy1\">;</span><br/>  FIXED num value<span class=\"sy1\">;</span><br/>  <span class=\"kw3\">INT</span> decimal places<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> expr <span class=\"kw2\">DO</span><br/>    TOK token <span class=\"sy1\">=</span> expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw4\">REF</span> OPVAL this op <span class=\"sy1\">:=</span> op dict<span class=\"br0\">(</span>token<span class=\"br0\">)</span><span class=\"sy1\">;</span> <br/>    <span class=\"kw2\">CASE</span> action <span class=\"kw6\">OF</span> this op <span class=\"kw2\">IN</span><br/>      <span class=\"br0\">(</span>STACKACTION action<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>        <span class=\"kw2\">IF</span> prio <span class=\"kw6\">OF</span> thisop <span class=\"sy1\">=</span> <span class=\"sy1\">-</span>10 <span class=\"kw2\">THEN</span><br/>          value <span class=\"sy1\">:=</span> compress ast stack<span class=\"br0\">(</span>0<span class=\"sy1\">,</span> value<span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> top <span class=\"sy1\">&gt;=</span> <span class=\"kw8\">LWB</span> stack <span class=\"kw2\">THEN</span><br/>          action<span class=\"br0\">(</span>stack<span class=\"br0\">[</span>top<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><br/>      <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span>LEX<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"br0\">(</span> <span class=\"coMULTI\"># a crude lexer #</span><br/>        <span class=\"kw4\">SHORT</span> <span class=\"kw3\">INT</span> digit <span class=\"sy1\">=</span> <span class=\"kw8\">ABS</span> token <span class=\"sy1\">-</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"0\"</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> 0<span class=\"sy1\">&lt;=</span> digit <span class=\"kw16\">AND</span> digit <span class=\"sy1\">&lt;</span> base <span class=\"kw2\">THEN</span><br/>          <span class=\"kw2\">IF</span> NUM<span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"kw7\">IS</span> <span class=\"kw7\">NIL</span> <span class=\"kw2\">THEN</span> <span class=\"coMULTI\"># first digit #</span><br/>            decimal places <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>            value <span class=\"sy1\">:=</span> <span class=\"kw4\">HEAP</span> AST <span class=\"sy1\">:=</span> num value <span class=\"sy1\">:=</span> digit<br/>          <span class=\"kw2\">ELSE</span><br/>            NUM<span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"sy1\">:=</span> num value <span class=\"sy1\">:=</span> <span class=\"kw2\">IF</span> decimal places <span class=\"sy1\">=</span> 0 <br/>              <span class=\"kw2\">THEN</span><br/>                num value <span class=\"sy1\">*</span> base <span class=\"sy1\">+</span> digit<br/>              <span class=\"kw2\">ELSE</span><br/>                decimal places <span class=\"sy1\">*:=</span> base<span class=\"sy1\">;</span><br/>                num value <span class=\"sy1\">+</span> digit <span class=\"sy1\">/</span> decimal places<br/>              <span class=\"kw2\">FI</span><br/>          <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">ELIF</span> token <span class=\"sy1\">=</span> <span class=\"st0\">\".\"</span> <span class=\"kw2\">THEN</span><br/>          decimal places <span class=\"sy1\">:=</span> 1<br/>        <span class=\"kw2\">ELSE</span><br/>          <span class=\"kw7\">SKIP</span> <span class=\"coMULTI\"># and ignore spaces and any unrecognised characters #</span><br/>        <span class=\"kw2\">FI</span><br/>      <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span>MONADIC<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw7\">SKIP</span><span class=\"sy1\">,</span> <span class=\"coMULTI\"># not implemented #</span><br/>      <span class=\"br0\">(</span>DIADIC<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>        value <span class=\"sy1\">:=</span> compress ast stack<span class=\"br0\">(</span>prio <span class=\"kw6\">OF</span> this op<span class=\"sy1\">,</span> value<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> top<span class=\"sy1\">=</span><span class=\"kw8\">UPB</span> stack <span class=\"kw2\">THEN</span> index error <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        stack<span class=\"br0\">[</span>top<span class=\"sy1\">+:=</span>1<span class=\"br0\">]</span><span class=\"sy1\">:=</span>STACKITEM<span class=\"br0\">(</span>value<span class=\"sy1\">,</span> this op<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        value<span class=\"sy1\">:=</span><span class=\"kw7\">NIL</span><br/>      <span class=\"br0\">)</span><br/>    <span class=\"kw2\">ESAC</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  compress ast stack<span class=\"br0\">(</span><span class=\"sy1\">-</span><span class=\"kw20\">max int</span><span class=\"sy1\">,</span> value<span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>test<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>   <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\" euler's number is about: \"</span>g<span class=\"br0\">(</span><span class=\"sy1\">-</span><span class=\"kw20\">long <span class=\"kw26\">real</span> width</span><span class=\"sy1\">,</span>long <span class=\"kw26\">real</span> width<span class=\"sy1\">-</span>2<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span><br/>     EVAL build ast<span class=\"br0\">(</span><span class=\"st0\">\"1+1+(1+(1+(1+(1+(1+(1+(1+(1+(1+(1+(1+(1+(1+1/15)/14)/13)/12)/11)/10)/9)/8)/7)/6)/5)/4)/3)/2\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw7\">SKIP</span> <span class=\"kw2\">EXIT</span><br/>  index error<span class=\"sy1\">:</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Stack over flow\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL 68", "loc": 142, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw3\">INT</span> base<span class=\"sy1\">=</span>10<span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> FIXED <span class=\"sy1\">=</span> <span class=\"kw4\">LONG</span> <span class=\"kw3\">REAL</span><span class=\"sy1\">;</span> <span class=\"coMULTI\"># numbers in the format 9,999.999 #</span><br/>\u00a0<br/><span class=\"coMULTI\">#IF build abstract syntax tree and then EVAL tree #</span><br/><span class=\"kw4\">MODE</span> AST <span class=\"sy1\">=</span> <span class=\"kw6\">UNION</span><span class=\"br0\">(</span>NODE<span class=\"sy1\">,</span> FIXED<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> NUM <span class=\"sy1\">=</span> <span class=\"kw4\">REF</span> AST<span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> NODE <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span>FIXED<span class=\"sy1\">,</span>FIXED<span class=\"br0\">)</span>FIXED op<span class=\"sy1\">,</span> NUM b<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> EVAL <span class=\"sy1\">=</span> <span class=\"br0\">(</span>NUM ast<span class=\"br0\">)</span>FIXED<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>  <span class=\"kw2\">CASE</span> ast <span class=\"kw2\">IN</span><br/>    <span class=\"br0\">(</span>FIXED num<span class=\"br0\">)</span><span class=\"sy1\">:</span> num<span class=\"sy1\">,</span><br/>    <span class=\"br0\">(</span>NODE fork<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"br0\">(</span>op <span class=\"kw6\">OF</span> fork<span class=\"br0\">)</span><span class=\"br0\">(</span>EVAL<span class=\"br0\">(</span> a <span class=\"kw6\">OF</span> fork<span class=\"br0\">)</span><span class=\"sy1\">,</span> EVAL <span class=\"br0\">(</span>b <span class=\"kw6\">OF</span> fork<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">ESAC</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"sy1\">+</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"kw4\">HEAP</span> AST <span class=\"sy1\">:=</span> NODE<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> <span class=\"br0\">(</span>FIXED a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>FIXED<span class=\"sy1\">:</span>a<span class=\"sy1\">+</span>b<span class=\"sy1\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">-</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"kw4\">HEAP</span> AST <span class=\"sy1\">:=</span> NODE<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> <span class=\"br0\">(</span>FIXED a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>FIXED<span class=\"sy1\">:</span>a<span class=\"sy1\">-</span>b<span class=\"sy1\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">*</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"kw4\">HEAP</span> AST <span class=\"sy1\">:=</span> NODE<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> <span class=\"br0\">(</span>FIXED a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>FIXED<span class=\"sy1\">:</span>a<span class=\"sy1\">*</span>b<span class=\"sy1\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">/</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"kw4\">HEAP</span> AST <span class=\"sy1\">:=</span> NODE<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> <span class=\"br0\">(</span>FIXED a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>FIXED<span class=\"sy1\">:</span>a<span class=\"sy1\">/</span>b<span class=\"sy1\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> <span class=\"sy1\">**=</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> <span class=\"br0\">(</span> <span class=\"kw4\">HEAP</span> AST <span class=\"sy1\">:=</span> NODE<span class=\"br0\">(</span>a<span class=\"sy1\">,</span> <span class=\"br0\">(</span>FIXED a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>FIXED<span class=\"sy1\">:</span>a<span class=\"sy1\">**</span>b<span class=\"sy1\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">#ELSE simply use REAL arithmetic with no abstract syntax tree at all #</span> CO<br/><span class=\"kw4\">MODE</span> NUM <span class=\"sy1\">=</span> FIXED<span class=\"sy1\">,</span> AST <span class=\"sy1\">=</span> FIXED<span class=\"sy1\">;</span><br/><span class=\"kw4\">OP</span> EVAL <span class=\"sy1\">=</span> <span class=\"br0\">(</span>FIXED num<span class=\"br0\">)</span>FIXED<span class=\"sy1\">:</span> num<span class=\"sy1\">;</span><br/><span class=\"coMULTI\">#FI#</span> <span class=\"kw2\">END</span> CO<br/>\u00a0<br/><span class=\"kw4\">MODE</span> LEX <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span>TOK<span class=\"br0\">)</span>NUM<span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> MONADIC <span class=\"sy1\">=</span><span class=\"kw4\">PROC</span> <span class=\"br0\">(</span>NUM<span class=\"br0\">)</span>NUM<span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> DIADIC <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span>NUM<span class=\"sy1\">,</span>NUM<span class=\"br0\">)</span>NUM<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> TOK <span class=\"sy1\">=</span> <span class=\"kw3\">CHAR</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> ACTION <span class=\"sy1\">=</span> <span class=\"kw6\">UNION</span><span class=\"br0\">(</span>STACKACTION<span class=\"sy1\">,</span> LEX<span class=\"sy1\">,</span> MONADIC<span class=\"sy1\">,</span> DIADIC<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> OPVAL <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><span class=\"kw3\">INT</span> prio<span class=\"sy1\">,</span> ACTION action<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> OPITEM <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span>TOK token<span class=\"sy1\">,</span> OPVAL opval<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"br0\">[</span>256<span class=\"br0\">]</span>STACKITEM stack<span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> STACKITEM <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span>NUM value<span class=\"sy1\">,</span> OPVAL op<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> STACKACTION <span class=\"sy1\">=</span> <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> STACKITEM<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> begin <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> STACKITEM top<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> prio <span class=\"kw6\">OF</span> op <span class=\"kw6\">OF</span> top <span class=\"sy1\">-:=</span> <span class=\"sy1\">+</span>10<span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> end <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> STACKITEM top<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> prio <span class=\"kw6\">OF</span> op <span class=\"kw6\">OF</span> top <span class=\"sy1\">-:=</span> <span class=\"sy1\">-</span>10<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">OP</span> <span class=\"sy1\">**</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">COMPL</span> a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><span class=\"kw3\">COMPL</span><span class=\"sy1\">:</span> complex <span class=\"kw24\">exp</span><span class=\"br0\">(</span>complex <span class=\"kw24\">ln</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy1\">*</span>b<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"br0\">[</span>8<span class=\"br0\">]</span>OPITEM op list <span class=\"sy1\">:=</span><span class=\"br0\">(</span><br/><span class=\"coMULTI\">#  OP  PRIO ACTION #</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"^\"</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span>8<span class=\"sy1\">,</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> a<span class=\"sy1\">**</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"*\"</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span>7<span class=\"sy1\">,</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> a<span class=\"sy1\">*</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span>7<span class=\"sy1\">,</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> a<span class=\"sy1\">/</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"+\"</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span>6<span class=\"sy1\">,</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> a<span class=\"sy1\">+</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span>6<span class=\"sy1\">,</span> <span class=\"br0\">(</span>NUM a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span> a<span class=\"sy1\">-</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"(\"</span><span class=\"sy1\">,</span><span class=\"br0\">(</span><span class=\"sy1\">+</span>10<span class=\"sy1\">,</span> begin<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\")\"</span><span class=\"sy1\">,</span><span class=\"br0\">(</span><span class=\"sy1\">-</span>10<span class=\"sy1\">,</span> end<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>  <span class=\"br0\">(</span><span class=\"st0\">\"?\"</span><span class=\"sy1\">,</span> <span class=\"br0\">(</span>9<span class=\"sy1\">,</span> LEX<span class=\"sy1\">:</span><span class=\"kw7\">SKIP</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> op dict <span class=\"sy1\">=</span> <span class=\"br0\">(</span>TOK op<span class=\"br0\">)</span><span class=\"kw4\">REF</span> OPVAL<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/><span class=\"coMULTI\"># This can be unrolled to increase performance #</span><br/>  <span class=\"kw4\">REF</span> OPITEM candidate<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> op list <span class=\"kw2\">WHILE</span><br/>    candidate <span class=\"sy1\">:=</span> op list<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># WHILE #</span> op <span class=\"sy1\">/=</span> token <span class=\"kw6\">OF</span> candidate <span class=\"kw2\">DO</span><br/>    <span class=\"kw7\">SKIP</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  opval <span class=\"kw6\">OF</span> candidate<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> build ast <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> expr<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>\u00a0<br/>  <span class=\"kw3\">INT</span> top<span class=\"sy1\">:=</span>0<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">PROC</span> compress ast stack <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> prio<span class=\"sy1\">,</span> NUM in value<span class=\"br0\">)</span>NUM<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    NUM out value <span class=\"sy1\">:=</span> in value<span class=\"sy1\">;</span><br/>    <span class=\"kw2\">FOR</span> loc <span class=\"kw2\">FROM</span> top <span class=\"kw2\">BY</span> <span class=\"sy1\">-</span>1 <span class=\"kw2\">TO</span> 1 <span class=\"kw2\">WHILE</span> <br/>      <span class=\"kw4\">REF</span> STACKITEM stack top <span class=\"sy1\">:=</span> stack<span class=\"br0\">[</span>loc<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>  <span class=\"coMULTI\"># WHILE #</span> <span class=\"br0\">(</span> top <span class=\"sy1\">&gt;=</span> <span class=\"kw8\">LWB</span> stack <span class=\"sy1\">|</span> prio <span class=\"sy1\">&lt;=</span> prio <span class=\"kw6\">OF</span> op <span class=\"kw6\">OF</span> stack top <span class=\"sy1\">|</span> <span class=\"kw7\">FALSE</span> <span class=\"br0\">)</span> <span class=\"kw2\">DO</span><br/>      top <span class=\"sy1\">:=</span> loc <span class=\"sy1\">-</span> 1<span class=\"sy1\">;</span><br/>      out value <span class=\"sy1\">:=</span> <br/>        <span class=\"kw2\">CASE</span> action <span class=\"kw6\">OF</span> op <span class=\"kw6\">OF</span> stack top <span class=\"kw2\">IN</span><br/>          <span class=\"br0\">(</span>MONADIC op<span class=\"br0\">)</span><span class=\"sy1\">:</span> op<span class=\"br0\">(</span>value <span class=\"kw6\">OF</span> stack top<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"coMULTI\"># not implemented #</span><br/>          <span class=\"br0\">(</span>DIADIC op<span class=\"br0\">)</span><span class=\"sy1\">:</span> op<span class=\"br0\">(</span>value <span class=\"kw6\">OF</span> stack top<span class=\"sy1\">,</span>out value<span class=\"br0\">)</span><br/>        <span class=\"kw2\">ESAC</span><br/>    <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>    out value<br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  NUM value <span class=\"sy1\">:=</span> <span class=\"kw7\">NIL</span><span class=\"sy1\">;</span><br/>  FIXED num value<span class=\"sy1\">;</span><br/>  <span class=\"kw3\">INT</span> decimal places<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> expr <span class=\"kw2\">DO</span><br/>    TOK token <span class=\"sy1\">=</span> expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    <span class=\"kw4\">REF</span> OPVAL this op <span class=\"sy1\">:=</span> op dict<span class=\"br0\">(</span>token<span class=\"br0\">)</span><span class=\"sy1\">;</span> <br/>    <span class=\"kw2\">CASE</span> action <span class=\"kw6\">OF</span> this op <span class=\"kw2\">IN</span><br/>      <span class=\"br0\">(</span>STACKACTION action<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>        <span class=\"kw2\">IF</span> prio <span class=\"kw6\">OF</span> thisop <span class=\"sy1\">=</span> <span class=\"sy1\">-</span>10 <span class=\"kw2\">THEN</span><br/>          value <span class=\"sy1\">:=</span> compress ast stack<span class=\"br0\">(</span>0<span class=\"sy1\">,</span> value<span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> top <span class=\"sy1\">&gt;=</span> <span class=\"kw8\">LWB</span> stack <span class=\"kw2\">THEN</span><br/>          action<span class=\"br0\">(</span>stack<span class=\"br0\">[</span>top<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><br/>      <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span>LEX<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"br0\">(</span> <span class=\"coMULTI\"># a crude lexer #</span><br/>        <span class=\"kw4\">SHORT</span> <span class=\"kw3\">INT</span> digit <span class=\"sy1\">=</span> <span class=\"kw8\">ABS</span> token <span class=\"sy1\">-</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"0\"</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> 0<span class=\"sy1\">&lt;=</span> digit <span class=\"kw16\">AND</span> digit <span class=\"sy1\">&lt;</span> base <span class=\"kw2\">THEN</span><br/>          <span class=\"kw2\">IF</span> NUM<span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"kw7\">IS</span> <span class=\"kw7\">NIL</span> <span class=\"kw2\">THEN</span> <span class=\"coMULTI\"># first digit #</span><br/>            decimal places <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>            value <span class=\"sy1\">:=</span> <span class=\"kw4\">HEAP</span> AST <span class=\"sy1\">:=</span> num value <span class=\"sy1\">:=</span> digit<br/>          <span class=\"kw2\">ELSE</span><br/>            NUM<span class=\"br0\">(</span>value<span class=\"br0\">)</span> <span class=\"sy1\">:=</span> num value <span class=\"sy1\">:=</span> <span class=\"kw2\">IF</span> decimal places <span class=\"sy1\">=</span> 0 <br/>              <span class=\"kw2\">THEN</span><br/>                num value <span class=\"sy1\">*</span> base <span class=\"sy1\">+</span> digit<br/>              <span class=\"kw2\">ELSE</span><br/>                decimal places <span class=\"sy1\">*:=</span> base<span class=\"sy1\">;</span><br/>                num value <span class=\"sy1\">+</span> digit <span class=\"sy1\">/</span> decimal places<br/>              <span class=\"kw2\">FI</span><br/>          <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">ELIF</span> token <span class=\"sy1\">=</span> <span class=\"st0\">\".\"</span> <span class=\"kw2\">THEN</span><br/>          decimal places <span class=\"sy1\">:=</span> 1<br/>        <span class=\"kw2\">ELSE</span><br/>          <span class=\"kw7\">SKIP</span> <span class=\"coMULTI\"># and ignore spaces and any unrecognised characters #</span><br/>        <span class=\"kw2\">FI</span><br/>      <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>      <span class=\"br0\">(</span>MONADIC<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw7\">SKIP</span><span class=\"sy1\">,</span> <span class=\"coMULTI\"># not implemented #</span><br/>      <span class=\"br0\">(</span>DIADIC<span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>        value <span class=\"sy1\">:=</span> compress ast stack<span class=\"br0\">(</span>prio <span class=\"kw6\">OF</span> this op<span class=\"sy1\">,</span> value<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> top<span class=\"sy1\">=</span><span class=\"kw8\">UPB</span> stack <span class=\"kw2\">THEN</span> index error <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>        stack<span class=\"br0\">[</span>top<span class=\"sy1\">+:=</span>1<span class=\"br0\">]</span><span class=\"sy1\">:=</span>STACKITEM<span class=\"br0\">(</span>value<span class=\"sy1\">,</span> this op<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        value<span class=\"sy1\">:=</span><span class=\"kw7\">NIL</span><br/>      <span class=\"br0\">)</span><br/>    <span class=\"kw2\">ESAC</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  compress ast stack<span class=\"br0\">(</span><span class=\"sy1\">-</span><span class=\"kw20\">max int</span><span class=\"sy1\">,</span> value<span class=\"br0\">)</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>test<span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>   <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\" euler's number is about: \"</span>g<span class=\"br0\">(</span><span class=\"sy1\">-</span><span class=\"kw20\">long <span class=\"kw26\">real</span> width</span><span class=\"sy1\">,</span>long <span class=\"kw26\">real</span> width<span class=\"sy1\">-</span>2<span class=\"br0\">)</span>l$<span class=\"sy1\">,</span><br/>     EVAL build ast<span class=\"br0\">(</span><span class=\"st0\">\"1+1+(1+(1+(1+(1+(1+(1+(1+(1+(1+(1+(1+(1+(1+1/15)/14)/13)/12)/11)/10)/9)/8)/7)/6)/5)/4)/3)/2\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw7\">SKIP</span> <span class=\"kw2\">EXIT</span><br/>  index error<span class=\"sy1\">:</span><br/>    <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"Stack over flow\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "AutoHotkey", "loc": 150, "block": "<pre class=\"autohotkey highlighted_source\"><span class=\"coMULTI\">/*<br/>hand coded recursive descent parser <br/>expr\t: term ( ( PLUS | MINUS )  term )*\u00a0;<br/>term\t: factor ( ( MULT | DIV ) factor )*\u00a0;<br/>factor\t: NUMBER | '(' expr ')';<br/>*/</span><br/>\u00a0<br/>calcLexer <span class=\"sy0\">:=</span> makeCalcLexer<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>string <span class=\"sy0\">:=</span> <span class=\"st0\">\"((3+4)*(7*9)+3)+4\"</span><br/>tokens <span class=\"sy0\">:=</span> tokenize<span class=\"br0\">(</span>string<span class=\"sy0\">,</span> calcLexer<span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% printTokens<span class=\"br0\">(</span>tokens<span class=\"br0\">)</span><br/>ast <span class=\"sy0\">:=</span> expr<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% printTree<span class=\"br0\">(</span>ast<span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% expression <span class=\"sy0\">:=</span> evalTree<span class=\"br0\">(</span>ast<span class=\"br0\">)</span><br/><a href=\"http://www.autohotkey.com/docs/commands/FileDelete.htm\"><span class=\"kw3\">filedelete</span></a> expression<span class=\"sy0\">.</span>ahk<br/><a href=\"http://www.autohotkey.com/docs/commands/FileAppend.htm\"><span class=\"kw3\">fileappend</span></a><span class=\"sy0\">,</span>\u00a0% <span class=\"st0\">\"msgbox\u00a0% \"</span> expression<span class=\"sy0\">,</span> expression<span class=\"sy0\">.</span>ahk<br/><a href=\"http://www.autohotkey.com/docs/commands/Run.htm\"><span class=\"kw3\">run</span></a><span class=\"sy0\">,</span> expression<span class=\"sy0\">.</span>ahk<br/><span class=\"kw1\">return</span><br/>\u00a0<br/>\u00a0<br/>expr<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  global tokens<br/>  ast <span class=\"sy0\">:=</span> object<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"expr\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> node <span class=\"sy0\">:=</span> term<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    ast<span class=\"sy0\">.</span>_Insert<span class=\"br0\">(</span>node<span class=\"br0\">)</span>    <br/>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a> <br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> peek<span class=\"br0\">(</span><span class=\"st0\">\"PLUS\"</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> peek<span class=\"br0\">(</span><span class=\"st0\">\"MINUS\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  <br/>      op <span class=\"sy0\">:=</span> getsym<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      newop <span class=\"sy0\">:=</span> object<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> op<span class=\"sy0\">.</span>type<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> op<span class=\"sy0\">.</span>value<span class=\"br0\">)</span><br/>      node <span class=\"sy0\">:=</span> term<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      ast<span class=\"sy0\">.</span>_Insert<span class=\"br0\">(</span>newop<span class=\"br0\">)</span><br/>      ast<span class=\"sy0\">.</span>_Insert<span class=\"br0\">(</span>node<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">Else</span>  <br/>      <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> ast<br/><span class=\"br0\">}</span><br/>\u00a0<br/>term<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  global tokens<br/>  tree <span class=\"sy0\">:=</span> object<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"term\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> node <span class=\"sy0\">:=</span> factor<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    tree<span class=\"sy0\">.</span>_Insert<span class=\"br0\">(</span>node<span class=\"br0\">)</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a> <br/>  <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span>  peek<span class=\"br0\">(</span><span class=\"st0\">\"MULT\"</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> peek<span class=\"br0\">(</span><span class=\"st0\">\"DIV\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>  <br/>      op <span class=\"sy0\">:=</span> getsym<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      newop <span class=\"sy0\">:=</span> object<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> op<span class=\"sy0\">.</span>type<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> op<span class=\"sy0\">.</span>value<span class=\"br0\">)</span><br/>      node <span class=\"sy0\">:=</span> factor<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      tree<span class=\"sy0\">.</span>_Insert<span class=\"br0\">(</span>newop<span class=\"br0\">)</span><br/>      tree<span class=\"sy0\">.</span>_Insert<span class=\"br0\">(</span>node<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> tree<br/><span class=\"br0\">}</span><br/>\u00a0<br/>factor<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  global tokens<br/>  <span class=\"kw1\">if</span> peek<span class=\"br0\">(</span><span class=\"st0\">\"NUMBER\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span>  <br/>    token <span class=\"sy0\">:=</span> getsym<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    tree <span class=\"sy0\">:=</span> object<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> token<span class=\"sy0\">.</span>type<span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> token<span class=\"sy0\">.</span>value<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> tree<br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span>  peek<span class=\"br0\">(</span><span class=\"st0\">\"OPEN\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    getsym<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    tree <span class=\"sy0\">:=</span> expr<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span>  peek<span class=\"br0\">(</span><span class=\"st0\">\"CLOSE\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>      getsym<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> tree<br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span><br/>      error<span class=\"br0\">(</span><span class=\"st0\">\"miss closing parentheses \"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">else</span>  <br/>    error<span class=\"br0\">(</span><span class=\"st0\">\"no factor found\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>peek<span class=\"br0\">(</span>type<span class=\"sy0\">,</span> n<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>global tokens<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>tokens<span class=\"br0\">[</span>n<span class=\"sy0\">,</span> <span class=\"st0\">\"type\"</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> type<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>getsym<span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>global tokens<br/><span class=\"kw1\">return</span> token <span class=\"sy0\">:=</span> tokens<span class=\"sy0\">.</span>_Remove<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>error<span class=\"br0\">(</span>msg<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>global tokens<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">msgbox</span></a>\u00a0% msg <span class=\"st0\">\" at:`n\"</span> printToken<span class=\"br0\">(</span>tokens<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>printTree<span class=\"br0\">(</span>ast<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/><span class=\"kw1\">if</span>\u00a0!ast<br/><span class=\"kw1\">return</span><br/>\u00a0<br/>n <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><br/>  <span class=\"br0\">{</span><br/>  n <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span>\u00a0!node <span class=\"sy0\">:=</span> ast<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">break</span></a><br/>    <span class=\"kw1\">if</span>\u00a0!isobject<span class=\"br0\">(</span>node<span class=\"br0\">)</span><br/>      treeString <span class=\"sy0\">.=</span> node<br/>    <span class=\"kw1\">else</span><br/>      treeString <span class=\"sy0\">.=</span> printTree<span class=\"br0\">(</span>node<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"st0\">\"(\"</span> treeString <span class=\"st0\">\")\"</span> <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>evalTree<span class=\"br0\">(</span>ast<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/><span class=\"kw1\">if</span>\u00a0!ast<br/><span class=\"kw1\">return</span><br/>\u00a0<br/>n <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">loop</span></a><br/>  <span class=\"br0\">{</span><br/>  n <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span>\u00a0!node <span class=\"sy0\">:=</span> ast<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>      <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">break</span></a><br/>    <span class=\"kw1\">if</span>\u00a0!isobject<span class=\"br0\">(</span>node<span class=\"br0\">)</span><br/>      treeString <span class=\"sy0\">.=</span> node<br/>    <span class=\"kw1\">else</span><br/>      treeString <span class=\"sy0\">.=</span> evalTree<span class=\"br0\">(</span>node<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"kw1\">return</span> treeString<br/>  <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"st0\">\"(\"</span> treeString <span class=\"st0\">\")\"</span> <span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/_Include.htm\"><span class=\"kw5\">#include</span></a> calclex<span class=\"sy0\">.</span>ahk</pre>"}, {"lang": "BBC BASIC", "loc": 58, "block": "<pre class=\"text highlighted_source\">      Expr$ = \"1 + 2 * (3 + (4 * 5 + 6 * 7 * 8) - 9) / 10\"<br/>      PRINT \"Input = \" Expr$<br/>      AST$ = FNast(Expr$)<br/>      PRINT \"AST =   \" AST$<br/>      PRINT \"Value = \"\u00a0;EVAL(AST$)<br/>      END<br/>\u00a0<br/>      DEF FNast(RETURN in$)<br/>      LOCAL ast$, oper$<br/>      REPEAT<br/>        ast$ += FNast1(in$)<br/>        WHILE ASC(in$)=32 in$ = MID$(in$,2)\u00a0: ENDWHILE<br/>        oper$ = LEFT$(in$,1)<br/>        IF oper$=\"+\" OR oper$=\"-\" THEN<br/>          ast$ += oper$<br/>          in$ = MID$(in$,2)<br/>        ELSE<br/>          EXIT REPEAT<br/>        ENDIF<br/>      UNTIL FALSE<br/>      = \"(\" + ast$ + \")\"<br/>\u00a0<br/>      DEF FNast1(RETURN in$)<br/>      LOCAL ast$, oper$<br/>      REPEAT<br/>        ast$ += FNast2(in$)<br/>        WHILE ASC(in$)=32 in$ = MID$(in$,2)\u00a0: ENDWHILE<br/>        oper$ = LEFT$(in$,1)<br/>        IF oper$=\"*\" OR oper$=\"/\" THEN<br/>          ast$ += oper$<br/>          in$ = MID$(in$,2)<br/>        ELSE<br/>          EXIT REPEAT<br/>        ENDIF<br/>      UNTIL FALSE<br/>      = \"(\" + ast$ + \")\"<br/>\u00a0<br/>      DEF FNast2(RETURN in$)<br/>      LOCAL ast$<br/>      WHILE ASC(in$)=32 in$ = MID$(in$,2)\u00a0: ENDWHILE<br/>      IF ASC(in$)&lt;&gt;40 THEN = FNnumber(in$)<br/>      in$ = MID$(in$,2)<br/>      ast$ = FNast(in$)<br/>      in$ = MID$(in$,2)<br/>      = ast$<br/>\u00a0<br/>      DEF FNnumber(RETURN in$)<br/>      LOCAL ch$, num$<br/>      REPEAT<br/>        ch$ = LEFT$(in$,1)<br/>        IF INSTR(\"0123456789.\", ch$) THEN<br/>          num$ += ch$<br/>          in$ = MID$(in$,2)<br/>        ELSE<br/>          EXIT REPEAT<br/>        ENDIF<br/>      UNTIL FALSE<br/>      = num$</pre>"}, {"lang": "C", "loc": 116, "block": "<pre class=\"cpp highlighted_source\"> <span class=\"co2\">#include &lt;boost/spirit.hpp&gt;</span><br/> <span class=\"co2\">#include &lt;boost/spirit/tree/ast.hpp&gt;</span><br/> <span class=\"co2\">#include &lt;string&gt;</span><br/> <span class=\"co2\">#include &lt;cassert&gt;</span><br/> <span class=\"co2\">#include &lt;iostream&gt;</span><br/> <span class=\"co2\">#include &lt;istream&gt;</span><br/> <span class=\"co2\">#include &lt;ostream&gt;</span><br/>\u00a0<br/> <span class=\"kw2\">using</span> boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">rule</span><span class=\"sy4\">;</span><br/> <span class=\"kw2\">using</span> boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">parser_tag</span><span class=\"sy4\">;</span><br/> <span class=\"kw2\">using</span> boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">ch_p</span><span class=\"sy4\">;</span><br/> <span class=\"kw2\">using</span> boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">real_p</span><span class=\"sy4\">;</span><br/>\u00a0<br/> <span class=\"kw2\">using</span> boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">tree_node</span><span class=\"sy4\">;</span><br/> <span class=\"kw2\">using</span> boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">node_val_data</span><span class=\"sy4\">;</span><br/>\u00a0<br/> <span class=\"co1\">// The grammar</span><br/> <span class=\"kw4\">struct</span> parser<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">grammar</span><span class=\"sy1\">&lt;</span>parser<span class=\"sy1\">&gt;</span><br/> <span class=\"br0\">{</span><br/>   <span class=\"kw2\">enum</span> rule_ids <span class=\"br0\">{</span> addsub_id, multdiv_id, value_id, real_id <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>   <span class=\"kw4\">struct</span> set_value<br/>   <span class=\"br0\">{</span><br/>     set_value<span class=\"br0\">(</span>parser <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> p<span class=\"br0\">)</span><span class=\"sy4\">:</span> self<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>     <span class=\"kw4\">void</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span>tree_node<span class=\"sy1\">&lt;</span>node_val_data<span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span>,<br/>                                             <span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> node,<br/>                     std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> begin,<br/>                     std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> end<span class=\"br0\">)</span> <span class=\"kw4\">const</span><br/>     <span class=\"br0\">{</span><br/>       node.<span class=\"me1\">value</span>.<span class=\"me1\">value</span><span class=\"br0\">(</span>self.<span class=\"me1\">tmp</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>     <span class=\"br0\">}</span><br/>     parser <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> self<span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>   mutable <span class=\"kw4\">double</span> tmp<span class=\"sy4\">;</span><br/>\u00a0<br/>   <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> Scanner<span class=\"sy1\">&gt;</span> <span class=\"kw4\">struct</span> definition<br/>   <span class=\"br0\">{</span><br/>     rule<span class=\"sy1\">&lt;</span>Scanner, parser_tag<span class=\"sy1\">&lt;</span>addsub_id<span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span> addsub<span class=\"sy4\">;</span><br/>     rule<span class=\"sy1\">&lt;</span>Scanner, parser_tag<span class=\"sy1\">&lt;</span>multdiv_id<span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span> multdiv<span class=\"sy4\">;</span><br/>     rule<span class=\"sy1\">&lt;</span>Scanner, parser_tag<span class=\"sy1\">&lt;</span>value_id<span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span> value<span class=\"sy4\">;</span><br/>     rule<span class=\"sy1\">&lt;</span>Scanner, parser_tag<span class=\"sy1\">&lt;</span>real_id<span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span> real<span class=\"sy4\">;</span><br/>\u00a0<br/>     definition<span class=\"br0\">(</span>parser <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> self<span class=\"br0\">)</span><br/>     <span class=\"br0\">{</span><br/>       <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">;</span><br/>       addsub <span class=\"sy1\">=</span> multdiv<br/>         <span class=\"sy1\">&gt;&gt;</span> <span class=\"sy2\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>root_node_d<span class=\"br0\">[</span>ch_p<span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy3\">|</span> root_node_d<span class=\"br0\">[</span>ch_p<span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> multdiv<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>       multdiv <span class=\"sy1\">=</span> value<br/>         <span class=\"sy1\">&gt;&gt;</span> <span class=\"sy2\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>root_node_d<span class=\"br0\">[</span>ch_p<span class=\"br0\">(</span><span class=\"st0\">'*'</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy3\">|</span> root_node_d<span class=\"br0\">[</span>ch_p<span class=\"br0\">(</span><span class=\"st0\">'/'</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> value<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>       value <span class=\"sy1\">=</span> real <span class=\"sy3\">|</span> inner_node_d<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"st0\">'('</span> <span class=\"sy1\">&gt;&gt;</span> addsub <span class=\"sy1\">&gt;&gt;</span> <span class=\"st0\">')'</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>       real <span class=\"sy1\">=</span> leaf_node_d<span class=\"br0\">[</span>access_node_d<span class=\"br0\">[</span>real_p<span class=\"br0\">[</span>assign_a<span class=\"br0\">(</span>self.<span class=\"me1\">tmp</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>set_value<span class=\"br0\">(</span>self<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>     <span class=\"br0\">}</span><br/>\u00a0<br/>     rule<span class=\"sy1\">&lt;</span>Scanner, parser_tag<span class=\"sy1\">&lt;</span>addsub_id<span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span> <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> start<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span><br/>     <span class=\"br0\">{</span><br/>       <span class=\"kw1\">return</span> addsub<span class=\"sy4\">;</span><br/>     <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/> <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> TreeIter<span class=\"sy1\">&gt;</span><br/> <span class=\"kw4\">double</span> evaluate<span class=\"br0\">(</span>TreeIter <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> i<span class=\"br0\">)</span><br/> <span class=\"br0\">{</span><br/>   <span class=\"kw4\">double</span> op1, op2<span class=\"sy4\">;</span><br/>   <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>i<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>value.<span class=\"me1\">id</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">to_long</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><br/>   <span class=\"kw1\">case</span> parser<span class=\"sy4\">::</span><span class=\"me2\">real_id</span><span class=\"sy4\">:</span><br/>     <span class=\"kw1\">return</span> i<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>value.<span class=\"me1\">value</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   <span class=\"kw1\">case</span> parser<span class=\"sy4\">::</span><span class=\"me2\">value_id</span><span class=\"sy4\">:</span><br/>   <span class=\"kw1\">case</span> parser<span class=\"sy4\">::</span><span class=\"me2\">addsub_id</span><span class=\"sy4\">:</span><br/>   <span class=\"kw1\">case</span> parser<span class=\"sy4\">::</span><span class=\"me2\">multdiv_id</span><span class=\"sy4\">:</span><br/>     op1 <span class=\"sy1\">=</span> evaluate<span class=\"br0\">(</span>i<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>children.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>     op2 <span class=\"sy1\">=</span> evaluate<span class=\"br0\">(</span>i<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>children.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>     <span class=\"kw1\">switch</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>i<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>value.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">{</span><br/>     <span class=\"kw1\">case</span> <span class=\"st0\">'+'</span><span class=\"sy4\">:</span><br/>       <span class=\"kw1\">return</span> op1 <span class=\"sy2\">+</span> op2<span class=\"sy4\">;</span><br/>     <span class=\"kw1\">case</span> <span class=\"st0\">'-'</span><span class=\"sy4\">:</span><br/>       <span class=\"kw1\">return</span> op1 <span class=\"sy2\">-</span> op2<span class=\"sy4\">;</span><br/>     <span class=\"kw1\">case</span> <span class=\"st0\">'*'</span><span class=\"sy4\">:</span><br/>       <span class=\"kw1\">return</span> op1 <span class=\"sy2\">*</span> op2<span class=\"sy4\">;</span><br/>     <span class=\"kw1\">case</span> <span class=\"st0\">'/'</span><span class=\"sy4\">:</span><br/>       <span class=\"kw1\">return</span> op1 <span class=\"sy2\">/</span> op2<span class=\"sy4\">;</span><br/>     <span class=\"kw1\">default</span><span class=\"sy4\">:</span><br/>       <span class=\"kw3\">assert</span><span class=\"br0\">(</span><span class=\"sy3\">!</span><span class=\"st0\">\"Should not happen\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>     <span class=\"br0\">}</span><br/>   <span class=\"kw1\">default</span><span class=\"sy4\">:</span><br/>     <span class=\"kw3\">assert</span><span class=\"br0\">(</span><span class=\"sy3\">!</span><span class=\"st0\">\"Should not happen\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/> <span class=\"br0\">}</span><br/>\u00a0<br/> <span class=\"co1\">// the read/eval/write loop</span><br/> <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/> <span class=\"br0\">{</span><br/>   parser eval<span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> line<span class=\"sy4\">;</span><br/>   <span class=\"kw1\">while</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Expression: \"</span><br/>          <span class=\"sy3\">&amp;&amp;</span> std<span class=\"sy4\">::</span><span class=\"me2\">getline</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cin</span>, line<span class=\"br0\">)</span><br/>          <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>line.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><br/>     <span class=\"kw4\">typedef</span> boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">node_val_data_factory</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> factory_t<span class=\"sy4\">;</span><br/>     boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">tree_parse_info</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span>, factory_t<span class=\"sy1\">&gt;</span> info <span class=\"sy1\">=</span><br/>       boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">ast_parse</span><span class=\"sy1\">&lt;</span>factory_t<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>line.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, line.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>                                           eval, boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">space_p</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>     <span class=\"kw1\">if</span> <span class=\"br0\">(</span>info.<span class=\"me1\">full</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">{</span><br/>       std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Result: \"</span> <span class=\"sy1\">&lt;&lt;</span> evaluate<span class=\"br0\">(</span>info.<span class=\"me1\">trees</span>.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>     <span class=\"br0\">}</span><br/>     <span class=\"kw1\">else</span><br/>     <span class=\"br0\">{</span><br/>       std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Error in expression.\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>     <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/> <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre>"}, {"lang": "C++", "loc": 116, "block": "<pre class=\"cpp highlighted_source\"> <span class=\"co2\">#include &lt;boost/spirit.hpp&gt;</span><br/> <span class=\"co2\">#include &lt;boost/spirit/tree/ast.hpp&gt;</span><br/> <span class=\"co2\">#include &lt;string&gt;</span><br/> <span class=\"co2\">#include &lt;cassert&gt;</span><br/> <span class=\"co2\">#include &lt;iostream&gt;</span><br/> <span class=\"co2\">#include &lt;istream&gt;</span><br/> <span class=\"co2\">#include &lt;ostream&gt;</span><br/>\u00a0<br/> <span class=\"kw2\">using</span> boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">rule</span><span class=\"sy4\">;</span><br/> <span class=\"kw2\">using</span> boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">parser_tag</span><span class=\"sy4\">;</span><br/> <span class=\"kw2\">using</span> boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">ch_p</span><span class=\"sy4\">;</span><br/> <span class=\"kw2\">using</span> boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">real_p</span><span class=\"sy4\">;</span><br/>\u00a0<br/> <span class=\"kw2\">using</span> boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">tree_node</span><span class=\"sy4\">;</span><br/> <span class=\"kw2\">using</span> boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">node_val_data</span><span class=\"sy4\">;</span><br/>\u00a0<br/> <span class=\"co1\">// The grammar</span><br/> <span class=\"kw4\">struct</span> parser<span class=\"sy4\">:</span> <span class=\"kw2\">public</span> boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">grammar</span><span class=\"sy1\">&lt;</span>parser<span class=\"sy1\">&gt;</span><br/> <span class=\"br0\">{</span><br/>   <span class=\"kw2\">enum</span> rule_ids <span class=\"br0\">{</span> addsub_id, multdiv_id, value_id, real_id <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>   <span class=\"kw4\">struct</span> set_value<br/>   <span class=\"br0\">{</span><br/>     set_value<span class=\"br0\">(</span>parser <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> p<span class=\"br0\">)</span><span class=\"sy4\">:</span> self<span class=\"br0\">(</span>p<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>     <span class=\"kw4\">void</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span>tree_node<span class=\"sy1\">&lt;</span>node_val_data<span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span>,<br/>                                             <span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span><span class=\"sy3\">&amp;</span> node,<br/>                     std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> begin,<br/>                     std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> end<span class=\"br0\">)</span> <span class=\"kw4\">const</span><br/>     <span class=\"br0\">{</span><br/>       node.<span class=\"me1\">value</span>.<span class=\"me1\">value</span><span class=\"br0\">(</span>self.<span class=\"me1\">tmp</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>     <span class=\"br0\">}</span><br/>     parser <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> self<span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>   mutable <span class=\"kw4\">double</span> tmp<span class=\"sy4\">;</span><br/>\u00a0<br/>   <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> Scanner<span class=\"sy1\">&gt;</span> <span class=\"kw4\">struct</span> definition<br/>   <span class=\"br0\">{</span><br/>     rule<span class=\"sy1\">&lt;</span>Scanner, parser_tag<span class=\"sy1\">&lt;</span>addsub_id<span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span> addsub<span class=\"sy4\">;</span><br/>     rule<span class=\"sy1\">&lt;</span>Scanner, parser_tag<span class=\"sy1\">&lt;</span>multdiv_id<span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span> multdiv<span class=\"sy4\">;</span><br/>     rule<span class=\"sy1\">&lt;</span>Scanner, parser_tag<span class=\"sy1\">&lt;</span>value_id<span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span> value<span class=\"sy4\">;</span><br/>     rule<span class=\"sy1\">&lt;</span>Scanner, parser_tag<span class=\"sy1\">&lt;</span>real_id<span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span> real<span class=\"sy4\">;</span><br/>\u00a0<br/>     definition<span class=\"br0\">(</span>parser <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> self<span class=\"br0\">)</span><br/>     <span class=\"br0\">{</span><br/>       <span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">;</span><br/>       addsub <span class=\"sy1\">=</span> multdiv<br/>         <span class=\"sy1\">&gt;&gt;</span> <span class=\"sy2\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>root_node_d<span class=\"br0\">[</span>ch_p<span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy3\">|</span> root_node_d<span class=\"br0\">[</span>ch_p<span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> multdiv<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>       multdiv <span class=\"sy1\">=</span> value<br/>         <span class=\"sy1\">&gt;&gt;</span> <span class=\"sy2\">*</span><span class=\"br0\">(</span><span class=\"br0\">(</span>root_node_d<span class=\"br0\">[</span>ch_p<span class=\"br0\">(</span><span class=\"st0\">'*'</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy3\">|</span> root_node_d<span class=\"br0\">[</span>ch_p<span class=\"br0\">(</span><span class=\"st0\">'/'</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> value<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>       value <span class=\"sy1\">=</span> real <span class=\"sy3\">|</span> inner_node_d<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"st0\">'('</span> <span class=\"sy1\">&gt;&gt;</span> addsub <span class=\"sy1\">&gt;&gt;</span> <span class=\"st0\">')'</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>       real <span class=\"sy1\">=</span> leaf_node_d<span class=\"br0\">[</span>access_node_d<span class=\"br0\">[</span>real_p<span class=\"br0\">[</span>assign_a<span class=\"br0\">(</span>self.<span class=\"me1\">tmp</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">[</span>set_value<span class=\"br0\">(</span>self<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>     <span class=\"br0\">}</span><br/>\u00a0<br/>     rule<span class=\"sy1\">&lt;</span>Scanner, parser_tag<span class=\"sy1\">&lt;</span>addsub_id<span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span> <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> start<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span><br/>     <span class=\"br0\">{</span><br/>       <span class=\"kw1\">return</span> addsub<span class=\"sy4\">;</span><br/>     <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/> <span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> TreeIter<span class=\"sy1\">&gt;</span><br/> <span class=\"kw4\">double</span> evaluate<span class=\"br0\">(</span>TreeIter <span class=\"kw4\">const</span><span class=\"sy3\">&amp;</span> i<span class=\"br0\">)</span><br/> <span class=\"br0\">{</span><br/>   <span class=\"kw4\">double</span> op1, op2<span class=\"sy4\">;</span><br/>   <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>i<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>value.<span class=\"me1\">id</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">to_long</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><br/>   <span class=\"kw1\">case</span> parser<span class=\"sy4\">::</span><span class=\"me2\">real_id</span><span class=\"sy4\">:</span><br/>     <span class=\"kw1\">return</span> i<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>value.<span class=\"me1\">value</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   <span class=\"kw1\">case</span> parser<span class=\"sy4\">::</span><span class=\"me2\">value_id</span><span class=\"sy4\">:</span><br/>   <span class=\"kw1\">case</span> parser<span class=\"sy4\">::</span><span class=\"me2\">addsub_id</span><span class=\"sy4\">:</span><br/>   <span class=\"kw1\">case</span> parser<span class=\"sy4\">::</span><span class=\"me2\">multdiv_id</span><span class=\"sy4\">:</span><br/>     op1 <span class=\"sy1\">=</span> evaluate<span class=\"br0\">(</span>i<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>children.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>     op2 <span class=\"sy1\">=</span> evaluate<span class=\"br0\">(</span>i<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>children.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy2\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>     <span class=\"kw1\">switch</span><span class=\"br0\">(</span><span class=\"sy2\">*</span>i<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>value.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">{</span><br/>     <span class=\"kw1\">case</span> <span class=\"st0\">'+'</span><span class=\"sy4\">:</span><br/>       <span class=\"kw1\">return</span> op1 <span class=\"sy2\">+</span> op2<span class=\"sy4\">;</span><br/>     <span class=\"kw1\">case</span> <span class=\"st0\">'-'</span><span class=\"sy4\">:</span><br/>       <span class=\"kw1\">return</span> op1 <span class=\"sy2\">-</span> op2<span class=\"sy4\">;</span><br/>     <span class=\"kw1\">case</span> <span class=\"st0\">'*'</span><span class=\"sy4\">:</span><br/>       <span class=\"kw1\">return</span> op1 <span class=\"sy2\">*</span> op2<span class=\"sy4\">;</span><br/>     <span class=\"kw1\">case</span> <span class=\"st0\">'/'</span><span class=\"sy4\">:</span><br/>       <span class=\"kw1\">return</span> op1 <span class=\"sy2\">/</span> op2<span class=\"sy4\">;</span><br/>     <span class=\"kw1\">default</span><span class=\"sy4\">:</span><br/>       <span class=\"kw3\">assert</span><span class=\"br0\">(</span><span class=\"sy3\">!</span><span class=\"st0\">\"Should not happen\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>     <span class=\"br0\">}</span><br/>   <span class=\"kw1\">default</span><span class=\"sy4\">:</span><br/>     <span class=\"kw3\">assert</span><span class=\"br0\">(</span><span class=\"sy3\">!</span><span class=\"st0\">\"Should not happen\"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/> <span class=\"br0\">}</span><br/>\u00a0<br/> <span class=\"co1\">// the read/eval/write loop</span><br/> <span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/> <span class=\"br0\">{</span><br/>   parser eval<span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> line<span class=\"sy4\">;</span><br/>   <span class=\"kw1\">while</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Expression: \"</span><br/>          <span class=\"sy3\">&amp;&amp;</span> std<span class=\"sy4\">::</span><span class=\"me2\">getline</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw3\">cin</span>, line<span class=\"br0\">)</span><br/>          <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>line.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><br/>     <span class=\"kw4\">typedef</span> boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">node_val_data_factory</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">double</span><span class=\"sy1\">&gt;</span> factory_t<span class=\"sy4\">;</span><br/>     boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">tree_parse_info</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span>, factory_t<span class=\"sy1\">&gt;</span> info <span class=\"sy1\">=</span><br/>       boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">ast_parse</span><span class=\"sy1\">&lt;</span>factory_t<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>line.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, line.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>,<br/>                                           eval, boost<span class=\"sy4\">::</span><span class=\"me2\">spirit</span><span class=\"sy4\">::</span><span class=\"me2\">space_p</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>     <span class=\"kw1\">if</span> <span class=\"br0\">(</span>info.<span class=\"me1\">full</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">{</span><br/>       std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Result: \"</span> <span class=\"sy1\">&lt;&lt;</span> evaluate<span class=\"br0\">(</span>info.<span class=\"me1\">trees</span>.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>     <span class=\"br0\">}</span><br/>     <span class=\"kw1\">else</span><br/>     <span class=\"br0\">{</span><br/>       std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Error in expression.\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>     <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/> <span class=\"br0\">}</span><span class=\"sy4\">;</span></pre>"}, {"lang": "Clojure", "loc": 53, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">def</span> precedence '<span class=\"br0\">{</span><span class=\"sy0\">*</span> <span class=\"nu0\">0</span>, <span class=\"sy0\">/</span> <span class=\"nu0\">0</span><br/>\t\t  <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> order<span class=\"sy0\">-</span>ops<br/>  <span class=\"st0\">\"((A x B) y C) or (A x (B y C)) depending on precedence of x and y\"</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">[</span>A x B y C <span class=\"sy0\">&amp;</span> more<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>ret <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span>  <span class=\"br0\">(</span>precedence x<span class=\"br0\">)</span><br/>\t\t     <span class=\"br0\">(</span>precedence y<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t      <span class=\"br0\">(</span>list <span class=\"br0\">(</span>list A x B<span class=\"br0\">)</span> y C<span class=\"br0\">)</span><br/>\t      <span class=\"br0\">(</span>list A x <span class=\"br0\">(</span>list B y C<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> more<br/>      <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"kw1\">concat</span> ret more<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      ret<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> add<span class=\"sy0\">-</span>parens<br/>  <span class=\"st0\">\"Tree walk to add parens.  All lists are length 3 afterwards.\"</span><br/>  <span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>clojure<span class=\"sy0\">.</span>walk<span class=\"sy0\">/</span>postwalk<br/>   #<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">seq?</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>c <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span>even? c<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">throw</span> <span class=\"br0\">(</span>Exception<span class=\"sy0\">.</span> <span class=\"st0\">\"Must be an odd number of forms\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t      <span class=\"br0\">(</span><span class=\"sy0\">=</span> c <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">first</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><br/>\t      <span class=\"br0\">(</span><span class=\"sy0\">=</span> c <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span><br/>\t      <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> c <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>order<span class=\"sy0\">-</span>ops <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">%</span><span class=\"br0\">)</span><br/>   s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> make<span class=\"sy0\">-</span>ast<br/>  <span class=\"st0\">\"Parse a string into a list of numbers, ops, and lists\"</span><br/>  <span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">format</span> <span class=\"st0\">\"'(%s)\"</span> s<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">.</span>replaceAll , <span class=\"st0\">\"([*+-/])\"</span> <span class=\"st0\">\" $1 \"</span><span class=\"br0\">)</span><br/>      load<span class=\"sy0\">-</span>string<br/>      add<span class=\"sy0\">-</span>parens<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> ops <span class=\"br0\">{</span>'<span class=\"sy0\">*</span> <span class=\"sy0\">*</span><br/>\t  '<span class=\"sy0\">+</span> <span class=\"sy0\">+</span><br/>\t  '<span class=\"sy0\">-</span> <span class=\"sy0\">-</span><br/>\t  '<span class=\"sy0\">/</span> <span class=\"sy0\">/</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> eval<span class=\"sy0\">-</span>ast<br/>     <span class=\"br0\">(</span>partial clojure<span class=\"sy0\">.</span>walk<span class=\"sy0\">/</span>postwalk<br/>\t      #<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">seq?</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><br/>\t\t <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>a o b<span class=\"br0\">]</span> <span class=\"sy0\">%</span><span class=\"br0\">]</span><br/>\t\t   <span class=\"br0\">(</span><span class=\"br0\">(</span>ops o<span class=\"br0\">)</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> evaluate <span class=\"br0\">[</span>s<span class=\"br0\">]</span><br/>  <span class=\"st0\">\"Parse and evaluate an infix arithmetic expression\"</span><br/>  <span class=\"br0\">(</span>eval<span class=\"sy0\">-</span>ast <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>ast s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>user<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span>evaluate <span class=\"st0\">\"1 + 2*(3 - 2*(3 - 2)*((2 - 4)*5 - 22/(7 + 2*(3 - 1)) - 1)) + 1\"</span><span class=\"br0\">)</span><br/><span class=\"nu0\">60</span></pre>"}, {"lang": "Common Lisp", "loc": 86, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> tokenize-stream <span class=\"br0\">(</span>stream<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>labels <span class=\"br0\">(</span><span class=\"br0\">(</span>whitespace-p <span class=\"br0\">(</span>char<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>find char #<span class=\"br0\">(</span>#\\space #\\newline #\\<span class=\"kw1\">return</span> #\\tab<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>consume-whitespace <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>loop while <span class=\"br0\">(</span>whitespace-p <span class=\"br0\">(</span>peek-char <span class=\"kw1\">nil</span> stream <span class=\"kw1\">nil</span> #\\a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   <span class=\"kw1\">do</span> <span class=\"br0\">(</span>read-char stream<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>read-<span class=\"kw1\">integer</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>loop while <span class=\"br0\">(</span>digit-char-p <span class=\"br0\">(</span>peek-char <span class=\"kw1\">nil</span> stream <span class=\"kw1\">nil</span> #\\space<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                   collect <span class=\"br0\">(</span>read-char stream<span class=\"br0\">)</span> into digits<br/>                   finally <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"kw1\">parse-integer</span> <span class=\"br0\">(</span>coerce digits 'string<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>consume-whitespace<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"br0\">(</span>peek-char <span class=\"kw1\">nil</span> stream <span class=\"kw1\">nil</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>token <span class=\"br0\">(</span><span class=\"kw1\">case</span> c<br/>                     <span class=\"br0\">(</span><span class=\"kw1\">nil</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>#\\<span class=\"br0\">(</span> <span class=\"sy0\">:</span><span class=\"me1\">lparen</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>#\\<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">rparen</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>#\\* '*<span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>#\\/ '/<span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>#\\+ '+<span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>#\\- '-<span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>otherwise<br/>                       <span class=\"br0\">(</span>unless <span class=\"br0\">(</span>digit-char-p c<span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span><span class=\"kw1\">cerror</span> <span class=\"st0\">\"Skip it.\"</span> <span class=\"st0\">\"Unexpected character ~w.\"</span> c<span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span>read-char stream<span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span>return-from tokenize-stream<br/>                                      <span class=\"br0\">(</span>tokenize-stream stream<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span>read-<span class=\"kw1\">integer</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">null</span> token<span class=\"br0\">)</span> <span class=\"br0\">(</span>integerp token<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>read-char stream<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        token<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> group-parentheses <span class=\"br0\">(</span>tokens <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>delimited <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>new-tokens '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span>endp tokens<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">when</span> delimited<br/>         <span class=\"br0\">(</span><span class=\"kw1\">cerror</span> <span class=\"st0\">\"Insert it.\"</span>  <span class=\"st0\">\"Expected right parenthesis.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>values <span class=\"br0\">(</span>nreverse new-tokens<span class=\"br0\">)</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>token <span class=\"br0\">(</span>pop tokens<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">case</span> token<br/>        <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">lparen</span><br/>         <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>group remaining-tokens<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>group-parentheses tokens t<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">setf</span> new-tokens <span class=\"br0\">(</span><span class=\"kw1\">cons</span> group new-tokens<span class=\"br0\">)</span><br/>                 tokens remaining-tokens<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"me1\">rparen</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> delimited<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">cerror</span> <span class=\"st0\">\"Ignore it.\"</span> <span class=\"st0\">\"Unexpected right parenthesis.\"</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span>values <span class=\"br0\">(</span>nreverse new-tokens<span class=\"br0\">)</span> tokens<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>otherwise<br/>         <span class=\"br0\">(</span>push token new-tokens<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> group-operations <span class=\"br0\">(</span>expression<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>flet <span class=\"br0\">(</span><span class=\"br0\">(</span>gop <span class=\"br0\">(</span><span class=\"kw1\">exp</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>group-operations <span class=\"kw1\">exp</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>integerp expression<span class=\"br0\">)</span><br/>      expression<br/>      <span class=\"br0\">(</span>destructuring-bind <span class=\"br0\">(</span>a <span class=\"sy0\">&amp;</span>optional op1 b op2 c <span class=\"sy0\">&amp;</span>rest others<span class=\"br0\">)</span><br/>                          expression<br/>        <span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"kw1\">member</span> op1 '<span class=\"br0\">(</span>+<span class=\"sy0\"> - </span>*<span class=\"sy0\"> / </span><span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"st0\">\"syntax error: in expr ~a expecting operator, not ~a\"</span><br/>                 expression op1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"kw1\">member</span> op2 '<span class=\"br0\">(</span>+<span class=\"sy0\"> - </span>*<span class=\"sy0\"> / </span><span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"st0\">\"syntax error: in expr ~a expecting operator, not ~a\"</span><br/>                 expression op2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>         <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">not</span> op1<span class=\"br0\">)</span> <span class=\"br0\">(</span>gop a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">not</span> op2<span class=\"br0\">)</span> `<span class=\"br0\">(</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>gop a<span class=\"br0\">)</span> <span class=\"sy0\">,</span>op1 <span class=\"sy0\">,</span><span class=\"br0\">(</span>gop b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>t <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"br0\">(</span>gop a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>b <span class=\"br0\">(</span>gop b<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>c <span class=\"br0\">(</span>gop c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">member</span> op1 '<span class=\"br0\">(</span>+ -<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">member</span> op2 '<span class=\"br0\">(</span>* /<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>gop `<span class=\"br0\">(</span><span class=\"sy0\">,</span>a <span class=\"sy0\">,</span>op1 <span class=\"br0\">(</span><span class=\"sy0\">,</span>b <span class=\"sy0\">,</span>op2 <span class=\"sy0\">,</span>c<span class=\"br0\">)</span> <span class=\"sy0\">,</span>@others<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>gop `<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">,</span>a <span class=\"sy0\">,</span>op1 <span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"sy0\">,</span>op2 <span class=\"sy0\">,</span>c <span class=\"sy0\">,</span>@others<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> infix-to-prefix <span class=\"br0\">(</span>expression<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>integerp expression<span class=\"br0\">)</span><br/>    expression<br/>    <span class=\"br0\">(</span>destructuring-bind <span class=\"br0\">(</span>a op b<span class=\"br0\">)</span> expression<br/>      `<span class=\"br0\">(</span><span class=\"sy0\">,</span>op <span class=\"sy0\">,</span><span class=\"br0\">(</span>infix-to-prefix a<span class=\"br0\">)</span> <span class=\"sy0\">,</span><span class=\"br0\">(</span>infix-to-prefix b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> evaluate <span class=\"br0\">(</span>string<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>with-input-from-string <span class=\"br0\">(</span>in string<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">eval</span><br/>      <span class=\"br0\">(</span>infix-to-prefix<br/>        <span class=\"br0\">(</span>group-operations<br/>          <span class=\"br0\">(</span>group-parentheses<br/>            <span class=\"br0\">(</span>loop for token <span class=\"sy0\">=</span> <span class=\"br0\">(</span>tokenize-stream in<span class=\"br0\">)</span><br/>                  until <span class=\"br0\">(</span><span class=\"kw1\">null</span> token<span class=\"br0\">)</span><br/>                  collect token<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 221, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">ascii</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">exception</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Stack<span class=\"br0\">(</span>T<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    T<span class=\"br0\">[</span><span class=\"br0\">]</span> data<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">alias</span> data <span class=\"kw2\">this</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">void</span> push<span class=\"br0\">(</span>T top<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span> data <span class=\"sy0\">~=</span> top<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    T pop<span class=\"br0\">(</span><span class=\"kw4\">bool</span> discard <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> @nogc @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">immutable</span> <span class=\"kw4\">static</span> exc <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">immutable</span><span class=\"br0\">(</span><span class=\"kw3\">Exception</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"st0\">\"Stack Empty\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>data.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">throw</span> exc<span class=\"sy0\">;</span><br/>      <span class=\"kw4\">auto</span> top <span class=\"sy0\">=</span> data<span class=\"br0\">[</span>$ <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>discard<span class=\"br0\">)</span><br/>        data.<span class=\"me1\">popBack</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> top<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> Type <span class=\"br0\">{</span>         Num<span class=\"sy0\">,</span> OBkt<span class=\"sy0\">,</span> CBkt<span class=\"sy0\">,</span> Add<span class=\"sy0\">,</span> Sub<span class=\"sy0\">,</span> Mul<span class=\"sy0\">,</span> Div <span class=\"br0\">}</span><br/><span class=\"kw4\">immutable</span> opChar <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"#\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"(\"</span><span class=\"sy0\">,</span>  <span class=\"st0\">\")\"</span><span class=\"sy0\">,</span>  <span class=\"st0\">\"+\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"*\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"/\"</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">immutable</span> opPrec <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>  <span class=\"sy0\">-</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span>   <span class=\"sy0\">-</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span>    <span class=\"nu0\">1</span><span class=\"sy0\">,</span>   <span class=\"nu0\">1</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">abstract</span> <span class=\"kw4\">class</span> Visitor <span class=\"br0\">{</span> <span class=\"kw4\">void</span> visit<span class=\"br0\">(</span>XP e<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> @<span class=\"kw4\">safe</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">final</span> <span class=\"kw4\">class</span> XP <span class=\"br0\">{</span><br/>  <span class=\"kw4\">immutable</span> Type type<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">immutable</span> <span class=\"kw4\">string</span> str<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span> pos<span class=\"sy0\">;</span> <span class=\"co1\">// Optional, to dispaly AST struct.</span><br/>  XP LHS<span class=\"sy0\">,</span> RHS<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw4\">string</span> s<span class=\"sy0\">=</span><span class=\"st0\">\")\"</span><span class=\"sy0\">,</span> <span class=\"kw4\">int</span> p <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    str <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>    pos <span class=\"sy0\">=</span> p<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> localType <span class=\"sy0\">=</span> Type.<span class=\"me1\">Num</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach_reverse</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> t<span class=\"sy0\">;</span> <span class=\"br0\">[</span>EnumMembers<span class=\"sy0\">!</span>Type<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>opChar<span class=\"br0\">[</span>t<span class=\"br0\">]</span> <span class=\"sy0\">==</span> s<span class=\"br0\">)</span><br/>        localType <span class=\"sy0\">=</span> t<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">this</span>.<span class=\"me1\">type</span> <span class=\"sy0\">=</span> localType<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">override</span> <span class=\"kw4\">int</span> opCmp<span class=\"br0\">(</span><span class=\"kw3\">Object</span> other<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> rhs <span class=\"sy0\">=</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span>XP<span class=\"br0\">)</span>other<span class=\"sy0\">;</span><br/>    enforce<span class=\"br0\">(</span>rhs <span class=\"sy0\">!</span><span class=\"kw2\">is</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> opPrec<span class=\"br0\">[</span>type<span class=\"br0\">]</span> <span class=\"sy0\">-</span> opPrec<span class=\"br0\">[</span>rhs.<span class=\"me1\">type</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> accept<span class=\"br0\">(</span>Visitor v<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span> v.<span class=\"me1\">visit</span><span class=\"br0\">(</span><span class=\"kw2\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">final</span> <span class=\"kw4\">class</span> AST <span class=\"br0\">{</span><br/>  XP root<span class=\"sy0\">;</span><br/>  Stack<span class=\"sy0\">!</span>XP opr<span class=\"sy0\">,</span> num<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">string</span> xpr<span class=\"sy0\">,</span> token<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> xpHead<span class=\"sy0\">,</span> xpTail<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> joinXP<span class=\"br0\">(</span>XP x<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    x.<span class=\"me1\">RHS</span> <span class=\"sy0\">=</span> num.<span class=\"me1\">pop</span><span class=\"sy0\">;</span><br/>    x.<span class=\"me1\">LHS</span> <span class=\"sy0\">=</span> num.<span class=\"me1\">pop</span><span class=\"sy0\">;</span><br/>    num.<span class=\"me1\">push</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">string</span> nextToken<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">pure</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>xpHead <span class=\"sy0\">&lt;</span> xpr.<span class=\"me1\">length</span> <span class=\"sy0\">&amp;&amp;</span> xpr<span class=\"br0\">[</span>xpHead<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>      xpHead<span class=\"sy0\">++;</span> <span class=\"co1\">// Skip spc.</span><br/>    xpTail <span class=\"sy0\">=</span> xpHead<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>xpHead <span class=\"sy0\">&lt;</span> xpr.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      token <span class=\"sy0\">=</span> xpr<span class=\"br0\">[</span>xpTail <span class=\"sy0\">..</span> <span class=\"me1\">xpTail</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>token<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">case</span> <span class=\"st0\">\"(\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\")\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"+\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"*\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"/\"</span><span class=\"sy0\">:</span> <span class=\"co1\">// Valid non-number.</span><br/>          xpTail<span class=\"sy0\">++;</span><br/>          <span class=\"kw1\">return</span> token<span class=\"sy0\">;</span><br/>        <span class=\"kw2\">default</span><span class=\"sy0\">:</span> <span class=\"co1\">// Should be number.</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>token<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">isDigit</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>xpTail <span class=\"sy0\">&lt;</span> xpr.<span class=\"me1\">length</span> <span class=\"sy0\">&amp;&amp;</span> xpr<span class=\"br0\">[</span>xpTail<span class=\"br0\">]</span>.<span class=\"me1\">isDigit</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              xpTail<span class=\"sy0\">++;</span><br/>            <span class=\"kw1\">return</span> xpr<span class=\"br0\">[</span>xpHead <span class=\"sy0\">..</span> <span class=\"me1\">xpTail</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span> <span class=\"co1\">// Else may be error.</span><br/>      <span class=\"br0\">}</span> <span class=\"co1\">// End switch.</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>xpTail <span class=\"sy0\">&lt;</span> xpr.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Invalid Char &lt;\"</span> <span class=\"sy0\">~</span> xpr<span class=\"br0\">[</span>xpTail<span class=\"br0\">]</span> <span class=\"sy0\">~</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"co1\">// End nextToken.</span><br/>\u00a0<br/>  AST parse<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span> s<span class=\"br0\">)</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">bool</span> expectingOP<span class=\"sy0\">;</span><br/>    xpr <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>    <span class=\"kw2\">try</span> <span class=\"br0\">{</span><br/>      xpHead <span class=\"sy0\">=</span> xpTail <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>      num <span class=\"sy0\">=</span> opr <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>      root <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>      opr.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw2\">new</span> XP<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// CBkt, prevent evaluate null OP precedence.</span><br/>      <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>token <span class=\"sy0\">=</span> nextToken<span class=\"br0\">)</span> <span class=\"sy0\">!</span><span class=\"kw2\">is</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        XP tokenXP <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> XP<span class=\"br0\">(</span>token<span class=\"sy0\">,</span> xpHead<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>expectingOP<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Process OP-alike XP.</span><br/>          <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>token<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\")\"</span><span class=\"sy0\">:</span><br/>              <span class=\"kw1\">while</span> <span class=\"br0\">(</span>opr.<span class=\"me1\">pop</span><span class=\"sy0\">!</span><span class=\"kw2\">false</span>.<span class=\"me1\">type</span> <span class=\"sy0\">!=</span> Type.<span class=\"me1\">OBkt</span><span class=\"br0\">)</span><br/>                joinXP<span class=\"br0\">(</span>opr.<span class=\"me1\">pop</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>              opr.<span class=\"me1\">pop</span><span class=\"sy0\">;</span><br/>              expectingOP <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>              <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"+\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"*\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"/\"</span><span class=\"sy0\">:</span><br/>              <span class=\"kw1\">while</span> <span class=\"br0\">(</span>tokenXP <span class=\"sy0\">&lt;=</span> opr.<span class=\"me1\">pop</span><span class=\"sy0\">!</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><br/>                joinXP<span class=\"br0\">(</span>opr.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>              opr.<span class=\"me1\">push</span><span class=\"br0\">(</span>tokenXP<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>              expectingOP <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>              <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">default</span><span class=\"sy0\">:</span><br/>              <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Expecting Operator or ), not &lt;\"</span><br/>                                  <span class=\"sy0\">~</span> token <span class=\"sy0\">~</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span> <span class=\"co1\">// Process Num-alike XP.</span><br/>          <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>token<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"+\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"-\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"*\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"/\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\")\"</span><span class=\"sy0\">:</span><br/>              <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Expecting Number or (, not &lt;\"</span><br/>                                  <span class=\"sy0\">~</span> token <span class=\"sy0\">~</span> <span class=\"st0\">\"&gt;\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"(\"</span><span class=\"sy0\">:</span><br/>              opr.<span class=\"me1\">push</span><span class=\"br0\">(</span>tokenXP<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>              expectingOP <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>              <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">default</span><span class=\"sy0\">:</span> <span class=\"co1\">// Number.</span><br/>              num.<span class=\"me1\">push</span><span class=\"br0\">(</span>tokenXP<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>              expectingOP <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>          <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        xpHead <span class=\"sy0\">=</span> xpTail<span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span> <span class=\"co1\">// End while.</span><br/>\u00a0<br/>      <span class=\"kw1\">while</span> <span class=\"br0\">(</span>opr.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">// Join pending Op.</span><br/>        joinXP<span class=\"br0\">(</span>opr.<span class=\"me1\">pop</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw2\">catch</span><span class=\"br0\">(</span><span class=\"kw3\">Exception</span> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      writefln<span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>%s<span class=\"es1\">\\n</span>%s^\"</span><span class=\"sy0\">,</span> e.<span class=\"me1\">msg</span><span class=\"sy0\">,</span> xpr<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span>.<span class=\"me1\">replicate</span><span class=\"br0\">(</span>xpHead<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      root <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">this</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// Should be one XP left.</span><br/>      <span class=\"st0\">\"Parse Error...\"</span>.<span class=\"me1\">writefln</span><span class=\"sy0\">;</span><br/>      root <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      root <span class=\"sy0\">=</span> num.<span class=\"me1\">pop</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">this</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"co1\">// End Parse.</span><br/><span class=\"br0\">}</span>  <span class=\"co1\">// End class AST.</span><br/>\u00a0<br/><span class=\"co1\">// To display AST fancy struct.</span><br/><span class=\"kw4\">void</span> ins<span class=\"br0\">(</span><span class=\"kw2\">ref</span> <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> s<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">string</span> v<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> p<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">int</span> l<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>l <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&gt;</span> s.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>    s.<span class=\"me1\">length</span><span class=\"sy0\">++;</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>s<span class=\"br0\">[</span>l<span class=\"br0\">]</span>.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;</span> p <span class=\"sy0\">+</span> v.<span class=\"me1\">length</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    s<span class=\"br0\">[</span>l<span class=\"br0\">]</span> <span class=\"sy0\">~=</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>  s<span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"br0\">[</span>p <span class=\"sy0\">..</span> <span class=\"me1\">p</span> <span class=\"sy0\">+</span> v.<span class=\"me1\">length</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> v<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">final</span> <span class=\"kw4\">class</span> CalcVis <span class=\"sy0\">:</span> Visitor <span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> result<span class=\"sy0\">,</span> level<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">string</span> resultStr<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">char</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"br0\">]</span> Tree<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> opCall<span class=\"br0\">(</span>AST a<span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&amp;&amp;</span> a.<span class=\"me1\">root</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">auto</span> c <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> CalcVis<span class=\"sy0\">;</span><br/>      a.<span class=\"me1\">root</span>.<span class=\"me1\">accept</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">c</span>.<span class=\"me1\">Tree</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">// More fancy.</span><br/>        <span class=\"kw4\">bool</span> flipflop <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">enum</span> <span class=\"kw4\">char</span> mk <span class=\"sy0\">=</span> <span class=\"st0\">'.'</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> j<span class=\"sy0\">;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">c</span>.<span class=\"me1\">Tree</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw1\">while</span> <span class=\"br0\">(</span>j <span class=\"sy0\">&gt;=</span> c.<span class=\"me1\">Tree</span><span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>            c.<span class=\"me1\">Tree</span><span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">~=</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>          <span class=\"kw4\">immutable</span> c1 <span class=\"sy0\">=</span> c.<span class=\"me1\">Tree</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>          <span class=\"kw4\">immutable</span> c2 <span class=\"sy0\">=</span> c.<span class=\"me1\">Tree</span><span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>flipflop <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>c1 <span class=\"sy0\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> c2 <span class=\"sy0\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>            c.<span class=\"me1\">Tree</span><span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> mk<span class=\"sy0\">;</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c1 <span class=\"sy0\">!=</span> mk <span class=\"sy0\">&amp;&amp;</span> c1 <span class=\"sy0\">!=</span> <span class=\"st0\">' '</span> <span class=\"sy0\">&amp;&amp;</span><br/>              <span class=\"br0\">(</span>j <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span>isDigit<span class=\"br0\">(</span>c.<span class=\"me1\">Tree</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            flipflop <span class=\"sy0\">=</span> <span class=\"sy0\">!</span>flipflop<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> t<span class=\"sy0\">;</span> c.<span class=\"me1\">Tree</span><span class=\"br0\">)</span><br/>        t.<span class=\"me1\">writefln</span><span class=\"sy0\">;</span><br/>      writefln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%s ==&gt;<span class=\"es1\">\\n</span>%s =\u00a0%s\"</span><span class=\"sy0\">,</span> a.<span class=\"me1\">xpr</span><span class=\"sy0\">,</span> c.<span class=\"me1\">resultStr</span><span class=\"sy0\">,</span> c.<span class=\"me1\">result</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>      <span class=\"st0\">\"Evalute invalid or null Expression.\"</span>.<span class=\"me1\">writefln</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">// Calc. the value, display AST struct and eval order.</span><br/>  <span class=\"kw4\">override</span> <span class=\"kw4\">void</span> visit<span class=\"br0\">(</span>XP xp<span class=\"br0\">)</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    ins<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span> xp.<span class=\"me1\">str</span><span class=\"sy0\">,</span> xp.<span class=\"me1\">pos</span><span class=\"sy0\">,</span> level<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    level<span class=\"sy0\">++;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>xp.<span class=\"me1\">type</span> <span class=\"sy0\">==</span> Type.<span class=\"me1\">Num</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      resultStr <span class=\"sy0\">~=</span> xp.<span class=\"me1\">str</span><span class=\"sy0\">;</span><br/>      result <span class=\"sy0\">=</span> xp.<span class=\"me1\">str</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"kw4\">int</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      resultStr <span class=\"sy0\">~=</span> <span class=\"st0\">\"(\"</span><span class=\"sy0\">;</span><br/>      xp.<span class=\"me1\">LHS</span>.<span class=\"me1\">accept</span><span class=\"br0\">(</span><span class=\"kw2\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw4\">immutable</span> <span class=\"kw4\">int</span> lhs <span class=\"sy0\">=</span> result<span class=\"sy0\">;</span><br/>      resultStr <span class=\"sy0\">~=</span> opChar<span class=\"br0\">[</span>xp.<span class=\"me1\">type</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>      xp.<span class=\"me1\">RHS</span>.<span class=\"me1\">accept</span><span class=\"br0\">(</span><span class=\"kw2\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      resultStr <span class=\"sy0\">~=</span> <span class=\"st0\">\")\"</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>xp.<span class=\"me1\">type</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">case</span> Type.<span class=\"me1\">Add</span><span class=\"sy0\">:</span> result <span class=\"sy0\">=</span> lhs <span class=\"sy0\">+</span> result<span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> Type.<span class=\"me1\">Sub</span><span class=\"sy0\">:</span> result <span class=\"sy0\">=</span> lhs <span class=\"sy0\">-</span> result<span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> Type.<span class=\"me1\">Mul</span><span class=\"sy0\">:</span> result <span class=\"sy0\">=</span> lhs <span class=\"sy0\">*</span> result<span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> Type.<span class=\"me1\">Div</span><span class=\"sy0\">:</span> result <span class=\"sy0\">=</span> lhs <span class=\"sy0\">/</span> result<span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"kw2\">default</span><span class=\"sy0\">:</span> <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Invalid type\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    level<span class=\"sy0\">--;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"coMULTI\">/*@safe*/</span> <span class=\"br0\">{</span><br/>  <span class=\"kw4\">immutable</span> exp0 <span class=\"sy0\">=</span> <span class=\"st0\">\"1 + 2*(3 - 2*(3 - 2)*((2 - 4)*5\"</span> <span class=\"sy0\">~</span><br/>                   <span class=\"st0\">\" - 22/(7 + 2*(3 - 1)) - 1)) + 1\"</span><span class=\"sy0\">;</span><br/>  <span class=\"kw4\">immutable</span> exp <span class=\"sy0\">=</span> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> args<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> exp0<span class=\"sy0\">;</span><br/>  <span class=\"kw2\">new</span> AST<span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">parse</span><span class=\"br0\">(</span>exp<span class=\"br0\">)</span>.<span class=\"me1\">CalcVis</span><span class=\"sy0\">;</span> <span class=\"co1\">// Should be 60.</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 18, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> eParser <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;</span>elang<span class=\"sy0\">:</span>syntax.<span class=\"me1\">makeEParser</span><span class=\"sy0\">&gt;</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> LiteralExpr <span class=\"sy0\">:=</span> <span class=\"sy0\">&lt;</span>elang<span class=\"sy0\">:</span>evm.<span class=\"me1\">makeLiteralExpr</span><span class=\"sy0\">&gt;</span>.<span class=\"me1\">asType</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> arithEvaluate<span class=\"br0\">(</span>expr <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/String\"><span class=\"kw6\">String</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> ast <span class=\"sy0\">:=</span> eParser<span class=\"br0\">(</span>expr<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> evalAST<span class=\"br0\">(</span>ast<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    return <a href=\"http://wiki.erights.org/wiki/switch\"><span class=\"kw1\">switch</span></a> <span class=\"br0\">(</span>ast<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> e<span class=\"st0\">`@a + @b`</span> <span class=\"br0\">{</span> evalAST<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> evalAST<span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>      <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> e<span class=\"st0\">`@a - @b`</span> <span class=\"br0\">{</span> evalAST<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">-</span> evalAST<span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>      <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> e<span class=\"st0\">`@a * @b`</span> <span class=\"br0\">{</span> evalAST<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">*</span> evalAST<span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>      <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> e<span class=\"st0\">`@a / @b`</span> <span class=\"br0\">{</span> evalAST<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> evalAST<span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>      <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> e<span class=\"st0\">`<a class=\"__cf_email__\" data-cfemail=\"69442908\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>`</span> <span class=\"br0\">{</span> <span class=\"sy0\">-</span><span class=\"br0\">(</span>evalAST<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>      <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> l <span class=\"sy0\">:</span>LiteralExpr <span class=\"br0\">{</span> l.<span class=\"me1\">getValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  return evalAST<span class=\"br0\">(</span>ast<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elena", "loc": 324, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>import extensions'text.<br/>\u00a0<br/>class Token<br/>{<br/>    object theValue.<br/>\u00a0<br/>    int rprop level\u00a0:: theLevel.<br/>\u00a0<br/>    constructor new(int aLevel)<br/>    [<br/>        theValue\u00a0:= StringWriter new.<br/>        theLevel\u00a0:= aLevel + 9.<br/>    ]<br/>\u00a0<br/>    append\u00a0: aChar<br/>    [<br/>        theValue &lt;&lt; aChar.<br/>    ]<br/>\u00a0<br/>    number = theValue toReal.<br/>}<br/>\u00a0<br/>class Node<br/>{<br/>    object prop  left \u00a0:: theLeft.<br/>    object prop  right\u00a0:: theRight.<br/>    int    rprop level\u00a0:: theLevel.<br/>\u00a0<br/>    constructor new(int aLevel)<br/>    [<br/>        theLevel\u00a0:= aLevel.<br/>    ]<br/>}<br/>\u00a0<br/>class SummaryNode\u00a0:: Node<br/>{<br/>    constructor new(int aLevel)<br/>        &lt;= new(aLevel + 1).<br/>\u00a0<br/>    number = theLeft number + theRight number.<br/>}<br/>\u00a0<br/>class DifferenceNode\u00a0:: Node<br/>{<br/>    constructor new(int aLevel)<br/>        &lt;= new(aLevel + 1).<br/>\u00a0<br/>    number = theLeft number - theRight number.<br/>}<br/>\u00a0<br/>class ProductNode\u00a0:: Node<br/>{<br/>    constructor new(int aLevel)<br/>        &lt;= new(aLevel + 2).<br/>\u00a0<br/>    number = theLeft number * theRight number.<br/>}<br/>\u00a0<br/>class FractionNode\u00a0:: Node<br/>{<br/>    constructor new(int aLevel)<br/>        &lt;= new(aLevel + 2).<br/>\u00a0<br/>    number = theLeft number / theRight number.<br/>}<br/>\u00a0<br/>class Expression<br/>{<br/>    int    rprop level\u00a0:: theLevel.<br/>    object prop  top  \u00a0:: theTop.<br/>\u00a0<br/>    constructor new(int aLevel)<br/>    [<br/>        theLevel\u00a0:= aLevel<br/>    ]<br/>\u00a0<br/>    right = theTop.<br/>\u00a0<br/>    set right:aNode [ theTop\u00a0:= aNode ]<br/>\u00a0<br/>    number =&gt; theTop.<br/>}<br/>\u00a0<br/>singleton operatorState<br/>{<br/>    eval(ch)<br/>    [<br/>        ch =&gt;<br/>            $40 [      // (<br/>                ^ target newBracket; gotoStarting<br/>            ];<br/>           \u00a0! [<br/>                ^ target newToken; append:ch; gotoToken<br/>            ].<br/>    ]<br/>}<br/>\u00a0<br/>singleton tokenState<br/>{<br/>    eval(ch)<br/>    [<br/>        ch =&gt;<br/>            $41 [      // )<br/>                ^ target closeBracket; gotoToken<br/>            ];<br/>            $42 [      // *<br/>                ^ target newProduct; gotoOperator<br/>            ];<br/>            $43 [      // +<br/>                ^ target newSummary; gotoOperator<br/>            ];<br/>            $45 [      // -<br/>                ^ target newDifference; gotoOperator<br/>            ];<br/>            $47 [      // /<br/>                ^ target newFraction; gotoOperator<br/>            ];<br/>           \u00a0! [<br/>                ^ target append:ch<br/>            ].<br/>    ]<br/>}    <br/>\u00a0<br/>singleton startState<br/>{<br/>    eval(ch)<br/>    [<br/>        ch =&gt;<br/>            $40 [      // (<br/>                ^ target newBracket; gotoStarting<br/>            ];<br/>            $45 [ // -<br/>                ^ target newToken; append:\"0\"; newDifference; gotoOperator<br/>            ];<br/>           \u00a0! [<br/>                ^ target newToken; append:ch; gotoToken<br/>            ].<br/>    ]<br/>}    <br/>\u00a0<br/>class Scope<br/>{<br/>    object theState.<br/>    int    theLevel.<br/>    object theParser.<br/>    object theToken.<br/>    object theExpression.<br/>\u00a0<br/>    constructor new:aParser<br/>    [<br/>        theState\u00a0:= startState.<br/>        theLevel\u00a0:= 0.<br/>        theExpression\u00a0:= Expression new(0).<br/>        theParser\u00a0:= aParser.<br/>    ]<br/>\u00a0<br/>    newToken<br/>    [<br/>        theToken\u00a0:= theParser appendToken(theExpression, theLevel).<br/>    ]                                                <br/>\u00a0<br/>    newSummary<br/>    [<br/>        theToken\u00a0:= nil.<br/>\u00a0<br/>        theParser appendSummary(theExpression, theLevel).<br/>    ]                                                <br/>\u00a0<br/>    newDifference<br/>    [<br/>        theToken\u00a0:= nil.<br/>\u00a0<br/>        theParser appendDifference(theExpression, theLevel)<br/>    ]                                                <br/>\u00a0<br/>    newProduct<br/>    [<br/>        theToken\u00a0:= nil.<br/>\u00a0<br/>        theParser appendProduct(theExpression, theLevel)<br/>    ]                                                <br/>\u00a0<br/>    newFraction<br/>    [<br/>        theToken\u00a0:= nil.<br/>\u00a0<br/>        theParser appendFraction(theExpression, theLevel)<br/>    ]                                                <br/>\u00a0<br/>    newBracket<br/>    [<br/>        theToken\u00a0:= nil.<br/>\u00a0<br/>        theLevel\u00a0:= theLevel + 10.<br/>\u00a0<br/>        theParser appendSubexpression(theExpression, theLevel).<br/>    ]            <br/>\u00a0<br/>    closeBracket<br/>    [<br/>        if (theLevel &lt; 10)<br/>            [ InvalidArgumentException new:\"Invalid expression\"; raise ].<br/>\u00a0<br/>        theLevel\u00a0:= theLevel - 10<br/>    ]            <br/>\u00a0<br/>    append:ch<br/>    [<br/>        if((ch &gt;= $48) &amp;&amp; (ch &lt; $58))<br/>            [ theToken append:ch ];<br/>            [ InvalidArgumentException new:\"Invalid expression\"; raise ]<br/>    ]<br/>\u00a0<br/>    append(literal aLiteral)<br/>    [<br/>        aLiteral forEach(:ch)[ self append:ch ]<br/>    ]<br/>\u00a0<br/>    gotoStarting<br/>    [<br/>        theState\u00a0:= startState<br/>    ]<br/>\u00a0<br/>    gotoToken<br/>    [<br/>        theState\u00a0:= tokenState<br/>    ]<br/>\u00a0<br/>    gotoOperator<br/>    [<br/>        theState\u00a0:= operatorState<br/>    ]<br/>\u00a0<br/>    number =&gt; theExpression.<br/>\u00a0<br/>    dispatch =&gt; theState.<br/>}<br/>\u00a0<br/>class Parser<br/>{<br/>    appendToken(object anExpression, int aLevel)<br/>    [<br/>        var aToken\u00a0:= Token new(aLevel).<br/>\u00a0<br/>        anExpression top\u00a0:= self append(anExpression top, aToken).<br/>\u00a0<br/>        ^ aToken<br/>    ]<br/>\u00a0<br/>    appendSummary(object anExpression, int aLevel)<br/>    [<br/>        anExpression top\u00a0:= self append(anExpression top, SummaryNode new(aLevel)).<br/>    ]<br/>\u00a0<br/>    appendDifference(object anExpression, int aLevel)<br/>    [<br/>        anExpression top\u00a0:= self append(anExpression top, DifferenceNode new(aLevel)).<br/>    ]<br/>\u00a0<br/>    appendProduct(object anExpression, int aLevel)<br/>    [<br/>        anExpression top\u00a0:= self append(anExpression top, ProductNode new(aLevel)).<br/>    ]<br/>\u00a0<br/>    appendFraction(object anExpression, int aLevel)<br/>    [<br/>        anExpression top\u00a0:= self append(anExpression top, FractionNode new(aLevel))<br/>    ]<br/>\u00a0<br/>    appendSubexpression(object anExpression, int aLevel)<br/>    [<br/>        anExpression top\u00a0:= self append(anExpression top, Expression new(aLevel)).<br/>    ]<br/>\u00a0<br/>    append(object aLastNode, object aNewNode)<br/>    [<br/>        if(nil == aLastNode)<br/>            [ ^ aNewNode ].<br/>\u00a0<br/>        if (aNewNode level &lt;= aLastNode level)<br/>            [ aNewNode left\u00a0:= aLastNode. ^ aNewNode ].<br/>\u00a0<br/>        var aParent\u00a0:= aLastNode.<br/>        var aCurrent\u00a0:= aLastNode right.<br/>        while ((nil\u00a0!= aCurrent) &amp;&amp; (aNewNode level &gt; aCurrent level))<br/>            [ aParent\u00a0:= aCurrent. aCurrent\u00a0:= aCurrent right. ].<br/>\u00a0<br/>        if (nil == aCurrent)<br/>            [ aParent right\u00a0:= aNewNode. ];<br/>            [ aNewNode left\u00a0:= aCurrent. aParent right\u00a0:= aNewNode ].<br/>\u00a0<br/>        ^ aLastNode<br/>    ]<br/>\u00a0<br/>    run\u00a0: aText<br/>    [<br/>        var aScope\u00a0:= Scope new(self).<br/>\u00a0<br/>        aText forEach(:ch)[ aScope eval:ch ].<br/>\u00a0<br/>        ^ aScope number<br/>    ]<br/>}<br/>\u00a0<br/>public program<br/>[<br/>    var aText\u00a0:= StringWriter new.<br/>    var aParser\u00a0:= Parser new.<br/>\u00a0<br/>    $(console readLine; saveTo:aText; length &gt; 0) doWhile:<br/>    [<br/>        try(console printLine(\"=\",aParser run:aText))<br/>        {<br/>            on(Exception e)<br/>            [<br/>                console writeLine:\"Invalid Expression\"<br/>            ]<br/>        }.<br/>\u00a0<br/>        aText clear<br/>    ]<br/>]</pre>"}, {"lang": "Emacs Lisp", "loc": 94, "block": "<pre class=\"lisp highlighted_source\">#<span class=\"sy0\">!</span>/usr/bin/env emacs --script<br/><span class=\"co1\">;; -*- mode: emacs-lisp; lexical-binding: t -*-</span><br/><span class=\"co1\">;;&gt; ./arithmetic-evaluation '(1 + 2) * 3'</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> advance <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>rtn <span class=\"br0\">(</span>buffer-substring-no-properties <span class=\"br0\">(</span>point<span class=\"br0\">)</span> <span class=\"br0\">(</span>match-end <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>goto-char <span class=\"br0\">(</span>match-end <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    rtn<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defvar current-<span class=\"kw1\">symbol</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> next-<span class=\"kw1\">symbol</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>looking-at <span class=\"st0\">\"[ <span class=\"es0\">\\t</span><span class=\"es0\">\\n</span>]+\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>goto-char <span class=\"br0\">(</span>match-end <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span>eobp<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setq</span> current-<span class=\"kw1\">symbol</span> 'eof<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span>looking-at <span class=\"st0\">\"[0-9]+\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setq</span> current-<span class=\"kw1\">symbol</span> <span class=\"br0\">(</span>string-to-number <span class=\"br0\">(</span>advance<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span>looking-at <span class=\"st0\">\"[-+*/()]\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setq</span> current-<span class=\"kw1\">symbol</span> <span class=\"br0\">(</span>advance<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"br0\">(</span>looking-at <span class=\"st0\">\".\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"st0\">\"Unknown character '%s'\"</span> <span class=\"br0\">(</span>advance<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> accept <span class=\"br0\">(</span>sym<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">equal</span> sym current-<span class=\"kw1\">symbol</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>next-<span class=\"kw1\">symbol</span><span class=\"br0\">)</span><br/>    t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> expect <span class=\"br0\">(</span>sym<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>unless <span class=\"br0\">(</span>accept sym<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"st0\">\"Expected symbol\u00a0%s, but found\u00a0%s\"</span> sym current-<span class=\"kw1\">symbol</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  t<span class=\"br0\">)</span>    <br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> p-expression <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\" expression = term  { ('+' | '-') term } . \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>rtn <span class=\"br0\">(</span>p-term<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>while <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">equal</span> current-<span class=\"kw1\">symbol</span> <span class=\"st0\">\"+\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">equal</span> current-<span class=\"kw1\">symbol</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>op current-<span class=\"kw1\">symbol</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>left rtn<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>next-<span class=\"kw1\">symbol</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setq</span> rtn <span class=\"br0\">(</span><span class=\"kw1\">list</span> op left <span class=\"br0\">(</span>p-term<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    rtn<span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> p-term <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\" term = factor  { ('*' | '/') factor } . \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>rtn <span class=\"br0\">(</span>p-factor<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>while <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"kw1\">equal</span> current-<span class=\"kw1\">symbol</span> <span class=\"st0\">\"*\"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">equal</span> current-<span class=\"kw1\">symbol</span> <span class=\"st0\">\"/\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>op current-<span class=\"kw1\">symbol</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>left rtn<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>next-<span class=\"kw1\">symbol</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setq</span> rtn <span class=\"br0\">(</span><span class=\"kw1\">list</span> op left <span class=\"br0\">(</span>p-factor<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    rtn<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> p-factor <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"st0\">\" factor = constant | variable | '('  expression  ')' . \"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span>rtn<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>     <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">numberp</span> current-<span class=\"kw1\">symbol</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setq</span> rtn current-<span class=\"kw1\">symbol</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>next-<span class=\"kw1\">symbol</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"br0\">(</span>accept <span class=\"st0\">\"(\"</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setq</span> rtn <span class=\"br0\">(</span>p-expression<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>expect <span class=\"st0\">\")\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span>t <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"st0\">\"Syntax error\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    rtn<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> ast-build <span class=\"br0\">(</span>expression<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span>rtn<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>with-temp-buffer<br/>      <span class=\"br0\">(</span>insert expression<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>goto-char <span class=\"br0\">(</span>point-<span class=\"kw1\">min</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>next-<span class=\"kw1\">symbol</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">setq</span> rtn <span class=\"br0\">(</span>p-expression<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>expect 'eof<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    rtn<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> ast-<span class=\"kw1\">eval</span> <span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>pcase v<br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>pred <span class=\"kw1\">numberp</span><span class=\"br0\">)</span> v<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>`<span class=\"br0\">(</span><span class=\"st0\">\"+\"</span> <span class=\"sy0\">,</span>a <span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ <span class=\"br0\">(</span>ast-<span class=\"kw1\">eval</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span>ast-<span class=\"kw1\">eval</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>`<span class=\"br0\">(</span><span class=\"st0\">\"-\"</span> <span class=\"sy0\">,</span>a <span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"br0\">(</span>- <span class=\"br0\">(</span>ast-<span class=\"kw1\">eval</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span>ast-<span class=\"kw1\">eval</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>`<span class=\"br0\">(</span><span class=\"st0\">\"*\"</span> <span class=\"sy0\">,</span>a <span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"br0\">(</span>* <span class=\"br0\">(</span>ast-<span class=\"kw1\">eval</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span>ast-<span class=\"kw1\">eval</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>`<span class=\"br0\">(</span><span class=\"st0\">\"/\"</span> <span class=\"sy0\">,</span>a <span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"br0\">(</span>/ <span class=\"br0\">(</span>ast-<span class=\"kw1\">eval</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">float</span> <span class=\"br0\">(</span>ast-<span class=\"kw1\">eval</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>_ <span class=\"br0\">(</span><span class=\"kw1\">error</span> <span class=\"st0\">\"Unknown value\u00a0%s\"</span> v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">dolist</span> <span class=\"br0\">(</span>arg command-line-args-left<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>ast <span class=\"br0\">(</span>ast-build arg<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"br0\">(</span>format <span class=\"st0\">\"       ast =\u00a0%s<span class=\"es0\">\\n</span>\"</span> ast<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"br0\">(</span>format <span class=\"st0\">\"     value =\u00a0%s<span class=\"es0\">\\n</span>\"</span> <span class=\"br0\">(</span>ast-<span class=\"kw1\">eval</span> ast<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>terpri<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">setq</span> command-line-args-left <span class=\"kw1\">nil</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 235, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM EVAL<br/>\u00a0<br/>!<br/>! arithmetic expression evaluator<br/>!<br/>\u00a0<br/>!$KEY<br/>\u00a0<br/>LABEL 98,100,110<br/>\u00a0<br/>DIM STACK$[50]<br/>\u00a0<br/>PROCEDURE DISEGNA_STACK<br/> \u00a0!$RCODE=\"LOCATE 3,1\"<br/> \u00a0!$RCODE=\"COLOR 0,7\"<br/>  PRINT(TAB(35);\"S T A C K\";TAB(79);)<br/> \u00a0!$RCODE=\"COLOR 7,0\"<br/>  FOR TT=1 TO 38 DO<br/>     IF TT&gt;=20 THEN<br/>       \u00a0!$RCODE=\"LOCATE 3+TT-19,40\"<br/>      ELSE<br/>       \u00a0!$RCODE=\"LOCATE 3+TT,1\"<br/>     END IF<br/>     IF TT=NS THEN PRINT(\"&gt;\";)  ELSE PRINT(\" \";)  END IF<br/>     PRINT(RIGHT$(STR$(TT),2);\"\u00b3 \";STACK$[TT];\"    \")<br/>  END FOR<br/>  REPEAT<br/>   GET(Z$)<br/>  UNTIL LEN(Z$)&lt;&gt;0<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE COMPATTA_STACK<br/>   IF NS&gt;1 THEN<br/>      R=1<br/>      WHILE R&lt;NS DO<br/>         IF INSTR(OP_LIST$,STACK$[R])=0 AND INSTR(OP_LIST$,STACK$[R+1])=0 THEN<br/>            FOR R1=R TO NS-1 DO<br/>                STACK$[R1]=STACK$[R1+1]<br/>            END FOR<br/>            NS=NS-1<br/>         END IF<br/>         R=R+1<br/>      END WHILE<br/>   END IF<br/>   DISEGNA_STACK<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE CALC_ARITM<br/>     L=NS1<br/>     WHILE L&lt;=NS2 DO<br/>        IF STACK$[L]=\"^\" THEN<br/>            IF L&gt;=NS2 THEN GOTO 100 END IF<br/>            N1#=VAL(STACK$[L-1])  N2#=VAL(STACK$[L+1])  NOP=NOP-1<br/>            IF STACK$[L]=\"^\" THEN<br/>                RI#=N1#^N2#<br/>            END IF<br/>            STACK$[L-1]=STR$(RI#)<br/>            N=L<br/>            WHILE N&lt;=NS2-2 DO<br/>               STACK$[N]=STACK$[N+2]<br/>               N=N+1<br/>            END WHILE<br/>            NS2=NS2-2<br/>            L=NS1-1<br/>        END IF<br/>        L=L+1<br/>     END WHILE<br/>\u00a0<br/>     L=NS1<br/>     WHILE L&lt;=NS2 DO<br/>        IF STACK$[L]=\"*\" OR STACK$[L]=\"/\" THEN<br/>            IF L&gt;=NS2 THEN GOTO 100 END IF<br/>            N1#=VAL(STACK$[L-1])  N2#=VAL(STACK$[L+1])  NOP=NOP-1<br/>            IF STACK$[L]=\"*\" THEN RI#=N1#*N2# ELSE RI#=N1#/N2# END IF<br/>            STACK$[L-1]=STR$(RI#)<br/>            N=L<br/>            WHILE N&lt;=NS2-2 DO<br/>               STACK$[N]=STACK$[N+2]<br/>               N=N+1<br/>            END WHILE<br/>            NS2=NS2-2<br/>            L=NS1-1<br/>        END IF<br/>        L=L+1<br/>     END WHILE<br/>\u00a0<br/>     L=NS1<br/>     WHILE L&lt;=NS2 DO<br/>        IF STACK$[L]=\"+\" OR STACK$[L]=\"-\" THEN<br/>            EXIT IF L&gt;=NS2<br/>            N1#=VAL(STACK$[L-1])  N2#=VAL(STACK$[L+1])  NOP=NOP-1<br/>            IF STACK$[L]=\"+\" THEN RI#=N1#+N2# ELSE RI#=N1#-N2# END IF<br/>            STACK$[L-1]=STR$(RI#)<br/>            N=L<br/>            WHILE N&lt;=NS2-2 DO<br/>               STACK$[N]=STACK$[N+2]<br/>               N=N+1<br/>            END WHILE<br/>            NS2=NS2-2<br/>            L=NS1-1<br/>        END IF<br/>        L=L+1<br/>     END WHILE<br/>100:<br/>     IF NOP&lt;2 THEN  \u00a0! operator priority<br/>          DB#=VAL(STACK$[NS1])<br/>       ELSE<br/>          IF NOP&lt;3 THEN<br/>               DB#=VAL(STACK$[NS1+2])<br/>             ELSE<br/>               DB#=VAL(STACK$[NS1+4])<br/>          END IF<br/>     END IF<br/>END PROCEDURE<br/>\u00a0<br/>PROCEDURE SVOLGI_PAR<br/>   NPA=NPA-1<br/>   FOR J=NS TO 1 STEP -1 DO<br/>      EXIT IF STACK$[J]=\"(\"<br/>   END FOR<br/>   IF J=0 THEN<br/>       NS1=1  NS2=NS  CALC_ARITM<br/>       NERR=7<br/>     ELSE<br/>       FOR R=J TO NS-1 DO<br/>          STACK$[R]=STACK$[R+1]<br/>       END FOR<br/>       NS1=J  NS2=NS-1  CALC_ARITM<br/>       IF NS1=2 THEN NS1=1  STACK$[1]=STACK$[2] END IF<br/>       NS=NS1<br/>       COMPATTA_STACK<br/>   END IF<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>     OP_LIST$=\"+-*/^(\"<br/>     NOP=0  NPA=0  NS=1  K$=\"\"<br/>     STACK$[1]=\"@\"             \u00a0! init stack<br/>\u00a0<br/>     PRINT(CHR$(12);)<br/>     INPUT(LINE,EXPRESSION$)<br/>\u00a0<br/>     FOR W=1 TO LEN(EXPRESSION$) DO<br/>        LOOP<br/>           CODE=ASC(MID$(EXPRESSION$,W,1))<br/>           IF (CODE&gt;=48 AND CODE&lt;=57) OR CODE=46 THEN<br/>                K$=K$+CHR$(CODE)<br/>                W=W+1  IF W&gt;LEN(EXPRESSION$) THEN GOTO 98 END IF<br/>              ELSE<br/>                EXIT IF K$=\"\"<br/>                IF NS&gt;1 OR (NS=1 AND STACK$[1]&lt;&gt;\"@\") THEN NS=NS+1 END IF<br/>                IF FLAG=0 THEN STACK$[NS]=K$ ELSE STACK$[NS]=STR$(VAL(K$)*FLAG) END IF<br/>                K$=\"\"  FLAG=0<br/>                EXIT<br/>           END IF<br/>        END LOOP<br/>        IF CODE=43 THEN K$=\"+\" END IF<br/>        IF CODE=45 THEN K$=\"-\" END IF<br/>        IF CODE=42 THEN K$=\"*\" END IF<br/>        IF CODE=47 THEN K$=\"/\" END IF<br/>        IF CODE=94 THEN K$=\"^\" END IF<br/>\u00a0<br/>     CASE CODE OF<br/>       43,45,42,47,94-&gt;<br/>             IF MID$(EXPRESSION$,W+1,1)=\"-\" THEN FLAG=-1  W=W+1 END IF<br/>             IF INSTR(OP_LIST$,STACK$[NS])&lt;&gt;0 THEN<br/>                 NERR=5<br/>               ELSE<br/>                 NS=NS+1  STACK$[NS]=K$  NOP=NOP+1<br/>                 IF NOP&gt;=2 THEN<br/>                    FOR J=NS TO 1 STEP -1 DO<br/>                       IF STACK$[J]&lt;&gt;\"(\" THEN<br/>                           CONTINUE FOR<br/>                       END IF<br/>                       IF J&lt;NS-2 THEN<br/>                           EXIT<br/>                         ELSE<br/>                            GOTO 110<br/>                       END IF<br/>                    END FOR<br/>                    NS1=J+1  NS2=NS  CALC_ARITM<br/>                    NS=NS2  STACK$[NS]=K$<br/>                    REGISTRO_X#=VAL(STACK$[NS-1])<br/>                 END IF<br/>             END IF<br/>110:<br/>       END -&gt;<br/>\u00a0<br/>       40-&gt;<br/>             IF NS&gt;1 OR (NS=1 AND STACK$[1]&lt;&gt;\"@\") THEN NS=NS+1 END IF<br/>             STACK$[NS]=\"(\"  NPA=NPA+1<br/>             IF MID$(EXPRESSION$,W+1,1)=\"-\" THEN FLAG=-1  W=W+1 END IF<br/>       END -&gt;<br/>\u00a0<br/>       41-&gt;<br/>             SVOLGI_PAR<br/>             IF NERR=7 THEN<br/>                  NERR=0  NOP=0  NPA=0  NS=1<br/>               ELSE<br/>                  IF NERR=0 OR NERR=1 THEN<br/>                      DB#=VAL(STACK$[NS])<br/>                      REGISTRO_X#=DB#<br/>                    ELSE<br/>                      NOP=0  NPA=0  NS=1<br/>                  END IF<br/>            END IF<br/>       END -&gt;<br/>\u00a0<br/>       OTHERWISE<br/>            NERR=8<br/>   END CASE<br/>   K$=\"\"<br/>   DISEGNA_STACK<br/>END FOR<br/>\u00a0<br/>98:<br/>   IF K$&lt;&gt;\"\" THEN<br/>        IF NS&gt;1 OR (NS=1 AND STACK$[1]&lt;&gt;\"@\") THEN NS=NS+1 END IF<br/>        IF FLAG=0 THEN STACK$[NS]=K$ ELSE STACK$[NS]=STR$(VAL(K$)*FLAG) END IF<br/>   END IF<br/>   DISEGNA_STACK<br/>   IF INSTR(OP_LIST$,STACK$[NS])&lt;&gt;0 THEN<br/>         NERR=6<br/>       ELSE<br/>         WHILE NPA&lt;&gt;0 DO<br/>             SVOLGI_PAR<br/>         END WHILE<br/>         IF NERR&lt;&gt;7 THEN NS1=1  NS2=NS  CALC_ARITM  END IF<br/>    END IF<br/>    NS=1  NOP=0  NPA=0<br/>   \u00a0!$RCODE=\"LOCATE 23,1\"<br/>    IF NERR&gt;0 THEN PRINT(\"Internal Error #\";NERR)  ELSE PRINT(\"Value is \";DB#) END IF<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 42, "block": "<pre class=\"text highlighted_source\">USING: accessors kernel locals math math.parser peg.ebnf\u00a0;<br/>IN: rosetta.arith<br/>\u00a0<br/>TUPLE: operator left right\u00a0;<br/>TUPLE: add &lt; operator\u00a0;   C: &lt;add&gt; add<br/>TUPLE: sub &lt; operator\u00a0;   C: &lt;sub&gt; sub<br/>TUPLE: mul &lt; operator\u00a0;   C: &lt;mul&gt; mul<br/>TUPLE: div &lt; operator\u00a0;   C: &lt;div&gt; div<br/>\u00a0<br/>EBNF: expr-ast<br/>spaces   = [\\n\\t ]*<br/>digit    = [0-9]<br/>number   = (digit)+                         =&gt; [[ string&gt;number ]]<br/>\u00a0<br/>value    =   spaces number:n                =&gt; [[ n ]]<br/>           | spaces \"(\" exp:e spaces \")\"    =&gt; [[ e ]]<br/>\u00a0<br/>fac      =   fac:a spaces \"*\" value:b       =&gt; [[ a b &lt;mul&gt; ]]<br/>           | fac:a spaces \"/\" value:b       =&gt; [[ a b &lt;div&gt; ]]<br/>           | value<br/>\u00a0<br/>exp      =   exp:a spaces \"+\" fac:b         =&gt; [[ a b &lt;add&gt; ]]<br/>           | exp:a spaces \"-\" fac:b         =&gt; [[ a b &lt;sub&gt; ]]<br/>           | fac<br/>\u00a0<br/>main     = exp:e spaces\u00a0!(.)                =&gt; [[ e ]]<br/>;EBNF<br/>\u00a0<br/>GENERIC: eval-ast ( ast -- result )<br/>\u00a0<br/>M: number eval-ast\u00a0;<br/>\u00a0<br/>: recursive-eval ( ast -- left-result right-result )<br/>    [ left&gt;&gt; eval-ast ] [ right&gt;&gt; eval-ast ] bi\u00a0;<br/>\u00a0<br/>M: add eval-ast recursive-eval +\u00a0;<br/>M: sub eval-ast recursive-eval -\u00a0;<br/>M: mul eval-ast recursive-eval *\u00a0;<br/>M: div eval-ast recursive-eval /\u00a0;<br/>\u00a0<br/>: evaluate ( string -- result )<br/>    expr-ast eval-ast\u00a0;</pre>"}, {"lang": "F#", "loc": 8, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">module</span> AbstractSyntaxTree<br/>\u00a0<br/><span class=\"kw1\">type</span> Expression <span class=\"sy0\">=</span> <br/>  | Int    <span class=\"kw1\">of</span> <span class=\"kw4\">int</span> <br/>  | Plus   <span class=\"kw1\">of</span> Expression <span class=\"sy0\">*</span> Expression <br/>  | Minus  <span class=\"kw1\">of</span> Expression <span class=\"sy0\">*</span> Expression <br/>  | Times  <span class=\"kw1\">of</span> Expression <span class=\"sy0\">*</span> Expression <br/>  | Divide <span class=\"kw1\">of</span> Expression <span class=\"sy0\">*</span> Expression</pre>"}, {"lang": "FreeBASIC", "loc": 197, "block": "<pre class=\"freebasic highlighted_source\">\u00a0<br/><span class=\"co1\">'Arithmetic evaluation</span><br/><span class=\"co1\">'</span><br/><span class=\"co1\">'Create a program which parses and evaluates arithmetic expressions.</span><br/><span class=\"co1\">'</span><br/><span class=\"co1\">'Requirements</span><br/><span class=\"co1\">'</span><br/><span class=\"co1\">'    * An abstract-syntax tree (AST) for the expression must be created from parsing the</span><br/><span class=\"co1\">'      input.</span><br/><span class=\"co1\">'    * The AST must be used in evaluation, also, so the input may not be directly evaluated</span><br/><span class=\"co1\">'      (e.g. by calling eval or a similar language feature.)</span><br/><span class=\"co1\">'    * The expression will be a string or list of symbols like \"(1+3)*7\".</span><br/><span class=\"co1\">'    * The four symbols + - * / must be supported as binary operators with conventional</span><br/><span class=\"co1\">'      precedence rules.</span><br/><span class=\"co1\">'    * Precedence-control parentheses must also be supported.</span><br/><span class=\"co1\">'</span><br/><span class=\"co1\">'Standard mathematical precedence should be followed:</span><br/><span class=\"co1\">'</span><br/><span class=\"co1\">'    Parentheses</span><br/><span class=\"co1\">'    Multiplication/Division (left to right)</span><br/><span class=\"co1\">'    Addition/Subtraction (left to right)</span><br/><span class=\"co1\">'</span><br/><span class=\"co1\">'  test cases:</span><br/><span class=\"co1\">'  2*-3--4+-0.25\u00a0: returns -2.25</span><br/><span class=\"co1\">'  1 + 2 * (3 + (4 * 5 + 6 * 7 * 8) - 9) / 10\u00a0: returns 71</span><br/>\u00a0<br/><span class=\"kw1\">enum</span><br/>    <span class=\"kw1\">false</span> = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">true</span> = -<span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">enum</span><br/>\u00a0<br/><span class=\"kw1\">enum</span> Symbol<br/>    unknown_sym<br/>    minus_sym<br/>    plus_sym<br/>    lparen_sym<br/>    rparen_sym<br/>    number_sym<br/>    mul_sym<br/>    div_sym<br/>    unary_minus_sym<br/>    unary_plus_sym<br/>    done_sym<br/>    eof_sym<br/><span class=\"kw1\">end</span> <span class=\"kw1\">enum</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Tree<br/>    <span class=\"kw1\">as</span> Tree <span class=\"kw1\">ptr</span> leftp, rightp<br/>    op <span class=\"kw1\">as</span> Symbol<br/>    value <span class=\"kw1\">as</span> <span class=\"kw1\">double</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">type</span><br/>\u00a0<br/><span class=\"kw1\">dim</span> <span class=\"kw1\">shared</span> sym <span class=\"kw1\">as</span> Symbol<br/><span class=\"kw1\">dim</span> <span class=\"kw1\">shared</span> tokenval <span class=\"kw1\">as</span> <span class=\"kw1\">double</span><br/><span class=\"kw1\">dim</span> <span class=\"kw1\">shared</span> usr_input <span class=\"kw1\">as</span> <span class=\"kw1\">string</span><br/>\u00a0<br/><span class=\"kw1\">declare</span> <span class=\"kw1\">function</span> expr<span class=\"br0\">(</span><span class=\"kw1\">byval</span> p <span class=\"kw1\">as</span> <span class=\"kw1\">integer</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> Tree <span class=\"kw1\">ptr</span><br/>\u00a0<br/><span class=\"kw1\">function</span> isdigit<span class=\"br0\">(</span><span class=\"kw1\">byval</span> ch <span class=\"kw1\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"kw1\">long</span><br/>    <span class=\"kw1\">return</span> ch &lt;&gt; <span class=\"st0\">\"\"</span> and <span class=\"kw1\">Asc</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span> &gt;= <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> and <span class=\"kw1\">Asc</span><span class=\"br0\">(</span>ch<span class=\"br0\">)</span> &lt;= <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"9\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">sub</span> error_msg<span class=\"br0\">(</span><span class=\"kw1\">byval</span> msg <span class=\"kw1\">as</span> <span class=\"kw1\">string</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> msg<br/>    <span class=\"kw1\">system</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">sub</span><br/>\u00a0<br/><span class=\"co1\">' tokenize the input string</span><br/><span class=\"kw1\">sub</span> getsym<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> usr_input = <span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">line</span> <span class=\"kw1\">input</span> usr_input<br/>            usr_input += <span class=\"kw1\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>        endif<br/>        <span class=\"kw1\">dim</span> <span class=\"kw1\">as</span> <span class=\"kw1\">string</span> ch = <span class=\"kw1\">mid</span><span class=\"br0\">(</span>usr_input, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">' get the next char</span><br/>        usr_input = <span class=\"kw1\">mid</span><span class=\"br0\">(</span>usr_input, <span class=\"nu0\">2</span><span class=\"br0\">)</span>           <span class=\"co1\">' remove it from input</span><br/>\u00a0<br/>        sym = unknown_sym<br/>        select <span class=\"kw1\">case</span> ch<br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\" \"</span>:     <span class=\"kw1\">continue</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">case</span> <span class=\"kw1\">chr</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>, <span class=\"st0\">\"\"</span>: sym = done_sym: <span class=\"kw1\">return</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"+\"</span>:     sym = plus_sym:     <span class=\"kw1\">return</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"-\"</span>:     sym = minus_sym:    <span class=\"kw1\">return</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"*\"</span>:     sym = mul_sym:      <span class=\"kw1\">return</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"/\"</span>:     sym = div_sym:      <span class=\"kw1\">return</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"(\"</span>:     sym = lparen_sym:   <span class=\"kw1\">return</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\")\"</span>:     sym = rparen_sym:   <span class=\"kw1\">return</span><br/>            <span class=\"kw1\">case</span> <span class=\"kw1\">else</span><br/>                <span class=\"kw1\">if</span> isdigit<span class=\"br0\">(</span>ch<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                    <span class=\"kw1\">dim</span> s <span class=\"kw1\">as</span> <span class=\"kw1\">string</span> = <span class=\"st0\">\"\"</span><br/>                    <span class=\"kw1\">dim</span> dot <span class=\"kw1\">as</span> <span class=\"kw1\">integer</span> = <span class=\"nu0\">0</span><br/>                    <span class=\"kw1\">do</span><br/>                        s += ch<br/>                        <span class=\"kw1\">if</span> ch = <span class=\"st0\">\".\"</span> <span class=\"kw1\">then</span> dot += <span class=\"nu0\">1</span><br/>                        ch = <span class=\"kw1\">mid</span><span class=\"br0\">(</span>usr_input, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>       <span class=\"co1\">' get the next char</span><br/>                        usr_input = <span class=\"kw1\">mid</span><span class=\"br0\">(</span>usr_input, <span class=\"nu0\">2</span><span class=\"br0\">)</span>   <span class=\"co1\">' remove it from input</span><br/>                    <span class=\"kw1\">loop</span> <span class=\"kw1\">while</span> isdigit<span class=\"br0\">(</span>ch<span class=\"br0\">)</span> orelse ch = <span class=\"st0\">\".\"</span><br/>                    <span class=\"kw1\">if</span> ch = <span class=\"st0\">\".\"</span> <span class=\"kw1\">or</span> dot &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> error_msg<span class=\"br0\">(</span><span class=\"st0\">\"bogus number\"</span><span class=\"br0\">)</span><br/>                    usr_input = ch + usr_input          <span class=\"co1\">' prepend the char to input</span><br/>                    tokenval = <span class=\"kw1\">val</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>                    sym = number_sym<br/>                <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>                <span class=\"kw1\">return</span><br/>        <span class=\"kw1\">end</span> select<br/>    <span class=\"kw1\">loop</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">sub</span><br/>\u00a0<br/><span class=\"kw1\">function</span> make_node<span class=\"br0\">(</span><span class=\"kw1\">byval</span> op <span class=\"kw1\">as</span> Symbol, <span class=\"kw1\">byval</span> leftp <span class=\"kw1\">as</span> Tree <span class=\"kw1\">ptr</span>, <span class=\"kw1\">byval</span> rightp <span class=\"kw1\">as</span> Tree <span class=\"kw1\">ptr</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> Tree <span class=\"kw1\">ptr</span><br/>    <span class=\"kw1\">dim</span> t <span class=\"kw1\">as</span> Tree <span class=\"kw1\">ptr</span><br/>\u00a0<br/>    t = <span class=\"kw1\">callocate</span><span class=\"br0\">(</span><span class=\"kw1\">len</span><span class=\"br0\">(</span>Tree<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    t-&gt;op = op<br/>    t-&gt;leftp = leftp<br/>    t-&gt;rightp = rightp<br/>    <span class=\"kw1\">return</span> t<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> is_binary<span class=\"br0\">(</span><span class=\"kw1\">byval</span> op <span class=\"kw1\">as</span> Symbol<span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"kw1\">integer</span><br/>    select <span class=\"kw1\">case</span> op<br/>        <span class=\"kw1\">case</span> mul_sym, div_sym, plus_sym, minus_sym: <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><br/>        <span class=\"kw1\">case</span> <span class=\"kw1\">else</span>: <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><br/>    <span class=\"kw1\">end</span> select<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> prec<span class=\"br0\">(</span><span class=\"kw1\">byval</span> op <span class=\"kw1\">as</span> Symbol<span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"kw1\">integer</span><br/>    select <span class=\"kw1\">case</span> op<br/>        <span class=\"kw1\">case</span> unary_minus_sym, unary_plus_sym:  <span class=\"kw1\">return</span> <span class=\"nu0\">100</span><br/>        <span class=\"kw1\">case</span> mul_sym, div_sym:                 <span class=\"kw1\">return</span>  <span class=\"nu0\">90</span><br/>        <span class=\"kw1\">case</span> plus_sym, minus_sym:              <span class=\"kw1\">return</span>  <span class=\"nu0\">80</span><br/>        <span class=\"kw1\">case</span> <span class=\"kw1\">else</span>:                             <span class=\"kw1\">return</span>   <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">end</span> select<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> primary <span class=\"kw1\">as</span> Tree <span class=\"kw1\">ptr</span><br/>    <span class=\"kw1\">dim</span> t <span class=\"kw1\">as</span> Tree <span class=\"kw1\">ptr</span> = <span class=\"nu0\">0</span><br/>\u00a0<br/>    select <span class=\"kw1\">case</span> sym<br/>        <span class=\"kw1\">case</span> minus_sym, plus_sym<br/>            <span class=\"kw1\">dim</span> op <span class=\"kw1\">as</span> Symbol = sym<br/>            getsym<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            t = expr<span class=\"br0\">(</span>prec<span class=\"br0\">(</span>unary_minus_sym<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> op = minus_sym <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> make_node<span class=\"br0\">(</span>unary_minus_sym, t, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> op = plus_sym  <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> make_node<span class=\"br0\">(</span>unary_plus_sym,  t, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">case</span> lparen_sym<br/>            getsym<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            t = expr<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> sym &lt;&gt; rparen_sym <span class=\"kw1\">then</span> error_msg<span class=\"br0\">(</span><span class=\"st0\">\"expecting rparen\"</span><span class=\"br0\">)</span><br/>            getsym<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> t<br/>        <span class=\"kw1\">case</span> number_sym<br/>            t = make_node<span class=\"br0\">(</span>sym, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            t-&gt;value = tokenval<br/>            getsym<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> t<br/>        <span class=\"kw1\">case</span> <span class=\"kw1\">else</span>: error_msg<span class=\"br0\">(</span><span class=\"st0\">\"expecting a primary\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> select<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> expr<span class=\"br0\">(</span><span class=\"kw1\">byval</span> p <span class=\"kw1\">as</span> <span class=\"kw1\">integer</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> Tree <span class=\"kw1\">ptr</span><br/>    <span class=\"kw1\">dim</span> t <span class=\"kw1\">as</span> Tree <span class=\"kw1\">ptr</span> = primary<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> is_binary<span class=\"br0\">(</span>sym<span class=\"br0\">)</span> andalso prec<span class=\"br0\">(</span>sym<span class=\"br0\">)</span> &gt;= p<br/>        <span class=\"kw1\">dim</span> t1 <span class=\"kw1\">as</span> Tree <span class=\"kw1\">ptr</span><br/>        <span class=\"kw1\">dim</span> op <span class=\"kw1\">as</span> Symbol = sym<br/>        getsym<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        t1 = expr<span class=\"br0\">(</span>prec<span class=\"br0\">(</span>op<span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        t = make_node<span class=\"br0\">(</span>op, t, t1<span class=\"br0\">)</span><br/>    <span class=\"kw1\">wend</span><br/>    <span class=\"kw1\">return</span> t<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> eval<span class=\"br0\">(</span><span class=\"kw1\">byval</span> t <span class=\"kw1\">as</span> Tree <span class=\"kw1\">ptr</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"kw1\">double</span><br/>    <span class=\"kw1\">if</span> t &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        select <span class=\"kw1\">case</span> t-&gt;op<br/>            <span class=\"kw1\">case</span> minus_sym:       <span class=\"kw1\">return</span> eval<span class=\"br0\">(</span>t-&gt;leftp<span class=\"br0\">)</span> - eval<span class=\"br0\">(</span>t-&gt;rightp<span class=\"br0\">)</span><br/>            <span class=\"kw1\">case</span> plus_sym:        <span class=\"kw1\">return</span> eval<span class=\"br0\">(</span>t-&gt;leftp<span class=\"br0\">)</span> + eval<span class=\"br0\">(</span>t-&gt;rightp<span class=\"br0\">)</span><br/>            <span class=\"kw1\">case</span> mul_sym:         <span class=\"kw1\">return</span> eval<span class=\"br0\">(</span>t-&gt;leftp<span class=\"br0\">)</span> * eval<span class=\"br0\">(</span>t-&gt;rightp<span class=\"br0\">)</span><br/>            <span class=\"kw1\">case</span> div_sym:         <span class=\"kw1\">return</span> eval<span class=\"br0\">(</span>t-&gt;leftp<span class=\"br0\">)</span> / eval<span class=\"br0\">(</span>t-&gt;rightp<span class=\"br0\">)</span><br/>            <span class=\"kw1\">case</span> unary_minus_sym: <span class=\"kw1\">return</span> -eval<span class=\"br0\">(</span>t-&gt;leftp<span class=\"br0\">)</span><br/>            <span class=\"kw1\">case</span> unary_plus_sym:  <span class=\"kw1\">return</span>  eval<span class=\"br0\">(</span>t-&gt;leftp<span class=\"br0\">)</span><br/>            <span class=\"kw1\">case</span> number_sym:      <span class=\"kw1\">return</span> t-&gt;value<br/>            <span class=\"kw1\">case</span> <span class=\"kw1\">else</span>:            error_msg<span class=\"br0\">(</span><span class=\"st0\">\"unexpected tree node\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> select<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">do</span><br/>    getsym<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> sym = eof_sym <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> sym = done_sym <span class=\"kw1\">then</span> <span class=\"kw1\">continue</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">dim</span> t <span class=\"kw1\">as</span> Tree <span class=\"kw1\">ptr</span> = expr<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"st0\">\"&gt; \"</span>; eval<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> sym = eof_sym <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> sym &lt;&gt; done_sym <span class=\"kw1\">then</span> error_msg<span class=\"br0\">(</span><span class=\"st0\">\"unexpected input\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">loop</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 144, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20enum\"><span class=\"kw2\">enum</span></a> Op <span class=\"br0\">{</span><br/>    ADD<span class=\"br0\">(</span><span class=\"st0\">'+'</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>,<br/>    SUBTRACT<span class=\"br0\">(</span><span class=\"st0\">'-'</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>,<br/>    MULTIPLY<span class=\"br0\">(</span><span class=\"st0\">'*'</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>    DIVIDE<span class=\"br0\">(</span><span class=\"st0\">'/'</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20static\"><span class=\"kw2\">static</span></a> <span class=\"br0\">{</span><br/>        ADD.<span class=\"me1\">operation</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> a, b <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">+</span> b <span class=\"br0\">}</span><br/>        SUBTRACT.<span class=\"me1\">operation</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> a, b <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-</span> b <span class=\"br0\">}</span><br/>        MULTIPLY.<span class=\"me1\">operation</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> a, b <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">*</span> b <span class=\"br0\">}</span><br/>        DIVIDE.<span class=\"me1\">operation</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> a, b <span class=\"sy0\">-&gt;</span> a / b <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> symbol<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> precedence<br/>    Closure operation<br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20private\"><span class=\"kw2\">private</span></a> Op<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> symbol, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> precedence<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">symbol</span> <span class=\"sy0\">=</span> symbol<br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">precedence</span> <span class=\"sy0\">=</span> precedence<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> symbol <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20static\"><span class=\"kw2\">static</span></a> Op fromSymbol<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> symbol<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Op.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20find\"><span class=\"kw5\">find</span></a> <span class=\"br0\">{</span> it.<span class=\"me1\">symbol</span> <span class=\"sy0\">==</span> symbol <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20interface\"><span class=\"kw2\">interface</span></a> Expression <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> evaluate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> Constant <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20implements\"><span class=\"kw2\">implements</span></a> Expression <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> value<br/>\u00a0<br/>    Constant <span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> value<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> value <span class=\"br0\">}</span><br/>\u00a0<br/>    Constant <span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20try\"><span class=\"kw2\">try</span></a> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> str <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a> <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20catch\"><span class=\"kw2\">catch</span></a> <span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> str <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=BigDecimal&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigDecimal</span></a> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> evaluate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> value <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"st0\">\"${value}\"</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> Term <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20implements\"><span class=\"kw2\">implements</span></a> Expression <span class=\"br0\">{</span><br/>    Op op<br/>    Expression left, right<br/>\u00a0<br/>    <a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> evaluate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> op.<span class=\"me1\">operation</span><span class=\"br0\">(</span>left.<span class=\"me1\">evaluate</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, right.<span class=\"me1\">evaluate</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"st0\">\"(${op} ${left} ${right})\"</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20void\"><span class=\"kw4\">void</span></a> fail<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> msg, Closure cond <span class=\"sy0\">=</span> <span class=\"br0\">{</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>cond<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20throw\"><span class=\"kw2\">throw</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=IllegalArgumentException&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Cannot parse expression: ${msg}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Expression parse<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> expr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> tokens <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20tokenize\"><span class=\"kw6\">tokenize</span></a><span class=\"br0\">(</span>expr<span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> elements <span class=\"sy0\">=</span> groupByParens<span class=\"br0\">(</span>tokens, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    parse<span class=\"br0\">(</span>elements<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20tokenize\"><span class=\"kw6\">tokenize</span></a><span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> expr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> tokens <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> constStr <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> captureConstant <span class=\"sy0\">=</span> <span class=\"br0\">{</span> i <span class=\"sy0\">-&gt;</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>constStr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20try\"><span class=\"kw2\">try</span></a> <span class=\"br0\">{</span> tokens <span class=\"sy0\">&lt;&lt;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Constant<span class=\"br0\">(</span>constStr<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20catch\"><span class=\"kw2\">catch</span></a> <span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=NumberFormatException&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">NumberFormatException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span> fail <span class=\"st0\">\"Invalid constant '${constStr}' near position ${i}\"</span> <span class=\"br0\">}</span><br/>            constStr <span class=\"sy0\">=</span> <span class=\"st0\">''</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20for\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>expr.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> c <span class=\"sy0\">=</span> expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> constSign <span class=\"sy0\">=</span> c <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20in\"><span class=\"kw1\">in</span></a> <span class=\"br0\">[</span><span class=\"st0\">'+'</span>,<span class=\"st0\">'-'</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> constStr.<span class=\"me1\">empty</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>tokens.<span class=\"me1\">empty</span> <span class=\"sy0\">||</span> tokens<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">')'</span><span class=\"br0\">)</span> <br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> isConstChar <span class=\"sy0\">=</span> <span class=\"br0\">{</span> it <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20in\"><span class=\"kw1\">in</span></a> <span class=\"br0\">[</span><span class=\"st0\">'.'</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span>..<span class=\"st0\">'9'</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> constSign <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20in\"><span class=\"kw1\">in</span></a> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">')'</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> Op.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>.<span class=\"me1\">symbol</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>constSign<span class=\"br0\">)</span> <span class=\"br0\">{</span> captureConstant<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20switch\"><span class=\"kw1\">switch</span></a> <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> ~/\\s/:               <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> isConstChar:         constStr <span class=\"sy0\">+=</span> c<span class=\"sy0\">;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> Op.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>.<span class=\"me1\">symbol</span>: tokens <span class=\"sy0\">&lt;&lt;</span> Op.<span class=\"me1\">fromSymbol</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"br0\">[</span><span class=\"st0\">'('</span>,<span class=\"st0\">')'</span><span class=\"br0\">]</span>:           tokens <span class=\"sy0\">&lt;&lt;</span> c<span class=\"sy0\">;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20default\"><span class=\"kw2\">default</span></a>:                  fail <span class=\"st0\">\"Invalid character '${c}' at position ${i+1}\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    captureConstant<span class=\"br0\">(</span>expr.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    tokens<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> groupByParens<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> tokens, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> depth<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> deepness <span class=\"sy0\">=</span> depth<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> tokenGroups <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20for\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> tokens.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> token <span class=\"sy0\">=</span> tokens<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20switch\"><span class=\"kw1\">switch</span></a> <span class=\"br0\">(</span>token<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"st0\">'('</span>:<br/>                fail<span class=\"br0\">(</span><span class=\"st0\">\"'(' too close to end of expression\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> i<span class=\"sy0\">+</span><span class=\"nu0\">2</span> <span class=\"sy0\">&gt;</span> tokens.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> subGroup <span class=\"sy0\">=</span> groupByParens<span class=\"br0\">(</span>tokens<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>..<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, depth<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                tokenGroups <span class=\"sy0\">&lt;&lt;</span> subGroup<span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>                i <span class=\"sy0\">+=</span> subGroup<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"st0\">')'</span>:<br/>                fail<span class=\"br0\">(</span><span class=\"st0\">\"Unbalanced parens, found extra ')'\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> deepness <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>                tokenGroups <span class=\"sy0\">&lt;&lt;</span> i<br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> tokenGroups<br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20default\"><span class=\"kw2\">default</span></a>:<br/>                tokenGroups <span class=\"sy0\">&lt;&lt;</span> token<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    fail<span class=\"br0\">(</span><span class=\"st0\">\"Unbalanced parens, unclosed groupings at end of expression\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> deepness <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> n <span class=\"sy0\">=</span> tokenGroups.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    fail<span class=\"br0\">(</span><span class=\"st0\">\"The operand/operator sequence is wrong\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> n<span class=\"sy0\">%</span>2 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>n<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> i <span class=\"sy0\">=</span> it<br/>        fail<span class=\"br0\">(</span><span class=\"st0\">\"The operand/operator sequence is wrong\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span>i<span class=\"sy0\">%</span>2 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>tokenGroups<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20instanceof\"><span class=\"kw2\">instanceof</span></a> Op<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    tokenGroups<br/><span class=\"br0\">}</span><br/>\u00a0<br/>Expression parse<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> elements<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>elements.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> n <span class=\"sy0\">=</span> elements.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        fail <span class=\"br0\">(</span><span class=\"st0\">\"The operand/operator sequence is wrong\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> n<span class=\"sy0\">%</span>2 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> groupLoc <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>n<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20find\"><span class=\"kw5\">find</span></a> <span class=\"br0\">{</span> i <span class=\"sy0\">-&gt;</span> elements<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20instanceof\"><span class=\"kw2\">instanceof</span></a> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>groupLoc <span class=\"sy0\">!=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20null\"><span class=\"kw2\">null</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            elements<span class=\"br0\">[</span>groupLoc<span class=\"br0\">]</span> <span class=\"sy0\">=</span> parse<span class=\"br0\">(</span>elements<span class=\"br0\">[</span>groupLoc<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20continue\"><span class=\"kw2\">continue</span></a><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> opLoc <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>n<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20find\"><span class=\"kw5\">find</span></a> <span class=\"br0\">{</span> i <span class=\"sy0\">-&gt;</span> elements<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20instanceof\"><span class=\"kw2\">instanceof</span></a> Op <span class=\"sy0\">&amp;&amp;</span> elements<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">precedence</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span> \\<br/>                        <span class=\"sy0\">?</span>: <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>n<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20find\"><span class=\"kw5\">find</span></a> <span class=\"br0\">{</span> i <span class=\"sy0\">-&gt;</span> elements<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20instanceof\"><span class=\"kw2\">instanceof</span></a> Op <span class=\"sy0\">&amp;&amp;</span> elements<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">precedence</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>opLoc <span class=\"sy0\">!=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20null\"><span class=\"kw2\">null</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            fail <span class=\"br0\">(</span><span class=\"st0\">\"Operator out of sequence\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> opLoc<span class=\"sy0\">%</span>2 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> term <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Term<span class=\"br0\">(</span>left:elements<span class=\"br0\">[</span>opLoc<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, op:elements<span class=\"br0\">[</span>opLoc<span class=\"br0\">]</span>, right:elements<span class=\"br0\">[</span>opLoc<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            elements<span class=\"br0\">[</span><span class=\"br0\">(</span>opLoc<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>..<span class=\"br0\">(</span>opLoc<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>term<span class=\"br0\">]</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20continue\"><span class=\"kw2\">continue</span></a><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> elements<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20instanceof\"><span class=\"kw2\">instanceof</span></a> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> <span class=\"sy0\">?</span> parse<span class=\"br0\">(</span>elements<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0: elements<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Groovy", "loc": 144, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20enum\"><span class=\"kw2\">enum</span></a> Op <span class=\"br0\">{</span><br/>    ADD<span class=\"br0\">(</span><span class=\"st0\">'+'</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>,<br/>    SUBTRACT<span class=\"br0\">(</span><span class=\"st0\">'-'</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>,<br/>    MULTIPLY<span class=\"br0\">(</span><span class=\"st0\">'*'</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>    DIVIDE<span class=\"br0\">(</span><span class=\"st0\">'/'</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20static\"><span class=\"kw2\">static</span></a> <span class=\"br0\">{</span><br/>        ADD.<span class=\"me1\">operation</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> a, b <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">+</span> b <span class=\"br0\">}</span><br/>        SUBTRACT.<span class=\"me1\">operation</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> a, b <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">-</span> b <span class=\"br0\">}</span><br/>        MULTIPLY.<span class=\"me1\">operation</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> a, b <span class=\"sy0\">-&gt;</span> a <span class=\"sy0\">*</span> b <span class=\"br0\">}</span><br/>        DIVIDE.<span class=\"me1\">operation</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span> a, b <span class=\"sy0\">-&gt;</span> a / b <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> symbol<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final\"><span class=\"kw2\">final</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> precedence<br/>    Closure operation<br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20private\"><span class=\"kw2\">private</span></a> Op<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> symbol, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> precedence<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">symbol</span> <span class=\"sy0\">=</span> symbol<br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">precedence</span> <span class=\"sy0\">=</span> precedence<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> symbol <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20static\"><span class=\"kw2\">static</span></a> Op fromSymbol<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> symbol<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Op.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20find\"><span class=\"kw5\">find</span></a> <span class=\"br0\">{</span> it.<span class=\"me1\">symbol</span> <span class=\"sy0\">==</span> symbol <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20interface\"><span class=\"kw2\">interface</span></a> Expression <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> evaluate<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> Constant <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20implements\"><span class=\"kw2\">implements</span></a> Expression <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> value<br/>\u00a0<br/>    Constant <span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> value<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> value <span class=\"br0\">}</span><br/>\u00a0<br/>    Constant <span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20try\"><span class=\"kw2\">try</span></a> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> str <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=BigInteger&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigInteger</span></a> <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20catch\"><span class=\"kw2\">catch</span></a> <span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20this\"><span class=\"kw2\">this</span></a>.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> str <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as\"><span class=\"kw2\">as</span></a> <a href=\"http://www.google.de/search?as_q=BigDecimal&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BigDecimal</span></a> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> evaluate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> value <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"st0\">\"${value}\"</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> Term <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20implements\"><span class=\"kw2\">implements</span></a> Expression <span class=\"br0\">{</span><br/>    Op op<br/>    Expression left, right<br/>\u00a0<br/>    <a href=\"http://www.google.de/search?as_q=Number&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Number</span></a> evaluate<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> op.<span class=\"me1\">operation</span><span class=\"br0\">(</span>left.<span class=\"me1\">evaluate</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, right.<span class=\"me1\">evaluate</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"st0\">\"(${op} ${left} ${right})\"</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20void\"><span class=\"kw4\">void</span></a> fail<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> msg, Closure cond <span class=\"sy0\">=</span> <span class=\"br0\">{</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>cond<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20throw\"><span class=\"kw2\">throw</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=IllegalArgumentException&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Cannot parse expression: ${msg}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Expression parse<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> expr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> tokens <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20tokenize\"><span class=\"kw6\">tokenize</span></a><span class=\"br0\">(</span>expr<span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> elements <span class=\"sy0\">=</span> groupByParens<span class=\"br0\">(</span>tokens, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    parse<span class=\"br0\">(</span>elements<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20tokenize\"><span class=\"kw6\">tokenize</span></a><span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">String</span></a> expr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> tokens <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> constStr <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> captureConstant <span class=\"sy0\">=</span> <span class=\"br0\">{</span> i <span class=\"sy0\">-&gt;</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>constStr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20try\"><span class=\"kw2\">try</span></a> <span class=\"br0\">{</span> tokens <span class=\"sy0\">&lt;&lt;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Constant<span class=\"br0\">(</span>constStr<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20catch\"><span class=\"kw2\">catch</span></a> <span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=NumberFormatException&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">NumberFormatException</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span> fail <span class=\"st0\">\"Invalid constant '${constStr}' near position ${i}\"</span> <span class=\"br0\">}</span><br/>            constStr <span class=\"sy0\">=</span> <span class=\"st0\">''</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20for\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>expr.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> c <span class=\"sy0\">=</span> expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> constSign <span class=\"sy0\">=</span> c <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20in\"><span class=\"kw1\">in</span></a> <span class=\"br0\">[</span><span class=\"st0\">'+'</span>,<span class=\"st0\">'-'</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> constStr.<span class=\"me1\">empty</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>tokens.<span class=\"me1\">empty</span> <span class=\"sy0\">||</span> tokens<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"st0\">')'</span><span class=\"br0\">)</span> <br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> isConstChar <span class=\"sy0\">=</span> <span class=\"br0\">{</span> it <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20in\"><span class=\"kw1\">in</span></a> <span class=\"br0\">[</span><span class=\"st0\">'.'</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"st0\">'0'</span>..<span class=\"st0\">'9'</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> constSign <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>c <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20in\"><span class=\"kw1\">in</span></a> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">')'</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> Op.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>.<span class=\"me1\">symbol</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>constSign<span class=\"br0\">)</span> <span class=\"br0\">{</span> captureConstant<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20switch\"><span class=\"kw1\">switch</span></a> <span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> ~/\\s/:               <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> isConstChar:         constStr <span class=\"sy0\">+=</span> c<span class=\"sy0\">;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> Op.<span class=\"me1\">values</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>.<span class=\"me1\">symbol</span>: tokens <span class=\"sy0\">&lt;&lt;</span> Op.<span class=\"me1\">fromSymbol</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"br0\">[</span><span class=\"st0\">'('</span>,<span class=\"st0\">')'</span><span class=\"br0\">]</span>:           tokens <span class=\"sy0\">&lt;&lt;</span> c<span class=\"sy0\">;</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20default\"><span class=\"kw2\">default</span></a>:                  fail <span class=\"st0\">\"Invalid character '${c}' at position ${i+1}\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    captureConstant<span class=\"br0\">(</span>expr.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    tokens<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> groupByParens<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> tokens, <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> depth<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> deepness <span class=\"sy0\">=</span> depth<br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> tokenGroups <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20for\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> tokens.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> token <span class=\"sy0\">=</span> tokens<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20switch\"><span class=\"kw1\">switch</span></a> <span class=\"br0\">(</span>token<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"st0\">'('</span>:<br/>                fail<span class=\"br0\">(</span><span class=\"st0\">\"'(' too close to end of expression\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> i<span class=\"sy0\">+</span><span class=\"nu0\">2</span> <span class=\"sy0\">&gt;</span> tokens.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> subGroup <span class=\"sy0\">=</span> groupByParens<span class=\"br0\">(</span>tokens<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span>..<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, depth<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                tokenGroups <span class=\"sy0\">&lt;&lt;</span> subGroup<span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>                i <span class=\"sy0\">+=</span> subGroup<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break\"><span class=\"kw2\">break</span></a><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case\"><span class=\"kw1\">case</span></a> <span class=\"st0\">')'</span>:<br/>                fail<span class=\"br0\">(</span><span class=\"st0\">\"Unbalanced parens, found extra ')'\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> deepness <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>                tokenGroups <span class=\"sy0\">&lt;&lt;</span> i<br/>                <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> tokenGroups<br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20default\"><span class=\"kw2\">default</span></a>:<br/>                tokenGroups <span class=\"sy0\">&lt;&lt;</span> token<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    fail<span class=\"br0\">(</span><span class=\"st0\">\"Unbalanced parens, unclosed groupings at end of expression\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> deepness <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> n <span class=\"sy0\">=</span> tokenGroups.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    fail<span class=\"br0\">(</span><span class=\"st0\">\"The operand/operator sequence is wrong\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> n<span class=\"sy0\">%</span>2 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>n<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> i <span class=\"sy0\">=</span> it<br/>        fail<span class=\"br0\">(</span><span class=\"st0\">\"The operand/operator sequence is wrong\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span>i<span class=\"sy0\">%</span>2 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"br0\">(</span>tokenGroups<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20instanceof\"><span class=\"kw2\">instanceof</span></a> Op<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    tokenGroups<br/><span class=\"br0\">}</span><br/>\u00a0<br/>Expression parse<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> elements<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>elements.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> n <span class=\"sy0\">=</span> elements.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        fail <span class=\"br0\">(</span><span class=\"st0\">\"The operand/operator sequence is wrong\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> n<span class=\"sy0\">%</span>2 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> groupLoc <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>n<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20find\"><span class=\"kw5\">find</span></a> <span class=\"br0\">{</span> i <span class=\"sy0\">-&gt;</span> elements<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20instanceof\"><span class=\"kw2\">instanceof</span></a> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>groupLoc <span class=\"sy0\">!=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20null\"><span class=\"kw2\">null</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            elements<span class=\"br0\">[</span>groupLoc<span class=\"br0\">]</span> <span class=\"sy0\">=</span> parse<span class=\"br0\">(</span>elements<span class=\"br0\">[</span>groupLoc<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20continue\"><span class=\"kw2\">continue</span></a><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> opLoc <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>n<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20find\"><span class=\"kw5\">find</span></a> <span class=\"br0\">{</span> i <span class=\"sy0\">-&gt;</span> elements<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20instanceof\"><span class=\"kw2\">instanceof</span></a> Op <span class=\"sy0\">&amp;&amp;</span> elements<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">precedence</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span> \\<br/>                        <span class=\"sy0\">?</span>: <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>n<span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20find\"><span class=\"kw5\">find</span></a> <span class=\"br0\">{</span> i <span class=\"sy0\">-&gt;</span> elements<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20instanceof\"><span class=\"kw2\">instanceof</span></a> Op <span class=\"sy0\">&amp;&amp;</span> elements<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">precedence</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>opLoc <span class=\"sy0\">!=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20null\"><span class=\"kw2\">null</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            fail <span class=\"br0\">(</span><span class=\"st0\">\"Operator out of sequence\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> opLoc<span class=\"sy0\">%</span>2 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> term <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> Term<span class=\"br0\">(</span>left:elements<span class=\"br0\">[</span>opLoc<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, op:elements<span class=\"br0\">[</span>opLoc<span class=\"br0\">]</span>, right:elements<span class=\"br0\">[</span>opLoc<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            elements<span class=\"br0\">[</span><span class=\"br0\">(</span>opLoc<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>..<span class=\"br0\">(</span>opLoc<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>term<span class=\"br0\">]</span><br/>            <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20continue\"><span class=\"kw2\">continue</span></a><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return\"><span class=\"kw2\">return</span></a> elements<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20instanceof\"><span class=\"kw2\">instanceof</span></a> <a href=\"http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">List</span></a> <span class=\"sy0\">?</span> parse<span class=\"br0\">(</span>elements<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0: elements<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 47, "block": "<pre class=\"haskell highlighted_source\"><span class=\"coMULTI\">{-# LANGUAGE FlexibleContexts #-}</span><br/>\u00a0<br/><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Parsec<br/><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Parsec<span class=\"sy0\">.</span>Expr<br/><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Parsec<span class=\"sy0\">.</span>Combinator<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Functor\"><span class=\"kw4\">Functor</span></a><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Function <span class=\"br0\">(</span>on<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">data</span> Exp<br/>  <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>  <span class=\"sy0\">|</span> Add Exp<br/>        Exp<br/>  <span class=\"sy0\">|</span> Sub Exp<br/>        Exp<br/>  <span class=\"sy0\">|</span> Mul Exp<br/>        Exp<br/>  <span class=\"sy0\">|</span> Div Exp<br/>        Exp<br/>\u00a0<br/>expr<br/>  <span class=\"sy0\">::</span> Stream s m <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><br/>  <span class=\"sy0\">=&gt;</span> ParsecT s u m Exp<br/>expr <span class=\"sy0\">=</span> buildExpressionParser table factor<br/>  <span class=\"kw1\">where</span><br/>    table <span class=\"sy0\">=</span><br/>      <span class=\"br0\">[</span> <span class=\"br0\">[</span>op <span class=\"st0\">\"*\"</span> Mul AssocLeft<span class=\"sy0\">,</span> op <span class=\"st0\">\"/\"</span> Div AssocLeft<span class=\"br0\">]</span><br/>      <span class=\"sy0\">,</span> <span class=\"br0\">[</span>op <span class=\"st0\">\"+\"</span> Add AssocLeft<span class=\"sy0\">,</span> op <span class=\"st0\">\"-\"</span> Sub AssocLeft<span class=\"br0\">]</span><br/>      <span class=\"br0\">]</span><br/>    op s f <span class=\"sy0\">=</span> Infix <span class=\"br0\">(</span>f <span class=\"sy0\">&lt;$</span> string s<span class=\"br0\">)</span><br/>    factor <span class=\"sy0\">=</span> <span class=\"br0\">(</span>between `on` char<span class=\"br0\">)</span> <span class=\"st0\">'('</span> <span class=\"st0\">')'</span> expr <span class=\"sy0\">&lt;|&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> <span class=\"sy0\">&lt;$&gt;</span> many1 digit<span class=\"br0\">)</span><br/>\u00a0<br/>eval<br/>  <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<br/>  <span class=\"sy0\">=&gt;</span> Exp <span class=\"sy0\">-&gt;</span> a<br/>eval <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Num\"><span class=\"kw4\">Num</span></a> x<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> x<br/>eval <span class=\"br0\">(</span>Add a b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> eval a <span class=\"sy0\">+</span> eval b<br/>eval <span class=\"br0\">(</span>Sub a b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> eval a <span class=\"sy0\">-</span> eval b<br/>eval <span class=\"br0\">(</span>Mul a b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> eval a <span class=\"sy0\">*</span> eval b<br/>eval <span class=\"br0\">(</span>Div a b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> eval a `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` eval b<br/>\u00a0<br/>solution<br/>  <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integral\"><span class=\"kw4\">Integral</span></a> a<br/>  <span class=\"sy0\">=&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> a<br/>solution <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:either\"><span class=\"kw3\">either</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:const\"><span class=\"kw3\">const</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a> <span class=\"st0\">\"Did not parse\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> eval <span class=\"sy0\">.</span> parse expr <span class=\"st0\">\"\"</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print\"><span class=\"kw3\">print</span></a> <span class=\"sy0\">$</span> solution <span class=\"st0\">\"(1+3)*7\"</span></pre>"}, {"lang": "Icon and Unicon", "loc": 101, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>                                                <span class=\"co1\">#: simple arithmetical parser / evaluator</span><br/>   <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Usage: Input expression = Abstract Syntax Tree = Value, ^Z to end.\"</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">repeat</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\"Input expression\u00a0: \"</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span>line <span class=\"sy1\">:=</span> <span class=\"kw4\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">break</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw4\">map</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"sy1\">?</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span>x <span class=\"sy1\">:=</span> E<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"kw4\">pos</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\" = \"</span><span class=\"sy1\">,</span> showAST<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" = \"</span><span class=\"sy1\">,</span> evalAST<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span><br/>         <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\" rejected\"</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> evalAST<span class=\"br0\">(</span>X<span class=\"br0\">)</span>                                            <span class=\"co1\">#: return the evaluated AST</span><br/>   <span class=\"kw2\">local</span> x<br/>\u00a0<br/>   <span class=\"kw1\">if</span> <span class=\"kw4\">type</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"st0\">\"list\"</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>      x <span class=\"sy1\">:=</span> evalAST<span class=\"br0\">(</span><span class=\"kw4\">get</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">while</span> x <span class=\"sy1\">:=</span> <span class=\"kw4\">get</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"br0\">(</span>x<span class=\"sy1\">,</span> evalAST<span class=\"br0\">(</span><span class=\"kw4\">get</span><span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw4\">stop</span><span class=\"br0\">(</span><span class=\"st0\">\"Malformed AST.\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"sy1\">\\</span>x <span class=\"sy1\">|</span> X<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> showAST<span class=\"br0\">(</span>X<span class=\"br0\">)</span>                                            <span class=\"co1\">#: return a string representing the AST</span><br/>   <span class=\"kw2\">local</span> x<span class=\"sy1\">,</span>s<br/>\u00a0<br/>   s <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><br/>   <span class=\"kw1\">every</span> x <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span>X <span class=\"kw1\">do</span><br/>      s <span class=\"sy1\">||:=</span> <span class=\"kw1\">if</span> <span class=\"kw4\">type</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"st0\">\"list\"</span> <span class=\"kw1\">then</span> <span class=\"st0\">\"(\"</span> <span class=\"sy1\">||</span> showAST<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy1\">||</span> <span class=\"st0\">\")\"</span> <span class=\"kw1\">else</span> x<br/>   <span class=\"kw1\">return</span> s<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">########</span><br/><span class=\"co1\"># When you're writing a big parser, a few utility recognisers are very useful</span><br/><span class=\"co1\">#</span><br/><span class=\"kw1\">procedure</span> ws<span class=\"br0\">(</span><span class=\"br0\">)</span>    <span class=\"co1\"># skip optional whitespace</span><br/>   <span class=\"kw1\">suspend</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span><span class=\"st0\">' <span class=\"es0\">\\t</span>'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> digits<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">suspend</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">digits</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> radixNum<span class=\"br0\">(</span>r<span class=\"br0\">)</span>    <span class=\"co1\"># r sets the radix</span><br/>   <span class=\"kw2\">static</span> chars<br/>   <span class=\"kw1\">initial</span> chars <span class=\"sy1\">:=</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">digits</span> <span class=\"sy1\">||</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">lcase</span><br/>   <span class=\"kw1\">suspend</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">many</span><span class=\"br0\">(</span>chars<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy1\">+:</span> r<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/><span class=\"co1\">########</span><br/>\u00a0<br/><span class=\"kw2\">global</span> token<br/><span class=\"kw1\">record</span> HansonsDevice<span class=\"br0\">(</span>precedence<span class=\"sy1\">,</span>associativity<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> opinfo<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw2\">static</span> O<br/>   <span class=\"kw1\">initial</span> <span class=\"br0\">{</span><br/>      O <span class=\"sy1\">:=</span> HansonsDevice<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">null</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                         <span class=\"co1\"># parsing table</span><br/>      <span class=\"kw4\">put</span><span class=\"br0\">(</span>O<span class=\"sy1\">.</span><span class=\"me1\">precedence</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"+\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"-\"</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"*\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"/\"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"%\"</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"^\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>        <span class=\"co1\"># Lowest to Highest precedence</span><br/>      <span class=\"kw1\">every</span> O<span class=\"sy1\">.</span><span class=\"me1\">associativity</span><span class=\"br0\">[</span><span class=\"sy1\">!!</span>O<span class=\"sy1\">.</span><span class=\"me1\">precedence</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span>                   <span class=\"co1\"># default to 1 for LEFT associativity</span><br/>      O<span class=\"sy1\">.</span><span class=\"me1\">associativity</span><span class=\"br0\">[</span><span class=\"st0\">\"^\"</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span>                                    <span class=\"co1\"># RIGHT associativity</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> O<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> E<span class=\"br0\">(</span>k<span class=\"br0\">)</span>                                                  <span class=\"co1\">#: Expression</span><br/>   <span class=\"kw2\">local</span> lex<span class=\"sy1\">,</span> pL<br/>   <span class=\"kw2\">static</span> opT<br/>   <span class=\"kw1\">initial</span> opT <span class=\"sy1\">:=</span> opinfo<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"sy1\">/</span>k <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span><br/>   lex <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>   <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span>pL <span class=\"sy1\">:=</span> opT<span class=\"sy1\">.</span><span class=\"me1\">precedence</span><span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span>                        <span class=\"co1\"># this op at this level?</span><br/>      <span class=\"kw4\">put</span><span class=\"br0\">(</span>lex<span class=\"sy1\">,</span> F<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">put</span><span class=\"br0\">(</span>lex<span class=\"sy1\">,</span> E<span class=\"br0\">(</span>k <span class=\"sy1\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">while</span> ws<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>lex<span class=\"sy1\">,</span> token <span class=\"sy1\">:=</span> <span class=\"sy1\">=!</span>pL<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>         <span class=\"kw4\">put</span><span class=\"br0\">(</span>lex<span class=\"sy1\">,</span> E<span class=\"br0\">(</span>k <span class=\"sy1\">+</span> opT<span class=\"sy1\">.</span><span class=\"me1\">associativity</span><span class=\"br0\">[</span>token<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">suspend</span> <span class=\"kw1\">if</span> <span class=\"sy1\">*</span>lex <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> lex<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">else</span> lex                     <span class=\"co1\"># strip useless []</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> F<span class=\"br0\">(</span><span class=\"br0\">)</span>                                                   <span class=\"co1\">#: Factor</span><br/>   <span class=\"kw1\">suspend</span> ws<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"br0\">(</span>    <span class=\"co1\"># skip optional whitespace, and ...</span><br/>      <span class=\"br0\">(</span><span class=\"sy1\">=</span><span class=\"st0\">\"+\"</span> <span class=\"sy1\">&amp;</span> F<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>              <span class=\"sy1\">|</span>          <span class=\"co1\"># unary + and a Factor, or ...</span><br/>      <span class=\"br0\">(</span><span class=\"sy1\">=</span><span class=\"st0\">\"-\"</span> <span class=\"sy1\">||</span> V<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>             <span class=\"sy1\">|</span>          <span class=\"co1\"># unary - and a Value, or ...</span><br/>      <span class=\"br0\">(</span><span class=\"sy1\">=</span><span class=\"st0\">\"-\"</span> <span class=\"sy1\">&amp;</span> <span class=\"br0\">[</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"st0\">\"*\"</span><span class=\"sy1\">,</span> F<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span>   <span class=\"sy1\">|</span>          <span class=\"co1\"># unary - and a Factor, or ...</span><br/>     <span class=\"nu0\">2</span><span class=\"br0\">(</span><span class=\"sy1\">=</span><span class=\"st0\">\"(\"</span><span class=\"sy1\">,</span> E<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> ws<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"sy1\">=</span><span class=\"st0\">\")\"</span><span class=\"br0\">)</span>   <span class=\"sy1\">|</span>          <span class=\"co1\"># parenthesized subexpression, or ...</span><br/>       V<span class=\"br0\">(</span><span class=\"br0\">)</span>                                 <span class=\"co1\"># just a value</span><br/>   <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> V<span class=\"br0\">(</span><span class=\"br0\">)</span>                                                   <span class=\"co1\">#: Value</span><br/>   <span class=\"kw2\">local</span> r<br/>   <span class=\"kw1\">suspend</span> ws<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"kw4\">numeric</span><span class=\"br0\">(</span>    <span class=\"co1\"># skip optional whitespace, and ...</span><br/>       <span class=\"sy1\">=</span><span class=\"br0\">(</span>r <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">36</span><span class=\"br0\">)</span> <span class=\"sy1\">||</span> <span class=\"sy1\">=</span><span class=\"st0\">\"r\"</span> <span class=\"sy1\">||</span> radixNum<span class=\"br0\">(</span>r<span class=\"br0\">)</span>             <span class=\"sy1\">|</span>     <span class=\"co1\"># N-based number, or ...</span><br/>       digits<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">||</span> <span class=\"br0\">(</span><span class=\"sy1\">=</span><span class=\"st0\">\".\"</span> <span class=\"sy1\">||</span> digits<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">||</span> exponent<span class=\"br0\">(</span><span class=\"br0\">)</span>        <span class=\"co1\"># plain number with optional fraction</span><br/>   <span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> exponent<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">suspend</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">any</span><span class=\"br0\">(</span><span class=\"st0\">'eE'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">||</span> <span class=\"sy1\">=</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"-\"</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">||</span> digits<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 66, "block": "<pre class=\"j highlighted_source\">parse=:parse_parser_<br/>eval=:monad define<br/>  <span class=\"st_h\">'gerund structure'</span>=:<span class=\"kw2\">y</span><br/>  <a class=\"__cf_email__\" data-cfemail=\"6e090b1c1b000a2e401d1a1c1b0d1a1b1c0b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>coclass <span class=\"st_h\">'parser'</span> <br/>classify=: <span class=\"st_h\">'$()*/+-'</span>&amp;<span class=\"sy0\">(((</span>&gt;:@#@[ # 2:<span class=\"sy0\">)</span> #: <span class=\"nu0\">2</span> ^ i.<span class=\"sy0\">)</span>&amp;;:<span class=\"sy0\">)</span><br/>\u00a0<br/>rules=: <span class=\"st_h\">''</span><br/>patterns=: ,\"<span class=\"nu0\">0</span> assert <span class=\"nu0\">1</span><br/>\u00a0<br/>addrule=: dyad define<br/>   rules=: rules,;:<span class=\"kw2\">x</span><br/>   patterns=: patterns,+./@classify\"<span class=\"nu0\">1</span> <span class=\"kw2\">y</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/><span class=\"st_h\">'Term'</span>   addrule <span class=\"st_h\">'$()'</span>,   <span class=\"st_h\">'0'</span>,     <span class=\"st_h\">'+-'</span>,: <span class=\"st_h\">'0'</span><br/><span class=\"st_h\">'Factor'</span> addrule <span class=\"st_h\">'$()+-'</span>, <span class=\"st_h\">'0'</span>,     <span class=\"st_h\">'*/'</span>,: <span class=\"st_h\">'0'</span><br/><span class=\"st_h\">'Parens'</span> addrule <span class=\"st_h\">'('</span>,    <span class=\"st_h\">'*/+-0'</span>, <span class=\"st_h\">')'</span>,:  <span class=\"st_h\">')*/+-0$'</span><br/>rules=: rules,;:<span class=\"st_h\">'Move'</span><br/>\u00a0<br/>buildTree=: monad define<br/>  words=:\u00a0;:<span class=\"st_h\">'$'</span>,<span class=\"kw2\">y</span><br/>  queue=: classify <span class=\"st_h\">'$'</span>,<span class=\"kw2\">y</span><br/>  stack=: classify <span class=\"st_h\">'$$$$'</span><br/>  tokens=: ]&amp;.&gt;i.#words<br/>  tree=: <span class=\"st_h\">''</span><br/>  <span class=\"kw1\">while.</span><span class=\"sy0\">(</span>#queue<span class=\"sy0\">)</span>+.<span class=\"nu0\">6</span>&lt;#stack <span class=\"kw1\">do.</span><br/>    rule=: rules {~ i.&amp;<span class=\"nu0\">1</span> patterns <span class=\"sy0\">(</span>*./\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span>@:<span class=\"sy0\">(</span>+./\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span> .<span class=\"sy0\">(</span>*.\"<span class=\"nu0\">1</span><span class=\"sy0\">)</span><span class=\"nu0\">4</span>{.stack<br/>    rule`:<span class=\"nu0\">6</span><span class=\"st_h\">''</span><br/>  <span class=\"kw1\">end.</span><br/>  <span class=\"st_h\">'syntax'</span> assert <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> -: {:\"<span class=\"nu0\">1</span> stack<br/>  gerund=: literal&amp;.&gt; <span class=\"sy0\">(</span>&lt;,<span class=\"st_h\">'%'</span><span class=\"sy0\">)</span> <span class=\"sy0\">(</span>I. words=&lt;,<span class=\"st_h\">'/'</span><span class=\"sy0\">)</span>} words<br/>  gerund;<span class=\"nu0\">1</span>{tree<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>literal=:monad define\u00a0::]<br/>  \".<span class=\"st_h\">'t=.'</span>,<span class=\"kw2\">y</span><br/>  <span class=\"nu0\">5</span>!:<span class=\"nu0\">1</span>&lt;<span class=\"st_h\">'t'</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>Term=: Factor=: monad define<br/>  stack=: <span class=\"sy0\">(</span>{.stack<span class=\"sy0\">)</span>,<span class=\"sy0\">(</span>classify <span class=\"st_h\">'0'</span><span class=\"sy0\">)</span>,<span class=\"nu0\">4</span>}.stack<br/>  tree=: <span class=\"sy0\">(</span>{.tree<span class=\"sy0\">)</span>,<span class=\"sy0\">(</span>&lt;<span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span>{tree<span class=\"sy0\">)</span>,<span class=\"nu0\">4</span>}.tree<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>Parens=: monad define<br/>  stack=: <span class=\"sy0\">(</span><span class=\"nu0\">1</span>{stack<span class=\"sy0\">)</span>,<span class=\"nu0\">3</span>}.stack<br/>  tree=: <span class=\"sy0\">(</span><span class=\"nu0\">1</span>{tree<span class=\"sy0\">)</span>,<span class=\"nu0\">3</span>}.tree<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>Move=: monad define<br/>  <span class=\"st_h\">'syntax'</span> assert <span class=\"nu0\">0</span>&lt;#queue<br/>  stack=: <span class=\"sy0\">(</span>{:queue<span class=\"sy0\">)</span>,stack<br/>  queue=: }:queue<br/>  tree=: <span class=\"sy0\">(</span>{:tokens<span class=\"sy0\">)</span>,tree<br/>  tokens=: }:tokens<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>parse=:monad define<br/>  tmp=: conew <span class=\"st_h\">'parser'</span><br/>  r=: buildTree__tmp <span class=\"kw2\">y</span><br/>  coerase tmp<br/>  r<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 165, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Stack</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> ArithmeticEvaluation <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">interface</span> Expression <span class=\"br0\">{</span><br/>        BigRational eval<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">enum</span> Parentheses <span class=\"br0\">{</span>LEFT<span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">enum</span> BinaryOperator <span class=\"br0\">{</span><br/>        ADD<span class=\"br0\">(</span><span class=\"st0\">'+'</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>        SUB<span class=\"br0\">(</span><span class=\"st0\">'-'</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>,<br/>        MUL<span class=\"br0\">(</span><span class=\"st0\">'*'</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>,<br/>        DIV<span class=\"br0\">(</span><span class=\"st0\">'/'</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> <span class=\"kw4\">char</span> symbol<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> precedence<span class=\"sy0\">;</span><br/>\u00a0<br/>        BinaryOperator<span class=\"br0\">(</span><span class=\"kw4\">char</span> symbol, <span class=\"kw4\">int</span> precedence<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">symbol</span> <span class=\"sy0\">=</span> symbol<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">precedence</span> <span class=\"sy0\">=</span> precedence<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> BigRational eval<span class=\"br0\">(</span>BigRational leftValue, BigRational rightValue<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">switch</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">case</span> ADD<span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">return</span> leftValue.<span class=\"me1\">add</span><span class=\"br0\">(</span>rightValue<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> SUB<span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">return</span> leftValue.<span class=\"me1\">subtract</span><span class=\"br0\">(</span>rightValue<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> MUL<span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">return</span> leftValue.<span class=\"me1\">multiply</span><span class=\"br0\">(</span>rightValue<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">case</span> DIV<span class=\"sy0\">:</span><br/>                    <span class=\"kw1\">return</span> leftValue.<span class=\"me1\">divide</span><span class=\"br0\">(</span>rightValue<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalstateexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalStateException</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> BinaryOperator forSymbol<span class=\"br0\">(</span><span class=\"kw4\">char</span> symbol<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>BinaryOperator operator <span class=\"sy0\">:</span> values<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>operator.<span class=\"me1\">symbol</span> <span class=\"sy0\">==</span> symbol<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">return</span> operator<span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>symbol<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anumber+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Number</span></a> <span class=\"kw1\">implements</span> Expression <span class=\"br0\">{</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">final</span> BigRational number<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anumber+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Number</span></a><span class=\"br0\">(</span>BigRational number<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">number</span> <span class=\"sy0\">=</span> number<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @Override<br/>        <span class=\"kw1\">public</span> BigRational eval<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> number<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @Override<br/>        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> number.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> BinaryExpression <span class=\"kw1\">implements</span> Expression <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> Expression leftOperand<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> BinaryOperator operator<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw1\">final</span> Expression rightOperand<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> BinaryExpression<span class=\"br0\">(</span>Expression leftOperand, BinaryOperator operator, Expression rightOperand<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">leftOperand</span> <span class=\"sy0\">=</span> leftOperand<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">operator</span> <span class=\"sy0\">=</span> operator<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">rightOperand</span> <span class=\"sy0\">=</span> rightOperand<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @Override<br/>        <span class=\"kw1\">public</span> BigRational eval<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            BigRational leftValue <span class=\"sy0\">=</span> leftOperand.<span class=\"me1\">eval</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            BigRational rightValue <span class=\"sy0\">=</span> rightOperand.<span class=\"me1\">eval</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> operator.<span class=\"me1\">eval</span><span class=\"br0\">(</span>leftValue, rightValue<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @Override<br/>        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"(\"</span> <span class=\"sy0\">+</span> leftOperand <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> operator.<span class=\"me1\">symbol</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> rightOperand <span class=\"sy0\">+</span> <span class=\"st0\">\")\"</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> createNewOperand<span class=\"br0\">(</span>BinaryOperator operator, Stack<span class=\"sy0\">&lt;</span>Expression<span class=\"sy0\">&gt;</span> operands<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        Expression rightOperand <span class=\"sy0\">=</span> operands.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Expression leftOperand <span class=\"sy0\">=</span> operands.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        operands.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> BinaryExpression<span class=\"br0\">(</span>leftOperand, operator, rightOperand<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> Expression parse<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> input<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> curIndex <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">boolean</span> afterOperand <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        Stack<span class=\"sy0\">&lt;</span>Expression<span class=\"sy0\">&gt;</span> operands <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Stack<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Stack<span class=\"sy0\">&lt;</span>Object<span class=\"sy0\">&gt;</span> operators <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> Stack<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>curIndex <span class=\"sy0\">&lt;</span> input.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> startIndex <span class=\"sy0\">=</span> curIndex<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">char</span> c <span class=\"sy0\">=</span> input.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>curIndex<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acharacter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Character</span></a>.<span class=\"me1\">isWhitespace</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>afterOperand<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"st0\">')'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a> operator<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>operators.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>operator <span class=\"sy0\">=</span> operators.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> Parentheses.<span class=\"me1\">LEFT</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        createNewOperand<span class=\"br0\">(</span><span class=\"br0\">(</span>BinaryOperator<span class=\"br0\">)</span> operator, operands<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                afterOperand <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>                BinaryOperator operator <span class=\"sy0\">=</span> BinaryOperator.<span class=\"me1\">forSymbol</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>operators.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>operators.<span class=\"me1\">peek</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> Parentheses.<span class=\"me1\">LEFT</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>BinaryOperator<span class=\"br0\">)</span> operators.<span class=\"me1\">peek</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">precedence</span> <span class=\"sy0\">&gt;=</span> operator.<span class=\"me1\">precedence</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    createNewOperand<span class=\"br0\">(</span><span class=\"br0\">(</span>BinaryOperator<span class=\"br0\">)</span> operators.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, operands<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                operators.<span class=\"me1\">push</span><span class=\"br0\">(</span>operator<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"st0\">'('</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                operators.<span class=\"me1\">push</span><span class=\"br0\">(</span>Parentheses.<span class=\"me1\">LEFT</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            afterOperand <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>curIndex <span class=\"sy0\">&lt;</span> input.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                c <span class=\"sy0\">=</span> input.<span class=\"me1\">charAt</span><span class=\"br0\">(</span>curIndex<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"sy0\">&lt;</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>c <span class=\"sy0\">&gt;</span> <span class=\"st0\">'9'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>c <span class=\"sy0\">!=</span> <span class=\"st0\">'.'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                curIndex<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>            operands.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Anumber+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Number</span></a><span class=\"br0\">(</span>BigRational.<span class=\"me1\">valueOf</span><span class=\"br0\">(</span>input.<span class=\"me1\">substring</span><span class=\"br0\">(</span>startIndex, curIndex<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>operators.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aobject+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Object</span></a> operator <span class=\"sy0\">=</span> operators.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>operator <span class=\"sy0\">==</span> Parentheses.<span class=\"me1\">LEFT</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            createNewOperand<span class=\"br0\">(</span><span class=\"br0\">(</span>BinaryOperator<span class=\"br0\">)</span> operator, operands<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        Expression expression <span class=\"sy0\">=</span> operands.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>operands.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> expression<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> testExpressions <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>                <span class=\"st0\">\"2+3\"</span>,<br/>                <span class=\"st0\">\"2+3/4\"</span>,<br/>                <span class=\"st0\">\"2*3-4\"</span>,<br/>                <span class=\"st0\">\"2*(3+4)+5/6\"</span>,<br/>                <span class=\"st0\">\"2 * (3 + (4 * 5 + (6 * 7) * 8) - 9) * 10\"</span>,<br/>                <span class=\"st0\">\"2*-3--4+-.25\"</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> testExpression <span class=\"sy0\">:</span> testExpressions<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Expression expression <span class=\"sy0\">=</span> parse<span class=\"br0\">(</span>testExpression<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Input: <span class=\"es0\">\\\"</span>%s<span class=\"es0\">\\\"</span>, AST: <span class=\"es0\">\\\"</span>%s<span class=\"es0\">\\\"</span>, value=%s%n\"</span>, testExpression, expression, expression.<span class=\"me1\">eval</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 55, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> evalArithmeticExp<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  s <span class=\"sy0\">=</span> s.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/\\s/g</span><span class=\"sy0\">,</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/^\\+/</span><span class=\"sy0\">,</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> rePara <span class=\"sy0\">=</span> <span class=\"co2\">/\\([^\\(\\)]*\\)/</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">var</span> exp <span class=\"sy0\">=</span> s.<span class=\"me1\">match</span><span class=\"br0\">(</span>rePara<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  while <span class=\"br0\">(</span>exp <span class=\"sy0\">=</span> s.<span class=\"me1\">match</span><span class=\"br0\">(</span>rePara<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    s <span class=\"sy0\">=</span> s.<span class=\"me1\">replace</span><span class=\"br0\">(</span>exp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> evalExp<span class=\"br0\">(</span>exp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> evalExp<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> evalExp<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    s <span class=\"sy0\">=</span> s.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/[\\(\\)]/g</span><span class=\"sy0\">,</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> reMD <span class=\"sy0\">=</span> <span class=\"co2\">/\\d+\\.?\\d*\\s*[\\*\\/]\\s*[+-]?\\d+\\.?\\d*/</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> reM <span class=\"sy0\">=</span> <span class=\"co2\">/\\*/</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> reAS <span class=\"sy0\">=</span> <span class=\"co2\">/-?\\d+\\.?\\d*\\s*[\\+-]\\s*[+-]?\\d+\\.?\\d*/</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> reA  <span class=\"sy0\">=</span> <span class=\"co2\">/\\d\\+/</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> exp<span class=\"sy0\">;</span><br/>\u00a0<br/>    while <span class=\"br0\">(</span>exp <span class=\"sy0\">=</span> s.<span class=\"me1\">match</span><span class=\"br0\">(</span>reMD<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      s <span class=\"sy0\">=</span> exp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">match</span><span class=\"br0\">(</span>reM<span class=\"br0\">)</span><span class=\"sy0\">?</span> s.<span class=\"me1\">replace</span><span class=\"br0\">(</span>exp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> multiply<span class=\"br0\">(</span>exp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> s.<span class=\"me1\">replace</span><span class=\"br0\">(</span>exp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> divide<span class=\"br0\">(</span>exp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    while <span class=\"br0\">(</span>exp <span class=\"sy0\">=</span> s.<span class=\"me1\">match</span><span class=\"br0\">(</span>reAS<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      s <span class=\"sy0\">=</span> exp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">match</span><span class=\"br0\">(</span>reA<span class=\"br0\">)</span><span class=\"sy0\">?</span> s.<span class=\"me1\">replace</span><span class=\"br0\">(</span>exp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> add<span class=\"br0\">(</span>exp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> s.<span class=\"me1\">replace</span><span class=\"br0\">(</span>exp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> subtract<span class=\"br0\">(</span>exp<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"st0\">''</span> <span class=\"sy0\">+</span> s<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> multiply<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      b <span class=\"sy0\">=</span> s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'*'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> divide<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      b <span class=\"sy0\">=</span> s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'/'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> add<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      s <span class=\"sy0\">=</span> s.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/^\\+/</span><span class=\"sy0\">,</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/\\++/</span><span class=\"sy0\">,</span><span class=\"st0\">'+'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      b <span class=\"sy0\">=</span> s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw4\">Number</span><span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw4\">Number</span><span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> subtract<span class=\"br0\">(</span>s<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      s <span class=\"sy0\">=</span> s.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/\\+-|-\\+/g</span><span class=\"sy0\">,</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s.<span class=\"me1\">match</span><span class=\"br0\">(</span><span class=\"co2\">/--/</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> add<span class=\"br0\">(</span>s.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/--/</span><span class=\"sy0\">,</span><span class=\"st0\">'+'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>      b <span class=\"sy0\">=</span> s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">return</span> b.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"sy0\">?</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">*</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> b<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">:</span> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 41, "block": "<pre class=\"text highlighted_source\">julia&gt; expr=\"2 * (3 -1) + 2 * 5\"<br/>\"2 * (3 -1) + 2 * 5\"<br/>\u00a0<br/>julia&gt; parsed = parse(expr) #Julia provides low-level access to language parser for AST/Expr creation<br/>:(+(*(2,-(3,1)),*(2,5)))<br/>\u00a0<br/>julia&gt; t = typeof(parsed)<br/>Expr<br/>\u00a0<br/>julia&gt; names(t) #shows type fields<br/>(:head,:args,:typ)<br/>\u00a0<br/>julia&gt; parsed.args #Inspect our 'Expr' type innards<br/>3-element Any Array:<br/>\u00a0:+            <br/>\u00a0:(*(2,-(3,1)))<br/>\u00a0:(*(2,5))     <br/>\u00a0<br/>julia&gt; typeof(parsed.args[2]) #'Expr' types can nest<br/>Expr<br/>\u00a0<br/>julia&gt; parsed.args[2].args<br/>3-element Any Array:<br/> \u00a0:*       <br/> 2         <br/> \u00a0:(-(3,1))<br/>\u00a0<br/>julia&gt; parsed.args[2].args[3].args #Will nest until lowest level of AST<br/>3-element Any Array:<br/> \u00a0:-<br/> 3  <br/> 1  <br/>\u00a0<br/>julia&gt; eval(parsed)<br/>14<br/>\u00a0<br/>julia&gt; eval(parse(\"1 - 5 * 2 / 20 + 1\"))<br/>1.5<br/>\u00a0<br/>julia&gt; eval(parse(\"2 * (3 + ((5) / (7 - 11)))\"))<br/>3.5</pre>"}, {"lang": "Kotlin", "loc": 86, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.2.10</span><br/>\u00a0<br/><span class=\"coMULTI\">/* if string is empty, returns zero */</span><br/>fun String.<span class=\"me1\">toDoubleOrZero</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a>.<span class=\"me1\">toDoubleOrNull</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">?:</span> <span class=\"nu0\">0.0</span><br/>\u00a0<br/>fun multiply<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'*'</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it.<span class=\"me1\">toDoubleOrZero</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun divide<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> s.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'/'</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it.<span class=\"me1\">toDoubleOrZero</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> / b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun add<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> t <span class=\"sy0\">=</span> s.<span class=\"me1\">replace</span><span class=\"br0\">(</span>Regex<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"^<span class=\"es0\">\\+</span>\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span>Regex<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"<span class=\"es0\">\\+</span>+\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>, <span class=\"st0\">\"+\"</span><span class=\"br0\">)</span>     <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> t.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'+'</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it.<span class=\"me1\">toDoubleOrZero</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> + b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun subtract<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> t <span class=\"sy0\">=</span> s.<span class=\"me1\">replace</span><span class=\"br0\">(</span>Regex<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"(<span class=\"es0\">\\+</span>-|-<span class=\"es0\">\\+</span>)\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>, <span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"st0\">\"--\"</span> in t<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> add<span class=\"br0\">(</span>t.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"--\"</span>, <span class=\"st0\">\"+\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> b <span class=\"sy0\">=</span> t.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it.<span class=\"me1\">toDoubleOrZero</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>b.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> -b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> - b<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> b<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> - b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun evalExp<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> t <span class=\"sy0\">=</span> s.<span class=\"me1\">replace</span><span class=\"br0\">(</span>Regex<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"[()]\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> reMD <span class=\"sy0\">=</span> Regex<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"<span class=\"es0\">\\d</span>+<span class=\"es0\">\\.</span>?<span class=\"es0\">\\d</span>*<span class=\"es0\">\\s</span>*[*/]<span class=\"es0\">\\s</span>*[+-]?<span class=\"es0\">\\d</span>+<span class=\"es0\">\\.</span>?<span class=\"es0\">\\d</span>*\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> reM  <span class=\"sy0\">=</span> Regex<span class=\"br0\">(</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"<span class=\"es0\">\\*</span>\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> reAS <span class=\"sy0\">=</span> Regex<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"-?<span class=\"es0\">\\d</span>+<span class=\"es0\">\\.</span>?<span class=\"es0\">\\d</span>*<span class=\"es0\">\\s</span>*[+-]<span class=\"es0\">\\s</span>*[+-]?<span class=\"es0\">\\d</span>+<span class=\"es0\">\\.</span>?<span class=\"es0\">\\d</span>*\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> reA  <span class=\"sy0\">=</span> Regex<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"<span class=\"es0\">\\d</span><span class=\"es0\">\\+</span>\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"sy0\">=</span> reMD.<span class=\"me1\">find</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> break<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> exp <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a>.<span class=\"me1\">value</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> match2 <span class=\"sy0\">=</span> reM.<span class=\"me1\">find</span><span class=\"br0\">(</span>exp<span class=\"br0\">)</span><br/>        t <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>match2 <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>                t.<span class=\"me1\">replace</span><span class=\"br0\">(</span>exp, multiply<span class=\"br0\">(</span>exp<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>                t.<span class=\"me1\">replace</span><span class=\"br0\">(</span>exp, divide<span class=\"br0\">(</span>exp<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"sy0\">=</span> reAS.<span class=\"me1\">find</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> break<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> exp <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a>.<span class=\"me1\">value</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> match2 <span class=\"sy0\">=</span> reA.<span class=\"me1\">find</span><span class=\"br0\">(</span>exp<span class=\"br0\">)</span><br/>        t <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>match2 <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span><br/>                t.<span class=\"me1\">replace</span><span class=\"br0\">(</span>exp, add<span class=\"br0\">(</span>exp<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a><br/>                t.<span class=\"me1\">replace</span><span class=\"br0\">(</span>exp, subtract<span class=\"br0\">(</span>exp<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> t<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun evalArithmeticExp<span class=\"br0\">(</span>s<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> t <span class=\"sy0\">=</span> s.<span class=\"me1\">replace</span><span class=\"br0\">(</span>Regex<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"<span class=\"es0\">\\s</span>\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"^<span class=\"es0\">\\+</span>\"</span><span class=\"st0\">\"\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> rePara <span class=\"sy0\">=</span> Regex<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"<span class=\"es0\">\\(</span>[^()]*<span class=\"es0\">\\)</span>\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a><span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"sy0\">=</span> rePara.<span class=\"me1\">find</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> break<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> exp <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a>.<span class=\"me1\">value</span><br/>        t <span class=\"sy0\">=</span> t.<span class=\"me1\">replace</span><span class=\"br0\">(</span>exp, evalExp<span class=\"br0\">(</span>exp<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> evalExp<span class=\"br0\">(</span>t<span class=\"br0\">)</span>.<span class=\"me1\">toDoubleOrZero</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>arsg<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    listOf<span class=\"br0\">(</span><br/>        <span class=\"st0\">\"2+3\"</span>,<br/>        <span class=\"st0\">\"2+3/4\"</span>,<br/>        <span class=\"st0\">\"2*3-4\"</span>,<br/>        <span class=\"st0\">\"2*(3+4)+5/6\"</span>,<br/>        <span class=\"st0\">\"2 * (3 + (4 * 5 + (6 * 7) * 8) - 9) * 10\"</span>,<br/>        <span class=\"st0\">\"2*-3--4+-0.25\"</span>,<br/>         <span class=\"st0\">\"-4 - 3\"</span>,<br/>         <span class=\"st0\">\"((((2))))+ 3 * 5\"</span>,<br/>         <span class=\"st0\">\"1 + 2 * (3 + (4 * 5 + 6 * 7 * 8) - 9) / 10\"</span>,<br/>         <span class=\"st0\">\"1 + 2*(3 - 2*(3 - 2)*((2 - 4)*5 - 22/(7 + 2*(3 - 1)) - 1)) + 1\"</span><br/>    <span class=\"br0\">)</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> println<span class=\"br0\">(</span><span class=\"st0\">\"$it = ${evalArithmeticExp(it)}\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 40, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw3\">require</span><span class=\"st0\">\"lpeg\"</span><br/>\u00a0<br/>P<span class=\"sy0\">,</span> R<span class=\"sy0\">,</span> C<span class=\"sy0\">,</span> S<span class=\"sy0\">,</span> V <span class=\"sy0\">=</span> lpeg<span class=\"sy0\">.</span>P<span class=\"sy0\">,</span> lpeg<span class=\"sy0\">.</span>R<span class=\"sy0\">,</span> lpeg<span class=\"sy0\">.</span>C<span class=\"sy0\">,</span> lpeg<span class=\"sy0\">.</span>S<span class=\"sy0\">,</span> lpeg<span class=\"sy0\">.</span>V<br/>\u00a0<br/><span class=\"co1\">--matches arithmetic expressions and returns a syntax tree</span><br/>expression <span class=\"sy0\">=</span> P<span class=\"br0\">{</span><span class=\"st0\">\"expr\"</span><span class=\"sy0\">;</span><br/>ws <span class=\"sy0\">=</span> P<span class=\"st0\">\" \"</span><span class=\"sy0\">^</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>number <span class=\"sy0\">=</span> C<span class=\"br0\">(</span>R<span class=\"st0\">\"09\"</span><span class=\"sy0\">^</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> V<span class=\"st0\">\"ws\"</span><span class=\"sy0\">,</span><br/>lp <span class=\"sy0\">=</span> <span class=\"st0\">\"(\"</span> <span class=\"sy0\">*</span> V<span class=\"st0\">\"ws\"</span><span class=\"sy0\">,</span><br/>rp <span class=\"sy0\">=</span> <span class=\"st0\">\")\"</span> <span class=\"sy0\">*</span> V<span class=\"st0\">\"ws\"</span><span class=\"sy0\">,</span><br/>sym <span class=\"sy0\">=</span> C<span class=\"br0\">(</span>S<span class=\"st0\">\"+-*/\"</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> V<span class=\"st0\">\"ws\"</span><span class=\"sy0\">,</span><br/>more <span class=\"sy0\">=</span> <span class=\"br0\">(</span>V<span class=\"st0\">\"sym\"</span> <span class=\"sy0\">*</span> V<span class=\"st0\">\"expr\"</span><span class=\"br0\">)</span><span class=\"sy0\">^</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><br/>expr <span class=\"sy0\">=</span> V<span class=\"st0\">\"number\"</span> <span class=\"sy0\">*</span> V<span class=\"st0\">\"more\"</span> <span class=\"sy0\">+</span> V<span class=\"st0\">\"lp\"</span> <span class=\"sy0\">*</span> lpeg<span class=\"sy0\">.</span>Ct<span class=\"br0\">(</span>V<span class=\"st0\">\"expr\"</span> <span class=\"sy0\">*</span> V<span class=\"st0\">\"more\"</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> V<span class=\"st0\">\"rp\"</span> <span class=\"sy0\">*</span> V<span class=\"st0\">\"more\"</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">--evaluates a tree</span><br/><span class=\"kw1\">function</span> eval<span class=\"br0\">(</span>expr<span class=\"br0\">)</span><br/>  <span class=\"co1\">--empty</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw3\">type</span><span class=\"br0\">(</span>expr<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"string\"</span> <span class=\"kw2\">or</span> <span class=\"kw3\">type</span><span class=\"br0\">(</span>expr<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"number\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> expr <span class=\"sy0\">+</span> <span class=\"nu0\">0</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">--arithmetic functions</span><br/>  tb <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"st0\">\"+\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"kw1\">return</span> eval<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">+</span> eval<span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><span class=\"st0\">\"-\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"kw1\">return</span> eval<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">-</span> eval<span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><span class=\"st0\">\"*\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"kw1\">return</span> eval<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">*</span> eval<span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy0\">,</span><br/>\t\t<span class=\"br0\">[</span><span class=\"st0\">\"/\"</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span> <span class=\"kw1\">return</span> eval<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"sy0\">/</span> eval<span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"co1\">--you could add ^ or other operators to this pretty easily</span><br/>  <span class=\"kw1\">for</span> i<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">{</span><span class=\"st0\">\"*/\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"+-\"</span><span class=\"br0\">}</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">for</span> s<span class=\"sy0\">,</span> u <span class=\"kw2\">in</span> <span class=\"kw3\">ipairs</span><span class=\"br0\">(</span>expr<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t  <span class=\"kw1\">local</span> k <span class=\"sy0\">=</span> <span class=\"kw3\">type</span><span class=\"br0\">(</span>u<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"string\"</span> <span class=\"kw2\">and</span> C<span class=\"br0\">(</span>S<span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>match<span class=\"br0\">(</span>u<span class=\"br0\">)</span><br/>\t  <span class=\"kw1\">if</span> k <span class=\"kw1\">then</span><br/>\t    expr<span class=\"br0\">[</span>s<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> tb<span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"br0\">(</span>expr<span class=\"br0\">[</span>s<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>expr<span class=\"br0\">[</span>s<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t    <span class=\"kw3\">table.remove</span><span class=\"br0\">(</span>expr<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><br/>\t    <span class=\"kw3\">table.remove</span><span class=\"br0\">(</span>expr<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><br/>\t  <span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> expr<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>eval<span class=\"br0\">{</span>expression<span class=\"sy0\">:</span>match<span class=\"br0\">(</span><span class=\"kw3\">io.read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span></pre>"}, {"lang": "Liberty BASIC", "loc": 237, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"co1\">'[RC] Arithmetic evaluation.bas</span><br/><span class=\"co1\">'Buld the tree (with linked nodes, in array 'cause LB has no pointers)</span><br/><span class=\"co1\">'applying shunting yard algorythm.</span><br/><span class=\"co1\">'Then evaluate tree</span><br/>\u00a0<br/><span class=\"kw1\">global</span> stack$   <span class=\"co1\">'operator/brakets stack</span><br/>stack$<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><br/>\u00a0<br/>maxStack <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><br/><span class=\"kw1\">dim</span> stack<span class=\"br0\">(</span>maxStack<span class=\"br0\">)</span> <span class=\"co1\">'nodes stack</span><br/><span class=\"kw1\">global</span> SP <span class=\"co1\">'stack pointer</span><br/>SP <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"co1\">'-------------------</span><br/><span class=\"kw1\">global</span> maxNode<span class=\"sy0\">,</span>curFree<br/><span class=\"kw1\">global</span> FirstOp<span class=\"sy0\">,</span>SecondOp<span class=\"sy0\">,</span>isNumber<span class=\"sy0\">,</span>NodeCont<br/><span class=\"kw1\">global</span> opList$<br/>opList$ <span class=\"sy0\">=</span> <span class=\"st0\">\"+-*/^\"</span><br/>\u00a0<br/>maxNode<span class=\"sy0\">=</span><span class=\"nu0\">100</span><br/>FirstOp<span class=\"sy0\">=</span><span class=\"nu0\">1</span>   <span class=\"co1\">'pointers to other nodes; 0 means no pointer</span><br/>SecondOp<span class=\"sy0\">=</span><span class=\"nu0\">2</span><br/>isNumber<span class=\"sy0\">=</span><span class=\"nu0\">3</span>  <span class=\"co1\">'like, 1 is number, 0 is operator</span><br/>NodeCont<span class=\"sy0\">=</span><span class=\"nu0\">4</span>  <span class=\"co1\">'number if isNumber; or mid$(\"+-*/^\", i, 1) for 1..5 operator</span><br/>\u00a0<br/><span class=\"kw1\">dim</span> node<span class=\"br0\">(</span>NodeCont<span class=\"sy0\">,</span> maxNode<span class=\"br0\">)</span><br/><span class=\"co1\">'will be used from 1, 0 plays null pointer (no link)</span><br/>\u00a0<br/>curFree<span class=\"sy0\">=</span><span class=\"nu0\">1</span>   <span class=\"co1\">'first free node</span><br/><span class=\"co1\">'-------------------</span><br/>\u00a0<br/>in$ <span class=\"sy0\">=</span> <span class=\"st0\">\" 1 + 2 ^ 3 * 4 - 12 / 6 \"</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Input: \"</span><br/><span class=\"kw1\">print</span> in$<br/>\u00a0<br/><span class=\"co1\">'read tokens</span><br/>token$ <span class=\"sy0\">=</span> <span class=\"st0\">\"#\"</span><br/><span class=\"kw1\">while</span> <span class=\"nu0\">1</span><br/>    i<span class=\"sy0\">=</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    token$ <span class=\"sy0\">=</span> <span class=\"kw1\">word</span>$<span class=\"br0\">(</span>in$<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> token$ <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> i<span class=\"sy0\">=</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">while</span><br/>\u00a0<br/>    <span class=\"kw1\">select</span> <span class=\"kw1\">case</span><br/>    <span class=\"kw1\">case</span> token$ <span class=\"sy0\">=</span> <span class=\"st0\">\"(\"</span><br/>        <span class=\"co1\">'If the token is a left parenthesis, then push it onto the stack.</span><br/>        <span class=\"kw1\">call</span> stack.push token$<br/>\u00a0<br/>    <span class=\"kw1\">case</span> token$ <span class=\"sy0\">=</span> <span class=\"st0\">\")\"</span><br/>        <span class=\"co1\">'If the token is a right parenthesis:</span><br/>        <span class=\"co1\">'Until the token at the top of the stack is a left parenthesis, pop operators off the stack onto the output queue.</span><br/>        <span class=\"co1\">'Pop the left parenthesis from the stack, but not onto the output queue.</span><br/>        <span class=\"co1\">'If the stack runs out without finding a left parenthesis, then there are mismatched parentheses.</span><br/>        <span class=\"kw1\">while</span> stack.peek$<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"st0\">\"(\"</span><br/>            <span class=\"co1\">'if stack is empty</span><br/>            <span class=\"kw1\">if</span> stack$<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">print</span> <span class=\"st0\">\"Error: no matching '(' for token \"</span>;i<span class=\"sy0\">:</span> <span class=\"kw1\">end</span><br/>            <span class=\"co1\">'add operator node to tree</span><br/>            child2<span class=\"sy0\">=</span>node.pop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            child1<span class=\"sy0\">=</span>node.pop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">call</span> node.push addOpNode<span class=\"br0\">(</span>child1<span class=\"sy0\">,</span>child2<span class=\"sy0\">,</span>stack.pop$<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">wend</span><br/>        discard$<span class=\"sy0\">=</span>stack.pop$<span class=\"br0\">(</span><span class=\"br0\">)</span>   <span class=\"co1\">'discard \"(\"</span><br/>\u00a0<br/>    <span class=\"kw1\">case</span> isOperator<span class=\"br0\">(</span>token$<span class=\"br0\">)</span><br/>        <span class=\"co1\">'If the token is an operator, o1, then:</span><br/>        <span class=\"co1\">'while there is an operator token, o2, at the top of the stack, and</span><br/>        <span class=\"co1\">'either o1 is left-associative and its precedence is equal to that of o2,</span><br/>        <span class=\"co1\">'or o1 has precedence less than that of o2,</span><br/>        <span class=\"co1\">'   pop o2 off the stack, onto the output queue;</span><br/>        <span class=\"co1\">'push o1 onto the stack</span><br/>        op1$<span class=\"sy0\">=</span>token$<br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span>isOperator<span class=\"br0\">(</span>stack.peek$<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            op2$<span class=\"sy0\">=</span>stack.peek$<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>op2$<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\"^\"</span> <span class=\"kw1\">and</span> precedence<span class=\"br0\">(</span>op1$<span class=\"br0\">)</span> <span class=\"sy0\">=</span> precedence<span class=\"br0\">(</span>op2$<span class=\"br0\">)</span><span class=\"br0\">)</span> _<br/>                <span class=\"kw1\">OR</span> <span class=\"br0\">(</span>precedence<span class=\"br0\">(</span>op1$<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> precedence<span class=\"br0\">(</span>op2$<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                <span class=\"co1\">'\"^\" is the only right-associative operator</span><br/>                <span class=\"co1\">'add operator node to tree</span><br/>                child2<span class=\"sy0\">=</span>node.pop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                child1<span class=\"sy0\">=</span>node.pop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">call</span> node.push addOpNode<span class=\"br0\">(</span>child1<span class=\"sy0\">,</span>child2<span class=\"sy0\">,</span>stack.pop$<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">else</span><br/>                <span class=\"kw1\">exit</span> <span class=\"kw1\">while</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">wend</span><br/>        <span class=\"kw1\">call</span> stack.push op1$<br/>\u00a0<br/>    <span class=\"kw1\">case</span> <span class=\"kw1\">else</span>   <span class=\"co1\">'number</span><br/>    <span class=\"co1\">'actually, wrohg operator could end up here, like say\u00a0%</span><br/>        <span class=\"co1\">'If the token is a number, then</span><br/>        <span class=\"co1\">'add leaf node to tree (number)</span><br/>        <span class=\"kw1\">call</span> node.push addNumNode<span class=\"br0\">(</span><span class=\"kw2\">val</span><span class=\"br0\">(</span>token$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">select</span><br/>\u00a0<br/><span class=\"kw1\">wend</span><br/>\u00a0<br/><span class=\"co1\">'When there are no more tokens to read:</span><br/><span class=\"co1\">'While there are still operator tokens in the stack:</span><br/><span class=\"co1\">'   If the operator token on the top of the stack is a parenthesis, then there are mismatched parentheses.</span><br/><span class=\"co1\">'   Pop the operator onto the output queue.</span><br/><span class=\"kw1\">while</span> stack$<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\"\"</span><br/>    <span class=\"kw1\">if</span> stack.peek$<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"(\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">print</span> <span class=\"st0\">\"no matching ')'\"</span><span class=\"sy0\">:</span> <span class=\"kw1\">end</span><br/>    <span class=\"co1\">'add operator node to tree</span><br/>    child2<span class=\"sy0\">=</span>node.pop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    child1<span class=\"sy0\">=</span>node.pop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> node.push addOpNode<span class=\"br0\">(</span>child1<span class=\"sy0\">,</span>child2<span class=\"sy0\">,</span>stack.pop$<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">wend</span><br/>\u00a0<br/>root <span class=\"sy0\">=</span> node.pop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\">'call dumpNodes</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Tree:\"</span><br/><span class=\"kw1\">call</span> drawTree root<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><br/><span class=\"kw1\">locate</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"Result: \"</span>;evaluate<span class=\"br0\">(</span>root<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">'------------------------------------------</span><br/><span class=\"kw1\">function</span> isOperator<span class=\"br0\">(</span>op$<span class=\"br0\">)</span><br/>    isOperator <span class=\"sy0\">=</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span>opList$<span class=\"sy0\">,</span> op$<span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">AND</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>op$<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> precedence<span class=\"br0\">(</span>op$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> isOperator<span class=\"br0\">(</span>op$<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        precedence <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> _<br/>            <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw2\">instr</span><span class=\"br0\">(</span><span class=\"st0\">\"+-*/^\"</span><span class=\"sy0\">,</span> op$<span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> _<br/>            <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw2\">instr</span><span class=\"br0\">(</span><span class=\"st0\">\"*/^\"</span><span class=\"sy0\">,</span> op$<span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> _<br/>            <span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw2\">instr</span><span class=\"br0\">(</span><span class=\"st0\">\"^\"</span><span class=\"sy0\">,</span> op$<span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"co1\">'------------------------------------------</span><br/><span class=\"kw1\">sub</span> stack.push s$<br/>    stack$<span class=\"sy0\">=</span>s$<span class=\"sy0\">+</span><span class=\"st0\">\"|\"</span><span class=\"sy0\">+</span>stack$ <br/><span class=\"kw1\">end</span> <span class=\"kw1\">sub</span><br/>\u00a0<br/><span class=\"kw1\">function</span> stack.pop$<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">'it does return empty on empty stack or queue</span><br/>    stack.pop$<span class=\"sy0\">=</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span>stack$<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/>    stack$<span class=\"sy0\">=</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span>stack$<span class=\"sy0\">,</span><span class=\"kw2\">instr</span><span class=\"br0\">(</span>stack$<span class=\"sy0\">,</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> stack.peek$<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">'it does return empty on empty stack or queue</span><br/>    stack.peek$<span class=\"sy0\">=</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span>stack$<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"st0\">\"|\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"co1\">'---------------------------------------</span><br/><span class=\"kw1\">sub</span> node.push s<br/>    stack<span class=\"br0\">(</span>SP<span class=\"br0\">)</span><span class=\"sy0\">=</span>s<br/>    SP<span class=\"sy0\">=</span>SP<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">sub</span><br/>\u00a0<br/><span class=\"kw1\">function</span> node.pop<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"co1\">'it does return -999999 on empty stack</span><br/>    <span class=\"kw1\">if</span> SP<span class=\"sy0\">&lt;</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span> pop<span class=\"sy0\">=-</span><span class=\"nu0\">999999</span><span class=\"sy0\">:</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span><br/>    SP<span class=\"sy0\">=</span>SP<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    node.pop<span class=\"sy0\">=</span>stack<span class=\"br0\">(</span>SP<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"co1\">'=======================================</span><br/><span class=\"kw1\">sub</span> dumpNodes<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> curFree<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">print</span> i<span class=\"sy0\">,</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">4</span><br/>            <span class=\"kw1\">print</span> node<span class=\"br0\">(</span>j<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>        <span class=\"kw1\">next</span><br/>        <span class=\"kw1\">print</span><br/>    <span class=\"kw1\">next</span><br/>    <span class=\"kw1\">print</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">sub</span><br/>\u00a0<br/><span class=\"kw1\">function</span> evaluate<span class=\"br0\">(</span>node<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> node<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span><br/>    <span class=\"kw1\">if</span> node<span class=\"br0\">(</span>isNumber<span class=\"sy0\">,</span> node<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        evaluate <span class=\"sy0\">=</span> node<span class=\"br0\">(</span>NodeCont<span class=\"sy0\">,</span> node<span class=\"br0\">)</span><br/>        <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"co1\">'else operator</span><br/>    op1 <span class=\"sy0\">=</span> evaluate<span class=\"br0\">(</span>node<span class=\"br0\">(</span>FirstOp<span class=\"sy0\">,</span> node<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    op2 <span class=\"sy0\">=</span> evaluate<span class=\"br0\">(</span>node<span class=\"br0\">(</span>SecondOp<span class=\"sy0\">,</span> node<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">select</span> <span class=\"kw1\">case</span> node<span class=\"br0\">(</span>NodeCont<span class=\"sy0\">,</span> node<span class=\"br0\">)</span>    <span class=\"co1\">'opList$, \"+-*/^\"</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">1</span><br/>        evaluate <span class=\"sy0\">=</span> op1<span class=\"sy0\">+</span>op2<br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><br/>        evaluate <span class=\"sy0\">=</span> op1<span class=\"sy0\">-</span>op2<br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><br/>        evaluate <span class=\"sy0\">=</span> op1<span class=\"sy0\">*</span>op2<br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">4</span><br/>        evaluate <span class=\"sy0\">=</span> op1<span class=\"sy0\">/</span>op2<br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">5</span><br/>        evaluate <span class=\"sy0\">=</span> op1^op2<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">select</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">sub</span> drawTree node<span class=\"sy0\">,</span> level<span class=\"sy0\">,</span> leftRight<span class=\"sy0\">,</span> offsetY<br/>    <span class=\"kw1\">if</span> node<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">sub</span><br/>    <span class=\"kw1\">call</span> drawTree node<span class=\"br0\">(</span>FirstOp<span class=\"sy0\">,</span> node<span class=\"br0\">)</span><span class=\"sy0\">,</span> level<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> leftRight<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>^level<span class=\"sy0\">,</span> offsetY<br/>\u00a0<br/>    <span class=\"co1\">'print node</span><br/>    <span class=\"co1\">'count on 80 char maiwin</span><br/>    x <span class=\"sy0\">=</span> <span class=\"nu0\">40</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>leftRight<span class=\"br0\">)</span><br/>    y <span class=\"sy0\">=</span> level<span class=\"sy0\">+</span>offsetY<br/>    <span class=\"kw1\">locate</span> x<span class=\"sy0\">,</span> y<br/>    <span class=\"co1\">'print  x, y,\"&gt;\";</span><br/>    <span class=\"kw1\">if</span> node<span class=\"br0\">(</span>isNumber<span class=\"sy0\">,</span> node<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">print</span> node<span class=\"br0\">(</span>NodeCont<span class=\"sy0\">,</span> node<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">print</span>  <span class=\"kw2\">mid$</span><span class=\"br0\">(</span>opList$<span class=\"sy0\">,</span> node<span class=\"br0\">(</span>NodeCont<span class=\"sy0\">,</span> node<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    <span class=\"kw1\">call</span> drawTree node<span class=\"br0\">(</span>SecondOp<span class=\"sy0\">,</span> node<span class=\"br0\">)</span><span class=\"sy0\">,</span> level<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> leftRight<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span>^level<span class=\"sy0\">,</span> offsetY<br/><span class=\"kw1\">end</span> <span class=\"kw1\">sub</span><br/>\u00a0<br/><span class=\"kw1\">function</span> addNumNode<span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/><span class=\"co1\">'returns new node</span><br/>    newNode<span class=\"sy0\">=</span>curFree<br/>    curFree<span class=\"sy0\">=</span>curFree<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    node<span class=\"br0\">(</span>isNumber<span class=\"sy0\">,</span>newNode<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    node<span class=\"br0\">(</span>NodeCont<span class=\"sy0\">,</span>newNode<span class=\"br0\">)</span><span class=\"sy0\">=</span>num<br/>\u00a0<br/>    addNumNode <span class=\"sy0\">=</span> newNode<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">function</span> addOpNode<span class=\"br0\">(</span>firstChild<span class=\"sy0\">,</span> secondChild<span class=\"sy0\">,</span> op$<span class=\"br0\">)</span><br/><span class=\"co1\">'returns new node</span><br/><span class=\"co1\">'FirstOrSecond ignored if parent is 0</span><br/>    newNode<span class=\"sy0\">=</span>curFree<br/>    curFree<span class=\"sy0\">=</span>curFree<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    node<span class=\"br0\">(</span>isNumber<span class=\"sy0\">,</span>newNode<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    node<span class=\"br0\">(</span>NodeCont<span class=\"sy0\">,</span>newNode<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw2\">instr</span><span class=\"br0\">(</span>opList$<span class=\"sy0\">,</span> op$<span class=\"br0\">)</span><br/>\u00a0<br/>    node<span class=\"br0\">(</span>FirstOp<span class=\"sy0\">,</span>newNode<span class=\"br0\">)</span><span class=\"sy0\">=</span>firstChild<br/>    node<span class=\"br0\">(</span>SecondOp<span class=\"sy0\">,</span>newNode<span class=\"br0\">)</span><span class=\"sy0\">=</span>secondChild<br/>\u00a0<br/>    addOpNode <span class=\"sy0\">=</span> newNode<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "M2000 Interpreter", "loc": 14, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>y=100<br/>Module CheckEval {<br/>      A$=\"1 + 2 * (3 + (4 * 5 + 6 * 7 * 8) - 9) / 10\"<br/>      Print Eval(A$)<br/>      x=10<br/>      Print Eval(\"x+5\")=x+5<br/>      Print Eval(\"A$=A$\")=True<br/>      Try {<br/>            Print Eval(\"y\")  ' error: y is uknown here<br/>      }<br/>}<br/>Call CheckEval<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 34, "block": "<pre class=\"text highlighted_source\">(*parsing:*)<br/>parse[string_]\u00a0:= <br/> Module[{e}, <br/>  StringCases[string, <br/>     \"+\" | \"-\" | \"*\" | \"/\" | \"(\" | \")\" | <br/>      DigitCharacter ..] //. {a_String?DigitQ\u00a0:&gt; <br/>      e[<a class=\"__cf_email__\" data-cfemail=\"673308221f17150214140e08092706\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>], {x___, PatternSequence[\"(\", a_e, \")\"], <br/>       y___}\u00a0:&gt; {x, a, <br/>       y}, {x\u00a0: <br/>        PatternSequence[] | <br/>         PatternSequence[___, \"(\" | \"+\" | \"-\" | \"*\" | \"/\"], <br/>       PatternSequence[op\u00a0: \"+\" | \"-\", a_e], y___}\u00a0:&gt; {x, e[op, a], <br/>       y}, {x\u00a0: <br/>        PatternSequence[] | PatternSequence[___, \"(\" | \"+\" | \"-\"], <br/>       PatternSequence[a_e, op\u00a0: \"*\" | \"/\", b_e], y___}\u00a0:&gt; {x, <br/>       e[op, a, b], <br/>       y}, {x\u00a0: <br/>        PatternSequence[] | PatternSequence[___, \"(\" | \"+\" | \"-\"], <br/>       PatternSequence[a_e, b_e], y___}\u00a0:&gt; {x, e[\"*\", a, b], <br/>       y}, {x\u00a0: PatternSequence[] | PatternSequence[___, \"(\"], <br/>       PatternSequence[a_e, op\u00a0: \"+\" | \"-\", b_e], <br/>       y\u00a0: PatternSequence[] | <br/>         PatternSequence[\")\" | \"+\" | \"-\", ___]}\u00a0:&gt; {x, e[op, a, b], <br/>       y}} //. {e -&gt; List, {a_Integer}\u00a0:&gt; a, {a_List}\u00a0:&gt; a}]<br/>\u00a0<br/>(*evaluation*)<br/>evaluate[a_Integer]\u00a0:= a;<br/>evaluate[{\"+\", a_}]\u00a0:= evaluate[a];<br/>evaluate[{\"-\", a_}]\u00a0:= -evaluate[a];<br/>evaluate[{\"+\", a_, b_}]\u00a0:= evaluate[a] + evaluate[b];<br/>evaluate[{\"-\", a_, b_}]\u00a0:= evaluate[a] - evaluate[b];<br/>evaluate[{\"*\", a_, b_}]\u00a0:= evaluate[a]*evaluate[b];<br/>evaluate[{\"/\", a_, b_}]\u00a0:= evaluate[a]/evaluate[b];<br/>evaluate[string_String]\u00a0:= evaluate[parse[string]]</pre>"}, {"lang": "OCaml", "loc": 39, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">type</span> expression <span class=\"sy0\">=</span><br/>  <span class=\"sy0\">|</span> Const <span class=\"kw1\">of</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a><br/>  <span class=\"sy0\">|</span> Sum  <span class=\"kw1\">of</span> expression <span class=\"sy0\">*</span> expression   <span class=\"co1\">(* e1 + e2 *)</span><br/>  <span class=\"sy0\">|</span> Diff <span class=\"kw1\">of</span> expression <span class=\"sy0\">*</span> expression   <span class=\"co1\">(* e1 - e2 *)</span><br/>  <span class=\"sy0\">|</span> Prod <span class=\"kw1\">of</span> expression <span class=\"sy0\">*</span> expression   <span class=\"co1\">(* e1 * e2 *)</span><br/>  <span class=\"sy0\">|</span> Quot <span class=\"kw1\">of</span> expression <span class=\"sy0\">*</span> expression   <span class=\"co1\">(* e1 / e2 *)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> eval <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> Const c <span class=\"sy0\">-&gt;</span> c<br/>  <span class=\"sy0\">|</span> Sum <span class=\"br0\">(</span>f, g<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> eval f <span class=\"sy0\">+.</span> eval g<br/>  <span class=\"sy0\">|</span> Diff<span class=\"br0\">(</span>f, g<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> eval f <span class=\"sy0\">-.</span> eval g<br/>  <span class=\"sy0\">|</span> Prod<span class=\"br0\">(</span>f, g<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> eval f <span class=\"sy0\">*.</span> eval g<br/>  <span class=\"sy0\">|</span> Quot<span class=\"br0\">(</span>f, g<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> eval f <span class=\"sy0\">/.</span> eval g<br/>\u00a0<br/><span class=\"kw1\">open</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Genlex.html\"><span class=\"kw2\">Genlex</span></a><br/>\u00a0<br/><span class=\"kw1\">let</span> lexer <span class=\"sy0\">=</span> make_lexer <span class=\"br0\">[</span><span class=\"st0\">\"(\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\")\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"+\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"-\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"*\"</span><span class=\"sy0\">;</span> <span class=\"st0\">\"/\"</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> parse_expr <span class=\"sy0\">=</span> <span class=\"kw1\">parser</span><br/>     <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> e1 <span class=\"sy0\">=</span> parse_mult<span class=\"sy0\">;</span> e <span class=\"sy0\">=</span> parse_more_adds e1 <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> e<br/> <span class=\"kw1\">and</span> parse_more_adds e1 <span class=\"sy0\">=</span> <span class=\"kw1\">parser</span><br/>     <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> <span class=\"sy0\">'</span>Kwd <span class=\"st0\">\"+\"</span><span class=\"sy0\">;</span> e2 <span class=\"sy0\">=</span> parse_mult<span class=\"sy0\">;</span> e <span class=\"sy0\">=</span> parse_more_adds <span class=\"br0\">(</span>Sum<span class=\"br0\">(</span>e1, e2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> e<br/>   <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> <span class=\"sy0\">'</span>Kwd <span class=\"st0\">\"-\"</span><span class=\"sy0\">;</span> e2 <span class=\"sy0\">=</span> parse_mult<span class=\"sy0\">;</span> e <span class=\"sy0\">=</span> parse_more_adds <span class=\"br0\">(</span>Diff<span class=\"br0\">(</span>e1, e2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> e<br/>   <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> e1<br/> <span class=\"kw1\">and</span> parse_mult <span class=\"sy0\">=</span> <span class=\"kw1\">parser</span><br/>     <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> e1 <span class=\"sy0\">=</span> parse_simple<span class=\"sy0\">;</span> e <span class=\"sy0\">=</span> parse_more_mults e1 <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> e<br/> <span class=\"kw1\">and</span> parse_more_mults e1 <span class=\"sy0\">=</span> <span class=\"kw1\">parser</span><br/>     <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> <span class=\"sy0\">'</span>Kwd <span class=\"st0\">\"*\"</span><span class=\"sy0\">;</span> e2 <span class=\"sy0\">=</span> parse_simple<span class=\"sy0\">;</span> e <span class=\"sy0\">=</span> parse_more_mults <span class=\"br0\">(</span>Prod<span class=\"br0\">(</span>e1, e2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> e<br/>   <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> <span class=\"sy0\">'</span>Kwd <span class=\"st0\">\"/\"</span><span class=\"sy0\">;</span> e2 <span class=\"sy0\">=</span> parse_simple<span class=\"sy0\">;</span> e <span class=\"sy0\">=</span> parse_more_mults <span class=\"br0\">(</span>Quot<span class=\"br0\">(</span>e1, e2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> e<br/>   <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> e1<br/> <span class=\"kw1\">and</span> parse_simple <span class=\"sy0\">=</span> <span class=\"kw1\">parser</span><br/>   <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> <span class=\"sy0\">'</span>Int i <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> Const<span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> i<span class=\"br0\">)</span><br/>   <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> <span class=\"sy0\">'</span>Float f <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> Const f<br/>   <span class=\"sy0\">|</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> <span class=\"sy0\">'</span>Kwd <span class=\"st0\">\"(\"</span><span class=\"sy0\">;</span> e <span class=\"sy0\">=</span> parse_expr<span class=\"sy0\">;</span> <span class=\"sy0\">'</span>Kwd <span class=\"st0\">\")\"</span> <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> e<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> parse_expression <span class=\"sy0\">=</span> <span class=\"kw1\">parser</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span> e <span class=\"sy0\">=</span> parse_expr<span class=\"sy0\">;</span> _ <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Stream.html\"><span class=\"kw2\">Stream</span></a><span class=\"sy0\">.</span>empty <span class=\"sy0\">&gt;</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> e<br/>\u00a0<br/><span class=\"kw1\">let</span> read_expression s <span class=\"sy0\">=</span> parse_expression<span class=\"br0\">(</span>lexer<span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Stream.html\"><span class=\"kw2\">Stream</span></a><span class=\"sy0\">.</span>of_string s<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ooRexx", "loc": 237, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/>expressions = <span class=\"sy0\">.</span>array~of<span class=\"br0\">(</span><span class=\"st0\">\"2+3\"</span>, <span class=\"st0\">\"2+3/4\"</span>, <span class=\"st0\">\"2*3-4\"</span>, <span class=\"st0\">\"2*(3+4)+5/6\"</span>, <span class=\"st0\">\"2 * (3 + (4 * 5 + (6 * 7) * 8) - 9) * 10\"</span>, <span class=\"st0\">\"2*-3--4+-.25\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">loop</span> input <span class=\"kw2\">over</span> expressions<br/>    expression = createExpression<span class=\"br0\">(</span>input<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> expression <span class=\"sy0\">\\</span>= <span class=\"sy0\">.</span>nil <span class=\"kw3\">then</span><br/>        <span class=\"kw1\">say</span> <span class=\"st0\">'Expression \"'</span>input<span class=\"st0\">'\" parses to \"'</span>expression~string<span class=\"st0\">'\" and evaluates to \"'</span>expression~evaluate<span class=\"st0\">'\"'</span><br/><span class=\"kw3\">end</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- create an executable expression from the input, printing out any</span><br/><span class=\"co1\">-- errors if they are raised.</span><br/>::routine createExpression<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> inputString<br/><span class=\"co1\">--  signal on syntax</span><br/>  <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>ExpressionParser~parseExpression<span class=\"br0\">(</span>inputString<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">syntax</span>:<br/>   <span class=\"kw6\">condition</span> = <span class=\"kw6\">condition</span><span class=\"br0\">(</span><span class=\"st0\">'o'</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">say</span> <span class=\"kw6\">condition</span>~<span class=\"kw6\">errorText</span><br/>   <span class=\"kw1\">say</span> <span class=\"kw6\">condition</span>~message<br/>   <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>nil<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- a base class for tree nodes in the tree</span><br/><span class=\"co1\">-- all nodes return some sort of value.  This can be constant,</span><br/><span class=\"co1\">-- or the result of additional evaluations</span><br/>::class evaluatornode<br/><span class=\"co1\">-- all evaluation is done here</span><br/>::method evaluate abstract<br/>\u00a0<br/><span class=\"co1\">-- node for numeric values in the tree</span><br/>::class <span class=\"kw1\">constant</span><br/>::method init<br/>  <span class=\"kw1\">expose</span> <span class=\"kw2\">value</span><br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> <span class=\"kw2\">value</span><br/>\u00a0<br/>::method evaluate<br/>  <span class=\"kw1\">expose</span> <span class=\"kw2\">value</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw2\">value</span><br/>\u00a0<br/>::method string<br/>  <span class=\"kw1\">expose</span> <span class=\"kw2\">value</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw2\">value</span><br/>\u00a0<br/><span class=\"co1\">-- node for a parenthetical group on the tree</span><br/>::class parens<br/>::method init<br/>  <span class=\"kw1\">expose</span> subexpression<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> subexpression<br/>\u00a0<br/>::method evaluate<br/>  <span class=\"kw1\">expose</span> subexpression<br/>  <span class=\"kw1\">return</span> subexpression~evaluate<br/>\u00a0<br/>::method string<br/>  <span class=\"kw1\">expose</span> subexpression<br/>  <span class=\"kw1\">return</span> <span class=\"st0\">\"(\"</span>subexpression~string<span class=\"st0\">\")\"</span><br/>\u00a0<br/><span class=\"co1\">-- base class for binary operators</span><br/>::class binaryoperator<br/>::method init<br/>  <span class=\"kw1\">expose</span> <span class=\"kw6\">left</span> <span class=\"kw6\">right</span><br/>  <span class=\"co1\">-- the left and right sides are set after the left and right sides have</span><br/>  <span class=\"co1\">-- been resolved.</span><br/>  <span class=\"kw6\">left</span> = <span class=\"sy0\">.</span>nil<br/>  <span class=\"kw6\">right</span> = <span class=\"sy0\">.</span>nil<br/>\u00a0<br/><span class=\"co1\">-- base operation</span><br/>::method evaluate<br/>  <span class=\"kw1\">expose</span> <span class=\"kw6\">left</span> <span class=\"kw6\">right</span><br/>  <span class=\"kw1\">return</span> self~operation<span class=\"br0\">(</span><span class=\"kw6\">left</span>~evaluate, <span class=\"kw6\">right</span>~evaluate<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- the actual operation of the node</span><br/>::method operation abstract<br/>::method <span class=\"kw6\">symbol</span> abstract<br/>::method precedence abstract<br/>\u00a0<br/><span class=\"co1\">-- display an operator as a string value</span><br/>::method string<br/>  <span class=\"kw1\">expose</span> <span class=\"kw6\">left</span> <span class=\"kw6\">right</span><br/>  <span class=\"kw1\">return</span> <span class=\"st0\">'('</span><span class=\"kw6\">left</span>~string self~<span class=\"kw6\">symbol</span> <span class=\"kw6\">right</span>~string<span class=\"st0\">')'</span><br/>\u00a0<br/>::<span class=\"kw1\">attribute</span> <span class=\"kw6\">left</span><br/>::<span class=\"kw1\">attribute</span> <span class=\"kw6\">right</span><br/>\u00a0<br/>::class addoperator subclass binaryoperator<br/>::method operation<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> <span class=\"kw6\">left</span>, <span class=\"kw6\">right</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw6\">left</span> + <span class=\"kw6\">right</span><br/>\u00a0<br/>::method <span class=\"kw6\">symbol</span><br/>  <span class=\"kw1\">return</span> <span class=\"st0\">\"+\"</span><br/>\u00a0<br/>::method precedence<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>::class subtractoperator subclass binaryoperator<br/>::method operation<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> <span class=\"kw6\">left</span>, <span class=\"kw6\">right</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw6\">left</span> - <span class=\"kw6\">right</span><br/>\u00a0<br/>::method <span class=\"kw6\">symbol</span><br/>  <span class=\"kw1\">return</span> <span class=\"st0\">\"-\"</span><br/>\u00a0<br/>::method precedence<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>::class multiplyoperator subclass binaryoperator<br/>::method operation<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> <span class=\"kw6\">left</span>, <span class=\"kw6\">right</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw6\">left</span> <span class=\"sy0\">*</span> <span class=\"kw6\">right</span><br/>\u00a0<br/>::method <span class=\"kw6\">symbol</span><br/>  <span class=\"kw1\">return</span> <span class=\"st0\">\"*\"</span><br/>\u00a0<br/>::method precedence<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">2</span><br/>\u00a0<br/>::class divideoperator subclass binaryoperator<br/>::method operation<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> <span class=\"kw6\">left</span>, <span class=\"kw6\">right</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw6\">left</span> <span class=\"sy0\">/</span> <span class=\"kw6\">right</span><br/>\u00a0<br/>::method <span class=\"kw6\">symbol</span><br/>  <span class=\"kw1\">return</span> <span class=\"st0\">\"/\"</span><br/>\u00a0<br/>::method precedence<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">2</span><br/>\u00a0<br/><span class=\"co1\">-- a class to parse the expression and build an evaluation tree</span><br/>::class expressionParser<br/><span class=\"co1\">-- create a resolved operand from an operator instance and the top</span><br/><span class=\"co1\">-- two entries on the operand stack.</span><br/>::method createNewOperand class<br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> operator, operands<br/>  <span class=\"co1\">-- the operands are a stack, so they are in inverse order current</span><br/>  operator~<span class=\"kw6\">right</span> = operands~<span class=\"kw1\">pull</span><br/>  operator~<span class=\"kw6\">left</span> = operands~<span class=\"kw1\">pull</span><br/>  <span class=\"co1\">-- this goes on the top of the stack now</span><br/>  operands~<span class=\"kw1\">push</span><span class=\"br0\">(</span>operator<span class=\"br0\">)</span><br/>\u00a0<br/>::method parseExpression class<br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> inputString<br/>  <span class=\"co1\">-- stacks for managing the operands and pending operators</span><br/>  operands = <span class=\"sy0\">.</span><span class=\"kw1\">queue</span>~new<br/>  operators = <span class=\"sy0\">.</span><span class=\"kw1\">queue</span>~new<br/>  <span class=\"co1\">-- this flags what sort of item we expect to find at the current</span><br/>  <span class=\"co1\">-- location</span><br/>  afterOperand = <span class=\"sy0\">.</span>false<br/>\u00a0<br/>  <span class=\"kw1\">loop</span> currentIndex = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> inputString~<span class=\"kw6\">length</span><br/>      char = inputString~subChar<span class=\"br0\">(</span>currentIndex<span class=\"br0\">)</span><br/>      <span class=\"co1\">-- skip over whitespace</span><br/>      <span class=\"kw1\">if</span> char == <span class=\"st0\">' '</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> currentIndex<br/>      <span class=\"co1\">-- If the last thing we parsed was an operand, then</span><br/>      <span class=\"co1\">-- we expect to see either a closing paren or an</span><br/>      <span class=\"co1\">-- operator to appear here</span><br/>      <span class=\"kw1\">if</span> afterOperand <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>          <span class=\"kw1\">if</span> char == <span class=\"st0\">')'</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>              <span class=\"kw1\">loop</span> <span class=\"kw2\">while</span> <span class=\"sy0\">\\</span>operators~isempty<br/>                  operator = operators~<span class=\"kw1\">pull</span><br/>                  <span class=\"co1\">-- if we find the opening paren, replace the</span><br/>                  <span class=\"co1\">-- top operand with a paren group wrapper</span><br/>                  <span class=\"co1\">-- and stop popping items</span><br/>                  <span class=\"kw1\">if</span> operator == <span class=\"st0\">'('</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>                     operands~<span class=\"kw1\">push</span><span class=\"br0\">(</span><span class=\"sy0\">.</span>parens~new<span class=\"br0\">(</span>operands~<span class=\"kw1\">pull</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"kw1\">leave</span><br/>                  <span class=\"kw3\">end</span><br/>                  <span class=\"co1\">-- collapse the operator stack a bit</span><br/>                  self~createNewOperand<span class=\"br0\">(</span>operator, operands<span class=\"br0\">)</span><br/>              <span class=\"kw3\">end</span><br/>              <span class=\"co1\">-- done with this character</span><br/>              <span class=\"kw1\">iterate</span> currentIndex<br/>          <span class=\"kw3\">end</span><br/>          afterOperand = <span class=\"sy0\">.</span>false<br/>          operator = <span class=\"sy0\">.</span>nil<br/>          <span class=\"kw1\">if</span> char == <span class=\"st0\">\"+\"</span> <span class=\"kw3\">then</span> operator = <span class=\"sy0\">.</span>addoperator~new<br/>          <span class=\"kw3\">else</span> <span class=\"kw1\">if</span> char == <span class=\"st0\">\"-\"</span> <span class=\"kw3\">then</span> operator = <span class=\"sy0\">.</span>subtractoperator~new<br/>          <span class=\"kw3\">else</span> <span class=\"kw1\">if</span> char == <span class=\"st0\">\"*\"</span> <span class=\"kw3\">then</span> operator = <span class=\"sy0\">.</span>multiplyoperator~new<br/>          <span class=\"kw3\">else</span> <span class=\"kw1\">if</span> char == <span class=\"st0\">\"/\"</span> <span class=\"kw3\">then</span> operator = <span class=\"sy0\">.</span>divideoperator~new<br/>          <span class=\"kw1\">if</span> operator <span class=\"sy0\">\\</span>= <span class=\"sy0\">.</span>nil <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>              <span class=\"kw1\">loop</span> <span class=\"kw2\">while</span> <span class=\"sy0\">\\</span>operators~isEmpty<br/>                  top = operators~peek<br/>                  <span class=\"co1\">-- start of a paren group stops the popping</span><br/>                  <span class=\"kw1\">if</span> top == <span class=\"st0\">'('</span> <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span><br/>                  <span class=\"co1\">-- or the top operator has a lower precedence</span><br/>                  <span class=\"kw1\">if</span> top~precedence <span class=\"sy0\">&lt;</span> operator~precedence <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span><br/>                  <span class=\"co1\">-- process this pending one</span><br/>                  self~createNewOperand<span class=\"br0\">(</span>operators~<span class=\"kw1\">pull</span>, operands<span class=\"br0\">)</span><br/>              <span class=\"kw3\">end</span><br/>              <span class=\"co1\">-- this new operator is now top of the stack</span><br/>              operators~<span class=\"kw1\">push</span><span class=\"br0\">(</span>operator<span class=\"br0\">)</span><br/>              <span class=\"co1\">-- and back to the top</span><br/>              <span class=\"kw1\">iterate</span> currentIndex<br/>          <span class=\"kw3\">end</span><br/>          <span class=\"kw1\">raise</span> <span class=\"kw2\">syntax</span> <span class=\"nu0\">98.900</span> array<span class=\"br0\">(</span><span class=\"st0\">\"Invalid expression character\"</span> char<span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span><br/>      <span class=\"co1\">-- if we've hit an open paren, add this to the operator stack</span><br/>      <span class=\"co1\">-- as a phony operator</span><br/>      <span class=\"kw1\">if</span> char == <span class=\"st0\">'('</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>          operators~<span class=\"kw1\">push</span><span class=\"br0\">(</span><span class=\"st0\">'('</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">iterate</span> currentIndex<br/>      <span class=\"kw3\">end</span><br/>      <span class=\"co1\">-- not an operator, so we have an operand of some type</span><br/>      afterOperand = <span class=\"sy0\">.</span>true<br/>      startindex = currentIndex<br/>      <span class=\"co1\">-- allow a leading minus sign on this</span><br/>      <span class=\"kw1\">if</span> inputString~subchar<span class=\"br0\">(</span>currentIndex<span class=\"br0\">)</span> == <span class=\"st0\">'-'</span> <span class=\"kw3\">then</span><br/>          currentIndex += <span class=\"nu0\">1</span><br/>      <span class=\"co1\">-- now scan for the end of numbers</span><br/>      <span class=\"kw1\">loop</span> <span class=\"kw2\">while</span> currentIndex <span class=\"sy0\">&lt;</span>= inputString~<span class=\"kw6\">length</span><br/>          <span class=\"co1\">-- exit for any non-numeric value</span><br/>          <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>inputString~matchChar<span class=\"br0\">(</span>currentIndex, <span class=\"st0\">\"0123456789.\"</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span><br/>          currentIndex += <span class=\"nu0\">1</span><br/>      <span class=\"kw3\">end</span><br/>      <span class=\"co1\">-- extract the string value</span><br/>      operand = inputString~<span class=\"kw6\">substr</span><span class=\"br0\">(</span>startIndex, currentIndex - startIndex<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>operand~<span class=\"kw6\">datatype</span><span class=\"br0\">(</span><span class=\"st0\">'Number'</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>          <span class=\"kw1\">raise</span> <span class=\"kw2\">syntax</span> <span class=\"nu0\">98.900</span> array<span class=\"br0\">(</span><span class=\"st0\">\"Invalid numeric operand '\"</span>operand<span class=\"st0\">\"'\"</span><span class=\"br0\">)</span><br/>      <span class=\"co1\">-- back this up to the last valid character</span><br/>      currentIndex -= <span class=\"nu0\">1</span><br/>      <span class=\"co1\">-- add this to the operand stack as a tree element that returns a constant</span><br/>      operands~<span class=\"kw1\">push</span><span class=\"br0\">(</span><span class=\"sy0\">.</span><span class=\"kw1\">constant</span>~new<span class=\"br0\">(</span>operand<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">loop</span> <span class=\"kw2\">while</span> <span class=\"sy0\">\\</span>operators~isEmpty<br/>      operator = operators~<span class=\"kw1\">pull</span><br/>      <span class=\"kw1\">if</span> operator == <span class=\"st0\">'('</span> <span class=\"kw3\">then</span><br/>          <span class=\"kw1\">raise</span> <span class=\"kw2\">syntax</span> <span class=\"nu0\">98.900</span> array<span class=\"br0\">(</span><span class=\"st0\">\"Missing closing ')' in expression\"</span><span class=\"br0\">)</span><br/>      self~createNewOperand<span class=\"br0\">(</span>operator, operands<span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>  <span class=\"co1\">-- our entire expression should be the top of the expression tree</span><br/>  expression = operands~<span class=\"kw1\">pull</span><br/>  <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>operands~isEmpty <span class=\"kw3\">then</span><br/>      <span class=\"kw1\">raise</span> <span class=\"kw2\">syntax</span> <span class=\"nu0\">98.900</span> array<span class=\"br0\">(</span><span class=\"st0\">\"Invalid expression\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> expression<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 88, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Expr</span> X0\u00a0?X<span class=\"br0\">}</span><br/>     <span class=\"kw1\">choice</span><br/>        <span class=\"br0\">[</span>L _ R<span class=\"br0\">]</span> = <span class=\"br0\">{</span>Do <span class=\"br0\">[</span>Term <span class=\"re3\">&amp;+</span> Expr<span class=\"br0\">]</span> X0\u00a0?X<span class=\"br0\">}</span> <span class=\"kw1\">in</span> add<span class=\"br0\">(</span>L R<span class=\"br0\">)</span><br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> <span class=\"br0\">[</span>L _ R<span class=\"br0\">]</span> = <span class=\"br0\">{</span>Do <span class=\"br0\">[</span>Term <span class=\"re3\">&amp;-</span> Expr<span class=\"br0\">]</span> X0\u00a0?X<span class=\"br0\">}</span> <span class=\"kw1\">in</span> sub<span class=\"br0\">(</span>L R<span class=\"br0\">)</span><br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> <span class=\"br0\">{</span>Term X0 X<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Term</span> X0\u00a0?X<span class=\"br0\">}</span><br/>     <span class=\"kw1\">choice</span><br/>        <span class=\"br0\">[</span>L _ R<span class=\"br0\">]</span> = <span class=\"br0\">{</span>Do <span class=\"br0\">[</span>Factor <span class=\"re3\">&amp;*</span> Term<span class=\"br0\">]</span> X0\u00a0?X<span class=\"br0\">}</span> <span class=\"kw1\">in</span> mul<span class=\"br0\">(</span>L R<span class=\"br0\">)</span><br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> <span class=\"br0\">[</span>L _ R<span class=\"br0\">]</span> = <span class=\"br0\">{</span>Do <span class=\"br0\">[</span>Factor <span class=\"re3\">&amp;/</span> Term<span class=\"br0\">]</span> X0\u00a0?X<span class=\"br0\">}</span> <span class=\"kw1\">in</span> <span class=\"st0\">'div'</span><span class=\"br0\">(</span>L R<span class=\"br0\">)</span><br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> <span class=\"br0\">{</span>Factor X0 X<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Factor</span> X0\u00a0?X<span class=\"br0\">}</span><br/>     <span class=\"kw1\">choice</span> <span class=\"br0\">{</span>Parens Expr X0 X<span class=\"br0\">}</span><br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> <span class=\"br0\">{</span>Number X0 X<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Number</span> X0 X<span class=\"br0\">}</span><br/>     Ds = <span class=\"br0\">{</span>Many1 Digit X0 X<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     num<span class=\"br0\">(</span>Ds<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Digit</span> X0\u00a0?X<span class=\"br0\">}</span><br/>     D<span class=\"sy0\">|!</span>X = X0<br/>  <span class=\"kw1\">in</span><br/>     D = <span class=\"kw1\">choice</span> <span class=\"re3\">&amp;0</span> <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> <span class=\"re3\">&amp;1</span> <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> <span class=\"re3\">&amp;2</span> <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> <span class=\"re3\">&amp;3</span> <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> <span class=\"re3\">&amp;4</span> <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> <span class=\"re3\">&amp;5</span> <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> <span class=\"re3\">&amp;6</span> <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> <span class=\"re3\">&amp;7</span> <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> <span class=\"re3\">&amp;8</span> <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> <span class=\"re3\">&amp;9</span> <span class=\"kw1\">end</span> <br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Many1</span> Rule X0\u00a0?X<span class=\"br0\">}</span><br/>     <span class=\"kw1\">choice</span> <span class=\"br0\">[</span><span class=\"br0\">{</span>Rule X0 X<span class=\"br0\">}</span><span class=\"br0\">]</span><br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> X1 <span class=\"kw1\">in</span> <span class=\"br0\">{</span>Rule X0 X1<span class=\"br0\">}</span><span class=\"sy0\">|</span><span class=\"br0\">{</span>Many1 Rule X1 X<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Parens</span> Rule X0\u00a0?X<span class=\"br0\">}</span><br/>     <span class=\"br0\">[</span>_ R _<span class=\"br0\">]</span> = <span class=\"br0\">{</span>Do <span class=\"br0\">[</span><span class=\"re3\">&amp;<span class=\"br0\">(</span></span> Rule <span class=\"re3\">&amp;<span class=\"br0\">)</span></span><span class=\"br0\">]</span> X0 X<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     R<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Do</span> Rules X0\u00a0?X<span class=\"br0\">}</span><br/>     Res<span class=\"sy0\">#</span>Xn = <span class=\"br0\">{</span>FoldL Rules<br/>               <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> Res<span class=\"sy0\">#</span>Xi Rule<span class=\"br0\">}</span><br/>                  <span class=\"kw1\">if</span> <span class=\"br0\">{</span>Char<span class=\"sy0\">.</span>is Rule<span class=\"br0\">}</span> <span class=\"kw1\">then</span><br/>                     <span class=\"sy0\">!</span>Rule<span class=\"sy0\">|</span>X2 = Xi<br/>                  <span class=\"kw1\">in</span><br/>                     <span class=\"br0\">(</span>Rule<span class=\"sy0\">|</span>Res<span class=\"br0\">)</span> <span class=\"sy0\">#</span> X2<br/>                  <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span>Procedure<span class=\"sy0\">.</span>is Rule<span class=\"br0\">}</span> <span class=\"kw1\">then</span><br/>                     X2 <span class=\"kw1\">in</span><br/>                     <span class=\"br0\">(</span><span class=\"br0\">{</span>Rule Xi X2<span class=\"br0\">}</span><span class=\"sy0\">|</span>Res<span class=\"br0\">)</span> <span class=\"sy0\">#</span> X2<br/>                  <span class=\"kw1\">end</span><br/>               <span class=\"kw1\">end</span><br/>               nil<span class=\"sy0\">#</span>X0<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     X = Xn<br/>     <span class=\"br0\">{</span>Reverse Res<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"co1\">%% Returns a singleton list if an AST was found or nil otherwise.</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Parse</span> S<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>SearchOne <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>Expr S nil<span class=\"br0\">}</span> <span class=\"kw1\">end</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Eval</span> X<span class=\"br0\">}</span><br/>     <span class=\"kw1\">case</span> X <span class=\"kw1\">of</span><br/>        num<span class=\"br0\">(</span>Ds<span class=\"br0\">)</span>    <span class=\"kw1\">then</span> <span class=\"br0\">{</span>String<span class=\"sy0\">.</span>toInt Ds<span class=\"br0\">}</span><br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> add<span class=\"br0\">(</span>L R<span class=\"br0\">)</span>   <span class=\"kw1\">then</span> <span class=\"br0\">{</span>Eval L<span class=\"br0\">}</span> <span class=\"sy0\">+</span> <span class=\"br0\">{</span>Eval R<span class=\"br0\">}</span><br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> sub<span class=\"br0\">(</span>L R<span class=\"br0\">)</span>   <span class=\"kw1\">then</span> <span class=\"br0\">{</span>Eval L<span class=\"br0\">}</span> <span class=\"sy0\">-</span> <span class=\"br0\">{</span>Eval R<span class=\"br0\">}</span><br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> mul<span class=\"br0\">(</span>L R<span class=\"br0\">)</span>   <span class=\"kw1\">then</span> <span class=\"br0\">{</span>Eval L<span class=\"br0\">}</span> <span class=\"sy0\">*</span> <span class=\"br0\">{</span>Eval R<span class=\"br0\">}</span><br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> <span class=\"st0\">'div'</span><span class=\"br0\">(</span>L R<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"br0\">{</span>Eval L<span class=\"br0\">}</span> <span class=\"kw1\">div</span> <span class=\"br0\">{</span>Eval R<span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"br0\">[</span>AST<span class=\"br0\">]</span> = <span class=\"br0\">{</span>Parse <span class=\"st0\">\"((11+15)*15)*2-(3)*4*1\"</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">in</span><br/>\u00a0<br/>  <span class=\"br0\">{</span>Inspector<span class=\"sy0\">.</span>configure widgetShowStrings <span class=\"kw1\">true</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Inspect AST<span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Inspect <span class=\"br0\">{</span>Eval AST<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "Pascal", "loc": 61, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> ev<br/><span class=\"co1\"># Evaluates an arithmetic expression like \"(1+3)*7\" and returns</span><br/><span class=\"co1\"># its value.</span><br/> <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$exp</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"co1\"># Delete all meaningless characters. (Scientific notation,</span><br/>  <span class=\"co1\"># infinity, and not-a-number aren't supported.)</span><br/>  <span class=\"re0\">$exp</span> <span class=\"sy0\">=~</span> <a href=\"http://perldoc.perl.org/functions/tr.html\"><span class=\"kw3\">tr</span></a> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">-</span><span class=\"nu0\">9</span><span class=\"sy0\">.+-/*</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>cd<span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> ev_ast<span class=\"br0\">(</span>astize<span class=\"br0\">(</span><span class=\"re0\">$exp</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/> <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$balanced_paren_regex</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$balanced_paren_regex</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qr.html\"><span class=\"kw3\">qr</span></a><br/>     <span class=\"br0\">{</span>\\<span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">+</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"sy0\">??</span><span class=\"br0\">{</span><span class=\"re0\">$balanced_paren_regex</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">+</span> \\<span class=\"br0\">)</span><span class=\"br0\">}</span>x<span class=\"sy0\">;</span><br/>  <span class=\"co1\">#\u00a0??{ ... } interpolates lazily (only when necessary),</span><br/>  <span class=\"co1\"># permitting recursion to arbitrary depths.</span><br/>\u00a0<br/>  <span class=\"kw2\">sub</span> astize<br/>  <span class=\"co1\"># Constructs an abstract syntax tree by recursively</span><br/>  <span class=\"co1\"># transforming textual arithmetic expressions into array</span><br/>  <span class=\"co1\"># references of the form [operator, left oprand, right oprand].</span><br/>   <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$exp</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># If $exp is just a number, return it as-is.</span><br/>    <span class=\"re0\">$exp</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/[^0-9.]/</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$exp</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># If parentheses surround the entire expression, get rid of</span><br/>    <span class=\"co1\"># them.</span><br/>    <span class=\"re0\">$exp</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$exp</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">while</span> <span class=\"re0\">$exp</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/\\A($balanced_paren_regex)\\z/</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># Replace stuff in parentheses with placeholders.</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@paren_contents</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$exp</span> <span class=\"sy0\">=~</span> <a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$balanced_paren_regex</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>              <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a><span class=\"br0\">(</span><span class=\"re0\">@paren_contents</span><span class=\"sy0\">,</span> <span class=\"co3\">$1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>               <span class=\"st0\">\"[p$#paren_contents]\"</span><span class=\"br0\">}</span>eg<span class=\"sy0\">;</span><br/>    <span class=\"co1\"># Scan for operators in order of increasing precedence,</span><br/>    <span class=\"co1\"># preferring the rightmost.</span><br/>    <span class=\"re0\">$exp</span> <span class=\"sy0\">=~</span> <a href=\"http://perldoc.perl.org/functions/m.html\"><span class=\"kw3\">m</span></a><span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"sy0\">.+</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">+-</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">.+</span><span class=\"br0\">)</span><span class=\"br0\">}</span>x <span class=\"kw1\">or</span><br/>        <span class=\"re0\">$exp</span> <span class=\"sy0\">=~</span> <a href=\"http://perldoc.perl.org/functions/m.html\"><span class=\"kw3\">m</span></a><span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"sy0\">.+</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">*/</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">.+</span><span class=\"br0\">)</span><span class=\"br0\">}</span>x <span class=\"kw1\">or</span><br/>        <span class=\"co1\"># The expression must've been malformed somehow.</span><br/>        <span class=\"co1\"># (Note that unary minus isn't supported.)</span><br/>        <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Eh?: [$exp]<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$op</span><span class=\"sy0\">,</span> <span class=\"re0\">$lo</span><span class=\"sy0\">,</span> <span class=\"re0\">$ro</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"co3\">$2</span><span class=\"sy0\">,</span> <span class=\"co3\">$1</span><span class=\"sy0\">,</span> <span class=\"co3\">$3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># Restore the parenthetical expressions.</span><br/>    <a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a> <span class=\"br0\">{</span>\\<span class=\"br0\">[</span>p<span class=\"br0\">(</span><span class=\"re0\">\\d</span><span class=\"sy0\">+</span><span class=\"br0\">)</span>\\<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$paren_contents</span><span class=\"br0\">[</span><span class=\"co3\">$1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span>eg<br/>        <span class=\"kw1\">foreach</span> <span class=\"re0\">$lo</span><span class=\"sy0\">,</span> <span class=\"re0\">$ro</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># And recurse.</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">[</span><span class=\"re0\">$op</span><span class=\"sy0\">,</span> astize<span class=\"br0\">(</span><span class=\"re0\">$lo</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> astize<span class=\"br0\">(</span><span class=\"re0\">$ro</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/> <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">%ops</span> <span class=\"sy0\">=</span><br/>     <span class=\"br0\">(</span><span class=\"st_h\">'+'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>      <span class=\"st_h\">'-'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>      <span class=\"st_h\">'*'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>      <span class=\"st_h\">'/'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">sub</span> ev_ast<br/>  <span class=\"co1\"># Evaluates an abstract syntax tree of the form returned by</span><br/>  <span class=\"co1\"># &amp;astize.</span><br/>   <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$ast</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># If $ast is just a number, return it as-is.</span><br/>    <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a> <span class=\"re0\">$ast</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$ast</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># Otherwise, recurse.</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$op</span><span class=\"sy0\">,</span> <span class=\"re0\">@operands</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@$ast</span><span class=\"sy0\">;</span><br/>    <span class=\"co5\">$_</span> <span class=\"sy0\">=</span> ev_ast<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">foreach</span> <span class=\"re0\">@operands</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$ops</span><span class=\"br0\">{</span><span class=\"re0\">$op</span><span class=\"br0\">}</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"re0\">@operands</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 61, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> ev<br/><span class=\"co1\"># Evaluates an arithmetic expression like \"(1+3)*7\" and returns</span><br/><span class=\"co1\"># its value.</span><br/> <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$exp</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"co1\"># Delete all meaningless characters. (Scientific notation,</span><br/>  <span class=\"co1\"># infinity, and not-a-number aren't supported.)</span><br/>  <span class=\"re0\">$exp</span> <span class=\"sy0\">=~</span> <a href=\"http://perldoc.perl.org/functions/tr.html\"><span class=\"kw3\">tr</span></a> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"sy0\">-</span><span class=\"nu0\">9</span><span class=\"sy0\">.+-/*</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span>cd<span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> ev_ast<span class=\"br0\">(</span>astize<span class=\"br0\">(</span><span class=\"re0\">$exp</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\u00a0<br/> <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$balanced_paren_regex</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$balanced_paren_regex</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/qr.html\"><span class=\"kw3\">qr</span></a><br/>     <span class=\"br0\">{</span>\\<span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">+</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span><span class=\"sy0\">??</span><span class=\"br0\">{</span><span class=\"re0\">$balanced_paren_regex</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">+</span> \\<span class=\"br0\">)</span><span class=\"br0\">}</span>x<span class=\"sy0\">;</span><br/>  <span class=\"co1\">#\u00a0??{ ... } interpolates lazily (only when necessary),</span><br/>  <span class=\"co1\"># permitting recursion to arbitrary depths.</span><br/>\u00a0<br/>  <span class=\"kw2\">sub</span> astize<br/>  <span class=\"co1\"># Constructs an abstract syntax tree by recursively</span><br/>  <span class=\"co1\"># transforming textual arithmetic expressions into array</span><br/>  <span class=\"co1\"># references of the form [operator, left oprand, right oprand].</span><br/>   <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$exp</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># If $exp is just a number, return it as-is.</span><br/>    <span class=\"re0\">$exp</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/[^0-9.]/</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$exp</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># If parentheses surround the entire expression, get rid of</span><br/>    <span class=\"co1\"># them.</span><br/>    <span class=\"re0\">$exp</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a><span class=\"br0\">(</span><span class=\"re0\">$exp</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">while</span> <span class=\"re0\">$exp</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/\\A($balanced_paren_regex)\\z/</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># Replace stuff in parentheses with placeholders.</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@paren_contents</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$exp</span> <span class=\"sy0\">=~</span> <a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$balanced_paren_regex</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>              <span class=\"br0\">{</span><a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a><span class=\"br0\">(</span><span class=\"re0\">@paren_contents</span><span class=\"sy0\">,</span> <span class=\"co3\">$1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>               <span class=\"st0\">\"[p$#paren_contents]\"</span><span class=\"br0\">}</span>eg<span class=\"sy0\">;</span><br/>    <span class=\"co1\"># Scan for operators in order of increasing precedence,</span><br/>    <span class=\"co1\"># preferring the rightmost.</span><br/>    <span class=\"re0\">$exp</span> <span class=\"sy0\">=~</span> <a href=\"http://perldoc.perl.org/functions/m.html\"><span class=\"kw3\">m</span></a><span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"sy0\">.+</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">+-</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">.+</span><span class=\"br0\">)</span><span class=\"br0\">}</span>x <span class=\"kw1\">or</span><br/>        <span class=\"re0\">$exp</span> <span class=\"sy0\">=~</span> <a href=\"http://perldoc.perl.org/functions/m.html\"><span class=\"kw3\">m</span></a><span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"sy0\">.+</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">*/</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">.+</span><span class=\"br0\">)</span><span class=\"br0\">}</span>x <span class=\"kw1\">or</span><br/>        <span class=\"co1\"># The expression must've been malformed somehow.</span><br/>        <span class=\"co1\"># (Note that unary minus isn't supported.)</span><br/>        <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Eh?: [$exp]<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$op</span><span class=\"sy0\">,</span> <span class=\"re0\">$lo</span><span class=\"sy0\">,</span> <span class=\"re0\">$ro</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"co3\">$2</span><span class=\"sy0\">,</span> <span class=\"co3\">$1</span><span class=\"sy0\">,</span> <span class=\"co3\">$3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># Restore the parenthetical expressions.</span><br/>    <a href=\"http://perldoc.perl.org/functions/s.html\"><span class=\"kw3\">s</span></a> <span class=\"br0\">{</span>\\<span class=\"br0\">[</span>p<span class=\"br0\">(</span><span class=\"re0\">\\d</span><span class=\"sy0\">+</span><span class=\"br0\">)</span>\\<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$paren_contents</span><span class=\"br0\">[</span><span class=\"co3\">$1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span>eg<br/>        <span class=\"kw1\">foreach</span> <span class=\"re0\">$lo</span><span class=\"sy0\">,</span> <span class=\"re0\">$ro</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># And recurse.</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">[</span><span class=\"re0\">$op</span><span class=\"sy0\">,</span> astize<span class=\"br0\">(</span><span class=\"re0\">$lo</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> astize<span class=\"br0\">(</span><span class=\"re0\">$ro</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/> <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">%ops</span> <span class=\"sy0\">=</span><br/>     <span class=\"br0\">(</span><span class=\"st_h\">'+'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>      <span class=\"st_h\">'-'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">-</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>      <span class=\"st_h\">'*'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>      <span class=\"st_h\">'/'</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw2\">sub</span> <span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> <span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">sub</span> ev_ast<br/>  <span class=\"co1\"># Evaluates an abstract syntax tree of the form returned by</span><br/>  <span class=\"co1\"># &amp;astize.</span><br/>   <span class=\"br0\">{</span><span class=\"kw1\">my</span> <span class=\"re0\">$ast</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># If $ast is just a number, return it as-is.</span><br/>    <a href=\"http://perldoc.perl.org/functions/ref.html\"><span class=\"kw3\">ref</span></a> <span class=\"re0\">$ast</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$ast</span><span class=\"sy0\">;</span><br/>    <span class=\"co1\"># Otherwise, recurse.</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$op</span><span class=\"sy0\">,</span> <span class=\"re0\">@operands</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re0\">@$ast</span><span class=\"sy0\">;</span><br/>    <span class=\"co5\">$_</span> <span class=\"sy0\">=</span> ev_ast<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">foreach</span> <span class=\"re0\">@operands</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$ops</span><span class=\"br0\">{</span><span class=\"re0\">$op</span><span class=\"br0\">}</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"re0\">@operands</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 44, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> ev <span class=\"br0\">(</span>Str <span class=\"re0\">$s</span> <span class=\"sy0\">--&gt;</span> Numeric<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw2\">grammar</span> expr <span class=\"br0\">{</span><br/>        <span class=\"kw2\">token</span> TOP <span class=\"br0\">{</span> <span class=\"sy0\">^</span> <span class=\"sy0\">&lt;</span>sum<span class=\"sy0\">&gt;</span> $ <span class=\"br0\">}</span><br/>        <span class=\"kw2\">token</span> sum <span class=\"br0\">{</span> <span class=\"sy0\">&lt;</span>product<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st_h\">'+'</span> <span class=\"sy0\">||</span> <span class=\"st_h\">'-'</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span>product<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">*</span> <span class=\"br0\">}</span><br/>        <span class=\"kw2\">token</span> product <span class=\"br0\">{</span> <span class=\"sy0\">&lt;</span>factor<span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st_h\">'*'</span> <span class=\"sy0\">||</span> <span class=\"st_h\">'/'</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span>factor<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">*</span> <span class=\"br0\">}</span><br/>        <span class=\"kw2\">token</span> factor <span class=\"br0\">{</span> <span class=\"sy0\">&lt;</span>unary_minus<span class=\"sy0\">&gt;?</span> <span class=\"br0\">[</span> <span class=\"sy0\">&lt;</span>parens<span class=\"sy0\">&gt;</span> <span class=\"sy0\">||</span> <span class=\"sy0\">&lt;</span>literal<span class=\"sy0\">&gt;</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>        <span class=\"kw2\">token</span> unary_minus <span class=\"br0\">{</span> <span class=\"st_h\">'-'</span> <span class=\"br0\">}</span><br/>        <span class=\"kw2\">token</span> parens <span class=\"br0\">{</span> <span class=\"st_h\">'('</span> <span class=\"sy0\">&lt;</span>sum<span class=\"sy0\">&gt;</span> <span class=\"st_h\">')'</span> <span class=\"br0\">}</span><br/>        <span class=\"kw2\">token</span> literal <span class=\"br0\">{</span> \\d<span class=\"sy0\">+</span> <span class=\"br0\">[</span><span class=\"st_h\">'.'</span> \\d<span class=\"sy0\">+</span><span class=\"br0\">]</span><span class=\"sy0\">?</span> <span class=\"sy0\">||</span> <span class=\"st_h\">'.'</span> \\d<span class=\"sy0\">+</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"kw2\">sub</span> minus <span class=\"br0\">(</span><span class=\"re0\">$b</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$b</span> <span class=\"sy0\">??</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">!!</span> <span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"kw2\">sub</span> sum <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">+</span><span class=\"br0\">]</span> flat product<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">&lt;</span>product<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw3\">map</span><br/>            <span class=\"br0\">{</span> minus<span class=\"br0\">(</span><span class=\"re0\">$^y</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'-'</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> product <span class=\"re0\">$^y</span><span class=\"sy0\">&lt;</span>product<span class=\"sy0\">&gt;</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>            <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">or</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"kw2\">sub</span> product <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">]</span> flat factor<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">&lt;</span>factor<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw3\">map</span><br/>            <span class=\"br0\">{</span> factor<span class=\"br0\">(</span><span class=\"re0\">$^y</span><span class=\"sy0\">&lt;</span>factor<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">**</span> minus<span class=\"br0\">(</span><span class=\"re0\">$^y</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'/'</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span><br/>            <span class=\"sy0\">|</span><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"kw1\">or</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"kw2\">sub</span> factor <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        minus<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">&lt;</span>unary_minus<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">&lt;</span>parens<span class=\"sy0\">&gt;</span><br/>          <span class=\"sy0\">??</span> sum <span class=\"re0\">$x</span><span class=\"sy0\">&lt;</span>parens<span class=\"sy0\">&gt;&lt;</span>sum<span class=\"sy0\">&gt;</span><br/>          <span class=\"sy0\">!!</span> <span class=\"re0\">$x</span><span class=\"sy0\">&lt;</span>literal<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    expr<span class=\"sy0\">.</span><span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">~</span><span class=\"br0\">]</span> <span class=\"kw3\">split</span> <span class=\"co2\">/\\s+/</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    $<span class=\"sy0\">/</span> <span class=\"kw1\">or</span> <span class=\"kw1\">fail</span> <span class=\"st_h\">'No parse.'</span><span class=\"sy0\">;</span><br/>    sum $<span class=\"sy0\">/&lt;</span>sum<span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Testing:</span><br/>\u00a0<br/><span class=\"kw3\">say</span> ev <span class=\"st_h\">'5'</span><span class=\"sy0\">;</span>                                    <span class=\"co1\">#   5</span><br/><span class=\"kw3\">say</span> ev <span class=\"st_h\">'1 + 2 - 3 * 4 / 5'</span><span class=\"sy0\">;</span>                    <span class=\"co1\">#   0.6</span><br/><span class=\"kw3\">say</span> ev <span class=\"st_h\">'1 + 5*3.4 - .5  -4 / -2 * (3+4) -6'</span><span class=\"sy0\">;</span>   <span class=\"co1\">#  25.5</span><br/><span class=\"kw3\">say</span> ev <span class=\"st_h\">'((11+15)*15)* 2 + (3) * -4 *1'</span><span class=\"sy0\">;</span>        <span class=\"co1\"># 768</span></pre>"}, {"lang": "Phix", "loc": 218, "block": "<pre class=\"text highlighted_source\">sequence opstack = {}       -- atom elements are literals,<br/>                            -- sequence elements are subexpressions<br/>                            -- on completion length(opstack) should be 1<br/>object token<br/>\u00a0<br/>constant op_p_p = 0         --  1: expressions stored as op,p1,p2<br/>    --   p_op_p             --  0: expressions stored as p1,op,p2<br/>    --   p_p_op             -- -1: expressions stored as p1,p2,op<br/>\u00a0<br/>object op = 0   -- 0 if none, else \"+\", \"-\", \"*\", \"/\", \"^\", \"%\", or \"u-\"<br/>\u00a0<br/>string s        -- the expression being parsed<br/>integer ch<br/>integer sidx<br/>\u00a0<br/>procedure err(string msg)<br/>    printf(1,\"%s\\n%s^\u00a0%s\\n\\nPressEnter...\",{s,repeat(' ',sidx-1),msg})<br/>    {} = wait_key()<br/>    abort(0)<br/>end procedure<br/>\u00a0<br/>procedure nxtch(object msg=\"eof\")<br/>    sidx += 1<br/>    if sidx&gt;length(s) then<br/>        if string(msg) then err(msg) end if<br/>        ch = -1<br/>    else<br/>        ch = s[sidx]<br/>    end if<br/>end procedure<br/>\u00a0<br/>procedure skipspaces()<br/>    while find(ch,\" \\t\\r\\n\")!=0 do nxtch(0) end while<br/>end procedure<br/>\u00a0<br/>procedure get_token()<br/>atom n, fraction<br/>integer dec<br/>    skipspaces()<br/>    if ch=-1 then token = \"eof\" return end if<br/>    if ch&gt;='0' and ch&lt;='9' then<br/>        n = ch-'0'<br/>        while 1 do<br/>            nxtch(0)<br/>            if ch&lt;'0' or ch&gt;'9' then exit end if<br/>            n = n*10+ch-'0'<br/>        end while<br/>        if ch='.' then<br/>            dec = 1<br/>            fraction = 0<br/>            while 1 do<br/>                nxtch(0)<br/>                if ch&lt;'0' or ch&gt;'9' then exit end if<br/>                fraction = fraction*10 + ch-'0'<br/>                dec *= 10<br/>            end while<br/>            n += fraction/dec<br/>        end if<br/>--      if find(ch,\"eE\") then   -- you get the idea<br/>--      end if<br/>        token = n<br/>        return<br/>    end if<br/>    if find(ch,\"+-/*()^%\")=0 then err(\"syntax error\") end if<br/>    token = s[sidx..sidx]<br/>    nxtch(0)<br/>    return<br/>end procedure<br/>\u00a0<br/>procedure Match(string t)<br/>    if token!=t then err(t&amp;\" expected\") end if<br/>    get_token()<br/>end procedure<br/>\u00a0<br/>procedure PopFactor()<br/>object p2 = opstack[$]<br/>    if op=\"u-\" then<br/>        if op_p_p=1 then                        -- op_p_p<br/>            opstack[$] = {op,0,p2}<br/>        elsif op_p_p=0 then                     -- p_op_p<br/>            opstack[$] = {0,op,p2}<br/>        else -- -1                              -- p_p_op<br/>            opstack[$] = {0,p2,op}<br/>        end if<br/>    else<br/>        opstack = opstack[1..$-1]<br/>        if op_p_p=1 then                        -- op_p_p<br/>            opstack[$] = {op,opstack[$],p2}<br/>        elsif op_p_p=0 then                     -- p_op_p<br/>            opstack[$] = {opstack[$],op,p2}<br/>        else -- -1                              -- p_p_op<br/>            opstack[$] = {opstack[$],p2,op}<br/>        end if<br/>    end if<br/>    op = 0<br/>end procedure<br/>\u00a0<br/>procedure PushFactor(atom t)<br/>    if op!=0 then PopFactor() end if<br/>    opstack = append(opstack,t)<br/>end procedure<br/>\u00a0<br/>procedure PushOp(string t)<br/>    if op!=0 then PopFactor() end if<br/>    op = t<br/>end procedure<br/>\u00a0<br/>procedure Factor()<br/>    if atom(token) then<br/>        PushFactor(token)<br/>        if ch!=-1 then<br/>            get_token()<br/>        end if<br/>    elsif token=\"-\" then<br/>        get_token()<br/>--      Factor()<br/>        Expr(3) -- makes \"-3^2\" yield -9 (ie -(3^2)) not 9 (ie (-3)^2).<br/>        if op!=0 then PopFactor() end if<br/>        if integer(opstack[$]) then<br/>            opstack[$] = -opstack[$]<br/>        else<br/>            PushOp(\"u-\")<br/>        end if<br/>    elsif token=\"(\" then<br/>        get_token()<br/>        Expr(0)<br/>        Match(\")\")<br/>    elsif token=\"+\" then -- (ignore)<br/>        nxtch()<br/>        Factor()<br/>    else<br/>        err(\"syntax error\")<br/>    end if<br/>end procedure<br/>\u00a0<br/>constant {operators,<br/>          precedence,<br/>          associativity} = columnize({{\"^\",3,0},<br/>                                      {\"%\",2,1},<br/>                                      {\"*\",2,1},<br/>                                      {\"/\",2,1},<br/>                                      {\"+\",1,1},<br/>                                      {\"-\",1,1},<br/>                                      $})<br/>\u00a0<br/>procedure Expr(integer p)<br/>--<br/>-- Parse an expression, using precedence climbing.<br/>--<br/>-- p is the precedence level we should parse to, eg/ie<br/>--      4: Factor only (may as well just call Factor)<br/>--      3: \"\" and ^<br/>--      2: \"\" and *,/,%<br/>--      1: \"\" and +,-<br/>--      0: full expression (effectively the same as 1)<br/>--  obviously, parentheses override any setting of p.<br/>--<br/>integer k, thisp<br/>    Factor()<br/>    while 1 do<br/>        k = find(token,operators) -- *,/,+,-<br/>        if k=0 then exit end if<br/>        thisp = precedence[k]<br/>        if thisp&lt;p then exit end if<br/>        get_token()<br/>        Expr(thisp+associativity[k])<br/>        PushOp(operators[k])<br/>    end while<br/>end procedure<br/>\u00a0<br/>function eval(object s)<br/>object lhs, rhs<br/>string op<br/>    if atom(s) then<br/>        return s<br/>    end if<br/>    if op_p_p=1 then            -- op_p_p<br/>        {op,lhs,rhs} = s<br/>    elsif op_p_p=0 then         -- p_op_p<br/>        {lhs,op,rhs} = s<br/>    else -- -1                  -- p_p_op<br/>        {lhs,rhs,op} = s<br/>    end if<br/>    if sequence(lhs) then lhs = eval(lhs) end if<br/>    if sequence(rhs) then rhs = eval(rhs) end if<br/>    if op=\"+\" then<br/>        return lhs+rhs<br/>    elsif op=\"-\" then<br/>        return lhs-rhs<br/>    elsif op=\"*\" then<br/>        return lhs*rhs<br/>    elsif op=\"/\" then<br/>        return lhs/rhs<br/>    elsif op=\"^\" then<br/>        return power(lhs,rhs)<br/>    elsif op=\"%\" then<br/>        return remainder(lhs,rhs)<br/>    elsif op=\"u-\" then<br/>        return -rhs<br/>    else<br/>       \u00a0?9/0<br/>    end if<br/>end function<br/>\u00a0<br/>s = \"3+4+5+6*7/1*5^2^3\"<br/>sidx = 0<br/>nxtch()<br/>get_token()<br/>Expr(0)<br/>if op!=0 then PopFactor() end if<br/>if length(opstack)!=1 then err(\"some error\") end if<br/>puts(1,\"AST (flat): \")<br/>?opstack[1]<br/>puts(1,\"AST (tree):\\n\")<br/>ppEx(opstack[1],{pp_Nest,6})<br/>puts(1,\"result: \")<br/>?eval(opstack[1])<br/>{} = wait_key()</pre>"}, {"lang": "PicoLisp", "loc": 23, "block": "<pre class=\"text highlighted_source\">(de ast (Str)<br/>   (let *L (str Str \"\")<br/>      (aggregate) ) )<br/>\u00a0<br/>(de aggregate ()<br/>   (let X (product)<br/>      (while (member (car *L) '(\"+\" \"-\"))<br/>         (setq X (list (intern (pop '*L)) X (product))) )<br/>      X ) )<br/>\u00a0<br/>(de product ()<br/>   (let X (term)<br/>      (while (member (car *L) '(\"*\" \"/\"))<br/>         (setq X (list (intern (pop '*L)) X (term))) )<br/>      X ) )<br/>\u00a0<br/>(de term ()<br/>   (let X (pop '*L)<br/>      (cond<br/>         ((num? X) X)<br/>         ((= \"+\" X) (term))<br/>         ((= \"-\" X) (list '- (term)))<br/>         ((= \"(\" X) (prog1 (aggregate) (pop '*L)))) ) )</pre>"}, {"lang": "Pop11", "loc": 149, "block": "<pre class=\"text highlighted_source\">/* Scanner routines */<br/>/* Uncomment the following to parse data from standard input<br/>\u00a0<br/>vars itemrep;<br/>incharitem(charin) -&gt; itemrep;<br/>\u00a0<br/>*/<br/>\u00a0<br/>;;; Current symbol<br/>vars sym;<br/>\u00a0<br/>define get_sym();<br/>    itemrep() -&gt; sym;<br/>enddefine;<br/>\u00a0<br/>define expect(x);<br/>    lvars x;<br/>    if x /= sym then<br/>        printf(x, 'Error, expected\u00a0%p\\n');<br/>        mishap(sym, 1, 'Example parser error');<br/>    endif;<br/>    get_sym();<br/>enddefine;<br/>\u00a0<br/>lconstant res_list = [( ) + * ];<br/>\u00a0<br/>lconstant reserved = newproperty(<br/>  maplist(res_list, procedure(x); [^x ^(true)]; endprocedure),<br/>    20, false, \"perm\");<br/>\u00a0<br/>/*<br/>  Parser for arithmetic expressions<br/>*/<br/>/*<br/>expr: term<br/>   | expr \"+\" term<br/>   | expr \"-\" term<br/>  \u00a0;<br/>*/<br/>\u00a0<br/>define do_expr() -&gt; result;<br/>    lvars result = do_term(), op;<br/>    while sym = \"+\" or sym = \"-\" do<br/>        sym -&gt; op;<br/>        get_sym();<br/>        [^op ^result ^(do_term())] -&gt; result;<br/>    endwhile;<br/>enddefine;<br/>\u00a0<br/>/*<br/>term: factor<br/>   | term \"*\" factor<br/>   | term \"/\" factor<br/>  \u00a0;<br/>*/<br/>\u00a0<br/>define do_term() -&gt; result;<br/>    lvars result = do_factor(), op;<br/>    while sym = \"*\" or sym = \"/\" do<br/>        sym -&gt; op;<br/>        get_sym();<br/>        [^op ^result ^(do_factor())] -&gt; result;<br/>    endwhile;<br/>enddefine;<br/>\u00a0<br/>/*<br/>factor: word<br/>   | constant<br/>   | \"(\" expr \")\"<br/>  \u00a0;<br/>*/<br/>\u00a0<br/>define do_factor() -&gt; result;<br/>    if sym = \"(\" then<br/>        get_sym();<br/>        do_expr() -&gt; result;<br/>        expect(\")\");<br/>    elseif isinteger(sym) or isbiginteger(sym) then<br/>        sym -&gt; result;<br/>        get_sym();<br/>    else<br/>        if reserved(sym) then<br/>            printf(sym, 'unexpected symbol\u00a0%p\\n');<br/>            mishap(sym, 1, 'Example parser syntax error');<br/>        endif;<br/>        sym -&gt; result;<br/>        get_sym();<br/>    endif;<br/>enddefine;<br/>\u00a0<br/>/* Expression evaluator, returns false on error (currently only<br/>   division by 0 */<br/>\u00a0<br/>define arith_eval(expr);<br/>    lvars op, arg1, arg2;<br/>    if not(expr) then<br/>        return(expr);<br/>    endif;<br/>    if isinteger(expr) or isbiginteger(expr) then<br/>        return(expr);<br/>    endif;<br/>    expr(1) -&gt; op;<br/>    arith_eval(expr(2)) -&gt; arg1;<br/>    arith_eval(expr(3)) -&gt; arg2;<br/>    if not(arg1) or not(arg2) then<br/>        return(false);<br/>    endif;<br/>    if op = \"+\" then<br/>        return(arg1 + arg2);<br/>    elseif op = \"-\" then<br/>        return(arg1 - arg2);<br/>    elseif op = \"*\" then<br/>        return(arg1 * arg2);<br/>    elseif op = \"/\" then<br/>        if arg2 = 0 then<br/>            return(false);<br/>        else<br/>            return(arg1 div arg2);<br/>        endif;<br/>    else<br/>        printf('Internal error\\n');<br/>        return(false);<br/>    endif;<br/>enddefine;<br/>\u00a0<br/>/* Given list, create item repeater.  Input list is stored in a<br/>   closure are traversed when new item is requested. */<br/>\u00a0<br/>define listitemrep(lst);<br/>    procedure();<br/>        lvars item;<br/>        if lst = [] then<br/>            termin;<br/>        else<br/>            front(lst) -&gt; item;<br/>            back(lst) -&gt; lst;<br/>            item;<br/>         endif;<br/>     endprocedure;<br/>enddefine;<br/>\u00a0<br/>/* Initialise scanner */<br/>\u00a0<br/>listitemrep([(3 + 50) * 7 - 100 / 10]) -&gt; itemrep;<br/>\u00a0<br/>get_sym();<br/>\u00a0<br/>;;; Test it<br/>arith_eval(do_expr()) =&gt;</pre>"}, {"lang": "Prolog", "loc": 50, "block": "<pre class=\"prolog highlighted_source\"><span class=\"co1\">% Lexer</span><br/> numeric<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"nu0\">48</span> <span class=\"sy6\">=&lt;</span> X<span class=\"sy4\">,</span> X <span class=\"sy6\">=&lt;</span> <span class=\"nu0\">57</span><span class=\"sy4\">.</span><br/> not_numeric<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <span class=\"nu0\">48</span> <span class=\"sy6\">&gt;</span> X <span class=\"sy4\">;</span> X <span class=\"sy6\">&gt;</span> <span class=\"nu0\">57</span><span class=\"sy4\">.</span><br/>\u00a0<br/> lex1<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/> lex1<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">40</span><span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'('</span><span class=\"sy5\">|</span>Ys<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> lex1<span class=\"br0\">(</span>Xs<span class=\"sy4\">,</span> Ys<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/> lex1<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">41</span><span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">')'</span><span class=\"sy5\">|</span>Ys<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> lex1<span class=\"br0\">(</span>Xs<span class=\"sy4\">,</span> Ys<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/> lex1<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">43</span><span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'+'</span><span class=\"sy5\">|</span>Ys<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> lex1<span class=\"br0\">(</span>Xs<span class=\"sy4\">,</span> Ys<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/> lex1<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">45</span><span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'-'</span><span class=\"sy5\">|</span>Ys<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> lex1<span class=\"br0\">(</span>Xs<span class=\"sy4\">,</span> Ys<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/> lex1<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">42</span><span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'*'</span><span class=\"sy5\">|</span>Ys<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> lex1<span class=\"br0\">(</span>Xs<span class=\"sy4\">,</span> Ys<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/> lex1<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">47</span><span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'/'</span><span class=\"sy5\">|</span>Ys<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> lex1<span class=\"br0\">(</span>Xs<span class=\"sy4\">,</span> Ys<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/> lex1<span class=\"br0\">(</span><span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>N<span class=\"sy5\">|</span>Ys<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> numeric<span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"sy4\">,</span> N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X <span class=\"sy3\">-</span> <span class=\"nu0\">48</span><span class=\"sy4\">,</span> lex1<span class=\"br0\">(</span>Xs<span class=\"sy4\">,</span> Ys<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/> lex2<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/> lex2<span class=\"br0\">(</span><span class=\"br0\">[</span>X<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>X<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/> lex2<span class=\"br0\">(</span><span class=\"br0\">[</span>Xa<span class=\"sy4\">,</span>Xb<span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Xa<span class=\"sy5\">|</span>Ys<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom</span></a><span class=\"br0\">(</span>Xa<span class=\"br0\">)</span><span class=\"sy4\">,</span> lex2<span class=\"br0\">(</span><span class=\"br0\">[</span>Xb<span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"sy4\">,</span> Ys<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/> lex2<span class=\"br0\">(</span><span class=\"br0\">[</span>Xa<span class=\"sy4\">,</span>Xb<span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Xa<span class=\"sy5\">|</span>Ys<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number</span></a><span class=\"br0\">(</span>Xa<span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom</span></a><span class=\"br0\">(</span>Xb<span class=\"br0\">)</span><span class=\"sy4\">,</span> lex2<span class=\"br0\">(</span><span class=\"br0\">[</span>Xb<span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"sy4\">,</span> Ys<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/> lex2<span class=\"br0\">(</span><span class=\"br0\">[</span>Xa<span class=\"sy4\">,</span>Xb<span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Y<span class=\"sy5\">|</span>Ys<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number</span></a><span class=\"br0\">(</span>Xa<span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number</span></a><span class=\"br0\">(</span>Xb<span class=\"br0\">)</span><span class=\"sy4\">,</span> N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Xa <span class=\"sy3\">*</span> <span class=\"nu0\">10</span> <span class=\"sy3\">+</span> Xb<span class=\"sy4\">,</span> lex2<span class=\"br0\">(</span><span class=\"br0\">[</span>N<span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Y<span class=\"sy5\">|</span>Ys<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/> <span class=\"co1\">% Parser</span><br/> oper<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"sy3\">*</span><span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> X <span class=\"sy3\">*</span> Y<span class=\"br0\">)</span><span class=\"sy4\">.</span> oper<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"sy3\">/</span><span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> X <span class=\"sy3\">/</span> Y<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/> oper<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"sy3\">+</span><span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> X <span class=\"sy3\">+</span> Y<span class=\"br0\">)</span><span class=\"sy4\">.</span> oper<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> <span class=\"sy3\">-</span><span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> X <span class=\"sy3\">-</span> Y<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/> num<span class=\"br0\">(</span>D<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span>D<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">{</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number</span></a><span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy4\">.</span><br/>\u00a0<br/> expr<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> Z<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> num<span class=\"br0\">(</span>Z<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/> expr<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span> Z<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">{</span>Z <span class=\"sy6\">=</span> <span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">'('</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> expr<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> X<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">')'</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0<br/> expr<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Z<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">{</span>succ<span class=\"br0\">(</span>N0<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy4\">,</span> <span class=\"br0\">{</span>oper<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Op</span></a><span class=\"sy4\">,</span> X<span class=\"sy4\">,</span> Y<span class=\"sy4\">,</span> Z<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy4\">,</span> expr<span class=\"br0\">(</span>N0<span class=\"sy4\">,</span> X<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Op</span></a><span class=\"br0\">]</span><span class=\"sy4\">,</span> expr<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Y<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/> expr<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> Z<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">{</span>succ<span class=\"br0\">(</span>N0<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy4\">,</span> expr<span class=\"br0\">(</span>N0<span class=\"sy4\">,</span> Z<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/> parse<span class=\"br0\">(</span>Tokens<span class=\"sy4\">,</span> Expr<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> expr<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> Expr<span class=\"sy4\">,</span> Tokens<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/> <span class=\"co1\">% Evaluator</span><br/> evaluate<span class=\"br0\">(</span>E<span class=\"sy4\">,</span> E<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">number</span></a><span class=\"br0\">(</span>E<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/> evaluate<span class=\"br0\">(</span>A <span class=\"sy3\">+</span> B<span class=\"sy4\">,</span> E<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> evaluate<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> Ae<span class=\"br0\">)</span><span class=\"sy4\">,</span> evaluate<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> Be<span class=\"br0\">)</span><span class=\"sy4\">,</span> E <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Ae <span class=\"sy3\">+</span> Be<span class=\"sy4\">.</span><br/> evaluate<span class=\"br0\">(</span>A <span class=\"sy3\">-</span> B<span class=\"sy4\">,</span> E<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> evaluate<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> Ae<span class=\"br0\">)</span><span class=\"sy4\">,</span> evaluate<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> Be<span class=\"br0\">)</span><span class=\"sy4\">,</span> E <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Ae <span class=\"sy3\">-</span> Be<span class=\"sy4\">.</span><br/> evaluate<span class=\"br0\">(</span>A <span class=\"sy3\">*</span> B<span class=\"sy4\">,</span> E<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> evaluate<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> Ae<span class=\"br0\">)</span><span class=\"sy4\">,</span> evaluate<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> Be<span class=\"br0\">)</span><span class=\"sy4\">,</span> E <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Ae <span class=\"sy3\">*</span> Be<span class=\"sy4\">.</span><br/> evaluate<span class=\"br0\">(</span>A <span class=\"sy3\">/</span> B<span class=\"sy4\">,</span> E<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> evaluate<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> Ae<span class=\"br0\">)</span><span class=\"sy4\">,</span> evaluate<span class=\"br0\">(</span>B<span class=\"sy4\">,</span> Be<span class=\"br0\">)</span><span class=\"sy4\">,</span> E <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Ae <span class=\"sy3\">/</span> Be<span class=\"sy4\">.</span><br/>\u00a0<br/> <span class=\"co1\">% Solution</span><br/> calculator<span class=\"br0\">(</span>String<span class=\"sy4\">,</span> Value<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>    lex1<span class=\"br0\">(</span>String<span class=\"sy4\">,</span> Tokens1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    lex2<span class=\"br0\">(</span>Tokens1<span class=\"sy4\">,</span> Tokens2<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    parse<span class=\"br0\">(</span>Tokens2<span class=\"sy4\">,</span> Expression<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>    evaluate<span class=\"br0\">(</span>Expression<span class=\"sy4\">,</span> Value<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/> <span class=\"co1\">% Example use</span><br/> <span class=\"co1\">% calculator(\"(3+50)*7-9\", X).</span></pre>"}, {"lang": "Python", "loc": 116, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">operator</span><br/>\u00a0<br/><span class=\"kw1\">class</span> AstNode<span class=\"br0\">(</span><span class=\"kw2\">object</span><span class=\"br0\">)</span>:<br/>   <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span> <span class=\"kw2\">self</span><span class=\"sy0\">,</span> opr<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> right <span class=\"br0\">)</span>:<br/>      <span class=\"kw2\">self</span>.<span class=\"me1\">opr</span> <span class=\"sy0\">=</span> opr<br/>      <span class=\"kw2\">self</span>.<span class=\"me1\">l</span> <span class=\"sy0\">=</span> left<br/>      <span class=\"kw2\">self</span>.<span class=\"me1\">r</span> <span class=\"sy0\">=</span> right<br/>\u00a0<br/>   <span class=\"kw1\">def</span> <span class=\"kw2\">eval</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">self</span>.<span class=\"me1\">opr</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">l</span>.<span class=\"kw2\">eval</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">self</span>.<span class=\"me1\">r</span>.<span class=\"kw2\">eval</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">class</span> LeafNode<span class=\"br0\">(</span><span class=\"kw2\">object</span><span class=\"br0\">)</span>:<br/>   <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span> <span class=\"kw2\">self</span><span class=\"sy0\">,</span> valStrg <span class=\"br0\">)</span>:<br/>      <span class=\"kw2\">self</span>.<span class=\"me1\">v</span> <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>valStrg<span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">def</span> <span class=\"kw2\">eval</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">self</span>.<span class=\"me1\">v</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Yaccer<span class=\"br0\">(</span><span class=\"kw2\">object</span><span class=\"br0\">)</span>:<br/>   <span class=\"kw1\">def</span> <span class=\"kw4\">__init__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>      <span class=\"kw2\">self</span>.<span class=\"me1\">operstak</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>      <span class=\"kw2\">self</span>.<span class=\"me1\">nodestak</span> <span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><br/>      <span class=\"kw2\">self</span>.<span class=\"kw4\">__dict__</span>.<span class=\"me1\">update</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">state1</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">def</span> v1<span class=\"br0\">(</span> <span class=\"kw2\">self</span><span class=\"sy0\">,</span> valStrg <span class=\"br0\">)</span>:<br/>      <span class=\"co1\"># Value String</span><br/>      <span class=\"kw2\">self</span>.<span class=\"me1\">nodestak</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span> LeafNode<span class=\"br0\">(</span>valStrg<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">self</span>.<span class=\"kw4\">__dict__</span>.<span class=\"me1\">update</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">state2</span><span class=\"br0\">)</span><br/>      <span class=\"co1\">#print 'push', valStrg</span><br/>\u00a0<br/>   <span class=\"kw1\">def</span> o2<span class=\"br0\">(</span> <span class=\"kw2\">self</span><span class=\"sy0\">,</span> operchar <span class=\"br0\">)</span>:<br/>      <span class=\"co1\"># Operator character or open paren in state1</span><br/>      <span class=\"kw1\">def</span> openParen<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span>:<br/>         <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>\t\t<span class=\"co1\"># function should not be called</span><br/>\u00a0<br/>      opDict<span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">'+'</span>: <span class=\"br0\">(</span> <span class=\"kw3\">operator</span>.<span class=\"me1\">add</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>         <span class=\"st0\">'-'</span>: <span class=\"br0\">(</span><span class=\"kw3\">operator</span>.<span class=\"me1\">sub</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>         <span class=\"st0\">'*'</span>: <span class=\"br0\">(</span><span class=\"kw3\">operator</span>.<span class=\"me1\">mul</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>         <span class=\"st0\">'/'</span>: <span class=\"br0\">(</span><span class=\"kw3\">operator</span>.<span class=\"me1\">div</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>         <span class=\"st0\">'^'</span>: <span class=\"br0\">(</span> <span class=\"kw2\">pow</span><span class=\"sy0\">,</span>         <span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span>  <span class=\"co1\"># right associative exponentiation for grins</span><br/>         <span class=\"st0\">'('</span>: <span class=\"br0\">(</span> openParen<span class=\"sy0\">,</span>   <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span><br/>         <span class=\"br0\">}</span><br/>      operPrecidence <span class=\"sy0\">=</span> opDict<span class=\"br0\">[</span>operchar<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>      <span class=\"kw2\">self</span>.<span class=\"me1\">redeuce</span><span class=\"br0\">(</span>operPrecidence<span class=\"br0\">)</span><br/>\u00a0<br/>      <span class=\"kw2\">self</span>.<span class=\"me1\">operstak</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span>opDict<span class=\"br0\">[</span>operchar<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      <span class=\"kw2\">self</span>.<span class=\"kw4\">__dict__</span>.<span class=\"me1\">update</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">state1</span><span class=\"br0\">)</span><br/>      <span class=\"co1\"># print 'pushop', operchar</span><br/>\u00a0<br/>   <span class=\"kw1\">def</span> syntaxErr<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> char <span class=\"br0\">)</span>:<br/>      <span class=\"co1\"># Open Parenthesis </span><br/>      <span class=\"kw1\">print</span> <span class=\"st0\">'parse error - near operator \"%s\"'</span>\u00a0%char<br/>\u00a0<br/>   <span class=\"kw1\">def</span> pc2<span class=\"br0\">(</span> <span class=\"kw2\">self</span><span class=\"sy0\">,</span>operchar <span class=\"br0\">)</span>:<br/>      <span class=\"co1\"># Close Parenthesis</span><br/>      <span class=\"co1\"># reduce node until matching open paren found </span><br/>      <span class=\"kw2\">self</span>.<span class=\"me1\">redeuce</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">operstak</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span>:<br/>         <span class=\"kw2\">self</span>.<span class=\"me1\">operstak</span>.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span>\t\t<span class=\"co1\"># pop off open parenthesis</span><br/>      <span class=\"kw1\">else</span>:<br/>         <span class=\"kw1\">print</span> <span class=\"st0\">'Error - no open parenthesis matches close parens.'</span><br/>      <span class=\"kw2\">self</span>.<span class=\"kw4\">__dict__</span>.<span class=\"me1\">update</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">state2</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">def</span> end<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>      <span class=\"kw2\">self</span>.<span class=\"me1\">redeuce</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">self</span>.<span class=\"me1\">nodestak</span>.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>   <span class=\"kw1\">def</span> redeuce<span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"sy0\">,</span> precidence<span class=\"br0\">)</span>:<br/>      <span class=\"kw1\">while</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw2\">self</span>.<span class=\"me1\">operstak</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span>:<br/>         tailOper <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">operstak</span><span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>         <span class=\"kw1\">if</span> tailOper<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> precidence: <span class=\"kw1\">break</span><br/>\u00a0<br/>         tailOper <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">operstak</span>.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>         vrgt <span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">nodestak</span>.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>         vlft<span class=\"sy0\">=</span> <span class=\"kw2\">self</span>.<span class=\"me1\">nodestak</span>.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>         <span class=\"kw2\">self</span>.<span class=\"me1\">nodestak</span>.<span class=\"me1\">append</span><span class=\"br0\">(</span> AstNode<span class=\"br0\">(</span>tailOper<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> vlft<span class=\"sy0\">,</span> vrgt<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"co1\"># print 'reduce'</span><br/>\u00a0<br/>   state1 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">'v'</span>: v1<span class=\"sy0\">,</span> <span class=\"st0\">'o'</span>:syntaxErr<span class=\"sy0\">,</span> <span class=\"st0\">'po'</span>:o2<span class=\"sy0\">,</span> <span class=\"st0\">'pc'</span>:syntaxErr <span class=\"br0\">}</span><br/>   state2 <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"st0\">'v'</span>: syntaxErr<span class=\"sy0\">,</span> <span class=\"st0\">'o'</span>:o2<span class=\"sy0\">,</span> <span class=\"st0\">'po'</span>:syntaxErr<span class=\"sy0\">,</span> <span class=\"st0\">'pc'</span>:pc2 <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> Lex<span class=\"br0\">(</span> exprssn<span class=\"sy0\">,</span> p <span class=\"br0\">)</span>:<br/>   bgn <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><br/>   cp <span class=\"sy0\">=</span> -<span class=\"nu0\">1</span><br/>   <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> exprssn:<br/>      cp +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">if</span> c <span class=\"kw1\">in</span> <span class=\"st0\">'+-/*^()'</span>:         <span class=\"co1\"># throw in exponentiation (^)for grins</span><br/>         <span class=\"kw1\">if</span> bgn <span class=\"kw1\">is</span> <span class=\"kw1\">not</span> <span class=\"kw2\">None</span>:<br/>            p.<span class=\"me1\">v</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> exprssn<span class=\"br0\">[</span>bgn:cp<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            bgn <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><br/>         <span class=\"kw1\">if</span> c<span class=\"sy0\">==</span><span class=\"st0\">'('</span>: p.<span class=\"me1\">po</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><br/>         <span class=\"kw1\">elif</span> c<span class=\"sy0\">==</span><span class=\"st0\">')'</span>:p.<span class=\"me1\">pc</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><br/>         <span class=\"kw1\">else</span>: p.<span class=\"me1\">o</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> c<span class=\"br0\">)</span><br/>      <span class=\"kw1\">elif</span> c <span class=\"kw1\">in</span> <span class=\"st0\">' <span class=\"es0\">\\t</span>'</span>:<br/>         <span class=\"kw1\">if</span> bgn <span class=\"kw1\">is</span> <span class=\"kw1\">not</span> <span class=\"kw2\">None</span>:<br/>            p.<span class=\"me1\">v</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> exprssn<span class=\"br0\">[</span>bgn:cp<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            bgn <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><br/>      <span class=\"kw1\">elif</span> c <span class=\"kw1\">in</span> <span class=\"st0\">'0123456789'</span>:<br/>         <span class=\"kw1\">if</span> bgn <span class=\"kw1\">is</span> <span class=\"kw2\">None</span>:<br/>            bgn <span class=\"sy0\">=</span> cp<br/>      <span class=\"kw1\">else</span>:<br/>         <span class=\"kw1\">print</span> <span class=\"st0\">'Invalid character in expression'</span><br/>         <span class=\"kw1\">if</span> bgn <span class=\"kw1\">is</span> <span class=\"kw1\">not</span> <span class=\"kw2\">None</span>:<br/>            p.<span class=\"me1\">v</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> exprssn<span class=\"br0\">[</span>bgn:cp<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            bgn <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><br/>\u00a0<br/>   <span class=\"kw1\">if</span> bgn <span class=\"kw1\">is</span> <span class=\"kw1\">not</span> <span class=\"kw2\">None</span>:<br/>      p.<span class=\"me1\">v</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span> exprssn<span class=\"br0\">[</span>bgn:cp+<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      bgn <span class=\"sy0\">=</span> <span class=\"kw2\">None</span><br/>   <span class=\"kw1\">return</span> p.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>expr <span class=\"sy0\">=</span> <span class=\"kw2\">raw_input</span><span class=\"br0\">(</span><span class=\"st0\">\"Expression:\"</span><span class=\"br0\">)</span><br/>astTree <span class=\"sy0\">=</span> Lex<span class=\"br0\">(</span> expr<span class=\"sy0\">,</span> Yaccer<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">print</span> expr<span class=\"sy0\">,</span> <span class=\"st0\">'='</span><span class=\"sy0\">,</span>astTree.<span class=\"kw2\">eval</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 37, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(require parser-tools/yacc parser-tools/lex<br/>         (prefix-in ~ parser-tools/lex-sre))<br/>\u00a0<br/>(define-tokens value-tokens (NUM))<br/>(define-empty-tokens op-tokens (OPEN CLOSE + - * / EOF NEG))<br/>\u00a0<br/>(define lex<br/>  (lexer [(eof) 'EOF]<br/>         [whitespace (lex input-port)]<br/>         [(~or \"+\" \"-\" \"*\" \"/\") (string-&gt;symbol lexeme)]<br/>         [\"(\" 'OPEN]<br/>         [\")\" 'CLOSE]<br/>         [(~: (~+ numeric) (~? (~: #\\. (~* numeric))))<br/>          (token-NUM (string-&gt;number lexeme))]))<br/>\u00a0<br/>(define parse<br/>  (parser [start E] [end EOF]<br/>          [tokens value-tokens op-tokens]<br/>          [error void]<br/>          [precs (left - +) (left * /) (left NEG)]<br/>          [grammar (E [(NUM) $1]<br/>                      [(E + E) (+ $1 $3)]<br/>                      [(E - E) (- $1 $3)]<br/>                      [(E * E) (* $1 $3)]<br/>                      [(E / E) (/ $1 $3)]<br/>                      [(- E) (prec NEG) (- $2)]<br/>                      [(OPEN E CLOSE) $2])]))<br/>\u00a0<br/>(define (calc str)<br/>  (define i (open-input-string str))<br/>  (displayln (parse (\u03bb() (lex i)))))<br/>\u00a0<br/>(calc \"(1 + 2 * 3) - (1+2)*-3\")<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 116, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  evaluates an  infix\u2500type arithmetic expression  and displays the result.*/</span><br/>nchars = <span class=\"st0\">'0123456789.eEdDqQ'</span>                     <span class=\"coMULTI\">/*possible parts of a number,  sans  \u00b1 */</span><br/>e=<span class=\"st0\">'***error***'</span>;    $=<span class=\"st0\">\" \"</span>;     doubleOps= <span class=\"st0\">'&amp;|*/'</span>;      z=       <span class=\"coMULTI\">/*handy\u2500dandy variables.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x <span class=\"nu0\">1</span> ox1;    <span class=\"kw1\">if</span> x=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> serr <span class=\"st0\">\"no input was specified.\"</span><br/>x=<span class=\"kw6\">space</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;   L=<span class=\"kw6\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;     x=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>x, <span class=\"st0\">'()()'</span>, <span class=\"st0\">\"[]{}\"</span><span class=\"br0\">)</span><br/>j=<span class=\"nu0\">0</span><br/>     <span class=\"kw1\">do</span> <span class=\"kw2\">forever</span>;    j=j+<span class=\"nu0\">1</span>;     <span class=\"kw1\">if</span> j<span class=\"sy0\">&gt;</span>L  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>;    _=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>x, j, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;   _2=getX<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>     newT=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>_,<span class=\"st0\">' ()[]{}^\u00f7'</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>;  <span class=\"kw1\">if</span> newT  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  z=z _ $;  <span class=\"kw1\">iterate</span>;   <span class=\"kw3\">end</span><br/>     possDouble=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>_,doubleOps<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>             <span class=\"coMULTI\">/*is    _   a possible double operator?*/</span><br/>     <span class=\"kw1\">if</span> possDouble  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>                      <span class=\"coMULTI\">/* \"  this  \"     \"       \"       \"    */</span><br/>                         <span class=\"kw1\">if</span> _2==_  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>       <span class=\"coMULTI\">/*yupper, it's one of a double operator*/</span><br/>                                        _=_ <span class=\"sy0\">||</span> _ <span class=\"coMULTI\">/*create and use a double char operator*/</span><br/>                                        x=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>$, x, Nj<span class=\"br0\">)</span>      <span class=\"coMULTI\">/*blank out 2nd symbol.*/</span><br/>                                        <span class=\"kw3\">end</span><br/>                         z=z _ $;  <span class=\"kw1\">iterate</span><br/>                         <span class=\"kw3\">end</span><br/>     <span class=\"kw1\">if</span> _==<span class=\"st0\">'+'</span> <span class=\"sy0\">|</span> _==<span class=\"st0\">\"-\"</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  p_=<span class=\"kw6\">word</span><span class=\"br0\">(</span>z, <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"kw6\">words</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>   <span class=\"coMULTI\">/*last  Z  token.      */</span><br/>                                   <span class=\"kw1\">if</span> p_==<span class=\"st0\">'('</span>   <span class=\"kw3\">then</span> z=z <span class=\"nu0\">0</span>       <span class=\"coMULTI\">/*handle a unary \u00b1     */</span><br/>                                   z=z _ $;     <span class=\"kw1\">iterate</span><br/>                              <span class=\"kw3\">end</span><br/>     lets=<span class=\"nu0\">0</span>;  sigs=<span class=\"nu0\">0</span>;  #=_<br/>\u00a0<br/>            <span class=\"kw1\">do</span> j=j+<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> L;   _=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>x,j,<span class=\"nu0\">1</span><span class=\"br0\">)</span>                    <span class=\"coMULTI\">/*build a valid number.*/</span><br/>            <span class=\"kw1\">if</span> lets==<span class=\"nu0\">1</span> <span class=\"sy0\">&amp;</span> sigs==<span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">if</span> _==<span class=\"st0\">'+'</span> <span class=\"sy0\">|</span> _==<span class=\"st0\">\"-\"</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  sigs=<span class=\"nu0\">1</span><br/>                                                                    #=# <span class=\"sy0\">||</span> _<br/>                                                                    <span class=\"kw1\">iterate</span><br/>                                                               <span class=\"kw3\">end</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>_,nchars<span class=\"br0\">)</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span><br/>            lets=lets+<span class=\"kw6\">datatype</span><span class=\"br0\">(</span>_,<span class=\"st0\">'M'</span><span class=\"br0\">)</span>            <span class=\"coMULTI\">/*keep track of the number of exponents*/</span><br/>            #=# <span class=\"sy0\">||</span> <span class=\"kw6\">translate</span><span class=\"br0\">(</span>_,<span class=\"st0\">'EEEEE'</span>, <span class=\"st0\">\"eDdQq\"</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*keep building the number.            */</span><br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>     j=j-<span class=\"nu0\">1</span><br/>     <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>#,<span class=\"st0\">'N'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span>  serr  <span class=\"st0\">\"invalid number: \"</span>     #<br/>     z=z # $<br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*forever*/</span><br/>\u00a0<br/>_=<span class=\"kw6\">word</span><span class=\"br0\">(</span>z,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;      <span class=\"kw1\">if</span> _==<span class=\"st0\">'+'</span> <span class=\"sy0\">|</span> _==<span class=\"st0\">\"-\"</span>  <span class=\"kw3\">then</span> z=<span class=\"nu0\">0</span> z <span class=\"coMULTI\">/*handle the unary cases.              */</span><br/>x=<span class=\"st0\">'('</span> <span class=\"kw6\">space</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span> <span class=\"st0\">\")\"</span>;    tokens=<span class=\"kw6\">words</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>           <span class=\"coMULTI\">/*force stacking for the expression.   */</span><br/>  <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> tokens;  @<span class=\"sy0\">.</span>i=<span class=\"kw6\">word</span><span class=\"br0\">(</span>x,i<span class=\"br0\">)</span>;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*i*/</span> <span class=\"coMULTI\">/*assign input tokens.                 */</span><br/>L=<span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">20</span>,<span class=\"kw6\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span>                              <span class=\"coMULTI\">/*use 20 for the minimum display width.*/</span><br/>op= <span class=\"st0\">')(-+/*^'</span>;    Rop=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>op,<span class=\"nu0\">3</span><span class=\"br0\">)</span>;     p<span class=\"sy0\">.</span>=;     s<span class=\"sy0\">.</span>=;     n=<span class=\"kw6\">length</span><span class=\"br0\">(</span>op<span class=\"br0\">)</span>;    epr=;    stack=<br/>\u00a0<br/>  <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> n;  _=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>op,i,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;     s<span class=\"sy0\">.</span>_=<span class=\"br0\">(</span>i+<span class=\"nu0\">1</span><span class=\"br0\">)</span>%2;     p<span class=\"sy0\">.</span>_=s<span class=\"sy0\">.</span>_ + <span class=\"br0\">(</span>i==n<span class=\"br0\">)</span>;      <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*i*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  assign the operator priorities.*/</span><br/>  <span class=\"kw1\">do</span> #=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> tokens;  \u00a0<a class=\"__cf_email__\" data-cfemail=\"aa9597ea\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>#                    <span class=\"coMULTI\">/*process each token from the  @. list.*/</span><br/>  <span class=\"kw1\">if</span>\u00a0?==<span class=\"st0\">'**'</span>      <span class=\"kw3\">then</span>\u00a0?=<span class=\"st0\">\"^\"</span>                     <span class=\"coMULTI\">/*convert to REXX-type exponentiation. */</span><br/>     <span class=\"kw1\">select</span>                                      <span class=\"coMULTI\">/*@.#  is:   (   operator   )   operand*/</span><br/>     <span class=\"kw3\">when</span>\u00a0?==<span class=\"st0\">'('</span>  <span class=\"kw3\">then</span> stack=<span class=\"st0\">\"(\"</span> stack<br/>     <span class=\"kw3\">when</span> isOp<span class=\"br0\">(</span>?<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>                        <span class=\"coMULTI\">/*is the token an operator\u00a0?           */</span><br/>                      \u00a0!=<span class=\"kw6\">word</span><span class=\"br0\">(</span>stack,<span class=\"nu0\">1</span><span class=\"br0\">)</span>           <span class=\"coMULTI\">/*get token from stack.*/</span><br/>                         <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span>\u00a0!<span class=\"sy0\">\\</span>==<span class=\"st0\">')'</span> <span class=\"sy0\">&amp;</span> s<span class=\"sy0\">.</span>!<span class=\"sy0\">&gt;</span>=p<span class=\"sy0\">.</span>?;  epr=epr\u00a0!            <span class=\"coMULTI\">/*addition.*/</span><br/>                         stack=<span class=\"kw6\">subword</span><span class=\"br0\">(</span>stack, <span class=\"nu0\">2</span><span class=\"br0\">)</span>                  <span class=\"coMULTI\">/*del token from stack*/</span><br/>                        \u00a0!=       <span class=\"kw6\">word</span><span class=\"br0\">(</span>stack, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                  <span class=\"coMULTI\">/*get token from stack*/</span><br/>                         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while*/</span><br/>                       stack=? stack                              <span class=\"coMULTI\">/*add token  to  stack*/</span><br/>                       <span class=\"kw3\">end</span><br/>     <span class=\"kw3\">when</span>\u00a0?==<span class=\"st0\">')'</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  \u00a0!=<span class=\"kw6\">word</span><span class=\"br0\">(</span>stack, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                      <span class=\"coMULTI\">/*get token from stack*/</span><br/>                         <span class=\"kw1\">do</span>  <span class=\"kw2\">while</span>\u00a0!<span class=\"sy0\">\\</span>==<span class=\"st0\">'('</span>;             epr=epr\u00a0! <span class=\"coMULTI\">/*append to expression*/</span><br/>                         stack=<span class=\"kw6\">subword</span><span class=\"br0\">(</span>stack, <span class=\"nu0\">2</span><span class=\"br0\">)</span>                  <span class=\"coMULTI\">/*del token from stack*/</span><br/>                        \u00a0!=       <span class=\"kw6\">word</span><span class=\"br0\">(</span>stack, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                  <span class=\"coMULTI\">/*get token from stack*/</span><br/>                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*while*/</span><br/>                      stack=<span class=\"kw6\">subword</span><span class=\"br0\">(</span>stack, <span class=\"nu0\">2</span><span class=\"br0\">)</span>                     <span class=\"coMULTI\">/*del token from stack*/</span><br/>                      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">otherwise</span>  epr=epr\u00a0?                                          <span class=\"coMULTI\">/*add operand to  epr.*/</span><br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*select*/</span><br/>  <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*#*/</span><br/>\u00a0<br/>epr=<span class=\"kw6\">space</span><span class=\"br0\">(</span>epr stack<span class=\"br0\">)</span>;     tokens=<span class=\"kw6\">words</span><span class=\"br0\">(</span>epr<span class=\"br0\">)</span>;     x=epr;     z=;     stack=<br/>  <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> tokens; @<span class=\"sy0\">.</span>i=<span class=\"kw6\">word</span><span class=\"br0\">(</span>epr,i<span class=\"br0\">)</span>;  <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*i*/</span>                 <span class=\"coMULTI\">/*assign input tokens.*/</span><br/>Dop=<span class=\"st0\">'/ //\u00a0% \u00f7'</span>;           Bop=<span class=\"st0\">\"&amp; | &amp;&amp;\"</span>           <span class=\"coMULTI\">/*division   operands; binary operands.*/</span><br/>Aop=<span class=\"st0\">'- + * ^ **'</span> Dop Bop; Lop=Aop <span class=\"st0\">\"||\"</span>           <span class=\"coMULTI\">/*arithmetic operands; legal  operands.*/</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> #=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> tokens;  \u00a0<a class=\"__cf_email__\" data-cfemail=\"c1fefc81\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>#;  \u00a0??=?            <span class=\"coMULTI\">/*process each token from   @.  list.  */</span><br/>  w=<span class=\"kw6\">words</span><span class=\"br0\">(</span>stack<span class=\"br0\">)</span>;  b=<span class=\"kw6\">word</span><span class=\"br0\">(</span>stack, <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, w  <span class=\"br0\">)</span> <span class=\"br0\">)</span>   <span class=\"coMULTI\">/*stack count;  the last entry.        */</span><br/>                   a=<span class=\"kw6\">word</span><span class=\"br0\">(</span>stack, <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, w-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>   <span class=\"coMULTI\">/*stack's  \"first\"  operand.           */</span><br/>  division  =<span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>?, Dop<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>                 <span class=\"coMULTI\">/*flag:  doing a division operation.   */</span><br/>  arith     =<span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>?, Aop<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>                 <span class=\"coMULTI\">/*flag:  doing arithmetic operation.   */</span><br/>  bitOp     =<span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>?, Bop<span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>                 <span class=\"coMULTI\">/*flag:  doing binary mathematics.     */</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>?, <span class=\"st0\">'N'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>; stack=stack\u00a0?;                <span class=\"kw1\">iterate</span>; <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>?,Lop<span class=\"br0\">)</span>==<span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  z=e  <span class=\"st0\">\"illegal operator:\"</span>\u00a0?;        <span class=\"kw1\">leave</span>; <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">if</span> w<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span>               <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  z=e  <span class=\"st0\">\"illegal epr expression.\"</span>;    <span class=\"kw1\">leave</span>; <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">if</span>\u00a0?==<span class=\"st0\">'^'</span>            <span class=\"kw3\">then</span>\u00a0??=<span class=\"st0\">\"**\"</span>              <span class=\"coMULTI\">/*REXXify   ^ \u2500\u2500\u25ba **   (make it legal).*/</span><br/>  <span class=\"kw1\">if</span>\u00a0?==<span class=\"st0\">'\u00f7'</span>            <span class=\"kw3\">then</span>\u00a0??=<span class=\"st0\">\"/\"</span>               <span class=\"coMULTI\">/*REXXify   \u00f7 \u2500\u2500\u25ba /    (make it legal).*/</span><br/>  <span class=\"kw1\">if</span> division  <span class=\"sy0\">&amp;</span>  b=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  z=e  <span class=\"st0\">\"division by zero\"</span>        b;  <span class=\"kw1\">leave</span>; <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">if</span> bitOp <span class=\"sy0\">&amp;</span> <span class=\"sy0\">\\</span>isBit<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  z=e  <span class=\"st0\">\"token isn't logical: \"</span>   a;  <span class=\"kw1\">leave</span>; <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">if</span> bitOp <span class=\"sy0\">&amp;</span> <span class=\"sy0\">\\</span>isBit<span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  z=e  <span class=\"st0\">\"token isn't logical: \"</span>   b;  <span class=\"kw1\">leave</span>; <span class=\"kw3\">end</span><br/>             <span class=\"kw1\">select</span>                              <span class=\"coMULTI\">/*perform an arithmetic operation.     */</span><br/>             <span class=\"kw3\">when</span>\u00a0??==<span class=\"st0\">'+'</span>             <span class=\"kw3\">then</span> y = a +  b<br/>             <span class=\"kw3\">when</span>\u00a0??==<span class=\"st0\">'-'</span>             <span class=\"kw3\">then</span> y = a -  b<br/>             <span class=\"kw3\">when</span>\u00a0??==<span class=\"st0\">'*'</span>             <span class=\"kw3\">then</span> y = a <span class=\"sy0\">*</span>  b<br/>             <span class=\"kw3\">when</span>\u00a0??==<span class=\"st0\">'/'</span> <span class=\"sy0\">|</span>\u00a0??==<span class=\"st0\">\"\u00f7\"</span>   <span class=\"kw3\">then</span> y = a <span class=\"sy0\">/</span>  b<br/>             <span class=\"kw3\">when</span>\u00a0??==<span class=\"st0\">'//'</span>            <span class=\"kw3\">then</span> y = a <span class=\"sy0\">//</span> b<br/>             <span class=\"kw3\">when</span>\u00a0??==<span class=\"st0\">'%'</span>             <span class=\"kw3\">then</span> y = a\u00a0%  b<br/>             <span class=\"kw3\">when</span>\u00a0??==<span class=\"st0\">'^'</span> <span class=\"sy0\">|</span>\u00a0??==<span class=\"st0\">\"**\"</span>  <span class=\"kw3\">then</span> y = a <span class=\"sy0\">**</span> b<br/>             <span class=\"kw3\">when</span>\u00a0??==<span class=\"st0\">'||'</span>            <span class=\"kw3\">then</span> y = a <span class=\"sy0\">||</span> b<br/>             <span class=\"kw3\">otherwise</span>              z=e <span class=\"st0\">'invalid operator:'</span>\u00a0?;         <span class=\"kw1\">leave</span><br/>             <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*select*/</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>y, <span class=\"st0\">'W'</span><span class=\"br0\">)</span>   <span class=\"kw3\">then</span> y=y<span class=\"sy0\">/</span><span class=\"nu0\">1</span>               <span class=\"coMULTI\">/*normalize the number with  \u00f7  by  1. */</span><br/>  _=<span class=\"kw6\">subword</span><span class=\"br0\">(</span>stack, <span class=\"nu0\">1</span>, w-<span class=\"nu0\">2</span><span class=\"br0\">)</span>;  stack=_ y           <span class=\"coMULTI\">/*rebuild the stack with the answer.   */</span><br/>  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*#*/</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>z, <span class=\"nu0\">1</span><span class=\"br0\">)</span>==e  <span class=\"kw3\">then</span> stack=                    <span class=\"coMULTI\">/*handle the special case of errors.   */</span><br/>z=<span class=\"kw6\">space</span><span class=\"br0\">(</span>z stack<span class=\"br0\">)</span>                                 <span class=\"coMULTI\">/*append any residual entries.         */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'answer\u2500\u2500\u25ba'</span>   z                              <span class=\"coMULTI\">/*display the answer  (result).        */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw2\">source</span> <span class=\"kw2\">upper</span> <span class=\"sy0\">.</span> how <span class=\"sy0\">.</span>                       <span class=\"coMULTI\">/*invoked via  C.L.  or REXX program\u00a0? */</span><br/><span class=\"kw1\">if</span> how==<span class=\"st0\">'COMMAND'</span> <span class=\"sy0\">|</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>z, <span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">exit</span> <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"kw1\">return</span> z                                         <span class=\"coMULTI\">/*return  Z \u2500\u2500\u25ba invoker  (the RESULT). */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>isBit: <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>==<span class=\"nu0\">0</span> <span class=\"sy0\">|</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> == <span class=\"nu0\">1</span>            <span class=\"coMULTI\">/*returns  1  if 1st argument is binary*/</span><br/>isOp:  <span class=\"kw1\">return</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, rOp<span class=\"br0\">)</span> <span class=\"sy0\">\\</span>== <span class=\"nu0\">0</span>             <span class=\"coMULTI\">/*is argument 1 a  \"real\"  operator?   */</span><br/>serr:  <span class=\"kw1\">say</span>;   <span class=\"kw1\">say</span> e <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;   <span class=\"kw1\">say</span>;   <span class=\"kw1\">exit</span> <span class=\"nu0\">13</span>     <span class=\"coMULTI\">/*issue an error message with some text*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>getX:            <span class=\"kw1\">do</span> Nj=j+<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;   _n=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>x, Nj, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;    <span class=\"kw1\">if</span> _n==$  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                 <span class=\"kw1\">return</span>  <span class=\"kw6\">substr</span><span class=\"br0\">(</span>x, Nj, <span class=\"nu0\">1</span><span class=\"br0\">)</span>        <span class=\"coMULTI\">/* [\u2191]  ignore any blanks in expression*/</span><br/>                 <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*Nj*/</span><br/>       <span class=\"kw1\">return</span> $                                  <span class=\"coMULTI\">/*reached end-of-tokens,  return $.    */</span></pre>"}, {"lang": "Ruby", "loc": 100, "block": "<pre class=\"ruby highlighted_source\"><span class=\"re0\">$op_priority</span> = <span class=\"br0\">{</span><span class=\"st0\">\"+\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span>, <span class=\"st0\">\"-\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span>, <span class=\"st0\">\"*\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span>, <span class=\"st0\">\"/\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> TreeNode<br/>  OP_FUNCTION = <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"+\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw3\">lambda</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x, y<span class=\"sy0\">|</span> x <span class=\"sy0\">+</span> y<span class=\"br0\">}</span>,<br/>    <span class=\"st0\">\"-\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw3\">lambda</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x, y<span class=\"sy0\">|</span> x <span class=\"sy0\">-</span> y<span class=\"br0\">}</span>,<br/>    <span class=\"st0\">\"*\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw3\">lambda</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x, y<span class=\"sy0\">|</span> x <span class=\"sy0\">*</span> y<span class=\"br0\">}</span>,<br/>    <span class=\"st0\">\"/\"</span> <span class=\"sy0\">=&gt;</span> <span class=\"kw3\">lambda</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x, y<span class=\"sy0\">|</span> x <span class=\"sy0\">/</span> y<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  attr_accessor <span class=\"re3\">:info</span>, <span class=\"re3\">:left</span>, <span class=\"re3\">:right</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>info<span class=\"br0\">)</span><br/>    <span class=\"re1\">@info</span> = info<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> leaf?<br/>    <span class=\"re1\">@left</span>.<span class=\"kw2\">nil</span>? <span class=\"kw1\">and</span> <span class=\"re1\">@right</span>.<span class=\"kw2\">nil</span>?<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> to_s<span class=\"br0\">(</span>order<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> leaf?<br/>      <span class=\"re1\">@info</span><br/>    <span class=\"kw1\">else</span><br/>      left_s, right_s = <span class=\"re1\">@left</span>.<span class=\"me1\">to_s</span><span class=\"br0\">(</span>order<span class=\"br0\">)</span>, <span class=\"re1\">@right</span>.<span class=\"me1\">to_s</span><span class=\"br0\">(</span>order<span class=\"br0\">)</span><br/>\u00a0<br/>      strs = <span class=\"kw1\">case</span> order<br/>             <span class=\"kw1\">when</span> <span class=\"re3\">:prefix</span>  <span class=\"kw1\">then</span> <span class=\"br0\">[</span>@info, left_s, right_s<span class=\"br0\">]</span><br/>             <span class=\"kw1\">when</span> <span class=\"re3\">:infix</span>   <span class=\"kw1\">then</span> <span class=\"br0\">[</span>left_s, <span class=\"re1\">@info</span>, right_s<span class=\"br0\">]</span><br/>             <span class=\"kw1\">when</span> <span class=\"re3\">:postfix</span> <span class=\"kw1\">then</span> <span class=\"br0\">[</span>left_s, right_s, <span class=\"re1\">@info</span><span class=\"br0\">]</span><br/>             <span class=\"kw1\">else</span>               <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>             <span class=\"kw1\">end</span><br/>\u00a0<br/>      <span class=\"st0\">\"(\"</span> <span class=\"sy0\">+</span> strs.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\")\"</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> <span class=\"kw3\">eval</span><br/>    <span class=\"kw1\">if</span>\u00a0!leaf? <span class=\"kw1\">and</span> operator?<span class=\"br0\">(</span>@info<span class=\"br0\">)</span><br/>      OP_FUNCTION<span class=\"br0\">[</span>@info<span class=\"br0\">]</span>.<span class=\"me1\">call</span><span class=\"br0\">(</span>@left.<span class=\"kw3\">eval</span>, <span class=\"re1\">@right</span>.<span class=\"kw3\">eval</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"re1\">@info</span>.<span class=\"me1\">to_f</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> tokenize<span class=\"br0\">(</span>exp<span class=\"br0\">)</span><br/>  exp<br/>    .<span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"st0\">'('</span>, <span class=\"st0\">' ( '</span><span class=\"br0\">)</span><br/>    .<span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"st0\">')'</span>, <span class=\"st0\">' ) '</span><span class=\"br0\">)</span><br/>    .<span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"st0\">'+'</span>, <span class=\"st0\">' + '</span><span class=\"br0\">)</span><br/>    .<span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span>, <span class=\"st0\">' - '</span><span class=\"br0\">)</span><br/>    .<span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"st0\">'*'</span>, <span class=\"st0\">' * '</span><span class=\"br0\">)</span><br/>    .<span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"st0\">'/'</span>, <span class=\"st0\">' / '</span><span class=\"br0\">)</span><br/>    .<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> operator?<span class=\"br0\">(</span>token<span class=\"br0\">)</span><br/>  <span class=\"re0\">$op_priority</span>.<span class=\"me1\">has_key</span>?<span class=\"br0\">(</span>token<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> pop_connect_push<span class=\"br0\">(</span>op_stack, node_stack<span class=\"br0\">)</span><br/>  temp = op_stack.<span class=\"me1\">pop</span><br/>  temp.<span class=\"me1\">right</span> = node_stack.<span class=\"me1\">pop</span><br/>  temp.<span class=\"me1\">left</span> = node_stack.<span class=\"me1\">pop</span><br/>  node_stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>temp<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> infix_exp_to_tree<span class=\"br0\">(</span>exp<span class=\"br0\">)</span><br/>  tokens = tokenize<span class=\"br0\">(</span>exp<span class=\"br0\">)</span><br/>  op_stack, node_stack = <span class=\"br0\">[</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\u00a0<br/>  tokens.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>token<span class=\"sy0\">|</span><br/>    <span class=\"kw1\">if</span> operator?<span class=\"br0\">(</span>token<span class=\"br0\">)</span><br/>      <span class=\"co1\"># clear stack of higher priority operators</span><br/>      <span class=\"kw1\">until</span> <span class=\"br0\">(</span>op_stack.<span class=\"me1\">empty</span>? <span class=\"kw1\">or</span><br/>             op_stack.<span class=\"me1\">last</span>.<span class=\"me1\">info</span> == <span class=\"st0\">\"(\"</span> <span class=\"kw1\">or</span><br/>             <span class=\"re0\">$op_priority</span><span class=\"br0\">[</span>op_stack.<span class=\"me1\">last</span>.<span class=\"me1\">info</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$op_priority</span><span class=\"br0\">[</span>token<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        pop_connect_push<span class=\"br0\">(</span>op_stack, node_stack<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>\u00a0<br/>      op_stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>TreeNode.<span class=\"me1\">new</span><span class=\"br0\">(</span>token<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">elsif</span> token == <span class=\"st0\">\"(\"</span><br/>      op_stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>TreeNode.<span class=\"me1\">new</span><span class=\"br0\">(</span>token<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">elsif</span> token == <span class=\"st0\">\")\"</span><br/>      <span class=\"kw1\">while</span> op_stack.<span class=\"me1\">last</span>.<span class=\"me1\">info</span>\u00a0!= <span class=\"st0\">\"(\"</span><br/>        pop_connect_push<span class=\"br0\">(</span>op_stack, node_stack<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>\u00a0<br/>      <span class=\"co1\"># throw away the '('</span><br/>      op_stack.<span class=\"me1\">pop</span><br/>    <span class=\"kw1\">else</span><br/>      node_stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>TreeNode.<span class=\"me1\">new</span><span class=\"br0\">(</span>token<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">until</span> op_stack.<span class=\"me1\">empty</span>?<br/>    pop_connect_push<span class=\"br0\">(</span>op_stack, node_stack<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  node_stack.<span class=\"me1\">last</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 48, "block": "<pre class=\"scala highlighted_source\">\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">package</span></a> org.<span class=\"me1\">rosetta</span>.<span class=\"me1\">arithmetic_evaluator</span>.<span class=\"me1\">scala</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> ArithmeticParser <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> scala.<span class=\"me1\">util</span>.<span class=\"me1\">parsing</span>.<span class=\"me1\">combinator</span>.<span class=\"me1\">RegexParsers</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> readExpression<span class=\"br0\">(</span>input<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <span class=\"sy0\">:</span> Option<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    parseAll<span class=\"br0\">(</span>expr, input<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Success<span class=\"br0\">(</span>result, <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        Some<span class=\"br0\">(</span>result<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> other <span class=\"sy0\">=&gt;</span><br/>        println<span class=\"br0\">(</span>other<span class=\"br0\">)</span><br/>        None<br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> expr <span class=\"sy0\">:</span> Parser<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span>term<span class=\"sy0\">&lt;</span>~<span class=\"st0\">\"+\"</span><span class=\"br0\">)</span>~expr ^^ <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> l~r <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> l<span class=\"br0\">(</span><span class=\"br0\">)</span> + r<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> |<br/>    <span class=\"br0\">(</span>term<span class=\"sy0\">&lt;</span>~<span class=\"st0\">\"-\"</span><span class=\"br0\">)</span>~expr ^^ <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> l~r <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> l<span class=\"br0\">(</span><span class=\"br0\">)</span> - r<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> |<br/>    term<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> term <span class=\"sy0\">:</span> Parser<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"br0\">(</span>factor<span class=\"sy0\">&lt;</span>~<span class=\"st0\">\"*\"</span><span class=\"br0\">)</span>~term ^^ <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> l~r <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> l<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> r<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> |<br/>    <span class=\"br0\">(</span>factor<span class=\"sy0\">&lt;</span>~<span class=\"st0\">\"/\"</span><span class=\"br0\">)</span>~term ^^ <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> l~r <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> l<span class=\"br0\">(</span><span class=\"br0\">)</span> / r<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> |<br/>    factor<br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">private</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> factor <span class=\"sy0\">:</span> Parser<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=&gt;</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"(\"</span>~<span class=\"sy0\">&gt;</span>expr<span class=\"sy0\">&lt;</span>~<span class=\"st0\">\")\"</span> |<br/>    <span class=\"st0\">\"<span class=\"es1\">\\\\</span>d+\"</span>.<span class=\"me1\">r</span> ^^ <span class=\"br0\">{</span> x <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x.<span class=\"me1\">toInt</span> <span class=\"br0\">}</span> |<br/>    failure<span class=\"br0\">(</span><span class=\"st0\">\"Expected a value\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Main <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"st0\">\"Please input the expressions. Type \"</span>q<span class=\"st0\">\" to quit.\"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> input<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>      input <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"st0\">\"&gt; \"</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>input <span class=\"sy0\">!=</span> <span class=\"st0\">\"q\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        ArithmeticParser.<span class=\"me1\">readExpression</span><span class=\"br0\">(</span>input<span class=\"br0\">)</span>.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>f <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>f<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>input <span class=\"sy0\">!=</span> <span class=\"st0\">\"q\"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Scheme", "loc": 97, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme char<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme cxr<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>srfi <span class=\"nu0\">1</span> lists<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; convert a string into a list of tokens</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span>tokens str<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>token chars<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">member</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> chars<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> #\\<span class=\"sy0\">+</span> #\\<span class=\"sy0\">-</span> #\\<span class=\"sy0\">*</span> #\\<span class=\"sy0\">/</span><span class=\"br0\">)</span> <span class=\"kw1\">char=?</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>values <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> chars<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span><span class=\"kw1\">assq</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> chars<span class=\"br0\">)</span> <span class=\"co1\">; convert char for op into op procedure, using a look up list</span><br/>                              <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> #\\<span class=\"sy0\">+</span> <span class=\"sy0\">+</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> #\\<span class=\"sy0\">-</span> <span class=\"sy0\">-</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> #\\<span class=\"sy0\">*</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> #\\<span class=\"sy0\">/</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">member</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> chars<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> #\\<span class=\"br0\">(</span> #\\<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">char=?</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>values <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> chars<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">char=?</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> chars<span class=\"br0\">)</span> #\\<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                     'open<br/>                     'close<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"co1\">; read a multi-digit positive integer</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>rem chars<span class=\"br0\">)</span><br/>                       <span class=\"br0\">(</span>res <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> rem<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>                       <span class=\"br0\">(</span><span class=\"kw1\">char-numeric</span>? <span class=\"br0\">(</span><span class=\"kw1\">car</span> rem<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> rem<span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> res <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span><span class=\"sy0\">-</span> <span class=\"br0\">(</span>char<span class=\"sy0\">-&gt;</span>integer <span class=\"br0\">(</span><span class=\"kw1\">car</span> rem<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span>char<span class=\"sy0\">-&gt;</span>integer #\\<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>values rem<br/>                        res<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>chars <span class=\"br0\">(</span>remove <span class=\"kw1\">char-whitespace?</span> <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>tokens '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> chars<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> tokens<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>let<span class=\"sy0\">-</span>values <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>remaining<span class=\"sy0\">-</span>chars token<span class=\"br0\">)</span> <span class=\"br0\">(</span>next<span class=\"sy0\">-</span>token chars<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>loop remaining<span class=\"sy0\">-</span>chars<br/>                        <span class=\"br0\">(</span><span class=\"kw1\">cons</span> token tokens<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; turn list of tokens into an AST </span><br/><span class=\"co1\">;; -- using recursive descent parsing to obey laws of precedence</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>parse tokens<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>parse<span class=\"sy0\">-</span>factor tokens<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">number?</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> tokens<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>values <span class=\"br0\">(</span><span class=\"kw1\">car</span> tokens<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> tokens<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>let<span class=\"sy0\">-</span>values <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>expr rem<span class=\"br0\">)</span> <span class=\"br0\">(</span>parse<span class=\"sy0\">-</span>expr <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> tokens<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>values expr <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> rem<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>parse<span class=\"sy0\">-</span>term tokens<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>let<span class=\"sy0\">-</span>values <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>left<span class=\"sy0\">-</span>expr rem<span class=\"br0\">)</span> <span class=\"br0\">(</span>parse<span class=\"sy0\">-</span>factor tokens<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> rem<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span><span class=\"kw1\">member</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> rem<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"sy0\">*</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>let<span class=\"sy0\">-</span>values <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>right<span class=\"sy0\">-</span>expr remr<span class=\"br0\">)</span> <span class=\"br0\">(</span>parse<span class=\"sy0\">-</span>term <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> rem<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span>values <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> rem<span class=\"br0\">)</span> left<span class=\"sy0\">-</span>expr right<span class=\"sy0\">-</span>expr<span class=\"br0\">)</span><br/>                                      remr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>values left<span class=\"sy0\">-</span>expr rem<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>parse<span class=\"sy0\">-</span>part tokens<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>let<span class=\"sy0\">-</span>values <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>left<span class=\"sy0\">-</span>expr rem<span class=\"br0\">)</span> <span class=\"br0\">(</span>parse<span class=\"sy0\">-</span>term tokens<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> rem<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span><span class=\"kw1\">member</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> rem<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"sy0\">+</span> <span class=\"sy0\">-</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>let<span class=\"sy0\">-</span>values <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>right<span class=\"sy0\">-</span>expr remr<span class=\"br0\">)</span> <span class=\"br0\">(</span>parse<span class=\"sy0\">-</span>part <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> rem<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                              <span class=\"br0\">(</span>values <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> rem<span class=\"br0\">)</span> left<span class=\"sy0\">-</span>expr right<span class=\"sy0\">-</span>expr<span class=\"br0\">)</span><br/>                                      remr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span>values left<span class=\"sy0\">-</span>expr rem<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>parse<span class=\"sy0\">-</span>expr tokens<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>let<span class=\"sy0\">-</span>values <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>expr rem<span class=\"br0\">)</span> <span class=\"br0\">(</span>parse<span class=\"sy0\">-</span>part tokens<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>values expr rem<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"br0\">(</span>let<span class=\"sy0\">-</span>values <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>expr rem<span class=\"br0\">)</span> <span class=\"br0\">(</span>parse<span class=\"sy0\">-</span>expr tokens<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> rem<span class=\"br0\">)</span> <br/>                  expr<br/>                  <span class=\"br0\">(</span>error <span class=\"st0\">\"Misformed expression\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; evaluate the AST, returning a number</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>eval<span class=\"sy0\">-</span>expression ast<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">number?</span> ast<span class=\"br0\">)</span><br/>         ast<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">member</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> ast<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"sy0\">+</span> <span class=\"sy0\">-</span> <span class=\"sy0\">*</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">car</span> ast<span class=\"br0\">)</span> <br/>          <span class=\"br0\">(</span>eval<span class=\"sy0\">-</span>expression <span class=\"br0\">(</span><span class=\"kw1\">cadr</span> ast<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>          <span class=\"br0\">(</span>eval<span class=\"sy0\">-</span>expression <span class=\"br0\">(</span><span class=\"kw1\">caddr</span> ast<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">else</span><br/>          <span class=\"br0\">(</span>error <span class=\"st0\">\"Misformed expression\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; parse and evaluate the given string</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>interpret str<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>eval<span class=\"sy0\">-</span>expression <span class=\"br0\">(</span>parse <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span>tokens str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; running some examples</span><br/><span class=\"br0\">(</span><span class=\"kw1\">for-each</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">display</span> <br/>      <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> str<br/>                     <span class=\"st0\">\" =&gt; \"</span><br/>                     <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> <span class=\"br0\">(</span>interpret str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  '<span class=\"br0\">(</span><span class=\"st0\">\"1 + 2\"</span> <span class=\"st0\">\"20+4*5\"</span> <span class=\"st0\">\"1/2+5*(6-3)\"</span> <span class=\"st0\">\"(1+3)/4-1\"</span> <span class=\"st0\">\"(1 - 5) * 2 / (20 + 1)\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 56, "block": "<pre class=\"ruby highlighted_source\">func evalArithmeticExp<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    func evalExp<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        func operate<span class=\"br0\">(</span>s, op<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>           s.<span class=\"kw3\">split</span><span class=\"br0\">(</span>op<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> Number<span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">reduce</span><span class=\"br0\">(</span>op<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        func add<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            operate<span class=\"br0\">(</span>s.<span class=\"kw3\">sub</span><span class=\"br0\">(</span><span class=\"sy0\">/</span>^\\<span class=\"sy0\">+/</span>,<span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"kw3\">sub</span><span class=\"br0\">(</span><span class=\"sy0\">/</span>\\<span class=\"sy0\">++/</span>,<span class=\"st0\">'+'</span><span class=\"br0\">)</span>, <span class=\"st0\">'+'</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        func subtract<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            s.<span class=\"kw3\">gsub!</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">(</span>\\<span class=\"sy0\">+-|-</span>\\<span class=\"sy0\">+</span><span class=\"br0\">)</span><span class=\"sy0\">/</span>,<span class=\"st0\">'-'</span><span class=\"br0\">)</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s ~~ <span class=\"sy0\">/--/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw2\">return</span><span class=\"br0\">(</span>add<span class=\"br0\">(</span>s.<span class=\"kw3\">sub</span><span class=\"br0\">(</span><span class=\"sy0\">/--/</span>,<span class=\"st0\">'+'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>            var b = s.<span class=\"kw3\">split</span><span class=\"br0\">(</span><span class=\"st0\">'-'</span><span class=\"br0\">)</span><br/>            b.<span class=\"me1\">len</span> == <span class=\"nu0\">3</span>\u00a0? <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">*</span>Number<span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> Number<span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                      \u00a0: operate<span class=\"br0\">(</span>s, <span class=\"st0\">'-'</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        s.<span class=\"kw3\">gsub!</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">/</span>,<span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"kw3\">gsub!</span><span class=\"br0\">(</span><span class=\"sy0\">/-</span>\\<span class=\"sy0\">+/</span>, <span class=\"st0\">'-'</span><span class=\"br0\">)</span><br/>\u00a0<br/>        var reM  = <span class=\"sy0\">/</span>\\<span class=\"sy0\">*/</span><br/>        var reMD = <span class=\"sy0\">%</span>r<span class=\"st0\">\"(<span class=\"es0\">\\d</span>+<span class=\"es0\">\\.</span>?<span class=\"es0\">\\d</span>*<span class=\"es0\">\\s</span>*[*/]<span class=\"es0\">\\s</span>*[+-]?<span class=\"es0\">\\d</span>+<span class=\"es0\">\\.</span>?<span class=\"es0\">\\d</span>*)\"</span><br/>\u00a0<br/>        var reA  = <span class=\"sy0\">/</span>\\d\\<span class=\"sy0\">+/</span><br/>        var reAS = <span class=\"sy0\">/</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>?\\d<span class=\"sy0\">+</span>\\.?\\d<span class=\"sy0\">*</span>\\s<span class=\"sy0\">*</span><span class=\"br0\">[</span><span class=\"sy0\">+-</span><span class=\"br0\">]</span>\\s<span class=\"sy0\">*</span><span class=\"br0\">[</span><span class=\"sy0\">+-</span><span class=\"br0\">]</span>?\\d<span class=\"sy0\">+</span>\\.?\\d<span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>var match = reMD.<span class=\"me1\">match</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            match<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> ~~ reM<br/>               \u00a0? s.<span class=\"kw3\">sub!</span><span class=\"br0\">(</span>reMD, operate<span class=\"br0\">(</span>match<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"st0\">'*'</span><span class=\"br0\">)</span>.<span class=\"me1\">to_s</span><span class=\"br0\">)</span><br/>               \u00a0: s.<span class=\"kw3\">sub!</span><span class=\"br0\">(</span>reMD, operate<span class=\"br0\">(</span>match<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"st0\">'/'</span><span class=\"br0\">)</span>.<span class=\"me1\">to_s</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>var match = reAS.<span class=\"me1\">match</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            match<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> ~~ reA<br/>               \u00a0? s.<span class=\"kw3\">sub!</span><span class=\"br0\">(</span>reAS,      add<span class=\"br0\">(</span>match<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">to_s</span><span class=\"br0\">)</span><br/>               \u00a0: s.<span class=\"kw3\">sub!</span><span class=\"br0\">(</span>reAS, subtract<span class=\"br0\">(</span>match<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">to_s</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw2\">return</span> s<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    var rePara = <span class=\"sy0\">/</span><span class=\"br0\">(</span>\\<span class=\"br0\">(</span><span class=\"br0\">[</span>^\\<span class=\"br0\">(</span>\\<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>\\<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><br/>    s.<span class=\"kw3\">split</span>!.<span class=\"me1\">join</span>!<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span>.<span class=\"kw3\">sub!</span><span class=\"br0\">(</span><span class=\"sy0\">/</span>^\\<span class=\"sy0\">+/</span>,<span class=\"st0\">''</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>var match = s.<span class=\"me1\">match</span><span class=\"br0\">(</span>rePara<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        s.<span class=\"kw3\">sub!</span><span class=\"br0\">(</span>rePara, evalExp<span class=\"br0\">(</span>match<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">return</span> Number<span class=\"br0\">(</span>evalExp<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Standard ML", "loc": 69, "block": "<pre class=\"text highlighted_source\">(* AST *)<br/>datatype expression =<br/>\t  Con of int\t\t\t\t(* constant *)<br/>\t| Add of expression * expression\t(* addition *)<br/>\t| Mul of expression * expression\t(* multiplication *)<br/>\t| Sub of expression * expression\t(* subtraction *)<br/>\t| Div of expression * expression\t(* division *)<br/>\u00a0<br/>(* Evaluator *)<br/>fun eval (Con x)      = x<br/>  | eval (Add (x, y)) = (eval x)  +  (eval y)<br/>  | eval (Mul (x, y)) = (eval x)  *  (eval y)<br/>  | eval (Sub (x, y)) = (eval x)  -  (eval y)<br/>  | eval (Div (x, y)) = (eval x) div (eval y)<br/>\u00a0<br/>(* Lexer *)<br/>datatype token =<br/>\t  CON of int<br/>\t| ADD<br/>\t| MUL<br/>\t| SUB<br/>\t| DIV<br/>\t| LPAR<br/>\t| RPAR<br/>\u00a0<br/>fun lex nil = nil<br/>  | lex (#\"+\"\u00a0:: cs) = ADD\u00a0:: lex cs<br/>  | lex (#\"*\"\u00a0:: cs) = MUL\u00a0:: lex cs<br/>  | lex (#\"-\"\u00a0:: cs) = SUB\u00a0:: lex cs<br/>  | lex (#\"/\"\u00a0:: cs) = DIV\u00a0:: lex cs<br/>  | lex (#\"(\"\u00a0:: cs) = LPAR\u00a0:: lex cs<br/>  | lex (#\")\"\u00a0:: cs) = RPAR\u00a0:: lex cs<br/>  | lex (#\"~\"\u00a0:: cs) = if null cs orelse not (Char.isDigit (hd cs)) then raise Domain<br/>                       else lexDigit (0, cs, ~1)<br/>  | lex (c   \u00a0:: cs) = if Char.isDigit c then lexDigit (0, c\u00a0:: cs, 1)<br/>                       else raise Domain<br/>\u00a0<br/>and lexDigit (a, cs, s) = if null cs orelse not (Char.isDigit (hd cs)) then CON (a*s)\u00a0:: lex cs<br/>                          else lexDigit (a * 10 + (ord (hd cs))- (ord #\"0\") , tl cs, s)<br/>\u00a0<br/>(* Parser *)<br/>exception Error of string<br/>\u00a0<br/>fun match (a,ts) t = if null ts orelse hd ts &lt;&gt; t<br/>                     then raise Error \"match\"<br/>\t\t     else (a, tl ts)<br/>\u00a0<br/>fun extend (a,ts) p f = let val (a',tr) = p ts in (f(a,a'), tr) end<br/>\u00a0<br/>fun parseE  ts             = parseE' (parseM ts)<br/>and parseE' (e, ADD\u00a0:: ts) = parseE' (extend (e, ts) parseM Add)<br/>  | parseE' (e, SUB\u00a0:: ts) = parseE' (extend (e, ts) parseM Sub)<br/>  | parseE' s = s<br/>\u00a0<br/>and parseM  ts             = parseM' (parseP ts)<br/>and parseM' (e, MUL\u00a0:: ts) = parseM' (extend (e, ts) parseP Mul)<br/>  | parseM' (e, DIV\u00a0:: ts) = parseM' (extend (e, ts) parseP Div)<br/>  | parseM' s = s<br/>\u00a0<br/>and parseP (CON c\u00a0:: ts) = (Con c, ts)<br/>  | parseP (LPAR \u00a0:: ts) = match (parseE ts) RPAR<br/>  | parseP _ = raise Error \"parseP\"<br/>\u00a0<br/>\u00a0<br/>(* Test *)<br/>fun lex_parse_eval (str:string) =<br/>\tcase parseE (lex (explode str)) of<br/>\t   (exp, nil) =&gt; eval exp<br/>\t | _          =&gt; raise Error \"not parseable stuff at the end\"</pre>"}, {"lang": "Tcl", "loc": 44, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">namespace</span> import tcl::<span class=\"me1\">mathop</span>::<span class=\"sy0\">*</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> ast str <span class=\"br0\">{</span><br/>    <span class=\"co1\"># produce abstract syntax tree for an expression</span><br/>    <span class=\"kw2\">regsub</span> -all <span class=\"br0\">{</span><span class=\"br0\">[</span>-+<span class=\"sy0\">*</span>/<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"re0\">$str</span> <span class=\"br0\">{</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">}</span> str <span class=\"sy0\">;</span><span class=\"co1\"># \"tokenizer\"</span><br/>    s <span class=\"re0\">$str</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> s <span class=\"br0\">{</span>args<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># parse \"(a + b) * c + d\" to \"+ [* [+ a b] c] d\"</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$args</span><span class=\"br0\">]</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> args <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$args</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">[</span><span class=\"kw2\">regexp</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"re0\">$args</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">eval</span> s <span class=\"br0\">[</span><span class=\"kw2\">string</span> map <span class=\"br0\">{</span><span class=\"br0\">(</span> <span class=\"st0\">\"<span class=\"es0\">\\[</span>s \"</span> <span class=\"br0\">)</span> \\<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"re0\">$args</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"st0\">\"*\"</span> <span class=\"kw1\">in</span> <span class=\"re0\">$args</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\ts <span class=\"br0\">[</span>s_group <span class=\"re0\">$args</span> <span class=\"sy0\">*</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"st0\">\"/\"</span> <span class=\"kw1\">in</span> <span class=\"re0\">$args</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\ts <span class=\"br0\">[</span>s_group <span class=\"re0\">$args</span> /<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"st0\">\"+\"</span> <span class=\"kw1\">in</span> <span class=\"re0\">$args</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        s <span class=\"br0\">[</span>s_group <span class=\"re0\">$args</span> +<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">elseif</span> <span class=\"br0\">{</span><span class=\"st0\">\"-\"</span> <span class=\"kw1\">in</span> <span class=\"re0\">$args</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        s <span class=\"br0\">[</span>s_group <span class=\"re0\">$args</span> -<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">string</span> map <span class=\"br0\">{</span>\\<span class=\"br0\">{</span> \\<span class=\"br0\">[</span> \\<span class=\"br0\">}</span> \\<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$args</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">proc</span> s_group <span class=\"br0\">{</span><span class=\"kw2\">list</span> op<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># turn \".. a op b ..\" to \".. {op a b} ..\"</span><br/>    <span class=\"kw1\">set</span> pos <span class=\"br0\">[</span><span class=\"kw2\">lsearch</span> -exact <span class=\"re0\">$list</span> <span class=\"re0\">$op</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> p_1 <span class=\"br0\">[</span>- <span class=\"re0\">$pos</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> p1  <span class=\"br0\">[</span>+ <span class=\"re0\">$pos</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw2\">lreplace</span> <span class=\"re0\">$list</span> <span class=\"re0\">$p_1</span> <span class=\"re0\">$p1</span> \\<br/>                  <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"re0\">$op</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$list</span> <span class=\"re0\">$p_1</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$list</span> <span class=\"re0\">$p1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\">#-- Test suite</span><br/><span class=\"kw1\">foreach</span> test <span class=\"br0\">[</span><span class=\"kw2\">split</span> <span class=\"br0\">{</span><br/>    ast <span class=\"nu0\">2</span>-<span class=\"nu0\">2</span><br/>    ast <span class=\"nu0\">1</span>-<span class=\"nu0\">2</span>-<span class=\"nu0\">3</span><br/>    ast <span class=\"br0\">(</span><span class=\"nu0\">1</span>-<span class=\"nu0\">2</span><span class=\"br0\">)</span>-<span class=\"nu0\">3</span><br/>    ast <span class=\"nu0\">1</span>-<span class=\"br0\">(</span><span class=\"nu0\">2</span>-<span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>    ast <span class=\"br0\">(</span><span class=\"nu0\">1</span>+<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">3</span><br/>    ast <span class=\"br0\">(</span><span class=\"nu0\">1</span>+<span class=\"nu0\">2</span><span class=\"br0\">)</span>/<span class=\"nu0\">3</span>-<span class=\"nu0\">4</span><span class=\"sy0\">*</span><span class=\"nu0\">5</span><br/>    ast <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>+<span class=\"nu0\">2</span><span class=\"br0\">)</span>/<span class=\"nu0\">3</span>-<span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"nu0\">5</span><br/><span class=\"br0\">}</span> \\n<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"$test ..... [eval $test] ..... [eval [eval $test]]\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TXR", "loc": 53, "block": "<pre class=\"text highlighted_source\">@(next\u00a0:args)<br/>@(define space)@/ */@(end)<br/>@(define mulop (nod))@\\<br/>   @(local op)@\\<br/>   @(space)@\\<br/>   @(cases)@\\<br/>     @{op /[*]/}@(bind nod @(intern op *user-package*))@\\<br/>   @(or)@\\<br/>     @{op /\\//}@(bind (nod) @(list 'trunc))@\\<br/>   @(end)@\\<br/>   @(space)@\\<br/>@(end)<br/>@(define addop (nod))@\\<br/>   @(local op)@(space)@{op /[+\\-]/}@(space)@\\<br/>   @(bind nod @(intern op *user-package*))@\\<br/>@(end)<br/>@(define number (nod))@\\<br/>  @(local n)@(space)@{n /[0-9]+/}@(space)@\\<br/>  @(bind nod @(int-str n 10))@\\<br/>@(end)<br/>@(define factor (nod))@(cases)(@(expr nod))@(or)@(number nod)@(end)@(end)<br/>@(define term (nod))@\\<br/>  @(local op nod1 nod2)@\\<br/>  @(cases)@\\<br/>    @(factor nod1)@\\<br/>    @(cases)@(mulop op)@(term nod2)@(bind nod (op nod1 nod2))@\\<br/>    @(or)@(bind nod nod1)@\\<br/>    @(end)@\\<br/>  @(or)@\\<br/>    @(addop op)@(factor nod1)@\\<br/>    @(bind nod (op nod1))@\\<br/>  @(end)@\\<br/>@(end)<br/>@(define expr (nod))@\\<br/>  @(local op nod1 nod2)@\\<br/>  @(term nod1)@\\<br/>  @(cases)@(addop op)@(expr nod2)@(bind nod (op nod1 nod2))@\\<br/>  @(or)@(bind nod nod1)@\\<br/>  @(end)@\\<br/>@(end)<br/>@(cases)<br/>@  {source (expr e)}<br/>@  (output)<br/>source: @source<br/>AST:    @(format nil \"~s\" e)<br/>value:  @(eval e nil)<br/>@  (end)<br/>@(or)<br/>@  (maybe)@(expr e)@(end)@bad<br/>@  (output)<br/>erroneous suffix \"@bad\"<br/>@  (end)<br/>@(end)</pre>"}, {"lang": "Ursala", "loc": 18, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>#import flo<br/>\u00a0<br/>lex = ~=' '*~F+ rlc both -=digits    # separate into tokens<br/>\u00a0<br/>parse = # build a tree<br/>\u00a0<br/>--&lt;';'&gt;; @iNX ~&amp;l-&gt;rh ^/~&amp;lt cases~&amp;lhh\\~&amp;lhPNVrC {<br/>   '*/': ^|C/~&amp;hNV associate '*/',<br/>   '+-': ^|C/~&amp;hNV associate '*/+-',<br/>   ');': @r ~&amp;htitBPC+ associate '*/+-'}<br/>\u00a0<br/>associate \"ops\" = ~&amp;tihdh2B-=\"ops\"-&gt; ~&amp;thd2tth2hNCCVttt2C<br/>\u00a0<br/>traverse = *^ ~&amp;v?\\%ep ^H\\~&amp;vhthPX '+-*/'-$&lt;plus,minus,times,div&gt;@dh<br/>\u00a0<br/>evaluate = traverse+ parse+ lex</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">Compiler.Parser.parseText(\"(1+3)*7\").dump();<br/>Compiler.Parser.parseText(\"1+3*7\").dump();</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 32, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Use integer numbers and signs\"</span><span class=\"co1\">'\"+ - * / ( )\"''</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> s$=<span class=\"st0\">\"\"</span>: <span class=\"co3\">REM last symbol</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">LET</span> pc=<span class=\"nu0\">0</span>: <span class=\"co3\">REM parenthesis counter</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">LET</span> i$=<span class=\"st0\">\"1+2*(3+(4*5+6*7*8)-9)/10\"</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Input = \"</span>;i$<br/><span class=\"nu0\">60</span> <span class=\"kw1\">FOR</span> n=<span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LEN</span> i$<br/><span class=\"nu0\">70</span> <span class=\"kw1\">LET</span> c$=i$<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/><span class=\"nu0\">80</span> <span class=\"kw1\">IF</span> c$&gt;=<span class=\"st0\">\"0\"</span> <span class=\"kw4\">AND</span> c$&lt;=<span class=\"st0\">\"9\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">170</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">130</span><br/><span class=\"nu0\">90</span> <span class=\"kw1\">IF</span> c$=<span class=\"st0\">\"+\"</span> <span class=\"kw4\">OR</span> c$=<span class=\"st0\">\"-\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">200</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">130</span><br/><span class=\"nu0\">100</span> <span class=\"kw1\">IF</span> c$=<span class=\"st0\">\"*\"</span> <span class=\"kw4\">OR</span> c$=<span class=\"st0\">\"/\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">200</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">130</span><br/><span class=\"nu0\">110</span> <span class=\"kw1\">IF</span> c$=<span class=\"st0\">\"(\"</span> <span class=\"kw4\">OR</span> c$=<span class=\"st0\">\")\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">SUB</span> <span class=\"nu0\">230</span>: <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">130</span><br/><span class=\"nu0\">120</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">300</span><br/><span class=\"nu0\">130</span> <span class=\"kw1\">NEXT</span> n<br/><span class=\"nu0\">140</span> <span class=\"kw1\">IF</span> pc&gt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> <span class=\"kw1\">FLASH</span> <span class=\"nu0\">1</span>;<span class=\"st0\">\"Parentheses not paired.\"</span>: <span class=\"kw1\">BEEP</span> <span class=\"nu0\">1</span>,-<span class=\"nu0\">25</span>: STOP <br/><span class=\"nu0\">150</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Result = \"</span>;<span class=\"kw3\">VAL</span> i$<br/><span class=\"nu0\">160</span> STOP <br/><span class=\"nu0\">170</span> <span class=\"kw1\">IF</span> s$=<span class=\"st0\">\")\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">300</span><br/><span class=\"nu0\">180</span> <span class=\"kw1\">LET</span> s$=c$<br/><span class=\"nu0\">190</span> <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">200</span> <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"kw4\">NOT</span> <span class=\"br0\">(</span>s$&gt;=<span class=\"st0\">\"0\"</span> <span class=\"kw4\">AND</span> s$&lt;=<span class=\"st0\">\"9\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw4\">AND</span> s$&lt;&gt;<span class=\"st0\">\")\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">300</span><br/><span class=\"nu0\">210</span> <span class=\"kw1\">LET</span> s$=c$<br/><span class=\"nu0\">220</span> <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">230</span> <span class=\"kw1\">IF</span> c$=<span class=\"st0\">\"(\"</span> <span class=\"kw4\">AND</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>s$&gt;=<span class=\"st0\">\"0\"</span> <span class=\"kw4\">AND</span> s$&lt;=<span class=\"st0\">\"9\"</span><span class=\"br0\">)</span> <span class=\"kw4\">OR</span> s$=<span class=\"st0\">\")\"</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">300</span><br/><span class=\"nu0\">240</span> <span class=\"kw1\">IF</span> c$=<span class=\"st0\">\")\"</span> <span class=\"kw4\">AND</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">NOT</span> <span class=\"br0\">(</span>s$&gt;=<span class=\"st0\">\"0\"</span> <span class=\"kw4\">AND</span> s$&lt;=<span class=\"st0\">\"9\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw4\">OR</span> s$=<span class=\"st0\">\"(\"</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">300</span><br/><span class=\"nu0\">250</span> <span class=\"kw1\">LET</span> s$=c$<br/><span class=\"nu0\">260</span> <span class=\"kw1\">IF</span> c$=<span class=\"st0\">\"(\"</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">LET</span> pc=pc+<span class=\"nu0\">1</span>: <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">270</span> <span class=\"kw1\">LET</span> pc=pc-<span class=\"nu0\">1</span><br/><span class=\"nu0\">280</span> <span class=\"kw1\">IF</span> pc&lt;<span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">GO</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">300</span><br/><span class=\"nu0\">290</span> <span class=\"kw1\">RETURN</span> <br/><span class=\"nu0\">300</span> <span class=\"kw1\">PRINT</span> <span class=\"kw1\">FLASH</span> <span class=\"nu0\">1</span>;<span class=\"st0\">\"Invalid symbol \"</span>;c$;<span class=\"st0\">\" detected in pos \"</span>;n: <span class=\"kw1\">BEEP</span> <span class=\"nu0\">1</span>,-<span class=\"nu0\">25</span><br/><span class=\"nu0\">310</span> STOP <br/>\u00a0</pre>"}]}