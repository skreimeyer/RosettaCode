{"task": "CRC-32", "blocks": [{"lang": "Ada", "loc": 14, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> GNAT.<span class=\"me1\">CRC32</span>; <span class=\"kw3\">use</span> GNAT.<span class=\"me1\">CRC32</span>;<br/><span class=\"kw3\">with</span> Interfaces; <span class=\"kw3\">use</span> Interfaces;<br/><span class=\"kw3\">procedure</span> TestCRC <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">package</span> IIO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Modular_IO</span> <span class=\"br0\">(</span>Unsigned_32<span class=\"br0\">)</span>;<br/>   crc\u00a0: CRC32;<br/>   num\u00a0: Unsigned_32;<br/>   str\u00a0: String\u00a0:= <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span>;<br/><span class=\"kw1\">begin</span><br/>   Initialize <span class=\"br0\">(</span>crc<span class=\"br0\">)</span>;<br/>   Update <span class=\"br0\">(</span>crc, str<span class=\"br0\">)</span>;<br/>   num\u00a0:= Get_Value <span class=\"br0\">(</span>crc<span class=\"br0\">)</span>;<br/>   IIO.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>num, Base =&gt; <span class=\"nu0\">16</span><span class=\"br0\">)</span>; New_Line;<br/><span class=\"kw1\">end</span> TestCRC;</pre>"}, {"lang": "ALGOL 68", "loc": 56, "block": "<pre class=\"algol68 highlighted_source\">\u00a0<br/><span class=\"br0\">[</span>0<span class=\"sy1\">:</span>255<span class=\"br0\">]</span><span class=\"kw3\">BITS</span> crc_table<span class=\"sy1\">;</span><br/><span class=\"kw3\">BOOL</span> crc_table_computed <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> make_crc_table <span class=\"sy1\">=</span> <span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span> <br/>      <span class=\"kw3\">INT</span> n<span class=\"sy1\">,</span> k<span class=\"sy1\">;</span><br/>      <span class=\"kw2\">FOR</span> n <span class=\"kw2\">FROM</span> 0 <span class=\"kw2\">TO</span> 255 <span class=\"kw2\">DO</span> <br/>         <span class=\"kw3\">BITS</span> c <span class=\"sy1\">:=</span> <span class=\"kw8\">BIN</span> n<span class=\"sy1\">;</span><br/>         <span class=\"kw2\">FOR</span> k <span class=\"kw2\">TO</span> 8 <span class=\"kw2\">DO</span> <br/>            c <span class=\"sy1\">:=</span> <span class=\"kw2\">IF</span> 32 <span class=\"kw12\">ELEM</span> c <span class=\"kw2\">THEN</span> <br/>                    <span class=\"re0\">16redb88320</span> XOR <span class=\"br0\">(</span>c <span class=\"kw11\">SHR</span> 1<span class=\"br0\">)</span><br/>                 <span class=\"kw2\">ELSE</span><br/>                    c <span class=\"kw11\">SHR</span> 1<br/>\t\t <span class=\"kw2\">FI</span><br/>\t <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\t crc_table<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> c<br/>      <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>      crc_table_computed <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> update_crc <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">BITS</span> crc<span class=\"sy1\">,</span> <span class=\"kw3\">STRING</span> buf<span class=\"br0\">)</span> <span class=\"kw3\">BITS</span><span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span> <br/>      <span class=\"kw3\">BITS</span> c <span class=\"sy1\">:=</span> crc XOR <span class=\"re0\">16rffffffff</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">INT</span> n<span class=\"sy1\">;</span><br/>\u00a0<br/>      <span class=\"kw2\">IF</span> <span class=\"kw8\">NOT</span> crc_table_computed <span class=\"kw2\">THEN</span> make_crc_table <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>      <span class=\"kw2\">FOR</span> n <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> buf <span class=\"kw2\">DO</span> <br/>         c <span class=\"sy1\">:=</span> crc_table<span class=\"br0\">[</span><span class=\"kw8\">ABS</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>c XOR <span class=\"kw8\">BIN</span> <span class=\"kw8\">ABS</span> buf<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw16\">AND</span> <span class=\"re0\">16rff</span><span class=\"br0\">)</span><span class=\"br0\">]</span> XOR <span class=\"br0\">(</span>c <span class=\"kw11\">SHR</span> 8<span class=\"br0\">)</span><br/>      <span class=\"kw2\">OD</span> <span class=\"sy1\">;</span><br/>      c XOR <span class=\"re0\">16rffffffff</span><br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"kw4\">PROC</span> hex <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">BITS</span> x<span class=\"br0\">)</span> <span class=\"kw3\">STRING</span> <span class=\"sy1\">:</span><br/>   <span class=\"kw2\">BEGIN</span><br/>      <span class=\"kw4\">PROC</span> hexdig <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">BITS</span> x<span class=\"br0\">)</span> <span class=\"kw3\">CHAR</span><span class=\"sy1\">:</span> <span class=\"kw8\">REPR</span> <span class=\"br0\">(</span><span class=\"kw2\">IF</span> <span class=\"kw8\">ABS</span> x <span class=\"sy1\">\u2264</span> 9 <span class=\"kw2\">THEN</span> <span class=\"kw8\">ABS</span> x <span class=\"sy1\">+</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"0\"</span><br/>                                         <span class=\"kw2\">ELSE</span> <span class=\"kw8\">ABS</span> x <span class=\"sy1\">-</span> 10 <span class=\"sy1\">+</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"a\"</span><br/>\t\t\t\t\t <span class=\"kw2\">FI</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">STRING</span> h <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"sy1\">;</span><br/>      <span class=\"kw2\">IF</span> x <span class=\"sy1\">=</span> <span class=\"re0\">16r0</span> <span class=\"kw2\">THEN</span><br/>\t h <span class=\"sy1\">:=</span> <span class=\"st0\">\"0\"</span><br/>      <span class=\"kw2\">ELSE</span><br/>\t <span class=\"kw3\">BITS</span> n <span class=\"sy1\">:=</span> x<span class=\"sy1\">;</span><br/>\t <span class=\"kw2\">WHILE</span> h <span class=\"sy1\">:=</span> hexdig <span class=\"br0\">(</span>n <span class=\"kw16\">AND</span> <span class=\"re0\">16rf</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> h<span class=\"sy1\">;</span> n <span class=\"sy1\">\u2260</span> <span class=\"re0\">16r0</span> <span class=\"kw2\">DO</span><br/>\t    n <span class=\"sy1\">:=</span> n <span class=\"kw11\">SHR</span> 4<br/>\t <span class=\"kw2\">OD</span><br/>      <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>      h<br/>   <span class=\"kw2\">END</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> crc <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">STRING</span> buf<span class=\"br0\">)</span> <span class=\"kw3\">BITS</span><span class=\"sy1\">:</span><br/>   update_crc<span class=\"br0\">(</span><span class=\"re0\">16r0</span><span class=\"sy1\">,</span> buf<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw3\">STRING</span> s <span class=\"sy1\">=</span> <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"CRC32 OF \"</span><span class=\"sy1\">,</span> s<span class=\"sy1\">,</span> <span class=\"st0\">\" is: \"</span><span class=\"sy1\">,</span> hex <span class=\"br0\">(</span>crc <span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 9, "block": "<pre class=\"autohotkey highlighted_source\">CRC32<span class=\"br0\">(</span>str<span class=\"sy0\">,</span> enc <span class=\"sy0\">=</span> <span class=\"st0\">\"UTF-8\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    l <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>enc <span class=\"sy0\">=</span> <span class=\"st0\">\"CP1200\"</span> || enc <span class=\"sy0\">=</span> <span class=\"st0\">\"UTF-16\"</span><span class=\"br0\">)</span>\u00a0? <span class=\"nu0\">2</span>\u00a0: <span class=\"nu0\">1</span><span class=\"sy0\">,</span> s <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>StrPut<span class=\"br0\">(</span>str<span class=\"sy0\">,</span> enc<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> l<br/>    <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>b<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> StrPut<span class=\"br0\">(</span>str<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>b<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">floor</span></a><span class=\"br0\">(</span>s <span class=\"sy0\">/</span> l<span class=\"br0\">)</span><span class=\"sy0\">,</span> enc<span class=\"br0\">)</span><br/>    CRC32 <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/commands/DllCall.htm\"><span class=\"kw3\">DllCall</span></a><span class=\"br0\">(</span><span class=\"st0\">\"ntdll.dll\\RtlComputeCrc32\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Ptr\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>b<span class=\"sy0\">,</span> <span class=\"st0\">\"UInt\"</span><span class=\"sy0\">,</span> s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> Format<span class=\"br0\">(</span><span class=\"st0\">\"{:#x}\"</span><span class=\"sy0\">,</span> CRC32<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% CRC32<span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "C", "loc": 11, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;zlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s <span class=\"sy0\">=</span> <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lX<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> crc32<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">void</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>s<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 62, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;array&gt;</span><br/><span class=\"co2\">#include &lt;cstdint&gt;</span><br/><span class=\"co2\">#include &lt;numeric&gt;</span><br/>\u00a0<br/><span class=\"co1\">// These headers are only needed for main(), to demonstrate.</span><br/><span class=\"co2\">#include &lt;iomanip&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/>\u00a0<br/><span class=\"co1\">// Generates a lookup table for the checksums of all 8-bit values.</span><br/>std<span class=\"sy4\">::</span><span class=\"me2\">array</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"kw4\">uint_fast32_t</span>, <span class=\"nu0\">256</span><span class=\"sy1\">&gt;</span> generate_crc_lookup_table<span class=\"br0\">(</span><span class=\"br0\">)</span> noexcept<br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">auto</span> <span class=\"kw4\">const</span> reversed_polynomial <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"kw4\">uint_fast32_t</span><span class=\"br0\">{</span>0xEDB88320uL<span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// This is a function object that calculates the checksum for a value,</span><br/>  <span class=\"co1\">// then increments the value, starting from zero.</span><br/>  <span class=\"kw4\">struct</span> byte_checksum<br/>  <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw4\">uint_fast32_t</span> operator<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span> noexcept<br/>    <span class=\"br0\">{</span><br/>      <span class=\"kw4\">auto</span> checksum <span class=\"sy1\">=</span> <span class=\"kw2\">static_cast</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"kw4\">uint_fast32_t</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span>n<span class=\"sy2\">++</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">auto</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>        checksum <span class=\"sy1\">=</span> <span class=\"br0\">(</span>checksum <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">^</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>checksum <span class=\"sy3\">&amp;</span> 0x1u<span class=\"br0\">)</span> <span class=\"sy4\">?</span> reversed_polynomial <span class=\"sy4\">:</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">return</span> checksum<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">unsigned</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">auto</span> table <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">array</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"kw4\">uint_fast32_t</span>, <span class=\"nu0\">256</span><span class=\"sy1\">&gt;</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">generate</span><span class=\"br0\">(</span>table.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, table.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, byte_checksum<span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> table<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Calculates the CRC for any sequence of values. (You could use type traits and a</span><br/><span class=\"co1\">// static assert to ensure the values can be converted to 8 bits.)</span><br/><span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> InputIterator<span class=\"sy1\">&gt;</span><br/>std<span class=\"sy4\">::</span><span class=\"kw4\">uint_fast32_t</span> crc<span class=\"br0\">(</span>InputIterator first, InputIterator last<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"co1\">// Generate lookup table only on first use then cache it - this is thread-safe.</span><br/>  <span class=\"kw4\">static</span> <span class=\"kw4\">auto</span> <span class=\"kw4\">const</span> table <span class=\"sy1\">=</span> generate_crc_lookup_table<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"co1\">// Calculate the checksum - make sure to clip to 32 bits, for systems that don't</span><br/>  <span class=\"co1\">// have a true (fast) 32-bit type.</span><br/>  <span class=\"kw1\">return</span> std<span class=\"sy4\">::</span><span class=\"kw4\">uint_fast32_t</span><span class=\"br0\">{</span>0xFFFFFFFFuL<span class=\"br0\">}</span> <span class=\"sy3\">&amp;</span><br/>    ~std<span class=\"sy4\">::</span><span class=\"me2\">accumulate</span><span class=\"br0\">(</span>first, last,<br/>      ~std<span class=\"sy4\">::</span><span class=\"kw4\">uint_fast32_t</span><span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"sy3\">&amp;</span> std<span class=\"sy4\">::</span><span class=\"kw4\">uint_fast32_t</span><span class=\"br0\">{</span>0xFFFFFFFFuL<span class=\"br0\">}</span>,<br/>        <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"kw4\">uint_fast32_t</span> checksum, std<span class=\"sy4\">::</span><span class=\"kw4\">uint_fast8_t</span> value<span class=\"br0\">)</span> <br/>          <span class=\"br0\">{</span> <span class=\"kw1\">return</span> table<span class=\"br0\">[</span><span class=\"br0\">(</span>checksum <span class=\"sy3\">^</span> value<span class=\"br0\">)</span> <span class=\"sy3\">&amp;</span> 0xFFu<span class=\"br0\">]</span> <span class=\"sy3\">^</span> <span class=\"br0\">(</span>checksum <span class=\"sy1\">&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">auto</span> <span class=\"kw4\">const</span> s <span class=\"sy1\">=</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"br0\">{</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">hex</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setw</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">setfill</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> crc<span class=\"br0\">(</span>s.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, s.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 72, "block": "<pre class=\"csharp highlighted_source\">\u00a0<br/>    <span class=\"co1\">/// &lt;summary&gt;</span><br/>    <span class=\"co1\">/// Performs 32-bit reversed cyclic redundancy checks.</span><br/>    <span class=\"co1\">/// &lt;/summary&gt;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">class</span> Crc32<br/>    <span class=\"br0\">{</span><br/>        <span class=\"co2\">#region Constants</span><br/>        <span class=\"co1\">/// &lt;summary&gt;</span><br/>        <span class=\"co1\">/// Generator polynomial (modulo 2) for the reversed CRC32 algorithm. </span><br/>        <span class=\"co1\">/// &lt;/summary&gt;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">const</span> UInt32 s_generator <span class=\"sy0\">=</span> 0xEDB88320<span class=\"sy0\">;</span><br/>        <span class=\"co2\">#endregion</span><br/>\u00a0<br/>        <span class=\"co2\">#region Constructors</span><br/>        <span class=\"co1\">/// &lt;summary&gt;</span><br/>        <span class=\"co1\">/// Creates a new instance of the Crc32 class.</span><br/>        <span class=\"co1\">/// &lt;/summary&gt;</span><br/>        <span class=\"kw1\">public</span> Crc32<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"co1\">// Constructs the checksum lookup table. Used to optimize the checksum.</span><br/>            m_checksumTable <span class=\"sy0\">=</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">256</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">var</span> tableEntry <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span><span class=\"br0\">)</span>i<span class=\"sy0\">;</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>j<span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    tableEntry <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tableEntry <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                        <span class=\"sy0\">?</span> <span class=\"br0\">(</span>s_generator <span class=\"sy0\">^</span> <span class=\"br0\">(</span>tableEntry <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>                        <span class=\"sy0\">:</span> <span class=\"br0\">(</span>tableEntry <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">return</span> tableEntry<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"co2\">#endregion</span><br/>\u00a0<br/>        <span class=\"co2\">#region Methods</span><br/>        <span class=\"co1\">/// &lt;summary&gt;</span><br/>        <span class=\"co1\">/// Calculates the checksum of the byte stream.</span><br/>        <span class=\"co1\">/// &lt;/summary&gt;</span><br/>        <span class=\"co1\">/// &lt;param name=\"byteStream\"&gt;The byte stream to calculate the checksum for.&lt;/param&gt;</span><br/>        <span class=\"co1\">/// &lt;returns&gt;A 32-bit reversed checksum.&lt;/returns&gt;</span><br/>        <span class=\"kw1\">public</span> UInt32 <span class=\"kw1\">Get</span><span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>IEnumerable<span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> byteStream<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">try</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"co1\">// Initialize checksumRegister to 0xFFFFFFFF and calculate the checksum.</span><br/>                <span class=\"kw1\">return</span> ~byteStream<span class=\"sy0\">.</span><span class=\"me1\">Aggregate</span><span class=\"br0\">(</span>0xFFFFFFFF, <span class=\"br0\">(</span>checksumRegister, currentByte<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <br/>                          <span class=\"br0\">(</span>m_checksumTable<span class=\"br0\">[</span><span class=\"br0\">(</span>checksumRegister <span class=\"sy0\">&amp;</span> 0xFF<span class=\"br0\">)</span> <span class=\"sy0\">^</span> Convert<span class=\"sy0\">.</span><span class=\"me1\">ToByte</span><span class=\"br0\">(</span>currentByte<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">^</span> <span class=\"br0\">(</span>checksumRegister <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>FormatException e<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> CrcException<span class=\"br0\">(</span><span class=\"st0\">\"Could not read the stream out as bytes.\"</span>, e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>InvalidCastException e<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> CrcException<span class=\"br0\">(</span><span class=\"st0\">\"Could not read the stream out as bytes.\"</span>, e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>OverflowException e<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> CrcException<span class=\"br0\">(</span><span class=\"st0\">\"Could not read the stream out as bytes.\"</span>, e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"co2\">#endregion</span><br/>\u00a0<br/>        <span class=\"co2\">#region Fields</span><br/>        <span class=\"co1\">/// &lt;summary&gt;</span><br/>        <span class=\"co1\">/// Contains a cache of calculated checksum chunks.</span><br/>        <span class=\"co1\">/// &lt;/summary&gt;</span><br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">readonly</span> UInt32<span class=\"br0\">[</span><span class=\"br0\">]</span> m_checksumTable<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co2\">#endregion</span><br/>    <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 4, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>crc <span class=\"br0\">(</span>new java<span class=\"sy0\">.</span>util<span class=\"sy0\">.</span>zip<span class=\"sy0\">.</span>CRC32<span class=\"br0\">)</span><br/>      <span class=\"kw1\">str</span> <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"sy0\">.</span> crc update <span class=\"br0\">(</span><span class=\"sy0\">.</span> <span class=\"kw1\">str</span> getBytes<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>printf <span class=\"st0\">\"CRC-32('%s') =\u00a0%s<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">str</span> <span class=\"br0\">(</span>Long<span class=\"sy0\">/</span>toHexString <span class=\"br0\">(</span><span class=\"sy0\">.</span> crc getValue<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "COBOL", "loc": 37, "block": "<pre class=\"cobol highlighted_source\">      *&gt; tectonics: cobc -xj crc32-zlib<span class=\"sy0\">.</span>cob -lz<br/>       <span class=\"kw3\">identification</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">program-id</span><span class=\"sy0\">.</span> rosetta-crc32<span class=\"sy0\">.</span><br/>\u00a0<br/>       environment <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">configuration</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       repository<span class=\"sy0\">.</span><br/>           <span class=\"kw3\">function</span> <span class=\"kw3\">all</span> intrinsic<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">data</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">working-storage</span> <span class=\"kw1\">section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> crc32-<span class=\"kw3\">initial</span>        <span class=\"kw3\">usage</span> binary-c-long<span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> crc32-result         <span class=\"kw3\">usage</span> binary-c-long unsigned<span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> crc32-<span class=\"kw3\">input</span><span class=\"sy0\">.</span><br/>          <span class=\"nu0\">05</span> <span class=\"kw3\">value</span> <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span> crc32-hex            <span class=\"kw3\">usage</span> <span class=\"kw3\">pointer</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">procedure</span> <span class=\"kw3\">division</span><span class=\"sy0\">.</span><br/>       crc32-<span class=\"kw1\">main</span><span class=\"sy0\">.</span><br/>\u00a0<br/>      *&gt; libz crc32<br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"crc32\"</span> <span class=\"kw3\">using</span><br/>           <span class=\"kw3\">by</span> <span class=\"kw3\">value</span> crc32-<span class=\"kw3\">initial</span><br/>           <span class=\"kw3\">by</span> <span class=\"kw3\">reference</span> crc32-<span class=\"kw3\">input</span><br/>           <span class=\"kw3\">by</span> <span class=\"kw3\">value</span> <span class=\"kw4\">length</span><span class=\"br0\">(</span>crc32-<span class=\"kw3\">input</span><span class=\"br0\">)</span><br/>           returning crc32-result<br/>           <span class=\"kw3\">on</span> <span class=\"kw3\">exception</span><br/>               <span class=\"kw2\">display</span> <span class=\"st0\">\"error: no crc32 zlib linkage\"</span> <span class=\"kw3\">upon</span> syserr<br/>       end-<span class=\"kw2\">call</span><br/>       <span class=\"kw2\">call</span> <span class=\"st0\">\"printf\"</span> <span class=\"kw3\">using</span> <span class=\"st0\">\"checksum:\u00a0%lx\"</span> &amp; x<span class=\"st0\">\"0a\"</span> <span class=\"kw3\">by</span> <span class=\"kw3\">value</span> crc32-result<br/>\u00a0<br/>      *&gt; GnuCOBOL pointers are displayed <span class=\"kw3\">in</span> hex <span class=\"kw3\">by</span> default<br/>       <span class=\"kw3\">set</span> crc32-hex <span class=\"kw3\">up</span> <span class=\"kw3\">by</span> crc32-result<br/>       <span class=\"kw2\">display</span> <span class=\"st0\">'crc32 of \"'</span> crc32-<span class=\"kw3\">input</span> <span class=\"st0\">'\" is '</span> crc32-hex<br/>\u00a0<br/>       goback<span class=\"sy0\">.</span><br/>       <span class=\"kw3\">end</span> <span class=\"kw3\">program</span> rosetta-crc32<span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 15, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/>crc32 = do <span class=\"sy0\">-&gt;</span><br/>  table =<br/>    <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">255</span><span class=\"br0\">]</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">7</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><br/>          n = 0xEDB88320 <span class=\"sy0\">^</span> n <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">else</span><br/>          n <span class=\"sy0\">&gt;&gt;&gt;</span>= <span class=\"nu0\">1</span><br/>      n<br/>  <span class=\"br0\">(</span>str<span class=\"sy0\">,</span> crc = <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">for</span> c <span class=\"kw1\">in</span> str<br/>      crc = crc <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">8</span> <span class=\"sy0\">^</span> table<span class=\"br0\">[</span><span class=\"br0\">(</span>crc <span class=\"sy0\">^</span> c.<span class=\"me1\">charCodeAt</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"nu0\">255</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span>crc <span class=\"sy0\">^</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"nu0\">0</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 9, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>ql<span class=\"sy0\">:</span><span class=\"me1\">quickload</span> <span class=\"sy0\">:</span><span class=\"me1\">ironclad</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> string-to-digest <span class=\"br0\">(</span>str digest<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Return the specified digest for the ASCII string as a hex string.\"</span><br/>  <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">byte-array-to-hex-string</span> <br/>    <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">digest-sequence</span> digest <br/>                              <span class=\"br0\">(</span>ironclad<span class=\"sy0\">:</span><span class=\"me1\">ascii-string-to-byte-</span><span class=\"kw1\">array</span> str<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>string-to-digest <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span> <span class=\"sy0\">:</span><span class=\"me1\">crc32</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Component Pascal", "loc": 14, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> BbtComputeCRC32;<br/><span class=\"kw1\">IMPORT</span> ZlibCrc32<span class=\"sy0\">,</span>StdLog;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> Do<span class=\"sy0\">*</span>;<br/><span class=\"kw1\">VAR</span><br/>\ts<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">128</span> <span class=\"kw1\">OF</span> SHORTCHAR;<br/><span class=\"kw1\">BEGIN</span>\t<br/>\ts <span class=\"sy0\">:=</span> <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span>;<br/>\tStdLog.<span class=\"me1\">IntForm</span><span class=\"br0\">(</span>ZlibCrc32.<span class=\"me1\">CRC32</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>s<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"kw3\">LEN</span><span class=\"br0\">(</span>s$<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">16</span><span class=\"sy0\">,</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span><span class=\"st_h\">'0'</span><span class=\"sy0\">,</span><span class=\"kw2\">TRUE</span><span class=\"br0\">)</span>;<br/>\tStdLog.<span class=\"me1\">Ln</span>;<br/><span class=\"kw1\">END</span> Do;<br/><span class=\"kw1\">END</span> BbtComputeCRC32.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 6, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">digest</span>.<span class=\"me1\">crc</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><br/>    .<span class=\"me1\">crc32Of</span>.<span class=\"me1\">crcHexString</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 7, "block": "<pre class=\"text highlighted_source\">defmodule Test do<br/>  def crc32(str) do<br/>    IO.puts\u00a0:erlang.crc32(str) |&gt; Integer.to_string(16)<br/>  end<br/>end<br/>\u00a0<br/>Test.crc32(\"The quick brown fox jumps over the lazy dog\")</pre>"}, {"lang": "Erlang", "loc": 6, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>crc32<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>test<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"re3\">test</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>  <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~.16#~n\"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"re3\">crc32</span><span class=\"br0\">(</span><span class=\"sy2\">&lt;&lt;</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"sy2\">&gt;&gt;</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 1, "block": "<pre>IN: scratchpad <b>USING: checksums checksums.crc32\u00a0;</b>\nIN: scratchpad <b>\"The quick brown fox jumps over the lazy dog\" crc32</b>\n               <b>checksum-bytes hex-string .</b>\n\"414fa339\"\n</pre>"}, {"lang": "FBSL", "loc": 5, "block": "<pre class=\"qbasic highlighted_source\">#APPTYPE CONSOLE<br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> HEX<span class=\"br0\">(</span>CHECKSUM<span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>PAUSE</pre>"}, {"lang": "Forth", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>: crc/ ( n -- n ) 8 0 do dup 1 rshift swap 1 and if $edb88320 xor then loop\u00a0;<br/>\u00a0<br/>: crcfill   256 0 do i crc/ , loop\u00a0;<br/>\u00a0<br/>create crctbl crcfill<br/>\u00a0<br/>: crc+ ( crc n -- crc' ) over xor $ff and  cells crctbl + @  swap 8 rshift xor\u00a0;<br/>\u00a0<br/>: crcbuf ( crc str len -- crc ) bounds\u00a0?do i <a class=\"__cf_email__\" data-cfemail=\"7c1f3c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> crc+ loop\u00a0;<br/>\u00a0<br/>$ffffffff s\" The quick brown fox jumps over the lazy dog\" crcbuf $ffffffff xor hex.  bye   \\ $414FA339<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 45, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> crc32_m<br/>    <span class=\"kw3\">use</span> iso_fortran_env<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span>int32<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">crc_table</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">255</span><span class=\"br0\">)</span><br/><span class=\"co1\">contains</span><br/>    <span class=\"kw1\">subroutine</span> update_crc<span class=\"br0\">(</span>a, crc<span class=\"br0\">)</span><br/>        <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span>, i<br/>        <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><br/>        <span class=\"kw3\">integer</span><span class=\"br0\">(</span>int32<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">crc</span><br/>\u00a0<br/>        crc <span class=\"sy0\">=</span> <span class=\"kw4\">not</span><span class=\"br0\">(</span>crc<span class=\"br0\">)</span><br/>        n <span class=\"sy0\">=</span> <span class=\"kw4\">len</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>        <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<br/>            crc <span class=\"sy0\">=</span> <span class=\"kw4\">ieor</span><span class=\"br0\">(</span>shiftr<span class=\"br0\">(</span>crc, <span class=\"nu0\">8</span><span class=\"br0\">)</span>, crc_table<span class=\"br0\">(</span><span class=\"kw4\">iand</span><span class=\"br0\">(</span><span class=\"kw4\">ieor</span><span class=\"br0\">(</span>crc, <span class=\"kw4\">iachar</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>i<span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">255</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>        crc <span class=\"sy0\">=</span> <span class=\"kw4\">not</span><span class=\"br0\">(</span>crc<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/>\u00a0<br/>    <span class=\"kw1\">subroutine</span> init_table<br/>        <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j<br/>        <span class=\"kw3\">integer</span><span class=\"br0\">(</span>int32<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">k</span><br/>\u00a0<br/>        <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">255</span><br/>            k <span class=\"sy0\">=</span> i<br/>            <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">8</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">btest</span><span class=\"br0\">(</span>k, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>                    k <span class=\"sy0\">=</span> <span class=\"kw4\">ieor</span><span class=\"br0\">(</span>shiftr<span class=\"br0\">(</span>k, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"sy0\">-</span><span class=\"nu0\">306674912</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">else</span><br/>                    k <span class=\"sy0\">=</span> shiftr<span class=\"br0\">(</span>k, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>            crc_table<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> k<br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span><br/>\u00a0<br/><span class=\"kw1\">program</span> crc32<br/>    <span class=\"kw3\">use</span> crc32_m<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span><span class=\"br0\">(</span>int32<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">crc</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">s</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><br/>    <span class=\"kw1\">call</span> init_table<br/>    <span class=\"kw1\">call</span> update_crc<span class=\"br0\">(</span>s, crc<span class=\"br0\">)</span><br/>    print <span class=\"st0\">\"(Z8)\"</span>, crc<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 50, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 18-03-2017</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> crc32<span class=\"br0\">(</span>buf <span class=\"kw1\">As</span> <span class=\"kw1\">String</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt;<br/>\u00a0<br/>    <span class=\"kw1\">Static</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; table<span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Static</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; have_table<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; crc, k<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong i, j<br/>\u00a0<br/>    <span class=\"kw1\">If</span> have_table = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">255</span><br/>            k = i<br/>            <span class=\"kw1\">For</span> j = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">7</span><br/>                <span class=\"kw1\">If</span> <span class=\"br0\">(</span>k And <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>                    k <span class=\"kw1\">Shr</span>= <span class=\"nu0\">1</span><br/>                    k <span class=\"kw1\">Xor</span>= &amp;Hedb88320<br/>                <span class=\"kw1\">Else</span><br/>                    k <span class=\"kw1\">Shr</span>= <span class=\"nu0\">1</span><br/>                <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>                table<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = k<br/>            <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">Next</span><br/>        have_table = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>\u00a0<br/>    crc = <span class=\"kw1\">Not</span> crc <span class=\"co1\">' crc = &amp;Hffffffff</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Len</span><span class=\"br0\">(</span>buf<span class=\"br0\">)</span> -<span class=\"nu0\">1</span><br/>        crc = <span class=\"br0\">(</span>crc <span class=\"kw1\">Shr</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> table<span class=\"br0\">(</span><span class=\"br0\">(</span>crc And &amp;hff<span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> buf<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">Return</span> <span class=\"kw1\">Not</span> crc<br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> l = <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> UInteger&lt;<span class=\"nu0\">32</span>&gt; crc<br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"input = \"</span>; l<br/><span class=\"kw1\">print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The CRC-32 checksum = \"</span>; <span class=\"kw1\">Hex</span><span class=\"br0\">(</span>crc32<span class=\"br0\">(</span>l<span class=\"br0\">)</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Go", "loc": 12, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"hash/crc32\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    s <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"sy1\">)</span><br/>    result <span class=\"sy2\">:=</span> crc32<span class=\"sy3\">.</span>ChecksumIEEE<span class=\"sy1\">(</span>s<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%X<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> result<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 3, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> crc32<span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20byte\"><span class=\"kw4\">byte</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> bytes<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">zip</span>.<a href=\"http://www.google.de/search?as_q=CRC32&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">CRC32</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">with</span> <span class=\"br0\">{</span> update bytes<span class=\"sy0\">;</span> value <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 21, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Bits<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Word<br/><span class=\"kw1\">import</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Numeric.html\"><span class=\"kw2\">Numeric</span></a><br/>\u00a0<br/>crcTable <span class=\"sy0\">::</span> Word32 <span class=\"sy0\">-&gt;</span> Word32<br/>crcTable i <span class=\"sy0\">=</span> table <span class=\"sy0\">!!</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">where</span> <br/>                table <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>\\a <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> xf a <span class=\"sy0\">!!</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"nu0\">255</span><span class=\"br0\">]</span><br/>                xf r <span class=\"sy0\">=</span> <span class=\"kw1\">let</span> d <span class=\"sy0\">=</span> shiftR r <span class=\"nu0\">1</span> <span class=\"kw1\">in</span> <br/>                        <span class=\"kw1\">if</span> r <span class=\"sy0\">.</span>&amp;<span class=\"sy0\">.</span> <span class=\"nu0\">1</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> xor d 0xedb88320 <span class=\"kw1\">else</span> d<br/>\u00a0<br/>charToWord <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"sy0\">-&gt;</span> Word32<br/>charToWord c <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromEnum\"><span class=\"kw3\">fromEnum</span></a><span class=\"br0\">)</span> c<br/>\u00a0<br/>calcCrc <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> Word32<br/>calcCrc text <span class=\"sy0\">=</span> complement <span class=\"br0\">(</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldl\"><span class=\"kw3\">foldl</span></a> cf <span class=\"br0\">(</span>complement <span class=\"nu0\">0</span><span class=\"br0\">)</span> text <span class=\"br0\">)</span><br/>        <span class=\"kw1\">where</span> cf crc x <span class=\"sy0\">=</span> xor <span class=\"br0\">(</span>shiftR crc <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>crcTable <span class=\"sy0\">$</span> xor <span class=\"br0\">(</span>crc <span class=\"sy0\">.</span>&amp;<span class=\"sy0\">.</span> 0xff<span class=\"br0\">)</span> <span class=\"br0\">(</span>charToWord x<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0<br/>crc32 text <span class=\"sy0\">=</span> showHex <span class=\"br0\">(</span> calcCrc text <span class=\"br0\">)</span> <span class=\"st0\">\"\"</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> crc32 <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span></pre>"}, {"lang": "Icon and Unicon", "loc": 33, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> hexcvt<span class=\"sy1\">,</span>printf<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   s <span class=\"sy1\">:=</span> <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><br/>   a <span class=\"sy1\">:=</span> <span class=\"st0\">\"414FA339\"</span><br/>   printf<span class=\"br0\">(</span><span class=\"st0\">\"crc(%i)=%s - implementation is\u00a0%s<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>          s<span class=\"sy1\">,</span>r <span class=\"sy1\">:=</span> crc32<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"kw1\">if</span> r <span class=\"sy1\">==</span> a <span class=\"kw1\">then</span> <span class=\"st0\">\"correct\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"in error\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> crc32<span class=\"br0\">(</span>s<span class=\"br0\">)</span>      <span class=\"co1\">#: return crc-32 (ISO 3309, ITU-T V.42, Gzip, PNG) of s</span><br/><span class=\"kw2\">static</span> crcL<span class=\"sy1\">,</span>mask<br/><span class=\"kw1\">initial</span> <span class=\"br0\">{</span><br/>   crcL <span class=\"sy1\">:=</span> <span class=\"kw4\">list</span><span class=\"br0\">(</span><span class=\"nu0\">256</span><span class=\"br0\">)</span>                            <span class=\"co1\"># crc table</span><br/>   p <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span><span class=\"nu0\">10</span><span class=\"sy1\">,</span><span class=\"nu0\">11</span><span class=\"sy1\">,</span><span class=\"nu0\">12</span><span class=\"sy1\">,</span><span class=\"nu0\">16</span><span class=\"sy1\">,</span><span class=\"nu0\">22</span><span class=\"sy1\">,</span><span class=\"nu0\">23</span><span class=\"sy1\">,</span><span class=\"nu0\">26</span><span class=\"br0\">]</span>    <span class=\"co1\"># polynomial terms </span><br/>   mask <span class=\"sy1\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">^</span><span class=\"nu0\">32</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span>                               <span class=\"co1\"># word size mask   </span><br/>   <span class=\"kw1\">every</span> <span class=\"br0\">(</span>poly <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">ior</span><span class=\"br0\">(</span>poly<span class=\"sy1\">,</span><span class=\"kw4\">ishift</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">31</span><span class=\"sy1\">-</span>p<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>p<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> c <span class=\"sy1\">:=</span> n <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*</span>crcL<span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span>            <span class=\"co1\"># table </span><br/>      <span class=\"kw1\">every</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">8</span> <span class=\"kw1\">do</span> <br/>         c <span class=\"sy1\">:=</span> <span class=\"kw4\">iand</span><span class=\"br0\">(</span>mask<span class=\"sy1\">,</span> <br/>                   <span class=\"kw1\">if</span> <span class=\"kw4\">iand</span><span class=\"br0\">(</span>c<span class=\"sy1\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>                      <span class=\"kw4\">ixor</span><span class=\"br0\">(</span>poly<span class=\"sy1\">,</span><span class=\"kw4\">ishift</span><span class=\"br0\">(</span>c<span class=\"sy1\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>                   <span class=\"kw1\">else</span> <br/>                      <span class=\"kw4\">ishift</span><span class=\"br0\">(</span>c<span class=\"sy1\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">)</span><br/>      crcL<span class=\"br0\">[</span>n<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> c<br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   crc <span class=\"sy1\">:=</span> <span class=\"kw4\">ixor</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span>mask<span class=\"br0\">)</span>                          <span class=\"co1\"># invert bits</span><br/>   <span class=\"kw1\">every</span> crc <span class=\"sy1\">:=</span> <span class=\"kw4\">iand</span><span class=\"br0\">(</span>mask<span class=\"sy1\">,</span><br/>                     <span class=\"kw4\">ixor</span><span class=\"br0\">(</span>crcL<span class=\"br0\">[</span><span class=\"kw4\">iand</span><span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"sy1\">,</span><span class=\"kw4\">ixor</span><span class=\"br0\">(</span>crc<span class=\"sy1\">,</span><span class=\"kw4\">ord</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"kw4\">ishift</span><span class=\"br0\">(</span>crc<span class=\"sy1\">,-</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>               <br/>   <span class=\"kw1\">return</span> hexstring<span class=\"br0\">(</span><span class=\"kw4\">ixor</span><span class=\"br0\">(</span>crc<span class=\"sy1\">,</span>mask<span class=\"br0\">)</span><span class=\"br0\">)</span>             <span class=\"co1\"># return hexstring</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   <span class=\"sy0\">((</span>i.<span class=\"nu0\">32</span><span class=\"sy0\">)</span> e. <span class=\"nu0\">32</span> <span class=\"nu0\">26</span> <span class=\"nu0\">23</span> <span class=\"nu0\">22</span> <span class=\"nu0\">16</span> <span class=\"nu0\">12</span> <span class=\"nu0\">11</span> <span class=\"nu0\">10</span> <span class=\"nu0\">8</span> <span class=\"nu0\">7</span> <span class=\"nu0\">5</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"sy0\">)</span> <span class=\"nu0\">128</span>!:<span class=\"nu0\">3</span> <span class=\"st_h\">'The quick brown fox jumps over the lazy dog'</span><br/><span class=\"nu0\">_3199229127</span></pre>"}, {"lang": "Java", "loc": 10, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.zip.*</span> <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> CRCMaker <span class=\"br0\">{</span><br/>   <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span> <span class=\"br0\">]</span> args <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toBeEncoded <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">(</span> <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acrc32+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">CRC32</span></a> myCRC <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acrc32+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">CRC32</span></a><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>      myCRC.<span class=\"me1\">update</span><span class=\"br0\">(</span> toBeEncoded.<span class=\"me1\">getBytes</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>      <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span> <span class=\"st0\">\"The CRC-32 value is\u00a0: \"</span> <span class=\"sy0\">+</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>.<span class=\"me1\">toHexString</span><span class=\"br0\">(</span> myCRC.<span class=\"me1\">getValue</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"\u00a0!\"</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.0.6</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">zip</span>.<span class=\"me1\">CRC32</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> text <span class=\"sy0\">=</span> <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> crc <span class=\"sy0\">=</span> CRC32<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">with</span></a> <span class=\"br0\">(</span>crc<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        update<span class=\"br0\">(</span>text.<span class=\"me1\">toByteArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"The CRC-32 checksum of '$text' = ${\"</span><span class=\"sy0\">%</span>x<span class=\"st0\">\".format(value)}\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lingo", "loc": 9, "block": "<pre class=\"text highlighted_source\">crcObj = script(\"CRC\").new()<br/>\u00a0<br/>crc32 = crcObj.crc32(\"The quick brown fox jumps over the lazy dog\")<br/>\u00a0<br/>put crc32<br/>-- &lt;ByteArrayObject length = 4 ByteArray = 0x41, 0x4f, 0xa3, 0x39 &gt;<br/>\u00a0<br/>put crc32.toHexString(1, crc32.length)<br/>-- \"41 4f a3 39\"</pre>"}, {"lang": "Julia", "loc": 31, "block": "<pre class=\"text highlighted_source\">function crc32(crc::Int, str::String)<br/>    table = zeros(UInt32, 256)<br/>\u00a0<br/>    for i in 0:255<br/>        tmp = i<br/>        for j in 0:7<br/>            if tmp &amp; 1 == 1<br/>                tmp &gt;&gt;= 1<br/>                tmp \u22bb= 0xedb88320<br/>            else<br/>                tmp &gt;&gt;= 1<br/>            end<br/>        end<br/>\u00a0<br/>        table[i + 1] = tmp<br/>    end<br/>\u00a0<br/>    crc \u22bb= 0xffffffff<br/>\u00a0<br/>    for i in UInt32.(collect(str))<br/>        crc = (crc &gt;&gt; 8) \u22bb table[(crc &amp; 0xff) \u22bb i + 1]<br/>    end<br/>\u00a0<br/>    crc \u22bb 0xffffffff<br/>end<br/>\u00a0<br/>str = \"The quick brown fox jumps over the lazy dog\"<br/>crc = crc32(0, str)<br/>assert(crc == 0x414fa339)<br/>println(\"Message: \", str)<br/>println(\"Checksum: \", hex(crc))</pre>"}, {"lang": "M2000 Interpreter", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module CheckIt {<br/>      Function PrepareTable {<br/>            Dim Base 0, table(256)<br/>            For i = 0 To 255 {<br/>                    k = i<br/>                    For j = 0 To 7 {<br/>                              If binary.and(k,1)=1 Then {<br/>                                  k =binary.Xor(binary.shift(k, -1) ,  0xEDB88320)<br/>                              }  Else k=binary.shift(k, -1)<br/>                    }<br/>                    table(i) = k<br/>             }<br/>             =table()      <br/>      }       <br/>      crctable=PrepareTable()<br/>      crc32= lambda crctable (buf$) -&gt; {<br/>                crc =0xFFFFFFFF<br/>                For i = 0 To Len(buf$) -1<br/>                     crc = binary.xor(binary.shift(crc, -8), array(crctable, binary.xor(binary.and(crc, 0xff), asc(mid$(buf$, i+1, 1)))))<br/>                Next i<br/>                =0xFFFFFFFF-crc       <br/>      }<br/>      Print crc32(\"The quick brown fox jumps over the lazy dog\")=0x414fa339<br/>}<br/>CheckIt<br/>\u00a0</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 7, "block": "<pre class=\"text highlighted_source\">type=\"CRC32\"; (*pick one out of 13 predefined hash types*)<br/>StringForm[<br/>\"The \"&lt;&gt;type&lt;&gt;\" hash code of \\\"``\\\" is ``.\",<br/>s=\"The quick brown fox jumps over the lazy dog\",<br/>Hash[s,type,\"HexString\"]<br/>]<br/>\u00a0</pre>"}, {"lang": "NetRexx", "loc": 12, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols <span class=\"kw2\">binary</span><br/>\u00a0<br/><span class=\"kw1\">import</span> java.<span class=\"me0\">util</span>.<span class=\"me0\">zip</span>.<span class=\"me0\">CRC32</span><br/>\u00a0<br/>toBeEncoded = String<span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"br0\">)</span><br/>myCRC = CRC32<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>myCRC.<span class=\"me0\">update</span><span class=\"br0\">(</span>toBeEncoded.<span class=\"me0\">getBytes</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"The CRC-32 value is\u00a0:\"</span> Long.<span class=\"me0\">toHexString</span><span class=\"br0\">(</span>myCRC.<span class=\"me0\">getValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"!\"</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Nim", "loc": 23, "block": "<pre class=\"text highlighted_source\">import unsigned, strutils<br/>\u00a0<br/>type TCrc32* = uint32<br/>const InitCrc32* = TCrc32(-1)<br/>\u00a0<br/>proc createCrcTable(): array[0..255, TCrc32] =<br/>  for i in 0..255:<br/>    var rem = TCrc32(i)<br/>    for j in 0..7:<br/>      if (rem and 1) &gt; 0: rem = (rem shr 1) xor TCrc32(0xedb88320)<br/>      else: rem = rem shr 1<br/>    result[i] = rem<br/>\u00a0<br/># Table created at compile time<br/>const crc32table = createCrcTable()<br/>\u00a0<br/>proc crc32(s: string): TCrc32 =<br/>  result = InitCrc32<br/>  for c in s:<br/>    result = (result shr 8) xor crc32table[(result and 0xff) xor ord(c)]<br/>  result = not result<br/>\u00a0<br/>echo crc32(\"The quick brown fox jumps over the lazy dog\").int64.toHex(8)</pre>"}, {"lang": "Oberon-2", "loc": 13, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> CRC32;<br/><span class=\"kw1\">IMPORT</span><br/>  NPCT<span class=\"sy0\">:</span>Zlib<span class=\"sy0\">,</span><br/>  Strings<span class=\"sy0\">,</span><br/>  Out;<br/><span class=\"kw1\">VAR</span><br/>  s<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"nu0\">128</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw3\">COPY</span><span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"sy0\">,</span>s<span class=\"br0\">)</span>;<br/>  Out.<span class=\"me1\">Hex</span><span class=\"br0\">(</span>Zlib.<span class=\"me1\">CRC32</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>s<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span>Strings.<span class=\"me1\">Length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> CRC32.<br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 4, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> s <span class=\"sy0\">=</span> <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> crc <span class=\"sy0\">=</span> Zlib<span class=\"sy0\">.</span>update_crc 0l s <span class=\"nu0\">0</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html\"><span class=\"kw2\">String</span></a><span class=\"sy0\">.</span>length s<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"crc:\u00a0%lX\\n\"</span> crc</pre>"}, {"lang": "ooRexx", "loc": 9, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"coMULTI\">/* ooRexx */</span><br/>clzCRC32=bsf<span class=\"sy0\">.</span>importClass<span class=\"br0\">(</span><span class=\"st0\">\"java.util.zip.CRC32\"</span><span class=\"br0\">)</span><br/>myCRC32 =clzCRC32~new<br/>toBeEncoded=<span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><br/>myCRC32~update<span class=\"br0\">(</span>BsfRawBytes<span class=\"br0\">(</span>toBeEncoded<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">20</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'The CRC-32 value of \"'</span>toBeEncoded<span class=\"st0\">'\" is:'</span> myCRC32~getValue~<span class=\"kw6\">d2x</span><br/>\u00a0<br/>::requires <span class=\"st0\">\"BSF.CLS\"</span>    <span class=\"co1\">-- get Java bridge      </span></pre>"}, {"lang": "PARI/GP", "loc": 5, "block": "<pre class=\"parigp highlighted_source\">\u00a0<br/><span class=\"kw1\">install</span><span class=\"br0\">(</span><span class=\"st0\">\"crc32\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"lLsL\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"crc32\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"libz.so\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>s <span class=\"sy0\">=</span> <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%0x<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> crc32<span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> #s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 10, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> <span class=\"nu0\">5.010</span> <span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict <span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings <span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> Digest<span class=\"sy0\">::</span><span class=\"me2\">CRC</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span> crc32 <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$crc</span> <span class=\"sy0\">=</span> Digest<span class=\"sy0\">::</span><span class=\"me2\">CRC</span><span class=\"sy0\">-&gt;</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> type <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"crc32\"</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/><span class=\"re0\">$crc</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">add</span> <span class=\"br0\">(</span> <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span> <span class=\"br0\">)</span>  <span class=\"sy0\">;</span><br/>say <span class=\"st0\">\"The checksum is \"</span> <span class=\"sy0\">.</span> <span class=\"re0\">$crc</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">hexdigest</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 6, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> NativeCall<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> crc32<span class=\"br0\">(</span>int32 <span class=\"re0\">$crc</span><span class=\"sy0\">,</span> Buf <span class=\"re0\">$buf</span><span class=\"sy0\">,</span> int32 <span class=\"re0\">$len</span> <span class=\"sy0\">--&gt;</span> int32<span class=\"br0\">)</span> <span class=\"kw1\">is</span> native<span class=\"br0\">(</span><span class=\"st_h\">'z'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"sy0\">*</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$buf</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'The quick brown fox jumps over the lazy dog'</span><span class=\"sy0\">.</span><span class=\"kw3\">encode</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> crc32<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$buf</span><span class=\"sy0\">,</span> <span class=\"re0\">$buf</span><span class=\"sy0\">.</span><span class=\"kw3\">bytes</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st_h\">'%08x'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 37, "block": "<pre class=\"text highlighted_source\">sequence table<br/>integer have_table = 0<br/>\u00a0<br/>procedure make_crc()<br/>atom rem<br/>    if have_table=0 then<br/>        have_table = 1<br/>        table = repeat(0,256)<br/>        for i=0 to 255 do<br/>            rem = i<br/>            for j=1 to 8 do<br/>                if and_bits(rem,1) then<br/>                    rem = xor_bits(floor(rem/2),#EDB88320)<br/>                else<br/>                    rem = floor(rem/2)<br/>                end if<br/>                if rem&lt;0 then<br/>                    rem += #100000000<br/>                end if<br/>            end for<br/>            table[i+1] = rem<br/>        end for<br/>    end if<br/>end procedure<br/>\u00a0<br/>function crc32(string s)<br/>atom crc = #FFFFFFFF<br/>    if have_table=0 then make_crc() end if<br/>    for i=1 to length(s) do<br/>        crc = xor_bits(floor(crc/#100),table[xor_bits(and_bits(crc,0xff),s[i])+1])<br/>        if crc&lt;0 then<br/>            crc += #100000000<br/>        end if<br/>    end for<br/>--  return not_bits(crc)<br/>    return and_bits(not_bits(crc),#FFFFFFFF)<br/>end function</pre>"}, {"lang": "PHP", "loc": 1, "block": "<pre class=\"php highlighted_source\"><a href=\"http://www.php.net/printf\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es6\">%x</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/crc32\"><span class=\"kw3\">crc32</span></a><span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PL/I", "loc": 98, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process source attributes xref or<span class=\"br0\">(</span>!<span class=\"br0\">)</span> nest<span class=\"sy0\">;</span><br/> crct<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * 19.08.2013 Walter Pachl  derived from REXX<br/> *********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span><span class=\"kw1\">LEFT</span><span class=\"sy0\">,</span><span class=\"kw1\">LENGTH</span><span class=\"sy0\">,</span><span class=\"kw1\">RIGHT</span><span class=\"sy0\">,</span><span class=\"kw1\">SUBSTR</span><span class=\"sy0\">,</span><span class=\"kw1\">UNSPEC</span><span class=\"br0\">)</span> <span class=\"kw1\">Builtin</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"kw1\">SYSPRINT</span> <span class=\"kw1\">Print</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">dcl</span> tab<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">255</span><span class=\"br0\">)</span> <span class=\"kw1\">Bit</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> mk_tab<span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> crc_32<span class=\"br0\">(</span><span class=\"st0\">'The quick brown fox jumps over the lazy dog'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> crc_32<span class=\"br0\">(</span><span class=\"st0\">'Generate CRC32 Checksum For Byte Array Example'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> crc_32<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"coMULTI\">/*********************************************************************<br/> * compute checksum for s<br/> *********************************************************************/</span><br/> <span class=\"kw1\">Dcl</span> s <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> d   <span class=\"kw1\">Bit</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> d1  <span class=\"kw1\">Bit</span><span class=\"br0\">(</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> d2  <span class=\"kw1\">Bit</span><span class=\"br0\">(</span><span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> cc  <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> ccb <span class=\"kw1\">Bit</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> tib <span class=\"kw1\">Bit</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> ti  <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"kw1\">Unsigned</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> k   <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span> <span class=\"kw1\">Unsigned</span><span class=\"sy0\">;</span><br/> d<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"st0\">'1'</span>b<span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> k<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    d1<span class=\"sy0\">=</span><span class=\"kw1\">right</span><span class=\"br0\">(</span>d<span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    d2<span class=\"sy0\">=</span><span class=\"kw1\">left</span><span class=\"br0\">(</span>d<span class=\"sy0\">,</span><span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    cc<span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span>k<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    ccb<span class=\"sy0\">=</span><span class=\"kw1\">unspec</span><span class=\"br0\">(</span>cc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    tib<span class=\"sy0\">=</span>d1<span class=\"sy0\">^</span>ccb<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">Unspec</span><span class=\"br0\">(</span>ti<span class=\"br0\">)</span><span class=\"sy0\">=</span>tib<span class=\"sy0\">;</span><br/>    d<span class=\"sy0\">=</span><span class=\"st0\">'00000000'</span>b!!d2<span class=\"sy0\">^</span>tab<span class=\"br0\">(</span>ti<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>  d<span class=\"sy0\">=</span>d<span class=\"sy0\">^</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"st0\">'1'</span>b<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>s<span class=\"sy0\">,</span><span class=\"st0\">'CRC_32='</span><span class=\"sy0\">,</span>b2x<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">'decimal '</span><span class=\"sy0\">,</span>b2d<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">skip</span><span class=\"sy0\">,</span>x<span class=\"br0\">(</span><span class=\"nu0\">49</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>a<span class=\"sy0\">,</span>f<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> b2x<span class=\"sy0\">:</span> <span class=\"kw1\">proc</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">char</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">dcl</span> b <span class=\"kw1\">bit</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">dcl</span> <span class=\"kw1\">b4</span> <span class=\"kw1\">bit</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">dcl</span> i <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">dcl</span> r <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span> <span class=\"kw1\">init</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">29</span> <span class=\"kw1\">By</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">b4</span><span class=\"sy0\">=</span><span class=\"kw1\">substr</span><span class=\"br0\">(</span>b<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Select</span><span class=\"br0\">(</span><span class=\"kw1\">b4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'0000'</span>b<span class=\"br0\">)</span> r<span class=\"sy0\">=</span>r!!<span class=\"st0\">'0'</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'0001'</span>b<span class=\"br0\">)</span> r<span class=\"sy0\">=</span>r!!<span class=\"st0\">'1'</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'0010'</span>b<span class=\"br0\">)</span> r<span class=\"sy0\">=</span>r!!<span class=\"st0\">'2'</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'0011'</span>b<span class=\"br0\">)</span> r<span class=\"sy0\">=</span>r!!<span class=\"st0\">'3'</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'0100'</span>b<span class=\"br0\">)</span> r<span class=\"sy0\">=</span>r!!<span class=\"st0\">'4'</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'0101'</span>b<span class=\"br0\">)</span> r<span class=\"sy0\">=</span>r!!<span class=\"st0\">'5'</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'0110'</span>b<span class=\"br0\">)</span> r<span class=\"sy0\">=</span>r!!<span class=\"st0\">'6'</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'0111'</span>b<span class=\"br0\">)</span> r<span class=\"sy0\">=</span>r!!<span class=\"st0\">'7'</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'1000'</span>b<span class=\"br0\">)</span> r<span class=\"sy0\">=</span>r!!<span class=\"st0\">'8'</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'1001'</span>b<span class=\"br0\">)</span> r<span class=\"sy0\">=</span>r!!<span class=\"st0\">'9'</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'1010'</span>b<span class=\"br0\">)</span> r<span class=\"sy0\">=</span>r!!<span class=\"st0\">'A'</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'1011'</span>b<span class=\"br0\">)</span> r<span class=\"sy0\">=</span>r!!<span class=\"st0\">'B'</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'1100'</span>b<span class=\"br0\">)</span> r<span class=\"sy0\">=</span>r!!<span class=\"st0\">'C'</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'1101'</span>b<span class=\"br0\">)</span> r<span class=\"sy0\">=</span>r!!<span class=\"st0\">'D'</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'1110'</span>b<span class=\"br0\">)</span> r<span class=\"sy0\">=</span>r!!<span class=\"st0\">'E'</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'1111'</span>b<span class=\"br0\">)</span> r<span class=\"sy0\">=</span>r!!<span class=\"st0\">'F'</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> b2d<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">Dec</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> b <span class=\"kw1\">Bit</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> r <span class=\"kw1\">Dec</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> i <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">16</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">32</span><span class=\"sy0\">;</span><br/>   r<span class=\"sy0\">=</span>r<span class=\"sy0\">*</span><span class=\"nu0\">2</span><br/>   <span class=\"kw1\">If</span> <span class=\"kw1\">substr</span><span class=\"br0\">(</span>b<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>     r<span class=\"sy0\">=</span>r<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> mk_tab<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">dcl</span> b32 <span class=\"kw1\">bit</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">dcl</span> lb  <span class=\"kw1\">bit</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">dcl</span> ccc <span class=\"kw1\">bit</span><span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"st0\">'edb88320'</span><span class=\"kw1\">bx</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">dcl</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">15</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">255</span><span class=\"sy0\">;</span><br/>   b32<span class=\"sy0\">=</span><span class=\"br0\">(</span><span class=\"nu0\">24</span><span class=\"br0\">)</span><span class=\"st0\">'0'</span>b!!<span class=\"kw1\">unspec</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">7</span><span class=\"sy0\">;</span><br/>     lb<span class=\"sy0\">=</span><span class=\"kw1\">right</span><span class=\"br0\">(</span>b32<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     b32<span class=\"sy0\">=</span><span class=\"st0\">'0'</span>b!!<span class=\"kw1\">left</span><span class=\"br0\">(</span>b32<span class=\"sy0\">,</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> lb<span class=\"sy0\">=</span><span class=\"st0\">'1'</span>b <span class=\"kw1\">Then</span><br/>       b32<span class=\"sy0\">=</span>b32<span class=\"sy0\">^</span>ccc<span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   tab<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>b32<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 27, "block": "<pre class=\"text highlighted_source\">(setq *Table<br/>   (mapcar<br/>      '((N)<br/>         (do 8<br/>            (setq N<br/>               (if (bit? 1 N)<br/>                  (x| (&gt;&gt; 1 N) `(hex \"EDB88320\"))<br/>                  (&gt;&gt; 1 N) ) ) ) )<br/>      (range 0 255) ) )<br/>\u00a0<br/>(de crc32 (Lst)<br/>   (let Crc `(hex \"FFFFFFFF\")<br/>      (for I (chop Lst)<br/>         (setq Crc<br/>            (x|<br/>               (get<br/>                  *Table<br/>                  (inc (x| (&amp; Crc 255) (char I))) )<br/>               (&gt;&gt; 8 Crc) ) ) )<br/>      (x| `(hex \"FFFFFFFF\") Crc) ) )<br/>\u00a0<br/>(let Str \"The quick brown fox jumps over the lazy dog\"<br/>   (println (hex (crc32 Str)))<br/>   (println<br/>      (hex (native \"libz.so\" \"crc32\" 'N 0 Str (length Str))) ) )<br/>\u00a0<br/>(bye)</pre>"}, {"lang": "PureBasic", "loc": 11, "block": "<pre class=\"purebasic highlighted_source\">\u00a0<br/>a$<span class=\"sy0\">=</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><br/>\u00a0<br/>UseCRC32Fingerprint<span class=\"br0\">(</span><span class=\"br0\">)</span>\u00a0: b$<span class=\"sy0\">=</span>StringFingerprint<span class=\"br0\">(</span>a$, #PB_Cipher_CRC32<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"CRC32 Cecksum [hex] = \"</span><span class=\"sy0\">+</span><span class=\"kw2\">UCase</span><span class=\"br0\">(</span>b$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"CRC32 Cecksum [dec] = \"</span><span class=\"sy0\">+</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"st0\">\"$\"</span><span class=\"sy0\">+</span>b$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Python", "loc": 8, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> s <span class=\"sy0\">=</span> <span class=\"st0\">'The quick brown fox jumps over the lazy dog'</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> <span class=\"kw3\">zlib</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw2\">hex</span><span class=\"br0\">(</span><span class=\"kw3\">zlib</span>.<span class=\"me1\">crc32</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"st0\">'0x414fa339'</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">import</span> <span class=\"kw3\">binascii</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw2\">hex</span><span class=\"br0\">(</span><span class=\"kw3\">binascii</span>.<span class=\"me1\">crc32</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"st0\">'0x414fa339'</span></pre>"}, {"lang": "Racket", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (bytes-crc32 data)<br/>  (bitwise-xor<br/>   (for/fold ([accum #xFFFFFFFF])<br/>     ([byte  (in-bytes data)])<br/>     (for/fold ([accum (bitwise-xor accum byte)])<br/>       ([num (in-range 0 8)])<br/>       (bitwise-xor (quotient accum 2)<br/>                    (* #xEDB88320 (bitwise-and accum 1)))))<br/>   #xFFFFFFFF))<br/>\u00a0<br/>(define (crc32 s)<br/>  (bytes-crc32 (string-&gt;bytes/utf-8 s)))<br/>\u00a0<br/>(format \"~x\" (crc32 \"The quick brown fox jumps over the lazy dog\"))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 34, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program computes the  CRC\u250032  (32 bit Cyclic Redundancy Check)  checksum  for a  */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500given string  [as described in ISO 3309, ITU\u2500T V.42].*/</span><br/><span class=\"kw1\">call</span> show  <span class=\"st0\">'The quick brown fox jumps over the lazy dog'</span>               <span class=\"coMULTI\">/*the 1st string.*/</span><br/><span class=\"kw1\">call</span> show  <span class=\"st0\">'Generate CRC32 Checksum For Byte Array Example'</span>            <span class=\"coMULTI\">/* \"  2nd    \"   */</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>CRC_32: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span>\u00a0!,$;  c=<span class=\"st0\">'edb88320'</span>x <span class=\"coMULTI\">/*2nd arg used for repeated invocations*/</span><br/>                                   f=<span class=\"st0\">'ffFFffFF'</span>x <span class=\"coMULTI\">/* [\u2193]  build an  8\u2500bit  indexed table,*/</span><br/>            <span class=\"kw1\">do</span> i=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">256</span>;       z=<span class=\"kw6\">d2c</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>      <span class=\"coMULTI\">/*                  one byte at a time.*/</span><br/>            r=<span class=\"kw6\">right</span><span class=\"br0\">(</span>z, <span class=\"nu0\">4</span>, <span class=\"st0\">'0'</span>x<span class=\"br0\">)</span>                  <span class=\"coMULTI\">/*insure the  \"R\"   is thirty-two bits.*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  handle each rightmost byte bit.*/</span><br/>              <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> <span class=\"nu0\">8</span>;      rb=<span class=\"kw6\">x2b</span><span class=\"br0\">(</span><span class=\"kw6\">c2x</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*handle each bit of rightmost 8 bits. */</span><br/>              r=<span class=\"kw6\">x2c</span><span class=\"br0\">(</span><span class=\"kw6\">b2x</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">||</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>rb, <span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>      <span class=\"coMULTI\">/*shift it right (an unsigned)  1  bit.*/</span><br/>              <span class=\"kw1\">if</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>rb,<span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> r=<span class=\"kw6\">bitxor</span><span class=\"br0\">(</span>r,c<span class=\"br0\">)</span> <span class=\"coMULTI\">/*this is a bin bit for XOR grunt\u2500work.*/</span><br/>              <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*j*/</span><br/>           \u00a0!<span class=\"sy0\">.</span>z=r                                <span class=\"coMULTI\">/*assign to an eight\u2500bit index table.  */</span><br/>            <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*i*/</span><br/>\u00a0<br/>        $=<span class=\"kw6\">bitxor</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>$ <span class=\"st0\">'0000000'</span>x, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, f<span class=\"br0\">)</span>       <span class=\"coMULTI\">/*utilize the user's CRC or a default. */</span><br/>            <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>!<span class=\"br0\">)</span>                <span class=\"coMULTI\">/*start number crunching the input data*/</span><br/>           \u00a0?=<span class=\"kw6\">bitxor</span><span class=\"br0\">(</span><span class=\"kw6\">right</span><span class=\"br0\">(</span>$,<span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw6\">substr</span><span class=\"br0\">(</span>!,k,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            $=<span class=\"kw6\">bitxor</span><span class=\"br0\">(</span><span class=\"st0\">'0'</span>x <span class=\"sy0\">||</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span>$, <span class=\"nu0\">3</span><span class=\"br0\">)</span>, \u00a0!<span class=\"sy0\">.</span>?<span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>        <span class=\"kw1\">return</span> $                                 <span class=\"coMULTI\">/*return with cyclic redundancy check. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>show:   <span class=\"kw1\">procedure</span>;   <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> Xstring;   <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">12</span>;      <span class=\"kw1\">say</span>;     <span class=\"kw1\">say</span><br/>        checksum=CRC_32<span class=\"br0\">(</span>Xstring<span class=\"br0\">)</span>                       <span class=\"coMULTI\">/*invoke  CRC_32 to create a CRC.*/</span><br/>        checksum=<span class=\"kw6\">bitxor</span><span class=\"br0\">(</span>checksum, <span class=\"st0\">'ffFFffFF'</span>x<span class=\"br0\">)</span>         <span class=\"coMULTI\">/*final convolution for checksum.*/</span><br/>        <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">' input string [length of'</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>Xstring<span class=\"br0\">)</span> <span class=\"st0\">\"bytes] \"</span>, <span class=\"nu0\">79</span>, <span class=\"st0\">'\u2550'</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">say</span> Xstring                                    <span class=\"coMULTI\">/*show the string on its own line*/</span><br/>        <span class=\"kw1\">say</span>                                            <span class=\"coMULTI\">/*\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193\u2193  is fifteen blanks*/</span><br/>        <span class=\"kw1\">say</span>  <span class=\"st0\">\"hex CRC-32 checksum =\"</span>   <span class=\"kw6\">c2x</span><span class=\"br0\">(</span>checksum<span class=\"br0\">)</span>     <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"nu0\">15</span><span class=\"br0\">)</span>,<br/>             <span class=\"st0\">\"dec CRC-32 checksum =\"</span>   <span class=\"kw6\">c2d</span><span class=\"br0\">(</span>checksum<span class=\"br0\">)</span>   <span class=\"coMULTI\">/*show the CRC-32 in hex and dec.*/</span><br/>        <span class=\"kw1\">return</span></pre>"}, {"lang": "Ruby", "loc": 3, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'zlib'</span><br/><span class=\"kw3\">printf</span> <span class=\"st0\">\"0x%08x<span class=\"es0\">\\n</span>\"</span>, <span class=\"kw4\">Zlib</span>.<span class=\"me1\">crc32</span><span class=\"br0\">(</span><span class=\"st0\">'The quick brown fox jumps over the lazy dog'</span><span class=\"br0\">)</span><br/><span class=\"co1\"># =&gt; 0x414fa339</span></pre>"}, {"lang": "Rust", "loc": 28, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>fn crc32_compute_table() -&gt; [u32; 256] {<br/>    let mut crc32_table = [0; 256];<br/>\u00a0<br/>    for n in 0..256 {<br/>        crc32_table[n as usize] = (0..8).fold(n as u32, |acc, _| {<br/>            match acc &amp; 1 {<br/>                1 =&gt; 0xedb88320 ^ (acc &gt;&gt; 1),<br/>                _ =&gt; acc &gt;&gt; 1,<br/>            }<br/>        });<br/>    }<br/>\u00a0<br/>    crc32_table<br/>}<br/>\u00a0<br/>fn crc32(buf: &amp;str) -&gt; u32 {<br/>    let crc_table = crc32_compute_table();<br/>\u00a0<br/>   \u00a0!buf.bytes().fold(!0, |acc, octet| {<br/>        (acc &gt;&gt; 8) ^ crc_table[((acc &amp; 0xff) ^ octet as u32) as usize]<br/>    })<br/>}<br/>\u00a0<br/>fn main() {<br/>    println!(\"{:x}\", crc32(\"The quick brown fox jumps over the lazy dog\"));<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 4, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">zip</span>.<span class=\"me1\">CRC32</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> crc<span class=\"sy0\">=</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> CRC32<br/>crc.<span class=\"me1\">update</span><span class=\"br0\">(</span><span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span>.<span class=\"me1\">getBytes</span><span class=\"br0\">)</span><br/>println<span class=\"br0\">(</span>crc.<span class=\"me1\">getValue</span>.<span class=\"me1\">toHexString</span><span class=\"br0\">)</span>  <span class=\"co1\">//&gt; 414fa339</span></pre>"}, {"lang": "Seed7", "loc": 7, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"crc32.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(ord(crc32(\"The quick brown fox jumps over the lazy dog\")) radix 16 lpad0 8);<br/>  end func;</pre>"}, {"lang": "Smalltalk", "loc": 1, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">CRC32Stream</span> hashValueOf:<span class=\"st0\">'The quick brown fox jumps over the lazy dog'</span></pre>"}, {"lang": "Swift", "loc": 7, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>let strData = \"The quick brown fox jumps over the lazy dog\".dataUsingEncoding(NSUTF8StringEncoding,<br/>    allowLossyConversion: false)<br/>let crc = crc32(uLong(0), UnsafePointer&lt;Bytef&gt;(strData!.bytes), uInt(strData!.length))<br/>\u00a0<br/>println(NSString(format:\"%2X\", crc))</pre>"}, {"lang": "Tcl", "loc": 4, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/>\u00a0<br/><span class=\"kw1\">set</span> data <span class=\"st0\">\"The quick brown fox jumps over the lazy dog\"</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%x\"</span> <span class=\"br0\">[</span>zlib crc32 <span class=\"re0\">$data</span><span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "VAX Assembly", "loc": 24, "block": "<pre class=\"text highlighted_source\">                           EDB88320  0000     1 poly:   .long   ^xedb88320                     \u00a0;crc32<br/>                           00000044  0004     2 table:  .blkl   16<br/>                                     0044     3 <br/>         4C 58 21 0000004C'010E0000' 0044     4 fmt:    .ascid  \"!XL\"                          \u00a0;result format<br/>36 35 34 33 32 31 00000057'010E0000' 004F     5 result: .ascid  \"12345678\"                     \u00a0; and buffer<br/>                              38 37  005D       <br/>                               0000  005F     6 .entry  crc,0<br/>                         A0 AF   7F  0061     7         pushaq  table                          \u00a0;fill table<br/>                         99 AF   DF  0064     8         pushal  poly                           \u00a0; for<br/>              00000000'GF   02   FB  0067     9         calls   #2, g^lib$crc_table            \u00a0;  crc opcode<br/>      2B'  FFFFFFFF 8F   93 AF   0B  006E    10         crc     table, #-1, s^#len, b^msg      \u00a0;table,init,len,string<br/>                         98'AF       0077       <br/>                       50   50   D2  0079    11         mcoml   r0, r0                         \u00a0;invert result<br/>                                     007C    12         $fao_s\tctrstr = fmt, outbuf = result, p1 = r0\u00a0; format<br/>                         BF AF   7F  008D    13 \tpushaq\tresult\t\t\t\t;and show<br/>              00000000'GF   01   FB  0090    14         calls   #1, g^lib$put_output           \u00a0;  result 414fa339<br/>                                 04  0097    15         ret<br/>                                     0098    16 <br/>72 62 20 6B 63 69 75 71 20 65 68 54  0098    17 msg:    .ascii  \"The quick brown fox jumps over the lazy dog\"<br/>70 6D 75 6A 20 78 6F 66 20 6E 77 6F  00A4       <br/>6C 20 65 68 74 20 72 65 76 6F 20 73  00B0       <br/>               67 6F 64 20 79 7A 61  00BC       <br/>                           0000002B  00C3    18 len = .-msg<br/>                                     00C3    19 .end\tcrc</pre>"}, {"lang": "Visual Basic .NET", "loc": 29, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Public</span> <span class=\"kw1\">Class</span> Crc32<br/>\u00a0<br/>    <span class=\"co1\">' Table for pre-calculated values.</span><br/>    <span class=\"kw1\">Shared</span> table<span class=\"br0\">(</span><span class=\"nu0\">255</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">UInteger</span><br/>\u00a0<br/>    <span class=\"co1\">' Initialize table</span><br/>    <span class=\"kw1\">Shared</span> <span class=\"kw1\">Sub</span> <span class=\"kw1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw2\">UInteger</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> table<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">Dim</span> te <span class=\"kw1\">As</span> <span class=\"kw2\">UInteger</span> <span class=\"sy0\">=</span> i <span class=\"co1\">' table entry</span><br/>            <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">To</span> <span class=\"nu0\">7</span><br/>                <span class=\"kw1\">If</span> <span class=\"br0\">(</span>te <span class=\"kw1\">And</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> te <span class=\"sy0\">=</span> <span class=\"br0\">(</span>te <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> <span class=\"sy0\">&amp;</span>HEDB88320UI <span class=\"kw1\">Else</span> te <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">Next</span><br/>            table<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> te<br/>        <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/>    <span class=\"co1\">' Return checksum calculation for Byte Array,</span><br/>    <span class=\"co1\">'  optionally resuming (used when breaking a large file into read-buffer-sized blocks).</span><br/>    <span class=\"co1\">' Call with Init = False to continue calculation.</span><br/>    <span class=\"kw1\">Public</span> <span class=\"kw1\">Shared</span> <span class=\"kw1\">Function</span> cs<span class=\"br0\">(</span>BA <span class=\"kw1\">As</span> <span class=\"kw2\">Byte</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"kw1\">Optional</span> Init <span class=\"kw1\">As</span> <span class=\"kw2\">Boolean</span> <span class=\"sy0\">=</span> <span class=\"kw1\">True</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">UInteger</span><br/>        <span class=\"kw1\">Static</span> crc <span class=\"kw1\">As</span> <span class=\"kw2\">UInteger</span><br/>        <span class=\"kw1\">If</span> Init <span class=\"kw1\">Then</span> crc <span class=\"sy0\">=</span> <span class=\"kw2\">UInteger</span><span class=\"sy0\">.</span><span class=\"me1\">MaxValue</span><br/>        <span class=\"kw1\">For</span> <span class=\"kw1\">Each</span> b <span class=\"kw1\">In</span> BA<br/>            crc <span class=\"sy0\">=</span> <span class=\"br0\">(</span>crc <span class=\"sy0\">&gt;&gt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> table<span class=\"br0\">(</span><span class=\"br0\">(</span>crc <span class=\"kw1\">And</span> <span class=\"sy0\">&amp;</span>HFF<span class=\"br0\">)</span> <span class=\"kw1\">Xor</span> b<span class=\"br0\">)</span><br/>        <span class=\"kw1\">Next</span><br/>        <span class=\"kw1\">Return</span> <span class=\"kw1\">Not</span> crc<br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Class</span></pre>"}, {"lang": "XPL0", "loc": 19, "block": "<pre class=\"text highlighted_source\">code HexOut=27;         \\intrinsic routine<br/>string 0;               \\use zero-terminated strings<br/>\u00a0<br/>func CRC32(Str, Len);   \\Return CRC-32 for given string<br/>char Str;  int Len;     \\byte array, number of bytes<br/>int  I, J, R, C;<br/>[R:= -1;                \\initialize with all 1's<br/>for J:= 0 to Len-1 do<br/>    [C:= Str(J);<br/>    for I:= 0 to 8-1 do \\for each bit in byte...<br/>        [if (R xor C) and 1 then R:= R&gt;&gt;1 xor $EDB88320<br/>        else R:= R&gt;&gt;1;<br/>        C:= C&gt;&gt;1;<br/>        ];<br/>    ];<br/>return not R;<br/>];<br/>\u00a0<br/>HexOut(0, CRC32(\"The quick brown fox jumps over the lazy dog\", 43))</pre>"}, {"lang": "zkl", "loc": 3, "block": "<pre class=\"text highlighted_source\">var [const] ZLib=Import(\"zeelib\");<br/>ZLib.calcCRC32(Data(Void,\"The quick brown fox jumps over the lazy dog\"));<br/>//--&gt;0x414fa339</pre>"}]}