{"task": "Poker_hand_analyser", "blocks": [{"lang": "C", "loc": 129, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;ctype.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define TRUE 1</span><br/><span class=\"co2\">#define FALSE 0</span><br/>\u00a0<br/><span class=\"co2\">#define FACES \"23456789tjqka\"</span><br/><span class=\"co2\">#define SUITS \"shdc\"</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">int</span> bool<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> face<span class=\"sy0\">;</span>  <span class=\"coMULTI\">/* FACES map to 0..12 respectively */</span><br/>    <span class=\"kw4\">char</span> suit<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> card<span class=\"sy0\">;</span><br/>\u00a0<br/>card cards<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> compare_card<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> <span class=\"kw4\">const</span> <span class=\"kw4\">void</span> <span class=\"sy0\">*</span>b<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    card c1 <span class=\"sy0\">=</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span>card <span class=\"sy0\">*</span><span class=\"br0\">)</span>a<span class=\"sy0\">;</span><br/>    card c2 <span class=\"sy0\">=</span> <span class=\"sy0\">*</span><span class=\"br0\">(</span>card <span class=\"sy0\">*</span><span class=\"br0\">)</span>b<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> c1.<span class=\"me1\">face</span> <span class=\"sy0\">-</span> c2.<span class=\"me1\">face</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>bool equals_card<span class=\"br0\">(</span>card c1<span class=\"sy0\">,</span> card c2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c1.<span class=\"me1\">face</span> <span class=\"sy0\">==</span> c2.<span class=\"me1\">face</span> <span class=\"sy0\">&amp;&amp;</span> c1.<span class=\"me1\">suit</span> <span class=\"sy0\">==</span> c2.<span class=\"me1\">suit</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> TRUE<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> FALSE<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>bool are_distinct<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>j<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>equals_card<span class=\"br0\">(</span>cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> cards<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> FALSE<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> TRUE<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>bool is_straight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/qsort.html\"><span class=\"kw3\">qsort</span></a><span class=\"br0\">(</span>cards<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>card<span class=\"br0\">)</span><span class=\"sy0\">,</span> compare_card<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cards<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">face</span> <span class=\"sy0\">+</span> <span class=\"nu0\">4</span> <span class=\"sy0\">==</span> cards<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>.<span class=\"me1\">face</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> TRUE<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cards<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>.<span class=\"me1\">face</span> <span class=\"sy0\">==</span> <span class=\"nu0\">12</span> <span class=\"sy0\">&amp;&amp;</span> cards<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">face</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span><br/>        cards<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">face</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> TRUE<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> FALSE<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>bool is_flush<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> suit <span class=\"sy0\">=</span> cards<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">suit</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">suit</span> <span class=\"sy0\">!=</span> suit<span class=\"br0\">)</span> <span class=\"kw1\">return</span> FALSE<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> TRUE<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>analyze_hand<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>hand<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> gs <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> suit<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>cp<span class=\"sy0\">;</span><br/>    bool found<span class=\"sy0\">,</span> flush<span class=\"sy0\">,</span> straight<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> groups<span class=\"br0\">[</span><span class=\"nu0\">13</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>hand<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">14</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"invalid\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">14</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        cp <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strchr.html\"><span class=\"kw3\">strchr</span></a><span class=\"br0\">(</span>FACES<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/tolower.html\"><span class=\"kw3\">tolower</span></a><span class=\"br0\">(</span>hand<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cp <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"invalid\"</span><span class=\"sy0\">;</span><br/>        j <span class=\"sy0\">=</span> i <span class=\"sy0\">/</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>        cards<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">face</span> <span class=\"sy0\">=</span> cp <span class=\"sy0\">-</span> FACES<span class=\"sy0\">;</span><br/>        suit <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/tolower.html\"><span class=\"kw3\">tolower</span></a><span class=\"br0\">(</span>hand<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        cp <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strchr.html\"><span class=\"kw3\">strchr</span></a><span class=\"br0\">(</span>SUITS<span class=\"sy0\">,</span> suit<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cp <span class=\"sy0\">==</span> NULL<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"invalid\"</span><span class=\"sy0\">;</span><br/>        cards<span class=\"br0\">[</span>j<span class=\"br0\">]</span>.<span class=\"me1\">suit</span> <span class=\"sy0\">=</span> suit<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>are_distinct<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"invalid\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">13</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> groups<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> groups<span class=\"br0\">[</span>cards<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">face</span><span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">13</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>groups<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> gs<span class=\"sy0\">++;</span><br/>    <span class=\"kw1\">switch</span><span class=\"br0\">(</span>gs<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span><br/>            found <span class=\"sy0\">=</span> FALSE<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">13</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>groups<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                found <span class=\"sy0\">=</span> TRUE<span class=\"sy0\">;</span><br/>                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>found<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"four-of-a-kind\"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"full-house\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span><br/>            found <span class=\"sy0\">=</span> FALSE<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">13</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>groups<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                found <span class=\"sy0\">=</span> TRUE<span class=\"sy0\">;</span><br/>                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>found<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"three-of-a-kind\"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"two-pairs\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> <span class=\"nu0\">4</span><span class=\"sy0\">:</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"one-pair\"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>            flush <span class=\"sy0\">=</span> is_flush<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            straight <span class=\"sy0\">=</span> is_straight<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>flush <span class=\"sy0\">&amp;&amp;</span> straight<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"st0\">\"straight-flush\"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>flush<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"st0\">\"flush\"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>straight<span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"st0\">\"straight\"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                <span class=\"kw1\">return</span> <span class=\"st0\">\"high-card\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>type<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>hands<span class=\"br0\">[</span><span class=\"nu0\">10</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>        <span class=\"st0\">\"2h 2d 2c kc qd\"</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"2h 5h 7d 8c 9s\"</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"ah 2d 3c 4c 5d\"</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"2h 3h 2d 3c 3d\"</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"2h 7h 2d 3c 3d\"</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"2h 7h 7d 7c 7s\"</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"th jh qh kh ah\"</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"4h 4s ks 5d ts\"</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"qc tc 7c 6c 4c\"</span><span class=\"sy0\">,</span><br/>        <span class=\"st0\">\"ah ah 7c 6c 4c\"</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        type <span class=\"sy0\">=</span> analyze_hand<span class=\"br0\">(</span>hands<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s:\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> hands<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> type<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 76, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw2\">using</span> <span class=\"kw2\">namespace</span> std<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">class</span> poker<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>    poker<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> face <span class=\"sy1\">=</span> <span class=\"st0\">\"A23456789TJQK\"</span><span class=\"sy4\">;</span> suit <span class=\"sy1\">=</span> <span class=\"st0\">\"SHCD\"</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    string analyze<span class=\"br0\">(</span> string h <span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">memset</span><span class=\"br0\">(</span> faceCnt, <span class=\"nu0\">0</span>, <span class=\"nu0\">13</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw3\">memset</span><span class=\"br0\">(</span> suitCnt, <span class=\"nu0\">0</span>, <span class=\"nu0\">4</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span> hand<span class=\"sy4\">;</span><br/>\ttransform<span class=\"br0\">(</span> h.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, h.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, h.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, <span class=\"kw3\">toupper</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> istringstream i<span class=\"br0\">(</span> h <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tcopy<span class=\"br0\">(</span> istream_iterator<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> i <span class=\"br0\">)</span>, istream_iterator<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, back_inserter<span class=\"sy1\">&lt;</span>vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span> <span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> hand <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> hand.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"invalid hand.\"</span><span class=\"sy4\">;</span> vector<span class=\"sy1\">&lt;</span>string<span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">iterator</span> it <span class=\"sy1\">=</span> hand.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tsort<span class=\"br0\">(</span> it, hand.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> hand.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> adjacent_find<span class=\"br0\">(</span> it, hand.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"invalid hand.\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> hand.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>it <span class=\"br0\">)</span>.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"invalid hand.\"</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw4\">int</span> n <span class=\"sy1\">=</span> face.<span class=\"me1\">find</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>it <span class=\"br0\">)</span>.<span class=\"me1\">at</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span>, l <span class=\"sy1\">=</span> suit.<span class=\"me1\">find</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>it <span class=\"br0\">)</span>.<span class=\"me1\">at</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">if</span><span class=\"br0\">(</span> n <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> l <span class=\"sy1\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"invalid hand.\"</span><span class=\"sy4\">;</span><br/>\t    faceCnt<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy2\">++</span><span class=\"sy4\">;</span> suitCnt<span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"sy2\">++</span><span class=\"sy4\">;</span> it<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> h <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\": \"</span><span class=\"sy4\">;</span> <span class=\"kw1\">return</span> analyzeHand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>    string analyzeHand<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw4\">bool</span> p1 <span class=\"sy1\">=</span> <span class=\"kw2\">false</span>, p2 <span class=\"sy1\">=</span> <span class=\"kw2\">false</span>, t <span class=\"sy1\">=</span> <span class=\"kw2\">false</span>, f <span class=\"sy1\">=</span> <span class=\"kw2\">false</span>, fl <span class=\"sy1\">=</span> <span class=\"kw2\">false</span>, st <span class=\"sy1\">=</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">13</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"kw1\">switch</span><span class=\"br0\">(</span> faceCnt<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy4\">:</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> p1 <span class=\"br0\">)</span> p2 <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span> <span class=\"kw1\">else</span> p1 <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy4\">:</span> t <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"nu0\">4</span><span class=\"sy4\">:</span> f <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">4</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><span class=\"kw1\">if</span><span class=\"br0\">(</span> suitCnt<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"sy1\">==</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span><span class=\"br0\">{</span> fl <span class=\"sy1\">=</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"sy3\">!</span>p1 <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>p2 <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>t <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>f <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>\t    <span class=\"kw4\">int</span> s <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t    <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"kw4\">int</span> x <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> x <span class=\"sy1\">&lt;</span> <span class=\"nu0\">13</span><span class=\"sy4\">;</span> x<span class=\"sy2\">++</span> <span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span> <br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> faceCnt<span class=\"br0\">[</span>x<span class=\"br0\">]</span> <span class=\"br0\">)</span> s<span class=\"sy2\">++</span><span class=\"sy4\">;</span> <span class=\"kw1\">else</span> s <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> s <span class=\"sy1\">==</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t    st <span class=\"sy1\">=</span> <span class=\"br0\">(</span> s <span class=\"sy1\">==</span> <span class=\"nu0\">5</span> <span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"br0\">(</span> s <span class=\"sy1\">==</span> <span class=\"nu0\">4</span> <span class=\"sy3\">&amp;&amp;</span> faceCnt<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy3\">&amp;&amp;</span> <span class=\"sy3\">!</span>faceCnt<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span> st <span class=\"sy3\">&amp;&amp;</span> fl <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"straight-flush\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> f <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"four-of-a-kind\"</span><span class=\"sy4\">;</span> <br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> p1 <span class=\"sy3\">&amp;&amp;</span> t <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"full-house\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> fl <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"flush\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> st <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"straight\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> t <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"three-of-a-kind\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> p1 <span class=\"sy3\">&amp;&amp;</span> p2 <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"two-pair\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span> p1 <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"one-pair\"</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"high-card\"</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>    string face, suit<span class=\"sy4\">;</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">char</span> faceCnt<span class=\"br0\">[</span><span class=\"nu0\">13</span><span class=\"br0\">]</span>, suitCnt<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"kw4\">int</span> argc, <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    poker p<span class=\"sy4\">;</span> <br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> p.<span class=\"me1\">analyze</span><span class=\"br0\">(</span> <span class=\"st0\">\"2h 2d 2s ks qd\"</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> p.<span class=\"me1\">analyze</span><span class=\"br0\">(</span> <span class=\"st0\">\"2h 5h 7d 8s 9d\"</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> p.<span class=\"me1\">analyze</span><span class=\"br0\">(</span> <span class=\"st0\">\"ah 2d 3s 4s 5s\"</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> p.<span class=\"me1\">analyze</span><span class=\"br0\">(</span> <span class=\"st0\">\"2h 3h 2d 3s 3d\"</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> p.<span class=\"me1\">analyze</span><span class=\"br0\">(</span> <span class=\"st0\">\"2h 7h 2d 3s 3d\"</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> p.<span class=\"me1\">analyze</span><span class=\"br0\">(</span> <span class=\"st0\">\"2h 7h 7d 7s 7c\"</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> p.<span class=\"me1\">analyze</span><span class=\"br0\">(</span> <span class=\"st0\">\"th jh qh kh ah\"</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> p.<span class=\"me1\">analyze</span><span class=\"br0\">(</span> <span class=\"st0\">\"4h 4c kc 5d tc\"</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span><br/>    <span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> p.<span class=\"me1\">analyze</span><span class=\"br0\">(</span> <span class=\"st0\">\"qc tc 7c 6c 4c\"</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> endl <span class=\"sy1\">&lt;&lt;</span> endl<span class=\"sy4\">;</span> <span class=\"kw1\">return</span> <span class=\"kw3\">system</span><span class=\"br0\">(</span> <span class=\"st0\">\"pause\"</span> <span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Clojure", "loc": 81, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> rank <span class=\"br0\">[</span>card<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>fst _<span class=\"br0\">]</span> card<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>Character<span class=\"sy0\">/</span>isDigit fst<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>Integer<span class=\"sy0\">/</span>valueOf <span class=\"br0\">(</span><span class=\"kw1\">str</span> fst<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">{</span>\\T <span class=\"nu0\">10</span>, \\J <span class=\"nu0\">11</span>, \\Q <span class=\"nu0\">12</span>, \\K <span class=\"nu0\">13</span>, \\A <span class=\"nu0\">14</span><span class=\"br0\">}</span> fst<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> suit <span class=\"br0\">[</span>card<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>_ snd<span class=\"br0\">]</span> card<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">str</span> snd<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> n<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>a<span class=\"sy0\">-</span>kind <span class=\"br0\">[</span>hand n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span><span class=\"sy0\">=</span> true <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> <span class=\"sy0\">%</span> n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">vals</span> <span class=\"br0\">(</span>frequencies <span class=\"br0\">(</span><span class=\"kw1\">map</span> rank hand<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> ranks<span class=\"sy0\">-</span>with<span class=\"sy0\">-</span>ace <span class=\"br0\">[</span>hand<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>ranks <span class=\"br0\">(</span><span class=\"kw1\">sort</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> rank hand<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>some #<span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">14</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> ranks<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">1</span> ranks<span class=\"br0\">)</span> ranks<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> pair? <span class=\"br0\">[</span>hand<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>n<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>a<span class=\"sy0\">-</span>kind hand <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> three<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>a<span class=\"sy0\">-</span>kind? <span class=\"br0\">[</span>hand<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>n<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>a<span class=\"sy0\">-</span>kind hand <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> four<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>a<span class=\"sy0\">-</span>kind? <span class=\"br0\">[</span>hand<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>n<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>a<span class=\"sy0\">-</span>kind hand <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> flush? <span class=\"br0\">[</span>hand<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span><span class=\"sy0\">=</span> true <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> <span class=\"sy0\">%</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">vals</span> <span class=\"br0\">(</span>frequencies <span class=\"br0\">(</span><span class=\"kw1\">map</span> suit hand<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> full<span class=\"sy0\">-</span>house? <span class=\"br0\">[</span>hand<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>true? <span class=\"br0\">(</span><span class=\"kw1\">and</span><br/>    <span class=\"br0\">(</span>some #<span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">vals</span> <span class=\"br0\">(</span>frequencies <span class=\"br0\">(</span><span class=\"kw1\">map</span> rank hand<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>some #<span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">vals</span> <span class=\"br0\">(</span>frequencies <span class=\"br0\">(</span><span class=\"kw1\">map</span> rank hand<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> two<span class=\"sy0\">-</span>pairs? <span class=\"br0\">[</span>hand<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">or</span><br/>    <span class=\"br0\">(</span>full<span class=\"sy0\">-</span>house? hand<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>four<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>a<span class=\"sy0\">-</span>kind? hand<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span><span class=\"sy0\">=</span> true <span class=\"sy0\">%</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">vals</span> <span class=\"br0\">(</span>frequencies <span class=\"br0\">(</span><span class=\"kw1\">map</span> rank hand<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> straight? <span class=\"br0\">[</span>hand<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>hand<span class=\"sy0\">-</span>a <span class=\"br0\">(</span>ranks<span class=\"sy0\">-</span>with<span class=\"sy0\">-</span>ace hand<span class=\"br0\">)</span><br/>        fst <span class=\"br0\">(</span><span class=\"kw1\">first</span> hand<span class=\"sy0\">-</span>a<span class=\"br0\">)</span><br/>        snd <span class=\"br0\">(</span>second hand<span class=\"sy0\">-</span>a<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">or</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">take</span> <span class=\"nu0\">5</span> hand<span class=\"sy0\">-</span>a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> fst <span class=\"br0\">(</span><span class=\"sy0\">+</span> fst <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">drop</span> <span class=\"nu0\">1</span> hand<span class=\"sy0\">-</span>a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> snd <span class=\"br0\">(</span><span class=\"sy0\">+</span> snd <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> straight<span class=\"sy0\">-</span>flush? <span class=\"br0\">[</span>hand<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">and</span><br/>    <span class=\"br0\">(</span>straight? hand<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>flush? hand<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> invalid? <span class=\"br0\">[</span>hand<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">not</span><span class=\"sy0\">=</span> <span class=\"nu0\">5</span> <span class=\"br0\">(</span><span class=\"kw1\">count</span> <span class=\"br0\">(</span><span class=\"kw1\">set</span> hand<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> check<span class=\"sy0\">-</span>hand <span class=\"br0\">[</span>hand<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>    <span class=\"br0\">(</span>invalid? hand<span class=\"br0\">)</span> <span class=\"st0\">\"invalid\"</span><br/>    <span class=\"br0\">(</span>straight<span class=\"sy0\">-</span>flush? hand<span class=\"br0\">)</span> <span class=\"st0\">\"straight-flush\"</span><br/>    <span class=\"br0\">(</span>four<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>a<span class=\"sy0\">-</span>kind? hand<span class=\"br0\">)</span> <span class=\"st0\">\"four-of-a-kind\"</span><br/>    <span class=\"br0\">(</span>full<span class=\"sy0\">-</span>house? hand<span class=\"br0\">)</span> <span class=\"st0\">\"full-house\"</span><br/>    <span class=\"br0\">(</span>flush? hand<span class=\"br0\">)</span> <span class=\"st0\">\"flush\"</span><br/>    <span class=\"br0\">(</span>straight? hand<span class=\"br0\">)</span> <span class=\"st0\">\"straight\"</span><br/>    <span class=\"br0\">(</span>three<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>a<span class=\"sy0\">-</span>kind? hand<span class=\"br0\">)</span> <span class=\"st0\">\"three-of-a-kind\"</span><br/>    <span class=\"br0\">(</span>two<span class=\"sy0\">-</span>pairs? hand<span class=\"br0\">)</span> <span class=\"st0\">\"two-pair\"</span><br/>    <span class=\"br0\">(</span>pair? hand<span class=\"br0\">)</span> <span class=\"st0\">\"one-pair\"</span><br/>   \u00a0:<span class=\"me1\">else</span> <span class=\"st0\">\"high-card\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Test examples</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> hands <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"st0\">\"2H\"</span> <span class=\"st0\">\"2D\"</span> <span class=\"st0\">\"2S\"</span> <span class=\"st0\">\"KS\"</span> <span class=\"st0\">\"QD\"</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">[</span><span class=\"st0\">\"2H\"</span> <span class=\"st0\">\"5H\"</span> <span class=\"st0\">\"7D\"</span> <span class=\"st0\">\"8S\"</span> <span class=\"st0\">\"9D\"</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">[</span><span class=\"st0\">\"AH\"</span> <span class=\"st0\">\"2D\"</span> <span class=\"st0\">\"3S\"</span> <span class=\"st0\">\"4S\"</span> <span class=\"st0\">\"5S\"</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">[</span><span class=\"st0\">\"2H\"</span> <span class=\"st0\">\"3H\"</span> <span class=\"st0\">\"2D\"</span> <span class=\"st0\">\"3S\"</span> <span class=\"st0\">\"3D\"</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">[</span><span class=\"st0\">\"2H\"</span> <span class=\"st0\">\"7H\"</span> <span class=\"st0\">\"2D\"</span> <span class=\"st0\">\"3S\"</span> <span class=\"st0\">\"3D\"</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">[</span><span class=\"st0\">\"2H\"</span> <span class=\"st0\">\"7H\"</span> <span class=\"st0\">\"7D\"</span> <span class=\"st0\">\"7S\"</span> <span class=\"st0\">\"7C\"</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">[</span><span class=\"st0\">\"TH\"</span> <span class=\"st0\">\"JH\"</span> <span class=\"st0\">\"QH\"</span> <span class=\"st0\">\"KH\"</span> <span class=\"st0\">\"AH\"</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">[</span><span class=\"st0\">\"4H\"</span> <span class=\"st0\">\"4C\"</span> <span class=\"st0\">\"KC\"</span> <span class=\"st0\">\"5D\"</span> <span class=\"st0\">\"TC\"</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">[</span><span class=\"st0\">\"QC\"</span> <span class=\"st0\">\"TC\"</span> <span class=\"st0\">\"7C\"</span> <span class=\"st0\">\"6C\"</span> <span class=\"st0\">\"4C\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>run<span class=\"sy0\">!</span> println <span class=\"br0\">(</span><span class=\"kw1\">map</span> #<span class=\"br0\">(</span><span class=\"kw1\">str</span> <span class=\"sy0\">%</span> <span class=\"st0\">\"\u00a0: \"</span> <span class=\"br0\">(</span>check<span class=\"sy0\">-</span>hand <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span> hands<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 86, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">string</span> analyzeHand<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">string</span> inHand<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"coMULTI\">/*nothrow @safe*/</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> handLen <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">immutable</span> face <span class=\"sy0\">=</span> <span class=\"st0\">\"A23456789TJQK\"</span><span class=\"sy0\">,</span> suit <span class=\"sy0\">=</span> <span class=\"st0\">\"SHCD\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">immutable</span> errorMessage <span class=\"sy0\">=</span> <span class=\"st0\">\"invalid hand.\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/*immutable*/</span> <span class=\"kw4\">const</span> hand <span class=\"sy0\">=</span> inHand.<span class=\"me1\">toUpper</span>.<span class=\"me1\">split</span>.<span class=\"me1\">sort</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">release</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>hand.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> handLen<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> errorMessage<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>hand.<span class=\"me1\">uniq</span>.<span class=\"me1\">walkLength</span> <span class=\"sy0\">!=</span> handLen<span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> errorMessage <span class=\"sy0\">~</span> <span class=\"st0\">\" Duplicated cards.\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">ubyte</span><span class=\"br0\">[</span>face.<span class=\"me1\">length</span><span class=\"br0\">]</span> faceCount<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">ubyte</span><span class=\"br0\">[</span>suit.<span class=\"me1\">length</span><span class=\"br0\">]</span> suitCount<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> card<span class=\"sy0\">;</span> hand<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>card.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> errorMessage<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> n <span class=\"sy0\">=</span> face.<span class=\"me1\">countUntil</span><span class=\"br0\">(</span>card<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> l <span class=\"sy0\">=</span> suit.<span class=\"me1\">countUntil</span><span class=\"br0\">(</span>card<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> l <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> errorMessage<span class=\"sy0\">;</span><br/>        faceCount<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>        suitCount<span class=\"br0\">[</span>l<span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> analyzeHandHelper<span class=\"br0\">(</span>faceCount<span class=\"sy0\">,</span> suitCount<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">private</span> <span class=\"kw4\">string</span> analyzeHandHelper<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw2\">ref</span> <span class=\"kw4\">ubyte</span><span class=\"br0\">[</span><span class=\"nu0\">13</span><span class=\"br0\">]</span> faceCount<span class=\"sy0\">,</span><br/>                                 <span class=\"kw4\">const</span> <span class=\"kw2\">ref</span> <span class=\"kw4\">ubyte</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span> suitCount<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw4\">bool</span> p1<span class=\"sy0\">,</span> p2<span class=\"sy0\">,</span> t<span class=\"sy0\">,</span> f<span class=\"sy0\">,</span> fl<span class=\"sy0\">,</span> st<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> fc<span class=\"sy0\">;</span> faceCount<span class=\"br0\">)</span><br/>        <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>fc<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span> <span class=\"br0\">(</span>p1 <span class=\"sy0\">?</span> p2 <span class=\"sy0\">:</span> p1<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy0\">:</span> t <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"nu0\">4</span><span class=\"sy0\">:</span> f <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">default</span><span class=\"sy0\">:</span> <span class=\"co1\">// Ignore.</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> sc<span class=\"sy0\">;</span> suitCount<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>sc <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            fl <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>p1 <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>p2 <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>t <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">uint</span> s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> fc<span class=\"sy0\">;</span> faceCount<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fc<span class=\"br0\">)</span><br/>                s<span class=\"sy0\">++;</span><br/>            <span class=\"kw1\">else</span><br/>                s <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        st <span class=\"sy0\">=</span> <span class=\"br0\">(</span>s <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>s <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"sy0\">&amp;&amp;</span> faceCount<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>faceCount<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>st <span class=\"sy0\">&amp;&amp;</span> fl<span class=\"br0\">)</span>      <span class=\"kw1\">return</span> <span class=\"st0\">\"straight-flush\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>f<span class=\"br0\">)</span>        <span class=\"kw1\">return</span> <span class=\"st0\">\"four-of-a-kind\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p1 <span class=\"sy0\">&amp;&amp;</span> t<span class=\"br0\">)</span>  <span class=\"kw1\">return</span> <span class=\"st0\">\"full-house\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fl<span class=\"br0\">)</span>       <span class=\"kw1\">return</span> <span class=\"st0\">\"flush\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>st<span class=\"br0\">)</span>       <span class=\"kw1\">return</span> <span class=\"st0\">\"straight\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>t<span class=\"br0\">)</span>        <span class=\"kw1\">return</span> <span class=\"st0\">\"three-of-a-kind\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p1 <span class=\"sy0\">&amp;&amp;</span> p2<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"two-pair\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p1<span class=\"br0\">)</span>       <span class=\"kw1\">return</span> <span class=\"st0\">\"one-pair\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span>               <span class=\"kw1\">return</span> <span class=\"st0\">\"high-card\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// S = Spades, H = Hearts, C = Clubs, D = Diamonds.</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> hand<span class=\"sy0\">;</span> <span class=\"br0\">[</span><span class=\"st0\">\"2H 2D 2S KS QD\"</span><span class=\"sy0\">,</span><br/>                              <span class=\"st0\">\"2H 5H 7D 8S 9D\"</span><span class=\"sy0\">,</span><br/>                              <span class=\"st0\">\"AH 2D 3S 4S 5S\"</span><span class=\"sy0\">,</span><br/>                              <span class=\"st0\">\"2H 3H 2D 3S 3D\"</span><span class=\"sy0\">,</span><br/>                              <span class=\"st0\">\"2H 7H 2D 3S 3D\"</span><span class=\"sy0\">,</span><br/>                              <span class=\"st0\">\"2H 7H 7D 7S 7C\"</span><span class=\"sy0\">,</span><br/>                              <span class=\"st0\">\"TH JH QH KH AH\"</span><span class=\"sy0\">,</span><br/>                              <span class=\"st0\">\"4H 4C KC 5D TC\"</span><span class=\"sy0\">,</span><br/>                              <span class=\"st0\">\"QC TC 7C 6C 4C\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        writeln<span class=\"br0\">(</span>hand<span class=\"sy0\">,</span> <span class=\"st0\">\": \"</span><span class=\"sy0\">,</span> hand.<span class=\"me1\">analyzeHand</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 127, "block": "<pre class=\"text highlighted_source\">defmodule Card do<br/>  @faces   ~w(2 3 4 5 6 7 8 9 10 j q k a)<br/>  @suits   ~w(\u2665 \u2666 \u2663 \u2660)                          # ~w(h d c s)<br/>  @ordinal @faces |&gt; Enum.with_index |&gt; Map.new<br/>\u00a0<br/>  defstruct ~w[face suit ordinal]a<br/>\u00a0<br/>  def new(str) do<br/>    {face, suit} = String.split_at(str, -1)<br/>    if face in @faces and suit in @suits do<br/>      ordinal = @ordinal[face]<br/>     \u00a0%__MODULE__{face: face, suit: suit, ordinal: ordinal}<br/>    else<br/>      raise ArgumentError, \"invalid card: #{str}\"<br/>    end<br/>  end<br/>\u00a0<br/>  def deck do<br/>    for face &lt;- @faces, suit &lt;- @suits, do: \"#{face}#{suit}\"<br/>  end<br/>end<br/>\u00a0<br/>defmodule Hand do<br/>  @ranks ~w(high-card one-pair two-pair three-of-a-kind straight flush<br/>            full-house four-of-a-kind straight-flush five-of-a-kind)a |&gt;<br/>         Enum.with_index |&gt; Map.new<br/>  @wheel_faces ~w(2 3 4 5 a)<br/>\u00a0<br/>  def new(str_of_cards) do<br/>    cards = String.downcase(str_of_cards) |&gt;<br/>            String.split([\" \", \",\"], trim: true) |&gt;<br/>            Enum.map(&amp;Card.new &amp;1)<br/>    grouped = Enum.group_by(cards, &amp;(&amp;1.ordinal)) |&gt; Map.values<br/>    face_pattern = Enum.map(grouped, &amp;(length &amp;1)) |&gt; Enum.sort<br/>    {consecutive, wheel_faces} = consecutive?(cards)<br/>    rank = categorize(cards, face_pattern, consecutive)<br/>    rank_num = @ranks[rank]<br/>    tiebreaker = if wheel_faces do<br/>                   for ord &lt;- 3..-1, do: {1,ord}<br/>                 else<br/>                   Enum.map(grouped, &amp;{length(&amp;1), hd(&amp;1).ordinal}) |&gt;<br/>                   Enum.sort |&gt; Enum.reverse<br/>                 end<br/>    {rank_num, tiebreaker, str_of_cards, rank}<br/>  end<br/>\u00a0<br/>  defp one_suit?(cards) do<br/>    Enum.map(cards, &amp;(&amp;1.suit)) |&gt; Enum.uniq |&gt; length == 1<br/>  end<br/>\u00a0<br/>  defp consecutive?(cards) do<br/>    sorted = Enum.sort_by(cards, &amp;(&amp;1.ordinal))<br/>    if Enum.map(sorted, &amp;(&amp;1.face)) == @wheel_faces do<br/>      {true, true}<br/>    else<br/>      flag = Enum.map(sorted, &amp;(&amp;1.ordinal)) |&gt;<br/>             Enum.chunk(2,1) |&gt;<br/>             Enum.all?(fn [a,b] -&gt; a+1 == b end)<br/>      {flag, false}<br/>    end<br/>  end<br/>\u00a0<br/>  defp categorize(cards, face_pattern, consecutive) do<br/>    case {consecutive, one_suit?(cards)} do<br/>      {true, true}  -&gt;\u00a0:\"straight-flush\"<br/>      {true, false} -&gt;\u00a0:straight<br/>      {false, true} -&gt;\u00a0:flush<br/>      _ -&gt;  case face_pattern do<br/>              [1,1,1,1,1] -&gt;\u00a0:\"high-card\"<br/>              [1,1,1,2]   -&gt;\u00a0:\"one-pair\"<br/>              [1,2,2]     -&gt;\u00a0:\"two-pair\"<br/>              [1,1,3]     -&gt;\u00a0:\"three-of-a-kind\"<br/>              [2,3]       -&gt;\u00a0:\"full-house\"<br/>              [1,4]       -&gt;\u00a0:\"four-of-a-kind\"<br/>              [5]         -&gt;\u00a0:\"five-of-a-kind\"<br/>            end<br/>    end<br/>  end<br/>end<br/>\u00a0<br/>test_hands = \"\"\"<br/>2\u2665 2\u2666 2\u2663 k\u2663 q\u2666<br/>2\u2665 5\u2665 7\u2666 8\u2663 9\u2660<br/>a\u2665 2\u2666 3\u2663 4\u2663 5\u2666<br/>2\u2665 3\u2665 2\u2666 3\u2663 3\u2666<br/>2\u2665 7\u2665 2\u2666 3\u2663 3\u2666<br/>2\u2665 6\u2665 2\u2666 3\u2663 3\u2666<br/>10\u2665 j\u2665 q\u2665 k\u2665 a\u2665<br/>4\u2665 4\u2660 k\u2660 2\u2666 10\u2660<br/>4\u2665 4\u2660 k\u2660 3\u2666 10\u2660<br/>q\u2663 10\u2663 7\u2663 6\u2663 4\u2663<br/>q\u2663 10\u2663 7\u2663 6\u2663 3\u2663<br/>9\u2665 10\u2665 q\u2665 k\u2665 j\u2663<br/>2\u2665 3\u2665 4\u2665 5\u2665 a\u2665<br/>2\u2665 2\u2665 2\u2666 3\u2663 3\u2666<br/>\"\"\"<br/>hands = String.split(test_hands, \"\\n\", trim: true) |&gt; Enum.map(&amp;Hand.new(&amp;1))<br/>IO.puts \"High to low\"<br/>Enum.sort(hands) |&gt; Enum.reverse |&gt;<br/>Enum.each(fn hand -&gt; IO.puts \"#{elem(hand,2)}: \\t#{elem(hand,3)}\" end)<br/>\u00a0<br/># Extra Credit 2. Examples:<br/>IO.puts \"\\nExtra Credit 2\"<br/>extra_hands = \"\"\"<br/>joker  2\u2666  2\u2660  k\u2660  q\u2666<br/>joker  5\u2665  7\u2666  8\u2660  9\u2666<br/>joker  2\u2666  3\u2660  4\u2660  5\u2660<br/>joker  3\u2665  2\u2666  3\u2660  3\u2666<br/>joker  7\u2665  2\u2666  3\u2660  3\u2666<br/>joker  7\u2665  7\u2666  7\u2660  7\u2663<br/>joker  j\u2665  q\u2665  k\u2665  A\u2665<br/>joker  4\u2663  k\u2663  5\u2666 10\u2660<br/>joker  k\u2663  7\u2663  6\u2663  4\u2663<br/>joker  2\u2666  joker  4\u2660  5\u2660<br/>joker  Q\u2666  joker  A\u2660 10\u2660<br/>joker  Q\u2666  joker  A\u2666 10\u2666<br/>joker  2\u2666  2\u2660  joker  q\u2666<br/>\"\"\"<br/>deck = Card.deck<br/>String.split(extra_hands, \"\\n\", trim: true) |&gt;<br/>Enum.each(fn hand -&gt;<br/>  [a,b,c,d,e] = String.split(hand) |&gt;<br/>                Enum.map(fn c -&gt; if c==\"joker\", do: deck, else: [c] end)<br/>  cards_list = for v&lt;-a, w&lt;-b, x&lt;-c, y&lt;-d, z&lt;-e, do: \"#{v} #{w} #{x} #{y} #{z}\"<br/>  best = Enum.map(cards_list, &amp;Hand.new &amp;1) |&gt; Enum.max<br/>  IO.puts \"#{hand}:\\t#{elem(best,3)}\"<br/>end)</pre>"}, {"lang": "F#", "loc": 101, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"kw1\">type</span> Card <span class=\"sy0\">=</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span> <span class=\"kw4\">int</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Cards <span class=\"sy0\">=</span> Card list<br/>\u00a0<br/><span class=\"kw1\">let</span> joker <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">69</span>,<span class=\"nu0\">69</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> rankInvalid <span class=\"sy0\">=</span> <span class=\"st0\">\"invalid\"</span>, <span class=\"nu0\">99</span><br/>\u00a0<br/><span class=\"kw1\">let</span> allCards <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span>..<span class=\"nu0\">12</span><span class=\"br0\">}</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">collect</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x<span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"nu0\">0</span>..<span class=\"nu0\">3</span><span class=\"br0\">}</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> y<span class=\"sy0\">-&gt;</span>x,y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> allSame <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> | y::ys <span class=\"sy0\">-&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">forall</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span><span class=\"br0\">)</span> y<span class=\"br0\">)</span> ys | _<span class=\"sy0\">-&gt;</span> <span class=\"kw1\">false</span><br/>\u00a0<br/><span class=\"kw1\">let</span> straightList <span class=\"br0\">(</span>xs:<span class=\"kw4\">int</span> list<span class=\"br0\">)</span> <span class=\"sy0\">=</span> xs <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">sort</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">mapi</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i n<span class=\"sy0\">-&gt;</span>n <span class=\"sy0\">-</span> i<span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> allSame<br/>\u00a0<br/><span class=\"kw1\">let</span> cardList <span class=\"br0\">(</span>s:<span class=\"kw4\">string</span><span class=\"br0\">)</span>: Cards <span class=\"sy0\">=</span><br/>  s.<span class=\"me1\">Split</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> s<span class=\"sy0\">-&gt;</span>s.<span class=\"me1\">ToLower</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> s <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">if</span> s<span class=\"sy0\">=</span><span class=\"st0\">\"joker\"</span> <span class=\"kw1\">then</span> joker<br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">match</span> <span class=\"br0\">(</span>s <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">ofSeq</span><span class=\"br0\">)</span> <span class=\"kw1\">with</span><br/>      | <span class=\"st0\">'1'</span>::<span class=\"st0\">'0'</span>::xs <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span>, xs<span class=\"br0\">)</span> | <span class=\"st0\">'!'</span>::xs <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, xs<span class=\"br0\">)</span> | x::xs<span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"st0\">\"a23456789!jqk\"</span>.<span class=\"me1\">IndexOf</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>, xs<span class=\"br0\">)</span> | _  <span class=\"kw1\">as</span> xs<span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, xs<span class=\"br0\">)</span><br/>      <span class=\"sy0\">|&gt;</span> <span class=\"kw1\">function</span> | <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, _  <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"st0\">'!'</span><span class=\"br0\">)</span> | x, y::<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>x, y<span class=\"br0\">)</span> | _  <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"st0\">'!'</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">|&gt;</span> <span class=\"kw1\">function</span> <br/>      | x, <span class=\"st0\">'h'</span> | x, <span class=\"st0\">'\u2665'</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>x, <span class=\"nu0\">0</span><span class=\"br0\">)</span> | x, <span class=\"st0\">'d'</span> | x, <span class=\"st0\">'\u2666'</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>x, <span class=\"nu0\">1</span><span class=\"br0\">)</span> | x, <span class=\"st0\">'c'</span> | x, <span class=\"st0\">'\u2663'</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>x, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      | x, <span class=\"st0\">'s'</span> | x, <span class=\"st0\">'\u2660'</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>x, <span class=\"nu0\">3</span><span class=\"br0\">)</span> | _ <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">filter</span> <span class=\"br0\">(</span><span class=\"kw3\">fst</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">ofSeq</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> rank <span class=\"br0\">(</span>cards: Cards<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> cards.<span class=\"me1\">Length</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">5</span> <span class=\"kw1\">then</span> rankInvalid<br/>  <span class=\"kw1\">else</span> <br/>    <span class=\"kw1\">let</span> cts <span class=\"sy0\">=</span> cards <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">groupBy</span> <span class=\"kw3\">fst</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw3\">snd</span> <span class=\"sy0\">&gt;&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">ofSeq</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">sort</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">rev</span><br/>    <span class=\"kw1\">if</span> cts.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">5</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span><span class=\"st0\">\"five-of-a-kind\"</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">let</span> flush <span class=\"sy0\">=</span> cards <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"kw3\">snd</span> <span class=\"sy0\">|&gt;</span> allSame<br/>      <span class=\"kw1\">let</span> straight <span class=\"sy0\">=</span> <br/>        <span class=\"kw1\">let</span> <span class=\"br0\">(</span>ACE, ALT_ACE<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"nu0\">13</span><br/>        <span class=\"kw1\">let</span> faces <span class=\"sy0\">=</span> cards <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">map</span> <span class=\"kw3\">fst</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">sort</span><br/>        <span class=\"br0\">(</span>straightList faces<span class=\"br0\">)</span> || <span class=\"br0\">(</span><span class=\"kw1\">if</span> faces.<span class=\"me1\">Head</span><span class=\"sy0\">&lt;&gt;</span>ACE <span class=\"kw1\">then</span> <span class=\"kw1\">false</span> <span class=\"kw1\">else</span> <span class=\"br0\">(</span>straightList <span class=\"br0\">(</span>ALT_ACE::<span class=\"br0\">(</span>faces.<span class=\"me1\">Tail</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> straight &amp;&amp; flush <span class=\"kw1\">then</span> <span class=\"br0\">(</span><span class=\"st0\">\"straight-flush\"</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">let</span> cts <span class=\"sy0\">=</span> cards <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">groupBy</span> <span class=\"kw3\">fst</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw3\">snd</span> <span class=\"sy0\">&gt;&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">ofSeq</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">sort</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">rev</span><br/>        <span class=\"kw1\">if</span> cts.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">4</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span><span class=\"st0\">\"four-of-a-kind\"</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">elif</span> cts.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">3</span> &amp;&amp; cts.<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span><span class=\"st0\">\"full-house\"</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">elif</span> flush <span class=\"kw1\">then</span> <span class=\"br0\">(</span><span class=\"st0\">\"flush\"</span>, <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">elif</span> straight <span class=\"kw1\">then</span> <span class=\"br0\">(</span><span class=\"st0\">\"straight\"</span>, <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">elif</span> cts.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">3</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span><span class=\"st0\">\"three-of-a-kind\"</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">elif</span> cts.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">2</span> &amp;&amp; cts.<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span><span class=\"st0\">\"two-pair\"</span>, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">elif</span> cts.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"br0\">(</span><span class=\"st0\">\"one-pair\"</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">else</span> <span class=\"br0\">(</span><span class=\"st0\">\"high-card\"</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> pickBest <span class=\"br0\">(</span>xs: <span class=\"kw4\">seq</span><span class=\"sy0\">&lt;</span>Cards<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> cmp a b <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw3\">snd</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw3\">snd</span> b<span class=\"br0\">)</span><br/>  <span class=\"kw1\">let</span> pick currentBest x <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>cmp <span class=\"br0\">(</span><span class=\"kw3\">snd</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw3\">snd</span> currentBest<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> x <span class=\"kw1\">else</span> currentBest<br/>  xs <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x<span class=\"sy0\">-&gt;</span>x, <span class=\"br0\">(</span>rank x<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">fold</span> pick <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, rankInvalid<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> calcHandRank handStr <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> cards <span class=\"sy0\">=</span> handStr <span class=\"sy0\">|&gt;</span> cardList<br/>  <span class=\"kw1\">if</span> cards.<span class=\"me1\">Length</span><span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">5</span> <br/>    <span class=\"kw1\">then</span> <span class=\"br0\">(</span>cards, rankInvalid<span class=\"br0\">)</span> <br/>    <span class=\"kw1\">else</span><br/>      cards <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">partition</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span><span class=\"br0\">)</span> joker<span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <span class=\"kw1\">fun</span> <span class=\"br0\">(</span>x,y<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> x.<span class=\"me1\">Length</span>, y<br/>      <span class=\"sy0\">|&gt;</span> <span class=\"kw1\">function</span><br/>      | <span class=\"br0\">(</span><span class=\"nu0\">0</span>,xs<span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"br0\">(</span>xs <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">distinct</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">5</span> <span class=\"sy0\">-&gt;</span> xs, <span class=\"br0\">(</span>rank xs<span class=\"br0\">)</span><br/>      | <span class=\"br0\">(</span><span class=\"nu0\">1</span>,xs<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> allCards <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x<span class=\"sy0\">-&gt;</span>x::xs<span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> pickBest<br/>      | <span class=\"br0\">(</span><span class=\"nu0\">2</span>,xs<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> allCards <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">collect</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> x<span class=\"sy0\">-&gt;</span>allCards <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> y<span class=\"sy0\">-&gt;</span>y::x::xs<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> pickBest<br/>      | _ <span class=\"sy0\">-&gt;</span> cards, rankInvalid<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">let</span> showHandRank handStr <span class=\"sy0\">=</span><br/>  <span class=\"co1\">// handStr |&gt; calcHandRank |&gt; fun (cards, (rankName,_)) -&gt; printfn \"%s:\u00a0%A\u00a0%s\" handStr cards rankName</span><br/>  handStr <span class=\"sy0\">|&gt;</span> calcHandRank <span class=\"sy0\">|&gt;</span> <span class=\"br0\">(</span><span class=\"kw3\">snd</span> <span class=\"sy0\">&gt;&gt;</span> <span class=\"kw3\">fst</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> printfn <span class=\"st0\">\"%s:\u00a0%s\"</span> handStr<br/>\u00a0<br/><span class=\"br0\">[</span><br/><span class=\"st0\">\"2\u2665 2\u2666 2\u2663 k\u2663 q\u2666\"</span><br/><span class=\"st0\">\"2\u2665 5\u2665 7\u2666 8\u2663 9\u2660\"</span><br/><span class=\"st0\">\"a\u2665 2\u2666 3\u2663 4\u2663 5\u2666\"</span><br/><span class=\"st0\">\"2\u2665 3\u2665 2\u2666 3\u2663 3\u2666\"</span><br/><span class=\"st0\">\"2\u2665 7\u2665 2\u2666 3\u2663 3\u2666\"</span><br/><span class=\"st0\">\"2\u2665 7\u2665 7\u2666 7\u2663 7\u2660\"</span><br/><span class=\"st0\">\"10\u2665 j\u2665 q\u2665 k\u2665 a\u2665\"</span><br/><span class=\"st0\">\"4\u2665 4\u2660 k\u2660 5\u2666 10\u2660\"</span><br/><span class=\"st0\">\"q\u2663 10\u2663 7\u2663 6\u2663 4\u2663\"</span><br/><span class=\"st0\">\"joker  2\u2666  2\u2660  k\u2660  q\u2666\"</span><br/><span class=\"st0\">\"joker  5\u2665  7\u2666  8\u2660  9\u2666\"</span><br/><span class=\"st0\">\"joker  2\u2666  3\u2660  4\u2660  5\u2660\"</span><br/><span class=\"st0\">\"joker  3\u2665  2\u2666  3\u2660  3\u2666\"</span><br/><span class=\"st0\">\"joker  7\u2665  2\u2666  3\u2660  3\u2666\"</span><br/><span class=\"st0\">\"joker  7\u2665  7\u2666  7\u2660  7\u2663\"</span><br/><span class=\"st0\">\"joker  j\u2665  q\u2665  k\u2665  A\u2665\"</span><br/><span class=\"st0\">\"joker  4\u2663  k\u2663  5\u2666 10\u2660\"</span><br/><span class=\"st0\">\"joker  k\u2663  7\u2663  6\u2663  4\u2663\"</span><br/><span class=\"st0\">\"joker  2\u2666  joker  4\u2660  5\u2660\"</span><br/><span class=\"st0\">\"joker  Q\u2666  joker  A\u2660 10\u2660\"</span><br/><span class=\"st0\">\"joker  Q\u2666  joker  A\u2666 10\u2666\"</span><br/><span class=\"st0\">\"joker  2\u2666  2\u2660  joker  q\u2666\"</span><br/><span class=\"br0\">]</span> <br/><span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">List</span></a>.<span class=\"me1\">iter</span> showHandRank<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 126, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"sort\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw1\">type</span> card <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    face <span class=\"kw4\">byte</span><br/>    suit <span class=\"kw4\">byte</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">const</span> faces <span class=\"sy2\">=</span> <span class=\"st0\">\"23456789tjqka\"</span><br/><span class=\"kw1\">const</span> suits <span class=\"sy2\">=</span> <span class=\"st0\">\"shdc\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> isStraight<span class=\"sy1\">(</span>cards <span class=\"sy1\">[]</span>card<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    sorted <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span>card<span class=\"sy1\">,</span> <span class=\"nu0\">5</span><span class=\"sy1\">)</span><br/>    <span class=\"kw3\">copy</span><span class=\"sy1\">(</span>sorted<span class=\"sy1\">,</span> cards<span class=\"sy1\">)</span><br/>    sort<span class=\"sy3\">.</span>Slice<span class=\"sy1\">(</span>sorted<span class=\"sy1\">,</span> <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> sorted<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>face &lt; sorted<span class=\"sy1\">[</span>j<span class=\"sy1\">]</span><span class=\"sy3\">.</span>face<br/>    <span class=\"sy1\">})</span><br/>    <span class=\"kw1\">if</span> sorted<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>face<span class=\"sy3\">+</span><span class=\"nu0\">4</span> <span class=\"sy3\">==</span> sorted<span class=\"sy1\">[</span><span class=\"nu0\">4</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>face <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> sorted<span class=\"sy1\">[</span><span class=\"nu0\">4</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>face <span class=\"sy3\">==</span> <span class=\"nu0\">14</span> &amp;&amp; sorted<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>face <span class=\"sy3\">==</span> <span class=\"nu0\">2</span> &amp;&amp; sorted<span class=\"sy1\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>face <span class=\"sy3\">==</span> <span class=\"nu0\">5</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> isFlush<span class=\"sy1\">(</span>cards <span class=\"sy1\">[]</span>card<span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    suit <span class=\"sy2\">:=</span> cards<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>suit<br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; <span class=\"nu0\">5</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> cards<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><span class=\"sy3\">.</span>suit <span class=\"sy2\">!=</span> suit <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> analyzeHand<span class=\"sy1\">(</span>hand <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">string</span> <span class=\"sy1\">{</span><br/>    temp <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>Fields<span class=\"sy1\">(</span>strings<span class=\"sy3\">.</span>ToLower<span class=\"sy1\">(</span>hand<span class=\"sy1\">))</span><br/>    splitSet <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">]</span><span class=\"kw4\">bool</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">var</span> split <span class=\"sy1\">[]</span><span class=\"kw4\">string</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> temp <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>splitSet<span class=\"sy1\">[</span>s<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            splitSet<span class=\"sy1\">[</span>s<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>            split <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>split<span class=\"sy1\">,</span> s<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>split<span class=\"sy1\">)</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">5</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"invalid\"</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">var</span> cards <span class=\"sy1\">[]</span>card<br/>\u00a0<br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> s <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> split <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>s<span class=\"sy1\">)</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"invalid\"</span><br/>        <span class=\"sy1\">}</span><br/>        fIndex <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>IndexByte<span class=\"sy1\">(</span>faces<span class=\"sy1\">,</span> s<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">])</span><br/>        <span class=\"kw1\">if</span> fIndex <span class=\"sy3\">==</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"invalid\"</span><br/>        <span class=\"sy1\">}</span><br/>        sIndex <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span>IndexByte<span class=\"sy1\">(</span>suits<span class=\"sy1\">,</span> s<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span><br/>        <span class=\"kw1\">if</span> sIndex <span class=\"sy3\">==</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"invalid\"</span><br/>        <span class=\"sy1\">}</span><br/>        cards <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>cards<span class=\"sy1\">,</span> card<span class=\"sy1\">{</span><span class=\"kw4\">byte</span><span class=\"sy1\">(</span>fIndex <span class=\"sy3\">+</span> <span class=\"nu0\">2</span><span class=\"sy1\">),</span> s<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]})</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    groups <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">(</span><span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">byte</span><span class=\"sy1\">][]</span>card<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> c <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> cards <span class=\"sy1\">{</span><br/>        groups<span class=\"sy1\">[</span>c<span class=\"sy3\">.</span>face<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>groups<span class=\"sy1\">[</span>c<span class=\"sy3\">.</span>face<span class=\"sy1\">],</span> c<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">switch</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>groups<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">2</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> group <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> groups <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>group<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">4</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"st0\">\"four-of-a-kind\"</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"full-house\"</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">3</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> group <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> groups <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>group<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">3</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"st0\">\"three-of-a-kind\"</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"two-pair\"</span><br/>    <span class=\"kw1\">case</span> <span class=\"nu0\">4</span><span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">\"one-pair\"</span><br/>    <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>        flush <span class=\"sy2\">:=</span> isFlush<span class=\"sy1\">(</span>cards<span class=\"sy1\">)</span><br/>        straight <span class=\"sy2\">:=</span> isStraight<span class=\"sy1\">(</span>cards<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">case</span> flush &amp;&amp; straight<span class=\"sy1\">:</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"straight-flush\"</span><br/>        <span class=\"kw1\">case</span> flush<span class=\"sy1\">:</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"flush\"</span><br/>        <span class=\"kw1\">case</span> straight<span class=\"sy1\">:</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"straight\"</span><br/>        <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">\"high-card\"</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    hands <span class=\"sy2\">:=</span> <span class=\"sy1\">[</span><span class=\"sy4\">...</span><span class=\"sy1\">]</span><span class=\"kw4\">string</span><span class=\"sy1\">{</span><br/>        <span class=\"st0\">\"2h 2d 2c kc qd\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"2h 5h 7d 8c 9s\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"ah 2d 3c 4c 5d\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"2h 3h 2d 3c 3d\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"2h 7h 2d 3c 3d\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"2h 7h 7d 7c 7s\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"th jh qh kh ah\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"4h 4s ks 5d ts\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"qc tc 7c 6c 4c\"</span><span class=\"sy1\">,</span><br/>        <span class=\"st0\">\"ah ah 7c 6c 4c\"</span><span class=\"sy1\">,</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> hand <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> hands <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%s:\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> hand<span class=\"sy1\">,</span> analyzeHand<span class=\"sy1\">(</span>hand<span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "J", "loc": 36, "block": "<pre class=\"j highlighted_source\">parseHand=: &lt;;.<span class=\"nu0\">_2</span>@,&amp;<span class=\"st_h\">' '</span>@u:~&amp;<span class=\"nu0\">7</span> <span class=\"co1\">NB. hand must be well formed</span><br/>Suits=: &lt;\"&gt; <span class=\"nu0\">7</span> u: <span class=\"st_h\">'\u2665\u2666\u2663\u2666'</span>       <span class=\"co1\">NB. or Suits=: 'hdcs'</span><br/>Faces=: &lt;;.<span class=\"nu0\">_1</span> <span class=\"st_h\">' 2 3 4 5 6 7 8 9 10 j q k a'</span><br/>\u00a0<br/>suits=: {:&amp;.&gt;<br/>faces=: }:&amp;.&gt;<br/>flush=: <span class=\"nu0\">1</span> =&amp;#&amp;~. suits<br/>straight=: <span class=\"nu0\">1</span> = <span class=\"sy0\">(</span>i.#Faces<span class=\"sy0\">)</span> +/@E.~ Faces /:<a class=\"__cf_email__\" data-cfemail=\"5826183176\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> faces<br/>kinds=: #/.~ @:faces<br/>five=: <span class=\"nu0\">5</span> e. kinds <span class=\"co1\">NB. jokers or other cheat</span><br/>four=: <span class=\"nu0\">4</span> e. kinds<br/>three=: <span class=\"nu0\">3</span> e. kinds<br/>two=: <span class=\"nu0\">2</span> e. kinds<br/>twoPair=: <span class=\"nu0\">2</span> = <span class=\"nu0\">2</span> +/ .= kinds<br/>highcard=: <span class=\"nu0\">5</span> = <span class=\"nu0\">1</span> +/ .= kinds<br/>\u00a0<br/>IF=: <span class=\"nu0\">2</span>\u00a0:<span class=\"st_h\">'(,&amp;(&lt;m) ^: v)\"1'</span><br/>Or=: <span class=\"nu0\">2</span>\u00a0:<span class=\"st_h\">'u ^:(5 e. $) @: v'</span><br/>\u00a0<br/>Deck=: ,Faces,&amp;.&gt;/Suits<br/>Joker=: &lt;<span class=\"st_h\">'joker'</span><br/>joke=: [: ,/^:<span class=\"sy0\">(</span>#@$ - 2:<span class=\"sy0\">)</span> <span class=\"sy0\">((</span>{. ,\"<span class=\"nu0\">1</span> Deck ,\"<span class=\"nu0\">0</span> <span class=\"nu0\">1</span> }<a class=\"__cf_email__\" data-cfemail=\"183658\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>}.<span class=\"sy0\">)</span>^:<span class=\"sy0\">(</span><span class=\"nu0\">5</span>&gt;[<span class=\"sy0\">)</span>~ i.&amp;Joker<span class=\"sy0\">)</span>\"<span class=\"nu0\">1</span>^:<span class=\"nu0\">2</span>@,:<br/>punchLine=: {:@-.&amp;a:@,@|:<br/>rateHand=: [:;:inv [: <span class=\"sy0\">(</span>, [: punchLine -<span class=\"nu0\">1</span>\u00a0:<span class=\"sy0\">(</span><span class=\"nu0\">0</span>\u00a0:<span class=\"nu0\">0</span>-.LF<span class=\"sy0\">)</span>@joke<span class=\"sy0\">)</span> parseHand <br/> <span class=\"sy0\">(</span><span class=\"st_h\">'invalid'</span> IF 1:<span class=\"sy0\">)</span> Or<br/> <span class=\"sy0\">(</span><span class=\"st_h\">'high-card'</span> IF highcard<span class=\"sy0\">)</span> Or<br/> <span class=\"sy0\">(</span><span class=\"st_h\">'one-pair'</span> IF two<span class=\"sy0\">)</span> Or<br/> <span class=\"sy0\">(</span><span class=\"st_h\">'two-pair'</span> IF twoPair<span class=\"sy0\">)</span> Or<br/> <span class=\"sy0\">(</span><span class=\"st_h\">'three-of-a-kind'</span> IF three<span class=\"sy0\">)</span> Or<br/> <span class=\"sy0\">(</span><span class=\"st_h\">'straight'</span> IF straight<span class=\"sy0\">)</span> Or<br/> <span class=\"sy0\">(</span><span class=\"st_h\">'flush'</span> IF flush<span class=\"sy0\">)</span> Or<br/> <span class=\"sy0\">(</span><span class=\"st_h\">'full-house'</span> IF <span class=\"sy0\">(</span>two * three<span class=\"sy0\">))</span> Or<br/> <span class=\"sy0\">(</span><span class=\"st_h\">'four-of-a-kind'</span> IF four<span class=\"sy0\">)</span> Or<br/> <span class=\"sy0\">(</span><span class=\"st_h\">'straight-flush'</span> IF <span class=\"sy0\">(</span>straight * flush<span class=\"sy0\">))</span> Or<br/> <span class=\"sy0\">(</span><span class=\"st_h\">'five-of-a-kind'</span> IF five<span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 180, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Collections</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.HashSet</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> PokerHandAnalyzer <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> faces <span class=\"sy0\">=</span> <span class=\"st0\">\"AKQJT98765432\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> suits <span class=\"sy0\">=</span> <span class=\"st0\">\"HDSC\"</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">final</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> deck <span class=\"sy0\">=</span> buildDeck<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Regular hands:<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> input <span class=\"sy0\">:</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"st0\">\"2H 2D 2S KS QD\"</span>,<br/>            <span class=\"st0\">\"2H 5H 7D 8S 9D\"</span>,<br/>            <span class=\"st0\">\"AH 2D 3S 4S 5S\"</span>,<br/>            <span class=\"st0\">\"2H 3H 2D 3S 3D\"</span>,<br/>            <span class=\"st0\">\"2H 7H 2D 3S 3D\"</span>,<br/>            <span class=\"st0\">\"2H 7H 7D 7S 7C\"</span>,<br/>            <span class=\"st0\">\"TH JH QH KH AH\"</span>,<br/>            <span class=\"st0\">\"4H 4C KC 5D TC\"</span>,<br/>            <span class=\"st0\">\"QC TC 7C 6C 4C\"</span>,<br/>            <span class=\"st0\">\"QC TC 7C 7C TD\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>analyzeHand<span class=\"br0\">(</span>input.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Hands with wildcards:<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> input <span class=\"sy0\">:</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"st0\">\"2H 2D 2S KS WW\"</span>,<br/>            <span class=\"st0\">\"2H 5H 7D 8S WW\"</span>,<br/>            <span class=\"st0\">\"AH 2D 3S 4S WW\"</span>,<br/>            <span class=\"st0\">\"2H 3H 2D 3S WW\"</span>,<br/>            <span class=\"st0\">\"2H 7H 2D 3S WW\"</span>,<br/>            <span class=\"st0\">\"2H 7H 7D WW WW\"</span>,<br/>            <span class=\"st0\">\"TH JH QH WW WW\"</span>,<br/>            <span class=\"st0\">\"4H 4C KC WW WW\"</span>,<br/>            <span class=\"st0\">\"QC TC 7C WW WW\"</span>,<br/>            <span class=\"st0\">\"QC TC 7H WW WW\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>analyzeHandWithWildcards<span class=\"br0\">(</span>input.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> Score analyzeHand<span class=\"br0\">(</span><span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> hand<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>hand.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Score<span class=\"br0\">(</span><span class=\"st0\">\"invalid hand: wrong number of cards\"</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, hand<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">new</span> HashSet<span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span>hand<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> hand.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Score<span class=\"br0\">(</span><span class=\"st0\">\"invalid hand: duplicates\"</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, hand<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> faceCount <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>faces.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">long</span> straight <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, flush <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> card <span class=\"sy0\">:</span> hand<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw4\">int</span> face <span class=\"sy0\">=</span> faces.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>card.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>face <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Score<span class=\"br0\">(</span><span class=\"st0\">\"invalid hand: non existing face\"</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, hand<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            straight <span class=\"sy0\">|=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> face<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            faceCount<span class=\"br0\">[</span>face<span class=\"br0\">]</span><span class=\"sy0\">++;</span><br/>\u00a0<br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>suits.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>card.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Score<span class=\"br0\">(</span><span class=\"st0\">\"invalid hand: non-existing suit\"</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span>, hand<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            flush <span class=\"sy0\">|=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> card.<span class=\"me1\">charAt</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// shift the bit pattern to the right as far as possible</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>straight <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            straight <span class=\"sy0\">&gt;&gt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// straight is 00011111; A-2-3-4-5 is 1111000000001</span><br/>        <span class=\"kw4\">boolean</span> hasStraight <span class=\"sy0\">=</span> straight <span class=\"sy0\">==</span> 0b11111 <span class=\"sy0\">||</span> straight <span class=\"sy0\">==</span> 0b1111000000001<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// unsets right-most 1-bit, which may be the only one set</span><br/>        <span class=\"kw4\">boolean</span> hasFlush <span class=\"sy0\">=</span> <span class=\"br0\">(</span>flush <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span>flush <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>hasStraight <span class=\"sy0\">&amp;&amp;</span> hasFlush<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Score<span class=\"br0\">(</span><span class=\"st0\">\"straight-flush\"</span>, <span class=\"nu0\">9</span>, hand<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> total <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> count <span class=\"sy0\">:</span> faceCount<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Score<span class=\"br0\">(</span><span class=\"st0\">\"four-of-a-kind\"</span>, <span class=\"nu0\">8</span>, hand<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>                total <span class=\"sy0\">+=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>                total <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>total <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Score<span class=\"br0\">(</span><span class=\"st0\">\"full-house\"</span>, <span class=\"nu0\">7</span>, hand<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>hasFlush<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Score<span class=\"br0\">(</span><span class=\"st0\">\"flush\"</span>, <span class=\"nu0\">6</span>, hand<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>hasStraight<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Score<span class=\"br0\">(</span><span class=\"st0\">\"straight\"</span>, <span class=\"nu0\">5</span>, hand<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>total <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Score<span class=\"br0\">(</span><span class=\"st0\">\"three-of-a-kind\"</span>, <span class=\"nu0\">4</span>, hand<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>total <span class=\"sy0\">==</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Score<span class=\"br0\">(</span><span class=\"st0\">\"two-pair\"</span>, <span class=\"nu0\">3</span>, hand<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>total <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Score<span class=\"br0\">(</span><span class=\"st0\">\"one-pair\"</span>, <span class=\"nu0\">2</span>, hand<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Score<span class=\"br0\">(</span><span class=\"st0\">\"high-card\"</span>, <span class=\"nu0\">1</span>, hand<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> WildScore analyzeHandWithWildcards<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> hand<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Acollections+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Collections</span></a>.<span class=\"me1\">frequency</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span>hand<span class=\"br0\">)</span>, <span class=\"st0\">\"WW\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"too many wildcards\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> WildScore<span class=\"br0\">(</span>analyzeHandWithWildcardsR<span class=\"br0\">(</span>hand, <span class=\"kw2\">null</span><span class=\"br0\">)</span>, hand.<span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> Score analyzeHandWithWildcardsR<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> hand,<br/>            Score best<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> hand.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>hand<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"st0\">\"WW\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> card <span class=\"sy0\">:</span> deck<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">asList</span><span class=\"br0\">(</span>hand<span class=\"br0\">)</span>.<span class=\"me1\">contains</span><span class=\"br0\">(</span>card<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        hand<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> card<span class=\"sy0\">;</span><br/>                        best <span class=\"sy0\">=</span> analyzeHandWithWildcardsR<span class=\"br0\">(</span>hand, best<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>                hand<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"WW\"</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        Score result <span class=\"sy0\">=</span> analyzeHand<span class=\"br0\">(</span>hand<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>best <span class=\"sy0\">==</span> <span class=\"kw2\">null</span> <span class=\"sy0\">||</span> result.<span class=\"me1\">weight</span> <span class=\"sy0\">&gt;</span> best.<span class=\"me1\">weight</span><span class=\"br0\">)</span><br/>            best <span class=\"sy0\">=</span> result<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> best<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> buildDeck<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> dck <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span>suits.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> faces.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> s <span class=\"sy0\">:</span> suits.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> f <span class=\"sy0\">:</span> faces.<span class=\"me1\">toCharArray</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                dck<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">+</span> f <span class=\"sy0\">+</span> s<span class=\"sy0\">;</span><br/>                i<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> dck<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> Score <span class=\"br0\">{</span><br/>        <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> weight<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> name<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> hand<span class=\"sy0\">;</span><br/>\u00a0<br/>        Score<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> n, <span class=\"kw4\">int</span> w, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> h<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            weight <span class=\"sy0\">=</span> w<span class=\"sy0\">;</span><br/>            name <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>            hand <span class=\"sy0\">=</span> h <span class=\"sy0\">!=</span> <span class=\"kw2\">null</span> <span class=\"sy0\">?</span> h.<span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> h<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @Override<br/>        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>hand<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> name<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> WildScore <span class=\"br0\">{</span><br/>        <span class=\"kw1\">final</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> wild<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">final</span> Score score<span class=\"sy0\">;</span><br/>\u00a0<br/>        WildScore<span class=\"br0\">(</span>Score s, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> w<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            score <span class=\"sy0\">=</span> s<span class=\"sy0\">;</span><br/>            wild <span class=\"sy0\">=</span> w<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        @Override<br/>        <span class=\"kw1\">public</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a>.<span class=\"me1\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"%s%n%s%n\"</span>, <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>wild<span class=\"br0\">)</span>,<br/>                    score.<span class=\"me1\">toString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Kotlin", "loc": 76, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Card<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> face<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> suit<span class=\"sy0\">:</span> Char<span class=\"br0\">)</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> FACES <span class=\"sy0\">=</span> <span class=\"st0\">\"23456789tjqka\"</span><br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> SUITS <span class=\"sy0\">=</span> <span class=\"st0\">\"shdc\"</span><br/>\u00a0<br/>fun isStraight<span class=\"br0\">(</span>cards<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Card<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sorted <span class=\"sy0\">=</span> cards.<span class=\"me1\">sortedBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">face</span> <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sorted<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">face</span> + <span class=\"nu0\">4</span> <span class=\"sy0\">==</span> sorted<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>.<span class=\"me1\">face</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sorted<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>.<span class=\"me1\">face</span> <span class=\"sy0\">==</span> <span class=\"nu0\">14</span> <span class=\"sy0\">&amp;&amp;</span> sorted<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">face</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> sorted<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">face</span> <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun isFlush<span class=\"br0\">(</span>cards<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Card<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> suit <span class=\"sy0\">=</span> cards<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">suit</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>cards.<span class=\"me1\">drop</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">all</span> <span class=\"br0\">{</span> it.<span class=\"me1\">suit</span> <span class=\"sy0\">==</span> suit <span class=\"br0\">}</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun analyzeHand<span class=\"br0\">(</span>hand<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> h <span class=\"sy0\">=</span> hand.<span class=\"me1\">toLowerCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> split <span class=\"sy0\">=</span> h.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"me1\">filterNot</span> <span class=\"br0\">{</span> it <span class=\"sy0\">==</span> <span class=\"st0\">\"\"</span> <span class=\"br0\">}</span>.<span class=\"me1\">distinct</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>split.<span class=\"me1\">size</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"invalid\"</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> cards <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Card<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>s in split<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>s.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"invalid\"</span>            <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> fIndex <span class=\"sy0\">=</span> FACES.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>fIndex <span class=\"sy0\">==</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"invalid\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sIndex <span class=\"sy0\">=</span> SUITS.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>sIndex <span class=\"sy0\">==</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"invalid\"</span><br/>        cards.<span class=\"me1\">add</span><span class=\"br0\">(</span>Card<span class=\"br0\">(</span>fIndex + <span class=\"nu0\">2</span>, s<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span> <br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> groups <span class=\"sy0\">=</span> cards.<span class=\"me1\">groupBy</span> <span class=\"br0\">{</span> it.<span class=\"me1\">face</span> <span class=\"br0\">}</span><br/>    when <span class=\"br0\">(</span>groups.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"nu0\">2</span> -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>groups.<span class=\"me1\">any</span> <span class=\"br0\">{</span> it.<span class=\"me1\">value</span>.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"four-of-a-kind\"</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"full-house\"</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"nu0\">3</span> -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>groups.<span class=\"me1\">any</span> <span class=\"br0\">{</span> it.<span class=\"me1\">value</span>.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span> <span class=\"br0\">}</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"three-of-a-kind\"</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"two-pair\"</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"nu0\">4</span> -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"one-pair\"</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> -<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> flush <span class=\"sy0\">=</span> isFlush<span class=\"br0\">(</span>cards<span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> straight <span class=\"sy0\">=</span> isStraight<span class=\"br0\">(</span>cards<span class=\"br0\">)</span><br/>            when <span class=\"br0\">{</span><br/>                flush <span class=\"sy0\">&amp;&amp;</span> straight -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"straight-flush\"</span><br/>                flush             -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"flush\"</span><br/>                straight          -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"straight\"</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>              -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"st0\">\"high-card\"</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <br/><span class=\"br0\">}</span>    <br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> hands <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span><br/>        <span class=\"st0\">\"2h 2d 2c kc qd\"</span>,<br/>        <span class=\"st0\">\"2h 5h 7d 8c 9s\"</span>,<br/>        <span class=\"st0\">\"ah 2d 3c 4c 5d\"</span>,<br/>        <span class=\"st0\">\"2h 3h 2d 3c 3d\"</span>,<br/>        <span class=\"st0\">\"2h 7h 2d 3c 3d\"</span>,<br/>        <span class=\"st0\">\"2h 7h 7d 7c 7s\"</span>,<br/>        <span class=\"st0\">\"th jh qh kh ah\"</span>,<br/>        <span class=\"st0\">\"4h 4s ks 5d ts\"</span>,<br/>        <span class=\"st0\">\"qc tc 7c 6c 4c\"</span>,<br/>        <span class=\"st0\">\"ah ah 7c 6c 4c\"</span><br/>    <span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>hand in hands<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"$hand: ${analyzeHand(hand)}\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span>    <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 123, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Check whether t is a valid poker hand</span><br/><span class=\"kw1\">function</span> valid <span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">#</span>t <span class=\"sy0\">~=</span> <span class=\"nu0\">5</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> key<span class=\"sy0\">,</span> card <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">if</span>  v<span class=\"sy0\">.</span>value <span class=\"sy0\">==</span> card<span class=\"sy0\">.</span>value <span class=\"kw2\">and</span><br/>                v<span class=\"sy0\">.</span>suit <span class=\"sy0\">==</span> card<span class=\"sy0\">.</span>suit <span class=\"kw2\">and</span><br/>                k <span class=\"sy0\">~=</span> key<br/>            <span class=\"kw1\">then</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Return numerical value of a single card</span><br/><span class=\"kw1\">function</span> cardValue <span class=\"br0\">(</span>card<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> val <span class=\"sy0\">=</span> card<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> n <span class=\"sy0\">=</span> <span class=\"kw3\">tonumber</span><span class=\"br0\">(</span>val<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> n <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> n <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> val <span class=\"sy0\">==</span> <span class=\"st0\">\"j\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">11</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> val <span class=\"sy0\">==</span> <span class=\"st0\">\"q\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">12</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> val <span class=\"sy0\">==</span> <span class=\"st0\">\"k\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">13</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> val <span class=\"sy0\">==</span> <span class=\"st0\">\"a\"</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">error</span><span class=\"br0\">(</span><span class=\"st0\">\"Invalid card value: \"</span> <span class=\"sy0\">..</span> val<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Detect whether hand t is a straight</span><br/><span class=\"kw1\">function</span> straight <span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    <span class=\"kw3\">table.sort</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span> <span class=\"kw1\">function</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span> <span class=\"kw1\">return</span> a<span class=\"sy0\">.</span>value <span class=\"sy0\">&lt;</span> b<span class=\"sy0\">.</span>value <span class=\"kw1\">end</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> ace<span class=\"sy0\">,</span> thisValue<span class=\"sy0\">,</span> lastValue <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>t <span class=\"kw1\">do</span><br/>        thisValue<span class=\"sy0\">,</span> lastValue <span class=\"sy0\">=</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">.</span>value<span class=\"sy0\">,</span> t<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">.</span>value<br/>        <span class=\"kw1\">if</span> lastValue <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> ace <span class=\"sy0\">=</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">if</span> thisValue <span class=\"sy0\">~=</span> lastValue <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">if</span> ace <span class=\"kw1\">then</span><br/>                t<span class=\"br0\">[</span>ace<span class=\"br0\">]</span><span class=\"sy0\">.</span>value <span class=\"sy0\">=</span> <span class=\"nu0\">14</span><br/>                <span class=\"kw1\">return</span> straight<span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>            <span class=\"kw1\">else</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Detect whether hand t is a flush</span><br/><span class=\"kw1\">function</span> isFlush <span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> suit <span class=\"sy0\">=</span> t<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">.</span>suit<br/>    <span class=\"kw1\">for</span> card <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>t <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> t<span class=\"br0\">[</span>card<span class=\"br0\">]</span><span class=\"sy0\">.</span>suit <span class=\"sy0\">~=</span> suit <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Return a table of the count of each card value in hand t</span><br/><span class=\"kw1\">function</span> countValues <span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> countTab<span class=\"sy0\">,</span> maxCount <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> countTab<span class=\"br0\">[</span>v<span class=\"sy0\">.</span>value<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>            countTab<span class=\"br0\">[</span>v<span class=\"sy0\">.</span>value<span class=\"br0\">]</span> <span class=\"sy0\">=</span> countTab<span class=\"br0\">[</span>v<span class=\"sy0\">.</span>value<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">else</span><br/>            countTab<span class=\"br0\">[</span>v<span class=\"sy0\">.</span>value<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> countTab<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Find the highest value in t</span><br/><span class=\"kw1\">function</span> highestCount <span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> maxCount <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> v <span class=\"sy0\">&gt;</span> maxCount <span class=\"kw1\">then</span> maxCount <span class=\"sy0\">=</span> v <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> maxCount<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Detect full-house and two-pair using the value counts in t</span><br/><span class=\"kw1\">function</span> twoTypes <span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> threes<span class=\"sy0\">,</span> twos <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> v <span class=\"sy0\">==</span> <span class=\"nu0\">3</span> <span class=\"kw1\">then</span> threes <span class=\"sy0\">=</span> threes <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">if</span> v <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> twos <span class=\"sy0\">=</span> twos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> threes<span class=\"sy0\">,</span> twos<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Return the rank of a poker hand represented as a string</span><br/><span class=\"kw1\">function</span> rank <span class=\"br0\">(</span>cards<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> hand <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> card <span class=\"kw2\">in</span> cards<span class=\"sy0\">:</span>gmatch<span class=\"br0\">(</span><span class=\"st0\">\"%S+\"</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>hand<span class=\"sy0\">,</span> <span class=\"br0\">{</span>value <span class=\"sy0\">=</span> cardValue<span class=\"br0\">(</span>card<span class=\"br0\">)</span><span class=\"sy0\">,</span> suit <span class=\"sy0\">=</span> card<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">not</span> valid<span class=\"br0\">(</span>hand<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"invalid\"</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">local</span> st<span class=\"sy0\">,</span> fl <span class=\"sy0\">=</span> straight<span class=\"br0\">(</span>hand<span class=\"br0\">)</span><span class=\"sy0\">,</span> isFlush<span class=\"br0\">(</span>hand<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> st <span class=\"kw2\">and</span> fl <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"straight-flush\"</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">local</span> valCount <span class=\"sy0\">=</span> countValues<span class=\"br0\">(</span>hand<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> highCount <span class=\"sy0\">=</span> highestCount<span class=\"br0\">(</span>valCount<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> highCount <span class=\"sy0\">==</span> <span class=\"nu0\">4</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"four-of-a-kind\"</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">local</span> n3<span class=\"sy0\">,</span> n2 <span class=\"sy0\">=</span> twoTypes<span class=\"br0\">(</span>valCount<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> n3 <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw2\">and</span> n2 <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"full-house\"</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> fl <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"flush\"</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> st <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"straight\"</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> highCount <span class=\"sy0\">==</span> <span class=\"nu0\">3</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"three-of-a-kind\"</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> n3 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> n2 <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"two-pair\"</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> highCount <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"st0\">\"one-pair\"</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">\"high-card\"</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Main procedure</span><br/><span class=\"kw1\">local</span> testCases <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">\"2h 2d 2c kc qd\"</span><span class=\"sy0\">,</span> <span class=\"co1\">-- three-of-a-kind</span><br/>    <span class=\"st0\">\"2h 5h 7d 8c 9s\"</span><span class=\"sy0\">,</span> <span class=\"co1\">-- high-card</span><br/>    <span class=\"st0\">\"ah 2d 3c 4c 5d\"</span><span class=\"sy0\">,</span> <span class=\"co1\">-- straight</span><br/>    <span class=\"st0\">\"2h 3h 2d 3c 3d\"</span><span class=\"sy0\">,</span> <span class=\"co1\">-- full-house</span><br/>    <span class=\"st0\">\"2h 7h 2d 3c 3d\"</span><span class=\"sy0\">,</span> <span class=\"co1\">-- two-pair</span><br/>    <span class=\"st0\">\"2h 7h 7d 7c 7s\"</span><span class=\"sy0\">,</span> <span class=\"co1\">-- four-of-a-kind </span><br/>    <span class=\"st0\">\"10h jh qh kh ah\"</span><span class=\"sy0\">,</span><span class=\"co1\">-- straight-flush</span><br/>    <span class=\"st0\">\"4h 4s ks 5d 10s\"</span><span class=\"sy0\">,</span><span class=\"co1\">-- one-pair</span><br/>    <span class=\"st0\">\"qc 10c 7c 6c 4c\"</span> <span class=\"co1\">-- flush</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> case <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>testCases<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span>case<span class=\"sy0\">,</span> <span class=\"st0\">\": \"</span> <span class=\"sy0\">..</span> rank<span class=\"br0\">(</span>case<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "Perl", "loc": 144, "block": "<pre class=\"perl highlighted_source\">\u00a0<br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> utf8<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> feature <span class=\"st_h\">'say'</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> <a href=\"http://perldoc.perl.org/functions/open.html\"><span class=\"kw3\">open</span></a> qw<span class=\"sy0\">&lt;:</span>encoding<span class=\"br0\">(</span>utf<span class=\"sy0\">-</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span>std<span class=\"sy0\">&gt;;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/package.html\"><span class=\"kw3\">package</span></a> Hand <span class=\"br0\">{</span><br/>    <span class=\"kw2\">sub</span> describe <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/pop.html\"><span class=\"kw3\">pop</span></a><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$hand</span> <span class=\"sy0\">=</span> init<span class=\"br0\">(</span><span class=\"re0\">$str</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st0\">\"$str: INVALID\"</span> <span class=\"kw1\">if</span> <span class=\"sy0\">!</span><span class=\"re0\">$hand</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> analyze<span class=\"br0\">(</span><span class=\"re0\">$hand</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> init <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/lc.html\"><span class=\"kw3\">lc</span></a> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"br0\">)</span> <span class=\"sy0\">=~</span> <span class=\"co2\">tr/234567891jqka\u2665\u2666\u2663\u2660//cd</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">if</span> <span class=\"re0\">$str</span> <span class=\"sy0\">!~</span> <span class=\"co2\">m/\\A (?: [234567891jqka] [\u2665\u2666\u2663\u2660] ){5} \\z/x</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$cnt</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"re0\">$cnt</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$try</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/substr.html\"><span class=\"kw3\">substr</span></a> <span class=\"re0\">$str</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>            <span class=\"sy0\">++</span><span class=\"re0\">$cnt</span> <span class=\"kw1\">while</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/$try/g</span><span class=\"sy0\">;</span><br/>            <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">if</span> <span class=\"re0\">$cnt</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$suits</span> <span class=\"sy0\">=</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=~</span> <a href=\"http://perldoc.perl.org/functions/tr.html\"><span class=\"kw3\">tr</span></a><span class=\"sy0\">/</span>234567891jqka<span class=\"sy0\">//</span>dr<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$ranks</span> <span class=\"sy0\">=</span> <span class=\"re0\">$str</span> <span class=\"sy0\">=~</span> <a href=\"http://perldoc.perl.org/functions/tr.html\"><span class=\"kw3\">tr</span></a><span class=\"sy0\">/</span>\u2665\u2666\u2663\u2660<span class=\"sy0\">//</span>dr<span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">{</span><br/>            hand  <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$str</span><span class=\"sy0\">,</span><br/>            suits <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$suits</span><span class=\"sy0\">,</span><br/>            ranks <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$ranks</span><span class=\"sy0\">,</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> analyze <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$hand</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@ranks</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/split.html\"><span class=\"kw3\">split</span></a> <span class=\"sy0\">//,</span> <span class=\"re0\">$hand</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>ranks<span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">%cards</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">@ranks</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"co5\">$_</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">,</span> <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"co5\">$_</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'1'</span><span class=\"sy0\">;</span><br/>            <span class=\"co5\">$_</span> <span class=\"sy0\">=</span> <span class=\"nu0\">11</span><span class=\"sy0\">,</span> <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"co5\">$_</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'j'</span><span class=\"sy0\">;</span><br/>            <span class=\"co5\">$_</span> <span class=\"sy0\">=</span> <span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"co5\">$_</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'q'</span><span class=\"sy0\">;</span><br/>            <span class=\"co5\">$_</span> <span class=\"sy0\">=</span> <span class=\"nu0\">13</span><span class=\"sy0\">,</span> <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"co5\">$_</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'k'</span><span class=\"sy0\">;</span><br/>            <span class=\"co5\">$_</span> <span class=\"sy0\">=</span> <span class=\"nu0\">14</span><span class=\"sy0\">,</span> <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> <span class=\"co5\">$_</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'a'</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">continue</span> <span class=\"br0\">{</span><br/>            <span class=\"sy0\">++</span><span class=\"re0\">$cards</span><span class=\"br0\">{</span> <span class=\"co5\">$_</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$kicker</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">@pairs</span><span class=\"sy0\">,</span> <span class=\"re0\">$set</span><span class=\"sy0\">,</span> <span class=\"re0\">$quads</span><span class=\"sy0\">,</span> <span class=\"re0\">$straight</span><span class=\"sy0\">,</span> <span class=\"re0\">$flush</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$card</span><span class=\"sy0\">,</span> <span class=\"re0\">$count</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/each.html\"><span class=\"kw3\">each</span></a> <span class=\"re0\">%cards</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$count</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$kicker</span> <span class=\"sy0\">=</span> <span class=\"re0\">$card</span> <span class=\"kw1\">if</span> <span class=\"re0\">$kicker</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$card</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span><span class=\"re0\">$count</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@pairs</span><span class=\"sy0\">,</span> <span class=\"re0\">$card</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span><span class=\"re0\">$count</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$set</span> <span class=\"sy0\">=</span> <span class=\"re0\">$card</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">elsif</span> <span class=\"br0\">(</span><span class=\"re0\">$count</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$quads</span> <span class=\"sy0\">=</span> <span class=\"re0\">$card</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <a href=\"http://perldoc.perl.org/functions/die.html\"><span class=\"kw3\">die</span></a> <span class=\"st0\">\"Five of a kind? Cheater!<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"re0\">$flush</span>    <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$hand</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">{</span>suits<span class=\"br0\">}</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/\\A (.) \\1 {4}/x</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$straight</span> <span class=\"sy0\">=</span> check_straight<span class=\"br0\">(</span><span class=\"re0\">@ranks</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> get_high<span class=\"br0\">(</span><span class=\"re0\">$kicker</span><span class=\"sy0\">,</span> <span class=\"re0\">\\@pairs</span><span class=\"sy0\">,</span> <span class=\"re0\">$set</span><span class=\"sy0\">,</span> <span class=\"re0\">$quads</span><span class=\"sy0\">,</span> <span class=\"re0\">$straight</span><span class=\"sy0\">,</span> <span class=\"re0\">$flush</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> check_straight <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$sequence</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">' '</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/sort.html\"><span class=\"kw3\">sort</span></a> <span class=\"br0\">{</span> <span class=\"re0\">$a</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"re0\">$b</span> <span class=\"br0\">}</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span>       <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/index.html\"><span class=\"kw3\">index</span></a><span class=\"br0\">(</span><span class=\"st_h\">'2 3 4 5 6 7 8 9 10 11 12 13 14'</span><span class=\"sy0\">,</span> <span class=\"re0\">$sequence</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st_h\">'wheel'</span> <span class=\"kw1\">if</span> <a href=\"http://perldoc.perl.org/functions/index.html\"><span class=\"kw3\">index</span></a><span class=\"br0\">(</span><span class=\"st_h\">'2 3 4 5 14 6 7 8 9 10 11 12 13'</span><span class=\"sy0\">,</span> <span class=\"re0\">$sequence</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span>  <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <a href=\"http://perldoc.perl.org/functions/undef.html\"><span class=\"kw3\">undef</span></a><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> get_high <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$kicker</span><span class=\"sy0\">,</span> <span class=\"re0\">$pairs</span><span class=\"sy0\">,</span> <span class=\"re0\">$set</span><span class=\"sy0\">,</span> <span class=\"re0\">$quads</span><span class=\"sy0\">,</span> <span class=\"re0\">$straight</span><span class=\"sy0\">,</span> <span class=\"re0\">$flush</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$kicker</span> <span class=\"sy0\">=</span> to_s<span class=\"br0\">(</span><span class=\"re0\">$kicker</span><span class=\"sy0\">,</span> <span class=\"st_h\">'s'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st_h\">'straight-flush: Royal Flush!'</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">$straight</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$flush</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$kicker</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'Ace'</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$straight</span> <span class=\"kw1\">ne</span> <span class=\"st_h\">'wheel'</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st0\">\"straight-flush: Steel Wheel!\"</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">$straight</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$flush</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$straight</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'wheel'</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st0\">\"straight-flush: $kicker high\"</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">$straight</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$flush</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st_h\">'four-of-a-kind: '</span><span class=\"sy0\">.</span> to_s<span class=\"br0\">(</span><span class=\"re0\">$quads</span><span class=\"sy0\">,</span> <span class=\"st_h\">'p'</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">$quads</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st_h\">'full-house: '</span><span class=\"sy0\">.</span> to_s<span class=\"br0\">(</span><span class=\"re0\">$set</span><span class=\"sy0\">,</span> <span class=\"st_h\">'p'</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span><span class=\"st_h\">' full of '</span><span class=\"sy0\">.</span> to_s<span class=\"br0\">(</span><span class=\"re0\">$pairs</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">'p'</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">$set</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">@$pairs</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st0\">\"flush: $kicker high\"</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">$flush</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st_h\">'straight: Wheel!'</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">$straight</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$straight</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'wheel'</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st0\">\"straight: $kicker high\"</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">$straight</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st_h\">'three-of-a-kind: '</span><span class=\"sy0\">.</span> to_s<span class=\"br0\">(</span><span class=\"re0\">$set</span><span class=\"sy0\">,</span> <span class=\"st_h\">'p'</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">$set</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st_h\">'two-pairs: '</span><span class=\"sy0\">.</span> to_s<span class=\"br0\">(</span><span class=\"re0\">$pairs</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">'p'</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span><span class=\"st_h\">' and '</span><span class=\"sy0\">.</span> to_s<span class=\"br0\">(</span><span class=\"re0\">$pairs</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">'p'</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">@$pairs</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st_h\">'one-pair: '</span><span class=\"sy0\">.</span> to_s<span class=\"br0\">(</span><span class=\"re0\">$pairs</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"st_h\">'p'</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"re0\">@$pairs</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"st0\">\"high-card: $kicker\"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%to_str</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>         <span class=\"nu0\">2</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Two'</span><span class=\"sy0\">,</span>    <span class=\"nu0\">3</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Three'</span><span class=\"sy0\">,</span> <span class=\"nu0\">4</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Four'</span><span class=\"sy0\">,</span>  <span class=\"nu0\">5</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Five'</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Six'</span><span class=\"sy0\">,</span><br/>         <span class=\"nu0\">7</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Seven'</span><span class=\"sy0\">,</span>  <span class=\"nu0\">8</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Eight'</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Nine'</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Ten'</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Jack'</span><span class=\"sy0\">,</span><br/>        <span class=\"nu0\">12</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Queen'</span><span class=\"sy0\">,</span> <span class=\"nu0\">13</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'King'</span><span class=\"sy0\">,</span> <span class=\"nu0\">14</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Ace'</span><span class=\"sy0\">,</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">%to_str_diffs</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Deuces'</span><span class=\"sy0\">,</span> <span class=\"nu0\">6</span> <span class=\"sy0\">=&gt;</span> <span class=\"st_h\">'Sixes'</span><span class=\"sy0\">,</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> to_s <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$num</span><span class=\"sy0\">,</span> <span class=\"re0\">$verb</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\"># verb is 'singular' or 'plural' (or 's' or 'p')</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$verb</span> <span class=\"sy0\">=~</span> <span class=\"co2\">m/\\A p/xi</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$to_str_diffs</span><span class=\"br0\">{</span> <span class=\"re0\">$num</span> <span class=\"br0\">}</span> <span class=\"kw1\">if</span> <span class=\"re0\">$to_str_diffs</span><span class=\"br0\">{</span> <span class=\"re0\">$num</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$to_str</span><span class=\"br0\">{</span> <span class=\"re0\">$num</span> <span class=\"br0\">}</span> <span class=\"sy0\">.</span><span class=\"st_h\">'s'</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$to_str</span><span class=\"br0\">{</span> <span class=\"re0\">$num</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@cards</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><br/>    <span class=\"st_h\">'10\u2665 j\u2665  q\u2665 k\u2665 a\u2665'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'2\u2665  3\u2665  4\u2665 5\u2665 a\u2665'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'2\u2665  2\u2663  2\u2666 3\u2663 2\u2660'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'10\u2665 K\u2665  K\u2666 K\u2663 10\u2666'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'q\u2663  10\u2663 7\u2663 6\u2663 3\u2663'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'5\u2663  10\u2663 7\u2663 6\u2663 4\u2663'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'9\u2665  10\u2665 q\u2665 k\u2665 j\u2663'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'a\u2665  a\u2663  3\u2663 4\u2663 5\u2666'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'2\u2665  2\u2666  2\u2663 k\u2663 q\u2666'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'6\u2665  7\u2665  6\u2666 j\u2663 j\u2666'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'2\u2665  6\u2665  2\u2666 3\u2663 3\u2666'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'7\u2665  7\u2660  k\u2660 3\u2666 10\u2660'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'4\u2665  4\u2660  k\u2660 2\u2666 10\u2660'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'2\u2665  5\u2665  j\u2666 8\u2663 9\u2660'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'2\u2665  5\u2665  7\u2666 8\u2663 9\u2660'</span><span class=\"sy0\">,</span><br/>    <span class=\"st_h\">'a\u2665  a\u2665  3\u2663 4\u2663 5\u2666'</span><span class=\"sy0\">,</span> <span class=\"co1\"># INVALID: duplicate aces</span><br/><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>say Hand<span class=\"sy0\">::</span><span class=\"me2\">describe</span><span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"re0\">@cards</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 113, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> v6<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">grammar</span> PokerHand <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\"># Perl6 Grammar to parse and rank 5-card poker hands</span><br/>    <span class=\"co1\"># E.g. PokerHand.parse(\"2\u2665 3\u2665 2\u2666 3\u2663 3\u2666\");</span><br/>    <span class=\"co1\"># 2013-12-21: handle 'joker' wildcards; maximum of two</span><br/>\u00a0<br/>    <span class=\"kw2\">rule</span> TOP <span class=\"br0\">{</span><br/>        <span class=\"sy0\">&lt;</span>hand<span class=\"sy0\">&gt;</span><br/>\u00a0<br/>        <span class=\"sy0\">:</span><span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$flush</span><span class=\"sy0\">,</span> <span class=\"re0\">$straight</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"re0\">$n</span>        <span class=\"sy0\">=</span> n<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>a<span class=\"sy0\">-</span>kind<span class=\"br0\">(</span><span class=\"re0\">$&lt;hand</span><span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$flush</span>    <span class=\"sy0\">=</span> flush<span class=\"br0\">(</span><span class=\"re0\">$&lt;hand</span><span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$straight</span> <span class=\"sy0\">=</span> straight<span class=\"br0\">(</span><span class=\"re0\">$&lt;hand</span><span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>         <span class=\"br0\">}</span><br/>         <span class=\"sy0\">&lt;</span>rank<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$flush</span><span class=\"sy0\">,</span> <span class=\"re0\">$straight</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><br/>     <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">rule</span> hand <span class=\"br0\">{</span><br/>         <span class=\"sy0\">:</span><span class=\"kw1\">my</span> <span class=\"re0\">%*PLAYED</span><span class=\"sy0\">;</span><br/>         <span class=\"br0\">{</span> <span class=\"re0\">%*PLAYED</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>         <span class=\"br0\">[</span> <span class=\"sy0\">&lt;</span>face<span class=\"sy0\">-</span>card<span class=\"sy0\">&gt;</span> <span class=\"sy0\">|</span> <span class=\"sy0\">&lt;</span>joker<span class=\"sy0\">&gt;</span> <span class=\"br0\">]</span><span class=\"sy0\">**</span><span class=\"nu0\">5</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">token</span> face<span class=\"sy0\">-</span>card <span class=\"br0\">{</span><span class=\"sy0\">&lt;</span>face<span class=\"sy0\">&gt;&lt;</span>suit<span class=\"sy0\">&gt;</span> <span class=\"sy0\">&lt;?</span><span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$card</span> <span class=\"sy0\">=</span> <span class=\"sy0\">~</span>$<span class=\"sy0\">/.</span><span class=\"kw3\">lc</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\"># disallow duplicates</span><br/>            <span class=\"sy0\">++</span><span class=\"re0\">%*PLAYED</span><span class=\"br0\">{</span><span class=\"re0\">$card</span><span class=\"br0\">}</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>       <span class=\"br0\">}</span><span class=\"sy0\">&gt;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">token</span> joker <span class=\"br0\">{</span><span class=\"sy0\">:</span><span class=\"kw3\">i</span> <span class=\"st_h\">'joker'</span> <span class=\"sy0\">&lt;?</span><span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$card</span> <span class=\"sy0\">=</span> <span class=\"sy0\">~</span>$<span class=\"sy0\">/.</span><span class=\"kw3\">lc</span><span class=\"sy0\">;</span><br/>            <span class=\"co1\"># allow two jokers in a hand</span><br/>            <span class=\"sy0\">++</span><span class=\"re0\">%*PLAYED</span><span class=\"br0\">{</span><span class=\"re0\">$card</span><span class=\"br0\">}</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">&gt;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">token</span> face <span class=\"br0\">{</span><span class=\"sy0\">:</span><span class=\"kw3\">i</span> <span class=\"sy0\">&lt;</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span> jqka<span class=\"br0\">]</span><span class=\"sy0\">&gt;</span> <span class=\"sy0\">|</span> <span class=\"nu0\">10</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">token</span> suit <span class=\"br0\">{</span><span class=\"sy0\">&lt;</span><span class=\"br0\">[</span>\u2665 \u2666 \u2663 \u2660<span class=\"br0\">]</span><span class=\"sy0\">&gt;</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">multi</span> <span class=\"kw2\">token</span> rank<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span>$<span class=\"sy0\">,</span>$<span class=\"sy0\">,</span>$<span class=\"br0\">)</span>                   <span class=\"br0\">{</span> <span class=\"re0\">$&lt;five</span><span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>a<span class=\"sy0\">-</span>kind<span class=\"sy0\">&gt;=&lt;?&gt;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">multi</span> <span class=\"kw2\">token</span> rank<span class=\"br0\">(</span>$<span class=\"sy0\">,</span><span class=\"re0\">$f</span><span class=\"sy0\">,</span><span class=\"re0\">$s</span>  <span class=\"kw1\">where</span> <span class=\"br0\">{</span><span class=\"re0\">$f</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$s</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$&lt;straight</span><span class=\"sy0\">-</span>flush<span class=\"sy0\">&gt;=&lt;?&gt;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">multi</span> <span class=\"kw2\">token</span> rank<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span>$<span class=\"sy0\">,</span>$<span class=\"sy0\">,</span>$<span class=\"br0\">)</span>                   <span class=\"br0\">{</span> <span class=\"re0\">$&lt;four</span><span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>a<span class=\"sy0\">-</span>kind<span class=\"sy0\">&gt;=&lt;?&gt;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">multi</span> <span class=\"kw2\">token</span> rank<span class=\"br0\">(</span>$<span class=\"sy0\">,</span>$<span class=\"sy0\">,</span><span class=\"re0\">$f</span><span class=\"sy0\">,</span>$ <span class=\"kw1\">where</span> <span class=\"br0\">{</span><span class=\"re0\">$f</span><span class=\"br0\">}</span><span class=\"br0\">)</span>       <span class=\"br0\">{</span> <span class=\"re0\">$&lt;flush</span><span class=\"sy0\">&gt;=&lt;?&gt;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">multi</span> <span class=\"kw2\">token</span> rank<span class=\"br0\">(</span>$<span class=\"sy0\">,</span>$<span class=\"sy0\">,</span>$<span class=\"sy0\">,</span><span class=\"re0\">$s</span> <span class=\"kw1\">where</span> <span class=\"br0\">{</span><span class=\"re0\">$s</span><span class=\"br0\">}</span><span class=\"br0\">)</span>       <span class=\"br0\">{</span> <span class=\"re0\">$&lt;straight</span><span class=\"sy0\">&gt;=&lt;?&gt;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">multi</span> <span class=\"kw2\">token</span> rank<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>$<span class=\"sy0\">,</span>$<span class=\"br0\">)</span>                   <span class=\"br0\">{</span> <span class=\"re0\">$&lt;full</span><span class=\"sy0\">-</span>house<span class=\"sy0\">&gt;=&lt;?&gt;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">multi</span> <span class=\"kw2\">token</span> rank<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span>$<span class=\"sy0\">,</span>$<span class=\"sy0\">,</span>$<span class=\"br0\">)</span>                   <span class=\"br0\">{</span> <span class=\"re0\">$&lt;three</span><span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>a<span class=\"sy0\">-</span>kind<span class=\"sy0\">&gt;=&lt;?&gt;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">multi</span> <span class=\"kw2\">token</span> rank<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>$<span class=\"sy0\">,</span>$<span class=\"br0\">)</span>                   <span class=\"br0\">{</span> <span class=\"re0\">$&lt;two</span><span class=\"sy0\">-</span>pair<span class=\"sy0\">&gt;=&lt;?&gt;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">multi</span> <span class=\"kw2\">token</span> rank<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span>$<span class=\"sy0\">,</span>$<span class=\"sy0\">,</span>$<span class=\"br0\">)</span>                   <span class=\"br0\">{</span> <span class=\"re0\">$&lt;one</span><span class=\"sy0\">-</span>pair<span class=\"sy0\">&gt;=&lt;?&gt;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw2\">multi</span> <span class=\"kw2\">token</span> rank<span class=\"br0\">(</span>$<span class=\"sy0\">,</span>$<span class=\"sy0\">,</span>$<span class=\"sy0\">,</span>$<span class=\"br0\">)</span> <span class=\"kw1\">is</span> <span class=\"kw1\">default</span>        <span class=\"br0\">{</span> <span class=\"re0\">$&lt;high</span><span class=\"sy0\">-</span>card<span class=\"sy0\">&gt;=&lt;?&gt;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw2\">sub</span> n<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>a<span class=\"sy0\">-</span>kind<span class=\"br0\">(</span>$<span class=\"sy0\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">%faces</span> <span class=\"sy0\">:=</span> bag <span class=\"re0\">@&lt;face</span><span class=\"sy0\">-</span>card<span class=\"sy0\">&gt;.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span> <span class=\"sy0\">-&gt;</span> $<span class=\"sy0\">/</span> <span class=\"br0\">{</span><span class=\"sy0\">~</span><span class=\"re0\">$&lt;face</span><span class=\"sy0\">&gt;.</span><span class=\"kw3\">lc</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">@counts</span> <span class=\"sy0\">=</span> <span class=\"re0\">%faces</span><span class=\"sy0\">.</span><span class=\"kw3\">values</span><span class=\"sy0\">.</span><span class=\"kw3\">sort</span><span class=\"sy0\">.</span><span class=\"kw3\">reverse</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">@counts</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+=</span> <span class=\"re0\">@&lt;joker</span><span class=\"sy0\">&gt;;</span><br/>       <span class=\"kw1\">return</span> <span class=\"re0\">@counts</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">sub</span> flush<span class=\"br0\">(</span>$<span class=\"sy0\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">%suits</span> <span class=\"sy0\">:=</span> set <span class=\"re0\">@&lt;face</span><span class=\"sy0\">-</span>card<span class=\"sy0\">&gt;.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span> <span class=\"sy0\">-&gt;</span> $<span class=\"sy0\">/</span> <span class=\"br0\">{</span><span class=\"sy0\">~</span><span class=\"re0\">$&lt;suit</span><span class=\"sy0\">&gt;</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"sy0\">+</span><span class=\"re0\">%suits</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw2\">sub</span> straight<span class=\"br0\">(</span>$<span class=\"sy0\">/</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># allow both ace-low and ace-high straights</span><br/>        <span class=\"kw1\">constant</span> <span class=\"re0\">@Seq</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;</span> a <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> j q k a <span class=\"sy0\">&gt;.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"sy0\">*.</span><span class=\"me1\">Str</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$faces</span> <span class=\"sy0\">=</span> set <span class=\"re0\">@&lt;face</span><span class=\"sy0\">-</span>card<span class=\"sy0\">&gt;.</span><span class=\"kw3\">map</span><span class=\"br0\">(</span> <span class=\"sy0\">-&gt;</span> $<span class=\"sy0\">/</span> <span class=\"br0\">{</span><span class=\"sy0\">~</span><span class=\"re0\">$&lt;face</span><span class=\"sy0\">&gt;.</span><span class=\"kw3\">lc</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$jokers</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">@&lt;joker</span><span class=\"sy0\">&gt;;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"re0\">@Seq</span> <span class=\"sy0\">-</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$run</span> <span class=\"sy0\">=</span> set <span class=\"re0\">@Seq</span><span class=\"br0\">[</span><span class=\"re0\">$_</span> <span class=\"sy0\">..</span> <span class=\"re0\">$_</span><span class=\"sy0\">+</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">True</span><br/>                <span class=\"kw1\">if</span> <span class=\"sy0\">+</span><span class=\"br0\">(</span><span class=\"re0\">$faces</span> \u2229 <span class=\"re0\">$run</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">5</span> <span class=\"sy0\">-</span> <span class=\"re0\">$jokers</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">False</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"st0\">\"2\u2665 2\u2666 2\u2663 k\u2663 q\u2666\"</span><span class=\"sy0\">,</span>   <span class=\"co1\"># three-of-a-kind</span><br/>     <span class=\"st0\">\"2\u2665 5\u2665 7\u2666 8\u2663 9\u2660\"</span><span class=\"sy0\">,</span>   <span class=\"co1\"># high-card</span><br/>     <span class=\"st0\">\"a\u2665 2\u2666 3\u2663 4\u2663 5\u2666\"</span><span class=\"sy0\">,</span>   <span class=\"co1\"># straight</span><br/>     <span class=\"st0\">\"2\u2665 3\u2665 2\u2666 3\u2663 3\u2666\"</span><span class=\"sy0\">,</span>   <span class=\"co1\"># full-house</span><br/>     <span class=\"st0\">\"2\u2665 7\u2665 2\u2666 3\u2663 3\u2666\"</span><span class=\"sy0\">,</span>   <span class=\"co1\"># two-pair</span><br/>     <span class=\"st0\">\"2\u2665 7\u2665 7\u2666 7\u2663 7\u2660\"</span><span class=\"sy0\">,</span>   <span class=\"co1\"># four-of-a-kind</span><br/>     <span class=\"st0\">\"10\u2665 j\u2665 q\u2665 k\u2665 a\u2665\"</span><span class=\"sy0\">,</span>  <span class=\"co1\"># straight-flush</span><br/>     <span class=\"st0\">\"4\u2665 4\u2660 k\u2660 5\u2666 10\u2660\"</span><span class=\"sy0\">,</span>  <span class=\"co1\"># one-pair</span><br/>     <span class=\"st0\">\"q\u2663 10\u2663 7\u2663 6\u2663 4\u2663\"</span><span class=\"sy0\">,</span>  <span class=\"co1\"># flush</span><br/>     <span class=\"co1\">## EXTRA CREDIT ##</span><br/>     <span class=\"st0\">\"joker  2\u2666  2\u2660  k\u2660  q\u2666\"</span><span class=\"sy0\">,</span>  <span class=\"co1\"># three-of-a-kind</span><br/>     <span class=\"st0\">\"joker  5\u2665  7\u2666  8\u2660  9\u2666\"</span><span class=\"sy0\">,</span>  <span class=\"co1\"># straight</span><br/>     <span class=\"st0\">\"joker  2\u2666  3\u2660  4\u2660  5\u2660\"</span><span class=\"sy0\">,</span>  <span class=\"co1\"># straight</span><br/>     <span class=\"st0\">\"joker  3\u2665  2\u2666  3\u2660  3\u2666\"</span><span class=\"sy0\">,</span>  <span class=\"co1\"># four-of-a-kind</span><br/>     <span class=\"st0\">\"joker  7\u2665  2\u2666  3\u2660  3\u2666\"</span><span class=\"sy0\">,</span>  <span class=\"co1\"># three-of-a-kind</span><br/>     <span class=\"st0\">\"joker  7\u2665  7\u2666  7\u2660  7\u2663\"</span><span class=\"sy0\">,</span>  <span class=\"co1\"># five-of-a-kind</span><br/>     <span class=\"st0\">\"joker  j\u2665  q\u2665  k\u2665  A\u2665\"</span><span class=\"sy0\">,</span>  <span class=\"co1\"># straight-flush</span><br/>     <span class=\"st0\">\"joker  4\u2663  k\u2663  5\u2666 10\u2660\"</span><span class=\"sy0\">,</span>  <span class=\"co1\"># one-pair</span><br/>     <span class=\"st0\">\"joker  k\u2663  7\u2663  6\u2663  4\u2663\"</span><span class=\"sy0\">,</span>  <span class=\"co1\"># flush</span><br/>     <span class=\"st0\">\"joker  2\u2666 joker  4\u2660  5\u2660\"</span><span class=\"sy0\">,</span>  <span class=\"co1\"># straight</span><br/>     <span class=\"st0\">\"joker  Q\u2666 joker  A\u2660 10\u2660\"</span><span class=\"sy0\">,</span>  <span class=\"co1\"># straight</span><br/>     <span class=\"st0\">\"joker  Q\u2666 joker  A\u2666 10\u2666\"</span><span class=\"sy0\">,</span>  <span class=\"co1\"># straight-flush</span><br/>     <span class=\"st0\">\"joker  2\u2666 2\u2660  joker  q\u2666\"</span><span class=\"sy0\">,</span>  <span class=\"co1\"># four of a kind</span><br/>   <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   PokerHand<span class=\"sy0\">.</span><span class=\"me1\">parse</span><span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">my</span> <span class=\"re0\">$rank</span> <span class=\"sy0\">=</span> <span class=\"re0\">$&lt;rank</span><span class=\"sy0\">&gt;</span><br/>      <span class=\"sy0\">??</span> <span class=\"re0\">$&lt;rank</span><span class=\"sy0\">&gt;.</span><span class=\"me1\">caps</span><br/>      <span class=\"sy0\">!!</span> <span class=\"st_h\">'invalid'</span><span class=\"sy0\">;</span><br/>   <span class=\"kw3\">say</span> <span class=\"st0\">\"$_: $rank\"</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 90, "block": "<pre class=\"text highlighted_source\">function poker(string hand)<br/>    hand = substitute(hand,\"10\",\"t\")<br/>    sequence cards = split(hand,no_empty:=1)<br/>    if length(cards)!=5 then return \"invalid hand\" end if<br/>    sequence ranks = repeat(0,13),<br/>             suits = repeat(0,4)<br/>    integer jokers = 0<br/>    for i=1 to length(cards) do<br/>        sequence ci = utf8_to_utf32(cards[i])<br/>        if ci=\"joker\" then<br/>            jokers += 1<br/>            if jokers&gt;2 then return \"invalid hand\" end if<br/>        else<br/>            if length(ci)!=2 then return \"invalid hand\" end if<br/>            integer rank = find(lower(ci[1]),\"23456789tjqka\")<br/>            integer suit = find(ci[2],utf8_to_utf32(\"\u2665\u2663\u2666\u2660\"))<br/>            if rank=0 or suit=0 then return \"invalid hand\" end if<br/>            ranks[rank] += 1<br/>            suits[suit] += 1<br/>        end if<br/>    end for<br/>    integer straight = match({1,1,1,1,1},ranks) <br/>    if not straight then <br/>        straight = sort(ranks)[$]=1 and match({0,0,0,0,0,0,0,0},ranks)<br/>    end if<br/>    integer _flush = (max(suits)+jokers = 5)<br/>    integer _pairs = max(ranks)+jokers<br/>    integer pair = find(2,ranks)<br/>    integer full_house = _pairs=3 and pair and (jokers=0 or find(2,ranks,pair+1))<br/>    integer two_pair = find(2,ranks,pair+1)<br/>    integer high_card = rfind(1,sq_ne(ranks,0))+1<br/>    if jokers and _pairs=jokers+1 then<br/>        straight = 1<br/>        integer k = find(1,ranks), j = jokers<br/>        for l=k to min(k+5-j,13) do<br/>            if ranks[l]=0 then<br/>                if j=0 then<br/>                    straight = 0<br/>                    exit<br/>                end if<br/>                j -= 1<br/>            end if<br/>        end for<br/>        if straight and j then<br/>            high_card = min(high_card+j,14)<br/>        end if<br/>    elsif straight and ranks[1]!=0 then <br/>        high_card = find(0,ranks)<br/>    end if<br/>    if _pairs=5             then return {10,\"five of a kind\", find(5-jokers,ranks)+1} end if<br/>    if straight and _flush  then return {9,\"straight flush\", high_card} end if<br/>    if _pairs=4             then return {8,\"four of a kind\", find(4-jokers,ranks)+1} end if<br/>    if full_house           then return {7,\"full house\", find(3-jokers,ranks)+1} end if<br/>    if _flush               then return {6,\"flush\", high_card} end if<br/>    if straight             then return {5,\"straight\", high_card} end if<br/>    if _pairs=3             then return {4,\"three of a kind\", find(3-jokers,ranks)+1} end if<br/>    if pair and two_pair    then return {3,\"two pair\", two_pair+1} end if<br/>    if pair                 then return {2,\"one pair\", pair+1} end if<br/>    if jokers               then return {2,\"one pair\", high_card} end if<br/>                                 return {1,\"high card\",high_card}<br/>end function<br/>\u00a0<br/>sequence hands = {{0,\"2\u2665 2\u2666 2\u2663 k\u2663 q\u2666\"},<br/>                  {0,\"2\u2665 5\u2665 7\u2666 8\u2663 9\u2660\"},<br/>                  {0,\"a\u2665 2\u2666 3\u2663 4\u2663 5\u2666\"},<br/>                  {0,\"2\u2665 3\u2665 2\u2666 3\u2663 3\u2666\"},<br/>                  {0,\"2\u2665 7\u2665 2\u2666 3\u2663 3\u2666\"},<br/>                  {0,\"2\u2665 7\u2665 7\u2666 7\u2663 7\u2660\"},<br/>                  {0,\"10\u2665 j\u2665 q\u2665 k\u2665 a\u2665\"},<br/>                  {0,\"4\u2665 4\u2660 k\u2660 5\u2666 10\u2660\"},<br/>                  {0,\"q\u2663 10\u2663 7\u2663 6\u2663 4\u2663\"},<br/>                  {0,\"joker  2\u2666  2\u2660  k\u2660  q\u2666\"},<br/>                  {0,\"joker  5\u2665  7\u2666  8\u2660  9\u2666\"},<br/>                  {0,\"joker  2\u2666  3\u2660  4\u2660  5\u2660\"},<br/>                  {0,\"joker  3\u2665  2\u2666  3\u2660  3\u2666\"},<br/>                  {0,\"joker  7\u2665  2\u2666  3\u2660  3\u2666\"},<br/>                  {0,\"joker  7\u2665  7\u2666  7\u2660  7\u2663\"},<br/>                  {0,\"joker  j\u2665  q\u2665  k\u2665  A\u2665\"},<br/>                  {0,\"joker  4\u2663  k\u2663  5\u2666 10\u2660\"},<br/>                  {0,\"joker  k\u2663  7\u2663  6\u2663  4\u2663\"},<br/>                  {0,\"joker  2\u2666  joker  4\u2660  5\u2660\"},<br/>                  {0,\"joker  Q\u2666  joker  A\u2660 10\u2660\"},<br/>                  {0,\"joker  Q\u2666  joker  A\u2666 10\u2666\"},<br/>                  {0,\"joker  2\u2666  2\u2660  joker  q\u2666\"}}<br/>\u00a0<br/>for i=1 to length(hands) do<br/>    hands[i][1] = poker(hands[i][2])<br/>end for<br/>ppOpt({pp_Ascii,{#20,#FF}})<br/>pp(reverse(sort(hands)))</pre>"}, {"lang": "PicoLisp", "loc": 36, "block": "<pre class=\"text highlighted_source\">(setq *Rank<br/>   '((\"2\" . 0) (\"3\" . 1) (\"4\" . 2)<br/>      (\"5\" . 3) (\"6\" . 4) (\"7\" . 5)<br/>      (\"8\" . 6) (\"9\" . 7) (\"t\" . 8)<br/>      (\"j\" . 9) (\"q\" . 10) (\"k\" . 11)<br/>      (\"a\" . 12) ) )<br/>(de poker (Str)<br/>   (let (S NIL  R NIL  Seq NIL)<br/>      (for (L (chop Str) (cdr L) (cdddr L))<br/>         (accu 'R (cdr (assoc (car L) *Rank)) 1)<br/>         (accu 'S (cadr L) 1) )<br/>      (setq Seq<br/>         (make<br/>            (for (L (by car sort R) (cdr L) (cdr L))<br/>               (link (- (caar L) (caadr L))) ) ) )<br/>      (cond<br/>         ((and<br/>            (= 5 (cdar S))<br/>            (or<br/>               (= (-1 -1 -1 -1) Seq)<br/>               (= (-1 -1 -1 -9) Seq) ) )<br/>            'straight-flush )<br/>         ((rassoc 4 R) 'four-of-a-kind)<br/>         ((and (rassoc 2 R) (rassoc 3 R)) 'full-house)<br/>         ((= 5 (cdar S)) 'flush)<br/>         ((or<br/>            (= (-1 -1 -1 -1) Seq)<br/>            (= (-1 -1 -1 -9) Seq) )<br/>            'straight )<br/>         ((rassoc 3 R) 'three-of-a-kind)<br/>         ((=<br/>            2<br/>            (cnt '((L) (= 2 (cdr L))) R) )<br/>            'two-pair )<br/>         ((rassoc 2 R) 'pair)<br/>         (T 'high-card) ) ) )</pre>"}, {"lang": "Prolog", "loc": 71, "block": "<pre class=\"python highlighted_source\">:- initialization<span class=\"br0\">(</span>main<span class=\"br0\">)</span>.<br/>\u00a0<br/>\u00a0<br/><span class=\"me1\">faces</span><span class=\"br0\">(</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span>k<span class=\"sy0\">,</span>q<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<br/>\u00a0<br/><span class=\"me1\">face</span><span class=\"br0\">(</span>F<span class=\"br0\">)</span>\u00a0:- faces<span class=\"br0\">(</span>Fs<span class=\"br0\">)</span><span class=\"sy0\">,</span> member<span class=\"br0\">(</span>F<span class=\"sy0\">,</span>Fs<span class=\"br0\">)</span>.<br/><span class=\"me1\">suit</span><span class=\"br0\">(</span>S<span class=\"br0\">)</span>\u00a0:- member<span class=\"br0\">(</span>S<span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">'\u2665'</span><span class=\"sy0\">,</span><span class=\"st0\">'\u2666'</span><span class=\"sy0\">,</span><span class=\"st0\">'\u2663'</span><span class=\"sy0\">,</span><span class=\"st0\">'\u2660'</span><span class=\"br0\">]</span><span class=\"br0\">)</span>.<br/>\u00a0<br/>\u00a0<br/><span class=\"me1\">best_hand</span><span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>H<span class=\"br0\">)</span>\u00a0:-<br/>    straight_flush<span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>C<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> H <span class=\"sy0\">=</span> straight-flush<span class=\"br0\">(</span>C<span class=\"br0\">)</span><br/>  <span class=\"sy0\">;</span> many_kind<span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>F<span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>    -<span class=\"sy0\">&gt;</span> H <span class=\"sy0\">=</span> four-of-a-kind<span class=\"br0\">(</span>F<span class=\"br0\">)</span><br/>  <span class=\"sy0\">;</span> full_house<span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>F1<span class=\"sy0\">,</span>F2<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> H <span class=\"sy0\">=</span> full-house<span class=\"br0\">(</span>F1<span class=\"sy0\">,</span>F2<span class=\"br0\">)</span><br/>  <span class=\"sy0\">;</span> flush<span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>S<span class=\"br0\">)</span>          -<span class=\"sy0\">&gt;</span> H <span class=\"sy0\">=</span> flush<span class=\"br0\">(</span>S<span class=\"br0\">)</span><br/>  <span class=\"sy0\">;</span> straight<span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>F<span class=\"br0\">)</span>       -<span class=\"sy0\">&gt;</span> H <span class=\"sy0\">=</span> straight<span class=\"br0\">(</span>F<span class=\"br0\">)</span><br/>  <span class=\"sy0\">;</span> many_kind<span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>F<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>    -<span class=\"sy0\">&gt;</span> H <span class=\"sy0\">=</span> three-of-a-kind<span class=\"br0\">(</span>F<span class=\"br0\">)</span><br/>  <span class=\"sy0\">;</span> two_pair<span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>F1<span class=\"sy0\">,</span>F2<span class=\"br0\">)</span>   -<span class=\"sy0\">&gt;</span> H <span class=\"sy0\">=</span> two-pair<span class=\"br0\">(</span>F1<span class=\"sy0\">,</span>F2<span class=\"br0\">)</span><br/>  <span class=\"sy0\">;</span> many_kind<span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>F<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>    -<span class=\"sy0\">&gt;</span> H <span class=\"sy0\">=</span> one-pair<span class=\"br0\">(</span>F<span class=\"br0\">)</span><br/>  <span class=\"sy0\">;</span> many_kind<span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>F<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>    -<span class=\"sy0\">&gt;</span> H <span class=\"sy0\">=</span> high-card<span class=\"br0\">(</span>F<span class=\"br0\">)</span><br/>  <span class=\"sy0\">;</span>                            H <span class=\"sy0\">=</span> invalid<br/>  .<br/>\u00a0<br/><span class=\"me1\">straight_flush</span><span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span> c<span class=\"br0\">(</span>F<span class=\"sy0\">,</span>S<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0:- straight<span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>F<span class=\"br0\">)</span><span class=\"sy0\">,</span> flush<span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>S<span class=\"br0\">)</span>.<br/>\u00a0<br/><span class=\"me1\">full_house</span><span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>F1<span class=\"sy0\">,</span>F2<span class=\"br0\">)</span>\u00a0:-<br/>    many_kind<span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>F1<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> many_kind<span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>F2<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> F1 \\<span class=\"sy0\">=</span> F2.<br/>\u00a0<br/><span class=\"me1\">flush</span><span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>S<span class=\"br0\">)</span>\u00a0:- maplist<span class=\"br0\">(</span>has_suit<span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"sy0\">,</span> Cards<span class=\"br0\">)</span>.<br/><span class=\"me1\">has_suit</span><span class=\"br0\">(</span>S<span class=\"sy0\">,</span> c<span class=\"br0\">(</span>_<span class=\"sy0\">,</span>S<span class=\"br0\">)</span><span class=\"br0\">)</span>.<br/>\u00a0<br/><span class=\"me1\">straight</span><span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>F<span class=\"br0\">)</span>\u00a0:-<br/>    <span class=\"kw3\">select</span><span class=\"br0\">(</span>c<span class=\"br0\">(</span>F<span class=\"sy0\">,</span>_<span class=\"br0\">)</span><span class=\"sy0\">,</span> Cards<span class=\"sy0\">,</span> Cs<span class=\"br0\">)</span><span class=\"sy0\">,</span> pred_face<span class=\"br0\">(</span>F<span class=\"sy0\">,</span>F1<span class=\"br0\">)</span><span class=\"sy0\">,</span> straight<span class=\"br0\">(</span>Cs<span class=\"sy0\">,</span>F1<span class=\"br0\">)</span>.<br/><span class=\"me1\">straight</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>_<span class=\"br0\">)</span>.<br/><span class=\"me1\">pred_face</span><span class=\"br0\">(</span>F<span class=\"sy0\">,</span>F1<span class=\"br0\">)</span>\u00a0:- F <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> -<span class=\"sy0\">&gt;</span> F1 <span class=\"sy0\">=</span> a <span class=\"sy0\">;</span> faces<span class=\"br0\">(</span>Fs<span class=\"br0\">)</span><span class=\"sy0\">,</span> append<span class=\"br0\">(</span>_<span class=\"sy0\">,</span> <span class=\"br0\">[</span>F<span class=\"sy0\">,</span>F1|_<span class=\"br0\">]</span><span class=\"sy0\">,</span> Fs<span class=\"br0\">)</span>.<br/>\u00a0<br/><span class=\"me1\">two_pair</span><span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>F1<span class=\"sy0\">,</span>F2<span class=\"br0\">)</span>\u00a0:-<br/>    many_kind<span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>F1<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> many_kind<span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>F2<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> F1 \\<span class=\"sy0\">=</span> F2.<br/>\u00a0<br/><span class=\"me1\">many_kind</span><span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>F<span class=\"sy0\">,</span>N<span class=\"br0\">)</span>\u00a0:-<br/>    face<span class=\"br0\">(</span>F<span class=\"br0\">)</span><span class=\"sy0\">,</span> findall<span class=\"br0\">(</span>_<span class=\"sy0\">,</span> member<span class=\"br0\">(</span>c<span class=\"br0\">(</span>F<span class=\"sy0\">,</span>_<span class=\"br0\">)</span><span class=\"sy0\">,</span> Cards<span class=\"br0\">)</span><span class=\"sy0\">,</span> Xs<span class=\"br0\">)</span><span class=\"sy0\">,</span> length<span class=\"br0\">(</span>Xs<span class=\"sy0\">,</span>N<span class=\"br0\">)</span>.<br/>\u00a0<br/>\u00a0<br/>% utils/<span class=\"kw3\">parser</span><br/>parse_line<span class=\"br0\">(</span>Cards<span class=\"br0\">)</span>  --<span class=\"sy0\">&gt;</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> parse_line<span class=\"br0\">(</span>Cards<span class=\"br0\">)</span>.<br/><span class=\"me1\">parse_line</span><span class=\"br0\">(</span><span class=\"br0\">[</span>C|Cs<span class=\"br0\">]</span><span class=\"br0\">)</span> --<span class=\"sy0\">&gt;</span> parse_card<span class=\"br0\">(</span>C<span class=\"br0\">)</span><span class=\"sy0\">,</span> parse_line<span class=\"br0\">(</span>Cs<span class=\"br0\">)</span>.<br/><span class=\"me1\">parse_line</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span>     --<span class=\"sy0\">&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span>.<br/>\u00a0<br/><span class=\"me1\">parse_card</span><span class=\"br0\">(</span>c<span class=\"br0\">(</span>F<span class=\"sy0\">,</span>S<span class=\"br0\">)</span><span class=\"br0\">)</span> --<span class=\"sy0\">&gt;</span> parse_face<span class=\"br0\">(</span>F<span class=\"br0\">)</span><span class=\"sy0\">,</span> parse_suit<span class=\"br0\">(</span>S<span class=\"br0\">)</span>.<br/>\u00a0<br/><span class=\"me1\">parse_suit</span><span class=\"br0\">(</span>S<span class=\"sy0\">,</span>In<span class=\"sy0\">,</span>Out<span class=\"br0\">)</span>\u00a0:- suit<span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"sy0\">,</span> atom_codes<span class=\"br0\">(</span>S<span class=\"sy0\">,</span>Xs<span class=\"br0\">)</span><span class=\"sy0\">,</span> append<span class=\"br0\">(</span>Xs<span class=\"sy0\">,</span>Out<span class=\"sy0\">,</span>In<span class=\"br0\">)</span>.<br/><span class=\"me1\">parse_face</span><span class=\"br0\">(</span>F<span class=\"sy0\">,</span>In<span class=\"sy0\">,</span>Out<span class=\"br0\">)</span>\u00a0:- face<span class=\"br0\">(</span>F<span class=\"br0\">)</span><span class=\"sy0\">,</span> face_codes<span class=\"br0\">(</span>F<span class=\"sy0\">,</span>Xs<span class=\"br0\">)</span><span class=\"sy0\">,</span> append<span class=\"br0\">(</span>Xs<span class=\"sy0\">,</span>Out<span class=\"sy0\">,</span>In<span class=\"br0\">)</span>.<br/>\u00a0<br/><span class=\"me1\">face_codes</span><span class=\"br0\">(</span>F<span class=\"sy0\">,</span>Xs<span class=\"br0\">)</span>\u00a0:- number<span class=\"br0\">(</span>F<span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> number_codes<span class=\"br0\">(</span>F<span class=\"sy0\">,</span>Xs<span class=\"br0\">)</span> <span class=\"sy0\">;</span> atom_codes<span class=\"br0\">(</span>F<span class=\"sy0\">,</span>Xs<span class=\"br0\">)</span>.<br/>\u00a0<br/>\u00a0<br/>% tests<br/><span class=\"kw3\">test</span><span class=\"br0\">(</span><span class=\"st0\">\" 2\u2665  2\u2666 2\u2663 k\u2663  q\u2666\"</span><span class=\"br0\">)</span>.<br/><span class=\"kw3\">test</span><span class=\"br0\">(</span><span class=\"st0\">\" 2\u2665  5\u2665 7\u2666 8\u2663  9\u2660\"</span><span class=\"br0\">)</span>.<br/><span class=\"kw3\">test</span><span class=\"br0\">(</span><span class=\"st0\">\" a\u2665  2\u2666 3\u2663 4\u2663  5\u2666\"</span><span class=\"br0\">)</span>.<br/><span class=\"kw3\">test</span><span class=\"br0\">(</span><span class=\"st0\">\" 2\u2665  3\u2665 2\u2666 3\u2663  3\u2666\"</span><span class=\"br0\">)</span>.<br/><span class=\"kw3\">test</span><span class=\"br0\">(</span><span class=\"st0\">\" 2\u2665  7\u2665 2\u2666 3\u2663  3\u2666\"</span><span class=\"br0\">)</span>.<br/><span class=\"kw3\">test</span><span class=\"br0\">(</span><span class=\"st0\">\" 2\u2665  7\u2665 7\u2666 7\u2663  7\u2660\"</span><span class=\"br0\">)</span>.<br/><span class=\"kw3\">test</span><span class=\"br0\">(</span><span class=\"st0\">\"10\u2665  j\u2665 q\u2665 k\u2665  a\u2665\"</span><span class=\"br0\">)</span>.<br/><span class=\"kw3\">test</span><span class=\"br0\">(</span><span class=\"st0\">\" 4\u2665  4\u2660 k\u2660 5\u2666 10\u2660\"</span><span class=\"br0\">)</span>.<br/><span class=\"kw3\">test</span><span class=\"br0\">(</span><span class=\"st0\">\" q\u2663 10\u2663 7\u2663 6\u2663  4\u2663\"</span><span class=\"br0\">)</span>.<br/>\u00a0<br/><span class=\"me1\">run_tests</span>\u00a0:-<br/>    <span class=\"kw3\">test</span><span class=\"br0\">(</span>Line<span class=\"br0\">)</span><span class=\"sy0\">,</span> phrase<span class=\"br0\">(</span>parse_line<span class=\"br0\">(</span>Cards<span class=\"br0\">)</span><span class=\"sy0\">,</span> Line<span class=\"br0\">)</span><span class=\"sy0\">,</span> best_hand<span class=\"br0\">(</span>Cards<span class=\"sy0\">,</span>H<span class=\"br0\">)</span><br/>  <span class=\"sy0\">,</span> write<span class=\"br0\">(</span>Cards<span class=\"br0\">)</span><span class=\"sy0\">,</span> write<span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\t</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> write<span class=\"br0\">(</span>H<span class=\"br0\">)</span><span class=\"sy0\">,</span> nl<br/>  .<br/><span class=\"me1\">main</span>\u00a0:- findall<span class=\"br0\">(</span>_<span class=\"sy0\">,</span> run_tests<span class=\"sy0\">,</span> _<span class=\"br0\">)</span><span class=\"sy0\">,</span> halt.</pre>"}, {"lang": "Python", "loc": 150, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">collections</span> <span class=\"kw1\">import</span> namedtuple<br/>\u00a0<br/><span class=\"kw1\">class</span> Card<span class=\"br0\">(</span>namedtuple<span class=\"br0\">(</span><span class=\"st0\">'Card'</span><span class=\"sy0\">,</span> <span class=\"st0\">'face, suit'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">def</span> <span class=\"kw4\">__repr__</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"st0\">''</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">self</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>suit <span class=\"sy0\">=</span> <span class=\"st0\">'\u2665 \u2666 \u2663 \u2660'</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"co1\"># ordered strings of faces</span><br/>faces   <span class=\"sy0\">=</span> <span class=\"st0\">'2 3 4 5 6 7 8 9 10 j q k a'</span><br/>lowaces <span class=\"sy0\">=</span> <span class=\"st0\">'a 2 3 4 5 6 7 8 9 10 j q k'</span><br/><span class=\"co1\"># faces as lists</span><br/>face   <span class=\"sy0\">=</span> faces.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>lowace <span class=\"sy0\">=</span> lowaces.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">def</span> straightflush<span class=\"br0\">(</span>hand<span class=\"br0\">)</span>:<br/>    f<span class=\"sy0\">,</span>fs <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>lowace<span class=\"sy0\">,</span> lowaces<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"kw2\">any</span><span class=\"br0\">(</span>card.<span class=\"me1\">face</span> <span class=\"sy0\">==</span> <span class=\"st0\">'2'</span> <span class=\"kw1\">for</span> card <span class=\"kw1\">in</span> hand<span class=\"br0\">)</span><br/>             <span class=\"kw1\">else</span> <span class=\"br0\">(</span>face<span class=\"sy0\">,</span> faces<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    ordered <span class=\"sy0\">=</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>hand<span class=\"sy0\">,</span> key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> card: <span class=\"br0\">(</span>f.<span class=\"me1\">index</span><span class=\"br0\">(</span>card.<span class=\"me1\">face</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> card.<span class=\"me1\">suit</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    first<span class=\"sy0\">,</span> rest <span class=\"sy0\">=</span> ordered<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> ordered<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw2\">all</span><span class=\"br0\">(</span>card.<span class=\"me1\">suit</span> <span class=\"sy0\">==</span> first.<span class=\"me1\">suit</span> <span class=\"kw1\">for</span> card <span class=\"kw1\">in</span> rest<span class=\"br0\">)</span> <span class=\"kw1\">and</span><br/>         <span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>card.<span class=\"me1\">face</span> <span class=\"kw1\">for</span> card <span class=\"kw1\">in</span> ordered<span class=\"br0\">)</span> <span class=\"kw1\">in</span> fs <span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"st0\">'straight-flush'</span><span class=\"sy0\">,</span> ordered<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">face</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>\u00a0<br/><span class=\"kw1\">def</span> fourofakind<span class=\"br0\">(</span>hand<span class=\"br0\">)</span>:<br/>    allfaces <span class=\"sy0\">=</span> <span class=\"br0\">[</span>f <span class=\"kw1\">for</span> f<span class=\"sy0\">,</span>s <span class=\"kw1\">in</span> hand<span class=\"br0\">]</span><br/>    allftypes <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span>allfaces<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>allftypes<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">2</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> allftypes:<br/>        <span class=\"kw1\">if</span> allfaces.<span class=\"me1\">count</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">4</span>:<br/>            allftypes.<span class=\"me1\">remove</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">'four-of-a-kind'</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>f<span class=\"sy0\">,</span> allftypes.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">else</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>\u00a0<br/><span class=\"kw1\">def</span> fullhouse<span class=\"br0\">(</span>hand<span class=\"br0\">)</span>:<br/>    allfaces <span class=\"sy0\">=</span> <span class=\"br0\">[</span>f <span class=\"kw1\">for</span> f<span class=\"sy0\">,</span>s <span class=\"kw1\">in</span> hand<span class=\"br0\">]</span><br/>    allftypes <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span>allfaces<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>allftypes<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">2</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> allftypes:<br/>        <span class=\"kw1\">if</span> allfaces.<span class=\"me1\">count</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span>:<br/>            allftypes.<span class=\"me1\">remove</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"st0\">'full-house'</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>f<span class=\"sy0\">,</span> allftypes.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">else</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>\u00a0<br/><span class=\"kw1\">def</span> flush<span class=\"br0\">(</span>hand<span class=\"br0\">)</span>:<br/>    allstypes <span class=\"sy0\">=</span> <span class=\"br0\">{</span>s <span class=\"kw1\">for</span> f<span class=\"sy0\">,</span> s <span class=\"kw1\">in</span> hand<span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>allstypes<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>:<br/>        allfaces <span class=\"sy0\">=</span> <span class=\"br0\">[</span>f <span class=\"kw1\">for</span> f<span class=\"sy0\">,</span>s <span class=\"kw1\">in</span> hand<span class=\"br0\">]</span><br/>        <span class=\"kw1\">return</span> <span class=\"st0\">'flush'</span><span class=\"sy0\">,</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>allfaces<span class=\"sy0\">,</span><br/>                               key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> f: face.<span class=\"me1\">index</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                               reverse<span class=\"sy0\">=</span><span class=\"kw2\">True</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>\u00a0<br/><span class=\"kw1\">def</span> straight<span class=\"br0\">(</span>hand<span class=\"br0\">)</span>:<br/>    f<span class=\"sy0\">,</span>fs <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>lowace<span class=\"sy0\">,</span> lowaces<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"kw2\">any</span><span class=\"br0\">(</span>card.<span class=\"me1\">face</span> <span class=\"sy0\">==</span> <span class=\"st0\">'2'</span> <span class=\"kw1\">for</span> card <span class=\"kw1\">in</span> hand<span class=\"br0\">)</span><br/>             <span class=\"kw1\">else</span> <span class=\"br0\">(</span>face<span class=\"sy0\">,</span> faces<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    ordered <span class=\"sy0\">=</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>hand<span class=\"sy0\">,</span> key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> card: <span class=\"br0\">(</span>f.<span class=\"me1\">index</span><span class=\"br0\">(</span>card.<span class=\"me1\">face</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> card.<span class=\"me1\">suit</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    first<span class=\"sy0\">,</span> rest <span class=\"sy0\">=</span> ordered<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> ordered<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>card.<span class=\"me1\">face</span> <span class=\"kw1\">for</span> card <span class=\"kw1\">in</span> ordered<span class=\"br0\">)</span> <span class=\"kw1\">in</span> fs:<br/>        <span class=\"kw1\">return</span> <span class=\"st0\">'straight'</span><span class=\"sy0\">,</span> ordered<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">face</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>\u00a0<br/><span class=\"kw1\">def</span> threeofakind<span class=\"br0\">(</span>hand<span class=\"br0\">)</span>:<br/>    allfaces <span class=\"sy0\">=</span> <span class=\"br0\">[</span>f <span class=\"kw1\">for</span> f<span class=\"sy0\">,</span>s <span class=\"kw1\">in</span> hand<span class=\"br0\">]</span><br/>    allftypes <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span>allfaces<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>allftypes<span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">2</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> allftypes:<br/>        <span class=\"kw1\">if</span> allfaces.<span class=\"me1\">count</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">3</span>:<br/>            allftypes.<span class=\"me1\">remove</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"st0\">'three-of-a-kind'</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>f<span class=\"br0\">]</span> +<br/>                     <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>allftypes<span class=\"sy0\">,</span><br/>                            key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> f: face.<span class=\"me1\">index</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                            reverse<span class=\"sy0\">=</span><span class=\"kw2\">True</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>\u00a0<br/><span class=\"kw1\">def</span> twopair<span class=\"br0\">(</span>hand<span class=\"br0\">)</span>:<br/>    allfaces <span class=\"sy0\">=</span> <span class=\"br0\">[</span>f <span class=\"kw1\">for</span> f<span class=\"sy0\">,</span>s <span class=\"kw1\">in</span> hand<span class=\"br0\">]</span><br/>    allftypes <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span>allfaces<span class=\"br0\">)</span><br/>    pairs <span class=\"sy0\">=</span> <span class=\"br0\">[</span>f <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> allftypes <span class=\"kw1\">if</span> allfaces.<span class=\"me1\">count</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>pairs<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">2</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    p0<span class=\"sy0\">,</span> p1 <span class=\"sy0\">=</span> pairs<br/>    other <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>allftypes - <span class=\"kw2\">set</span><span class=\"br0\">(</span>pairs<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">'two-pair'</span><span class=\"sy0\">,</span> pairs + other <span class=\"kw1\">if</span> face.<span class=\"me1\">index</span><span class=\"br0\">(</span>p0<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> face.<span class=\"me1\">index</span><span class=\"br0\">(</span>p1<span class=\"br0\">)</span> <span class=\"kw1\">else</span> pairs<span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span> + other<br/>\u00a0<br/><span class=\"kw1\">def</span> onepair<span class=\"br0\">(</span>hand<span class=\"br0\">)</span>:<br/>    allfaces <span class=\"sy0\">=</span> <span class=\"br0\">[</span>f <span class=\"kw1\">for</span> f<span class=\"sy0\">,</span>s <span class=\"kw1\">in</span> hand<span class=\"br0\">]</span><br/>    allftypes <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span>allfaces<span class=\"br0\">)</span><br/>    pairs <span class=\"sy0\">=</span> <span class=\"br0\">[</span>f <span class=\"kw1\">for</span> f <span class=\"kw1\">in</span> allftypes <span class=\"kw1\">if</span> allfaces.<span class=\"me1\">count</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>pairs<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">1</span>:<br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">False</span><br/>    allftypes.<span class=\"me1\">remove</span><span class=\"br0\">(</span>pairs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">'one-pair'</span><span class=\"sy0\">,</span> pairs + <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>allftypes<span class=\"sy0\">,</span><br/>                                      key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> f: face.<span class=\"me1\">index</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                                      reverse<span class=\"sy0\">=</span><span class=\"kw2\">True</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> highcard<span class=\"br0\">(</span>hand<span class=\"br0\">)</span>:<br/>    allfaces <span class=\"sy0\">=</span> <span class=\"br0\">[</span>f <span class=\"kw1\">for</span> f<span class=\"sy0\">,</span>s <span class=\"kw1\">in</span> hand<span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> <span class=\"st0\">'high-card'</span><span class=\"sy0\">,</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>allfaces<span class=\"sy0\">,</span><br/>                               key<span class=\"sy0\">=</span><span class=\"kw1\">lambda</span> f: face.<span class=\"me1\">index</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                               reverse<span class=\"sy0\">=</span><span class=\"kw2\">True</span><span class=\"br0\">)</span><br/>\u00a0<br/>handrankorder <span class=\"sy0\">=</span>  <span class=\"br0\">(</span>straightflush<span class=\"sy0\">,</span> fourofakind<span class=\"sy0\">,</span> fullhouse<span class=\"sy0\">,</span><br/>                  flush<span class=\"sy0\">,</span> straight<span class=\"sy0\">,</span> threeofakind<span class=\"sy0\">,</span><br/>                  twopair<span class=\"sy0\">,</span> onepair<span class=\"sy0\">,</span> highcard<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> rank<span class=\"br0\">(</span>cards<span class=\"br0\">)</span>:<br/>    hand <span class=\"sy0\">=</span> handy<span class=\"br0\">(</span>cards<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> ranker <span class=\"kw1\">in</span> handrankorder:<br/>        rank <span class=\"sy0\">=</span> ranker<span class=\"br0\">(</span>hand<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> rank:<br/>            <span class=\"kw1\">break</span><br/>    <span class=\"kw1\">assert</span> rank<span class=\"sy0\">,</span> <span class=\"st0\">\"Invalid: Failed to rank cards:\u00a0%r\"</span>\u00a0% cards<br/>    <span class=\"kw1\">return</span> rank<br/>\u00a0<br/><span class=\"kw1\">def</span> handy<span class=\"br0\">(</span>cards<span class=\"sy0\">=</span><span class=\"st0\">'2\u2665 2\u2666 2\u2663 k\u2663 q\u2666'</span><span class=\"br0\">)</span>:<br/>    hand <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> card <span class=\"kw1\">in</span> cards.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"br0\">)</span>:<br/>        f<span class=\"sy0\">,</span> s <span class=\"sy0\">=</span> card<span class=\"br0\">[</span>:-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> card<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">assert</span> f <span class=\"kw1\">in</span> face<span class=\"sy0\">,</span> <span class=\"st0\">\"Invalid: Don't understand card face\u00a0%r\"</span>\u00a0% f<br/>        <span class=\"kw1\">assert</span> s <span class=\"kw1\">in</span> suit<span class=\"sy0\">,</span> <span class=\"st0\">\"Invalid: Don't understand card suit\u00a0%r\"</span>\u00a0% s<br/>        hand.<span class=\"me1\">append</span><span class=\"br0\">(</span>Card<span class=\"br0\">(</span>f<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">assert</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>hand<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Invalid: Must be 5 cards in a hand, not\u00a0%i\"</span>\u00a0% <span class=\"kw2\">len</span><span class=\"br0\">(</span>hand<span class=\"br0\">)</span><br/>    <span class=\"kw1\">assert</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"kw2\">set</span><span class=\"br0\">(</span>hand<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Invalid: All cards in the hand must be unique\u00a0%r\"</span>\u00a0% cards<br/>    <span class=\"kw1\">return</span> hand<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    hands <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"2\u2665 2\u2666 2\u2663 k\u2663 q\u2666\"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\"2\u2665 5\u2665 7\u2666 8\u2663 9\u2660\"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\"a\u2665 2\u2666 3\u2663 4\u2663 5\u2666\"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\"2\u2665 3\u2665 2\u2666 3\u2663 3\u2666\"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\"2\u2665 7\u2665 2\u2666 3\u2663 3\u2666\"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\"2\u2665 7\u2665 7\u2666 7\u2663 7\u2660\"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\"10\u2665 j\u2665 q\u2665 k\u2665 a\u2665\"</span><span class=\"br0\">]</span> + <span class=\"br0\">[</span><br/>     <span class=\"st0\">\"4\u2665 4\u2660 k\u2660 5\u2666 10\u2660\"</span><span class=\"sy0\">,</span><br/>     <span class=\"st0\">\"q\u2663 10\u2663 7\u2663 6\u2663 4\u2663\"</span><span class=\"sy0\">,</span><br/>     <span class=\"br0\">]</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"%-18s\u00a0%-15s\u00a0%s\"</span>\u00a0% <span class=\"br0\">(</span><span class=\"st0\">\"HAND\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"CATEGORY\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"TIE-BREAKER\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> cards <span class=\"kw1\">in</span> hands:<br/>        r <span class=\"sy0\">=</span> rank<span class=\"br0\">(</span>cards<span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"%-18r\u00a0%-15s\u00a0%r\"</span>\u00a0% <span class=\"br0\">(</span>cards<span class=\"sy0\">,</span> r<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> r<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Racket", "loc": 165, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require (only-in srfi/1 car+cdr))<br/>\u00a0<br/>;;; --------------------------------------------------------------------------------------------------<br/>;;; The analyser is first... the rest of it is prettiness surrounding strings and parsing!<br/>;;; --------------------------------------------------------------------------------------------------<br/>;; (cons f _) and (cons _ s) appear too frequently in patterns to not factor out<br/>(define-match-expander F._ (\u03bb (stx) (syntax-case stx () [(_ f) #'(cons f _)])))<br/>(define-match-expander _.S (\u03bb (stx) (syntax-case stx () [(_ s) #'(cons _ s)])))<br/>\u00a0<br/>;; Matches are easier when the cards are lined up by face: and I always put the cards in my hand with<br/>;; the highest card on the left (should I be telling this?)... anyway face&lt;? is written to leave high<br/>;; cards on the left. There is no need to sort by suit, flushes are all-or-nothing<br/>(define (face-sort hand)<br/>  (sort hand (match-lambda** [(_ 'joker) #f] [('joker _) #t] [((F._ f1) (F._ f2)) (&gt; f1 f2)])))<br/>\u00a0<br/>;; even playing poker for money, I never managed to consistently determine what effect jokers were<br/>;; having on my hand... so I'll do an exhaustive search of what's best!<br/>;;<br/>;; scoring hands allows us to choose a best value for joker(s)<br/>;; hand-names provides an order (and therefore a score) for each of the available hands<br/>(define hand-names (list 'five-of-a-kind 'straight-flush 'four-of-a-kind 'full-house 'flush 'straight<br/>                         'three-of-a-kind 'two-pair 'one-pair 'high-card))<br/>\u00a0<br/>(define hand-order# (for/hash ((h hand-names) (i (in-range (add1 (length hand-names)) 0 -1)))<br/>                      (values h i)))<br/>;; The score of a hand is (its order*15^5)+(first tiebreaker*15^4)+(2nd tiebreaker*15^3)...<br/>;; powers of 15 because we have a maxmium face value of 14 (ace) -- even though there are 13 cards<br/>;; in a suit.<br/>(define (calculate-score analysis)<br/>  (define-values (hand-name tiebreakers) (car+cdr analysis))<br/>  (for/sum ((n (in-naturals)) (tb (cons (hash-ref hand-order# hand-name -1) tiebreakers)))<br/>    (* tb (expt 15 (- 5 n)))))<br/>\u00a0<br/>;; score hand produces an analysis of a hand (which can then be returned to analyse-sorted-hand,<br/>;; and a score that can be maximised by choosing the right jokers.<br/>(define (score-hand hand . jokers)\u00a0; gives an orderable list of hands with tiebreakers<br/>  (define analysis (analyse-sorted-hand (face-sort (append jokers hand))))<br/>  (cons analysis (calculate-score analysis)))<br/>\u00a0<br/>;; if we have two (or more) jokers, they will be consumed by the recursive call to<br/>;; analyse-sorted-hand score-hand<br/>(define all-cards/promise (delay (for*/list ((f (in-range 2 15)) (s '(h d s c))) (cons f s))))<br/>\u00a0<br/>(define (best-jokered-hand cards)\u00a0; we've lost the first joker from cards  <br/>  (define-values (best-hand _bhs)<br/>    (for*/fold ((best-hand #f) (best-score 0))<br/>      ((joker (in-list (force all-cards/promise)))<br/>       (score (in-value (score-hand cards joker)))<br/>       #:when (&gt; (cdr score) best-score))<br/>      (car+cdr score)))<br/>\u00a0<br/>  best-hand)<br/>\u00a0<br/>;; we can abbreviate 2/3/4/5-of-a-kind 2-pair full-house with 2 and 3<br/>(define-match-expander F*2 (\u03bb (stx) (syntax-case stx () [(_ f) #'(list (F._ f) (F._ f))])))<br/>(define-match-expander F*3 (\u03bb (stx) (syntax-case stx () [(_ f) #'(list (F._ f) (F._ f) (F._ f))])))<br/>\u00a0<br/>;; note that flush? is cheaper to calculate than straight?, so do it first when we test for<br/>;; straight-flush<br/>(define flush?<br/>  (match-lambda [(and `(,(_.S s) ,(_.S s) ,(_.S s) ,(_.S s) ,(_.S s)) `(,(F._ fs) ...)) `(flush ,@fs)]<br/>                [_ #f]))<br/>\u00a0<br/>(define straight?<br/>  (match-lambda<br/>   \u00a0;; '(straight 5) puts this at the bottom of the pile w.r.t the ordering of straights<br/>    [`(,(F._ 14) ,(F._ 5) ,(F._ 4) ,(F._ 3) ,(F._ 2))                                   '(straight 5)]<br/>    [`(,(F._ f5) ,(F._ f4) ,(F._ f3) ,(F._ f2) ,(F._ f1))<br/>     (and (= f1 (- f5 4)) (&lt; f1 f2 f3 f4 f5)                                       `(straight ,f5))]))<br/>\u00a0<br/>(define analyse-sorted-hand<br/>  (match-lambda<br/>    [(list 'joker cards ...)                                                (best-jokered-hand cards)]<br/>    [`(,@(F*3 f) ,@(F*2 f))                                                      `(five-of-a-kind ,f)]<br/>   \u00a0;; get \"top\" from the straight. a the top card of the flush when there is a (straight 5) will<br/>   \u00a0;; be the ace ... putting it in the wrong place for the ordering.<br/>    [(and (? flush?) (app straight? (list 'straight top _ ...)))               `(straight-flush ,top)]<br/>    [(or `(,@(F*2 f) ,@(F*2 f) ,_) `(,_ ,@(F*2 f) ,@(F*2 f)))                    `(four-of-a-kind ,f)]<br/>    [(or `(,@(F*3 fh) ,@(F*2 fl)) `(,@(F*2 fh) ,@(F*3 fl)))                     `(full-house ,fh, fl)]<br/>    [(app flush? (and rv (list 'flush _ ...)))                                                     rv]<br/>    [(app straight? (and rv (list 'straight _ ...)))                                               rv]<br/>   \u00a0;; pairs and threes may be padded to the left, middle and right with tie-breakers; the lists of<br/>   \u00a0;; which we will call l, m and r, respectively (four and 5-of-a-kind don't need tiebreaking,<br/>   \u00a0;; they're well hard!)<br/>    [`(,(F._ l) ... ,@(F*3 f) ,(F._ r) ...)                             `(three-of-a-kind ,f ,@l ,@r)]<br/>    [`(,(F._ l) ... ,@(F*2 f1) ,(F._ m) ... ,@(F*2 f2) ,(F._ r) ...)  `(two-pair ,f1 ,f2 ,@l ,@m ,@r)]<br/>    [`(,(F._ l) ... ,@(F*2 f) ,(F._ r) ...)                                    `(one-pair ,f ,@l ,@r)]<br/>    [`(,(F._ f) ...)                                                                 `(high-card ,@f)]<br/>    [hand                                                                (error 'invalid-hand hand)]))<br/>\u00a0<br/>(define (analyse-hand/string hand-string)<br/>  (analyse-sorted-hand (face-sort (string-&gt;hand hand-string))))<br/>\u00a0<br/>;;; --------------------------------------------------------------------------------------------------<br/>;;; Strings to cards, cards to strings -- that kind of thing<br/>;;; --------------------------------------------------------------------------------------------------<br/>(define suit-&gt;unicode (match-lambda ('h \"\u2665\") ('d \"\u2666\") ('c \"\u2663\") ('s \"\u2660\") (x x)))<br/>\u00a0<br/>(define unicode-&gt;suit (match-lambda (\"\u2665\" 'h) (\"\u2666\" 'd) (\"\u2663\" 'c) (\"\u2660\" 's) (x x)))<br/>\u00a0<br/>(define (face-&gt;number f)<br/>  (match (string-upcase f)<br/>    [\"T\" 10] [\"J\" 11] [\"Q\" 12] [\"K\" 13] [\"A\" 14] [(app string-&gt;number (? number? n)) n] [else 0]))<br/>\u00a0<br/>(define number-&gt;face (match-lambda (10 \"T\") (11 \"J\") (12 \"Q\") (13 \"K\") (14 \"A\") ((app ~s x) x)))<br/>\u00a0<br/>(define string-&gt;card<br/>  (match-lambda<br/>    (\"joker\" 'joker)<br/>    ((regexp #px\"^(.*)(.)$\" (list _ (app face-&gt;number num) (app unicode-&gt;suit suit)))<br/>     (cons num suit))))<br/>\u00a0<br/>(define (string-&gt;hand str)<br/>  (map string-&gt;card (regexp-split #rx\" +\" (string-trim str))))<br/>\u00a0<br/>(define card-&gt;string<br/>  (match-lambda ['joker \"[]\"]<br/>                [(cons (app number-&gt;face f) (app suit-&gt;unicode s)) (format \"~a~a\" f s)]))<br/>\u00a0<br/>(define (hand-&gt;string h)<br/>  (string-join (map card-&gt;string h) \" \"))<br/>\u00a0<br/>;; used for both testing and output<br/>(define e.g.-hands<br/>  (list \" 2\u2665  2\u2666 2\u2663 k\u2663  q\u2666\" \" 2\u2665  5\u2665 7\u2666 8\u2663  9\u2660\" \" a\u2665  2\u2666 3\u2663 4\u2663  5\u2666\" \"10\u2665  j\u2666 q\u2663 k\u2663  a\u2666\"<br/>        \" 2\u2665  3\u2665 2\u2666 3\u2663  3\u2666\" \" 2\u2665  7\u2665 2\u2666 3\u2663  3\u2666\" \" 2\u2665  7\u2665 7\u2666 7\u2663  7\u2660\" \"10\u2665  j\u2665 q\u2665 k\u2665  a\u2665\"<br/>        \" 4\u2665  4\u2660 k\u2660 5\u2666 10\u2660\" \" q\u2663 10\u2663 7\u2663 6\u2663  4\u2663\"<br/>\u00a0<br/>        \" joker  2\u2666  2\u2660  k\u2660  q\u2666\"     \"  joker  5\u2665  7\u2666  8\u2660  9\u2666\"    \"  joker  2\u2666  3\u2660  4\u2660  5\u2660\"<br/>        \"  joker  3\u2665  2\u2666  3\u2660  3\u2666\"    \"  joker  7\u2665  2\u2666  3\u2660  3\u2666\"    \"  joker  7\u2665  7\u2666  7\u2660  7\u2663\"<br/>        \"  joker  j\u2665  q\u2665  k\u2665  A\u2665\"    \"  joker  4\u2663  k\u2663  5\u2666 10\u2660\"    \"  joker  k\u2663  7\u2663  6\u2663  4\u2663\"<br/>        \"  joker  2\u2666  joker  4\u2660  5\u2660\" \"  joker  Q\u2666  joker  A\u2660 10\u2660\" \"  joker  Q\u2666  joker  A\u2666 10\u2666\"<br/>        \"  joker  2\u2666  2\u2660  joker  q\u2666\"))<br/>\u00a0<br/>;;; --------------------------------------------------------------------------------------------------<br/>;;; Main and test modules<br/>;;; --------------------------------------------------------------------------------------------------<br/>(module+ main<br/>  (define scored-hands<br/>    (for/list ((h (map string-&gt;hand e.g.-hands)))<br/>      (define-values (analysis score) (car+cdr (score-hand h)))<br/>      (list h analysis score)))<br/>\u00a0<br/>  (for ((a.s (sort scored-hands &gt; #:key third)))<br/>    (match-define (list (app hand-&gt;string h) a _) a.s)<br/>    (printf \"~a: ~a ~a\" h (~a (first a) #:min-width 15) (number-&gt;face (second a)))<br/>    (when (pair? (cddr a)) (printf \" [tiebreak: ~a]\" (string-join (map number-&gt;face (cddr a)) \", \")))<br/>    (newline)))<br/>\u00a0<br/>(module+ test<br/>  (require rackunit)  <br/>  (let ((e.g.-strght-flsh '((14 . h) (13 . h) (12 . h) (11 . h) (10 . h))))<br/>    (check-match (straight? e.g.-strght-flsh) '(straight 14))<br/>    (check-match (flush? e.g.-strght-flsh) '(flush 14 13 12 11 10))<br/>    (check-match e.g.-strght-flsh (and (? flush?) (app straight? (list 'straight top _ ...)))))<br/>\u00a0<br/>  (define expected-results<br/>    '((three-of-a-kind 2 13 12)<br/>      (high-card 9 8 7 5 2) (straight 5) (straight 14) (full-house 3 2) (two-pair 3 2 7)<br/>      (four-of-a-kind 7) (straight-flush 14) (one-pair 4 13 10 5) (flush 12 10 7 6 4)      <br/>      (three-of-a-kind 2 13 12) (straight 9) (straight 6) (four-of-a-kind 3) (three-of-a-kind 3 7 2)<br/>      (five-of-a-kind 7) (straight-flush 14) (one-pair 13 10 5 4) (flush 14 13 7 6 4) (straight 6)<br/>      (straight 14) (straight-flush 14) (four-of-a-kind 2)))<br/>  (for ((h e.g.-hands) (r expected-results)) (check-equal? (analyse-hand/string h) r)))</pre>"}, {"lang": "REXX", "loc": 98, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX ---------------------------------------------------------------<br/>* 10.12.2013 Walter Pachl<br/>*--------------------------------------------------------------------*/</span><br/>\u00a0<br/>d<span class=\"sy0\">.</span>1=<span class=\"st0\">'2h 2d 2s ks qd'</span>; x<span class=\"sy0\">.</span>1=<span class=\"st0\">'three-of-a-kind'</span><br/>d<span class=\"sy0\">.</span>2=<span class=\"st0\">'2h 5h 7d 8s 9d'</span>; x<span class=\"sy0\">.</span>2=<span class=\"st0\">'high-card'</span><br/>d<span class=\"sy0\">.</span>3=<span class=\"st0\">'ah 2d 3s 4s 5s'</span>; x<span class=\"sy0\">.</span>3=<span class=\"st0\">'straight'</span><br/>d<span class=\"sy0\">.</span>4=<span class=\"st0\">'2h 3h 2d 3s 3d'</span>; x<span class=\"sy0\">.</span>4=<span class=\"st0\">'full-house'</span><br/>d<span class=\"sy0\">.</span>5=<span class=\"st0\">'2h 7h 2d 3s 3d'</span>; x<span class=\"sy0\">.</span>5=<span class=\"st0\">'two-pair'</span><br/>d<span class=\"sy0\">.</span>6=<span class=\"st0\">'2h 7h 7d 7s 7c'</span>; x<span class=\"sy0\">.</span>6=<span class=\"st0\">'four-of-a-kind'</span><br/>d<span class=\"sy0\">.</span>7=<span class=\"st0\">'th jh qh kh ah'</span>; x<span class=\"sy0\">.</span>7=<span class=\"st0\">'straight-flush'</span><br/>d<span class=\"sy0\">.</span>8=<span class=\"st0\">'4h 4c kc 5d tc'</span>; x<span class=\"sy0\">.</span>8=<span class=\"st0\">'one-pair'</span><br/>d<span class=\"sy0\">.</span>9=<span class=\"st0\">'qc tc 7c 6c 4c'</span>; x<span class=\"sy0\">.</span>9=<span class=\"st0\">'flush'</span><br/>d<span class=\"sy0\">.</span>10=<span class=\"st0\">'ah 2h 3h 4h'</span><br/>d<span class=\"sy0\">.</span>11=<span class=\"st0\">'ah 2h 3h 4h 5h 6h'</span><br/>d<span class=\"sy0\">.</span>12=<span class=\"st0\">'2h 2h 3h 4h 5h'</span><br/>d<span class=\"sy0\">.</span>13=<span class=\"st0\">'xh 2h 3h 4h 5h'</span><br/>d<span class=\"sy0\">.</span>14=<span class=\"st0\">'2x 2h 3h 4h 5h'</span><br/><span class=\"kw1\">Do</span> ci=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">14</span><br/>  <span class=\"kw1\">Call</span> poker d<span class=\"sy0\">.</span>ci,x<span class=\"sy0\">.</span>ci<br/>  <span class=\"kw3\">end</span><br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>poker:<br/><span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> deck,expected<br/>have<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>f<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>; fmax=<span class=\"nu0\">0</span><br/>s<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span>; smax=<span class=\"nu0\">0</span><br/>cnt<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/><span class=\"kw1\">If</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>deck<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">5</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Return</span> err<span class=\"br0\">(</span><span class=\"st0\">'less than 5 cards'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">If</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>deck<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">5</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Return</span> err<span class=\"br0\">(</span><span class=\"st0\">'more than 5 cards'</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">5</span><br/>  c=<span class=\"kw6\">word</span><span class=\"br0\">(</span>deck,i<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">Var</span> c f +<span class=\"nu0\">1</span> s<br/>  <span class=\"kw1\">If</span> have<span class=\"sy0\">.</span>f<span class=\"sy0\">.</span>s=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Return</span> err<span class=\"br0\">(</span><span class=\"st0\">'duplicate card:'</span> c<span class=\"br0\">)</span><br/>  have<span class=\"sy0\">.</span>f<span class=\"sy0\">.</span>s=<span class=\"nu0\">1</span><br/>  m=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>f,<span class=\"st0\">'a23456789tjqk'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> m=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Return</span> err<span class=\"br0\">(</span><span class=\"st0\">'invalid face'</span> f <span class=\"st0\">'in'</span> c<span class=\"br0\">)</span><br/>  cnt<span class=\"sy0\">.</span>m=cnt<span class=\"sy0\">.</span>m+<span class=\"nu0\">1</span><br/>  n=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>s,<span class=\"st0\">'hdcs'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> n=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Return</span> err<span class=\"br0\">(</span><span class=\"st0\">'invalid suit'</span> s <span class=\"st0\">'in'</span> c<span class=\"br0\">)</span><br/>  f<span class=\"sy0\">.</span>m=f<span class=\"sy0\">.</span>m+<span class=\"nu0\">1</span>; fmax=<span class=\"kw6\">max</span><span class=\"br0\">(</span>fmax,f<span class=\"sy0\">.</span>m<span class=\"br0\">)</span><br/>  s<span class=\"sy0\">.</span>n=s<span class=\"sy0\">.</span>n+<span class=\"nu0\">1</span>; smax=<span class=\"kw6\">max</span><span class=\"br0\">(</span>smax,s<span class=\"sy0\">.</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/>cntl=<span class=\"st0\">''</span><br/>cnt<span class=\"sy0\">.</span>14=cnt<span class=\"sy0\">.</span>1<br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">14</span><br/>  cntl=cntl<span class=\"sy0\">||</span>cnt<span class=\"sy0\">.</span>i<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Select</span><br/>  <span class=\"kw3\">When</span> fmax=<span class=\"nu0\">4</span> <span class=\"kw3\">Then</span> res=<span class=\"st0\">'four-of-a-kind'</span><br/>  <span class=\"kw3\">When</span> fmax=<span class=\"nu0\">3</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">If</span> x_pair<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span><br/>      res=<span class=\"st0\">'full-house'</span><br/>    <span class=\"kw3\">Else</span><br/>      res=<span class=\"st0\">'three-of-a-kind'</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">When</span> fmax=<span class=\"nu0\">2</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">If</span> x_2pair<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span><br/>      res=<span class=\"st0\">'two-pair'</span><br/>    <span class=\"kw3\">Else</span><br/>      res=<span class=\"st0\">'one-pair'</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">When</span> smax=<span class=\"nu0\">5</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">If</span> x_street<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span><br/>      res=<span class=\"st0\">'straight-flush'</span><br/>    <span class=\"kw3\">Else</span><br/>      res=<span class=\"st0\">'flush'</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">When</span> x_street<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw3\">Then</span><br/>    res=<span class=\"st0\">'straight'</span><br/>  <span class=\"kw3\">Otherwise</span><br/>    res=<span class=\"st0\">'high-card'</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> deck res<br/><span class=\"kw1\">If</span> res<span class=\"sy0\">&lt;&gt;</span>expected <span class=\"kw3\">Then</span><br/>  <span class=\"kw1\">Say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>,<span class=\"nu0\">14</span><span class=\"br0\">)</span> expected<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>x_pair:<br/>  <span class=\"kw1\">Do</span> p=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">13</span><br/>    <span class=\"kw1\">If</span> f<span class=\"sy0\">.</span>p=<span class=\"nu0\">2</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>x_2pair:<br/>  pp=<span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Do</span> p=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">13</span><br/>    <span class=\"kw1\">If</span> f<span class=\"sy0\">.</span>p=<span class=\"nu0\">2</span> <span class=\"kw3\">Then</span> pp=pp+<span class=\"nu0\">1</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span> pp=<span class=\"nu0\">2</span><br/>\u00a0<br/>x_street:<br/>  <span class=\"kw1\">Return</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span><span class=\"st0\">'11111'</span>,cntl<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><br/>\u00a0<br/>err:<br/>  <span class=\"kw1\">Say</span> deck <span class=\"st0\">'Error:'</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Return</span> <span class=\"nu0\">0</span></pre>"}, {"lang": "Ruby", "loc": 144, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> Card<br/>  <span class=\"kw1\">include</span> <span class=\"kw4\">Comparable</span><br/>  attr_accessor <span class=\"re3\">:ordinal</span><br/>  attr_reader <span class=\"re3\">:suit</span>, <span class=\"re3\">:face</span> <br/>\u00a0<br/>  SUITS = <span class=\"sy0\">%</span>i<span class=\"br0\">(</span>\u2665 \u2666 \u2663 \u2660<span class=\"br0\">)</span><br/>  FACES = <span class=\"sy0\">%</span>i<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">10</span> j q k a<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    <span class=\"re1\">@face</span>, <span class=\"re1\">@suit</span> = parse<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    <span class=\"re1\">@ordinal</span> = FACES.<span class=\"me1\">index</span><span class=\"br0\">(</span>@face<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"br0\">(</span>other<span class=\"br0\">)</span> <span class=\"co1\">#used for sorting</span><br/>    <span class=\"kw2\">self</span>.<span class=\"me1\">ordinal</span> <span class=\"sy0\">&lt;=&gt;</span> other.<span class=\"me1\">ordinal</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> to_s<br/>    <span class=\"st0\">\"#@face#@suit\"</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  private<br/>  <span class=\"kw1\">def</span> parse<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>    face, suit = str.<span class=\"kw3\">chop</span>.<span class=\"me1\">to_sym</span>, str<span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">to_sym</span><br/>    <span class=\"kw3\">raise</span> <span class=\"kw4\">ArgumentError</span>, <span class=\"st0\">\"invalid card: #{str}\"</span> <span class=\"kw1\">unless</span> FACES.<span class=\"kw1\">include</span>?<span class=\"br0\">(</span>face<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> SUITS.<span class=\"kw1\">include</span>?<span class=\"br0\">(</span>suit<span class=\"br0\">)</span><br/>    <span class=\"br0\">[</span>face, suit<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Hand<br/>  <span class=\"kw1\">include</span> <span class=\"kw4\">Comparable</span><br/>  attr_reader <span class=\"re3\">:cards</span>, <span class=\"re3\">:rank</span><br/>\u00a0<br/>  RANKS       = <span class=\"sy0\">%</span>i<span class=\"br0\">(</span>high<span class=\"sy0\">-</span>card one<span class=\"sy0\">-</span>pair two<span class=\"sy0\">-</span>pair three<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>a<span class=\"sy0\">-</span>kind straight flush<br/>                   full<span class=\"sy0\">-</span>house four<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>a<span class=\"sy0\">-</span>kind straight<span class=\"sy0\">-</span>flush five<span class=\"sy0\">-</span>of<span class=\"sy0\">-</span>a<span class=\"sy0\">-</span>kind<span class=\"br0\">)</span><br/>  WHEEL_FACES = <span class=\"sy0\">%</span>i<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> a<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> initialize<span class=\"br0\">(</span>str_of_cards<span class=\"br0\">)</span><br/>    <span class=\"re1\">@cards</span> = str_of_cards.<span class=\"me1\">downcase</span>.<span class=\"me1\">tr</span><span class=\"br0\">(</span><span class=\"st0\">','</span>,<span class=\"st0\">' '</span><span class=\"br0\">)</span>.<span class=\"kw3\">split</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>str<span class=\"sy0\">|</span> Card.<span class=\"me1\">new</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>    grouped = <span class=\"re1\">@cards</span>.<span class=\"me1\">group_by</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:face<span class=\"br0\">)</span>.<span class=\"me1\">values</span><br/>    <span class=\"re1\">@face_pattern</span> = grouped.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:size<span class=\"br0\">)</span>.<span class=\"me1\">sort</span><br/>    <span class=\"re1\">@rank</span> = categorize<br/>    <span class=\"re1\">@rank_num</span> = RANKS.<span class=\"me1\">index</span><span class=\"br0\">(</span>@rank<span class=\"br0\">)</span><br/>    <span class=\"re1\">@tiebreaker</span> = grouped.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>ar<span class=\"sy0\">|</span> <span class=\"br0\">[</span>ar.<span class=\"me1\">size</span>, ar.<span class=\"me1\">first</span>.<span class=\"me1\">ordinal</span><span class=\"br0\">]</span><span class=\"br0\">}</span>.<span class=\"me1\">sort</span>.<span class=\"me1\">reverse</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> <span class=\"sy0\">&lt;=&gt;</span> <span class=\"br0\">(</span>other<span class=\"br0\">)</span>    <span class=\"co1\"># used for sorting and comparing</span><br/>    <span class=\"kw2\">self</span>.<span class=\"me1\">compare_value</span> <span class=\"sy0\">&lt;=&gt;</span> other.<span class=\"me1\">compare_value</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> to_s<br/>    <span class=\"re1\">@cards</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:to_s<span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  protected          <span class=\"co1\"># accessible for Hands</span><br/>  <span class=\"kw1\">def</span> compare_value<br/>    <span class=\"br0\">[</span>@rank_num, <span class=\"re1\">@tiebreaker</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  private<br/>  <span class=\"kw1\">def</span> one_suit?<br/>    <span class=\"re1\">@cards</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:suit<span class=\"br0\">)</span>.<span class=\"me1\">uniq</span>.<span class=\"me1\">size</span> == <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> consecutive?<br/>    sort.<span class=\"me1\">each_cons</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">all</span>? <span class=\"br0\">{</span><span class=\"sy0\">|</span>c1,c2<span class=\"sy0\">|</span> c2.<span class=\"me1\">ordinal</span> <span class=\"sy0\">-</span> c1.<span class=\"me1\">ordinal</span> == <span class=\"nu0\">1</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> sort<br/>    <span class=\"kw1\">if</span> <span class=\"re1\">@cards</span>.<span class=\"me1\">sort</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:face<span class=\"br0\">)</span> == WHEEL_FACES<br/>      <span class=\"re1\">@cards</span>.<span class=\"me1\">detect</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> c.<span class=\"me1\">face</span> == <span class=\"re3\">:a</span><span class=\"br0\">}</span>.<span class=\"me1\">ordinal</span> = <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <br/>    <span class=\"re1\">@cards</span>.<span class=\"me1\">sort</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> categorize<br/>    <span class=\"kw1\">if</span> consecutive?<br/>      one_suit?\u00a0?\u00a0:<span class=\"st0\">'straight-flush'</span>\u00a0: <span class=\"re3\">:straight</span><br/>    <span class=\"kw1\">elsif</span> one_suit?<br/>      <span class=\"re3\">:flush</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw1\">case</span> <span class=\"re1\">@face_pattern</span><br/>        <span class=\"kw1\">when</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span>\u00a0:<span class=\"st0\">'high-card'</span><br/>        <span class=\"kw1\">when</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span>   <span class=\"kw1\">then</span>\u00a0:<span class=\"st0\">'one-pair'</span><br/>        <span class=\"kw1\">when</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span>     <span class=\"kw1\">then</span>\u00a0:<span class=\"st0\">'two-pair'</span><br/>        <span class=\"kw1\">when</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span>,<span class=\"nu0\">3</span><span class=\"br0\">]</span>     <span class=\"kw1\">then</span>\u00a0:<span class=\"st0\">'three-of-a-kind'</span><br/>        <span class=\"kw1\">when</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"nu0\">3</span><span class=\"br0\">]</span>       <span class=\"kw1\">then</span>\u00a0:<span class=\"st0\">'full-house'</span><br/>        <span class=\"kw1\">when</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">4</span><span class=\"br0\">]</span>       <span class=\"kw1\">then</span>\u00a0:<span class=\"st0\">'four-of-a-kind'</span><br/>        <span class=\"kw1\">when</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span>         <span class=\"kw1\">then</span>\u00a0:<span class=\"st0\">'five-of-a-kind'</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\"># Demo</span><br/>test_hands = <span class=\"co4\">&lt;&lt;EOS<br/>2\u2665 2\u2666 2\u2663 k\u2663 q\u2666<br/>2\u2665 5\u2665 7\u2666 8\u2663 9\u2660<br/>a\u2665 2\u2666 3\u2663 4\u2663 5\u2666<br/>2\u2665 3\u2665 2\u2666 3\u2663 3\u2666<br/>2\u2665 7\u2665 2\u2666 3\u2663 3\u2666<br/>2\u2665 6\u2665 2\u2666 3\u2663 3\u2666<br/>10\u2665 j\u2665 q\u2665 k\u2665 a\u2665<br/>4\u2665 4\u2660 k\u2660 2\u2666 10\u2660<br/>4\u2665 4\u2660 k\u2660 3\u2666 10\u2660<br/>q\u2663 10\u2663 7\u2663 6\u2663 4\u2663<br/>q\u2663 10\u2663 7\u2663 6\u2663 3\u2663<br/>9\u2665 10\u2665 q\u2665 k\u2665 j\u2663<br/>2\u2665 3\u2665 4\u2665 5\u2665 a\u2665<br/>2\u2665 2\u2665 2\u2666 3\u2663 3\u2666<br/>EOS</span><br/>\u00a0<br/>hands = test_hands.<span class=\"me1\">each_line</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>line<span class=\"sy0\">|</span> Hand.<span class=\"me1\">new</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"High to low\"</span><br/>hands.<span class=\"me1\">sort</span>.<span class=\"me1\">reverse</span>.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>hand<span class=\"sy0\">|</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{hand}<span class=\"es0\">\\t</span> #{hand.rank}\"</span> <span class=\"br0\">}</span><br/><span class=\"kw3\">puts</span><br/>\u00a0<br/>str = <span class=\"co4\">&lt;&lt;EOS<br/>joker  2\u2666  2\u2660  k\u2660  q\u2666<br/>joker  5\u2665  7\u2666  8\u2660  9\u2666<br/>joker  2\u2666  3\u2660  4\u2660  5\u2660<br/>joker  3\u2665  2\u2666  3\u2660  3\u2666<br/>joker  7\u2665  2\u2666  3\u2660  3\u2666<br/>joker  7\u2665  7\u2666  7\u2660  7\u2663<br/>joker  j\u2665  q\u2665  k\u2665  A\u2665<br/>joker  4\u2663  k\u2663  5\u2666 10\u2660<br/>joker  k\u2663  7\u2663  6\u2663  4\u2663<br/>joker  2\u2666  joker  4\u2660  5\u2660<br/>joker  Q\u2666  joker  A\u2660 10\u2660<br/>joker  Q\u2666  joker  A\u2666 10\u2666<br/>joker  2\u2666  2\u2660  joker  q\u2666<br/>EOS</span><br/>\u00a0<br/><span class=\"co1\"># Neither the Card nor the Hand class supports jokers</span><br/><span class=\"co1\"># but since hands are comparable, they are also sortable.</span><br/><span class=\"co1\"># Try every card from a deck for a joker and pick the largest hand:</span><br/>\u00a0<br/>DECK = <span class=\"re2\">Card::FACES</span>.<span class=\"me1\">product</span><span class=\"br0\">(</span><span class=\"re2\">Card::SUITS</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:join<span class=\"br0\">)</span><br/>str.<span class=\"me1\">each_line</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>line<span class=\"sy0\">|</span><br/>  cards_in_arrays = line.<span class=\"kw3\">split</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>c<span class=\"sy0\">|</span> c == <span class=\"st0\">\"joker\"</span>\u00a0? DECK.<span class=\"me1\">dup</span>\u00a0: <span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"co1\">#joker is array of all cards</span><br/>  all_tries  = cards_in_arrays.<span class=\"me1\">shift</span>.<span class=\"me1\">product</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>cards_in_arrays<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>ar<span class=\"sy0\">|</span> Hand.<span class=\"me1\">new</span><span class=\"br0\">(</span>ar.<span class=\"me1\">join</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"co1\">#calculate the Whatshisname product</span><br/>  best = all_tries.<span class=\"me1\">max</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"#{line.strip}: #{best.rank}\"</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 74, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> faces <span class=\"sy0\">=</span> <span class=\"st0\">\"23456789TJQKA\"</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> suits <span class=\"sy0\">=</span> <span class=\"st0\">\"CHSD\"</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">sealed</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">trait</span></a> Card<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Joker <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Card<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> RealCard<span class=\"br0\">(</span>face<span class=\"sy0\">:</span> Int, suit<span class=\"sy0\">:</span> Char<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> Card<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> allRealCards <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">{</span><br/>  face <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> until faces.<span class=\"me1\">size</span><br/>  suit <span class=\"sy0\">&lt;</span>- suits<br/><span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">yield</span></a> RealCard<span class=\"br0\">(</span>face, suit<span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> parseCard<span class=\"br0\">(</span>str<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> Card <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>str <span class=\"sy0\">==</span> <span class=\"st0\">\"joker\"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Joker<br/>  <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>    RealCard<span class=\"br0\">(</span>faces.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>str<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, str<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> parseHand<span class=\"br0\">(</span>str<span class=\"sy0\">:</span> String<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Card<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  str.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>parseCard<span class=\"br0\">)</span>.<span class=\"me1\">toList</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">trait</span></a> HandType <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> name<span class=\"sy0\">:</span> String<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check<span class=\"br0\">(</span>hand<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>RealCard<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> And<span class=\"br0\">(</span>x<span class=\"sy0\">:</span> HandType, y<span class=\"sy0\">:</span> HandType, name<span class=\"sy0\">:</span> String<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> HandType <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check<span class=\"br0\">(</span>hand<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>RealCard<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x.<span class=\"me1\">check</span><span class=\"br0\">(</span>hand<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> y.<span class=\"me1\">check</span><span class=\"br0\">(</span>hand<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Straight <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> HandType <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> name <span class=\"sy0\">=</span> <span class=\"st0\">\"straight\"</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check<span class=\"br0\">(</span>hand<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>RealCard<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> faces <span class=\"sy0\">=</span> hand.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">face</span><span class=\"br0\">)</span>.<span class=\"me1\">toSet</span><br/>    faces.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">5</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>faces.<span class=\"me1\">min</span> <span class=\"sy0\">==</span> faces.<span class=\"me1\">max</span> - <span class=\"nu0\">4</span> || faces <span class=\"sy0\">==</span> Set<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">12</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Flush <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> HandType <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> name <span class=\"sy0\">=</span> <span class=\"st0\">\"flush\"</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check<span class=\"br0\">(</span>hand<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>RealCard<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    hand.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">suit</span><span class=\"br0\">)</span>.<span class=\"me1\">toSet</span>.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> NOfAKind<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, name<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span>, nOccur<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> HandType <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> check<span class=\"br0\">(</span>hand<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>RealCard<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    hand.<span class=\"me1\">groupBy</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">face</span><span class=\"br0\">)</span>.<span class=\"me1\">values</span>.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> n<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> nOccur<br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> allHandTypes <span class=\"sy0\">=</span> List<span class=\"br0\">(</span><br/>  NOfAKind<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"st0\">\"five-of-a-kind\"</span><span class=\"br0\">)</span>,<br/>  And<span class=\"br0\">(</span>Straight, Flush, <span class=\"st0\">\"straight-flush\"</span><span class=\"br0\">)</span>,<br/>  NOfAKind<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"st0\">\"four-of-a-kind\"</span><span class=\"br0\">)</span>,<br/>  And<span class=\"br0\">(</span>NOfAKind<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, NOfAKind<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>, <span class=\"st0\">\"full-house\"</span><span class=\"br0\">)</span>,<br/>  Flush,<br/>  Straight,<br/>  NOfAKind<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"st0\">\"three-of-a-kind\"</span><span class=\"br0\">)</span>,<br/>  NOfAKind<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"st0\">\"two-pair\"</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>,<br/>  NOfAKind<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"st0\">\"one-pair\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> possibleRealHands<span class=\"br0\">(</span>hand<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Card<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"br0\">[</span>List<span class=\"br0\">[</span>RealCard<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> realCards <span class=\"sy0\">=</span> hand.<span class=\"me1\">collect</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> r<span class=\"sy0\">:</span> RealCard <span class=\"sy0\">=&gt;</span> r <span class=\"br0\">}</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nJokers <span class=\"sy0\">=</span> hand.<span class=\"me1\">count</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> <span class=\"sy0\">==</span> Joker<span class=\"br0\">)</span><br/>  allRealCards.<span class=\"me1\">toList</span>.<span class=\"me1\">combinations</span><span class=\"br0\">(</span>nJokers<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span> ++ realCards<span class=\"br0\">)</span>.<span class=\"me1\">toList</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> analyzeHand<span class=\"br0\">(</span>hand<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Card<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> possibleHands <span class=\"sy0\">=</span> possibleRealHands<span class=\"br0\">(</span>hand<span class=\"br0\">)</span><br/>  allHandTypes.<span class=\"me1\">find</span><span class=\"br0\">(</span>t <span class=\"sy0\">=&gt;</span> possibleHands.<span class=\"me1\">exists</span><span class=\"br0\">(</span>t.<span class=\"me1\">check</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">name</span><span class=\"br0\">)</span>.<span class=\"me1\">getOrElse</span><span class=\"br0\">(</span><span class=\"st0\">\"high-card\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 116, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.6</span><br/><span class=\"kw1\">namespace</span> <span class=\"kw1\">eval</span> PokerHandAnalyser <span class=\"br0\">{</span><br/>    <span class=\"kw1\">proc</span> analyse <span class=\"br0\">{</span>hand<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> norm <span class=\"br0\">[</span>Normalise <span class=\"re0\">$hand</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">foreach</span> type <span class=\"br0\">{</span><br/>\t    invalid straight-<span class=\"kw2\">flush</span> four-of-a-kind full-house <span class=\"kw2\">flush</span> straight<br/>\t    three-of-a-kind two-pair one-pair<br/>\t<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>Detect-<span class=\"re0\">$type</span> <span class=\"re0\">$norm</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"re0\">$type</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"co1\"># Always possible to use high-card if the hand is legal at all</span><br/>\t<span class=\"kw1\">return</span> high-card<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># This normalises to an internal representation that is a list of pairs,</span><br/>    <span class=\"co1\"># where each pair is one number for the pips (ace == 14, king == 13,</span><br/>    <span class=\"co1\"># etc.) and another for the suit. This greatly simplifies detection.</span><br/>    <span class=\"kw1\">proc</span> Normalise <span class=\"br0\">{</span>hand<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> PipMap <span class=\"br0\">{</span>j <span class=\"nu0\">11</span> q <span class=\"nu0\">12</span> k <span class=\"nu0\">13</span> a <span class=\"nu0\">14</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> SuitMap <span class=\"br0\">{</span>\u2665 <span class=\"nu0\">2</span> h <span class=\"nu0\">2</span> \u2666 <span class=\"nu0\">1</span> d <span class=\"nu0\">1</span> \u2663 <span class=\"nu0\">0</span> c <span class=\"nu0\">0</span> \u2660 <span class=\"nu0\">3</span> s <span class=\"nu0\">3</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> hand <span class=\"br0\">[</span><span class=\"kw2\">string</span> tolower <span class=\"re0\">$hand</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> cards <span class=\"br0\">[</span><span class=\"kw2\">regexp</span> -all -inline <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"sy0\">?</span>:<span class=\"br0\">[</span>akqj98765432<span class=\"br0\">]</span>|<span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">[</span>hdcs\u2665\u2666\u2663\u2660<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"re0\">$hand</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">lsort</span> -command CompareCards <span class=\"br0\">[</span>lmap c <span class=\"br0\">[</span><span class=\"kw2\">string</span> map <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"re0\">$cards</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> map <span class=\"re0\">$PipMap</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> range <span class=\"re0\">$c</span> <span class=\"nu0\">0</span> end-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> \\<br/>\t\t    <span class=\"br0\">[</span><span class=\"kw2\">string</span> map <span class=\"re0\">$SuitMap</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> index <span class=\"re0\">$c</span> end<span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">proc</span> CompareCards <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tlassign <span class=\"re0\">$a</span> pipA suitA<br/>\tlassign <span class=\"re0\">$b</span> pipB suitB<br/>\t<span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$pipA</span>==<span class=\"re0\">$pipB</span> <span class=\"sy0\">?</span> <span class=\"re0\">$suitB</span>-<span class=\"re0\">$suitA</span>\u00a0: <span class=\"re0\">$pipB</span>-<span class=\"re0\">$pipA</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Detection code. Note that the detectors all assume that the preceding</span><br/>    <span class=\"co1\"># detectors have been run first; this simplifies the logic a lot, but does</span><br/>    <span class=\"co1\"># mean that the individual detectors are not robust on their own.</span><br/>    <span class=\"kw1\">proc</span> Detect-invalid <span class=\"br0\">{</span>hand<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$hand</span><span class=\"br0\">]</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">5</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">foreach</span> c <span class=\"re0\">$hand</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> seen<span class=\"br0\">(</span><span class=\"re0\">$c</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">proc</span> Detect-straight-<span class=\"kw2\">flush</span> <span class=\"br0\">{</span>hand<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> c <span class=\"re0\">$hand</span> <span class=\"br0\">{</span><br/>\t    lassign <span class=\"re0\">$c</span> pip suit<br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exist prev<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$prev</span>-<span class=\"nu0\">1</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$pip</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"co1\"># Special case: ace low straight flush (\"steel wheel\")</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$prev</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">14</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$suit</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">5</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">set</span> prev <span class=\"re0\">$pip</span><br/>\t    <span class=\"kw2\">incr</span> seen<span class=\"br0\">(</span><span class=\"re0\">$suit</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>array size seen<span class=\"br0\">]</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">proc</span> Detect-four-of-a-kind <span class=\"br0\">{</span>hand<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> c <span class=\"re0\">$hand</span> <span class=\"br0\">{</span><br/>\t    lassign <span class=\"re0\">$c</span> pip suit<br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> seen<span class=\"br0\">(</span><span class=\"re0\">$pip</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">proc</span> Detect-full-house <span class=\"br0\">{</span>hand<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> c <span class=\"re0\">$hand</span> <span class=\"br0\">{</span><br/>\t    lassign <span class=\"re0\">$c</span> pip suit<br/>\t    <span class=\"kw2\">incr</span> seen<span class=\"br0\">(</span><span class=\"re0\">$pip</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>array size seen<span class=\"br0\">]</span> == <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">proc</span> Detect-<span class=\"kw2\">flush</span> <span class=\"br0\">{</span>hand<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> c <span class=\"re0\">$hand</span> <span class=\"br0\">{</span><br/>\t    lassign <span class=\"re0\">$c</span> pip suit<br/>\t    <span class=\"kw2\">incr</span> seen<span class=\"br0\">(</span><span class=\"re0\">$suit</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>array size seen<span class=\"br0\">]</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">proc</span> Detect-straight <span class=\"br0\">{</span>hand<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> c <span class=\"re0\">$hand</span> <span class=\"br0\">{</span><br/>\t    lassign <span class=\"re0\">$c</span> pip suit<br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">info</span> exist prev<span class=\"br0\">]</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$prev</span>-<span class=\"nu0\">1</span> <span class=\"sy0\">!</span>= <span class=\"re0\">$pip</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"co1\"># Special case: ace low straight (\"wheel\")</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$prev</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">14</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$suit</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">5</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t\t    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"br0\">}</span><br/>\t    <span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">set</span> prev <span class=\"re0\">$pip</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">proc</span> Detect-three-of-a-kind <span class=\"br0\">{</span>hand<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> c <span class=\"re0\">$hand</span> <span class=\"br0\">{</span><br/>\t    lassign <span class=\"re0\">$c</span> pip suit<br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> seen<span class=\"br0\">(</span><span class=\"re0\">$pip</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">proc</span> Detect-two-pair <span class=\"br0\">{</span>hand<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> pairs <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">foreach</span> c <span class=\"re0\">$hand</span> <span class=\"br0\">{</span><br/>\t    lassign <span class=\"re0\">$c</span> pip suit<br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> seen<span class=\"br0\">(</span><span class=\"re0\">$pip</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> pairs<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$pairs</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">proc</span> Detect-one-pair <span class=\"br0\">{</span>hand<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">foreach</span> c <span class=\"re0\">$hand</span> <span class=\"br0\">{</span><br/>\t    lassign <span class=\"re0\">$c</span> pip suit<br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">incr</span> seen<span class=\"br0\">(</span><span class=\"re0\">$pip</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}]}