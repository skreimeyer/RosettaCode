{"task": "Truth_table", "blocks": [{"lang": "ALGOL 68", "loc": 82, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># prints the truth table of a boolean expression composed of the 26 lowercase variables a..z, #</span><br/><span class=\"coMULTI\"># the boolean operators AND, OR, XOR and NOT and the literal values TRUE and FALSE            #</span><br/><span class=\"coMULTI\"># The evaluation is done with the Algol 68G evaluate function which is an extension           #</span><br/><span class=\"kw4\">PROC</span> <span class=\"kw22\">print</span> truth table <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">STRING</span> expr <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">BEGIN</span><br/>\u00a0<br/>        <span class=\"coMULTI\"># recursively prints the truth table #</span><br/>        <span class=\"kw4\">PROC</span> <span class=\"kw22\">print</span> line <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> v <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>             <span class=\"kw2\">IF</span> v <span class=\"sy1\">&gt;</span> <span class=\"kw8\">UPB</span> bv<br/>             <span class=\"kw2\">THEN</span><br/>                 <span class=\"coMULTI\"># at the end of the variables - print the line #</span><br/>                 <span class=\"kw2\">FOR</span> e <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> bv <span class=\"kw2\">DO</span><br/>                     <span class=\"kw2\">IF</span> used<span class=\"br0\">[</span> e <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> bv<span class=\"br0\">[</span> e <span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw2\">FI</span><br/>                 <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>                 <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"     \"</span><span class=\"sy1\">,</span> evaluate<span class=\"br0\">(</span> expr <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>             <span class=\"kw2\">ELIF</span> used<span class=\"br0\">[</span> v <span class=\"br0\">]</span><br/>             <span class=\"kw2\">THEN</span><br/>                 <span class=\"coMULTI\"># have another variable #</span><br/>                 bv<span class=\"br0\">[</span> v <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">;</span><br/>                 <span class=\"kw22\">print</span> line<span class=\"br0\">(</span> v <span class=\"sy1\">+</span> 1 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>                 bv<span class=\"br0\">[</span> v <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>                 <span class=\"kw22\">print</span> line<span class=\"br0\">(</span> v <span class=\"sy1\">+</span> 1 <span class=\"br0\">)</span><br/>             <span class=\"kw2\">ELSE</span><br/>                 <span class=\"coMULTI\"># this variable is not used #</span><br/>                 <span class=\"kw22\">print</span> line<span class=\"br0\">(</span> v <span class=\"sy1\">+</span> 1 <span class=\"br0\">)</span><br/>             <span class=\"kw2\">FI</span> <span class=\"coMULTI\"># print line #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\"># returns the name of the variable number #</span><br/>        <span class=\"kw4\">PROC</span> variable name <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> number <span class=\"br0\">)</span><span class=\"kw3\">CHAR</span><span class=\"sy1\">:</span> <span class=\"kw8\">REPR</span> <span class=\"br0\">(</span> number <span class=\"sy1\">+</span> <span class=\"br0\">(</span> <span class=\"kw8\">ABS</span> <span class=\"st0\">\"a\"</span> <span class=\"sy1\">-</span> 1 <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>        <span class=\"coMULTI\"># the 26 boolean variables #</span><br/>        <span class=\"kw3\">BOOL</span> a <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> b <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> c <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> d <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> e <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> f <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>        <span class=\"kw3\">BOOL</span> g <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> h <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> i <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> j <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> k <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> l <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>        <span class=\"kw3\">BOOL</span> m <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> n <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> o <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> p <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> q <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> r <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>        <span class=\"kw3\">BOOL</span> s <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> t <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> u <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> v <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> w <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> x <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>        <span class=\"kw3\">BOOL</span> y <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">,</span> z <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># table of the variables allowng access by number #</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw4\">REF</span> <span class=\"kw3\">BOOL</span> bv <span class=\"sy1\">=</span> <span class=\"br0\">(</span> a<span class=\"sy1\">,</span> b<span class=\"sy1\">,</span> c<span class=\"sy1\">,</span> d<span class=\"sy1\">,</span> e<span class=\"sy1\">,</span> f<span class=\"sy1\">,</span> g<span class=\"sy1\">,</span> h<span class=\"sy1\">,</span> i<span class=\"sy1\">,</span> j<span class=\"sy1\">,</span> k<span class=\"sy1\">,</span> l<span class=\"sy1\">,</span> m<br/>                        <span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> o<span class=\"sy1\">,</span> p<span class=\"sy1\">,</span> q<span class=\"sy1\">,</span> r<span class=\"sy1\">,</span> s<span class=\"sy1\">,</span> t<span class=\"sy1\">,</span> u<span class=\"sy1\">,</span> v<span class=\"sy1\">,</span> w<span class=\"sy1\">,</span> x<span class=\"sy1\">,</span> y<span class=\"sy1\">,</span> z<br/>                        <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"br0\">[</span> 26 <span class=\"br0\">]</span><span class=\"kw3\">BOOL</span> used<span class=\"sy1\">;</span><br/>        <span class=\"kw3\">BOOL</span> at least one variable <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># determine which variables are used in the expression #</span><br/>        <span class=\"kw2\">FOR</span> v <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> bv <span class=\"kw2\">DO</span><br/>            used<span class=\"br0\">[</span> v <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw26\">char in string</span><span class=\"br0\">(</span> variable name<span class=\"br0\">(</span> v <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw7\">NIL</span><span class=\"sy1\">,</span> expr <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>            <span class=\"kw2\">IF</span> used<span class=\"br0\">[</span> v <span class=\"br0\">]</span><span class=\"kw2\">THEN</span> at least one variable <span class=\"sy1\">:=</span> <span class=\"kw7\">TRUE</span> <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># print truth table headings #</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> expr<span class=\"sy1\">,</span> <span class=\"st0\">\":\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> v <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> bv <span class=\"kw2\">DO</span><br/>            <span class=\"kw2\">IF</span> used<span class=\"br0\">[</span> v <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> variable name<span class=\"br0\">(</span> v <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" value\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw2\">FOR</span> v <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> bv <span class=\"kw2\">DO</span><br/>            <span class=\"kw2\">IF</span> used<span class=\"br0\">[</span> v <span class=\"br0\">]</span> <span class=\"kw2\">THEN</span> <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" - \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw2\">FI</span><br/>        <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>        <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" -----\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># evaluate the expression for each cobination of variables #</span> <br/>        <span class=\"kw2\">IF</span> at least one variable<br/>        <span class=\"kw2\">THEN</span><br/>             <span class=\"coMULTI\"># the expression does not consist of literals only #</span><br/>             <span class=\"kw2\">FOR</span> v <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> bv <span class=\"kw2\">DO</span> bv<span class=\"br0\">[</span> v <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>             <span class=\"kw22\">print</span> line<span class=\"br0\">(</span> <span class=\"kw8\">LWB</span> bv <span class=\"br0\">)</span><br/>        <span class=\"kw2\">ELSE</span><br/>             <span class=\"coMULTI\"># the expression is constant #</span><br/>             <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"     \"</span><span class=\"sy1\">,</span> evaluate<span class=\"br0\">(</span> expr <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><br/>     <span class=\"kw2\">END</span> <span class=\"coMULTI\"># print truth table #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># print truth tables from the user's expressions #</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Please enter Boolean expressions using variables a, b, c, ..., z,\"</span><span class=\"sy1\">,</span>                  <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"operators AND, OR, NOT and XOR and literals TRUE and FALSE\"</span><span class=\"sy1\">,</span>                         <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"(Note operators and TRUE/FALSE must be uppercase and variables must be lower case)\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Enter a blank line to quit\"</span><span class=\"sy1\">,</span>                                                         <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">WHILE</span><br/>    <span class=\"kw3\">STRING</span> expr<span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"expression&gt; \"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    read<span class=\"br0\">(</span> <span class=\"br0\">(</span> expr<span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    expr <span class=\"sy1\">/=</span> <span class=\"st0\">\"\"</span><br/><span class=\"kw2\">DO</span><br/>    <span class=\"kw22\">print</span> truth table<span class=\"br0\">(</span> expr <span class=\"br0\">)</span><br/><span class=\"kw2\">OD</span></pre>"}, {"lang": "C", "loc": 185, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define TRUE 1</span><br/><span class=\"co2\">#define FALSE 0</span><br/><span class=\"co2\">#define STACK_SIZE 80</span><br/><span class=\"co2\">#define BUFFER_SIZE 100</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">int</span> bool<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">char</span> name<span class=\"sy0\">;</span><br/>    bool val<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> var<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> top<span class=\"sy0\">;</span><br/>    bool els<span class=\"br0\">[</span>STACK_SIZE<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> stack_of_bool<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">char</span> expr<span class=\"br0\">[</span>BUFFER_SIZE<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> expr_len<span class=\"sy0\">;</span><br/>var vars<span class=\"br0\">[</span><span class=\"nu0\">24</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> vars_len<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* stack manipulation functions */</span><br/>\u00a0<br/>bool is_full<span class=\"br0\">(</span>stack_of_bool <span class=\"sy0\">*</span>sp<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> sp<span class=\"sy0\">-&gt;</span>top <span class=\"sy0\">==</span> STACK_SIZE <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>bool is_empty<span class=\"br0\">(</span>stack_of_bool <span class=\"sy0\">*</span>sp<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> sp<span class=\"sy0\">-&gt;</span>top <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>bool peek<span class=\"br0\">(</span>stack_of_bool <span class=\"sy0\">*</span>sp<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>is_empty<span class=\"br0\">(</span>sp<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> sp<span class=\"sy0\">-&gt;</span>els<span class=\"br0\">[</span>sp<span class=\"sy0\">-&gt;</span>top<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Stack is empty.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> push<span class=\"br0\">(</span>stack_of_bool <span class=\"sy0\">*</span>sp<span class=\"sy0\">,</span> bool val<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>is_full<span class=\"br0\">(</span>sp<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sp<span class=\"sy0\">-&gt;</span>els<span class=\"br0\">[</span><span class=\"sy0\">++</span><span class=\"br0\">(</span>sp<span class=\"sy0\">-&gt;</span>top<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> val<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Stack is full.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>bool pop<span class=\"br0\">(</span>stack_of_bool <span class=\"sy0\">*</span>sp<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>is_empty<span class=\"br0\">(</span>sp<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> sp<span class=\"sy0\">-&gt;</span>els<span class=\"br0\">[</span><span class=\"br0\">(</span>sp<span class=\"sy0\">-&gt;</span>top<span class=\"br0\">)</span><span class=\"sy0\">--</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Stack is empty.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>bool is_operator<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">return</span> c <span class=\"sy0\">==</span> <span class=\"st0\">'&amp;'</span> <span class=\"sy0\">||</span> c <span class=\"sy0\">==</span> <span class=\"st0\">'|'</span> <span class=\"sy0\">||</span> c <span class=\"sy0\">==</span> <span class=\"st0\">'!'</span> <span class=\"sy0\">||</span> c <span class=\"sy0\">==</span> <span class=\"st0\">'^'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> vars_index<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> c<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> vars_len<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       <span class=\"kw1\">if</span> <span class=\"br0\">(</span>vars<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">name</span> <span class=\"sy0\">==</span> c<span class=\"br0\">)</span> <span class=\"kw1\">return</span> i<span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>bool eval_expr<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> vi<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> e<span class=\"sy0\">;</span><br/>    stack_of_bool s<span class=\"sy0\">;</span><br/>    stack_of_bool <span class=\"sy0\">*</span>sp <span class=\"sy0\">=</span> <span class=\"sy0\">&amp;</span>s<span class=\"sy0\">;</span><br/>    s.<span class=\"me1\">top</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> expr_len<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        e <span class=\"sy0\">=</span> expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e <span class=\"sy0\">==</span> <span class=\"st0\">'T'</span><span class=\"br0\">)</span><br/>            push<span class=\"br0\">(</span>sp<span class=\"sy0\">,</span> TRUE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e <span class=\"sy0\">==</span> <span class=\"st0\">'F'</span><span class=\"br0\">)</span><br/>            push<span class=\"br0\">(</span>sp<span class=\"sy0\">,</span> FALSE<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>vi <span class=\"sy0\">=</span> vars_index<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            push<span class=\"br0\">(</span>sp<span class=\"sy0\">,</span> vars<span class=\"br0\">[</span>vi<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">switch</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'&amp;'</span><span class=\"sy0\">:</span><br/>                push<span class=\"br0\">(</span>sp<span class=\"sy0\">,</span> pop<span class=\"br0\">(</span>sp<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> pop<span class=\"br0\">(</span>sp<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'|'</span><span class=\"sy0\">:</span><br/>                push<span class=\"br0\">(</span>sp<span class=\"sy0\">,</span> pop<span class=\"br0\">(</span>sp<span class=\"br0\">)</span> <span class=\"sy0\">|</span> pop<span class=\"br0\">(</span>sp<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'!'</span><span class=\"sy0\">:</span><br/>                push<span class=\"br0\">(</span>sp<span class=\"sy0\">,</span> <span class=\"sy0\">!</span>pop<span class=\"br0\">(</span>sp<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'^'</span><span class=\"sy0\">:</span><br/>                push<span class=\"br0\">(</span>sp<span class=\"sy0\">,</span> pop<span class=\"br0\">(</span>sp<span class=\"br0\">)</span> <span class=\"sy0\">^</span> pop<span class=\"br0\">(</span>sp<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Non-conformant character '%c' in expression.<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>s.<span class=\"me1\">top</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Stack should contain exactly one element.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> peek<span class=\"br0\">(</span>sp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> set_vars<span class=\"br0\">(</span><span class=\"kw4\">int</span> pos<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">&gt;</span> vars_len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Argument to set_vars can't be greater than the number of variables.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/exit.html\"><span class=\"kw3\">exit</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">==</span> vars_len<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> vars_len<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span>vars<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"T  \"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"F  \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%c<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>eval_expr<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">'T'</span> <span class=\"sy0\">:</span> <span class=\"st0\">'F'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>        vars<span class=\"br0\">[</span>pos<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">=</span> FALSE<span class=\"sy0\">;</span><br/>        set_vars<span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        vars<span class=\"br0\">[</span>pos<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">=</span> TRUE<span class=\"sy0\">;</span><br/>        set_vars<span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* removes whitespace and converts to upper case */</span><br/><span class=\"kw4\">void</span> process_expr<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isspace.html\"><span class=\"kw3\">isspace</span></a><span class=\"br0\">(</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span> expr<span class=\"br0\">[</span>count<span class=\"sy0\">++</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/toupper.html\"><span class=\"kw3\">toupper</span></a><span class=\"br0\">(</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    expr<span class=\"br0\">[</span>count<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">'<span class=\"es5\">\\0</span>'</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> h<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">char</span> e<span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Accepts single-character variables (except for 'T' and 'F',<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"which specify explicit true or false values), postfix, with<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"&amp;|!^ for and, or, not, xor, respectively; optionally<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"seperated by whitespace. Just enter nothing to quit.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>TRUE<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Boolean expression: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fgets.html\"><span class=\"kw3\">fgets</span></a><span class=\"br0\">(</span>expr<span class=\"sy0\">,</span> BUFFER_SIZE<span class=\"sy0\">,</span> stdin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/fflush.html\"><span class=\"kw3\">fflush</span></a><span class=\"br0\">(</span>stdin<span class=\"br0\">)</span><span class=\"sy0\">;</span>       <br/>        process_expr<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        expr_len <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>expr<span class=\"br0\">)</span><span class=\"sy0\">;</span>    <br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>expr_len <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>        vars_len <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> expr_len<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            e <span class=\"sy0\">=</span> expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>is_operator<span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> e <span class=\"sy0\">!=</span> <span class=\"st0\">'T'</span> <span class=\"sy0\">&amp;&amp;</span> e <span class=\"sy0\">!=</span> <span class=\"st0\">'F'</span> <span class=\"sy0\">&amp;&amp;</span> vars_index<span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                vars<span class=\"br0\">[</span>vars_len<span class=\"br0\">]</span>.<span class=\"me1\">name</span> <span class=\"sy0\">=</span> e<span class=\"sy0\">;</span><br/>                vars<span class=\"br0\">[</span>vars_len<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">=</span> FALSE<span class=\"sy0\">;</span><br/>                vars_len<span class=\"sy0\">++;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>vars_len <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>No variables were entered.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> vars_len<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%c  \"</span><span class=\"sy0\">,</span> vars<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> expr<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        h <span class=\"sy0\">=</span> vars_len <span class=\"sy0\">*</span> <span class=\"nu0\">3</span> <span class=\"sy0\">+</span> expr_len<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> h<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"=\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        set_vars<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 247, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Text</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> TruthTable<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> TokenType <span class=\"br0\">{</span> Unknown, WhiteSpace, Constant, Operand, <span class=\"kw1\">Operator</span>, LeftParenthesis, RightParenthesis <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">readonly</span> <span class=\"kw4\">char</span> trueConstant, falseConstant<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">readonly</span> IDictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">char</span>, <span class=\"kw1\">Operator</span><span class=\"sy0\">&gt;</span> operators <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Dictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">char</span>, <span class=\"kw1\">Operator</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> TruthTable<span class=\"br0\">(</span><span class=\"kw4\">char</span> falseConstant, <span class=\"kw4\">char</span> trueConstant<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">trueConstant</span> <span class=\"sy0\">=</span> trueConstant<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">falseConstant</span> <span class=\"sy0\">=</span> falseConstant<span class=\"sy0\">;</span><br/>        Operators <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> OperatorCollection<span class=\"br0\">(</span>operators<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> OperatorCollection Operators <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> PrintTruthTable<span class=\"br0\">(</span><span class=\"kw4\">string</span> expression, <span class=\"kw4\">bool</span> isPostfix <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">try</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span> line <span class=\"kw1\">in</span> GetTruthTable<span class=\"br0\">(</span>expression, isPostfix<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>line<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">catch</span> <span class=\"br0\">(</span>ArgumentException ex<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>expression <span class=\"sy0\">+</span> <span class=\"st0\">\"   \"</span> <span class=\"sy0\">+</span> ex<span class=\"sy0\">.</span><span class=\"me1\">Message</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">string</span><span class=\"sy0\">&gt;</span> GetTruthTable<span class=\"br0\">(</span><span class=\"kw4\">string</span> expression, <span class=\"kw4\">bool</span> isPostfix <span class=\"sy0\">=</span> <span class=\"kw1\">false</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"me1\">IsNullOrWhiteSpace</span><span class=\"br0\">(</span>expression<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Invalid expression.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">//Maps parameters to an index in BitSet</span><br/>        <span class=\"co1\">//Makes sure they appear in the truth table in the order they first appear in the expression</span><br/>        <span class=\"kw1\">var</span> parameters <span class=\"sy0\">=</span> expression<br/>            <span class=\"sy0\">.</span><span class=\"kw1\">Where</span><span class=\"br0\">(</span>c <span class=\"sy0\">=&gt;</span> <a href=\"http://www.google.com/search?q=typeof+msdn.microsoft.com\"><span class=\"kw3\">TypeOf</span></a><span class=\"br0\">(</span>c<span class=\"br0\">)</span> <span class=\"sy0\">==</span> TokenType<span class=\"sy0\">.</span><span class=\"me1\">Operand</span><span class=\"br0\">)</span><br/>            <span class=\"sy0\">.</span><span class=\"me1\">Distinct</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"sy0\">.</span><span class=\"me1\">Reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            <span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span><span class=\"br0\">(</span>c, i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>symbol<span class=\"sy0\">:</span> c, index<span class=\"sy0\">:</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"sy0\">.</span><span class=\"me1\">ToDictionary</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> p<span class=\"sy0\">.</span><span class=\"me1\">symbol</span>, p <span class=\"sy0\">=&gt;</span> p<span class=\"sy0\">.</span><span class=\"me1\">index</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> parameters<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>count <span class=\"sy0\">&gt;</span> <span class=\"nu0\">32</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Cannot have more than 32 parameters.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">string</span> header <span class=\"sy0\">=</span> count <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> expression <span class=\"sy0\">:</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>,<br/>            parameters<span class=\"sy0\">.</span><span class=\"me1\">OrderByDescending</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> p<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>p <span class=\"sy0\">=&gt;</span> p<span class=\"sy0\">.</span><span class=\"me1\">Key</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span> <span class=\"sy0\">+</span> expression<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>isPostfix<span class=\"br0\">)</span> expression <span class=\"sy0\">=</span> ConvertToPostfix<span class=\"br0\">(</span>expression<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> values <span class=\"sy0\">=</span> <span class=\"kw1\">default</span><span class=\"br0\">(</span>BitSet<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> stack <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Stack<span class=\"sy0\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span>expression<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> loop <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> count<span class=\"sy0\">;</span> loop <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> loop<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> token <span class=\"kw1\">in</span> expression<span class=\"br0\">)</span> stack<span class=\"sy0\">.</span><span class=\"me1\">Push</span><span class=\"br0\">(</span>token<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">bool</span> result <span class=\"sy0\">=</span> Evaluate<span class=\"br0\">(</span>stack, values, parameters<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>header <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>stack<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Invalid expression.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> header<span class=\"sy0\">;</span><br/>                header <span class=\"sy0\">=</span> <span class=\"kw1\">null</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw4\">string</span> line <span class=\"sy0\">=</span> <span class=\"br0\">(</span>count <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>result <span class=\"sy0\">?</span> trueConstant <span class=\"sy0\">:</span> falseConstant<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            line <span class=\"sy0\">=</span> <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, count<span class=\"br0\">)</span><br/>                <span class=\"sy0\">.</span><span class=\"kw1\">Select</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> values<span class=\"br0\">[</span>count <span class=\"sy0\">-</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">?</span> trueConstant <span class=\"sy0\">:</span> falseConstant<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> line<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> line<span class=\"sy0\">;</span><br/>            values<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">string</span> ConvertToPostfix<span class=\"br0\">(</span><span class=\"kw4\">string</span> infix<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> stack <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Stack<span class=\"sy0\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> postfix <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> StringBuilder<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span> c <span class=\"kw1\">in</span> infix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">switch</span> <span class=\"br0\">(</span><a href=\"http://www.google.com/search?q=typeof+msdn.microsoft.com\"><span class=\"kw3\">TypeOf</span></a><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> TokenType<span class=\"sy0\">.</span><span class=\"me1\">WhiteSpace</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> TokenType<span class=\"sy0\">.</span><span class=\"me1\">Constant</span><span class=\"sy0\">:</span><br/>            <span class=\"kw1\">case</span> TokenType<span class=\"sy0\">.</span><span class=\"me1\">Operand</span><span class=\"sy0\">:</span><br/>                postfix<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> TokenType<span class=\"sy0\">.</span><span class=\"kw1\">Operator</span><span class=\"sy0\">:</span><br/>                <span class=\"kw4\">int</span> precedence <span class=\"sy0\">=</span> Precedence<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">while</span> <span class=\"br0\">(</span>stack<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> Precedence<span class=\"br0\">(</span>stack<span class=\"sy0\">.</span><span class=\"me1\">Peek</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> precedence<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    postfix<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>stack<span class=\"sy0\">.</span><span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                stack<span class=\"sy0\">.</span><span class=\"me1\">Push</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> TokenType<span class=\"sy0\">.</span><span class=\"me1\">LeftParenthesis</span><span class=\"sy0\">:</span><br/>                stack<span class=\"sy0\">.</span><span class=\"me1\">Push</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> TokenType<span class=\"sy0\">.</span><span class=\"me1\">RightParenthesis</span><span class=\"sy0\">:</span><br/>                <span class=\"kw4\">char</span> top <span class=\"sy0\">=</span> <span class=\"kw1\">default</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">while</span> <span class=\"br0\">(</span>stack<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    top <span class=\"sy0\">=</span> stack<span class=\"sy0\">.</span><span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>top <span class=\"sy0\">==</span> <span class=\"st0\">'('</span><span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">else</span> postfix<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>top<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>top <span class=\"sy0\">!=</span> <span class=\"st0\">'('</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"No matching left parenthesis.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Invalid character: \"</span> <span class=\"sy0\">+</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>stack<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">char</span> top <span class=\"sy0\">=</span> stack<span class=\"sy0\">.</span><span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>top <span class=\"sy0\">==</span> <span class=\"st0\">'('</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"No matching right parenthesis.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            postfix<span class=\"sy0\">.</span><span class=\"me1\">Append</span><span class=\"br0\">(</span>top<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> postfix<span class=\"sy0\">.</span><span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">bool</span> Evaluate<span class=\"br0\">(</span>Stack<span class=\"sy0\">&lt;</span><span class=\"kw4\">char</span><span class=\"sy0\">&gt;</span> expression, BitSet values, IDictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">char</span>, <span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> parameters<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>expression<span class=\"sy0\">.</span><span class=\"me1\">Count</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Invalid expression.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">char</span> c <span class=\"sy0\">=</span> expression<span class=\"sy0\">.</span><span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        TokenType type <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=typeof+msdn.microsoft.com\"><span class=\"kw3\">TypeOf</span></a><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>type <span class=\"sy0\">==</span> TokenType<span class=\"sy0\">.</span><span class=\"me1\">WhiteSpace</span><span class=\"br0\">)</span> type <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=typeof+msdn.microsoft.com\"><span class=\"kw3\">TypeOf</span></a><span class=\"br0\">(</span>c <span class=\"sy0\">=</span> expression<span class=\"sy0\">.</span><span class=\"me1\">Pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>type<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">case</span> TokenType<span class=\"sy0\">.</span><span class=\"me1\">Constant</span><span class=\"sy0\">:</span><br/>            <span class=\"kw1\">return</span> c <span class=\"sy0\">==</span> trueConstant<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> TokenType<span class=\"sy0\">.</span><span class=\"me1\">Operand</span><span class=\"sy0\">:</span><br/>            <span class=\"kw1\">return</span> values<span class=\"br0\">[</span>parameters<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">case</span> TokenType<span class=\"sy0\">.</span><span class=\"kw1\">Operator</span><span class=\"sy0\">:</span><br/>            <span class=\"kw4\">bool</span> right <span class=\"sy0\">=</span> Evaluate<span class=\"br0\">(</span>expression, values, parameters<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">Operator</span> op <span class=\"sy0\">=</span> operators<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>op<span class=\"sy0\">.</span><span class=\"me1\">Arity</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> op<span class=\"sy0\">.</span><span class=\"me1\">Function</span><span class=\"br0\">(</span>right, right<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">bool</span> left <span class=\"sy0\">=</span> Evaluate<span class=\"br0\">(</span>expression, values, parameters<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> op<span class=\"sy0\">.</span><span class=\"me1\">Function</span><span class=\"br0\">(</span>left, right<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">default</span><span class=\"sy0\">:</span><br/>            <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Invalid character: \"</span> <span class=\"sy0\">+</span> c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> TokenType <a href=\"http://www.google.com/search?q=typeof+msdn.microsoft.com\"><span class=\"kw3\">TypeOf</span></a><span class=\"br0\">(</span><span class=\"kw4\">char</span> c<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy0\">.</span><span class=\"me1\">IsWhiteSpace</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> TokenType<span class=\"sy0\">.</span><span class=\"me1\">WhiteSpace</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"st0\">'('</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> TokenType<span class=\"sy0\">.</span><span class=\"me1\">LeftParenthesis</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> <span class=\"st0\">')'</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> TokenType<span class=\"sy0\">.</span><span class=\"me1\">RightParenthesis</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">==</span> trueConstant <span class=\"sy0\">||</span> c <span class=\"sy0\">==</span> falseConstant<span class=\"br0\">)</span> <span class=\"kw1\">return</span> TokenType<span class=\"sy0\">.</span><span class=\"me1\">Constant</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>operators<span class=\"sy0\">.</span><span class=\"me1\">ContainsKey</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> TokenType<span class=\"sy0\">.</span><span class=\"kw1\">Operator</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"sy0\">.</span><span class=\"me1\">IsLetter</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> TokenType<span class=\"sy0\">.</span><span class=\"me1\">Operand</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> TokenType<span class=\"sy0\">.</span><span class=\"me1\">Unknown</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> Precedence<span class=\"br0\">(</span><span class=\"kw4\">char</span> op<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> operators<span class=\"sy0\">.</span><span class=\"me1\">TryGetValue</span><span class=\"br0\">(</span>op, <span class=\"kw1\">out</span> <span class=\"kw1\">var</span> o<span class=\"br0\">)</span> <span class=\"sy0\">?</span> o<span class=\"sy0\">.</span><span class=\"me1\">Precedence</span> <span class=\"sy0\">:</span> <span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">MinValue</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> <span class=\"kw1\">Operator</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">Operator</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> symbol, <span class=\"kw4\">int</span> precedence, Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">bool</span>, <span class=\"kw4\">bool</span><span class=\"sy0\">&gt;</span> function<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span>symbol, precedence, <span class=\"nu0\">1</span>, <span class=\"br0\">(</span>l, r<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> function<span class=\"br0\">(</span>r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">Operator</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> symbol, <span class=\"kw4\">int</span> precedence, Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">bool</span>, <span class=\"kw4\">bool</span>, <span class=\"kw4\">bool</span><span class=\"sy0\">&gt;</span> function<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span>symbol, precedence, <span class=\"nu0\">2</span>, function<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">Operator</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> symbol, <span class=\"kw4\">int</span> precedence, <span class=\"kw4\">int</span> arity, Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">bool</span>, <span class=\"kw4\">bool</span>, <span class=\"kw4\">bool</span><span class=\"sy0\">&gt;</span> function<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw1\">this</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        Symbol <span class=\"sy0\">=</span> symbol<span class=\"sy0\">;</span><br/>        Precedence <span class=\"sy0\">=</span> precedence<span class=\"sy0\">;</span><br/>        Arity <span class=\"sy0\">=</span> arity<span class=\"sy0\">;</span><br/>        Function <span class=\"sy0\">=</span> function<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">char</span> Symbol <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> Precedence <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">int</span> Arity <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"kw1\">public</span> Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">bool</span>, <span class=\"kw4\">bool</span>, <span class=\"kw4\">bool</span><span class=\"sy0\">&gt;</span> Function <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> OperatorCollection <span class=\"sy0\">:</span> IEnumerable<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">readonly</span> IDictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">char</span>, <span class=\"kw1\">Operator</span><span class=\"sy0\">&gt;</span> operators<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">internal</span> OperatorCollection<span class=\"br0\">(</span>IDictionary<span class=\"sy0\">&lt;</span><span class=\"kw4\">char</span>, <span class=\"kw1\">Operator</span><span class=\"sy0\">&gt;</span> operators<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">operators</span> <span class=\"sy0\">=</span> operators<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> <span class=\"kw1\">Add</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> symbol, <span class=\"kw4\">int</span> precedence, Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">bool</span>, <span class=\"kw4\">bool</span><span class=\"sy0\">&gt;</span> function<span class=\"br0\">)</span><br/>        <span class=\"sy0\">=&gt;</span> operators<span class=\"br0\">[</span>symbol<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw1\">Operator</span><span class=\"br0\">(</span>symbol, precedence, function<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> <span class=\"kw1\">Add</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> symbol, <span class=\"kw4\">int</span> precedence, Func<span class=\"sy0\">&lt;</span><span class=\"kw4\">bool</span>, <span class=\"kw4\">bool</span>, <span class=\"kw4\">bool</span><span class=\"sy0\">&gt;</span> function<span class=\"br0\">)</span><br/>        <span class=\"sy0\">=&gt;</span> operators<span class=\"br0\">[</span>symbol<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw1\">Operator</span><span class=\"br0\">(</span>symbol, precedence, function<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">void</span> <span class=\"kw1\">Remove</span><span class=\"br0\">(</span><span class=\"kw4\">char</span> symbol<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> operators<span class=\"sy0\">.</span><span class=\"kw1\">Remove</span><span class=\"br0\">(</span>symbol<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    IEnumerator IEnumerable<span class=\"sy0\">.</span><span class=\"me1\">GetEnumerator</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> operators<span class=\"sy0\">.</span><span class=\"me1\">Values</span><span class=\"sy0\">.</span><span class=\"me1\">GetEnumerator</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> BitSet<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw4\">int</span> bits<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> BitSet<span class=\"br0\">(</span><span class=\"kw4\">int</span> bits<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">this</span><span class=\"sy0\">.</span><span class=\"me1\">bits</span> <span class=\"sy0\">=</span> bits<span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> BitSet <span class=\"kw1\">operator</span> <span class=\"sy0\">++</span><span class=\"br0\">(</span>BitSet bitSet<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BitSet<span class=\"br0\">(</span>bitSet<span class=\"sy0\">.</span><span class=\"me1\">bits</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw4\">bool</span> <span class=\"kw1\">this</span><span class=\"br0\">[</span><span class=\"kw4\">int</span> index<span class=\"br0\">]</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>bits <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> index<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        TruthTable tt <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> TruthTable<span class=\"br0\">(</span><span class=\"st0\">'F'</span>, <span class=\"st0\">'T'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Operators <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>                <span class=\"br0\">{</span> <span class=\"st0\">'!'</span>, <span class=\"nu0\">6</span>, r <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span>r <span class=\"br0\">}</span>,<br/>                <span class=\"br0\">{</span> <span class=\"st0\">'&amp;'</span>, <span class=\"nu0\">5</span>, <span class=\"br0\">(</span>l, r<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> l <span class=\"sy0\">&amp;&amp;</span> r <span class=\"br0\">}</span>,<br/>                <span class=\"br0\">{</span> <span class=\"st0\">'^'</span>, <span class=\"nu0\">4</span>, <span class=\"br0\">(</span>l, r<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> l <span class=\"sy0\">^</span> r <span class=\"br0\">}</span>,<br/>                <span class=\"br0\">{</span> <span class=\"st0\">'|'</span>, <span class=\"nu0\">3</span>, <span class=\"br0\">(</span>l, r<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> l <span class=\"sy0\">||</span> r <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"co1\">//Add a crazy operator:</span><br/>        <span class=\"kw1\">var</span> rng <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        tt<span class=\"sy0\">.</span><span class=\"me1\">Operators</span><span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span><span class=\"st0\">'?'</span>, <span class=\"nu0\">6</span>, r <span class=\"sy0\">=&gt;</span> rng<span class=\"sy0\">.</span><span class=\"me1\">NextDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0.5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> expressions <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>            <span class=\"st0\">\"!!!T\"</span>,<br/>            <span class=\"st0\">\"?T\"</span>,<br/>            <span class=\"st0\">\"F &amp; x | T\"</span>,<br/>            <span class=\"st0\">\"F &amp; (x | T\"</span>,<br/>            <span class=\"st0\">\"F &amp; x | T)\"</span>,<br/>            <span class=\"st0\">\"a\u00a0! (a &amp; a)\"</span>,<br/>            <span class=\"st0\">\"a | (a * a)\"</span>,<br/>            <span class=\"st0\">\"a ^ T &amp; (b &amp;\u00a0!c)\"</span>,<br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span> expression <span class=\"kw1\">in</span> expressions<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            tt<span class=\"sy0\">.</span><span class=\"me1\">PrintTruthTable</span><span class=\"br0\">(</span>expression<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">//Define a different language</span><br/>        tt <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> TruthTable<span class=\"br0\">(</span><span class=\"st0\">'0'</span>, <span class=\"st0\">'1'</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Operators <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>                <span class=\"br0\">{</span> <span class=\"st0\">'-'</span>, <span class=\"nu0\">6</span>, r <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span>r <span class=\"br0\">}</span>,<br/>                <span class=\"br0\">{</span> <span class=\"st0\">'^'</span>, <span class=\"nu0\">5</span>, <span class=\"br0\">(</span>l, r<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> l <span class=\"sy0\">&amp;&amp;</span> r <span class=\"br0\">}</span>,<br/>                <span class=\"br0\">{</span> <span class=\"st0\">'v'</span>, <span class=\"nu0\">3</span>, <span class=\"br0\">(</span>l, r<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> l <span class=\"sy0\">||</span> r <span class=\"br0\">}</span>,<br/>                <span class=\"br0\">{</span> <span class=\"st0\">'&gt;'</span>, <span class=\"nu0\">2</span>, <span class=\"br0\">(</span>l, r<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span>l <span class=\"sy0\">||</span> r <span class=\"br0\">}</span>,<br/>                <span class=\"br0\">{</span> <span class=\"st0\">'='</span>, <span class=\"nu0\">1</span>, <span class=\"br0\">(</span>l, r<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> l <span class=\"sy0\">==</span> r <span class=\"br0\">}</span>,<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        expressions <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            <span class=\"st0\">\"-X v 0 = X ^ 1\"</span>,<br/>            <span class=\"st0\">\"(H &gt; M) ^ (S &gt; H) &gt; (S &gt; M)\"</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">string</span> expression <span class=\"kw1\">in</span> expressions<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            tt<span class=\"sy0\">.</span><span class=\"me1\">PrintTruthTable</span><span class=\"br0\">(</span>expression<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 89, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">array</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">struct</span> Var <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">char</span> name<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">bool</span> val<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw4\">const</span> <span class=\"kw4\">string</span> expr<span class=\"sy0\">;</span><br/>Var<span class=\"br0\">[</span><span class=\"br0\">]</span> vars<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> pop<span class=\"br0\">(</span><span class=\"kw2\">ref</span> <span class=\"kw4\">bool</span><span class=\"br0\">[</span><span class=\"br0\">]</span> arr<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">const</span> last <span class=\"sy0\">=</span> arr.<span class=\"me1\">back</span><span class=\"sy0\">;</span><br/>    arr.<span class=\"me1\">popBack</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> last<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> isOperator <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">char</span> c<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"sy0\">=&gt;</span> <span class=\"st0\">\"&amp;|!^\"</span>.<span class=\"me1\">canFind</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> varsCountUntil <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">char</span> c<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> <span class=\"sy0\">=&gt;</span><br/>    .<span class=\"me1\">vars</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>v <span class=\"sy0\">=&gt;</span> v.<span class=\"me1\">name</span><span class=\"br0\">)</span>.<span class=\"me1\">countUntil</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span>.<span class=\"me1\">Nullable</span><span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> evalExp<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">bool</span><span class=\"br0\">[</span><span class=\"br0\">]</span> stack<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> e<span class=\"sy0\">;</span> .<span class=\"me1\">expr</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e <span class=\"sy0\">==</span> <span class=\"st0\">'T'</span><span class=\"br0\">)</span><br/>            stack <span class=\"sy0\">~=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>e <span class=\"sy0\">==</span> <span class=\"st0\">'F'</span><span class=\"br0\">)</span><br/>            stack <span class=\"sy0\">~=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>e.<span class=\"me1\">varsCountUntil</span>.<span class=\"me1\">isNull</span><span class=\"br0\">)</span><br/>            stack <span class=\"sy0\">~=</span> .<span class=\"me1\">vars</span><span class=\"br0\">[</span>e.<span class=\"me1\">varsCountUntil</span>.<span class=\"me1\">get</span><span class=\"br0\">]</span>.<span class=\"me1\">val</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">else</span> <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'&amp;'</span><span class=\"sy0\">:</span><br/>                stack <span class=\"sy0\">~=</span> stack.<span class=\"me1\">pop</span> <span class=\"sy0\">&amp;</span> stack.<span class=\"me1\">pop</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'|'</span><span class=\"sy0\">:</span><br/>                stack <span class=\"sy0\">~=</span> stack.<span class=\"me1\">pop</span> <span class=\"sy0\">|</span> stack.<span class=\"me1\">pop</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'!'</span><span class=\"sy0\">:</span><br/>                stack <span class=\"sy0\">~=</span> <span class=\"sy0\">!</span>stack.<span class=\"me1\">pop</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">'^'</span><span class=\"sy0\">:</span><br/>                stack <span class=\"sy0\">~=</span> stack.<span class=\"me1\">pop</span> <span class=\"sy0\">^</span> stack.<span class=\"me1\">pop</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw2\">default</span><span class=\"sy0\">:</span><br/>                <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Exception</span><span class=\"br0\">(</span><span class=\"st0\">\"Non-conformant character '\"</span> <span class=\"sy0\">~</span><br/>                                    e <span class=\"sy0\">~</span> <span class=\"st0\">\"' in expression.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>stack.<span class=\"me1\">length</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> stack.<span class=\"me1\">back</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> setVariables<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">size_t</span> pos<span class=\"br0\">)</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>pos <span class=\"sy0\">&lt;=</span> .<span class=\"me1\">vars</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pos <span class=\"sy0\">==</span> .<span class=\"me1\">vars</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> writefln<span class=\"br0\">(</span><span class=\"st0\">\"%-(%s\u00a0%)\u00a0%s\"</span><span class=\"sy0\">,</span><br/>                        .<span class=\"me1\">vars</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>v <span class=\"sy0\">=&gt;</span> v.<span class=\"me1\">val</span> <span class=\"sy0\">?</span> <span class=\"st0\">\"T\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"F\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                        evalExp <span class=\"sy0\">?</span> <span class=\"st0\">\"T\"</span> <span class=\"sy0\">:</span> <span class=\"st0\">\"F\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    .<span class=\"me1\">vars</span><span class=\"br0\">[</span>pos<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">=</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    setVariables<span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    .<span class=\"me1\">vars</span><span class=\"br0\">[</span>pos<span class=\"br0\">]</span>.<span class=\"me1\">val</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    setVariables<span class=\"br0\">(</span>pos <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">static</span> <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"st0\">\"Accepts single-character variables (except for 'T' and 'F',<br/>which specify explicit true or false values), postfix, with<br/>&amp;|!^ for and, or, not, xor, respectively; optionally<br/>seperated by whitespace.\"</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"st0\">\"Boolean expression: \"</span>.<span class=\"me1\">write</span><span class=\"sy0\">;</span><br/>    .<span class=\"me1\">expr</span> <span class=\"sy0\">=</span> readln.<span class=\"me1\">split</span>.<span class=\"me1\">join</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> e<span class=\"sy0\">;</span> expr<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>e.<span class=\"me1\">isOperator</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"st0\">\"TF\"</span>.<span class=\"me1\">canFind</span><span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span><br/>            e.<span class=\"me1\">varsCountUntil</span>.<span class=\"me1\">isNull</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">vars</span> <span class=\"sy0\">~=</span> Var<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>.<span class=\"me1\">vars</span>.<span class=\"me1\">empty</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%-(%s\u00a0%)\u00a0%s\"</span><span class=\"sy0\">,</span> .<span class=\"me1\">vars</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>v <span class=\"sy0\">=&gt;</span> v.<span class=\"me1\">name</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> .<span class=\"me1\">expr</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    setVariables<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 26, "block": "<pre class=\"text highlighted_source\">print-line lst end:<br/>\tfor v in reversed copy lst:<br/>\t\tprint\\( v chr 9 )<br/>\tprint end<br/>\u00a0<br/>(print-truth-table) t n func:<br/>\tif n:<br/>\t\t(print-truth-table) push-through copy t 0 -- n @func<br/>\t\t(print-truth-table) push-through copy t 1 -- n @func<br/>\telse:<br/>\t\tprint-line t func for in copy t<br/>\u00a0<br/>print-truth-table vars name func:<br/>\tprint-line vars name<br/>\t(print-truth-table) [] len vars @func<br/>\tprint \"\" # extra new line<br/>\u00a0<br/>stu s t u:<br/>\tor s /= t u<br/>\u00a0<br/>abcd a b c d:<br/>\t/= a /= b /= c d<br/>\u00a0<br/>print-truth-table [ \"A\" \"B\" ] \"A ^ B\" @/=<br/>print-truth-table [ \"S\" \"T\" \"U\" ] \"S | (T ^ U)\" @stu<br/>print-truth-table [ \"A\" \"B\" \"C\" \"D\" ] \"A ^ (B ^ (C ^ D))\" @abcd</pre>"}, {"lang": "Factor", "loc": 58, "block": "<pre class=\"text highlighted_source\">USING: arrays combinators eval formatting io kernel listener<br/>math.combinatorics prettyprint qw sequences splitting<br/>vocabs.parser\u00a0;<br/>IN: rosetta-code.truth-table<br/>\u00a0<br/>: prompt ( -- str )<br/>    \"Please enter a boolean expression using 1-long\" print<br/>    \"variable names and postfix notation. Available\" print<br/>    \"operators are and, or, not, and xor. Example:\"  print<br/>    \"&gt; a b and\"                                      print nl<br/>    \"&gt; \" write readln nl\u00a0;<br/>\u00a0<br/>: replace-var ( str -- str' )<br/>    dup length 1 = [ drop \"%s\" ] when\u00a0;<br/>\u00a0<br/>: replace-vars ( str -- str' )<br/>    \" \" split [ replace-var ] map \" \" join\u00a0;<br/>\u00a0<br/>: extract-vars ( str -- seq )<br/>    \" \" split [ length 1 = ] filter\u00a0;<br/>\u00a0<br/>: count-vars ( str -- n )<br/>    \" \" split [ \"%s\" = ] count\u00a0;<br/>\u00a0<br/>: truth-table ( n -- seq )<br/>    qw{ t f } swap selections\u00a0;<br/>\u00a0<br/>: print-row ( seq -- )<br/>    [ write bl ] each\u00a0;<br/>\u00a0<br/>: print-table ( seq -- )<br/>    [ print-row nl ] each\u00a0;<br/>\u00a0<br/>! Adds a column to the end of a two-dimensional array.<br/>: add-col ( seq col -- seq' )<br/>    [ flip ] dip 1array append flip\u00a0;<br/>\u00a0<br/>: header ( str -- )<br/>    [ extract-vars ] [ ] bi<br/>    [ print-row \"| \" write ] [ print ] bi*<br/>    \"=================\" print\u00a0;<br/>\u00a0<br/>: solve-expr ( seq str --\u00a0? )<br/>    vsprintf [ \"kernel\" use-vocab ( -- x ) (eval) ]<br/>    with-interactive-vocabs\u00a0;<br/>\u00a0<br/>: results ( str -- seq )<br/>    replace-vars dup count-vars truth-table<br/>    [ swap solve-expr unparse ] with map\u00a0;<br/>\u00a0<br/>: main ( -- )<br/>    prompt<br/>    [ header t ]<br/>    [ replace-vars count-vars truth-table ]<br/>    [ results [ \"| \" prepend ] map ] tri<br/>    add-col print-table drop\u00a0;<br/>\u00a0<br/>MAIN: main</pre>"}, {"lang": "Go", "loc": 143, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"bufio\"</span><br/>    <span class=\"st0\">\"errors\"</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"go/ast\"</span><br/>    <span class=\"st0\">\"go/parser\"</span><br/>    <span class=\"st0\">\"go/token\"</span><br/>    <span class=\"st0\">\"os\"</span><br/>    <span class=\"st0\">\"reflect\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    in <span class=\"sy2\">:=</span> bufio<span class=\"sy3\">.</span>NewScanner<span class=\"sy1\">(</span>os<span class=\"sy3\">.</span>Stdin<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"Expr:  \"</span><span class=\"sy1\">)</span><br/>        in<span class=\"sy3\">.</span>Scan<span class=\"sy1\">()</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">:=</span> in<span class=\"sy3\">.</span>Err<span class=\"sy1\">();</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>tt<span class=\"sy1\">(</span>in<span class=\"sy3\">.</span>Text<span class=\"sy1\">())</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> tt<span class=\"sy1\">(</span>expr <span class=\"kw4\">string</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"co1\">// call library parser</span><br/>    tree<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> parser<span class=\"sy3\">.</span>ParseExpr<span class=\"sy1\">(</span>expr<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>err<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// create handy object to pass around</span><br/>    e <span class=\"sy2\">:=</span> &amp;evaluator<span class=\"sy1\">{</span><span class=\"kw2\">nil</span><span class=\"sy1\">,</span> <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">]</span><span class=\"kw4\">bool</span><span class=\"sy1\">{},</span> tree<span class=\"sy1\">}</span><br/>    <span class=\"co1\">// library tree traversal function calls e.Visit for each node.</span><br/>    <span class=\"co1\">// use this to collect variables of the expression.</span><br/>    ast<span class=\"sy3\">.</span><span class=\"me1\">Walk</span><span class=\"sy1\">(</span>e<span class=\"sy1\">,</span> tree<span class=\"sy1\">)</span><br/>    <span class=\"co1\">// print headings for truth table</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> n <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> e<span class=\"sy3\">.</span>names <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%-6s\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> expr<span class=\"sy1\">)</span><br/>    <span class=\"co1\">// start recursive table generation function on first variable</span><br/>    e<span class=\"sy3\">.</span>evalVar<span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> evaluator <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    names <span class=\"sy1\">[]</span><span class=\"kw4\">string</span>        <span class=\"co1\">// variables, in order of appearance</span><br/>    val   <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">]</span><span class=\"kw4\">bool</span> <span class=\"co1\">// map variables to boolean values</span><br/>    tree  <a href=\"http://golang.org/search?q=ast.Expr\"><span class=\"kw5\">ast.<span class=\"me1\">Expr</span></span></a>        <span class=\"co1\">// parsed expression as ast</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// visitor function called by library Walk function.</span><br/><span class=\"co1\">// builds a list of unique variable names.</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>e <span class=\"sy3\">*</span>evaluator<span class=\"sy1\">)</span> Visit<span class=\"sy1\">(</span>n <a href=\"http://golang.org/search?q=ast.Node\"><span class=\"kw5\">ast.<span class=\"me1\">Node</span></span></a><span class=\"sy1\">)</span> <a href=\"http://golang.org/search?q=ast.Visitor\"><span class=\"kw5\">ast.<span class=\"me1\">Visitor</span></span></a> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> id<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> n<span class=\"sy3\">.</span><span class=\"sy1\">(</span><span class=\"sy3\">*</span>ast<span class=\"sy3\">.</span>Ident<span class=\"sy1\">);</span> ok <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>e<span class=\"sy3\">.</span>val<span class=\"sy1\">[</span>id<span class=\"sy3\">.</span>Name<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            e<span class=\"sy3\">.</span>names <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>e<span class=\"sy3\">.</span>names<span class=\"sy1\">,</span> id<span class=\"sy3\">.</span>Name<span class=\"sy1\">)</span><br/>            e<span class=\"sy3\">.</span>val<span class=\"sy1\">[</span>id<span class=\"sy3\">.</span>Name<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> e<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// method recurses for each variable of the truth table, assigning it to</span><br/><span class=\"co1\">// false, then true.  At bottom of recursion, when all variables are</span><br/><span class=\"co1\">// assigned, it evaluates the expression and outputs one line of the</span><br/><span class=\"co1\">// truth table</span><br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>e <span class=\"sy3\">*</span>evaluator<span class=\"sy1\">)</span> evalVar<span class=\"sy1\">(</span>nx <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> nx <span class=\"sy3\">==</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>e<span class=\"sy3\">.</span>names<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// base case</span><br/>        v<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> evalNode<span class=\"sy1\">(</span>e<span class=\"sy3\">.</span>tree<span class=\"sy1\">,</span> e<span class=\"sy3\">.</span>val<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> err<span class=\"sy1\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// print variable values</span><br/>        <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> n <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> e<span class=\"sy3\">.</span>names <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%-6t\"</span><span class=\"sy1\">,</span> e<span class=\"sy3\">.</span><span class=\"me1\">val</span><span class=\"sy1\">[</span>n<span class=\"sy1\">])</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// print expression value</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> v<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"co1\">// recursive case</span><br/>    <span class=\"kw1\">for</span> _<span class=\"sy1\">,</span> v <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> <span class=\"sy1\">[]</span><span class=\"kw4\">bool</span><span class=\"sy1\">{</span><span class=\"kw2\">false</span><span class=\"sy1\">,</span> <span class=\"kw2\">true</span><span class=\"sy1\">}</span> <span class=\"sy1\">{</span><br/>        e<span class=\"sy3\">.</span>val<span class=\"sy1\">[</span>e<span class=\"sy3\">.</span>names<span class=\"sy1\">[</span>nx<span class=\"sy1\">]]</span> <span class=\"sy2\">=</span> v<br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>e<span class=\"sy3\">.</span>evalVar<span class=\"sy1\">(</span>nx <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"co1\">// recursively evaluate ast</span><br/><span class=\"kw4\">func</span> evalNode<span class=\"sy1\">(</span>nd <a href=\"http://golang.org/search?q=ast.Node\"><span class=\"kw5\">ast.<span class=\"me1\">Node</span></span></a><span class=\"sy1\">,</span> val <span class=\"kw4\">map</span><span class=\"sy1\">[</span><span class=\"kw4\">string</span><span class=\"sy1\">]</span><span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">switch</span> n <span class=\"sy2\">:=</span> nd<span class=\"sy3\">.</span><span class=\"sy1\">(</span><span class=\"kw1\">type</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">case</span> <span class=\"sy3\">*</span>ast<span class=\"sy3\">.</span>Ident<span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> val<span class=\"sy1\">[</span>n<span class=\"sy3\">.</span>Name<span class=\"sy1\">],</span> <span class=\"kw2\">nil</span><br/>    <span class=\"kw1\">case</span> <span class=\"sy3\">*</span>ast<span class=\"sy3\">.</span>BinaryExpr<span class=\"sy1\">:</span><br/>        x<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> evalNode<span class=\"sy1\">(</span>n<span class=\"sy3\">.</span>X<span class=\"sy1\">,</span> val<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy1\">,</span> err<br/>        <span class=\"sy1\">}</span><br/>        y<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> evalNode<span class=\"sy1\">(</span>n<span class=\"sy3\">.</span>Y<span class=\"sy1\">,</span> val<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy1\">,</span> err<br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">switch</span> n<span class=\"sy3\">.</span>Op <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">case</span> token<span class=\"sy3\">.</span>AND<span class=\"sy1\">:</span><br/>            <span class=\"kw1\">return</span> x &amp;&amp; y<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><br/>        <span class=\"kw1\">case</span> token<span class=\"sy3\">.</span>OR<span class=\"sy1\">:</span><br/>            <span class=\"kw1\">return</span> x <span class=\"sy3\">||</span> y<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><br/>        <span class=\"kw1\">case</span> token<span class=\"sy3\">.</span>XOR<span class=\"sy1\">:</span><br/>            <span class=\"kw1\">return</span> x <span class=\"sy2\">!=</span> y<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><br/>        <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>            <span class=\"kw1\">return</span> unsup<span class=\"sy1\">(</span>n<span class=\"sy3\">.</span>Op<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">case</span> <span class=\"sy3\">*</span>ast<span class=\"sy3\">.</span>UnaryExpr<span class=\"sy1\">:</span><br/>        x<span class=\"sy1\">,</span> err <span class=\"sy2\">:=</span> evalNode<span class=\"sy1\">(</span>n<span class=\"sy3\">.</span>X<span class=\"sy1\">,</span> val<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> err <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy1\">,</span> err<br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">switch</span> n<span class=\"sy3\">.</span>Op <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">case</span> token<span class=\"sy3\">.</span>XOR<span class=\"sy1\">:</span><br/>            <span class=\"kw1\">return</span> <span class=\"sy3\">!</span>x<span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><br/>        <span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>            <span class=\"kw1\">return</span> unsup<span class=\"sy1\">(</span>n<span class=\"sy3\">.</span>Op<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">case</span> <span class=\"sy3\">*</span>ast<span class=\"sy3\">.</span>ParenExpr<span class=\"sy1\">:</span><br/>        <span class=\"kw1\">return</span> evalNode<span class=\"sy1\">(</span>n<span class=\"sy3\">.</span>X<span class=\"sy1\">,</span> val<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> unsup<span class=\"sy1\">(</span>reflect<span class=\"sy3\">.</span>TypeOf<span class=\"sy1\">(</span>nd<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> unsup<span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"kw4\">interface</span><span class=\"sy1\">{})</span> <span class=\"sy1\">(</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> error<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy1\">,</span> errors<span class=\"sy3\">.</span>New<span class=\"sy1\">(</span>fmt<span class=\"sy3\">.</span>Sprintf<span class=\"sy1\">(</span><span class=\"st0\">\"%v unsupported\"</span><span class=\"sy1\">,</span> i<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 34, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM\"><span class=\"kw3\">mapM</span></a><span class=\"sy0\">,</span> foldM<span class=\"sy0\">,</span> forever<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unwords\"><span class=\"kw3\">unwords</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unlines\"><span class=\"kw3\">unlines</span></a><span class=\"sy0\">,</span> nub<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">(</span>fromJust<span class=\"br0\">)</span><br/>\u00a0<br/>truthTable expr <span class=\"sy0\">=</span> <span class=\"kw1\">let</span><br/>    tokens <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:words\"><span class=\"kw3\">words</span></a> expr<br/>    operators <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"st0\">\"&amp;\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"|\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"!\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"^\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"=&gt;\"</span><span class=\"br0\">]</span><br/>    variables <span class=\"sy0\">=</span> nub <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span>`<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` operators<span class=\"br0\">)</span><span class=\"br0\">)</span> tokens<br/>    table <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> variables <span class=\"sy0\">&lt;$&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM\"><span class=\"kw3\">mapM</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:const\"><span class=\"kw3\">const</span></a> <span class=\"br0\">[</span>True<span class=\"sy0\">,</span>False<span class=\"br0\">]</span><span class=\"br0\">)</span> variables<br/>    results <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span>\\r <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:snd\"><span class=\"kw3\">snd</span></a> r<span class=\"br0\">)</span> <span class=\"sy0\">++</span> <span class=\"br0\">(</span>calculate tokens<span class=\"br0\">)</span> r<span class=\"br0\">)</span> table<br/>    header <span class=\"sy0\">=</span> variables <span class=\"sy0\">++</span> <span class=\"br0\">[</span><span class=\"st0\">\"result\"</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">in</span><br/>      showTable <span class=\"sy0\">$</span> header\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a><span class=\"br0\">)</span> results<br/>\u00a0<br/><span class=\"co1\">-- Performs evaluation of token sequence in a given context.</span><br/><span class=\"co1\">-- The context is an assoc-list, which binds variable and it's value.</span><br/><span class=\"co1\">-- Here the monad is simple ((-&gt;) r).</span><br/>calculate <span class=\"sy0\">::</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><span class=\"br0\">]</span><br/>calculate <span class=\"sy0\">=</span> foldM interprete <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span><br/>    interprete <span class=\"br0\">(</span>x:y:s<span class=\"br0\">)</span> <span class=\"st0\">\"&amp;\"</span>  <span class=\"sy0\">=</span> <span class=\"br0\">(</span>: s<span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> pure <span class=\"br0\">(</span>x <span class=\"sy0\">&amp;&amp;</span> y<span class=\"br0\">)</span><br/>    interprete <span class=\"br0\">(</span>x:y:s<span class=\"br0\">)</span> <span class=\"st0\">\"|\"</span>  <span class=\"sy0\">=</span> <span class=\"br0\">(</span>: s<span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> pure <span class=\"br0\">(</span>x <span class=\"sy0\">||</span> y<span class=\"br0\">)</span><br/>    interprete <span class=\"br0\">(</span>x:y:s<span class=\"br0\">)</span> <span class=\"st0\">\"^\"</span>  <span class=\"sy0\">=</span> <span class=\"br0\">(</span>: s<span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> pure <span class=\"br0\">(</span>x <span class=\"sy0\">/=</span> y<span class=\"br0\">)</span><br/>    interprete <span class=\"br0\">(</span>x:y:s<span class=\"br0\">)</span> <span class=\"st0\">\"=&gt;\"</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>: s<span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> pure <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> y <span class=\"sy0\">||</span> x<span class=\"br0\">)</span><br/>    interprete <span class=\"br0\">(</span>x:s<span class=\"br0\">)</span>   <span class=\"st0\">\"!\"</span>  <span class=\"sy0\">=</span> <span class=\"br0\">(</span>: s<span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> pure <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> x<span class=\"br0\">)</span><br/>    interprete s var        <span class=\"sy0\">=</span> <span class=\"br0\">(</span>: s<span class=\"br0\">)</span> <span class=\"sy0\">&lt;$&gt;</span> fromJust <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lookup\"><span class=\"kw3\">lookup</span></a> var<br/>\u00a0<br/><span class=\"co1\">-- pretty printing</span><br/>showTable tbl <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unlines\"><span class=\"kw3\">unlines</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unwords\"><span class=\"kw3\">unwords</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> align<span class=\"br0\">)</span> tbl<br/>  <span class=\"kw1\">where</span><br/>    align txt <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> colWidth <span class=\"sy0\">$</span> txt <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:repeat\"><span class=\"kw3\">repeat</span></a> <span class=\"st0\">' '</span><br/>    colWidth <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:max\"><span class=\"kw3\">max</span></a> <span class=\"nu0\">6</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:maximum\"><span class=\"kw3\">maximum</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:head\"><span class=\"kw3\">head</span></a> tbl<span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">=</span> forever <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:getLine\"><span class=\"kw3\">getLine</span></a> <span class=\"sy0\">&gt;&gt;=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> truthTable</pre>"}, {"lang": "J", "loc": 7, "block": "<pre class=\"j highlighted_source\">truthTable=:<span class=\"nu0\">3</span>\u00a0:<span class=\"nu0\">0</span><br/>  <span class=\"kw1\">assert.</span> -. <span class=\"nu0\">1</span> e. <span class=\"st_h\">'data expr names table'</span> e.&amp;;: <span class=\"kw2\">y</span><br/>  names=. ~. <span class=\"sy0\">(</span>#~ <span class=\"nu0\">_1</span> &lt;: nc<span class=\"sy0\">)</span>\u00a0;:expr=. <span class=\"kw2\">y</span><br/>  data=. #:i.<span class=\"nu0\">2</span>^#names<br/>  <span class=\"sy0\">(</span>names<span class=\"sy0\">)</span>=. |:data<br/>  <span class=\"sy0\">(</span><span class=\"st_h\">' '</span>,;:inv names,&lt;expr<span class=\"sy0\">)</span>,<span class=\"sy0\">(</span><span class=\"nu0\">1</span>+#@&gt;names,&lt;expr<span class=\"sy0\">)</span>\":data,.\".expr<br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 60, "block": "<pre class=\"javascript highlighted_source\"><span class=\"sy0\">&lt;!</span>DOCTYPE html<span class=\"sy0\">&gt;&lt;</span>html<span class=\"sy0\">&gt;&lt;</span>head<span class=\"sy0\">&gt;&lt;</span>title<span class=\"sy0\">&gt;</span>Truth table<span class=\"sy0\">&lt;/</span>title<span class=\"sy0\">&gt;&lt;</span>script<span class=\"sy0\">&gt;</span><br/><span class=\"kw1\">var</span> elem<span class=\"sy0\">,</span>expr<span class=\"sy0\">,</span>vars<span class=\"sy0\">;</span><br/><span class=\"kw1\">function</span> isboolop<span class=\"br0\">(</span>chr<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"st0\">\"&amp;|!^\"</span>.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>chr<span class=\"br0\">)</span><span class=\"sy0\">!=-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> varsindexof<span class=\"br0\">(</span>chr<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>vars.<span class=\"me1\">length</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>vars<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">==</span>chr<span class=\"br0\">)</span><span class=\"kw1\">return</span> i<span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> printtruthtable<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> i<span class=\"sy0\">,</span>str<span class=\"sy0\">;</span><br/>\telem<span class=\"sy0\">=</span>document.<span class=\"me1\">createElement</span><span class=\"br0\">(</span><span class=\"st0\">\"pre\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\texpr<span class=\"sy0\">=</span>prompt<span class=\"br0\">(</span><span class=\"st0\">\"Boolean expression:<span class=\"es0\">\\n</span>Accepts single-character variables (except for <span class=\"es0\">\\\"</span>T<span class=\"es0\">\\\"</span> and <span class=\"es0\">\\\"</span>F<span class=\"es0\">\\\"</span>, which specify explicit true or false values), postfix, with <span class=\"es0\">\\\"</span>&amp;|!^<span class=\"es0\">\\\"</span> for and, or, not, xor, respectively; optionally seperated by whitespace.\"</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/\\s/g</span><span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tvars<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>expr.<span class=\"me1\">length</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>isboolop<span class=\"br0\">(</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;&amp;</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=</span><span class=\"st0\">\"T\"</span><span class=\"sy0\">&amp;&amp;</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=</span><span class=\"st0\">\"F\"</span><span class=\"sy0\">&amp;&amp;</span>varsindexof<span class=\"br0\">(</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">==-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>vars.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"br0\">[</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>vars.<span class=\"me1\">length</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\tstr<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>vars.<span class=\"me1\">length</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>str<span class=\"sy0\">+=</span>vars<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>\telem.<span class=\"me1\">innerHTML</span><span class=\"sy0\">=</span><span class=\"st0\">\"&lt;b&gt;\"</span><span class=\"sy0\">+</span>str<span class=\"sy0\">+</span>expr<span class=\"sy0\">+</span><span class=\"st0\">\"&lt;/b&gt;<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\tvars<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\ttruthpartfor<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tvars<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\ttruthpartfor<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tvars<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\tdocument.<span class=\"me1\">body</span>.<span class=\"me1\">appendChild</span><span class=\"br0\">(</span>elem<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> truthpartfor<span class=\"br0\">(</span>index<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>index<span class=\"sy0\">==</span>vars.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">var</span> str<span class=\"sy0\">,</span>i<span class=\"sy0\">;</span><br/>\t\tstr<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>index<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>str<span class=\"sy0\">+=</span><span class=\"br0\">(</span>vars<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">?</span><span class=\"st0\">\"&lt;b&gt;T&lt;/b&gt;\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"F\"</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>\t\telem.<span class=\"me1\">innerHTML</span><span class=\"sy0\">+=</span>str<span class=\"sy0\">+</span><span class=\"br0\">(</span>parsebool<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">?</span><span class=\"st0\">\"&lt;b&gt;T&lt;/b&gt;\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"F\"</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\tvars<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\ttruthpartfor<span class=\"br0\">(</span>index<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tvars<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\ttruthpartfor<span class=\"br0\">(</span>index<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tvars<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> parsebool<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> stack<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>idx<span class=\"sy0\">;</span><br/>\tconsole.<span class=\"me1\">log</span><span class=\"br0\">(</span>vars<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tstack<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>expr.<span class=\"me1\">length</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">\"T\"</span><span class=\"br0\">)</span>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">\"F\"</span><span class=\"br0\">)</span>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>idx<span class=\"sy0\">=</span>varsindexof<span class=\"br0\">(</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">!=-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>vars<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>isboolop<span class=\"br0\">(</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">case</span> <span class=\"st0\">\"&amp;\"</span><span class=\"sy0\">:</span>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span>stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">case</span> <span class=\"st0\">\"|\"</span><span class=\"sy0\">:</span>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">|</span>stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">case</span> <span class=\"st0\">\"!\"</span><span class=\"sy0\">:</span>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">case</span> <span class=\"st0\">\"^\"</span><span class=\"sy0\">:</span>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">^</span>stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> alert<span class=\"br0\">(</span><span class=\"st0\">\"Non-conformant character \"</span><span class=\"sy0\">+</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"st0\">\" in expression. Should not be possible.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tconsole.<span class=\"me1\">log</span><span class=\"br0\">(</span>stack<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> stack<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"sy0\">&lt;/</span>script<span class=\"sy0\">&gt;&lt;/</span>head<span class=\"sy0\">&gt;&lt;</span>body onload<span class=\"sy0\">=</span><span class=\"st0\">\"printtruthtable()\"</span><span class=\"sy0\">&gt;&lt;/</span>body<span class=\"sy0\">&gt;&lt;/</span>html<span class=\"sy0\">&gt;</span></pre>"}, {"lang": "JavaScript", "loc": 60, "block": "<pre class=\"javascript highlighted_source\"><span class=\"sy0\">&lt;!</span>DOCTYPE html<span class=\"sy0\">&gt;&lt;</span>html<span class=\"sy0\">&gt;&lt;</span>head<span class=\"sy0\">&gt;&lt;</span>title<span class=\"sy0\">&gt;</span>Truth table<span class=\"sy0\">&lt;/</span>title<span class=\"sy0\">&gt;&lt;</span>script<span class=\"sy0\">&gt;</span><br/><span class=\"kw1\">var</span> elem<span class=\"sy0\">,</span>expr<span class=\"sy0\">,</span>vars<span class=\"sy0\">;</span><br/><span class=\"kw1\">function</span> isboolop<span class=\"br0\">(</span>chr<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"st0\">\"&amp;|!^\"</span>.<span class=\"me1\">indexOf</span><span class=\"br0\">(</span>chr<span class=\"br0\">)</span><span class=\"sy0\">!=-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> varsindexof<span class=\"br0\">(</span>chr<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>vars.<span class=\"me1\">length</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>vars<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">==</span>chr<span class=\"br0\">)</span><span class=\"kw1\">return</span> i<span class=\"sy0\">;</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> printtruthtable<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> i<span class=\"sy0\">,</span>str<span class=\"sy0\">;</span><br/>\telem<span class=\"sy0\">=</span>document.<span class=\"me1\">createElement</span><span class=\"br0\">(</span><span class=\"st0\">\"pre\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\texpr<span class=\"sy0\">=</span>prompt<span class=\"br0\">(</span><span class=\"st0\">\"Boolean expression:<span class=\"es0\">\\n</span>Accepts single-character variables (except for <span class=\"es0\">\\\"</span>T<span class=\"es0\">\\\"</span> and <span class=\"es0\">\\\"</span>F<span class=\"es0\">\\\"</span>, which specify explicit true or false values), postfix, with <span class=\"es0\">\\\"</span>&amp;|!^<span class=\"es0\">\\\"</span> for and, or, not, xor, respectively; optionally seperated by whitespace.\"</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"co2\">/\\s/g</span><span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tvars<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>expr.<span class=\"me1\">length</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>isboolop<span class=\"br0\">(</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;&amp;</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=</span><span class=\"st0\">\"T\"</span><span class=\"sy0\">&amp;&amp;</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">!=</span><span class=\"st0\">\"F\"</span><span class=\"sy0\">&amp;&amp;</span>varsindexof<span class=\"br0\">(</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">==-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>vars.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"br0\">[</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>vars.<span class=\"me1\">length</span><span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\tstr<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>vars.<span class=\"me1\">length</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>str<span class=\"sy0\">+=</span>vars<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>\telem.<span class=\"me1\">innerHTML</span><span class=\"sy0\">=</span><span class=\"st0\">\"&lt;b&gt;\"</span><span class=\"sy0\">+</span>str<span class=\"sy0\">+</span>expr<span class=\"sy0\">+</span><span class=\"st0\">\"&lt;/b&gt;<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\tvars<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\ttruthpartfor<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tvars<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\ttruthpartfor<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tvars<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\tdocument.<span class=\"me1\">body</span>.<span class=\"me1\">appendChild</span><span class=\"br0\">(</span>elem<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> truthpartfor<span class=\"br0\">(</span>index<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>index<span class=\"sy0\">==</span>vars.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">var</span> str<span class=\"sy0\">,</span>i<span class=\"sy0\">;</span><br/>\t\tstr<span class=\"sy0\">=</span><span class=\"st0\">\"\"</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>index<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span>str<span class=\"sy0\">+=</span><span class=\"br0\">(</span>vars<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">?</span><span class=\"st0\">\"&lt;b&gt;T&lt;/b&gt;\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"F\"</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>\t\telem.<span class=\"me1\">innerHTML</span><span class=\"sy0\">+=</span>str<span class=\"sy0\">+</span><span class=\"br0\">(</span>parsebool<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">?</span><span class=\"st0\">\"&lt;b&gt;T&lt;/b&gt;\"</span><span class=\"sy0\">:</span><span class=\"st0\">\"F\"</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\tvars<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\ttruthpartfor<span class=\"br0\">(</span>index<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tvars<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\ttruthpartfor<span class=\"br0\">(</span>index<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tvars<span class=\"br0\">[</span>index<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">function</span> parsebool<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> stack<span class=\"sy0\">,</span>i<span class=\"sy0\">,</span>idx<span class=\"sy0\">;</span><br/>\tconsole.<span class=\"me1\">log</span><span class=\"br0\">(</span>vars<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tstack<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span>expr.<span class=\"me1\">length</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">\"T\"</span><span class=\"br0\">)</span>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">==</span><span class=\"st0\">\"F\"</span><span class=\"br0\">)</span>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>idx<span class=\"sy0\">=</span>varsindexof<span class=\"br0\">(</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">!=-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>vars<span class=\"br0\">[</span>idx<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>isboolop<span class=\"br0\">(</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">switch</span><span class=\"br0\">(</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<span class=\"kw1\">case</span> <span class=\"st0\">\"&amp;\"</span><span class=\"sy0\">:</span>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&amp;</span>stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">case</span> <span class=\"st0\">\"|\"</span><span class=\"sy0\">:</span>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">|</span>stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">case</span> <span class=\"st0\">\"!\"</span><span class=\"sy0\">:</span>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">case</span> <span class=\"st0\">\"^\"</span><span class=\"sy0\">:</span>stack.<span class=\"me1\">push</span><span class=\"br0\">(</span>stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">^</span>stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> alert<span class=\"br0\">(</span><span class=\"st0\">\"Non-conformant character \"</span><span class=\"sy0\">+</span>expr<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"st0\">\" in expression. Should not be possible.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tconsole.<span class=\"me1\">log</span><span class=\"br0\">(</span>stack<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> stack<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"sy0\">&lt;/</span>script<span class=\"sy0\">&gt;&lt;/</span>head<span class=\"sy0\">&gt;&lt;</span>body onload<span class=\"sy0\">=</span><span class=\"st0\">\"printtruthtable()\"</span><span class=\"sy0\">&gt;&lt;/</span>body<span class=\"sy0\">&gt;&lt;/</span>html<span class=\"sy0\">&gt;</span></pre>"}, {"lang": "Kotlin", "loc": 74, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// Version 1.2.31</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">util</span>.<span class=\"me1\">Stack</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Variable<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> name<span class=\"sy0\">:</span> Char, <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> value<span class=\"sy0\">:</span> Boolean <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><span class=\"br0\">)</span><br/>\u00a0<br/>lateinit <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> expr<span class=\"sy0\">:</span> String<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> variables <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Variable<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun Char.<span class=\"me1\">isOperator</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> in <span class=\"st0\">\"&amp;|!^\"</span><br/>\u00a0<br/>fun Char.<span class=\"me1\">isVariable</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a> in variables.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it.<span class=\"me1\">name</span> <span class=\"br0\">}</span><br/>\u00a0<br/>fun evalExpression<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> stack <span class=\"sy0\">=</span> Stack<span class=\"sy0\">&lt;</span>Boolean<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>e in expr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        stack.<span class=\"me1\">push</span><span class=\"br0\">(</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>e <span class=\"sy0\">==</span> <span class=\"st0\">'T'</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>e <span class=\"sy0\">==</span> <span class=\"st0\">'F'</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>e.<span class=\"me1\">isVariable</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                variables.<span class=\"me1\">single</span> <span class=\"br0\">{</span> it.<span class=\"me1\">name</span> <span class=\"sy0\">==</span> e <span class=\"br0\">}</span>.<span class=\"me1\">value</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> when <span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"st0\">'&amp;'</span>   -<span class=\"sy0\">&gt;</span> stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span> and stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <span class=\"st0\">'|'</span>   -<span class=\"sy0\">&gt;</span> stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span> or  stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <span class=\"st0\">'!'</span>   -<span class=\"sy0\">&gt;</span> <span class=\"sy0\">!</span>stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <span class=\"st0\">'^'</span>   -<span class=\"sy0\">&gt;</span> stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span> xor stack.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>  -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> RuntimeException<span class=\"br0\">(</span><span class=\"st0\">\"Non-conformant character '$e' in expression\"</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    require<span class=\"br0\">(</span>stack.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> stack.<span class=\"me1\">peek</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun setVariables<span class=\"br0\">(</span>pos<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    require<span class=\"br0\">(</span>pos <span class=\"sy0\">&lt;=</span> variables.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>pos <span class=\"sy0\">==</span> variables.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> vs <span class=\"sy0\">=</span> variables.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>it.<span class=\"me1\">value</span><span class=\"br0\">)</span> <span class=\"st0\">\"T\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"F\"</span> <span class=\"br0\">}</span>.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\"  \"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> es <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>evalExpression<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"st0\">\"T\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"F\"</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> println<span class=\"br0\">(</span><span class=\"st0\">\"$vs  $es\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    variables<span class=\"br0\">[</span>pos<span class=\"br0\">]</span>.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    setVariables<span class=\"br0\">(</span>pos + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    variables<span class=\"br0\">[</span>pos<span class=\"br0\">]</span>.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/>    setVariables<span class=\"br0\">(</span>pos + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Accepts single-character variables (except for 'T' and 'F',\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"which specify explicit true or false values), postfix, with\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"&amp;|!^ for and, or, not, xor, respectively; optionally\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"seperated by spaces or tabs. Just enter nothing to quit.\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Boolean expression: \"</span><span class=\"br0\">)</span><br/>        expr <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span>.<span class=\"me1\">toUpperCase</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span>.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>expr <span class=\"sy0\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        variables.<span class=\"me1\">clear</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>e in expr<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>e.<span class=\"me1\">isOperator</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> e <span class=\"sy0\">!</span>in <span class=\"st0\">\"TF\"</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>e.<span class=\"me1\">isVariable</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> variables.<span class=\"me1\">add</span><span class=\"br0\">(</span>Variable<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>variables.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> vs <span class=\"sy0\">=</span> variables.<span class=\"me1\">map</span> <span class=\"br0\">{</span> it.<span class=\"me1\">name</span> <span class=\"br0\">}</span>.<span class=\"me1\">joinToString</span><span class=\"br0\">(</span><span class=\"st0\">\"  \"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>$vs  $expr\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> h <span class=\"sy0\">=</span> vs.<span class=\"me1\">length</span> + expr.<span class=\"me1\">length</span> + <span class=\"nu0\">2</span><br/>        repeat<span class=\"br0\">(</span>h<span class=\"br0\">)</span> <span class=\"br0\">{</span> print<span class=\"br0\">(</span><span class=\"st0\">\"=\"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>        setVariables<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 93, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/><span class=\"kw1\">print</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\" TRUTH TABLES\"</span><br/>    <span class=\"kw1\">print</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\" Input a valid Boolean expression for creating the truth table \"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\" Use lowercase 'and', 'or', 'xor', '(', 'not(' and ')'.\"</span><br/>    <span class=\"kw1\">print</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\" Take special care to precede closing bracket with a space.\"</span><br/>    <span class=\"kw1\">print</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\" You can use any alphanumeric variable names, but no spaces.\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\" You can refer again to a variable used already.\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\" Program assumes &lt;8 variables will be used..\"</span><br/>    <span class=\"kw1\">print</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\" eg 'A xor B and not( C or A )'\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\" or 'Too_High xor not( Fuel_Out )'\"</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span><br/>\u00a0<br/> <span class=\"br0\">[</span>start<span class=\"br0\">]</span><br/>    <span class=\"kw1\">input</span> <span class=\"st0\">\"        \"</span>; expression$<br/>    <span class=\"kw1\">if</span> expression$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> <span class=\"br0\">[</span>start<span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span><br/>\u00a0<br/>    <span class=\"co1\">'used$           =\"\"</span><br/>    numVariables    <span class=\"sy0\">=</span><span class=\"nu0\">0</span>  <span class=\"co1\">'   count of detected variable names</span><br/>    variableNames$  <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"co1\">'   filled with detected variable names</span><br/>    i               <span class=\"sy0\">=</span><span class=\"nu0\">1</span>  <span class=\"co1\">'   index to space-delimited word in the expression$</span><br/>\u00a0<br/>  <span class=\"br0\">[</span>parse<span class=\"br0\">]</span><br/>    m$ <span class=\"sy0\">=</span><span class=\"kw1\">word</span>$<span class=\"br0\">(</span> expression$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> m$ <span class=\"sy0\">=</span><span class=\"st0\">\"\"</span> <span class=\"kw1\">then</span> <span class=\"br0\">[</span>analyse<span class=\"br0\">]</span><br/>    <span class=\"co1\">'   is it a reserved word, or a variable name already met?</span><br/>    <span class=\"kw1\">if</span> m$ <span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\"and\"</span> <span class=\"kw1\">and</span> m$ <span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\"or\"</span> <span class=\"kw1\">and</span> m$ <span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\"not(\"</span> <span class=\"kw1\">and</span> m$ <span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\")\"</span> <span class=\"kw1\">and</span> m$ <span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\"xor\"</span>_<br/>     <span class=\"kw1\">and</span> <span class=\"kw2\">not</span><span class=\"br0\">(</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span> variableNames$<span class=\"sy0\">,</span> m$<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        variableNames$ <span class=\"sy0\">=</span>variableNames$ <span class=\"sy0\">+</span>m$ <span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"sy0\">:</span> numVariables <span class=\"sy0\">=</span>numVariables <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    i <span class=\"sy0\">=</span>i <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">goto</span> <span class=\"br0\">[</span>parse<span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"br0\">[</span>analyse<span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> numVariables<br/>        ex$          <span class=\"sy0\">=</span>FindReplace$<span class=\"br0\">(</span> expression$<span class=\"sy0\">,</span> <span class=\"kw1\">word</span>$<span class=\"br0\">(</span> variableNames$<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">chr$</span><span class=\"br0\">(</span> <span class=\"nu0\">64</span> <span class=\"sy0\">+</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        expression$  <span class=\"sy0\">=</span>ex$<br/>    <span class=\"kw1\">next</span> i<br/>\u00a0<br/>    <span class=\"co1\">'print \" \"; numVariables; \" variables, simplifying to \"; expression$</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"sy0\">,</span>;<br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> numVariables<br/>        <span class=\"kw1\">print</span> <span class=\"kw1\">word</span>$<span class=\"br0\">(</span> variableNames$<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"kw1\">next</span> j<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Result\"</span><br/>    <span class=\"kw1\">print</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"br0\">(</span> <span class=\"nu0\">2</span>^numVariables<span class=\"br0\">)</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">print</span> <span class=\"sy0\">,</span>;<br/>        A                         <span class=\"sy0\">=</span>i <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span>          <span class=\"kw1\">print</span> A<span class=\"sy0\">,</span><br/>        <span class=\"kw1\">if</span> numVariables <span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span> B <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> i <span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span> <span class=\"kw1\">print</span> B<span class=\"sy0\">,</span><br/>        <span class=\"kw1\">if</span> numVariables <span class=\"sy0\">&gt;</span><span class=\"nu0\">2</span> <span class=\"kw1\">then</span> C <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> i <span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span> <span class=\"kw1\">print</span> C<span class=\"sy0\">,</span><br/>        <span class=\"kw1\">if</span> numVariables <span class=\"sy0\">&gt;</span><span class=\"nu0\">3</span> <span class=\"kw1\">then</span> D <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> i <span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span> <span class=\"kw1\">print</span> D<span class=\"sy0\">,</span><br/>        <span class=\"kw1\">if</span> numVariables <span class=\"sy0\">&gt;</span><span class=\"nu0\">4</span> <span class=\"kw1\">then</span> E <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> i <span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span> <span class=\"kw1\">print</span> E<span class=\"sy0\">,</span><br/>        <span class=\"kw1\">if</span> numVariables <span class=\"sy0\">&gt;</span><span class=\"nu0\">5</span> <span class=\"kw1\">then</span> F <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> i <span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span> <span class=\"kw1\">print</span> F<span class=\"sy0\">,</span><br/>        <span class=\"kw1\">if</span> numVariables <span class=\"sy0\">&gt;</span><span class=\"nu0\">6</span> <span class=\"kw1\">then</span> G <span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span> i <span class=\"sy0\">/</span><span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span><span class=\"sy0\">:</span> <span class=\"kw1\">print</span> G<span class=\"sy0\">,</span><br/>        <span class=\"co1\">'   .......................... etc</span><br/>\u00a0<br/>        <span class=\"co1\">'e =eval( expression$)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">eval</span><span class=\"br0\">(</span> expression$<span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> e$ <span class=\"sy0\">=</span><span class=\"st0\">\"1\"</span> <span class=\"kw1\">else</span> e$ <span class=\"sy0\">=</span><span class=\"st0\">\"0\"</span><br/>        <span class=\"kw1\">print</span> <span class=\"st0\">\"==&gt;  \"</span>; e$<br/>    <span class=\"kw1\">next</span> i<br/>\u00a0<br/>    <span class=\"kw1\">print</span><br/>\u00a0<br/>    <span class=\"kw1\">goto</span> <span class=\"br0\">[</span>start<span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> FindReplace$<span class=\"br0\">(</span> FindReplace$<span class=\"sy0\">,</span> find$<span class=\"sy0\">,</span> replace$<span class=\"sy0\">,</span> replaceAll<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> FindReplace$ <span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"kw1\">and</span> <span class=\"br0\">(</span> find$ <span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        fLen <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> find$<span class=\"br0\">)</span><br/>        rLen <span class=\"sy0\">=</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> replace$<span class=\"br0\">)</span><br/>        <span class=\"kw1\">do</span><br/>            fPos            <span class=\"sy0\">=</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span> FindReplace$<span class=\"sy0\">,</span> find$<span class=\"sy0\">,</span> fPos<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw2\">not</span><span class=\"br0\">(</span> fPos<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span><br/>            pre$            <span class=\"sy0\">=</span> <span class=\"kw2\">left$</span><span class=\"br0\">(</span> FindReplace$<span class=\"sy0\">,</span> fPos <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            post$           <span class=\"sy0\">=</span>  <span class=\"kw2\">mid$</span><span class=\"br0\">(</span> FindReplace$<span class=\"sy0\">,</span> fPos <span class=\"sy0\">+</span>fLen<span class=\"br0\">)</span><br/>            FindReplace$    <span class=\"sy0\">=</span> pre$ <span class=\"sy0\">+</span>replace$ <span class=\"sy0\">+</span>post$<br/>            fPos            <span class=\"sy0\">=</span> fPos <span class=\"sy0\">+</span><span class=\"br0\">(</span>rLen <span class=\"sy0\">-</span>fLen<span class=\"br0\">)</span> <span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>        <span class=\"kw1\">loop</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span> replaceAll<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 12, "block": "<pre class=\"text highlighted_source\">VariableNames[data_]\u00a0:= Module[ {TokenRemoved},<br/> TokenRemoved = StringSplit[data,{\"~And~\",\"~Or~\",\"~Xor~\",\"!\",\"(\",\")\"}];<br/> Union[Select[Map[StringTrim,TokenRemoved] , Not[StringMatchQ[#,\"\"]]&amp;]]<br/>]<br/>\u00a0<br/>TruthTable[BooleanEquation_]\u00a0:= Module[ {TestDataSet},<br/>  TestDataSet = MapThread[Rule,{<a class=\"__cf_email__\" data-cfemail=\"3f6b507a474f4d5a4c4c5650517f695e4d565e5d535a715e525a4c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[BooleanEquation],#}]&amp;/@<br/>     Tuples[{False,True}, Length[VariableNames[BooleanEquation]]];<br/>\u00a0<br/>  Join[List[Flatten[{VariableNames[BooleanEquation],BooleanEquation}]],<br/>    Flatten[{#/.Rule[x_,y_] -&gt; y,ReplaceAll[ToExpression[BooleanEquation],#]}]&amp;/@TestDataSet]//Grid<br/>]</pre>"}, {"lang": "Maxima", "loc": 49, "block": "<pre class=\"text highlighted_source\">/* Maxima already has the following logical operators<br/>          =, # (not equal), not, and, or<br/>define some more and set 'binding power' (operator<br/>precedence) for them<br/>*/<br/>infix(\"xor\", 60)$<br/>\"xor\"(A,B):= (A or B) and not(A and B)$<br/>\u00a0<br/>infix(\"=&gt;\", 59)$<br/>\"=&gt;\"(A,B):= not A or B$<br/>\u00a0<br/>/*<br/>Substitute variables `r' in `e' with values taken from list `l' where<br/>`e' is expression, `r' is a list of independent variables, `l' is a<br/>list of the values<br/>lsubst( '(A + B), ['A, 'B], [1, 2]);<br/>1 + 2;<br/>*/<br/>lsubst(e, r, l):= ev(e, maplist( lambda([x, y], x=y), r, l), 'simp)$<br/>\u00a0<br/>/*<br/>\"Cartesian power\" `n' of list `b'. Returns a list of lists of the form<br/>[&lt;x_1&gt;, ..., &lt;x_n&gt;], were &lt;x_1&gt;, .. &lt;x_n&gt; are elements of list `b'<br/>cartesian_power([true, false], 2);<br/>[[true, true], [true, false], [false, true], [false, false]];<br/>cartesian_power([true, false], 3);<br/>[[true, true, true], [true, true, false], [true, false, true], <br/>[true, false, false], [false, true, true], [false, true, false], <br/>[false, false, true], [false, false, false]];<br/>*/<br/>cartesian_power(b, n)\u00a0:= block(<br/>    [aux_lst: makelist(setify(b), n)],<br/>    listify(apply(cartesian_product, aux_lst))<br/>    )$<br/>\u00a0<br/>gen_table(expr):= block(<br/>  [var_lst: listofvars(expr), st_lst, res_lst, m],<br/>  st_lst: cartesian_power([true, false], length(var_lst)),<br/>  res_lst: create_list(lsubst(expr, var_lst, val_lst), val_lst, st_lst),<br/>  m     \u00a0: apply('matrix, cons(var_lst, st_lst)),<br/>  addcol(m, cons(expr, res_lst))<br/>  );<br/>\u00a0<br/>/* examples */<br/>gen_table('(not A));<br/>gen_table('(A xor B));<br/>gen_table('(Jim and (Spock xor Bones) or Scotty));<br/>gen_table('(A =&gt; (B and A)));<br/>gen_table('(V xor (B xor (K xor D ) )));</pre>"}, {"lang": "PARI/GP", "loc": 23, "block": "<pre class=\"parigp highlighted_source\">vars<span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\tmy<span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"kw1\">type</span><span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"sy0\">==</span><span class=\"st0\">\"t_POL\"</span><span class=\"sy0\">,</span><br/>\t\tx<span class=\"sy0\">=</span><span class=\"kw1\">variable</span><span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">listput</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span>x<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tP<span class=\"sy0\">=</span><span class=\"kw1\">subst</span><span class=\"br0\">(</span>P<span class=\"sy0\">,</span>x<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">Vec</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>truthTable<span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>\tmy<span class=\"br0\">(</span><span class=\"kw2\">var</span><span class=\"sy0\">=</span>vars<span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"sy0\">,</span>t<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span><span class=\"nu1\">2</span><span class=\"sy0\">^</span>#var<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><br/>\t\tt<span class=\"sy0\">=</span><span class=\"kw1\">eval</span><span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>j<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>#var<span class=\"sy0\">,</span><br/>\t\t\tb<span class=\"sy0\">=</span><span class=\"kw1\">bittest</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tt<span class=\"sy0\">=</span><span class=\"kw1\">subst</span><span class=\"br0\">(</span>t<span class=\"sy0\">,</span><span class=\"kw2\">var</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">print1</span><span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"sy0\">!!</span>t<span class=\"br0\">)</span><br/>\t<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>truthTable<span class=\"br0\">(</span><span class=\"st0\">\"x+y\"</span><span class=\"br0\">)</span> <span class=\"co1\">\\\\ OR</span><br/>truthTable<span class=\"br0\">(</span><span class=\"st0\">\"x*y\"</span><span class=\"br0\">)</span> <span class=\"co1\">\\\\ AND</span></pre>"}, {"lang": "Pascal", "loc": 230, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> TruthTables<span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span><br/>  StackSize <span class=\"sy3\">=</span> <span class=\"nu0\">80</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  TVariable <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>    <span class=\"kw1\">Name</span><span class=\"sy1\">:</span> <span class=\"kw4\">Char</span><span class=\"sy1\">;</span><br/>    Value<span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  TStackOfBool <span class=\"sy3\">=</span> <span class=\"kw4\">record</span><br/>    Top<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>    Elements<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy1\">..</span> <span class=\"me1\">StackSize</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  Expression<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/>  Variables<span class=\"sy1\">:</span> <span class=\"kw4\">array</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy1\">..</span> <span class=\"nu0\">23</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> TVariable<span class=\"sy1\">;</span><br/>  VariablesLength<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  i<span class=\"sy1\">,</span> h<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  e<span class=\"sy1\">:</span> <span class=\"kw4\">Char</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// Stack manipulation functions</span><br/><span class=\"kw1\">function</span> IsFull<span class=\"br0\">(</span><span class=\"kw1\">var</span> s<span class=\"sy1\">:</span> TStackOfBool<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  IsFull <span class=\"sy1\">:</span><span class=\"sy3\">=</span> s<span class=\"sy1\">.</span><span class=\"me1\">Top</span> <span class=\"sy3\">=</span> StackSize <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> IsEmpty<span class=\"br0\">(</span><span class=\"kw1\">var</span> s<span class=\"sy1\">:</span> TStackOfBool<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  IsEmpty <span class=\"sy1\">:</span><span class=\"sy3\">=</span> s<span class=\"sy1\">.</span><span class=\"me1\">Top</span> <span class=\"sy3\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Peek<span class=\"br0\">(</span><span class=\"kw1\">var</span> s<span class=\"sy1\">:</span> TStackOfBool<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> IsEmpty<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    Peek <span class=\"sy1\">:</span><span class=\"sy3\">=</span> s<span class=\"sy1\">.</span><span class=\"me1\">Elements</span><span class=\"br0\">[</span>s<span class=\"sy1\">.</span><span class=\"me1\">Top</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">else</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Stack is empty.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    Halt<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> Push<span class=\"br0\">(</span><span class=\"kw1\">var</span> s<span class=\"sy1\">:</span> TStackOfBool<span class=\"sy1\">;</span> val<span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> IsFull<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    Inc<span class=\"br0\">(</span>s<span class=\"sy1\">.</span><span class=\"me1\">Top</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    s<span class=\"sy1\">.</span><span class=\"me1\">Elements</span><span class=\"br0\">[</span>s<span class=\"sy1\">.</span><span class=\"me1\">Top</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> val<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">else</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Stack is full.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    Halt<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Pop<span class=\"br0\">(</span><span class=\"kw1\">var</span> s<span class=\"sy1\">:</span> TStackOfBool<span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> IsEmpty<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    Pop <span class=\"sy1\">:</span><span class=\"sy3\">=</span> s<span class=\"sy1\">.</span><span class=\"me1\">Elements</span><span class=\"br0\">[</span>s<span class=\"sy1\">.</span><span class=\"me1\">Top</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    Dec<span class=\"br0\">(</span>s<span class=\"sy1\">.</span><span class=\"me1\">Top</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">else</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Stack is empty.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    Halt<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> IsOperator<span class=\"br0\">(</span><span class=\"kw1\">const</span> c<span class=\"sy1\">:</span> <span class=\"kw4\">Char</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  IsOperator <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">(</span>c <span class=\"sy3\">=</span> <span class=\"st0\">'&amp;'</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>c <span class=\"sy3\">=</span> <span class=\"st0\">'|'</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>c <span class=\"sy3\">=</span> <span class=\"st0\">'!'</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>c <span class=\"sy3\">=</span> <span class=\"st0\">'^'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> VariableIndex<span class=\"br0\">(</span><span class=\"kw1\">const</span> c<span class=\"sy1\">:</span> <span class=\"kw4\">Char</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> VariablesLength <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> Variables<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"kw1\">Name</span> <span class=\"sy3\">=</span> c <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      VariableIndex <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>      Exit<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  VariableIndex <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> EvaluateExpression<span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span> vi<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  e<span class=\"sy1\">:</span> <span class=\"kw4\">Char</span><span class=\"sy1\">;</span><br/>  s<span class=\"sy1\">:</span> TStackOfBool<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  s<span class=\"sy1\">.</span><span class=\"me1\">Top</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> Length<span class=\"br0\">(</span>Expression<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    e <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Expression<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>    vi <span class=\"sy1\">:</span><span class=\"sy3\">=</span> VariableIndex<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> e <span class=\"sy3\">=</span> <span class=\"st0\">'T'</span> <span class=\"kw1\">then</span><br/>      Push<span class=\"br0\">(</span>s<span class=\"sy1\">,</span> <span class=\"kw2\">True</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> e <span class=\"sy3\">=</span> <span class=\"st0\">'F'</span> <span class=\"kw1\">then</span><br/>      Push<span class=\"br0\">(</span>s<span class=\"sy1\">,</span> <span class=\"kw2\">False</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> vi &gt;<span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      Push<span class=\"br0\">(</span>s<span class=\"sy1\">,</span> Variables<span class=\"br0\">[</span>vi<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">Value</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">case</span> e <span class=\"kw1\">of</span><br/>        <span class=\"st0\">'&amp;'</span><span class=\"sy1\">:</span><br/>          Push<span class=\"br0\">(</span>s<span class=\"sy1\">,</span> Pop<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw3\">and</span> Pop<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"st0\">'|'</span><span class=\"sy1\">:</span><br/>          Push<span class=\"br0\">(</span>s<span class=\"sy1\">,</span> Pop<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">or</span> Pop<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"st0\">'!'</span><span class=\"sy1\">:</span><br/>          Push<span class=\"br0\">(</span>s<span class=\"sy1\">,</span> <span class=\"kw1\">not</span> Pop<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"st0\">'^'</span><span class=\"sy1\">:</span><br/>          Push<span class=\"br0\">(</span>s<span class=\"sy1\">,</span> Pop<span class=\"br0\">(</span>s<span class=\"br0\">)</span> <span class=\"kw1\">xor</span> Pop<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"kw3\">Writeln</span><span class=\"sy1\">;</span><br/>        <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Non-conformant character '</span><span class=\"sy1\">,</span> e<span class=\"sy1\">,</span> <span class=\"st0\">' in expression.'</span><span class=\"sy1\">,</span> e<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        Halt<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> s<span class=\"sy1\">.</span><span class=\"me1\">Top</span> &lt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Stack should contain exactly one element.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    Halt<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  EvaluateExpression <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Peek<span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> SetVariables<span class=\"br0\">(</span>pos<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">if</span> pos &gt; VariablesLength <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Argument to SetVariables cannot be greater than the number of variables.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    Halt<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> pos <span class=\"sy3\">=</span> VariablesLength <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> VariablesLength <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> Variables<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">Value</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw3\">Write</span><span class=\"br0\">(</span><span class=\"st0\">'T  '</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">else</span><br/>        <span class=\"kw3\">Write</span><span class=\"br0\">(</span><span class=\"st0\">'F  '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> EvaluateExpression <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'T'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>      <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'F'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">else</span><br/>  <span class=\"kw1\">begin</span><br/>    Variables<span class=\"br0\">[</span>pos<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">Value</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">False</span><span class=\"sy1\">;</span><br/>    SetVariables<span class=\"br0\">(</span>pos <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    Variables<span class=\"br0\">[</span>pos<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">Value</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">True</span><span class=\"sy1\">;</span><br/>    SetVariables<span class=\"br0\">(</span>pos <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co1\">// removes space and converts to upper case</span><br/><span class=\"kw1\">procedure</span> ProcessExpression<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>  exprTmp<span class=\"sy1\">:</span> <span class=\"kw4\">string</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  exprTmp <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"st0\">''</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> Length<span class=\"br0\">(</span>Expression<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">if</span> Expression<span class=\"br0\">[</span>i<span class=\"br0\">]</span> &lt;&gt; <span class=\"st0\">' '</span> <span class=\"kw1\">then</span><br/>      exprTmp <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Concat<span class=\"br0\">(</span>exprTmp<span class=\"sy1\">,</span> Expression<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  Expression <span class=\"sy1\">:</span><span class=\"sy3\">=</span> exprTmp<br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Accepts single-character variables (except for '</span><span class=\"st0\">'T'</span><span class=\"st0\">' and '</span><span class=\"st0\">'F'</span><span class=\"st0\">','</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'which specify explicit true or false values), postfix, with'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'&amp;|!^ for and, or, not, xor, respectively; optionally'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'seperated by space. Just enter nothing to quit.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">True</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Write</span><span class=\"br0\">(</span><span class=\"st0\">'Boolean expression: '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">ReadLn</span><span class=\"br0\">(</span>Expression<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    ProcessExpression<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> Length<span class=\"br0\">(</span>Expression<span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">Break</span><span class=\"sy1\">;</span><br/>    VariablesLength <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> Length<span class=\"br0\">(</span>Expression<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      e <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Expression<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span> IsOperator<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw3\">and</span> <span class=\"br0\">(</span>e &lt;&gt; <span class=\"st0\">'T'</span><span class=\"br0\">)</span> <span class=\"kw3\">and</span> <span class=\"br0\">(</span>e &lt;&gt; <span class=\"st0\">'F'</span><span class=\"br0\">)</span> <span class=\"kw3\">and</span><br/>        <span class=\"br0\">(</span>VariableIndex<span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"sy3\">=</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">begin</span><br/>        Variables<span class=\"br0\">[</span>VariablesLength<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"kw1\">Name</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> e<span class=\"sy1\">;</span><br/>        Variables<span class=\"br0\">[</span>VariablesLength<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"me1\">Value</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">False</span><span class=\"sy1\">;</span><br/>        Inc<span class=\"br0\">(</span>VariablesLength<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">if</span> VariablesLength <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw3\">Writeln</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'No variables were entered.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      Continue<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> VariablesLength <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw3\">Write</span><span class=\"br0\">(</span>Variables<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy1\">.</span><span class=\"kw1\">Name</span><span class=\"sy1\">,</span> <span class=\"st0\">'  '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span>Expression<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    h <span class=\"sy1\">:</span><span class=\"sy3\">=</span> VariablesLength <span class=\"sy3\">*</span> <span class=\"nu0\">3</span> <span class=\"sy3\">+</span> Length<span class=\"br0\">(</span>Expression<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> h <span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw3\">Write</span><span class=\"br0\">(</span><span class=\"st0\">'='</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw3\">Writeln</span><span class=\"sy1\">;</span><br/>    SetVariables<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 21, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> truth_table <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">%seen</span><span class=\"sy0\">,</span> <span class=\"re0\">@vars</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$s</span> <span class=\"sy0\">=~</span> <span class=\"co2\">/([a-zA-Z_]\\w*)/g</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$seen</span><span class=\"br0\">{</span><span class=\"co5\">$_</span><span class=\"br0\">}</span> <span class=\"sy0\">//=</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span> <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@vars</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"sy0\">,</span> <span class=\"re0\">@vars</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"st_h\">'-'</span> x <span class=\"nu0\">40</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">@vars</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\$</span>$_\"</span><span class=\"sy0\">,</span> <span class=\"re0\">@vars</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"re0\">$s</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/([a-zA-Z_]\\w*)/\\$$1/g</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"print(\"</span><span class=\"sy0\">.</span><a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">',\"\\t\", '</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/map.html\"><span class=\"kw3\">map</span></a><span class=\"br0\">(</span><span class=\"st0\">\"($_?'T':'F')\"</span><span class=\"sy0\">,</span> <span class=\"re0\">@vars</span><span class=\"sy0\">,</span> <span class=\"re0\">$s</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st0\">\",<span class=\"es0\">\\\"</span><span class=\"es0\">\\\\</span>n<span class=\"es0\">\\\"</span>)\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"for my $_ (0, 1) { $s }\"</span> <span class=\"kw1\">for</span> <span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"re0\">@vars</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/eval.html\"><span class=\"kw3\">eval</span></a> <span class=\"re0\">$s</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>truth_table <span class=\"st_h\">'A ^ A_1'</span><span class=\"sy0\">;</span><br/>truth_table <span class=\"st_h\">'foo &amp; bar | baz'</span><span class=\"sy0\">;</span><br/>truth_table <span class=\"st_h\">'Jim &amp; (Spock ^ Bones) | Scotty'</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 10, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">use</span> MONKEY<span class=\"sy0\">-</span>SEE<span class=\"sy0\">-</span>NO<span class=\"sy0\">-</span>EVAL<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> MAIN <span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@n</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span><span class=\"br0\">(</span><span class=\"co2\">/&lt;ident&gt;/</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">&amp;fun</span> <span class=\"sy0\">=</span> EVAL <span class=\"st0\">\"-&gt; {('<span class=\"es0\">\\\\</span>' \u00ab~\u00ab\u00a0@n).join(',')} <span class=\"es0\">\\{</span> [{ (|@n,\"</span>so <span class=\"re0\">$x</span><span class=\"st0\">\").join(',') }] <span class=\"es0\">\\}</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw3\">say</span> <span class=\"br0\">(</span><span class=\"sy0\">|</span><span class=\"re0\">@n</span><span class=\"sy0\">,</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">say</span> <span class=\"kw1\">for</span> <span class=\"kw3\">map</span> <span class=\"re0\">&amp;fun</span><span class=\"sy0\">,</span> flat <span class=\"kw3\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\%</span>0{<a class=\"__cf_email__\" data-cfemail=\"bd96fdd3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>}b\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">comb</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">Int</span>\u00bb<span class=\"sy0\">.</span><span class=\"me1\">so</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..^</span> <span class=\"nu0\">2</span><span class=\"sy0\">**</span><span class=\"re0\">@n</span><span class=\"sy0\">;</span><br/>    <span class=\"kw3\">say</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 181, "block": "<pre class=\"text highlighted_source\">sequence opstack = {}<br/>object token<br/>object op = 0   -- 0 = none<br/>string s        -- the expression being parsed<br/>integer sidx    -- idx to \"\"<br/>integer ch      -- s[sidx]<br/>\u00a0<br/>procedure err(string msg)<br/>    printf(1,\"%s\\n%s^\u00a0%s\\n\\nPressEnter...\",{s,repeat(' ',sidx-1),msg})<br/>    {} = wait_key()<br/>    abort(0)<br/>end procedure<br/>\u00a0<br/>procedure nxtch()<br/>    sidx += 1<br/>    ch = iff(sidx&gt;length(s)?-1:s[sidx])<br/>end procedure<br/>\u00a0<br/>procedure skipspaces()<br/>    while find(ch,\" \\t\\r\\n\")!=0 do nxtch() end while<br/>end procedure<br/>\u00a0<br/>procedure get_token()<br/>    skipspaces()<br/>    if find(ch,\"()!\") then<br/>        token = s[sidx..sidx]<br/>        nxtch()<br/>    else<br/>        integer tokstart = sidx<br/>        if ch=-1 then token = \"eof\" return end if<br/>        while 1 do<br/>            nxtch()<br/>            if ch&lt;'A' then exit end if<br/>        end while<br/>        token = s[tokstart..sidx-1]<br/>    end if<br/>end procedure<br/>\u00a0<br/>procedure Match(string t)<br/>    if token!=t then err(t&amp;\" expected\") end if<br/>    get_token()<br/>end procedure<br/>\u00a0<br/>procedure PopFactor()<br/>object p2 = opstack[$]<br/>    if op=\"not\" then<br/>        opstack[$] = {0,op,p2}<br/>    else<br/>        opstack = opstack[1..$-1]<br/>        opstack[$] = {opstack[$],op,p2}<br/>    end if<br/>    op = 0<br/>end procedure<br/>\u00a0<br/>sequence names -- {\"false\",\"true\",...}<br/>sequence flags -- {   0,     1,  ,...}<br/>\u00a0<br/>procedure PushFactor(string t)<br/>    if op!=0 then PopFactor() end if<br/>    integer k = find(t,names)<br/>    if k=0 then<br/>        names = append(names,t)<br/>        k = length(names)<br/>    end if<br/>    opstack = append(opstack,k)<br/>end procedure<br/>\u00a0<br/>procedure PushOp(string t)<br/>    if op!=0 then PopFactor() end if<br/>    op = t<br/>end procedure<br/>\u00a0<br/>procedure Factor()<br/>    if token=\"not\"<br/>    or token=\"!\" then<br/>        get_token()<br/>        Factor()<br/>        if op!=0 then PopFactor() end if<br/>        PushOp(\"not\")<br/>    elsif token=\"(\" then<br/>        get_token()<br/>        Expr(0)<br/>        Match(\")\")<br/>    elsif not find(token,{\"and\",\"or\",\"xor\"}) then<br/>        PushFactor(token)<br/>        if ch!=-1 then<br/>            get_token()<br/>        end if<br/>    else<br/>        err(\"syntax error\")<br/>    end if<br/>end procedure<br/>\u00a0<br/>constant {operators,<br/>          precedence} = columnize({{\"not\",6},<br/>                                   {\"and\",5},<br/>                                   {\"xor\",4},<br/>                                   {\"or\",3}})<br/>\u00a0<br/>procedure Expr(integer p)<br/>    Factor()<br/>    while 1 do<br/>        integer k = find(token,operators)<br/>        if k=0 then exit end if<br/>        integer thisp = precedence[k]<br/>        if thisp&lt;p then exit end if<br/>        get_token()<br/>        Expr(thisp)<br/>        PushOp(operators[k])<br/>    end while<br/>end procedure<br/>\u00a0<br/>function eval(object s)<br/>    if atom(s) then<br/>        if s&gt;=1 then s = flags[s] end if<br/>        return s<br/>    end if<br/>    object {lhs,op,rhs} = s<br/>    lhs = eval(lhs)<br/>    rhs = eval(rhs)<br/>    if op=\"and\" then<br/>        return lhs and rhs<br/>    elsif op=\"or\" then<br/>        return lhs or rhs<br/>    elsif op=\"xor\" then<br/>        return lhs xor rhs<br/>    elsif op=\"not\" then<br/>        return not rhs<br/>    else<br/>       \u00a0?9/0<br/>    end if<br/>end function<br/>\u00a0<br/>function next_comb()<br/>    integer fdx = length(flags)<br/>    while flags[fdx]=1 do<br/>        flags[fdx] = 0<br/>        fdx -= 1<br/>    end while<br/>    if fdx&lt;=2 then return false end if  -- all done<br/>    flags[fdx] = 1<br/>    return true<br/>end function<br/>\u00a0<br/>function fmt(bool b)<br/>    return {\"0\",\"1\"}[b+1]   -- for 0/1<br/>--  return {\"F\",\"T\"}[b+1]   -- for F/T<br/>end function<br/>\u00a0<br/>procedure test(string expr)<br/>    opstack = {}<br/>    op = 0<br/>    names = {\"false\",\"true\"}<br/>    s = expr<br/>    sidx = 0<br/>    nxtch()<br/>    get_token()<br/>    Expr(0)<br/>    if op!=0 then PopFactor() end if<br/>    if length(opstack)!=1 then err(\"some error\") end if<br/>    flags = repeat(0,length(names))<br/>    flags[2] = 1 -- set \"true\" true<br/>    printf(1,\"%s \u00a0%s\\n\",{join(names[3..$]),s})<br/>    while 1 do<br/>        for i=3 to length(flags) do -- (skipping true&amp;false)<br/>            printf(1,\"%s%s\",{fmt(flags[i]),repeat(' ',length(names[i]))})<br/>        end for<br/>        printf(1,\"\u00a0%s\\n\",{fmt(eval(opstack[1]))})<br/>        if not next_comb() then exit end if<br/>    end while<br/>    puts(1,\"\\n\")<br/>end procedure<br/>\u00a0<br/>test(\"young and not (ugly or poor)\")<br/>while 1 do<br/>    puts(1,\"input expression:\")<br/>    string t = trim(gets(0))<br/>    puts(1,\"\\n\")<br/>    if t=\"\" then exit end if<br/>    test(t)<br/>end while</pre>"}, {"lang": "PicoLisp", "loc": 24, "block": "<pre class=\"text highlighted_source\">(de truthTable (Expr)<br/>   (let Vars<br/>      (uniq<br/>         (make<br/>            (setq Expr<br/>               (recur (Expr)  # Convert infix to prefix notation<br/>                  (cond<br/>                     ((atom Expr) (link Expr))<br/>                     ((== 'not (car Expr))<br/>                        (list 'not (recurse (cadr Expr))) )<br/>                     (T<br/>                        (list<br/>                           (cadr Expr)<br/>                           (recurse (car Expr))<br/>                           (recurse (caddr Expr)) ) ) ) ) ) ) )<br/>      (for V Vars<br/>         (prin (align -7 V)) )<br/>      (prinl)<br/>      (bind (mapcar cons Vars)<br/>         (do (** 2 (length Vars))<br/>            (for \"V\" Vars<br/>               (space (if (print (val \"V\")) 6 4)) )<br/>            (println (eval Expr))<br/>            (find '((\"V\") (set \"V\" (not (val \"V\")))) Vars) ) ) ) )</pre>"}, {"lang": "Prolog", "loc": 99, "block": "<pre class=\"prolog highlighted_source\"><span class=\"coMULTI\">/*<br/>\tTo evaluate the truth table a line of text is inputted and then there are three steps<br/>\tLet's say the expression is: <br/>\t'not a and (b or c)'<br/>\u00a0<br/>\tStep 1: tokenize into atoms and brackets<br/>\teg: Tokenized = [ not, a, and, '(', b, or, c, ')' ].<br/>\u00a0<br/>\tStep 2: convert to a term that can be evaluated, and get out the variables<br/>\teg: Expression = op(and, op(not, a), op(or, b, c)), Variables = [ a, b, c ]<br/>\u00a0<br/>\tStep 3: permeate over the variables, substituting the values for each var, and evaluate the expression for each permutation<br/>\teg: [ 0, 0, 0]<br/>\t\top(and, op(not, 0), op(or, 0, 0))<br/>\t\top(and, 1, op(or, 0, 0))<br/>\t\top(and, 1, 0)<br/>\t\t0<br/>\u00a0<br/>\t\t[ 0, 0, 1]<br/>\t\top(and, op(not, 0), op(or, 0, 1))<br/>\t\top(and, 1, op(or, 0, 0))<br/>\t\top(and, 1, 1)<br/>\t\t1<br/>*/</span><br/>truth_table <span class=\"sy1\">:-</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">current_input</span></a><span class=\"br0\">(</span>In<span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>\tread_line_to_codes<span class=\"br0\">(</span>In<span class=\"sy4\">,</span> Line<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom_codes</span></a><span class=\"br0\">(</span>A<span class=\"sy4\">,</span> Line<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom_chars</span></a><span class=\"br0\">(</span>A<span class=\"sy4\">,</span> Chars<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% parse everything into the form we want</span><br/>\tphrase<span class=\"br0\">(</span>tok<span class=\"br0\">(</span>Tok<span class=\"br0\">)</span><span class=\"sy4\">,</span> Chars<span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tphrase<span class=\"br0\">(</span>expr<span class=\"br0\">(</span>Expr<span class=\"sy4\">,</span>Vars<span class=\"br0\">)</span><span class=\"sy4\">,</span> Tok<span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tlist_to_set<span class=\"br0\">(</span>Vars<span class=\"sy4\">,</span>VarSet<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% evaluate</span><br/>\tprint_expr<span class=\"br0\">(</span>Expr<span class=\"sy4\">,</span> VarSet<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">.</span><br/>\u00a0<br/>print_expr<span class=\"br0\">(</span>Expr<span class=\"sy4\">,</span> Vars<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\t<span class=\"co1\">% write the header (once)</span><br/>\tmaplist<span class=\"br0\">(</span>format<span class=\"br0\">(</span><span class=\"st_h\">'~p '</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Vars<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'~n'</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<span class=\"co1\">% write the results for as many times as there are rows</span><br/>\teval_expr<span class=\"br0\">(</span>Expr<span class=\"sy4\">,</span> Vars<span class=\"sy4\">,</span> Tvals<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tmaplist<span class=\"br0\">(</span>format<span class=\"br0\">(</span><span class=\"st_h\">'~p '</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> Tvals<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'~p~n'</span><span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">fail</span></a><span class=\"sy4\">.</span>\t<br/>print_expr<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> _<span class=\"br0\">)</span><span class=\"sy4\">.</span>\t<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">% Step 1 - tokenize the input into spaces, brackets and atoms</span><br/>tok<span class=\"br0\">(</span><span class=\"br0\">[</span>A<span class=\"sy5\">|</span>As<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> spaces<span class=\"br0\">(</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span> chars<span class=\"br0\">(</span><span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">{</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">atom_codes</span></a><span class=\"br0\">(</span>A<span class=\"sy4\">,</span> <span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy4\">,</span> spaces<span class=\"br0\">(</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span> tok<span class=\"br0\">(</span>As<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>tok<span class=\"br0\">(</span><span class=\"br0\">[</span>A<span class=\"sy5\">|</span>As<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> spaces<span class=\"br0\">(</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span> bracket<span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy4\">,</span> spaces<span class=\"br0\">(</span>_<span class=\"br0\">)</span><span class=\"sy4\">,</span> tok<span class=\"br0\">(</span>As<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>tok<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>chars<span class=\"br0\">(</span><span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> char<span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">{</span> dif<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> <span class=\"st_h\">')'</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> dif<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> <span class=\"st_h\">'('</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> chars<span class=\"br0\">(</span>Xs<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>chars<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>spaces<span class=\"br0\">(</span><span class=\"br0\">[</span>X<span class=\"sy5\">|</span>Xs<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> space<span class=\"br0\">(</span>X<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy5\">!</span><span class=\"sy4\">,</span> spaces<span class=\"br0\">(</span>Xs<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>spaces<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>bracket<span class=\"br0\">(</span><span class=\"st_h\">'('</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"st_h\">'('</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>bracket<span class=\"br0\">(</span><span class=\"st_h\">')'</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"st_h\">')'</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">% Step 2 - Parse the expression into an evaluable term</span><br/>expr<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">op</span></a><span class=\"br0\">(</span>I<span class=\"sy4\">,</span> E<span class=\"sy4\">,</span> E2<span class=\"br0\">)</span><span class=\"sy4\">,</span> V<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> starter<span class=\"br0\">(</span>E<span class=\"sy4\">,</span> V1<span class=\"br0\">)</span><span class=\"sy4\">,</span> infix<span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"sy4\">,</span> expr<span class=\"br0\">(</span>E2<span class=\"sy4\">,</span> V2<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">{</span> append<span class=\"br0\">(</span>V1<span class=\"sy4\">,</span> V2<span class=\"sy4\">,</span> V<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy4\">.</span> <br/>expr<span class=\"br0\">(</span>E<span class=\"sy4\">,</span> V<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> starter<span class=\"br0\">(</span>E<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>starter<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">op</span></a><span class=\"br0\">(</span>not<span class=\"sy4\">,</span> E<span class=\"br0\">)</span><span class=\"sy4\">,</span>V<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span>not<span class=\"br0\">]</span><span class=\"sy4\">,</span> expr<span class=\"br0\">(</span>E<span class=\"sy4\">,</span> V<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>starter<span class=\"br0\">(</span>E<span class=\"sy4\">,</span>V<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"st_h\">'('</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> expr<span class=\"br0\">(</span>E<span class=\"sy4\">,</span>V<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"st_h\">')'</span><span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>starter<span class=\"br0\">(</span>V<span class=\"sy4\">,</span><span class=\"br0\">[</span>V<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> variable<span class=\"br0\">(</span>V<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>infix<span class=\"br0\">(</span>or<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span>or<span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>infix<span class=\"br0\">(</span>and<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span>and<span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>infix<span class=\"br0\">(</span>xor<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span>xor<span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>infix<span class=\"br0\">(</span>nand<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span>nand<span class=\"br0\">]</span><span class=\"sy4\">.</span><br/>\u00a0<br/>variable<span class=\"br0\">(</span>V<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span>V<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"sy2\">\\+</span> infix<span class=\"br0\">(</span>V<span class=\"br0\">)</span><span class=\"sy4\">,</span> <span class=\"sy2\">\\+</span> bracket<span class=\"br0\">(</span>V<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>space<span class=\"br0\">(</span><span class=\"st_h\">' '</span><span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span><span class=\"st_h\">' '</span><span class=\"br0\">]</span><span class=\"sy4\">.</span> <br/>char<span class=\"br0\">(</span>X<span class=\"br0\">)</span> <span class=\"sy3\">--</span><span class=\"sy6\">&gt;</span> <span class=\"br0\">[</span>X<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">{</span> dif<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> <span class=\"st_h\">' '</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy4\">.</span>\t<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">% Step 3 - evaluate the parsed expression</span><br/>eval_expr<span class=\"br0\">(</span>Expr<span class=\"sy4\">,</span> Vars<span class=\"sy4\">,</span> Tvals<span class=\"sy4\">,</span> R<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tlength<span class=\"br0\">(</span>Vars<span class=\"sy4\">,</span>Len<span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>\tlength<span class=\"br0\">(</span>Tvals<span class=\"sy4\">,</span> Len<span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>\tmaplist<span class=\"br0\">(</span>truth_val<span class=\"sy4\">,</span> Tvals<span class=\"br0\">)</span><span class=\"sy4\">,</span> <br/>\teval<span class=\"br0\">(</span>Expr<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Tvals<span class=\"sy4\">,</span>Vars<span class=\"br0\">]</span><span class=\"sy4\">,</span>R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>eval<span class=\"br0\">(</span>X<span class=\"sy4\">,</span> <span class=\"br0\">[</span>Vals<span class=\"sy4\">,</span>Vars<span class=\"br0\">]</span><span class=\"sy4\">,</span> R<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> nth1<span class=\"br0\">(</span>N<span class=\"sy4\">,</span>Vars<span class=\"sy4\">,</span>X<span class=\"br0\">)</span><span class=\"sy4\">,</span> nth1<span class=\"br0\">(</span>N<span class=\"sy4\">,</span>Vals<span class=\"sy4\">,</span>R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>eval<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">op</span></a><span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Op</span></a><span class=\"sy4\">,</span>A<span class=\"sy4\">,</span>B<span class=\"br0\">)</span><span class=\"sy4\">,</span> V<span class=\"sy4\">,</span> R<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> eval<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>V<span class=\"sy4\">,</span>Ae<span class=\"br0\">)</span><span class=\"sy4\">,</span> eval<span class=\"br0\">(</span>B<span class=\"sy4\">,</span>V<span class=\"sy4\">,</span>Be<span class=\"br0\">)</span><span class=\"sy4\">,</span> e<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">Op</span></a><span class=\"sy4\">,</span>Ae<span class=\"sy4\">,</span>Be<span class=\"sy4\">,</span>R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>eval<span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">op</span></a><span class=\"br0\">(</span>not<span class=\"sy4\">,</span>A<span class=\"br0\">)</span><span class=\"sy4\">,</span> V<span class=\"sy4\">,</span> R<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> eval<span class=\"br0\">(</span>A<span class=\"sy4\">,</span>V<span class=\"sy4\">,</span>Ae<span class=\"br0\">)</span><span class=\"sy4\">,</span> e<span class=\"br0\">(</span>not<span class=\"sy4\">,</span>Ae<span class=\"sy4\">,</span>R<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>truth_val<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> truth_val<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>e<span class=\"br0\">(</span>or<span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> e<span class=\"br0\">(</span>or<span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> e<span class=\"br0\">(</span>or<span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> e<span class=\"br0\">(</span>or<span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>e<span class=\"br0\">(</span>and<span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> e<span class=\"br0\">(</span>and<span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> e<span class=\"br0\">(</span>and<span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> e<span class=\"br0\">(</span>and<span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>e<span class=\"br0\">(</span>xor<span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> e<span class=\"br0\">(</span>xor<span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> e<span class=\"br0\">(</span>xor<span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> e<span class=\"br0\">(</span>xor<span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>e<span class=\"br0\">(</span>nand<span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> e<span class=\"br0\">(</span>nand<span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> e<span class=\"br0\">(</span>nand<span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> e<span class=\"br0\">(</span>nand<span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>e<span class=\"br0\">(</span>not<span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">.</span> e<span class=\"br0\">(</span>not<span class=\"sy4\">,</span> <span class=\"nu0\">0</span><span class=\"sy4\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "Python", "loc": 15, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> product<br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>    bexp <span class=\"sy0\">=</span> <span class=\"kw2\">input</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>Boolean expression: '</span><span class=\"br0\">)</span><br/>    bexp <span class=\"sy0\">=</span> bexp.<span class=\"me1\">strip</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> bexp:<br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Thank you\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">break</span><br/>    <span class=\"kw3\">code</span> <span class=\"sy0\">=</span> <span class=\"kw2\">compile</span><span class=\"br0\">(</span>bexp<span class=\"sy0\">,</span> <span class=\"st0\">'&lt;string&gt;'</span><span class=\"sy0\">,</span> <span class=\"st0\">'eval'</span><span class=\"br0\">)</span><br/>    names <span class=\"sy0\">=</span> <span class=\"kw3\">code</span>.<span class=\"me1\">co_names</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span> + <span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>names<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">':'</span><span class=\"sy0\">,</span> bexp<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> values <span class=\"kw1\">in</span> product<span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> repeat<span class=\"sy0\">=</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>names<span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>        env <span class=\"sy0\">=</span> <span class=\"kw2\">dict</span><span class=\"br0\">(</span><span class=\"kw2\">zip</span><span class=\"br0\">(</span>names<span class=\"sy0\">,</span> values<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span> <span class=\"kw1\">for</span> v <span class=\"kw1\">in</span> values<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">':'</span><span class=\"sy0\">,</span> <span class=\"kw2\">eval</span><span class=\"br0\">(</span><span class=\"kw3\">code</span><span class=\"sy0\">,</span> env<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 30, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define (collect-vars sexpr)<br/>  (sort<br/>   (remove-duplicates<br/>    (let loop ([x sexpr])<br/>      (cond [(boolean? x) '()]<br/>            [(symbol? x) (list x)]<br/>            [(list? x) (append-map loop (cdr x))]<br/>            [else (error 'truth-table \"Bad expression: ~e\" x)])))<br/>   string&lt;? #:key symbol-&gt;string))<br/>\u00a0<br/>(define ns (make-base-namespace))<br/>\u00a0<br/>(define (truth-table sexpr)<br/>  (define vars (collect-vars sexpr))<br/>  (printf \"~a =&gt; ~s\\n\" (string-join (map symbol-&gt;string vars)) sexpr)<br/>  (for ([i (expt 2 (length vars))])<br/>    (define vals<br/>      (map (\u03bb(x) (eq? #\\1 x))<br/>           (reverse (string-&gt;list (~r i #:min-width (length vars)<br/>                                        #:pad-string \"0\"<br/>                                        #:base 2)))))<br/>    (printf \"~a =&gt; ~a\\n\" (string-join (map (\u03bb(b) (if b \"T\" \"F\")) vals))<br/>            (if (eval `(let (,@(map list vars vals)) ,sexpr) ns) \"T\" \"F\"))))<br/>\u00a0<br/>(printf \"Enter an expression: \")<br/>(truth-table (read))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 236, "block": "<pre class=\"rexx highlighted_source\">\u2640<span class=\"coMULTI\">/*REXX program displays a truth table of  variables and an expression.   Infix notation */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 is supported with one character propositional constants;  variables   */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 (propositional constants) that are allowed:  A\u2500\u2500\u25baZ,  a\u2500\u2500\u25baz   except u.*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 All propositional constants are case insensitive (except lowercase u).*/</span><br/>\u00a0<br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> userText                               <span class=\"coMULTI\">/*get optional expression from the CL. */</span><br/><span class=\"kw1\">if</span> userText<span class=\"sy0\">\\</span>=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>                         <span class=\"coMULTI\">/*Got one?   Then show user's stuff.   */</span><br/>                      <span class=\"kw1\">call</span> truthTable userText   <span class=\"coMULTI\">/*display truth table for the userText.*/</span><br/>                      <span class=\"kw1\">exit</span>                       <span class=\"coMULTI\">/*we're finished with the user's text. */</span><br/>                      <span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"kw1\">call</span> truthTable  <span class=\"st0\">\"G ^ H\u00a0; XOR\"</span>                   <span class=\"coMULTI\">/*text after\u00a0; is echoed to the output.*/</span><br/><span class=\"kw1\">call</span> truthTable  <span class=\"st0\">\"i | j\u00a0; OR\"</span><br/><span class=\"kw1\">call</span> truthTable  <span class=\"st0\">\"G nxor H\u00a0; NXOR\"</span><br/><span class=\"kw1\">call</span> truthTable  <span class=\"st0\">\"k\u00a0! t\u00a0; NOR\"</span><br/><span class=\"kw1\">call</span> truthTable  <span class=\"st0\">\"p &amp; q\u00a0; AND\"</span><br/><span class=\"kw1\">call</span> truthTable  <span class=\"st0\">\"e \u00a1 f\u00a0; NAND\"</span><br/><span class=\"kw1\">call</span> truthTable  <span class=\"st0\">\"S | (T ^ U)\"</span><br/><span class=\"kw1\">call</span> truthTable  <span class=\"st0\">\"(p=&gt;q) v (q=&gt;r)\"</span><br/><span class=\"kw1\">call</span> truthTable  <span class=\"st0\">\"A ^ (B ^ (C ^ D))\"</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*quit while we're ahead,  by golly.   */</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* \u2193\u2193\u2193 no way, Jose. \u2193\u2193\u2193 */</span>                  <span class=\"coMULTI\">/* [\u2193]  shows a 32,768 line truth table*/</span><br/><span class=\"kw1\">call</span> truthTable  <span class=\"st0\">\"A^ (B^ (C^ (D^ (E^ (F^ (G^ (H^ (I^ (J^ (L^ (L^ (M^ (N^O)  ))))))))))))\"</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>truthTable: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> $ <span class=\"st0\">';'</span> comm <span class=\"nu0\">1</span> $o;        $o=  <span class=\"kw6\">strip</span><span class=\"br0\">(</span>$o<span class=\"br0\">)</span>;      hdrPCs=<br/>               $= <span class=\"kw6\">translate</span><span class=\"br0\">(</span><span class=\"kw6\">strip</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>, <span class=\"st0\">'|'</span>, <span class=\"st0\">\"v\"</span><span class=\"br0\">)</span>;         $u=  $;              <span class=\"kw2\">upper</span> $u<br/>              $u= <span class=\"kw6\">translate</span><span class=\"br0\">(</span>$u, <span class=\"st0\">'()()()'</span>, <span class=\"st0\">\"[]{}\u00ab\u00bb\"</span><span class=\"br0\">)</span>;     $$<span class=\"sy0\">.</span>= <span class=\"nu0\">0</span>;              PCs=<br/>            @abc= <span class=\"st0\">'abcdefghijklmnopqrstuvwxyz'</span>;          @abcU= @abc;         <span class=\"kw2\">upper</span> @abcU<br/>\u00a0<br/><span class=\"coMULTI\">/* \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2566\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557<br/>   \u2551                     \u2551                  bool(bitsA, bitsB, BF)                    \u2551<br/>   \u2551                     \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562<br/>   \u2551                     \u2551 performs the boolean function  BF    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2551<br/>   \u2551                     \u2551      on the   A   bitstring          \u2502  BF  \u2502 common  \u2502    \u2551<br/>   \u2551                     \u2551    with the   B   bitstring.         \u2502 value\u2502  name   \u2502    \u2551<br/>   \u2551                     \u2551                                      \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524    \u2551<br/>   \u2551                     \u2551 BF   must be a  one to four bit      \u2502 0000 \u2502boolfalse\u2502    \u2551<br/>   \u2551                     \u2551 value  (from  0000 \u2500\u2500\u25ba 1111),        \u2502 0001 \u2502 and     \u2502    \u2551<br/>   \u2551  This boxed table   \u2551 leading zeroes can be omitted.       \u2502 0010 \u2502 NaIMPb  \u2502    \u2551<br/>   \u2551 was re\u2500constructed  \u2551                                      \u2502 0011 \u2502 boolB   \u2502    \u2551<br/>   \u2551   from an old IBM   \u2551 BF   may have multiple values (one   \u2502 0100 \u2502 NbIMPa  \u2502    \u2551<br/>   \u2551    publicastion:    \u2551 for each pair of bitstrings):        \u2502 0101 \u2502 boolA   \u2502    \u2551<br/>   \u2551                     \u2551                                      \u2502 0110 \u2502 xor     \u2502    \u2551<br/>   \u2551   \"PL/I Language    \u2551  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502 0111 \u2502 or      \u2502    \u2551<br/>   \u2551   Specifications\"   \u2551  \u2502 Abit \u2502 Bbit \u2502   returns     \u2502     \u2502 1000 \u2502 nor     \u2502    \u2551<br/>   \u2551                     \u2551  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524     \u2502 1001 \u2502 nxor    \u2502    \u2551<br/>   \u2551                     \u2551  \u2502   0  \u2502   0  \u2502 1st bit in BF \u2502     \u2502 1010 \u2502 notB    \u2502    \u2551<br/>   \u2551                     \u2551  \u2502   0  \u2502   1  \u2502 2nd bit in BF \u2502     \u2502 1011 \u2502 bIMPa   \u2502    \u2551<br/>   \u2551   \u2500\u2500\u2500 March 1969.   \u2551  \u2502   1  \u2502   0  \u2502 3rd bit in BF \u2502     \u2502 1100 \u2502 notA    \u2502    \u2551<br/>   \u2551                     \u2551  \u2502   1  \u2502   1  \u2502 4th bit in BF \u2502     \u2502 1101 \u2502 aIMPb   \u2502    \u2551<br/>   \u2551                     \u2551  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502 1110 \u2502 nand    \u2502    \u2551<br/>   \u2551                     \u2551                                      \u2502 1111 \u2502booltrue \u2502    \u2551<br/>   \u2551                     \u2551                                   \u250c\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524    \u2551<br/>   \u2551                     \u2551                                   \u2502 A  0101           \u2502    \u2551<br/>   \u2551                     \u2551                                   \u2502 B  0011           \u2502    \u2551<br/>   \u2551                     \u2551                                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2551<br/>   \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d */</span><br/>\u00a0<br/>  @= <span class=\"st0\">'ff'</span>x                                       <span class=\"coMULTI\">/* [\u2193]  \u2500\u2500\u2500\u2500\u2500 infix operators (0\u2500\u2500\u25ba15) */</span><br/>  op<span class=\"sy0\">.</span>=                                           <span class=\"coMULTI\">/*Note:   a  single quote  (')  wasn't */</span><br/>                                                 <span class=\"coMULTI\">/*            implemented for negation.*/</span><br/>  op<span class=\"sy0\">.</span>0 = <span class=\"st0\">'false  boolFALSE'</span>                      <span class=\"coMULTI\">/*unconditionally  FALSE               */</span><br/>  op<span class=\"sy0\">.</span>1 = <span class=\"st0\">'&amp;      and *'</span>                          <span class=\"coMULTI\">/* AND,  conjunction                   */</span><br/>  op<span class=\"sy0\">.</span>2 = <span class=\"st0\">'naimpb NaIMPb'</span>                         <span class=\"coMULTI\">/*not A implies B                      */</span><br/>  op<span class=\"sy0\">.</span>3 = <span class=\"st0\">'boolb  boolB'</span>                          <span class=\"coMULTI\">/*B  (value of)                        */</span><br/>  op<span class=\"sy0\">.</span>4 = <span class=\"st0\">'nbimpa NbIMPa'</span>                         <span class=\"coMULTI\">/*not B implies A                      */</span><br/>  op<span class=\"sy0\">.</span>5 = <span class=\"st0\">'boola  boolA'</span>                          <span class=\"coMULTI\">/*A  (value of)                        */</span><br/>  op<span class=\"sy0\">.</span>6 = <span class=\"st0\">'&amp;&amp;     xor\u00a0% ^'</span>                        <span class=\"coMULTI\">/* XOR,  exclusive OR                  */</span><br/>  op<span class=\"sy0\">.</span>7 = <span class=\"st0\">'|      or + v'</span>                         <span class=\"coMULTI\">/*  OR,  disjunction                   */</span><br/>  op<span class=\"sy0\">.</span>8 = <span class=\"st0\">'nor    nor\u00a0! \u2193'</span>                        <span class=\"coMULTI\">/* NOR,  not OR,  Pierce operator      */</span><br/>  op<span class=\"sy0\">.</span>9 = <span class=\"st0\">'xnor   xnor nxor'</span>                      <span class=\"coMULTI\">/*NXOR,  not exclusive OR,  not XOR    */</span><br/>  op<span class=\"sy0\">.</span>10= <span class=\"st0\">'notb   notB'</span>                           <span class=\"coMULTI\">/*not B  (value of)                    */</span><br/>  op<span class=\"sy0\">.</span>11= <span class=\"st0\">'bimpa  bIMPa'</span>                          <span class=\"coMULTI\">/*    B  implies A                     */</span><br/>  op<span class=\"sy0\">.</span>12= <span class=\"st0\">'nota   notA'</span>                           <span class=\"coMULTI\">/*not A  (value of)                    */</span><br/>  op<span class=\"sy0\">.</span>13= <span class=\"st0\">'aimpb  aIMPb'</span>                          <span class=\"coMULTI\">/*    A  implies B                     */</span><br/>  op<span class=\"sy0\">.</span>14= <span class=\"st0\">'nand   nand \u00a1 \u2191'</span>                       <span class=\"coMULTI\">/*NAND,  not AND,  Sheffer operator    */</span><br/>  op<span class=\"sy0\">.</span>15= <span class=\"st0\">'true   boolTRUE'</span>                       <span class=\"coMULTI\">/*unconditionally   TRUE               */</span><br/>                                                 <span class=\"coMULTI\">/*alphabetic names that need changing. */</span><br/>  op<span class=\"sy0\">.</span>16= <span class=\"st0\">'\\   NOT ~ \u2500 . \u00ac'</span>                       <span class=\"coMULTI\">/* NOT,  negation                      */</span><br/>  op<span class=\"sy0\">.</span>17= <span class=\"st0\">'&gt;   GT'</span>                                <span class=\"coMULTI\">/*conditional                          */</span><br/>  op<span class=\"sy0\">.</span>18= <span class=\"st0\">'&gt;=  GE \u2500&gt; =&gt; \u2500\u2500&gt; ==&gt;'</span>   <span class=\"st0\">\"1a\"</span>x          <span class=\"coMULTI\">/*conditional;     (see note below.)\u2500\u2500\u2510*/</span><br/>  op<span class=\"sy0\">.</span>19= <span class=\"st0\">'&lt;   LT'</span>                                <span class=\"coMULTI\">/*conditional                         \u2502*/</span><br/>  op<span class=\"sy0\">.</span>20= <span class=\"st0\">'&lt;=  LE &lt;\u2500 &lt;= &lt;\u2500\u2500 &lt;=='</span>                  <span class=\"coMULTI\">/*conditional                         \u2502*/</span><br/>  op<span class=\"sy0\">.</span>21= <span class=\"st0\">'\\=  NE ~= \u2500= .= \u00ac='</span>                    <span class=\"coMULTI\">/*conditional                         \u2502*/</span><br/>  op<span class=\"sy0\">.</span>22= <span class=\"st0\">'=   EQ EQUAL EQUALS ='</span>  <span class=\"st0\">\"1b\"</span>x          <span class=\"coMULTI\">/*bi\u2500conditional;  (see note below.)\u2510 \u2502*/</span><br/>  op<span class=\"sy0\">.</span>23= <span class=\"st0\">'0   boolTRUE'</span>                          <span class=\"coMULTI\">/*TRUEness                          \u2502 \u2502*/</span><br/>  op<span class=\"sy0\">.</span>24= <span class=\"st0\">'1   boolFALSE'</span>                         <span class=\"coMULTI\">/*FALSEness                         \u2193 \u2193*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191] glphys  '1a'x  and  \"1b\"x  can't*/</span><br/>                                                 <span class=\"coMULTI\">/*     displayed under most DOS' &amp; such*/</span><br/>    <span class=\"kw1\">do</span> jj=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span>  op<span class=\"sy0\">.</span>jj<span class=\"sy0\">\\</span>==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> jj<span class=\"sy0\">&lt;</span><span class=\"nu0\">16</span>           <span class=\"coMULTI\">/*change opers \u2500\u2500\u25ba into what REXX likes*/</span><br/>    new= <span class=\"kw6\">word</span><span class=\"br0\">(</span>op<span class=\"sy0\">.</span>jj, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                          <span class=\"coMULTI\">/*obtain the 1st token of  infex table.*/</span><br/>                                                 <span class=\"coMULTI\">/* [\u2193]  process the rest of the tokens.*/</span><br/>      <span class=\"kw1\">do</span> kk=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>op<span class=\"sy0\">.</span>jj<span class=\"br0\">)</span>                   <span class=\"coMULTI\">/*handle each of the tokens separately.*/</span><br/>      _=<span class=\"kw6\">word</span><span class=\"br0\">(</span>op<span class=\"sy0\">.</span>jj, kk<span class=\"br0\">)</span>;          <span class=\"kw2\">upper</span> _        <span class=\"coMULTI\">/*obtain another token from infix table*/</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>_, $u<span class=\"br0\">)</span>==<span class=\"nu0\">0</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>        <span class=\"coMULTI\">/*no such animal in this string.       */</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>new, <span class=\"st0\">'m'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> new!= @        <span class=\"coMULTI\">/*it            needs to be transcribed*/</span><br/>                             <span class=\"kw3\">else</span> new!= new      <span class=\"coMULTI\">/*it  doesn't   need   \"  \"     \"      */</span><br/>      $u= <span class=\"kw6\">changestr</span><span class=\"br0\">(</span>_, $u, new!<span class=\"br0\">)</span>                 <span class=\"coMULTI\">/*transcribe the function (maybe).     */</span><br/>      <span class=\"kw1\">if</span> <a class=\"__cf_email__\" data-cfemail=\"3c52594b1d01017c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>  <span class=\"kw3\">then</span> $u= changeFunc<span class=\"br0\">(</span>$u,@,new<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*use the internal boolean name.       */</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*kk*/</span><br/>    <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*jj*/</span><br/>\u00a0<br/>  $u=<span class=\"kw6\">translate</span><span class=\"br0\">(</span>$u, <span class=\"st0\">'()'</span>, <span class=\"st0\">\"{}\"</span><span class=\"br0\">)</span>                   <span class=\"coMULTI\">/*finish cleaning up the transcribing. */</span><br/>\u00a0<br/>        <span class=\"kw1\">do</span> jj=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>@abcU<span class=\"br0\">)</span>               <span class=\"coMULTI\">/*see what variables are being used.   */</span><br/>        _= <span class=\"kw6\">substr</span><span class=\"br0\">(</span>@abcU, jj, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                  <span class=\"coMULTI\">/*use the available upercase aLphabet. */</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>_,$u<span class=\"br0\">)</span> == <span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>          <span class=\"coMULTI\">/*Found one?    No, then keep looking. */</span><br/>        $$<span class=\"sy0\">.</span>jj= <span class=\"nu0\">1</span>                                 <span class=\"coMULTI\">/*found:  set upper bound for it.      */</span><br/>          PCs= PCs _                             <span class=\"coMULTI\">/*also, add to propositional constants.*/</span><br/>        hdrPCs=hdrPCS <span class=\"kw6\">center</span><span class=\"br0\">(</span>_,<span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"st0\">'false'</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*build a PC header for transcribing.  */</span><br/>        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*jj*/</span><br/>\u00a0<br/>  ptr= <span class=\"st0\">'_\u2500\u2500\u2500\u2500\u25ba_'</span>                                 <span class=\"coMULTI\">/*a (text) pointer for the truth table.*/</span><br/>   $u= PCs <span class=\"st0\">'('</span>$u<span class=\"st0\">\")\"</span>                              <span class=\"coMULTI\">/*separate the  PCs  from expression.  */</span><br/>  hdrPCs= <span class=\"kw6\">substr</span><span class=\"br0\">(</span>hdrPCs, <span class=\"nu0\">2</span><span class=\"br0\">)</span>                      <span class=\"coMULTI\">/*create a header for the  PCs.        */</span><br/>  <span class=\"kw1\">say</span> hdrPCs <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>ptr<span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span>   $o      <span class=\"coMULTI\">/*display  PC  header and expression.  */</span><br/>  <span class=\"kw1\">say</span> <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500 '</span>, <span class=\"kw6\">words</span><span class=\"br0\">(</span>PCs<span class=\"br0\">)</span><span class=\"br0\">)</span>    <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>ptr<span class=\"br0\">)</span> -<span class=\"nu0\">2</span><span class=\"br0\">)</span>  <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2500'</span>, <span class=\"kw6\">length</span><span class=\"br0\">(</span>$o<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                                                 <span class=\"coMULTI\">/*Note:  \"true\"s:  are right\u2500justified.*/</span><br/>                <span class=\"kw1\">do</span> a=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>1<br/>                 <span class=\"kw1\">do</span> b=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>2<br/>                  <span class=\"kw1\">do</span> c=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>3<br/>                   <span class=\"kw1\">do</span> d=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>4<br/>                    <span class=\"kw1\">do</span> e=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>5<br/>                     <span class=\"kw1\">do</span> f=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>6<br/>                      <span class=\"kw1\">do</span> g=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>7<br/>                       <span class=\"kw1\">do</span> h=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>8<br/>                        <span class=\"kw1\">do</span> i=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>9<br/>                         <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>10<br/>                          <span class=\"kw1\">do</span> k=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>11<br/>                           <span class=\"kw1\">do</span> l=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>12<br/>                            <span class=\"kw1\">do</span> m=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>13<br/>                             <span class=\"kw1\">do</span> n=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>14<br/>                              <span class=\"kw1\">do</span> o=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>15<br/>                               <span class=\"kw1\">do</span> p=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>16<br/>                                <span class=\"kw1\">do</span> q=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>17<br/>                                 <span class=\"kw1\">do</span> r=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>18<br/>                                  <span class=\"kw1\">do</span> s=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>19<br/>                                   <span class=\"kw1\">do</span> t=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>20<br/>                                    <span class=\"kw1\">do</span> u=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>21<br/>                                     <span class=\"kw1\">do</span>\u00a0!=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>22<br/>                                      <span class=\"kw1\">do</span> w=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>23<br/>                                       <span class=\"kw1\">do</span> x=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>24<br/>                                        <span class=\"kw1\">do</span> y=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>25<br/>                                         <span class=\"kw1\">do</span> z=<span class=\"nu0\">0</span>  <span class=\"kw2\">to</span> $$<span class=\"sy0\">.</span>26;         <span class=\"kw1\">interpret</span>   <span class=\"st0\">'_='</span>   $u<br/> <span class=\"coMULTI\">/*evaluate truth T.*/</span><br/>                                         _= <span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, _, <span class=\"st0\">'_true'</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*convert 1\u2500\u2500\u25ba_true*/</span><br/>                                         _= <span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, _, <span class=\"st0\">'false'</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*convert 0\u2500\u2500\u25bafalse*/</span><br/>                                         _= <span class=\"kw6\">insert</span><span class=\"br0\">(</span>ptr,  _, <span class=\"kw6\">wordindex</span><span class=\"br0\">(</span>_, <span class=\"kw6\">words</span><span class=\"br0\">(</span>_<span class=\"br0\">)</span> <span class=\"br0\">)</span>  - <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                                         <span class=\"kw1\">say</span> <span class=\"kw6\">translate</span><span class=\"br0\">(</span>_, , <span class=\"st0\">'_'</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/*display truth tab*/</span><br/>                                         <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*z*/</span><br/>                                        <span class=\"kw3\">end</span>    <span class=\"coMULTI\">/*y*/</span><br/>                                       <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*x*/</span><br/>                                      <span class=\"kw3\">end</span>      <span class=\"coMULTI\">/*w*/</span><br/>                                     <span class=\"kw3\">end</span>       <span class=\"coMULTI\">/*v*/</span><br/>                                    <span class=\"kw3\">end</span>        <span class=\"coMULTI\">/*u*/</span><br/>                                   <span class=\"kw3\">end</span>         <span class=\"coMULTI\">/*t*/</span><br/>                                  <span class=\"kw3\">end</span>          <span class=\"coMULTI\">/*s*/</span><br/>                                 <span class=\"kw3\">end</span>           <span class=\"coMULTI\">/*r*/</span><br/>                                <span class=\"kw3\">end</span>            <span class=\"coMULTI\">/*q*/</span><br/>                               <span class=\"kw3\">end</span>             <span class=\"coMULTI\">/*p*/</span><br/>                              <span class=\"kw3\">end</span>              <span class=\"coMULTI\">/*o*/</span><br/>                             <span class=\"kw3\">end</span>               <span class=\"coMULTI\">/*n*/</span><br/>                            <span class=\"kw3\">end</span>                <span class=\"coMULTI\">/*m*/</span><br/>                           <span class=\"kw3\">end</span>                 <span class=\"coMULTI\">/*l*/</span><br/>                          <span class=\"kw3\">end</span>                  <span class=\"coMULTI\">/*k*/</span><br/>                         <span class=\"kw3\">end</span>                   <span class=\"coMULTI\">/*j*/</span><br/>                        <span class=\"kw3\">end</span>                    <span class=\"coMULTI\">/*i*/</span><br/>                       <span class=\"kw3\">end</span>                     <span class=\"coMULTI\">/*h*/</span><br/>                      <span class=\"kw3\">end</span>                      <span class=\"coMULTI\">/*g*/</span><br/>                     <span class=\"kw3\">end</span>                       <span class=\"coMULTI\">/*f*/</span><br/>                    <span class=\"kw3\">end</span>                        <span class=\"coMULTI\">/*e*/</span><br/>                   <span class=\"kw3\">end</span>                         <span class=\"coMULTI\">/*d*/</span><br/>                  <span class=\"kw3\">end</span>                          <span class=\"coMULTI\">/*c*/</span><br/>                 <span class=\"kw3\">end</span>                           <span class=\"coMULTI\">/*b*/</span><br/>                <span class=\"kw3\">end</span>                            <span class=\"coMULTI\">/*a*/</span><br/>  <span class=\"kw1\">say</span>;  <span class=\"kw1\">say</span><br/>  <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>scan: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,at;      L= <span class=\"kw6\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;   t=L;    Lp=<span class=\"nu0\">0</span>;    apost=<span class=\"nu0\">0</span>;    quote=<span class=\"nu0\">0</span><br/>      <span class=\"kw1\">if</span> at<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span>      <span class=\"kw1\">do</span>;   t=<span class=\"nu0\">1</span>;   x= <span class=\"kw6\">translate</span><span class=\"br0\">(</span>x, <span class=\"st0\">'()'</span>, <span class=\"st0\">\")(\"</span><span class=\"br0\">)</span><br/>                         <span class=\"kw3\">end</span>                      <span class=\"coMULTI\">/* [\u2193]  get 1 or 2 chars at location J*/</span><br/>\u00a0<br/>            <span class=\"kw1\">do</span> j=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>at<span class=\"br0\">)</span>  <span class=\"kw2\">to</span> t  <span class=\"kw2\">by</span> <span class=\"kw6\">sign</span><span class=\"br0\">(</span>at<span class=\"br0\">)</span>;      _=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>x, j ,<span class=\"nu0\">1</span><span class=\"br0\">)</span>;   __=<span class=\"kw6\">substr</span><span class=\"br0\">(</span>x, j, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> quote             <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">if</span> _<span class=\"sy0\">\\</span>==<span class=\"st0\">'\"'</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                                           <span class=\"kw1\">if</span> __==<span class=\"st0\">'\"\"'</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  j= j+<span class=\"nu0\">1</span>;  <span class=\"kw1\">iterate</span>;  <span class=\"kw3\">end</span><br/>                                           quote=<span class=\"nu0\">0</span>;  <span class=\"kw1\">iterate</span><br/>                                      <span class=\"kw3\">end</span><br/>            <span class=\"kw1\">if</span> apost             <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">if</span> _<span class=\"sy0\">\\</span>==<span class=\"st0\">\"'\"</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                                           <span class=\"kw1\">if</span> __==<span class=\"st0\">\"''\"</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  j= j+<span class=\"nu0\">1</span>;  <span class=\"kw1\">iterate</span>;  <span class=\"kw3\">end</span><br/>                                           apost=<span class=\"nu0\">0</span>;   <span class=\"kw1\">iterate</span><br/>                                      <span class=\"kw3\">end</span><br/>            <span class=\"kw1\">if</span> _== <span class=\"st0\">'\"'</span>           <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  quote=<span class=\"nu0\">1</span>;   <span class=\"kw1\">iterate</span>;  <span class=\"kw3\">end</span><br/>            <span class=\"kw1\">if</span> _== <span class=\"st0\">\"'\"</span>           <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  apost=<span class=\"nu0\">1</span>;   <span class=\"kw1\">iterate</span>;  <span class=\"kw3\">end</span><br/>            <span class=\"kw1\">if</span> _== <span class=\"st0\">' '</span>           <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>            <span class=\"kw1\">if</span> _== <span class=\"st0\">'('</span>           <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  Lp= Lp+<span class=\"nu0\">1</span>;  <span class=\"kw1\">iterate</span>;  <span class=\"kw3\">end</span><br/>            <span class=\"kw1\">if</span> Lp<span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>            <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">if</span> _==<span class=\"st0\">')'</span>     <span class=\"kw3\">then</span> Lp= Lp-<span class=\"nu0\">1</span>;     <span class=\"kw1\">iterate</span>;  <span class=\"kw3\">end</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>_, <span class=\"st0\">'U'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> j - <span class=\"br0\">(</span>at<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> at<span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>              <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> j + <span class=\"nu0\">1</span>              <span class=\"coMULTI\">/*is   _    uppercase\u00a0? */</span><br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>\u00a0<br/>      <span class=\"kw1\">return</span> <span class=\"kw6\">min</span><span class=\"br0\">(</span>j, L<span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>changeFunc: <span class=\"kw1\">procedure</span>;  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z, fC, newF\u00a0;           funcPos= <span class=\"nu0\">0</span><br/>\u00a0<br/>              <span class=\"kw1\">do</span> <span class=\"kw2\">forever</span><br/>              funcPos= <span class=\"kw6\">pos</span><span class=\"br0\">(</span>fC, z, funcPos + <span class=\"nu0\">1</span><span class=\"br0\">)</span>;           <span class=\"kw1\">if</span> funcPos==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> z<br/>              origPos= funcPos<br/>                    z= <span class=\"kw6\">changestr</span><span class=\"br0\">(</span>fC, z, <span class=\"st0\">\",'\"</span>newF<span class=\"st0\">\"',\"</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*arg 3 \u2261  \",'\" || newF || \"-',\"  */</span><br/>              funcPos= funcPos + <span class=\"kw6\">length</span><span class=\"br0\">(</span>newF<span class=\"br0\">)</span> + <span class=\"nu0\">4</span><br/>                where= scan<span class=\"br0\">(</span>z, funcPos<span class=\"br0\">)</span>      \u00a0;           z= <span class=\"kw6\">insert</span><span class=\"br0\">(</span>    <span class=\"st0\">'}'</span>,  z,  where<span class=\"br0\">)</span><br/>                where= scan<span class=\"br0\">(</span>z, <span class=\"nu0\">1</span> - origPos<span class=\"br0\">)</span>  \u00a0;           z= <span class=\"kw6\">insert</span><span class=\"br0\">(</span><span class=\"st0\">'bool{'</span>,  z,  where<span class=\"br0\">)</span><br/>              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*forever*/</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>bool: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">arg</span> a,?,b                              <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500 ARG uppercases all args.*/</span><br/>\u00a0<br/>                          <span class=\"kw1\">select</span>                        <span class=\"coMULTI\">/*SELECT chooses which function.*/</span><br/>                 <span class=\"coMULTI\">/*0*/</span>    <span class=\"kw3\">when</span>\u00a0? == <span class=\"st0\">'FALSE'</span>   <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>                 <span class=\"coMULTI\">/*1*/</span>    <span class=\"kw3\">when</span>\u00a0? == <span class=\"st0\">'AND'</span>     <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span> a <span class=\"sy0\">&amp;</span> b<br/>                 <span class=\"coMULTI\">/*2*/</span>    <span class=\"kw3\">when</span>\u00a0? == <span class=\"st0\">'NAIMPB'</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span> <span class=\"sy0\">\\</span> <span class=\"br0\">(</span><span class=\"sy0\">\\</span>a <span class=\"sy0\">&amp;</span> <span class=\"sy0\">\\</span>b<span class=\"br0\">)</span><br/>                 <span class=\"coMULTI\">/*3*/</span>    <span class=\"kw3\">when</span>\u00a0? == <span class=\"st0\">'BOOLB'</span>   <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span> b<br/>                 <span class=\"coMULTI\">/*4*/</span>    <span class=\"kw3\">when</span>\u00a0? == <span class=\"st0\">'NBIMPA'</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span> <span class=\"sy0\">\\</span> <span class=\"br0\">(</span><span class=\"sy0\">\\</span>b <span class=\"sy0\">&amp;</span> <span class=\"sy0\">\\</span>a<span class=\"br0\">)</span><br/>                 <span class=\"coMULTI\">/*5*/</span>    <span class=\"kw3\">when</span>\u00a0? == <span class=\"st0\">'BOOLA'</span>   <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span> a<br/>                 <span class=\"coMULTI\">/*6*/</span>    <span class=\"kw3\">when</span>\u00a0? == <span class=\"st0\">'XOR'</span>     <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span> a <span class=\"sy0\">&amp;&amp;</span> b<br/>                 <span class=\"coMULTI\">/*7*/</span>    <span class=\"kw3\">when</span>\u00a0? == <span class=\"st0\">'OR'</span>      <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span> a <span class=\"sy0\">|</span>  b<br/>                 <span class=\"coMULTI\">/*8*/</span>    <span class=\"kw3\">when</span>\u00a0? == <span class=\"st0\">'NOR'</span>     <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span> <span class=\"sy0\">\\</span> <span class=\"br0\">(</span>a <span class=\"sy0\">|</span>  b<span class=\"br0\">)</span><br/>                 <span class=\"coMULTI\">/*9*/</span>    <span class=\"kw3\">when</span>\u00a0? == <span class=\"st0\">'XNOR'</span>    <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span> <span class=\"sy0\">\\</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&amp;&amp;</span> b<span class=\"br0\">)</span><br/>                 <span class=\"coMULTI\">/*a*/</span>    <span class=\"kw3\">when</span>\u00a0? == <span class=\"st0\">'NOTB'</span>    <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span> <span class=\"sy0\">\\</span> b<br/>                 <span class=\"coMULTI\">/*b*/</span>    <span class=\"kw3\">when</span>\u00a0? == <span class=\"st0\">'BIMPA'</span>   <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span> <span class=\"sy0\">\\</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&amp;</span> <span class=\"sy0\">\\</span>a<span class=\"br0\">)</span><br/>                 <span class=\"coMULTI\">/*c*/</span>    <span class=\"kw3\">when</span>\u00a0? == <span class=\"st0\">'NOTA'</span>    <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span> <span class=\"sy0\">\\</span> a<br/>                 <span class=\"coMULTI\">/*d*/</span>    <span class=\"kw3\">when</span>\u00a0? == <span class=\"st0\">'AIMPB'</span>   <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span> <span class=\"sy0\">\\</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&amp;</span> <span class=\"sy0\">\\</span>b<span class=\"br0\">)</span><br/>                 <span class=\"coMULTI\">/*e*/</span>    <span class=\"kw3\">when</span>\u00a0? == <span class=\"st0\">'NAND'</span>    <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span> <span class=\"sy0\">\\</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&amp;</span>  b<span class=\"br0\">)</span><br/>                 <span class=\"coMULTI\">/*f*/</span>    <span class=\"kw3\">when</span>\u00a0? == <span class=\"st0\">'TRUE'</span>    <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>                          <span class=\"kw3\">otherwise</span>                 <span class=\"kw1\">return</span> -<span class=\"nu0\">13</span><br/>                          <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*select*/</span>              <span class=\"coMULTI\">/* [\u2191]  error, unknown function.*/</span></pre>"}, {"lang": "Ruby", "loc": 26, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">loop</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>input a boolean expression (e.g. 'a &amp; b'): \"</span><br/>  expr = <span class=\"kw3\">gets</span>.<span class=\"me1\">strip</span>.<span class=\"me1\">downcase</span> <br/>  <span class=\"kw1\">break</span> <span class=\"kw1\">if</span> expr.<span class=\"me1\">empty</span>?<br/>\u00a0<br/>  vars = expr.<span class=\"me1\">scan</span><span class=\"br0\">(</span><span class=\"sy0\">/</span>\\<span class=\"kw3\">p</span><span class=\"br0\">{</span>Alpha<span class=\"br0\">}</span><span class=\"sy0\">+/</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> vars.<span class=\"me1\">empty</span>?<br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"no variables detected in your boolean expression\"</span><br/>    <span class=\"kw1\">next</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  vars.<span class=\"me1\">each</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>v<span class=\"sy0\">|</span> <span class=\"kw3\">print</span> <span class=\"st0\">\"#{v}<span class=\"es0\">\\t</span>\"</span><span class=\"br0\">}</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"| #{expr}\"</span><br/>\u00a0<br/>  prefix = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  suffix = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  vars.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>v<span class=\"sy0\">|</span><br/>    prefix <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"[false, true].each do |#{v}|\"</span><br/>    suffix <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"end\"</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  body = vars.<span class=\"me1\">inject</span><span class=\"br0\">(</span><span class=\"st0\">\"puts \"</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>str, v<span class=\"sy0\">|</span> str <span class=\"sy0\">+</span> <span class=\"st0\">\"#{v}.to_s + '<span class=\"es0\">\\t</span>' + \"</span><span class=\"br0\">}</span> <br/>  body <span class=\"sy0\">+</span>= <span class=\"st0\">'\"| \" + eval(expr).to_s'</span><br/>\u00a0<br/>  <span class=\"kw3\">eval</span> <span class=\"br0\">(</span>prefix <span class=\"sy0\">+</span> <span class=\"br0\">[</span>body<span class=\"br0\">]</span> <span class=\"sy0\">+</span> suffix<span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Sidef", "loc": 23, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">loop</span> <span class=\"br0\">{</span><br/>  var expr = Sys.<span class=\"me1\">readln</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Boolean expression (e.g. 'a &amp; b'): \"</span><span class=\"br0\">)</span>.<span class=\"me1\">strip</span>.<span class=\"me1\">lc</span><br/>  <span class=\"kw1\">break</span> <span class=\"kw1\">if</span> expr.<span class=\"me1\">is_empty</span>;<br/>\u00a0<br/>  var vars = expr.<span class=\"me1\">scan</span><span class=\"br0\">(</span><span class=\"sy0\">/</span><span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"re3\">:alpha</span>:<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">+/</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>vars.<span class=\"me1\">is_empty</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    say <span class=\"st0\">\"no variables detected in your boolean expression\"</span><br/>    <span class=\"kw1\">next</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  var prefix = <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>  var suffix = <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>\u00a0<br/>  vars.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>v<span class=\"sy0\">|</span><br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"#{v}<span class=\"es0\">\\t</span>\"</span><br/>    prefix <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"[false, true].each { |#{v}|\"</span><br/>    suffix <span class=\"sy0\">&lt;&lt;</span> <span class=\"st0\">\"}\"</span><br/>  <span class=\"br0\">}</span><br/>  say <span class=\"st0\">\"| #{expr}\"</span><br/>\u00a0<br/>  var body = <span class=\"br0\">(</span><span class=\"st0\">\"say (\"</span> <span class=\"sy0\">+</span> vars.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>v<span class=\"sy0\">|</span> v<span class=\"sy0\">+</span><span class=\"st0\">\",'<span class=\"es0\">\\t</span>',\"</span> <span class=\"br0\">}</span>.<span class=\"me1\">join</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" '| ', #{expr})\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">eval</span><span class=\"br0\">(</span>prefix <span class=\"sy0\">+</span> <span class=\"br0\">[</span>body<span class=\"br0\">]</span> <span class=\"sy0\">+</span> suffix <span class=\"sy0\">-&gt;</span> join<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 17, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> -nonewline <span class=\"st0\">\"Enter a boolean expression: \"</span><br/><span class=\"kw2\">flush</span> stdout<br/><span class=\"kw1\">set</span> exp <span class=\"br0\">[</span><span class=\"kw2\">gets</span> stdin<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># Generate the nested loops as the body of a lambda term.</span><br/><span class=\"kw1\">set</span> vars <span class=\"br0\">[</span><span class=\"kw2\">lsort</span> -unique <span class=\"br0\">[</span><span class=\"kw2\">regexp</span> -inline -all <span class=\"br0\">{</span>\\<span class=\"sy0\">$</span>\\w+<span class=\"br0\">}</span> <span class=\"re0\">$exp</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"kw1\">set</span> cmd <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw2\">format</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> repeat <span class=\"st0\">\"%s<span class=\"es0\">\\t</span>\"</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$vars</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">%</span>s<span class=\"br0\">]</span><br/><span class=\"kw2\">append</span> cmd <span class=\"st0\">\" {*}<span class=\"es0\">\\[</span>[list subst $vars]<span class=\"es0\">\\]</span> <span class=\"es0\">\\[</span>[list expr $exp]<span class=\"es0\">\\]</span>\"</span><br/><span class=\"kw1\">set</span> cmd <span class=\"st0\">\"puts <span class=\"es0\">\\[</span>$cmd<span class=\"es0\">\\]</span>\"</span><br/><span class=\"kw1\">foreach</span> v <span class=\"br0\">[</span>lreverse <span class=\"re0\">$vars</span><span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> cmd <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"kw1\">foreach</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> range <span class=\"re0\">$v</span> <span class=\"nu0\">1</span> end<span class=\"br0\">]</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"re0\">$cmd</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$vars</span> \\t<span class=\"br0\">]</span>\\tResult<br/>apply <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"re0\">$cmd</span><span class=\"br0\">]</span></pre>"}]}