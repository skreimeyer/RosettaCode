{"task": "Polynomial_long_division", "blocks": [{"lang": "Ada", "loc": 110, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Long_Division <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">package</span> Int_IO <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Integer_IO</span> <span class=\"br0\">(</span>Integer<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">use</span> Int_IO;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Degrees <span class=\"kw1\">is</span> <span class=\"kw3\">range</span> -<span class=\"nu0\">1</span> .. <span class=\"me1\">Integer</span>'Last;<br/>   <span class=\"kw3\">subtype</span> Valid_Degrees <span class=\"kw1\">is</span> Degrees <span class=\"kw3\">range</span> <span class=\"nu0\">0</span> .. <span class=\"me1\">Degrees</span>'Last;<br/>   <span class=\"kw3\">type</span> Polynom <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Valid_Degrees <span class=\"kw3\">range</span> &lt;&gt;<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Integer;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Degree <span class=\"br0\">(</span>P\u00a0: Polynom<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Degrees <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"kw3\">reverse</span> P'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> P <span class=\"br0\">(</span>I<span class=\"br0\">)</span> /= <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> I;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> -<span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">end</span> Degree;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Shift_Right <span class=\"br0\">(</span>P\u00a0: Polynom; D\u00a0: Valid_Degrees<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Polynom <span class=\"kw1\">is</span><br/>      Result\u00a0: Polynom <span class=\"br0\">(</span><span class=\"nu0\">0</span> .. <span class=\"me1\">P</span>'Last + D<span class=\"br0\">)</span>\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      Result <span class=\"br0\">(</span>Result'Last - P'Length + <span class=\"nu0\">1</span> .. <span class=\"me1\">Result</span>'Last<span class=\"br0\">)</span>\u00a0:= P;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> Shift_Right;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"*\"</span> <span class=\"br0\">(</span>Left\u00a0: Polynom; Right\u00a0: Integer<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Polynom <span class=\"kw1\">is</span><br/>      Result\u00a0: Polynom <span class=\"br0\">(</span>Left'<span class=\"kw3\">Range</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Result'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         Result <span class=\"br0\">(</span>I<span class=\"br0\">)</span>\u00a0:= Left <span class=\"br0\">(</span>I<span class=\"br0\">)</span> * Right;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> <span class=\"st0\">\"*\"</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> <span class=\"st0\">\"-\"</span> <span class=\"br0\">(</span>Left, Right\u00a0: Polynom<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Polynom <span class=\"kw1\">is</span><br/>      Result\u00a0: Polynom <span class=\"br0\">(</span>Left'<span class=\"kw3\">Range</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Result'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> I <span class=\"kw3\">in</span> Right'<span class=\"kw3\">Range</span> <span class=\"kw1\">then</span><br/>            Result <span class=\"br0\">(</span>I<span class=\"br0\">)</span>\u00a0:= Left <span class=\"br0\">(</span>I<span class=\"br0\">)</span> - Right <span class=\"br0\">(</span>I<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">else</span><br/>            Result <span class=\"br0\">(</span>I<span class=\"br0\">)</span>\u00a0:= Left <span class=\"br0\">(</span>I<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Result;<br/>   <span class=\"kw1\">end</span> <span class=\"st0\">\"-\"</span>;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Poly_Long_Division <span class=\"br0\">(</span>Num, Denom\u00a0: Polynom; Q, R\u00a0: <span class=\"kw3\">out</span> Polynom<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      N\u00a0: Polynom\u00a0:= Num;<br/>      D\u00a0: Polynom\u00a0:= Denom;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> Degree <span class=\"br0\">(</span>D<span class=\"br0\">)</span> &lt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw3\">raise</span> Constraint_Error;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      Q\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">while</span> Degree <span class=\"br0\">(</span>N<span class=\"br0\">)</span> &gt;= Degree <span class=\"br0\">(</span>D<span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">declare</span><br/>            T\u00a0: Polynom\u00a0:= Shift_Right <span class=\"br0\">(</span>D, Degree <span class=\"br0\">(</span>N<span class=\"br0\">)</span> - Degree <span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">begin</span><br/>            Q <span class=\"br0\">(</span>Degree <span class=\"br0\">(</span>N<span class=\"br0\">)</span> - Degree <span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0:= N <span class=\"br0\">(</span>Degree <span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span> / T <span class=\"br0\">(</span>Degree <span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            T\u00a0:= T * Q <span class=\"br0\">(</span>Degree <span class=\"br0\">(</span>N<span class=\"br0\">)</span> - Degree <span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>            N\u00a0:= N - T;<br/>         <span class=\"kw1\">end</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      R\u00a0:= N;<br/>   <span class=\"kw1\">end</span> Poly_Long_Division;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Output <span class=\"br0\">(</span>P\u00a0: Polynom<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      First\u00a0: Boolean\u00a0:= True;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"kw3\">reverse</span> P'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> P <span class=\"br0\">(</span>I<span class=\"br0\">)</span> /= <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">if</span> First <span class=\"kw1\">then</span><br/>               First\u00a0:= False;<br/>            <span class=\"kw1\">else</span><br/>               Put <span class=\"br0\">(</span><span class=\"st0\">\" + \"</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            <span class=\"kw1\">if</span> I &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>               <span class=\"kw1\">if</span> P <span class=\"br0\">(</span>I<span class=\"br0\">)</span> /= <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>                  Put <span class=\"br0\">(</span>P <span class=\"br0\">(</span>I<span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>                  Put <span class=\"br0\">(</span><span class=\"st0\">\"*\"</span><span class=\"br0\">)</span>;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>               Put <span class=\"br0\">(</span><span class=\"st0\">\"x\"</span><span class=\"br0\">)</span>;<br/>               <span class=\"kw1\">if</span> I &gt; <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>                  Put <span class=\"br0\">(</span><span class=\"st0\">\"^\"</span><span class=\"br0\">)</span>;<br/>                  Put <span class=\"br0\">(</span>Integer <span class=\"br0\">(</span>I<span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            <span class=\"kw1\">elsif</span> P <span class=\"br0\">(</span>I<span class=\"br0\">)</span> /= <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>               Put <span class=\"br0\">(</span>P <span class=\"br0\">(</span>I<span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      New_Line;<br/>   <span class=\"kw1\">end</span> Output;<br/>\u00a0<br/>   Test_N\u00a0: <span class=\"kw3\">constant</span> Polynom\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">0</span> =&gt; -<span class=\"nu0\">42</span>, <span class=\"nu0\">1</span> =&gt; <span class=\"nu0\">0</span>, <span class=\"nu0\">2</span> =&gt; -<span class=\"nu0\">12</span>, <span class=\"nu0\">3</span> =&gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   Test_D\u00a0: <span class=\"kw3\">constant</span> Polynom\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">0</span> =&gt; -<span class=\"nu0\">3</span>, <span class=\"nu0\">1</span> =&gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>   Test_Q\u00a0: Polynom <span class=\"br0\">(</span>Test_N'<span class=\"kw3\">Range</span><span class=\"br0\">)</span>;<br/>   Test_R\u00a0: Polynom <span class=\"br0\">(</span>Test_N'<span class=\"kw3\">Range</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">begin</span><br/>   Poly_Long_Division <span class=\"br0\">(</span>Test_N, Test_D, Test_Q, Test_R<span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"Dividing Polynoms:\"</span><span class=\"br0\">)</span>;<br/>   Put <span class=\"br0\">(</span><span class=\"st0\">\"N: \"</span><span class=\"br0\">)</span>; Output <span class=\"br0\">(</span>Test_N<span class=\"br0\">)</span>;<br/>   Put <span class=\"br0\">(</span><span class=\"st0\">\"D: \"</span><span class=\"br0\">)</span>; Output <span class=\"br0\">(</span>Test_D<span class=\"br0\">)</span>;<br/>   Put_Line <span class=\"br0\">(</span><span class=\"st0\">\"-------------------------\"</span><span class=\"br0\">)</span>;<br/>   Put <span class=\"br0\">(</span><span class=\"st0\">\"Q: \"</span><span class=\"br0\">)</span>; Output <span class=\"br0\">(</span>Test_Q<span class=\"br0\">)</span>;<br/>   Put <span class=\"br0\">(</span><span class=\"st0\">\"R: \"</span><span class=\"br0\">)</span>; Output <span class=\"br0\">(</span>Test_R<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Long_Division;</pre>"}, {"lang": "APL", "loc": 9, "block": "<pre class=\"text highlighted_source\">div\u2190{<br/>    {<br/>        q r d\u2190\u2375<br/>        (\u2262d) &gt; n\u2190\u2262r\u00a0: q r<br/>        c \u2190 (\u2283\u233dr) \u00f7 \u2283\u233dd<br/>        \u2207 (c,q) ((\u00af1\u2193r) - c \u00d7 \u00af1\u2193(-n)\u2191d) d<br/>    } \u236c \u237a \u2375<br/>}<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 44, "block": "<pre class=\"text highlighted_source\">      DIM N%(3)\u00a0: N%() = -42, 0, -12, 1<br/>      DIM D%(3)\u00a0: D%() =  -3, 1,   0, 0<br/>      DIM q%(3), r%(3)<br/>      PROC_poly_long_div(N%(), D%(), q%(), r%())<br/>      PRINT \"Quotient = \"; FNcoeff(q%(2)) \"x^2\" FNcoeff(q%(1)) \"x\" FNcoeff(q%(0))<br/>      PRINT \"Remainder = \"\u00a0; r%(0)<br/>      END<br/>\u00a0<br/>      DEF PROC_poly_long_div(N%(), D%(), q%(), r%())<br/>      LOCAL d%(), i%, s%<br/>      DIM d%(DIM(N%(),1))<br/>      s% = FNdegree(N%()) - FNdegree(D%())<br/>      IF s% &gt;= 0 THEN<br/>        q%() = 0<br/>        WHILE s% &gt;= 0<br/>          FOR i% = 0 TO DIM(d%(),1) - s%<br/>            d%(i%+s%) = D%(i%)<br/>          NEXT<br/>          q%(s%) = N%(FNdegree(N%())) DIV d%(FNdegree(d%()))<br/>          d%() = d%() * q%(s%)<br/>          N%() -= d%()<br/>          s% = FNdegree(N%()) - FNdegree(D%())<br/>        ENDWHILE<br/>        r%() = N%()<br/>      ELSE<br/>        q%() = 0<br/>        r%() = N%()<br/>      ENDIF<br/>      ENDPROC<br/>\u00a0<br/>      DEF FNdegree(a%())<br/>      LOCAL i%<br/>      i% = DIM(a%(),1)<br/>      WHILE a%(i%)=0<br/>        i% -= 1<br/>        IF i%&lt;0 EXIT WHILE<br/>      ENDWHILE<br/>      = i%<br/>\u00a0<br/>      DEF FNcoeff(n%)<br/>      IF n%=0 THEN = \"\"<br/>      IF n%&lt;0 THEN = \" - \" + STR$(-n%)<br/>      IF n%=1 THEN = \" + \"<br/>      = \" + \" + STR$(n%)</pre>"}, {"lang": "C", "loc": 107, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;stdarg.h&gt;</span><br/><span class=\"co2\">#include &lt;assert.h&gt;</span><br/><span class=\"co2\">#include &lt;gsl/gsl_vector.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define MAX(A,B) (((A)&gt;(B))?(A):(B))</span><br/>\u00a0<br/><span class=\"kw4\">void</span> reoshift<span class=\"br0\">(</span>gsl_vector <span class=\"sy0\">*</span>v<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> h<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span> h <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    gsl_vector <span class=\"sy0\">*</span>temp <span class=\"sy0\">=</span> gsl_vector_alloc<span class=\"br0\">(</span>v<span class=\"sy0\">-&gt;</span>size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    gsl_vector_view p <span class=\"sy0\">=</span> gsl_vector_subvector<span class=\"br0\">(</span>v<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> v<span class=\"sy0\">-&gt;</span>size <span class=\"sy0\">-</span> h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    gsl_vector_view p1 <span class=\"sy0\">=</span> gsl_vector_subvector<span class=\"br0\">(</span>temp<span class=\"sy0\">,</span> h<span class=\"sy0\">,</span> v<span class=\"sy0\">-&gt;</span>size <span class=\"sy0\">-</span> h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    gsl_vector_memcpy<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>p1.<span class=\"me1\">vector</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>p.<span class=\"me1\">vector</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    p <span class=\"sy0\">=</span> gsl_vector_subvector<span class=\"br0\">(</span>temp<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> h<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    gsl_vector_set_zero<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>p.<span class=\"me1\">vector</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    gsl_vector_memcpy<span class=\"br0\">(</span>v<span class=\"sy0\">,</span> temp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    gsl_vector_free<span class=\"br0\">(</span>temp<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>gsl_vector <span class=\"sy0\">*</span>poly_long_div<span class=\"br0\">(</span>gsl_vector <span class=\"sy0\">*</span>n<span class=\"sy0\">,</span> gsl_vector <span class=\"sy0\">*</span>d<span class=\"sy0\">,</span> gsl_vector <span class=\"sy0\">**</span>r<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  gsl_vector <span class=\"sy0\">*</span>nt <span class=\"sy0\">=</span> NULL<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>dt <span class=\"sy0\">=</span> NULL<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>rt <span class=\"sy0\">=</span> NULL<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>d2 <span class=\"sy0\">=</span> NULL<span class=\"sy0\">,</span> <span class=\"sy0\">*</span>q <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> gn<span class=\"sy0\">,</span> gt<span class=\"sy0\">,</span> gd<span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>size <span class=\"sy0\">&gt;=</span> d<span class=\"sy0\">-&gt;</span>size<span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>d<span class=\"sy0\">-&gt;</span>size <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>size <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    nt <span class=\"sy0\">=</span> gsl_vector_alloc<span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>size<span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>nt <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    dt <span class=\"sy0\">=</span> gsl_vector_alloc<span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>size<span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>dt <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    rt <span class=\"sy0\">=</span> gsl_vector_alloc<span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>size<span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>rt <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    d2 <span class=\"sy0\">=</span> gsl_vector_alloc<span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>size<span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>d2 <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    gsl_vector_memcpy<span class=\"br0\">(</span>nt<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    gsl_vector_set_zero<span class=\"br0\">(</span>dt<span class=\"br0\">)</span><span class=\"sy0\">;</span> gsl_vector_set_zero<span class=\"br0\">(</span>rt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    gsl_vector_view p <span class=\"sy0\">=</span> gsl_vector_subvector<span class=\"br0\">(</span>dt<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> d<span class=\"sy0\">-&gt;</span>size<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    gsl_vector_memcpy<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>p.<span class=\"me1\">vector</span><span class=\"sy0\">,</span> d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    gsl_vector_memcpy<span class=\"br0\">(</span>d2<span class=\"sy0\">,</span> dt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    gn <span class=\"sy0\">=</span> n<span class=\"sy0\">-&gt;</span>size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    gd <span class=\"sy0\">=</span> d<span class=\"sy0\">-&gt;</span>size <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    gt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span> gsl_vector_get<span class=\"br0\">(</span>d<span class=\"sy0\">,</span> gd<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> gd<span class=\"sy0\">--;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span> gn <span class=\"sy0\">&gt;=</span> gd <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      reoshift<span class=\"br0\">(</span>dt<span class=\"sy0\">,</span> gn<span class=\"sy0\">-</span>gd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw4\">double</span> v <span class=\"sy0\">=</span> gsl_vector_get<span class=\"br0\">(</span>nt<span class=\"sy0\">,</span> gn<span class=\"br0\">)</span><span class=\"sy0\">/</span>gsl_vector_get<span class=\"br0\">(</span>dt<span class=\"sy0\">,</span> gn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      gsl_vector_set<span class=\"br0\">(</span>rt<span class=\"sy0\">,</span> gn<span class=\"sy0\">-</span>gd<span class=\"sy0\">,</span> v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      gsl_vector_scale<span class=\"br0\">(</span>dt<span class=\"sy0\">,</span> v<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      gsl_vector_sub<span class=\"br0\">(</span>nt<span class=\"sy0\">,</span> dt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      gt <span class=\"sy0\">=</span> MAX<span class=\"br0\">(</span>gt<span class=\"sy0\">,</span> gn<span class=\"sy0\">-</span>gd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">while</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>gn<span class=\"sy0\">&gt;=</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>gsl_vector_get<span class=\"br0\">(</span>nt<span class=\"sy0\">,</span> gn<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu16\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> gn<span class=\"sy0\">--;</span><br/>      gsl_vector_memcpy<span class=\"br0\">(</span>dt<span class=\"sy0\">,</span> d2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    q <span class=\"sy0\">=</span> gsl_vector_alloc<span class=\"br0\">(</span>gt<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span>q <span class=\"sy0\">!=</span> NULL<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    p <span class=\"sy0\">=</span> gsl_vector_subvector<span class=\"br0\">(</span>rt<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> gt<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    gsl_vector_memcpy<span class=\"br0\">(</span>q<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>p.<span class=\"me1\">vector</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> r <span class=\"sy0\">!=</span> NULL <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>gn<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"sy0\">*</span>r <span class=\"sy0\">=</span> gsl_vector_alloc<span class=\"br0\">(</span>gn<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span> <span class=\"sy0\">*</span>r <span class=\"sy0\">!=</span> NULL <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tp <span class=\"sy0\">=</span> gsl_vector_subvector<span class=\"br0\">(</span>nt<span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> gn<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tgsl_vector_memcpy<span class=\"br0\">(</span><span class=\"sy0\">*</span>r<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>p.<span class=\"me1\">vector</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<span class=\"sy0\">*</span>r <span class=\"sy0\">=</span> gsl_vector_alloc<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span> <span class=\"sy0\">*</span>r <span class=\"sy0\">!=</span> NULL <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tgsl_vector_set_zero<span class=\"br0\">(</span><span class=\"sy0\">*</span>r<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    gsl_vector_free<span class=\"br0\">(</span>nt<span class=\"br0\">)</span><span class=\"sy0\">;</span> gsl_vector_free<span class=\"br0\">(</span>dt<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    gsl_vector_free<span class=\"br0\">(</span>rt<span class=\"br0\">)</span><span class=\"sy0\">;</span> gsl_vector_free<span class=\"br0\">(</span>d2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> q<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    q <span class=\"sy0\">=</span> gsl_vector_alloc<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span> q <span class=\"sy0\">!=</span> NULL <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    gsl_vector_set_zero<span class=\"br0\">(</span>q<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> r <span class=\"sy0\">!=</span> NULL <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"sy0\">*</span>r <span class=\"sy0\">=</span> gsl_vector_alloc<span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>size<span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span> <span class=\"sy0\">*</span>r <span class=\"sy0\">!=</span> NULL <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      gsl_vector_memcpy<span class=\"br0\">(</span><span class=\"sy0\">*</span>r<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> q<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> poly_print<span class=\"br0\">(</span>gsl_vector <span class=\"sy0\">*</span>p<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span>p<span class=\"sy0\">-&gt;</span>size<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lfx^%d + \"</span><span class=\"sy0\">,</span> <br/>\t     gsl_vector_get<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">else</span><br/>      <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%lf<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> gsl_vector_get<span class=\"br0\">(</span>p<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>gsl_vector <span class=\"sy0\">*</span>create_poly<span class=\"br0\">(</span><span class=\"kw4\">int</span> d<span class=\"sy0\">,</span> ...<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  va_list al<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>  gsl_vector <span class=\"sy0\">*</span>r <span class=\"sy0\">=</span> NULL<span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_start.html\"><span class=\"kw3\">va_start</span></a><span class=\"br0\">(</span>al<span class=\"sy0\">,</span> d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  r <span class=\"sy0\">=</span> gsl_vector_alloc<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/assert.html\"><span class=\"kw3\">assert</span></a><span class=\"br0\">(</span> r <span class=\"sy0\">!=</span> NULL <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> d<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    gsl_vector_set<span class=\"br0\">(</span>r<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/va_arg.html\"><span class=\"kw3\">va_arg</span></a><span class=\"br0\">(</span>al<span class=\"sy0\">,</span> <span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> r<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#include &lt;iostream&gt;<br/>#include &lt;math.h&gt;<br/>\u00a0<br/>using namespace std;<br/>\u00a0<br/>// does:  prints all members of vector<br/>// input: c - ASCII char with the name of the vector<br/>//        d - degree of vector<br/>//        A - pointer to vector<br/>void Print(char c, int d, double* A) {<br/>\tint i;<br/>\u00a0<br/>\tfor (i=0; i &lt; d+1; i++)<br/>\t\t\tcout &lt;&lt; c &lt;&lt; \"[\" &lt;&lt; i &lt;&lt; \"]= \" &lt;&lt; A[i] &lt;&lt; endl;<br/>\tcout &lt;&lt; \"Degree of \" &lt;&lt; c &lt;&lt; \": \" &lt;&lt; d &lt;&lt; endl &lt;&lt; endl;<br/>}</pre>"}, {"lang": "C#", "loc": 123, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> PolynomialLongDivision <span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Solution <span class=\"br0\">{</span><br/>        <span class=\"kw1\">public</span> Solution<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> q, <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Quotient <span class=\"sy0\">=</span> q<span class=\"sy0\">;</span><br/>            Remainder <span class=\"sy0\">=</span> r<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> Quotient <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>        <span class=\"kw1\">public</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> Remainder <span class=\"br0\">{</span> <span class=\"kw1\">get</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">class</span> Program <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> PolyDegree<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> p<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"sy0\">--</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> i<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">MinValue</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> PolyShiftRight<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> p, <span class=\"kw4\">int</span> places<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>places <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> p<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> pd <span class=\"sy0\">=</span> PolyDegree<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pd <span class=\"sy0\">+</span> places <span class=\"sy0\">&gt;=</span> p<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentOutOfRangeException<span class=\"br0\">(</span><span class=\"st0\">\"The number of places to be shifted is too large\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> d <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span>p<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            p<span class=\"sy0\">.</span><span class=\"me1\">CopyTo</span><span class=\"br0\">(</span>d, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> pd<span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"sy0\">--</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                d<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> places<span class=\"br0\">]</span> <span class=\"sy0\">=</span> d<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                d<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> d<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> PolyMultiply<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> p, <span class=\"kw4\">double</span> m<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> p<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*=</span> m<span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> PolySubtract<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> p, <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> p<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> Solution PolyLongDiv<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> n, <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">.</span><span class=\"me1\">Length</span> <span class=\"sy0\">!=</span> d<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Numerator and denominator vectors must have the same size\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw4\">int</span> nd <span class=\"sy0\">=</span> PolyDegree<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">int</span> dd <span class=\"sy0\">=</span> PolyDegree<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dd <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"Divisor must have at least one one-zero coefficient\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nd <span class=\"sy0\">&lt;</span> dd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">throw</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> ArgumentException<span class=\"br0\">(</span><span class=\"st0\">\"The degree of the divisor cannot exceed that of the numerator\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> n2 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span>n<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            n<span class=\"sy0\">.</span><span class=\"me1\">CopyTo</span><span class=\"br0\">(</span>n2, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> q <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> <span class=\"kw4\">double</span><span class=\"br0\">[</span>n<span class=\"sy0\">.</span><span class=\"me1\">Length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>nd <span class=\"sy0\">&gt;=</span> dd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> d2 <span class=\"sy0\">=</span> PolyShiftRight<span class=\"br0\">(</span>d, nd <span class=\"sy0\">-</span> dd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                q<span class=\"br0\">[</span>nd <span class=\"sy0\">-</span> dd<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n2<span class=\"br0\">[</span>nd<span class=\"br0\">]</span> <span class=\"sy0\">/</span> d2<span class=\"br0\">[</span>nd<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                PolyMultiply<span class=\"br0\">(</span>d2, q<span class=\"br0\">[</span>nd <span class=\"sy0\">-</span> dd<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                PolySubtract<span class=\"br0\">(</span>n2, d2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                nd <span class=\"sy0\">=</span> PolyDegree<span class=\"br0\">(</span>n2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Solution<span class=\"br0\">(</span>q, n2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> PolyShow<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> pd <span class=\"sy0\">=</span> PolyDegree<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> pd<span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"sy0\">--</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw4\">double</span> coeff <span class=\"sy0\">=</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>coeff <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>coeff <span class=\"sy0\">==</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> pd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\" + \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>coeff <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> pd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\" - \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                        Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>coeff <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> pd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\" - {0:F1}\"</span>, <span class=\"sy0\">-</span>coeff<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                        Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"{0:F1}\"</span>, coeff<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> pd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                        Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\" + {0:F1}\"</span>, coeff<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                        Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"{0:F1}\"</span>, coeff<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"x^{0}\"</span>, i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"x\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> n <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"sy0\">-</span><span class=\"nu0\">42.0</span>, <span class=\"nu0\">0.0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">12.0</span>, <span class=\"nu0\">1.0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> d <span class=\"sy0\">=</span> <span class=\"br0\">{</span> <span class=\"sy0\">-</span><span class=\"nu0\">3.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"Numerator  \u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            PolyShow<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"Denominator\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            PolyShow<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"-------------------------------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Solution sol <span class=\"sy0\">=</span> PolyLongDiv<span class=\"br0\">(</span>n, d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"Quotient   \u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            PolyShow<span class=\"br0\">(</span>sol<span class=\"sy0\">.</span><span class=\"me1\">Quotient</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"Remainder  \u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            PolyShow<span class=\"br0\">(</span>sol<span class=\"sy0\">.</span><span class=\"me1\">Remainder</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 95, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> grevlex <span class=\"br0\">[</span>term1 term2<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>grade1 <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"sy0\">+</span>' term1<span class=\"br0\">)</span><br/>        grade2 <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> <span class=\"sy0\">+</span>' term2<span class=\"br0\">)</span><br/>        comp <span class=\"br0\">(</span><span class=\"sy0\">-</span> grade2 grade1<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"co1\">;; total degree</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span> comp<span class=\"br0\">)</span><br/>      comp<br/>      <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>term1 term1<br/>             term2 term2<span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> term1<span class=\"br0\">)</span><br/>          <span class=\"nu0\">0</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>grade1 <span class=\"br0\">(</span>last term1<span class=\"br0\">)</span><br/>                grade2 <span class=\"br0\">(</span>last term2<span class=\"br0\">)</span><br/>                comp <span class=\"br0\">(</span><span class=\"sy0\">-</span> grade1 grade2<span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"co1\">;; differs from grlex because terms are flipped from above</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span> comp<span class=\"br0\">)</span><br/>            comp<br/>            <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>pop term1<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span>pop term2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> mul<br/>  <span class=\"co1\">;; transducer</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>poly1<span class=\"br0\">]</span>  <span class=\"co1\">;; completion</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">fn</span><br/>     <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span> poly1<span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"br0\">[</span>poly2<span class=\"br0\">]</span> <span class=\"br0\">(</span>mul poly1 poly2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"br0\">[</span>poly2 <span class=\"sy0\">&amp;</span> more<span class=\"br0\">]</span> <span class=\"br0\">(</span>mul poly1 poly2 more<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>poly1 poly2<span class=\"br0\">]</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>product <span class=\"br0\">(</span>atom <span class=\"br0\">(</span>transient <span class=\"br0\">(</span>sorted<span class=\"sy0\">-</span>map<span class=\"sy0\">-</span>by grevlex<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">doall</span>  <span class=\"co1\">;; `for` is lazy so must to be forced for side-effects </span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">for</span> <span class=\"br0\">[</span>term1 poly1<br/>            term2 poly2<br/>           \u00a0:<span class=\"kw1\">let</span> <span class=\"br0\">[</span>vars <span class=\"br0\">(</span>mapv <span class=\"sy0\">+</span>' <span class=\"br0\">(</span>key term1<span class=\"br0\">)</span> <span class=\"br0\">(</span>key term2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  coeff <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span>val term1<span class=\"br0\">)</span> <span class=\"br0\">(</span>val term2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>contains? @product vars<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>swap<span class=\"sy0\">!</span> product <span class=\"kw1\">assoc</span><span class=\"sy0\">!</span> vars <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>get @product vars<span class=\"br0\">)</span> coeff<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>swap<span class=\"sy0\">!</span> product <span class=\"kw1\">assoc</span><span class=\"sy0\">!</span> vars coeff<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> product<br/>          <span class=\"br0\">(</span>deref<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>persistent<span class=\"sy0\">!</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>denull<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"br0\">[</span>poly1 poly2 <span class=\"sy0\">&amp;</span> more<span class=\"br0\">]</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">reduce</span> mul <span class=\"br0\">(</span>mul poly1 poly2<span class=\"br0\">)</span> more<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> compl <span class=\"br0\">[</span>term1 term2<span class=\"br0\">]</span> <br/>  <span class=\"br0\">(</span><span class=\"kw1\">map</span> <span class=\"br0\">(</span><span class=\"kw1\">fn</span> <span class=\"br0\">[</span>x y<span class=\"br0\">]</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">not</span><span class=\"sy0\">=</span> <span class=\"nu0\">0</span> y<span class=\"br0\">)</span><span class=\"br0\">)</span> nil<br/>           <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> x y<span class=\"br0\">)</span> nil<br/>           <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> x y<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> x y<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       term1<br/>       term2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> s<span class=\"sy0\">-</span>poly <span class=\"br0\">[</span>f g<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>f<span class=\"sy0\">-</span>vars <span class=\"br0\">(</span><span class=\"kw1\">first</span> f<span class=\"br0\">)</span><br/>        g<span class=\"sy0\">-</span>vars <span class=\"br0\">(</span><span class=\"kw1\">first</span> g<span class=\"br0\">)</span><br/>        lcm <span class=\"br0\">(</span>compl f<span class=\"sy0\">-</span>vars g<span class=\"sy0\">-</span>vars<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">not-any?</span> <span class=\"kw1\">nil?</span> lcm<span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"kw1\">vec</span> lcm<span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span>second f<span class=\"br0\">)</span> <span class=\"br0\">(</span>second g<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> divide <span class=\"br0\">[</span>f g<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>f f<br/>         g g<br/>         result <span class=\"br0\">(</span>transient <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>         remainder <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> f<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>list <span class=\"br0\">(</span>persistent<span class=\"sy0\">!</span> result<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"sy0\">-&gt;&gt;</span> remainder<br/>                 <span class=\"br0\">(</span><span class=\"kw1\">filter</span> #<span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">nil?</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">into</span> <span class=\"br0\">(</span>sorted<span class=\"sy0\">-</span>map<span class=\"sy0\">-</span>by grevlex<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>term1 <span class=\"br0\">(</span><span class=\"kw1\">first</span> f<span class=\"br0\">)</span><br/>            term2 <span class=\"br0\">(</span><span class=\"kw1\">first</span> g<span class=\"br0\">)</span><br/>            s<span class=\"sy0\">-</span>term <span class=\"br0\">(</span>s<span class=\"sy0\">-</span>poly term1 term2<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">nil?</span> s<span class=\"sy0\">-</span>term<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>dissoc f <span class=\"br0\">(</span><span class=\"kw1\">first</span> term1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span>dissoc g <span class=\"br0\">(</span><span class=\"kw1\">first</span> term2<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 result<br/>                 <span class=\"br0\">(</span><span class=\"kw1\">conj</span> remainder term1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>sub f <span class=\"br0\">(</span>mul g s<span class=\"sy0\">-</span>term<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 g<br/>                 <span class=\"br0\">(</span><span class=\"kw1\">conj</span><span class=\"sy0\">!</span> result s<span class=\"sy0\">-</span>term<span class=\"br0\">)</span><br/>                 remainder<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">deftest</span> divide<span class=\"sy0\">-</span>tests<br/>  <span class=\"br0\">(</span>is <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>divide <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"nu0\">2</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">3</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"nu0\">5</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><br/>                 <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"nu0\">2</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">3</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"nu0\">5</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>         '<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>is <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>divide <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"nu0\">2</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">3</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"nu0\">5</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span><br/>                 <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>         '<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"nu0\">2</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">3</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"nu0\">5</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">7</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>is <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>divide <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"nu0\">2</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">10</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"nu0\">3</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">15</span><span class=\"br0\">}</span><br/>                 <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"nu0\">1</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>         '<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">2</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>is <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span>divide <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"nu0\">2</span>, <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">10</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"nu0\">3</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">15</span><span class=\"br0\">}</span><br/>                 <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">2</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">3</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>         '<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"nu0\">1</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"nu0\">5</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 41, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> add <span class=\"br0\">(</span>p1 p2<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>sum '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>endp p1<span class=\"br0\">)</span> <span class=\"br0\">(</span>endp p2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>nreverse sum<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>pd1 <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp p1<span class=\"br0\">)</span> -<span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">caar</span> p1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>pd2 <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp p2<span class=\"br0\">)</span> -<span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">caar</span> p2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>c1 c2<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>           <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> pd1 pd2<span class=\"br0\">)</span> <span class=\"br0\">(</span>values <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span>pop p1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> pd1 pd2<span class=\"br0\">)</span> <span class=\"br0\">(</span>values <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span>pop p2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>t  <span class=\"br0\">(</span>values <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span>pop p1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span>pop p2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>csum <span class=\"br0\">(</span>+ c1 c2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>unless <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> csum<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">setf</span> sum <span class=\"br0\">(</span>acons <span class=\"br0\">(</span><span class=\"kw1\">max</span> pd1 pd2<span class=\"br0\">)</span> csum sum<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> multiply <span class=\"br0\">(</span>p1 p2<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>flet <span class=\"br0\">(</span><span class=\"br0\">(</span>*p2 <span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>destructuring-bind <span class=\"br0\">(</span>d <span class=\"sy0\">.</span> c<span class=\"br0\">)</span> p<br/>             <span class=\"br0\">(</span>loop for <span class=\"br0\">(</span>pd <span class=\"sy0\">.</span> pc<span class=\"br0\">)</span> in p2<br/>                   collecting <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>+ d pd<span class=\"br0\">)</span> <span class=\"br0\">(</span>* c pc<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>reduce 'add <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'*p2 p1<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-</span><span class=\"kw1\">value</span> '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> subtract <span class=\"br0\">(</span>p1 p2<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>add p1 <span class=\"br0\">(</span>multiply '<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">.</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> p2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> divide <span class=\"br0\">(</span>dividend divisor <span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span>sum '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>assert <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>endp divisor<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>divisor<span class=\"br0\">)</span><br/>    'division-by-zero<br/>    <span class=\"sy0\">:</span><span class=\"me1\">operation</span> 'divide<br/>    <span class=\"sy0\">:</span><span class=\"me1\">operands</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> dividend divisor<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>flet <span class=\"br0\">(</span><span class=\"br0\">(</span>floor1 <span class=\"br0\">(</span>dividend divisor<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp dividend<span class=\"br0\">)</span> <span class=\"br0\">(</span>values '<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>destructuring-bind <span class=\"br0\">(</span>d1 <span class=\"sy0\">.</span> c1<span class=\"br0\">)</span> <span class=\"br0\">(</span>first dividend<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>destructuring-bind <span class=\"br0\">(</span>d2 <span class=\"sy0\">.</span> c2<span class=\"br0\">)</span> <span class=\"br0\">(</span>first divisor<span class=\"br0\">)</span><br/>                 <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> d2 d1<span class=\"br0\">)</span> <span class=\"br0\">(</span>values '<span class=\"br0\">(</span><span class=\"br0\">)</span> dividend<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>quot <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span>- d1 d2<span class=\"br0\">)</span> <span class=\"br0\">(</span>/ c1 c2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span><span class=\"kw1\">rem</span> <span class=\"br0\">(</span>subtract dividend <span class=\"br0\">(</span>multiply divisor quot<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span>values quot <span class=\"kw1\">rem</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop <span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>quotient remainder<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>floor1 dividend divisor<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp quotient<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span>values sum remainder<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"kw1\">setf</span> dividend remainder<br/>                    sum <span class=\"br0\">(</span>add quotient sum<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 42, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">typecons</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">;</span><br/>\u00a0<br/>Tuple<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> polyDiv<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> inN<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> inD<span class=\"br0\">)</span><br/><span class=\"kw4\">nothrow</span> <span class=\"kw4\">pure</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// Code smell: a function that does two things.</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> trimAndDegree<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">ref</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> poly<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> <span class=\"kw4\">pure</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        poly <span class=\"sy0\">=</span> poly.<span class=\"me1\">retro</span>.<span class=\"me1\">find</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> a <span class=\"sy0\">!=</span> b <span class=\"br0\">}</span><span class=\"br0\">(</span><span class=\"nu16\">0.0</span><span class=\"br0\">)</span>.<span class=\"me1\">retro</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> poly.<span class=\"me1\">length</span>.<span class=\"me1\">signed</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw4\">auto</span> N <span class=\"sy0\">=</span> inN.<span class=\"me1\">dup</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span> D <span class=\"sy0\">=</span> inD<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> dD <span class=\"sy0\">=</span> trimAndDegree<span class=\"br0\">(</span>D<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> dN <span class=\"sy0\">=</span> trimAndDegree<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> q<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dD <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">throw</span> <span class=\"kw2\">new</span> <span class=\"kw3\">Error</span><span class=\"br0\">(</span><span class=\"st0\">\"ZeroDivisionError\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dN <span class=\"sy0\">&gt;=</span> dD<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        q <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu16\">0.0</span><span class=\"br0\">]</span>.<span class=\"me1\">replicate</span><span class=\"br0\">(</span>dN<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>dN <span class=\"sy0\">&gt;=</span> dD<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">auto</span> d <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu16\">0.0</span><span class=\"br0\">]</span>.<span class=\"me1\">replicate</span><span class=\"br0\">(</span>dN <span class=\"sy0\">-</span> dD<span class=\"br0\">)</span> <span class=\"sy0\">~</span> D<span class=\"sy0\">;</span><br/>            <span class=\"kw4\">immutable</span> mult <span class=\"sy0\">=</span> q<span class=\"br0\">[</span>dN <span class=\"sy0\">-</span> dD<span class=\"br0\">]</span> <span class=\"sy0\">=</span> N<span class=\"br0\">[</span>$ <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> d<span class=\"br0\">[</span>$ <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            d<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">*=</span> mult<span class=\"sy0\">;</span><br/>            N<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> d<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            dN <span class=\"sy0\">=</span> trimAndDegree<span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span><br/>        q <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu16\">0.0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> tuple<span class=\"br0\">(</span>q<span class=\"sy0\">,</span> N<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">int</span> trimAndDegree1<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">ref</span> T<span class=\"br0\">[</span><span class=\"br0\">]</span> poly<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> <span class=\"kw4\">pure</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>    poly.<span class=\"me1\">length</span> <span class=\"sy0\">-=</span> poly.<span class=\"me1\">retro</span>.<span class=\"me1\">countUntil</span><span class=\"sy0\">!</span>q<span class=\"br0\">{</span> a <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> poly.<span class=\"me1\">length</span>.<span class=\"me1\">signed</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">immutable</span> N <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu16\">42.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">12.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> D <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu16\">3.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">1.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"sy0\">,</span> <span class=\"nu16\">0.0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"%s /\u00a0%s =\u00a0%s  remainder\u00a0%s\"</span><span class=\"sy0\">,</span> N<span class=\"sy0\">,</span> D<span class=\"sy0\">,</span> polyDiv<span class=\"br0\">(</span>N<span class=\"sy0\">,</span> D<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 1, "block": "<pre>pragma.syntax(\"0.9\")\npragma.enable(\"accumulator\")\n\ndef superscript(x, out) {\n    if (x &gt;= 10) { superscript(x // 10) }\n    out.print(\"\u2070\u00b9\u00b2\u00b3\u2074\u2075\u2076\u2077\u2078\u2079\"[x\u00a0%% 10])\n}\n\ndef makePolynomial(initCoeffs\u00a0:List) {\n    def degree\u00a0:= {\n        var i\u00a0:= initCoeffs.size() - 1\n        while (i &gt;= 0 &amp;&amp; initCoeffs[i] &lt;=&gt; 0) { i -= 1 }\n        if (i &lt; 0) { -Infinity } else { i }\n    }\n    def coeffs\u00a0:= initCoeffs(0, if (degree == -Infinity) { [] } else { degree + 1 })\n    \n    def polynomial {\n      /** Print the polynomial (not necessary for the task) */\n        to __printOn(out) {\n            out.print(\"(\u03bbx.\")\n            var first\u00a0:= true\n            for i in (0..!(coeffs.size())).descending() {\n                def coeff\u00a0:= coeffs[i]\n                if (coeff &lt;=&gt; 0) { continue }\n                out.print(\" \")\n                if (coeff &lt;=&gt; 1 &amp;&amp;\u00a0!(i &lt;=&gt; 0)) { \n                  # no coefficient written if it's 1 and not the constant term\n                } else if (first) {      out.print(coeff)\n                } else if (coeff &gt; 0) {  out.print(\"+ \", coeff)\n                } else {                 out.print(\"- \", -coeff)\n                }\n                if (i &lt;=&gt; 0) {         # no x if it's the constant term\n                } else if (i &lt;=&gt; 1) {  out.print(\"x\")\n                } else {               out.print(\"x\"); superscript(i, out)\n                }\n                first\u00a0:= false\n            }\n            out.print(\")\")\n        }\n        \n        /** Evaluate the polynomial (not necessary for the task) */\n        to run(x) {\n          return accum 0 for i =&gt; c in coeffs { _ + c * x**i }\n        }\n        \n        to degree() { return degree }\n        to coeffs() { return coeffs }\n        to highestCoeff() { return coeffs[degree] }\n        \n        /** Could support another polynomial, but not part of this task.\n            Computes this * x**power. */\n        to timesXToThe(power) {\n            return makePolynomial([0] * power + coeffs)\n        }\n        \n        /** Multiply (by a scalar only). */\n        to multiply(scalar) {\n            return makePolynomial(accum [] for x in coeffs { _.with(x * scalar) })\n        }\n        \n        /** Subtract (by another polynomial only). */\n        to subtract(other) {\n            def oc\u00a0:= other.coeffs()\u00a0:List\n            return makePolynomial(accum [] for i in 0..(coeffs.size().max(oc.size())) { _.with(coeffs.fetch(i, fn{0}) - oc.fetch(i, fn{0})) })\n        }\n        \n        /** Polynomial long division. */\n        to quotRem(denominator, trace) {\n            var numerator\u00a0:= polynomial\n            require(denominator.degree() &gt;= 0)\n            if (numerator.degree() &lt; denominator.degree()) {\n                return [makePolynomial([]), denominator]\n            } else {\n                var quotientCoeffs\u00a0:= [0] * (numerator.degree() - denominator.degree())\n                while (numerator.degree() &gt;= denominator.degree()) {\n                    trace.print(\"  \", numerator, \"\\n\")\n\n                    def qCoeff\u00a0:= numerator.highestCoeff() / denominator.highestCoeff()\n                    def qPower\u00a0:= numerator.degree() - denominator.degree()\n                    quotientCoeffs with= (qPower, qCoeff)\n\n                    def d\u00a0:= denominator.timesXToThe(qPower) * qCoeff\n                    trace.print(\"- \", d,  \"          (= \", denominator, \" * \", qCoeff, \"x\"); superscript(qPower, trace); trace.print(\")\\n\")\n                    numerator -= d\n\n                    trace.print(\"  -------------------------- (Quotient so far: \",  makePolynomial(quotientCoeffs), \")\\n\")\n                }\n                return [makePolynomial(quotientCoeffs), numerator]\n            }\n        }\n    }\n    return polynomial\n}</pre>"}, {"lang": "Elixir", "loc": 31, "block": "<pre class=\"text highlighted_source\">defmodule Polynomial do<br/>  def division(_, []), do: raise ArgumentError, \"denominator is zero\"<br/>  def division(_, [0]), do: raise ArgumentError, \"denominator is zero\"<br/>  def division(f, g) when length(f) &lt; length(g), do: {[0], f}<br/>  def division(f, g) do<br/>    {q, r} = division(g, [], f)<br/>    if q==[], do: q = [0]<br/>    if r==[], do: r = [0]<br/>    {q, r}<br/>  end<br/>\u00a0<br/>  defp division(g, q, r) when length(r) &lt; length(g), do: {q, r}<br/>  defp division(g, q, r) do<br/>    p = hd(r) / hd(g)<br/>    r2 = Enum.zip(r, g)<br/>         |&gt; Enum.with_index<br/>         |&gt; Enum.reduce(r, fn {{pn,pg},i},acc -&gt;<br/>              List.replace_at(acc, i, pn - p * pg)<br/>            end)<br/>    division(g, q++[p], tl(r2))<br/>  end<br/>end<br/>\u00a0<br/>[ { [1, -12, 0, -42], [1, -3] },<br/>  { [1, -12, 0, -42], [1, 1, -3] },<br/>  { [1, 3, 2],        [1, 1] },<br/>  { [1, -4, 6, 5, 3], [1, 2, 1] } ]<br/>|&gt; Enum.each(fn {f,g} -&gt;<br/>     {q, r} = Polynomial.division(f, g)<br/>     IO.puts \"#{inspect f} / #{inspect g} =&gt; #{inspect q} remainder #{inspect r}\"<br/>   end)</pre>"}, {"lang": "Fortran", "loc": 80, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> Polynom<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> poly_long_div<span class=\"br0\">(</span>n, d, q, r<span class=\"br0\">)</span><br/>    <span class=\"kw3\">real</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span>, d<br/>    <span class=\"kw3\">real</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">out</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">q</span><br/>    <span class=\"kw3\">real</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">out</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span>, <span class=\"kw3\">optional</span> <span class=\"sy0\">::</span> <span class=\"me2\">r</span><br/>\u00a0<br/>    <span class=\"kw3\">real</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">nt</span>, dt, rt<br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">gn</span>, gt, gd<br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> &gt;<span class=\"sy0\">=</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw2\">.<span class=\"me1\">and</span>.</span> <span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span>  <br/>       <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>nt<span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>, dt<span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>, rt<span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>       nt <span class=\"sy0\">=</span> n<br/>       dt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>       dt<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> d<br/>       rt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>       gn <span class=\"sy0\">=</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>       gd <span class=\"sy0\">=</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>       gt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>       <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span> d<span class=\"br0\">(</span>gd<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>          gd <span class=\"sy0\">=</span> gd <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>       <span class=\"kw1\">do</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span> gn &gt;<span class=\"sy0\">=</span> gd <span class=\"br0\">)</span><br/>          dt <span class=\"sy0\">=</span> <span class=\"kw4\">eoshift</span><span class=\"br0\">(</span>dt, <span class=\"sy0\">-</span><span class=\"br0\">(</span>gn<span class=\"sy0\">-</span>gd<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          rt<span class=\"br0\">(</span>gn<span class=\"sy0\">-</span>gd<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> nt<span class=\"br0\">(</span>gn<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> dt<span class=\"br0\">(</span>gn<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          nt <span class=\"sy0\">=</span> nt <span class=\"sy0\">-</span> dt <span class=\"sy0\">*</span> rt<span class=\"br0\">(</span>gn<span class=\"sy0\">-</span>gd<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          gt <span class=\"sy0\">=</span> <span class=\"kw4\">max</span><span class=\"br0\">(</span>gt, gn<span class=\"sy0\">-</span>gd<span class=\"br0\">)</span><br/>          <span class=\"kw1\">do</span><br/>             gn <span class=\"sy0\">=</span> gn <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>             <span class=\"kw1\">if</span> <span class=\"br0\">(</span> nt<span class=\"br0\">(</span>gn<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">exit</span><br/>          <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>          dt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>          dt<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> d<br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>       <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>q<span class=\"br0\">(</span>gt<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       q <span class=\"sy0\">=</span> rt<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>gt<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw4\">present</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>gn<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>             <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>r<span class=\"br0\">(</span>gn<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             r <span class=\"sy0\">=</span> nt<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>gn<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">else</span><br/>             <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>r<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             r <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>          <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>       <span class=\"kw1\">deallocate</span><span class=\"br0\">(</span>nt, dt, rt<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>       <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>q<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       q <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>       <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <span class=\"kw4\">present</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>r<span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          r <span class=\"sy0\">=</span> n<br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> poly_long_div<br/>\u00a0<br/>  <span class=\"kw1\">subroutine</span> poly_print<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <span class=\"kw3\">real</span>, <span class=\"kw3\">dimension</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">p</span><br/>\u00a0<br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span>, <span class=\"nu0\">1</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>       <span class=\"kw1\">if</span> <span class=\"br0\">(</span> i &gt; <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>          write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">'(F0.2,\"x^\",I0,\" + \")'</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> p<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>       <span class=\"kw1\">else</span><br/>          write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">'(F0.2)'</span><span class=\"br0\">)</span> p<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>       <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>\u00a0<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span> poly_print<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span> Polynom</pre>"}, {"lang": "Go", "loc": 46, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    n <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">42</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">12</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">}</span><br/>    d <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">{</span><span class=\"sy3\">-</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"N:\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"D:\"</span><span class=\"sy1\">,</span> d<span class=\"sy1\">)</span><br/>    q<span class=\"sy1\">,</span> r<span class=\"sy1\">,</span> ok <span class=\"sy2\">:=</span> pld<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> d<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> ok <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Q:\"</span><span class=\"sy1\">,</span> q<span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">(</span><span class=\"st0\">\"R:\"</span><span class=\"sy1\">,</span> r<span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"error\"</span><span class=\"sy1\">)</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> degree<span class=\"sy1\">(</span>p <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> d <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>p<span class=\"sy1\">)</span> <span class=\"sy3\">-</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> d &gt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> d<span class=\"sy2\">--</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> p<span class=\"sy1\">[</span>d<span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> d<br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> pld<span class=\"sy1\">(</span>nn<span class=\"sy1\">,</span> dd <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span>q<span class=\"sy1\">,</span> r <span class=\"sy1\">[]</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> ok <span class=\"kw4\">bool</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> degree<span class=\"sy1\">(</span>dd<span class=\"sy1\">)</span> &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    nn <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>r<span class=\"sy1\">,</span> nn<span class=\"sy4\">...</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">if</span> degree<span class=\"sy1\">(</span>nn<span class=\"sy1\">)</span> &gt;<span class=\"sy2\">=</span> degree<span class=\"sy1\">(</span>dd<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>        q <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> degree<span class=\"sy1\">(</span>nn<span class=\"sy1\">)</span><span class=\"sy3\">-</span>degree<span class=\"sy1\">(</span>dd<span class=\"sy1\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> degree<span class=\"sy1\">(</span>nn<span class=\"sy1\">)</span> &gt;<span class=\"sy2\">=</span> degree<span class=\"sy1\">(</span>dd<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            d <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">float64</span><span class=\"sy1\">,</span> degree<span class=\"sy1\">(</span>nn<span class=\"sy1\">)</span><span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>            <span class=\"kw3\">copy</span><span class=\"sy1\">(</span>d<span class=\"sy1\">[</span>degree<span class=\"sy1\">(</span>nn<span class=\"sy1\">)</span><span class=\"sy3\">-</span>degree<span class=\"sy1\">(</span>dd<span class=\"sy1\">):],</span> dd<span class=\"sy1\">)</span><br/>            q<span class=\"sy1\">[</span>degree<span class=\"sy1\">(</span>nn<span class=\"sy1\">)</span><span class=\"sy3\">-</span>degree<span class=\"sy1\">(</span>dd<span class=\"sy1\">)]</span> <span class=\"sy2\">=</span> nn<span class=\"sy1\">[</span>degree<span class=\"sy1\">(</span>nn<span class=\"sy1\">)]</span> <span class=\"sy3\">/</span> d<span class=\"sy1\">[</span>degree<span class=\"sy1\">(</span>d<span class=\"sy1\">)]</span><br/>            <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> d <span class=\"sy1\">{</span><br/>                d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">*=</span> q<span class=\"sy1\">[</span>degree<span class=\"sy1\">(</span>nn<span class=\"sy1\">)</span><span class=\"sy3\">-</span>degree<span class=\"sy1\">(</span>dd<span class=\"sy1\">)]</span><br/>                nn<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">-=</span> d<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> q<span class=\"sy1\">,</span> nn<span class=\"sy1\">,</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "GAP", "loc": 5, "block": "<pre class=\"text highlighted_source\">x\u00a0:= Indeterminate(Rationals, \"x\");<br/>p\u00a0:= x^11 + 3*x^8 + 7*x^2 + 3;<br/>q\u00a0:= x^7 + 5*x^3 + 1;<br/>QuotientRemainder(p, q);<br/># [ x^4+3*x-5, -16*x^4+25*x^3+7*x^2-3*x+8 ]</pre>"}, {"lang": "Haskell", "loc": 22, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/>\u00a0<br/>shift n l <span class=\"sy0\">=</span> l <span class=\"sy0\">++</span> replicate n <span class=\"nu0\">0</span><br/>\u00a0<br/>pad n l <span class=\"sy0\">=</span> replicate n <span class=\"nu0\">0</span> <span class=\"sy0\">++</span> l<br/>\u00a0<br/>norm <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Fractional\"><span class=\"kw4\">Fractional</span></a> a <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>norm <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:dropWhile\"><span class=\"kw3\">dropWhile</span></a> <span class=\"br0\">(</span><span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\u00a0<br/>deg l <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:length\"><span class=\"kw3\">length</span></a> <span class=\"br0\">(</span>norm l<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a><span class=\"st0\">' op p q = zipWith op (pad (-d) p) (pad d q)<br/>  where d = (length p) - (length q)<br/>\u00a0<br/>polydiv f g = aux (norm f) (norm g) []<br/>  where aux f s q | ddif &lt; 0 = (q, f)<br/>                  | otherwise = aux f'</span> s q<span class=\"st0\">'<br/>           where ddif = (deg f) - (deg s)<br/>                 k = (head f) / (head s)<br/>                 ks = map (* k) $ shift ddif s<br/>                 q'</span> <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a><span class=\"st0\">' (+) q $ shift ddif [k]<br/>                 f'</span> <span class=\"sy0\">=</span> norm <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a><span class=\"st0\">' (-) f ks</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">divmod=:[: <span class=\"sy0\">(</span>}:\u00a0; {:<span class=\"sy0\">)</span> <span class=\"sy0\">(</span>[ <span class=\"sy0\">(</span>] -/@,:&amp;}. <span class=\"sy0\">(</span>* {:<span class=\"sy0\">))</span> ] ,\u00a0%&amp;{.~<span class=\"sy0\">)</span>^:<span class=\"sy0\">(</span>&gt;:@-~&amp;#<span class=\"sy0\">)</span>&amp;.|.~</pre>"}, {"lang": "Java", "loc": 118, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.util.Arrays</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> PolynomialLongDivision <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw1\">class</span> Solution <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> quotient, remainder<span class=\"sy0\">;</span><br/>\u00a0<br/>        Solution<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> q, <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> r<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">quotient</span> <span class=\"sy0\">=</span> q<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">this</span>.<span class=\"me1\">remainder</span> <span class=\"sy0\">=</span> r<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> polyDegree<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> p.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"sy0\">--</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> i<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">MIN_VALUE</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> polyShiftRight<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> p, <span class=\"kw4\">int</span> places<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>places <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> p<span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> pd <span class=\"sy0\">=</span> polyDegree<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>pd <span class=\"sy0\">+</span> places <span class=\"sy0\">&gt;=</span> p.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"The number of places to be shifted is too large\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> d <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">copyOf</span><span class=\"br0\">(</span>p, p.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> pd<span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"sy0\">--</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            d<span class=\"br0\">[</span>i <span class=\"sy0\">+</span> places<span class=\"br0\">]</span> <span class=\"sy0\">=</span> d<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            d<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> d<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> polyMultiply<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> p, <span class=\"kw4\">double</span> m<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> p.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*=</span> m<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> polySubtract<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> p, <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> p.<span class=\"me1\">length</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> Solution polyLongDiv<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> n, <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> d<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> d.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Numerator and denominator vectors must have the same size\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw4\">int</span> nd <span class=\"sy0\">=</span> polyDegree<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> dd <span class=\"sy0\">=</span> polyDegree<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>dd <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Divisor must have at least one one-zero coefficient\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>nd <span class=\"sy0\">&lt;</span> dd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">throw</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aillegalargumentexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">IllegalArgumentException</span></a><span class=\"br0\">(</span><span class=\"st0\">\"The degree of the divisor cannot exceed that of the numerator\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> n2 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Arrays</span></a>.<span class=\"me1\">copyOf</span><span class=\"br0\">(</span>n, n.<span class=\"me1\">length</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> q <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span>n.<span class=\"me1\">length</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>nd <span class=\"sy0\">&gt;=</span> dd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> d2 <span class=\"sy0\">=</span> polyShiftRight<span class=\"br0\">(</span>d, nd <span class=\"sy0\">-</span> dd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            q<span class=\"br0\">[</span>nd <span class=\"sy0\">-</span> dd<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n2<span class=\"br0\">[</span>nd<span class=\"br0\">]</span> <span class=\"sy0\">/</span> d2<span class=\"br0\">[</span>nd<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            polyMultiply<span class=\"br0\">(</span>d2, q<span class=\"br0\">[</span>nd <span class=\"sy0\">-</span> dd<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            polySubtract<span class=\"br0\">(</span>n2, d2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            nd <span class=\"sy0\">=</span> polyDegree<span class=\"br0\">(</span>n2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> Solution<span class=\"br0\">(</span>q, n2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> polyShow<span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> p<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> pd <span class=\"sy0\">=</span> polyDegree<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> pd<span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"sy0\">--</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw4\">double</span> coeff <span class=\"sy0\">=</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>coeff <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>coeff <span class=\"sy0\">==</span> <span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> pd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" + \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>coeff <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> pd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\" - \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"-\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>coeff <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> pd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\" -\u00a0%.1f\"</span>, <span class=\"sy0\">-</span>coeff<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>coeff<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> pd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\" +\u00a0%.1f\"</span>, coeff<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span>coeff<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"x^%d\"</span>, i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"x\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> n <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">42.0</span>, <span class=\"nu0\">0.0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">12.0</span>, <span class=\"nu0\">1.0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span> d <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">double</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">{</span><span class=\"sy0\">-</span><span class=\"nu0\">3.0</span>, <span class=\"nu0\">1.0</span>, <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Numerator  \u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        polyShow<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Denominator\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        polyShow<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"-------------------------------------\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Solution sol <span class=\"sy0\">=</span> polyLongDiv<span class=\"br0\">(</span>n, d<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Quotient   \u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        polyShow<span class=\"br0\">(</span>sol.<span class=\"me1\">quotient</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"Remainder  \u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        polyShow<span class=\"br0\">(</span>sol.<span class=\"me1\">remainder</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Julia", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using Polynomials<br/>\u00a0<br/>p = Poly([-42,0,-12,1])<br/>q = Poly([-3,1])<br/>\u00a0<br/>d, r = divrem(p,q)<br/>\u00a0<br/>println(p, \" divided by \", q, \" is \", d, \" with remainder \", r, \".\")<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 90, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.51</span><br/>\u00a0<br/>typealias IAE <span class=\"sy0\">=</span> IllegalArgumentException<br/>\u00a0<br/>data <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Solution<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> quotient<span class=\"sy0\">:</span> DoubleArray, <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> remainder<span class=\"sy0\">:</span> DoubleArray<span class=\"br0\">)</span><br/>\u00a0<br/>fun polyDegree<span class=\"br0\">(</span>p<span class=\"sy0\">:</span> DoubleArray<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in p.<span class=\"me1\">size</span> - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> i<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Int.<span class=\"me1\">MIN_VALUE</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun polyShiftRight<span class=\"br0\">(</span>p<span class=\"sy0\">:</span> DoubleArray, places<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> DoubleArray <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>places <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> p<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pd <span class=\"sy0\">=</span> polyDegree<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>pd + places <span class=\"sy0\">&gt;=</span> p.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IAE<span class=\"br0\">(</span><span class=\"st0\">\"The number of places to be shifted is too large\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> p.<span class=\"me1\">copyOf</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in pd downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        d<span class=\"br0\">[</span>i + places<span class=\"br0\">]</span> <span class=\"sy0\">=</span> d<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        d<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0.0</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> d<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun polyMultiply<span class=\"br0\">(</span>p<span class=\"sy0\">:</span> DoubleArray, m<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until p.<span class=\"me1\">size</span><span class=\"br0\">)</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*=</span> m<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun polySubtract<span class=\"br0\">(</span>p<span class=\"sy0\">:</span> DoubleArray, s<span class=\"sy0\">:</span> DoubleArray<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until p.<span class=\"me1\">size</span><span class=\"br0\">)</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> -<span class=\"sy0\">=</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun polyLongDiv<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> DoubleArray, d<span class=\"sy0\">:</span> DoubleArray<span class=\"br0\">)</span><span class=\"sy0\">:</span> Solution <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n.<span class=\"me1\">size</span> <span class=\"sy0\">!=</span> d.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IAE<span class=\"br0\">(</span><span class=\"st0\">\"Numerator and denominator vectors must have the same size\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> nd <span class=\"sy0\">=</span> polyDegree<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dd <span class=\"sy0\">=</span> polyDegree<span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>dd <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IAE<span class=\"br0\">(</span><span class=\"st0\">\"Divisor must have at least one one-zero coefficient\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>nd <span class=\"sy0\">&lt;</span> dd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">throw</span></a> IAE<span class=\"br0\">(</span><span class=\"st0\">\"The degree of the divisor cannot exceed that of the numerator\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n2 <span class=\"sy0\">=</span> n.<span class=\"me1\">copyOf</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> q <span class=\"sy0\">=</span> DoubleArray<span class=\"br0\">(</span>n.<span class=\"me1\">size</span><span class=\"br0\">)</span>  <span class=\"co1\">// all elements zero by default</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>nd <span class=\"sy0\">&gt;=</span> dd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d2 <span class=\"sy0\">=</span> polyShiftRight<span class=\"br0\">(</span>d, nd - dd<span class=\"br0\">)</span><br/>        q<span class=\"br0\">[</span>nd - dd<span class=\"br0\">]</span> <span class=\"sy0\">=</span> n2<span class=\"br0\">[</span>nd<span class=\"br0\">]</span> / d2<span class=\"br0\">[</span>nd<span class=\"br0\">]</span><br/>        polyMultiply<span class=\"br0\">(</span>d2, q<span class=\"br0\">[</span>nd - dd<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        polySubtract<span class=\"br0\">(</span>n2, d2<span class=\"br0\">)</span><br/>        nd <span class=\"sy0\">=</span> polyDegree<span class=\"br0\">(</span>n2<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Solution<span class=\"br0\">(</span>q, n2<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun polyShow<span class=\"br0\">(</span>p<span class=\"sy0\">:</span> DoubleArray<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pd <span class=\"sy0\">=</span> polyDegree<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in pd downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> coeff <span class=\"sy0\">=</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>coeff <span class=\"sy0\">==</span> <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> continue<br/>        print <span class=\"br0\">(</span>when <span class=\"br0\">{</span><br/>            coeff <span class=\"sy0\">==</span>  <span class=\"nu0\">1.0</span>  -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> pd<span class=\"br0\">)</span> <span class=\"st0\">\" + \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"\"</span><br/>            coeff <span class=\"sy0\">==</span> -<span class=\"nu0\">1.0</span>  -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> pd<span class=\"br0\">)</span> <span class=\"st0\">\" - \"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"-\"</span><br/>            coeff <span class=\"sy0\">&lt;</span>   <span class=\"nu0\">0.0</span>  -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> pd<span class=\"br0\">)</span> <span class=\"st0\">\" - ${-coeff}\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"$coeff\"</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a>           -<span class=\"sy0\">&gt;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> pd<span class=\"br0\">)</span> <span class=\"st0\">\" + $coeff\"</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"st0\">\"$coeff\"</span><br/>        <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"x^$i\"</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\"x\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> doubleArrayOf<span class=\"br0\">(</span>-<span class=\"nu0\">42.0</span>, <span class=\"nu0\">0.0</span>, -<span class=\"nu0\">12.0</span>, <span class=\"nu0\">1.0</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> d <span class=\"sy0\">=</span> doubleArrayOf<span class=\"br0\">(</span> -<span class=\"nu0\">3.0</span>, <span class=\"nu0\">1.0</span>,   <span class=\"nu0\">0.0</span>, <span class=\"nu0\">0.0</span><span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"Numerator  \u00a0: \"</span><span class=\"br0\">)</span><br/>    polyShow<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"Denominator\u00a0: \"</span><span class=\"br0\">)</span><br/>    polyShow<span class=\"br0\">(</span>d<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"-------------------------------------\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>q, r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> polyLongDiv<span class=\"br0\">(</span>n, d<span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"Quotient   \u00a0: \"</span><span class=\"br0\">)</span><br/>    polyShow<span class=\"br0\">(</span>q<span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"Remainder  \u00a0: \"</span><span class=\"br0\">)</span><br/>    polyShow<span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Maple", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt; p\u00a0:= randpoly( x ); # pick a random polynomial in x<br/>                           5       4       3       2<br/>             p\u00a0:= -56 - 7 x  + 22 x  - 55 x  - 94 x  + 87 x<br/>\u00a0<br/>&gt; rem( p, x^2 + 2, x, 'q' ); # remainder<br/>                              220 + 169 x<br/>\u00a0<br/>&gt; q; # quotient<br/>                           3       2<br/>                       -7 x  + 22 x  - 41 x - 138<br/>\u00a0<br/>&gt; quo( p, x^2 + 2, x, 'r' ); # quotient<br/>                           3       2<br/>                       -7 x  + 22 x  - 41 x - 138<br/>\u00a0<br/>&gt; r; # remainder<br/>                              220 + 169 x<br/>&gt; expand( (x^2+2)*q + r - p ); # check<br/>                                   0<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 1, "block": "<pre class=\"text highlighted_source\">PolynomialQuotientRemainder[x^3-12 x^2-42,x-3,x]</pre>"}, {"lang": "OCaml", "loc": 8, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> shift n l <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> l <span class=\"kw1\">else</span> shift <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> n<span class=\"br0\">)</span> <span class=\"br0\">(</span>l @ <span class=\"br0\">[</span><span class=\"nu0\">0.0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> pad n l <span class=\"sy0\">=</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> l <span class=\"kw1\">else</span> pad <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0.0</span> <span class=\"sy0\">::</span> l<span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> norm <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> <span class=\"sy0\">|</span> <span class=\"nu0\">0.0</span> <span class=\"sy0\">::</span> tl <span class=\"sy0\">-&gt;</span> norm tl <span class=\"sy0\">|</span> x <span class=\"sy0\">-&gt;</span> x<br/><span class=\"kw1\">let</span> deg l <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>length <span class=\"br0\">(</span>norm l<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">let</span> zip op p q <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> d <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>length p<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>length q<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html\"><span class=\"kw2\">List</span></a><span class=\"sy0\">.</span>map2 op <span class=\"br0\">(</span>pad <span class=\"br0\">(</span><span class=\"sy0\">-</span>d<span class=\"br0\">)</span> p<span class=\"br0\">)</span> <span class=\"br0\">(</span>pad d q<span class=\"br0\">)</span></pre>"}, {"lang": "Octave", "loc": 37, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">function</span> <span class=\"br0\">[</span>q<span class=\"sy5\">,</span> r<span class=\"br0\">]</span> <span class=\"sy3\">=</span> poly_long_div<span class=\"br0\">(</span>n<span class=\"sy5\">,</span> d<span class=\"br0\">)</span><br/>  gd <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  pv <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/zeros.html\"><span class=\"kw5\">zeros</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>  pv<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">:</span>gd<span class=\"br0\">)</span> <span class=\"sy3\">=</span> d<span class=\"sy5\">;</span><br/>  <span class=\"kw4\">if</span> <span class=\"br0\">(</span> <a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> gd <span class=\"br0\">)</span><br/>    q <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>    <span class=\"kw4\">while</span> <span class=\"br0\">(</span> <a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> gd <span class=\"br0\">)</span><br/>      q <span class=\"sy3\">=</span> <span class=\"br0\">[</span>q<span class=\"sy5\">,</span> n<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">/</span>pv<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>      n <span class=\"sy3\">=</span> n <span class=\"sy1\">-</span> pv <span class=\"sy2\">.*</span> <span class=\"br0\">(</span>n<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">/</span>pv<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>      n <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/shift.html\"><span class=\"kw6\">shift</span></a><span class=\"br0\">(</span>n<span class=\"sy5\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy5\">;</span>           <span class=\"co2\">% </span><br/>      tn <span class=\"sy3\">=</span> n<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">:</span><a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy5\">;</span>      <span class=\"co2\">% eat the higher power term</span><br/>      n <span class=\"sy3\">=</span> tn<span class=\"sy5\">;</span>                     <span class=\"co2\">%</span><br/>      tp <span class=\"sy3\">=</span> pv<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">:</span><a href=\"http://octave.sourceforge.net/octave/function/length.html\"><span class=\"kw5\">length</span></a><span class=\"br0\">(</span>pv<span class=\"br0\">)</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/>      pv <span class=\"sy3\">=</span> tp<span class=\"sy5\">;</span>                    <span class=\"co2\">% make pv the same length of n</span><br/>    <span class=\"kw4\">endwhile</span><br/>    r <span class=\"sy3\">=</span> n<span class=\"sy5\">;</span><br/>  <span class=\"kw4\">else</span><br/>    q <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>    r <span class=\"sy3\">=</span> n<span class=\"sy5\">;</span><br/>  <span class=\"kw4\">endif</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><span class=\"br0\">[</span>q<span class=\"sy5\">,</span> r<span class=\"br0\">]</span> <span class=\"sy3\">=</span> poly_long_div<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span><span class=\"sy1\">-</span><span class=\"nu0\">12</span><span class=\"sy5\">,</span><span class=\"nu0\">0</span><span class=\"sy5\">,</span><span class=\"sy1\">-</span><span class=\"nu0\">42</span><span class=\"br0\">]</span><span class=\"sy5\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span><span class=\"sy1\">-</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/polyout.html\"><span class=\"kw6\">polyout</span></a><span class=\"br0\">(</span>q<span class=\"sy5\">,</span> <span class=\"co3\">'x'</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/polyout.html\"><span class=\"kw6\">polyout</span></a><span class=\"br0\">(</span>r<span class=\"sy5\">,</span> <span class=\"co3\">'x'</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span><span class=\"co4\">\"\"</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"br0\">[</span>q<span class=\"sy5\">,</span> r<span class=\"br0\">]</span> <span class=\"sy3\">=</span> poly_long_div<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span><span class=\"sy1\">-</span><span class=\"nu0\">12</span><span class=\"sy5\">,</span><span class=\"nu0\">0</span><span class=\"sy5\">,</span><span class=\"sy1\">-</span><span class=\"nu0\">42</span><span class=\"br0\">]</span><span class=\"sy5\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span><span class=\"sy1\">-</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/polyout.html\"><span class=\"kw6\">polyout</span></a><span class=\"br0\">(</span>q<span class=\"sy5\">,</span> <span class=\"co3\">'x'</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/polyout.html\"><span class=\"kw6\">polyout</span></a><span class=\"br0\">(</span>r<span class=\"sy5\">,</span> <span class=\"co3\">'x'</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span><span class=\"co4\">\"\"</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"br0\">[</span>q<span class=\"sy5\">,</span> r<span class=\"br0\">]</span> <span class=\"sy3\">=</span> poly_long_div<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span><span class=\"nu0\">3</span><span class=\"sy5\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy5\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/polyout.html\"><span class=\"kw6\">polyout</span></a><span class=\"br0\">(</span>q<span class=\"sy5\">,</span> <span class=\"co3\">'x'</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/polyout.html\"><span class=\"kw6\">polyout</span></a><span class=\"br0\">(</span>r<span class=\"sy5\">,</span> <span class=\"co3\">'x'</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span><span class=\"co4\">\"\"</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><span class=\"br0\">[</span>q<span class=\"sy5\">,</span> r<span class=\"br0\">]</span> <span class=\"sy3\">=</span> poly_long_div<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy5\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy5\">,</span><span class=\"sy1\">-</span><span class=\"nu0\">12</span><span class=\"sy5\">,</span><span class=\"nu0\">0</span><span class=\"sy5\">,</span><span class=\"sy1\">-</span><span class=\"nu0\">42</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/polyout.html\"><span class=\"kw6\">polyout</span></a><span class=\"br0\">(</span>q<span class=\"sy5\">,</span> <span class=\"co3\">'x'</span><span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/polyout.html\"><span class=\"kw6\">polyout</span></a><span class=\"br0\">(</span>r<span class=\"sy5\">,</span> <span class=\"co3\">'x'</span><span class=\"br0\">)</span><span class=\"sy5\">;</span></pre>"}, {"lang": "PARI/GP", "loc": 5, "block": "<pre class=\"parigp highlighted_source\">poldiv<span class=\"br0\">(</span>a<span class=\"sy0\">,</span>b<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>rem<span class=\"sy0\">=</span>a<span class=\"sy0\">%</span>b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">[</span><span class=\"br0\">(</span>a <span class=\"sy0\">-</span> rem<span class=\"br0\">)</span><span class=\"sy0\">/</span>b<span class=\"sy0\">,</span> rem<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>poldiv<span class=\"br0\">(</span>x<span class=\"sy0\">^</span><span class=\"nu1\">9</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span> x<span class=\"sy0\">^</span><span class=\"nu1\">3</span><span class=\"sy0\">+</span>x<span class=\"sy0\">-</span><span class=\"nu1\">3</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 22, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>min<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> poly_long_div<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$rn</span><span class=\"sy0\">,</span> <span class=\"re0\">$rd</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@n</span> <span class=\"sy0\">=</span> <span class=\"re0\">@$rn</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$gd</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><span class=\"re0\">@$rd</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><span class=\"re0\">@n</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$gd</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><span class=\"re0\">@n</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;=</span> <span class=\"re0\">$gd</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">my</span> <span class=\"re0\">$piv</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">/</span><span class=\"re0\">$rd</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t    <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"sy0\">,</span> <span class=\"re0\">$piv</span><span class=\"sy0\">;</span><br/>\t    <span class=\"re0\">$n</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">-=</span> <span class=\"re0\">$rd</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> <span class=\"re0\">$piv</span> <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span> <span class=\"nu0\">0</span> <span class=\"sy0\">..</span> min<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><span class=\"re0\">@n</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$gd</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t    <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"re0\">@n</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span> \\<span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/q.html\"><span class=\"kw3\">q</span></a><span class=\"sy0\">,</span> <span class=\"re0\">\\@n</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$rn</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 24, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> poly_long_div <span class=\"br0\">(</span> <span class=\"re0\">@n</span> <span class=\"kw1\">is</span> copy<span class=\"sy0\">,</span> <span class=\"re0\">@d</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"sy0\">|</span><span class=\"re0\">@n</span> <span class=\"kw1\">if</span> <span class=\"sy0\">+</span><span class=\"re0\">@n</span> <span class=\"sy0\">&lt;</span> <span class=\"sy0\">+</span><span class=\"re0\">@d</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@q</span> <span class=\"sy0\">=</span> gather <span class=\"kw1\">while</span> <span class=\"sy0\">+</span><span class=\"re0\">@n</span> <span class=\"sy0\">&gt;=</span> <span class=\"sy0\">+</span><span class=\"re0\">@d</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@n</span> <span class=\"sy0\">=</span> <span class=\"re0\">@n</span> Z<span class=\"sy0\">-</span> flat <span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"re0\">@d</span> <span class=\"kw1\">X</span><span class=\"sy0\">*</span> take <span class=\"br0\">(</span> <span class=\"re0\">@n</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">/</span> <span class=\"re0\">@d</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span> <span class=\"kw1\">xx</span> <span class=\"sy0\">*</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">@n</span><span class=\"sy0\">.</span><span class=\"kw3\">shift</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> $<span class=\"br0\">(</span><span class=\"re0\">@q</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> $<span class=\"br0\">(</span><span class=\"re0\">@n</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> xP <span class=\"br0\">(</span> <span class=\"re0\">$power</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"re0\">$power</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"sy0\">??</span> <span class=\"st0\">\"x^$power\"</span> <span class=\"sy0\">!!</span> <span class=\"re0\">$power</span><span class=\"sy0\">==</span><span class=\"nu0\">1</span> <span class=\"sy0\">??</span> <span class=\"st_h\">'x'</span> <span class=\"sy0\">!!</span> <span class=\"st_h\">''</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> poly_print <span class=\"br0\">(</span> <span class=\"re0\">@c</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw3\">join</span> <span class=\"st_h\">' + '</span><span class=\"sy0\">,</span> <span class=\"re0\">@c</span><span class=\"sy0\">.</span><span class=\"kw3\">kv</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> <span class=\"re0\">$^v</span> <span class=\"sy0\">~</span> xP<span class=\"br0\">(</span> <span class=\"re0\">@c</span><span class=\"sy0\">.</span><span class=\"kw3\">end</span> <span class=\"sy0\">-</span> <span class=\"re0\">$^k</span> <span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">@polys</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span> <span class=\"br0\">[</span>     <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">42</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>    <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">3</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">[</span> <span class=\"br0\">[</span>     <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">42</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">3</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">[</span> <span class=\"br0\">[</span>          <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span>   <span class=\"nu0\">2</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>    <span class=\"nu0\">1</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">[</span> <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span>   <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"sy0\">,</span>   <span class=\"nu0\">3</span> <span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span>  <span class=\"nu0\">1</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st_h\">'&lt;math&gt;\\begin{array}{rr}'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"re0\">@polys</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span> <span class=\"re0\">@a</span><span class=\"sy0\">,</span> <span class=\"re0\">@b</span> <span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">printf</span> Q<span class=\"st0\">\"%s , &amp;\u00a0%s <span class=\"es0\">\\\\</span><span class=\"es0\">\\\\</span><span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> poly_long_div<span class=\"br0\">(</span> <span class=\"re0\">@a</span><span class=\"sy0\">,</span> <span class=\"re0\">@b</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">map</span><span class=\"sy0\">:</span> <span class=\"br0\">{</span> poly_print<span class=\"br0\">(</span><span class=\"re0\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">'\\end{array}&lt;/math&gt;'</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 18, "block": "<pre class=\"text highlighted_source\">(de degree (P)<br/>   (let I NIL<br/>      (for (N . C) P<br/>         (or (=0 C) (setq I N)) )<br/>      (dec I) ) )<br/>\u00a0<br/>(de divPoly (N D)<br/>   (if (lt0 (degree D))<br/>      (quit \"Div/0\" D)<br/>      (let (Q NIL Diff)<br/>         (while (ge0 (setq Diff (- (degree N) (degree D))))<br/>            (setq Q (need (- -1 Diff) Q 0))<br/>            (let E D<br/>               (do Diff (push 'E 0))<br/>               (let F (/ (get N (inc (degree N))) (get E (inc (degree E))))<br/>                  (set (nth Q (inc Diff)) F)<br/>                  (setq N (mapcar '((N E) (- N (* E F))) N E)) ) ) )<br/>         (list Q N) ) ) )</pre>"}, {"lang": "Python", "loc": 34, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\"># -*- coding: utf-8 -*-</span><br/>\u00a0<br/><span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> izip<br/><span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> fabs<br/>\u00a0<br/><span class=\"kw1\">def</span> degree<span class=\"br0\">(</span>poly<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">while</span> poly <span class=\"kw1\">and</span> poly<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span>:<br/>        poly.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span>   <span class=\"co1\"># normalize</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span>poly<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><br/>\u00a0<br/><span class=\"kw1\">def</span> poly_div<span class=\"br0\">(</span>N<span class=\"sy0\">,</span> D<span class=\"br0\">)</span>:<br/>    dD <span class=\"sy0\">=</span> degree<span class=\"br0\">(</span>D<span class=\"br0\">)</span><br/>    dN <span class=\"sy0\">=</span> degree<span class=\"br0\">(</span>N<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> dD <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span>: <span class=\"kw1\">raise</span> <span class=\"kw2\">ZeroDivisionError</span><br/>    <span class=\"kw1\">if</span> dN <span class=\"sy0\">&gt;=</span> dD:<br/>        q <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> * dN<br/>        <span class=\"kw1\">while</span> dN <span class=\"sy0\">&gt;=</span> dD:<br/>            d <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>*<span class=\"br0\">(</span>dN - dD<span class=\"br0\">)</span> + D<br/>            mult <span class=\"sy0\">=</span> q<span class=\"br0\">[</span>dN - dD<span class=\"br0\">]</span> <span class=\"sy0\">=</span> N<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span> / <span class=\"kw2\">float</span><span class=\"br0\">(</span>d<span class=\"br0\">[</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            d <span class=\"sy0\">=</span> <span class=\"br0\">[</span>coeff*mult <span class=\"kw1\">for</span> coeff <span class=\"kw1\">in</span> d<span class=\"br0\">]</span><br/>            N <span class=\"sy0\">=</span> <span class=\"br0\">[</span>fabs <span class=\"br0\">(</span> coeffN - coeffd <span class=\"br0\">)</span> <span class=\"kw1\">for</span> coeffN<span class=\"sy0\">,</span> coeffd <span class=\"kw1\">in</span> izip<span class=\"br0\">(</span>N<span class=\"sy0\">,</span> d<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>            dN <span class=\"sy0\">=</span> degree<span class=\"br0\">(</span>N<span class=\"br0\">)</span><br/>        r <span class=\"sy0\">=</span> N<br/>    <span class=\"kw1\">else</span>:<br/>        q <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        r <span class=\"sy0\">=</span> N<br/>    <span class=\"kw1\">return</span> q<span class=\"sy0\">,</span> r<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">'__main__'</span>:<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"POLYNOMIAL LONG DIVISION\"</span><br/>    N <span class=\"sy0\">=</span> <span class=\"br0\">[</span>-<span class=\"nu0\">42</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> -<span class=\"nu0\">12</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    D <span class=\"sy0\">=</span> <span class=\"br0\">[</span>-<span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\" \u00a0%s /\u00a0%s =\"</span>\u00a0% <span class=\"br0\">(</span>N<span class=\"sy0\">,</span>D<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"\u00a0%s remainder\u00a0%s\"</span>\u00a0% poly_div<span class=\"br0\">(</span>N<span class=\"sy0\">,</span> D<span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 34, "block": "<pre class=\"text highlighted_source\">polylongdiv &lt;- function(n,d) {<br/>  gd &lt;- length(d)<br/>  pv &lt;- vector(\"numeric\", length(n))<br/>  pv[1:gd] &lt;- d<br/>  if ( length(n) &gt;= gd ) {<br/>    q &lt;- c()<br/>    while ( length(n) &gt;= gd ) {<br/>      q &lt;- c(q, n[1]/pv[1])<br/>      n &lt;- n - pv * (n[1]/pv[1])<br/>      n &lt;- n[2:length(n)]<br/>      pv &lt;- pv[1:(length(pv)-1)]<br/>    }<br/>    list(q=q, r=n)<br/>  } else {<br/>    list(q=c(0), r=n)<br/>  }<br/>}<br/>\u00a0<br/># an utility function to print polynomial<br/>print.polynomial &lt;- function(p) {<br/>  i &lt;- length(p)-1<br/>  for(a in p) {<br/>    if ( i == 0 ) {<br/>      cat(a, \"\\n\")<br/>    } else {<br/>      cat(a, \"x^\", i, \" + \", sep=\"\")<br/>    }<br/>    i &lt;- i - 1<br/>  }<br/>}<br/>\u00a0<br/>r &lt;- polylongdiv(c(1,-12,0,-42), c(1,-3))<br/>print.polynomial(r$q)<br/>print.polynomial(r$r)</pre>"}, {"lang": "Racket", "loc": 37, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (deg p) <br/>  (for/fold ([d -inf.0]) ([(pi i) (in-indexed p)])<br/>    (if (zero? pi) d i)))<br/>(define (lead p) (vector-ref p (deg p)))<br/>(define (mono c d) (build-vector (+ d 1) (\u03bb(i) (if (= i d) c 0))))<br/>(define (poly*cx^n c n p) (vector-append (make-vector n 0) (for/vector ([pi p]) (* c pi))))<br/>(define (poly+ p q) (poly/lin 1 p  1 q))<br/>(define (poly- p q) (poly/lin 1 p -1 q))<br/>(define (poly/lin a p b q)<br/>  (cond [(&lt; (deg p) 0) q] <br/>        [(&lt; (deg q) 0) p]<br/>        [(&lt; (deg p) (deg q)) (poly/lin b q a p)]<br/>        [else (define ap+bq (for/vector #:length (+ (deg p) 1) #:fill 0<br/>                              ([pi p] [qi q]) (+ (* a pi) (* b qi))))<br/>              (for ([i (in-range (+ (deg q) 1) (+ (deg p) 1))])<br/>                (vector-set! ap+bq i (* a (vector-ref p i))))<br/>              ap+bq]))<br/>\u00a0<br/>(define (poly/ n d)<br/>  (define N (deg n))<br/>  (define D (deg d))<br/>  (cond<br/>    [(&lt; N 0) (error 'poly/ \"can't divide by zero\")]<br/>    [(&lt; N D) (values 0 n)]<br/>    [else    (define c (/ (lead n) (lead d)))<br/>             (define q (mono c (- N D)))<br/>             (define r (poly- n (poly*cx^n c (- N D) d)))<br/>             (define-values (q1 r1) (poly/ r d))<br/>             (values (poly+ q q1) r1)]))<br/>; Example:<br/>(poly/ #(-42 0 -12 1) #(-3 1))<br/>; Output:<br/>'#(-27 -9 1)<br/>'#(-123 0)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 44, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* REXX needed by some... */</span><br/>z=<span class=\"st0\">'1 -12 0 -42'</span>  <span class=\"coMULTI\">/* Numerator   */</span><br/>n=<span class=\"st0\">'1 -3'</span>         <span class=\"coMULTI\">/* Denominator */</span><br/>zx=z<br/>nx=n <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'0 '</span>,<span class=\"kw6\">words</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span>-<span class=\"kw6\">words</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>qx=<span class=\"st0\">''</span>            <span class=\"coMULTI\">/* Quotient    */</span><br/><span class=\"kw1\">Do</span> <span class=\"kw2\">Until</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>zx<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span><span class=\"kw6\">words</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw2\">Value</span> div<span class=\"br0\">(</span>zx,nx<span class=\"br0\">)</span> <span class=\"kw2\">With</span> q zx<br/>  qx=qx q<br/>  nx=<span class=\"kw6\">subword</span><span class=\"br0\">(</span>nx,<span class=\"nu0\">1</span>,<span class=\"kw6\">words</span><span class=\"br0\">(</span>nx<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'('</span>show<span class=\"br0\">(</span>z<span class=\"br0\">)</span><span class=\"st0\">')/('</span>show<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"st0\">')=('</span>show<span class=\"br0\">(</span>qx<span class=\"br0\">)</span><span class=\"st0\">')'</span><br/><span class=\"kw1\">Say</span> <span class=\"st0\">'Remainder:'</span> show<span class=\"br0\">(</span>zx<span class=\"br0\">)</span><br/><span class=\"kw1\">Exit</span><br/>div: <span class=\"kw1\">Procedure</span><br/><span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> z,n<br/>q=<span class=\"kw6\">word</span><span class=\"br0\">(</span>z,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>n,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>zz=<span class=\"st0\">''</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>  zz=zz <span class=\"kw6\">word</span><span class=\"br0\">(</span>z,i<span class=\"br0\">)</span>-q<span class=\"sy0\">*</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>n,i<span class=\"br0\">)</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span> q <span class=\"kw6\">subword</span><span class=\"br0\">(</span>zz,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>show: <span class=\"kw1\">Procedure</span><br/><span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> poly<br/>d=<span class=\"kw6\">words</span><span class=\"br0\">(</span>poly<span class=\"br0\">)</span>-<span class=\"nu0\">1</span><br/>res=<span class=\"st0\">''</span><br/><span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"kw6\">words</span><span class=\"br0\">(</span>poly<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Select</span><br/>    <span class=\"kw3\">When</span> d<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"kw3\">Then</span> fact=<span class=\"st0\">'*x**'</span>d<br/>    <span class=\"kw3\">When</span> d=<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span> fact=<span class=\"st0\">'*x'</span><br/>    <span class=\"kw3\">Otherwise</span>     fact=<span class=\"st0\">''</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Select</span><br/>    <span class=\"kw3\">When</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>poly,i<span class=\"br0\">)</span>=<span class=\"nu0\">0</span>  <span class=\"kw3\">Then</span> p=<span class=\"st0\">''</span><br/>    <span class=\"kw3\">When</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>poly,i<span class=\"br0\">)</span>=<span class=\"nu0\">1</span>  <span class=\"kw3\">Then</span> p=<span class=\"st0\">'+'</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>fact,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">When</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>poly,i<span class=\"br0\">)</span>=-<span class=\"nu0\">1</span> <span class=\"kw3\">Then</span> p=<span class=\"st0\">'-'</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>fact,<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">When</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>poly,i<span class=\"br0\">)</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">Then</span> p=<span class=\"kw6\">word</span><span class=\"br0\">(</span>poly,i<span class=\"br0\">)</span><span class=\"sy0\">||</span>fact<br/>    <span class=\"kw3\">Otherwise</span>                 p=<span class=\"st0\">'+'</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>poly,i<span class=\"br0\">)</span><span class=\"sy0\">||</span>fact<br/>    <span class=\"kw3\">End</span><br/>  res=res p<br/>  d=d-<span class=\"nu0\">1</span><br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Return</span> <span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"kw6\">space</span><span class=\"br0\">(</span>res,<span class=\"nu0\">0</span><span class=\"br0\">)</span>,<span class=\"st0\">'L'</span>,<span class=\"st0\">'+'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ruby", "loc": 46, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> polynomial_long_division<span class=\"br0\">(</span>numerator, denominator<span class=\"br0\">)</span><br/>  dd = degree<span class=\"br0\">(</span>denominator<span class=\"br0\">)</span><br/>  <span class=\"kw3\">raise</span> <span class=\"kw4\">ArgumentError</span>, <span class=\"st0\">\"denominator is zero\"</span> <span class=\"kw1\">if</span> dd <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">if</span> dd == <span class=\"nu0\">0</span><br/>    <span class=\"kw2\">return</span> <span class=\"br0\">[</span>multiply<span class=\"br0\">(</span>numerator, <span class=\"nu0\">1.0</span><span class=\"sy0\">/</span>denominator<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span>, <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>numerator.<span class=\"me1\">length</span><span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  q = <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> numerator.<span class=\"me1\">length</span><br/>\u00a0<br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>dn = degree<span class=\"br0\">(</span>numerator<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span>= dd<br/>    d = shift_right<span class=\"br0\">(</span>denominator, dn <span class=\"sy0\">-</span> dd<span class=\"br0\">)</span><br/>    q<span class=\"br0\">[</span>dn<span class=\"sy0\">-</span>dd<span class=\"br0\">]</span> = numerator<span class=\"br0\">[</span>dn<span class=\"br0\">]</span> <span class=\"sy0\">/</span> d<span class=\"br0\">[</span>degree<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    d = multiply<span class=\"br0\">(</span>d, q<span class=\"br0\">[</span>dn<span class=\"sy0\">-</span>dd<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    numerator = subtract<span class=\"br0\">(</span>numerator, d<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"br0\">[</span>q, numerator<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> degree<span class=\"br0\">(</span>ary<span class=\"br0\">)</span><br/>  idx = ary.<span class=\"me1\">rindex</span><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>:nonzero?<span class=\"br0\">)</span><br/>  idx\u00a0? idx\u00a0: <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> shift_right<span class=\"br0\">(</span>ary, n<span class=\"br0\">)</span><br/>  <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">*</span>n <span class=\"sy0\">+</span> ary<span class=\"br0\">[</span><span class=\"nu0\">0</span>, ary.<span class=\"me1\">length</span> <span class=\"sy0\">-</span> n<span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> subtract<span class=\"br0\">(</span>a1, a2<span class=\"br0\">)</span><br/>  a1.<span class=\"me1\">zip</span><span class=\"br0\">(</span>a2<span class=\"br0\">)</span>.<span class=\"me1\">collect</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>v1,v2<span class=\"sy0\">|</span> v1 <span class=\"sy0\">-</span> v2<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> multiply<span class=\"br0\">(</span>ary, num<span class=\"br0\">)</span><br/>  ary.<span class=\"me1\">collect</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>x<span class=\"sy0\">|</span> x <span class=\"sy0\">*</span> num<span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>f = <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">42</span>, <span class=\"nu0\">0</span>, <span class=\"sy0\">-</span><span class=\"nu0\">12</span>, <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>g = <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>q, r = polynomial_long_division<span class=\"br0\">(</span>f, g<span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"#{f} / #{g} =&gt; #{q} remainder #{r}\"</span><br/><span class=\"co1\"># =&gt; [-42, 0, -12, 1] / [-3, 1, 0, 0] =&gt; [-27, -9, 1, 0] remainder [-123, 0, 0, 0]</span><br/>\u00a0<br/>g = <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>q, r = polynomial_long_division<span class=\"br0\">(</span>f, g<span class=\"br0\">)</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"#{f} / #{g} =&gt; #{q} remainder #{r}\"</span><br/><span class=\"co1\"># =&gt; [-42, 0, -12, 1] / [-3, 1, 1, 0] =&gt; [-13, 1, 0, 0] remainder [-81, 16, 0, 0]</span></pre>"}, {"lang": "Sidef", "loc": 20, "block": "<pre class=\"ruby highlighted_source\">func poly_long_div<span class=\"br0\">(</span>rn, rd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    var n = rn.<span class=\"me1\">map</span><span class=\"br0\">{</span>_<span class=\"br0\">}</span><br/>    var gd = rd.<span class=\"me1\">len</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n.<span class=\"me1\">len</span> <span class=\"sy0\">&gt;</span>= gd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">return</span><span class=\"br0\">(</span>gather <span class=\"br0\">{</span><br/>            <span class=\"kw1\">while</span> <span class=\"br0\">(</span>n.<span class=\"me1\">len</span> <span class=\"sy0\">&gt;</span>= gd<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                var piv = n<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">/</span>rd<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>                take<span class=\"br0\">(</span>piv<span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>                    n<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">-</span>= <span class=\"br0\">(</span>rd<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">*</span> piv<span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span> <span class=\"sy0\">&lt;&lt;</span> ^<span class=\"br0\">(</span>n.<span class=\"me1\">len</span> <span class=\"st0\">`min`</span> gd<span class=\"br0\">)</span><br/>                n.<span class=\"me1\">shift</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span>, n<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">return</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, rn<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Slate", "loc": 62, "block": "<pre class=\"text highlighted_source\">define: #Polynomial &amp;parents: {Comparable} &amp;slots: {#coefficients -&gt; ExtensibleArray new}.<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"483808\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Polynomial traits) new &amp;capacity: n<br/>[<br/>  p cloneSettingSlots: #(coefficients) to: {p coefficients new &amp;capacity: n}<br/>].<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"e797a7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Polynomial traits) newFrom: <a class=\"__cf_email__\" data-cfemail=\"d3a0b6a293\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Sequence traits)<br/>[<br/>  p clone `&gt;&gt; [coefficients: (seq as: p coefficients). normalize. ]<br/>].<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"d4a494\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Polynomial traits) copy<br/>[<br/>  p cloneSettingSlots: #(coefficients) to: {p coefficients copy}<br/>].<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"07773647\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Polynomial traits) &gt;= <a class=\"__cf_email__\" data-cfemail=\"16662456\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Polynomial traits)<br/>[p1 degree &gt;= p2 degree].<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"b6c6f6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Polynomial traits) degree<br/>[p coefficients indexOfLastSatisfying: [|\u00a0:n | n isZero not]].<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"790939\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Polynomial traits) normalize<br/>[<br/>  [p degree isPositive /\\ [p coefficients last isZero]]<br/>    whileTrue: [p coefficients removeLast]<br/>].<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"433303\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Polynomial traits) * <a class=\"__cf_email__\" data-cfemail=\"b6d8f6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Number traits)<br/>[<br/>  p newFrom: (p coefficients collect: [|\u00a0:x | x * n])<br/>].<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"077747\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Polynomial traits) / <a class=\"__cf_email__\" data-cfemail=\"741a34\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Number traits)<br/>[<br/>  p newFrom: (p coefficients collect: [|\u00a0:x | x / n])<br/>].<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"92e2a3d2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Polynomial traits) minusCoefficients: <a class=\"__cf_email__\" data-cfemail=\"d9a9eb99\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Polynomial traits)<br/>[<br/>  p1 newFrom: (p1 coefficients with: p2 coefficients collect: #- `er)<br/>].<br/>\u00a0<br/><a class=\"__cf_email__\" data-cfemail=\"89f9c9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Polynomial traits) / <a class=\"__cf_email__\" data-cfemail=\"fc9899929391bc\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(Polynomial traits)<br/>[<br/>  p &gt;= denom<br/>    ifTrue:<br/>      [| n q |<br/>       n: p copy.<br/>       q: p new.<br/>       [n &gt;= denom]<br/>          whileTrue:<br/>            [| piv |<br/>\t     piv: p coefficients last / denom coefficients last.<br/>\t     q coefficients add: piv.<br/>\t     n: (n minusCoefficients: denom * piv).<br/>\t     n normalize].<br/>       n coefficients isEmpty ifTrue: [n coefficients add: 0].<br/>       {q. n}]<br/>    ifFalse: [{p newFrom: #(0). p copy}]<br/>].</pre>"}, {"lang": "Smalltalk", "loc": 68, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"re0\">Object</span> subclass: <span class=\"re0\">Polynomial</span> <span class=\"br0\">[</span><br/>  |<span class=\"re3\">coeffs</span>|<br/>  <span class=\"re0\">Polynomial</span> class &gt;&gt; new <span class=\"br0\">[</span> ^ <span class=\"kw1\">super</span> basicNew init <span class=\"br0\">]</span><br/>  init <span class=\"br0\">[</span> <span class=\"re5\">coeffs</span> <span class=\"sy0\">:=</span> <span class=\"re0\">OrderedCollection</span> new. ^ <span class=\"kw1\">self</span> <span class=\"br0\">]</span><br/>  <span class=\"re0\">Polynomial</span> class &gt;&gt; newWithCoefficients: <span class=\"re5\">coefficients</span> <span class=\"br0\">[</span><br/>    |<span class=\"re3\">r</span>|<br/>    <span class=\"re6\">r</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">super</span> basicNew.<br/>    ^ r initWithCoefficients: <span class=\"re5\">coefficients</span><br/>  <span class=\"br0\">]</span><br/>  initWithCoefficients: <span class=\"re5\">coefficients</span> <span class=\"br0\">[</span> <br/>    <span class=\"re5\">coeffs</span> <span class=\"sy0\">:=</span> <span class=\"re5\">coefficients</span> asOrderedCollection.<br/>    ^ <span class=\"kw1\">self</span><br/>  <span class=\"br0\">]</span><br/>  / <span class=\"re5\">denominator</span> <span class=\"br0\">[</span> |<span class=\"re3\">n q</span>|<br/>    <span class=\"re6\">n</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">self</span> deepCopy.<br/>    <span class=\"kw1\">self</span> &gt;<span class=\"sy0\">=</span> <span class=\"re5\">denominator</span><br/>      ifTrue: <span class=\"br0\">[</span><br/>        <span class=\"re5\">q</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Polynomial</span> new.<br/>        <span class=\"br0\">[</span> <span class=\"re5\">n</span> &gt;<span class=\"sy0\">=</span> <span class=\"re5\">denominator</span> <span class=\"br0\">]</span><br/>          whileTrue: <span class=\"br0\">[</span> |<span class=\"re3\">piv</span>|<br/> \t    <span class=\"re6\">piv</span> <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"re5\">n</span> coeff: <span class=\"re5\">0</span><span class=\"br0\">)</span> / <span class=\"br0\">(</span><span class=\"re5\">denominator</span> coeff: <span class=\"re5\">0</span><span class=\"br0\">)</span>.<br/>\t    <span class=\"re5\">q</span> addCoefficient: <span class=\"re5\">piv</span>.<br/>\t    <span class=\"re5\">n</span> <span class=\"sy0\">:=</span> <span class=\"re5\">n</span> - <span class=\"br0\">(</span><span class=\"re5\">denominator</span> * <span class=\"re5\">piv</span><span class=\"br0\">)</span>.<br/>\t    <span class=\"re5\">n</span> clean<br/>          <span class=\"br0\">]</span>.<br/>        ^ <span class=\"br0\">{</span> q . <span class=\"br0\">(</span><span class=\"re5\">n</span> degree<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> ifTrue: <span class=\"br0\">[</span> <span class=\"re5\">n</span> <span class=\"br0\">]</span> ifFalse: <span class=\"br0\">[</span> <span class=\"re5\">n</span> addCoefficient: <span class=\"re5\">0</span>. <span class=\"re5\">n</span> <span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>      <span class=\"br0\">]</span><br/>      ifFalse: <span class=\"br0\">[</span><br/>        ^ <span class=\"br0\">{</span> <span class=\"re0\">Polynomial</span> newWithCoefficients: <span class=\"re2\">#<span class=\"br0\">(</span> <span class=\"re5\">0</span> <span class=\"br0\">)</span></span> . <span class=\"kw1\">self</span> deepCopy <span class=\"br0\">}</span><br/>      <span class=\"br0\">]</span><br/>  <span class=\"br0\">]</span><br/>  * <span class=\"re5\">constant</span> <span class=\"br0\">[</span> |<span class=\"re3\">r</span>| <span class=\"re6\">r</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">self</span> deepCopy.<br/>    <span class=\"re5\">1</span> to: <span class=\"br0\">(</span><span class=\"re5\">coeffs</span> size<span class=\"br0\">)</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">i</span> |<br/>      r at: <span class=\"re5\">i</span> put: <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re5\">r</span> at: <span class=\"re5\">i</span><span class=\"br0\">)</span> * <span class=\"re5\">constant</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">]</span>.<br/>    ^ r<br/>  <span class=\"br0\">]</span><br/>  at: <span class=\"re5\">index</span> <span class=\"br0\">[</span> ^ coeffs at: <span class=\"re5\">index</span> <span class=\"br0\">]</span><br/>  at: <span class=\"re5\">index</span> put: <span class=\"re5\">obj</span> <span class=\"br0\">[</span> ^ coeffs at: <span class=\"re5\">index</span> put: <span class=\"re5\">obj</span> <span class=\"br0\">]</span><br/>  &gt;<span class=\"sy0\">=</span> <span class=\"re5\">anotherPoly</span> <span class=\"br0\">[</span><br/>    ^ <span class=\"br0\">(</span><span class=\"kw1\">self</span> degree<span class=\"br0\">)</span> &gt;<span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re5\">anotherPoly</span> degree<span class=\"br0\">)</span><br/>  <span class=\"br0\">]</span><br/>  degree <span class=\"br0\">[</span> ^ coeffs size <span class=\"br0\">]</span><br/>  - <span class=\"re5\">anotherPoly</span> <span class=\"br0\">[</span> <span class=\"coMULTI\">\"This is not a real subtraction between Polynomial: it is an<br/>                   internal method ...\"</span><br/>    |<span class=\"re3\">a</span>|<br/>    <span class=\"re6\">a</span> <span class=\"sy0\">:=</span> <span class=\"kw1\">self</span> deepCopy.<br/>    <span class=\"re5\">1</span> to: <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"re5\">coeffs</span> size<span class=\"br0\">)</span> min: <span class=\"br0\">(</span><span class=\"re5\">anotherPoly</span> degree<span class=\"br0\">)</span> <span class=\"br0\">)</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">i</span> |<br/>      a at: <span class=\"re5\">i</span> put: <span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"re5\">a</span> at: <span class=\"re5\">i</span><span class=\"br0\">)</span> - <span class=\"br0\">(</span><span class=\"re5\">anotherPoly</span> at: <span class=\"re5\">i</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    <span class=\"br0\">]</span>.<br/>    ^ a<br/>  <span class=\"br0\">]</span><br/>  coeff: <span class=\"re5\">index</span> <span class=\"br0\">[</span> ^ coeffs at: <span class=\"br0\">(</span><span class=\"re5\">index</span> + <span class=\"re5\">1</span><span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>  addCoefficient: <span class=\"re5\">coeff</span> <span class=\"br0\">[</span> <span class=\"re5\">coeffs</span> add: <span class=\"re5\">coeff</span> <span class=\"br0\">]</span><br/>  clean <span class=\"br0\">[</span><br/>    <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"re5\">coeffs</span> size<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span><br/>        ifTrue: <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"re5\">coeffs</span> at: <span class=\"re5\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"re5\">0</span> <span class=\"br0\">]</span> ifFalse: <span class=\"br0\">[</span> <span class=\"kw1\">false</span> <span class=\"br0\">]</span> <span class=\"br0\">]</span><br/>      whileTrue: <span class=\"br0\">[</span> <span class=\"re5\">coeffs</span> removeFirst <span class=\"br0\">]</span>.<br/>  <span class=\"br0\">]</span><br/>  display <span class=\"br0\">[</span><br/>    <span class=\"re5\">1</span> to: <span class=\"br0\">(</span><span class=\"re5\">coeffs</span> size<span class=\"br0\">)</span> do: <span class=\"br0\">[</span>\u00a0:<span class=\"re5\">i</span> | <br/>      <span class=\"br0\">(</span><span class=\"re5\">coeffs</span> at: <span class=\"re5\">i</span><span class=\"br0\">)</span> display.<br/>      <span class=\"re5\">i</span> &lt; <span class=\"br0\">(</span><span class=\"re5\">coeffs</span> size<span class=\"br0\">)</span><br/>        ifTrue: <span class=\"br0\">[</span> <span class=\"br0\">(</span><span class=\"st0\">'x^%1 + '</span>\u00a0% <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re5\">coeffs</span> size<span class=\"br0\">)</span> - <span class=\"re5\">i</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> display <span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span> <br/>  <span class=\"br0\">]</span><br/>  displayNl <span class=\"br0\">[</span> <span class=\"kw1\">self</span> display. <span class=\"re0\">Character</span> nl display <span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.</pre>"}, {"lang": "SPAD", "loc": 6, "block": "<pre class=\"text highlighted_source\">(1) -&gt; monicDivide(x^3-12*x^2-42,x-3,'x)<br/>\u00a0<br/>                     2<br/>   (1)  [quotient = x  - 9x - 27,remainder = - 123]<br/>\u00a0<br/>   Type: Record(quotient: Polynomial(Integer),remainder: Polynomial(Integer))</pre>"}, {"lang": "Tcl", "loc": 40, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># poldiv - Divide two polynomials n and d.</span><br/><span class=\"co1\">#          Result is a list of two polynomials, q and r, where n = qd + r</span><br/><span class=\"co1\">#          and the degree of r is less than the degree of b.</span><br/><span class=\"co1\">#          Polynomials are represented as lists, where element 0 is the</span><br/><span class=\"co1\">#          x**0 coefficient, element 1 is the x**1 coefficient, and so on.</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> poldiv <span class=\"br0\">{</span>a b<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Toss out leading zero coefficients efficiently</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$a</span> end<span class=\"br0\">]</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> a <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> a <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span> end-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$b</span> end<span class=\"br0\">]</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> b <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$b</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> b <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span> end-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$a</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$b</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"nu0\">0</span> <span class=\"re0\">$a</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Rearrange the terms to put highest powers first</span><br/>    <span class=\"kw1\">set</span> n <span class=\"br0\">[</span>lreverse <span class=\"re0\">$a</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> d <span class=\"br0\">[</span>lreverse <span class=\"re0\">$b</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"co1\"># Carry out classical long division, accumulating quotient coefficients</span><br/>    <span class=\"co1\"># in q, and replacing n with the remainder.</span><br/>    <span class=\"kw1\">set</span> q <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span>= <span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$d</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">set</span> qd <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$n</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> / <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$d</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">foreach</span> nd <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$n</span> <span class=\"nu0\">0</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$d</span><span class=\"br0\">]</span> - <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">]</span> dd <span class=\"re0\">$d</span> <span class=\"br0\">{</span><br/>            <span class=\"kw2\">lset</span> n <span class=\"re0\">$i</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$nd</span> - <span class=\"re0\">$qd</span> <span class=\"sy0\">*</span> <span class=\"re0\">$dd</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>            <span class=\"kw2\">incr</span> i<br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">lappend</span> q <span class=\"re0\">$qd</span><br/>        <span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$n</span> <span class=\"nu0\">1</span> end<span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Return quotient and remainder, constant term first</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span>lreverse <span class=\"re0\">$q</span><span class=\"br0\">]</span> <span class=\"br0\">[</span>lreverse <span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Demonstration</span><br/>lassign <span class=\"br0\">[</span>poldiv <span class=\"br0\">{</span>-<span class=\"nu0\">42</span>. <span class=\"nu0\">0</span>. -<span class=\"nu0\">12</span>. <span class=\"nu0\">1</span>.<span class=\"br0\">}</span> <span class=\"br0\">{</span>-<span class=\"nu0\">3</span>. <span class=\"nu0\">1</span>. <span class=\"nu0\">0</span>. <span class=\"nu0\">0</span>.<span class=\"br0\">}</span><span class=\"br0\">]</span> Q R<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> Q = <span class=\"re0\">$Q</span><span class=\"br0\">]</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span> R = <span class=\"re0\">$R</span><span class=\"br0\">]</span></pre>"}, {"lang": "Ursala", "loc": 9, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import flo<br/>\u00a0<br/>polydiv =<br/>\u00a0<br/>zeroid~-l~~; leql?rlX\\~&amp;NlX ^H\\(@rNrNSPXlHDlS |\\\u00a0:/0.) @NlX //=&gt;\u00a0?(<br/>   @lrrPX ==!| zipp0.; @x not zeroid+ <a class=\"__cf_email__\" data-cfemail=\"162b2b567e3b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;hr ~&amp;t,<br/>   (^lryPX/~&amp;lrrl2C minus^*p/~&amp;rrr times*lrlPD)^/<a class=\"__cf_email__\" data-cfemail=\"5034392610322a002222003c081f\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> ~&amp;,<br/>   @r ^|\\~&amp; ~&amp;i&amp;&amp;\u00a0:/0.)</pre>"}, {"lang": "zkl", "loc": 22, "block": "<pre class=\"text highlighted_source\">fcn polyLongDivision(a,b){  // (a0 + a1x + a2x^2 + a3x^3 ...)<br/>   _assert_(degree(b)&gt;=0,\"degree(%s) &lt; 0\".fmt(b));<br/>   q:=List.createLong(a.len(),0.0);<br/>   while((ad:=degree(a)) &gt;= (bd:=degree(b))){<br/>      z,d,m\u00a0:= ad-bd, List.createLong(z,0.0).extend(b), a[ad]/b[bd];;<br/>      q[z]=m;<br/>      d,a = d.apply('*(m)), a.zipWith('-,d);<br/>   }<br/>   return(q,a);\t\t// may have trailing zero elements<br/>}<br/>fcn degree(v){  // -1,0,..len(v)-1, -1 if v==0<br/>   v.len() - v.copy().reverse().filter1n('!=(0)) - 1;<br/>}<br/>fcn polyString(terms){ // (a0,a1,a2...)--&gt;\"a0 + a1x + a2x^2 ...\"<br/>   str:=[0..].zipWith('wrap(n,a){ if(a) \"+\u00a0%sx^%s \".fmt(a,n) else \"\" },terms)<br/>   .pump(String)<br/>   .replace(\"x^0 \",\" \").replace(\" 1x\",\" x\").replace(\"x^1 \",\"x \")<br/>   .replace(\"+ -\", \"- \");<br/>   if(not str)     return(\" \");  // all zeros<br/>   if(str[0]==\"+\") str[1,*];     // leave leading space<br/>   else            String(\"-\",str[2,*]);<br/>}</pre>"}]}