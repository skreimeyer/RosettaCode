{"task": "Tree_traversal", "blocks": [{"lang": "ACL2", "loc": 47, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> flatten-preorder <span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp tree<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>first tree<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>flatten-preorder <span class=\"br0\">(</span>second tree<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>flatten-preorder <span class=\"br0\">(</span>third tree<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> flatten-inorder <span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp tree<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span>flatten-inorder <span class=\"br0\">(</span>second tree<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>first tree<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>flatten-inorder <span class=\"br0\">(</span>third tree<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> flatten-postorder <span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp tree<span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span>flatten-postorder <span class=\"br0\">(</span>second tree<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>flatten-postorder <span class=\"br0\">(</span>third tree<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>first tree<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> flatten-level-r1 <span class=\"br0\">(</span>tree level levels<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>endp tree<span class=\"br0\">)</span><br/>       levels<br/>       <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>curr <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> level levels<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>flatten-level-r1<br/>             <span class=\"br0\">(</span>second tree<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ level<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>flatten-level-r1<br/>              <span class=\"br0\">(</span>third tree<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ level<span class=\"br0\">)</span><br/>              <span class=\"br0\">(</span>put-<span class=\"kw1\">assoc</span> level<br/>                         <span class=\"br0\">(</span><span class=\"kw1\">append</span> curr <span class=\"br0\">(</span><span class=\"kw1\">list</span> <span class=\"br0\">(</span>first tree<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                         levels<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> flatten-level-r2 <span class=\"br0\">(</span>levels max-level<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>xargs <span class=\"sy0\">:</span><span class=\"me1\">measure</span> <span class=\"br0\">(</span>nfix <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ max-level<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zp <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ max-level<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span>flatten-level-r2 levels<br/>                                 <span class=\"br0\">(</span><span class=\"nu0\">1</span>- max-level<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span><span class=\"kw1\">assoc</span> max-level levels<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> flatten-level <span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>levels <span class=\"br0\">(</span>flatten-level-r1 tree <span class=\"nu0\">0</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>flatten-level-r2 levels <span class=\"br0\">(</span>len levels<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Ada", "loc": 108, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_Io</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_Io</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Unchecked_Deallocation</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Doubly_Linked_Lists</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Tree_Traversal <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">type</span> Node;<br/>   <span class=\"kw3\">type</span> Node_Access <span class=\"kw1\">is</span> <span class=\"kw3\">access</span> Node;<br/>   <span class=\"kw3\">type</span> Node <span class=\"kw1\">is</span> <span class=\"kw3\">record</span><br/>      Left\u00a0: Node_Access\u00a0:= <span class=\"kw3\">null</span>;<br/>      Right\u00a0: Node_Access\u00a0:= <span class=\"kw3\">null</span>;<br/>      Data\u00a0: Integer;<br/>   <span class=\"kw1\">end</span> <span class=\"kw3\">record</span>;<br/>   <span class=\"kw3\">procedure</span> Destroy_Tree<span class=\"br0\">(</span>N\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> Node_Access<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">procedure</span> free <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Unchecked_Deallocation</span><span class=\"br0\">(</span>Node, Node_Access<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> N.<span class=\"me1\">Left</span> /= <span class=\"kw3\">null</span> <span class=\"kw1\">then</span><br/>         Destroy_Tree<span class=\"br0\">(</span>N.<span class=\"me1\">Left</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">if</span> N.<span class=\"me1\">Right</span> /= <span class=\"kw3\">null</span> <span class=\"kw1\">then</span> <br/>         Destroy_Tree<span class=\"br0\">(</span>N.<span class=\"me1\">Right</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      Free<span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Destroy_Tree;<br/>   <span class=\"kw3\">function</span> Tree<span class=\"br0\">(</span>Value\u00a0: Integer; Left\u00a0: Node_Access; Right\u00a0: Node_Access<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Node_Access <span class=\"kw1\">is</span><br/>      Temp\u00a0: Node_Access\u00a0:= <span class=\"kw3\">new</span> Node;<br/>   <span class=\"kw1\">begin</span><br/>      Temp.<span class=\"me1\">Data</span>\u00a0:= Value;<br/>      Temp.<span class=\"me1\">Left</span>\u00a0:= Left;<br/>      Temp.<span class=\"me1\">Right</span>\u00a0:= Right;<br/>      <span class=\"kw1\">return</span> Temp;<br/>   <span class=\"kw1\">end</span> Tree;<br/>   <span class=\"kw3\">procedure</span> Preorder<span class=\"br0\">(</span>N\u00a0: Node_Access<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      Put<span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>N.<span class=\"me1\">Data</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">if</span> N.<span class=\"me1\">Left</span> /= <span class=\"kw3\">null</span> <span class=\"kw1\">then</span><br/>         Preorder<span class=\"br0\">(</span>N.<span class=\"me1\">Left</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">if</span> N.<span class=\"me1\">Right</span> /= <span class=\"kw3\">null</span> <span class=\"kw1\">then</span><br/>         Preorder<span class=\"br0\">(</span>N.<span class=\"me1\">Right</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Preorder;<br/>   <span class=\"kw3\">procedure</span> Inorder<span class=\"br0\">(</span>N\u00a0: Node_Access<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> N.<span class=\"me1\">Left</span> /= <span class=\"kw3\">null</span> <span class=\"kw1\">then</span><br/>         Inorder<span class=\"br0\">(</span>N.<span class=\"me1\">Left</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      Put<span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>N.<span class=\"me1\">Data</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">if</span> N.<span class=\"me1\">Right</span> /= <span class=\"kw3\">null</span> <span class=\"kw1\">then</span><br/>         Inorder<span class=\"br0\">(</span>N.<span class=\"me1\">Right</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> Inorder;<br/>   <span class=\"kw3\">procedure</span> Postorder<span class=\"br0\">(</span>N\u00a0: Node_Access<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> N.<span class=\"me1\">Left</span> /= <span class=\"kw3\">null</span> <span class=\"kw1\">then</span><br/>         Postorder<span class=\"br0\">(</span>N.<span class=\"me1\">Left</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">if</span> N.<span class=\"me1\">Right</span> /= <span class=\"kw3\">null</span> <span class=\"kw1\">then</span><br/>         Postorder<span class=\"br0\">(</span>N.<span class=\"me1\">Right</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      Put<span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>N.<span class=\"me1\">Data</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Postorder;<br/>   <span class=\"kw3\">procedure</span> Levelorder<span class=\"br0\">(</span>N\u00a0: Node_Access<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">package</span> Queues <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Containers</span>.<span class=\"me1\">Doubly_Linked_Lists</span><span class=\"br0\">(</span>Node_Access<span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">use</span> Queues;<br/>      Node_Queue\u00a0: List;<br/>      Next\u00a0: Node_Access;<br/>   <span class=\"kw1\">begin</span><br/>      Node_Queue.<span class=\"me1\">Append</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">while</span> <span class=\"kw2\">not</span> Is_Empty<span class=\"br0\">(</span>Node_Queue<span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         Next\u00a0:= First_Element<span class=\"br0\">(</span>Node_Queue<span class=\"br0\">)</span>;<br/>         Delete_First<span class=\"br0\">(</span>Node_Queue<span class=\"br0\">)</span>;<br/>         Put<span class=\"br0\">(</span>Integer'Image<span class=\"br0\">(</span>Next.<span class=\"me1\">Data</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">if</span> Next.<span class=\"me1\">Left</span> /= <span class=\"kw3\">null</span> <span class=\"kw1\">then</span><br/>            Node_Queue.<span class=\"me1\">Append</span><span class=\"br0\">(</span>Next.<span class=\"me1\">Left</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         <span class=\"kw1\">if</span> Next.<span class=\"me1\">Right</span> /= <span class=\"kw3\">null</span> <span class=\"kw1\">then</span><br/>            Node_Queue.<span class=\"me1\">Append</span><span class=\"br0\">(</span>Next.<span class=\"me1\">Right</span><span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Levelorder;<br/>   N\u00a0: Node_Access;<br/><span class=\"kw1\">begin</span><br/>   N\u00a0:= Tree<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <br/>      Tree<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<br/>         Tree<span class=\"br0\">(</span><span class=\"nu0\">4</span>,<br/>            Tree<span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"kw3\">null</span>, <span class=\"kw3\">null</span><span class=\"br0\">)</span>,<br/>            <span class=\"kw3\">null</span><span class=\"br0\">)</span>,<br/>         Tree<span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"kw3\">null</span>, <span class=\"kw3\">null</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>      Tree<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<br/>         Tree<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<br/>            Tree<span class=\"br0\">(</span><span class=\"nu0\">8</span>, <span class=\"kw3\">null</span>, <span class=\"kw3\">null</span><span class=\"br0\">)</span>,<br/>            Tree<span class=\"br0\">(</span><span class=\"nu0\">9</span>, <span class=\"kw3\">null</span>, <span class=\"kw3\">null</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>         <span class=\"kw3\">null</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   Put<span class=\"br0\">(</span><span class=\"st0\">\"preorder:    \"</span><span class=\"br0\">)</span>;<br/>   Preorder<span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>   New_Line;<br/>   Put<span class=\"br0\">(</span><span class=\"st0\">\"inorder:     \"</span><span class=\"br0\">)</span>;<br/>   Inorder<span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>   New_Line;<br/>   Put<span class=\"br0\">(</span><span class=\"st0\">\"postorder:   \"</span><span class=\"br0\">)</span>;<br/>   Postorder<span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>   New_Line;<br/>   Put<span class=\"br0\">(</span><span class=\"st0\">\"level order: \"</span><span class=\"br0\">)</span>;<br/>   Levelorder<span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/>   New_Line;<br/>   Destroy_Tree<span class=\"br0\">(</span>N<span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Tree_traversal;</pre>"}, {"lang": "ALGOL 68", "loc": 124, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw4\">MODE</span> VALUE <span class=\"sy1\">=</span> <span class=\"kw3\">INT</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> value repr <span class=\"sy1\">=</span> <span class=\"br0\">(</span>VALUE value<span class=\"br0\">)</span><span class=\"kw3\">STRING</span><span class=\"sy1\">:</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span>value<span class=\"sy1\">,</span> 0<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">MODE</span> NODES <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span> <span class=\"br0\">(</span> VALUE value<span class=\"sy1\">,</span> <span class=\"kw4\">REF</span> NODES left<span class=\"sy1\">,</span> right<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> NODE <span class=\"sy1\">=</span> <span class=\"kw4\">REF</span> NODES<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> tree <span class=\"sy1\">=</span> <span class=\"br0\">(</span>VALUE value<span class=\"sy1\">,</span> NODE left<span class=\"sy1\">,</span> right<span class=\"br0\">)</span>NODE<span class=\"sy1\">:</span><br/>  <span class=\"kw4\">HEAP</span> NODES <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>value<span class=\"sy1\">,</span> left<span class=\"sy1\">,</span> right<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> preorder <span class=\"sy1\">=</span> <span class=\"br0\">(</span>NODE node<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span>VALUE<span class=\"br0\">)</span><span class=\"kw3\">VOID</span> action<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>  <span class=\"kw2\">IF</span> node <span class=\"kw7\">ISNT</span> NODE<span class=\"br0\">(</span><span class=\"kw7\">NIL</span><span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>    action<span class=\"br0\">(</span>value <span class=\"kw6\">OF</span> node<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    preorder<span class=\"br0\">(</span>left <span class=\"kw6\">OF</span> node<span class=\"sy1\">,</span> action<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    preorder<span class=\"br0\">(</span>right <span class=\"kw6\">OF</span> node<span class=\"sy1\">,</span> action<span class=\"br0\">)</span><br/>  <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> inorder <span class=\"sy1\">=</span> <span class=\"br0\">(</span>NODE node<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span>VALUE<span class=\"br0\">)</span><span class=\"kw3\">VOID</span> action<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>  <span class=\"kw2\">IF</span> node <span class=\"kw7\">ISNT</span> NODE<span class=\"br0\">(</span><span class=\"kw7\">NIL</span><span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>    inorder<span class=\"br0\">(</span>left <span class=\"kw6\">OF</span> node<span class=\"sy1\">,</span> action<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    action<span class=\"br0\">(</span>value <span class=\"kw6\">OF</span> node<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    inorder<span class=\"br0\">(</span>right <span class=\"kw6\">OF</span> node<span class=\"sy1\">,</span> action<span class=\"br0\">)</span><br/>  <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> postorder <span class=\"sy1\">=</span> <span class=\"br0\">(</span>NODE node<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span>VALUE<span class=\"br0\">)</span><span class=\"kw3\">VOID</span> action<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>  <span class=\"kw2\">IF</span> node <span class=\"kw7\">ISNT</span> NODE<span class=\"br0\">(</span><span class=\"kw7\">NIL</span><span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>    postorder<span class=\"br0\">(</span>left <span class=\"kw6\">OF</span> node<span class=\"sy1\">,</span> action<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    postorder<span class=\"br0\">(</span>right <span class=\"kw6\">OF</span> node<span class=\"sy1\">,</span> action<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    action<span class=\"br0\">(</span>value <span class=\"kw6\">OF</span> node<span class=\"br0\">)</span><br/>  <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> destroy tree <span class=\"sy1\">=</span> <span class=\"br0\">(</span>NODE node<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <br/>  postorder<span class=\"br0\">(</span>node<span class=\"sy1\">,</span> <span class=\"br0\">(</span>VALUE skip<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span> <br/>  <span class=\"coMULTI\"># free(node) - PR garbage collect hint PR #</span><br/>    node <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"kw7\">SKIP</span><span class=\"sy1\">,</span> <span class=\"kw7\">NIL</span><span class=\"sy1\">,</span> <span class=\"kw7\">NIL</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\"># helper queue for level order #</span><br/><span class=\"kw4\">MODE</span> QNODES <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span> <span class=\"br0\">(</span><span class=\"kw4\">REF</span> QNODES next<span class=\"sy1\">,</span> NODE value<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> QNODE <span class=\"sy1\">=</span> <span class=\"kw4\">REF</span> QNODES<span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">MODE</span> QUEUES <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span> <span class=\"br0\">(</span>QNODE begin<span class=\"sy1\">,</span> end<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">MODE</span> QUEUE <span class=\"sy1\">=</span> <span class=\"kw4\">REF</span> QUEUES<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> enqueue <span class=\"sy1\">=</span> <span class=\"br0\">(</span>QUEUE queue<span class=\"sy1\">,</span> NODE node<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  <span class=\"kw4\">HEAP</span> QNODES qnode <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"kw7\">NIL</span><span class=\"sy1\">,</span> node<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">IF</span> end <span class=\"kw6\">OF</span> queue <span class=\"kw7\">ISNT</span> QNODE<span class=\"br0\">(</span><span class=\"kw7\">NIL</span><span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>    next <span class=\"kw6\">OF</span> end <span class=\"kw6\">OF</span> queue<br/>  <span class=\"kw2\">ELSE</span><br/>    begin <span class=\"kw6\">OF</span> queue<br/>  <span class=\"kw2\">FI</span> <span class=\"sy1\">:=</span> end <span class=\"kw6\">OF</span> queue <span class=\"sy1\">:=</span> qnode<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> queue empty <span class=\"sy1\">=</span> <span class=\"br0\">(</span>QUEUE queue<span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>  begin <span class=\"kw6\">OF</span> queue <span class=\"kw7\">IS</span> QNODE<span class=\"br0\">(</span><span class=\"kw7\">NIL</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> dequeue <span class=\"sy1\">=</span> <span class=\"br0\">(</span>QUEUE queue<span class=\"br0\">)</span>NODE<span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  NODE out <span class=\"sy1\">:=</span> value <span class=\"kw6\">OF</span> begin <span class=\"kw6\">OF</span> queue<span class=\"sy1\">;</span><br/>  QNODE second <span class=\"sy1\">:=</span> next <span class=\"kw6\">OF</span> begin <span class=\"kw6\">OF</span> queue<span class=\"sy1\">;</span><br/><span class=\"coMULTI\"># free(begin OF queue); PR garbage collect hint PR #</span><br/>  QNODE<span class=\"br0\">(</span>begin <span class=\"kw6\">OF</span> queue<span class=\"br0\">)</span> <span class=\"sy1\">:=</span> <span class=\"br0\">(</span><span class=\"kw7\">NIL</span><span class=\"sy1\">,</span> <span class=\"kw7\">NIL</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  begin <span class=\"kw6\">OF</span> queue <span class=\"sy1\">:=</span> second<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">IF</span> queue empty<span class=\"br0\">(</span>queue<span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>    end <span class=\"kw6\">OF</span> queue <span class=\"sy1\">:=</span> begin <span class=\"kw6\">OF</span> queue<br/>  <span class=\"kw2\">FI</span><span class=\"sy1\">;</span><br/>  out<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> level order <span class=\"sy1\">=</span> <span class=\"br0\">(</span>NODE node<span class=\"sy1\">,</span> <span class=\"kw4\">PROC</span> <span class=\"br0\">(</span>VALUE<span class=\"br0\">)</span><span class=\"kw3\">VOID</span> action<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  <span class=\"kw4\">HEAP</span> QUEUES queue <span class=\"sy1\">:=</span> <span class=\"br0\">(</span>QNODE<span class=\"br0\">(</span><span class=\"kw7\">NIL</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> QNODE<span class=\"br0\">(</span><span class=\"kw7\">NIL</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  enqueue<span class=\"br0\">(</span>queue<span class=\"sy1\">,</span> node<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw2\">WHILE</span> <span class=\"kw8\">NOT</span> queue empty<span class=\"br0\">(</span>queue<span class=\"br0\">)</span><br/>  <span class=\"kw2\">DO</span><br/>    NODE next <span class=\"sy1\">:=</span> dequeue<span class=\"br0\">(</span>queue<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw2\">IF</span> next <span class=\"kw7\">ISNT</span> NODE<span class=\"br0\">(</span><span class=\"kw7\">NIL</span><span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>      action<span class=\"br0\">(</span>value <span class=\"kw6\">OF</span> next<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      enqueue<span class=\"br0\">(</span>queue<span class=\"sy1\">,</span> left <span class=\"kw6\">OF</span> next<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      enqueue<span class=\"br0\">(</span>queue<span class=\"sy1\">,</span> right <span class=\"kw6\">OF</span> next<span class=\"br0\">)</span><br/>    <span class=\"kw2\">FI</span><br/>  <span class=\"kw2\">OD</span><br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> <span class=\"kw22\">print</span> node <span class=\"sy1\">=</span> <span class=\"br0\">(</span>VALUE value<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>  <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span>value repr<span class=\"br0\">(</span>value<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span> <span class=\"br0\">(</span><br/>  NODE node <span class=\"sy1\">:=</span> tree<span class=\"br0\">(</span>1<span class=\"sy1\">,</span><br/>                tree<span class=\"br0\">(</span>2<span class=\"sy1\">,</span><br/>                     tree<span class=\"br0\">(</span>4<span class=\"sy1\">,</span><br/>                          tree<span class=\"br0\">(</span>7<span class=\"sy1\">,</span> <span class=\"kw7\">NIL</span><span class=\"sy1\">,</span> <span class=\"kw7\">NIL</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                          <span class=\"kw7\">NIL</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                     tree<span class=\"br0\">(</span>5<span class=\"sy1\">,</span> <span class=\"kw7\">NIL</span><span class=\"sy1\">,</span> <span class=\"kw7\">NIL</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                tree<span class=\"br0\">(</span>3<span class=\"sy1\">,</span><br/>                     tree<span class=\"br0\">(</span>6<span class=\"sy1\">,</span><br/>                          tree<span class=\"br0\">(</span>8<span class=\"sy1\">,</span> <span class=\"kw7\">NIL</span><span class=\"sy1\">,</span> <span class=\"kw7\">NIL</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                          tree<span class=\"br0\">(</span>9<span class=\"sy1\">,</span> <span class=\"kw7\">NIL</span><span class=\"sy1\">,</span> <span class=\"kw7\">NIL</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                     <span class=\"kw7\">NIL</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">MODE</span> TEST <span class=\"sy1\">=</span> <span class=\"kw6\">STRUCT</span><span class=\"br0\">(</span><br/>    <span class=\"kw3\">STRING</span> name<span class=\"sy1\">,</span> <br/>    <span class=\"kw4\">PROC</span><span class=\"br0\">(</span>NODE<span class=\"sy1\">,</span><span class=\"kw4\">PROC</span><span class=\"br0\">(</span>VALUE<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"br0\">)</span><span class=\"kw3\">VOID</span> order<br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw4\">PROC</span> test <span class=\"sy1\">=</span> <span class=\"br0\">(</span>TEST test<span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><span class=\"br0\">(</span><br/>    <span class=\"kw3\">STRING</span> pad<span class=\"sy1\">=</span><span class=\"st0\">\" \"</span><span class=\"sy1\">*</span><span class=\"br0\">(</span>12<span class=\"sy1\">-</span><span class=\"kw8\">UPB</span> name <span class=\"kw6\">OF</span> test<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>name <span class=\"kw6\">OF</span> test<span class=\"sy1\">,</span>pad<span class=\"sy1\">,</span><span class=\"st0\">\": \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"br0\">(</span>order <span class=\"kw6\">OF</span> test<span class=\"br0\">)</span><span class=\"br0\">(</span>node<span class=\"sy1\">,</span> <span class=\"kw22\">print</span> node<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"br0\">[</span><span class=\"br0\">]</span>TEST test list <span class=\"sy1\">=</span> <span class=\"br0\">(</span><br/>    <span class=\"br0\">(</span><span class=\"st0\">\"preorder\"</span><span class=\"sy1\">,</span>preorder<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">(</span><span class=\"st0\">\"inorder\"</span><span class=\"sy1\">,</span>inorder<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">(</span><span class=\"st0\">\"postorder\"</span><span class=\"sy1\">,</span>postorder<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"br0\">(</span><span class=\"st0\">\"level order\"</span><span class=\"sy1\">,</span>level order<span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> test list <span class=\"kw2\">DO</span> test<span class=\"br0\">(</span>test list<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  destroy tree<span class=\"br0\">(</span>node<span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "APL", "loc": 4, "block": "<pre class=\"text highlighted_source\">preorder \u2190 {l r\u2190\u237a \u2375\u2375 \u2375 \u22c4 (\u2283r)\u2207\u2368\u2363(\u00d7\u2262r)\u22a2(\u2283l)\u2207\u2368\u2363(\u00d7\u2262l)\u22a2\u237a \u237a\u237a \u2375}<br/>inorder  \u2190 {l r\u2190\u237a \u2375\u2375 \u2375 \u22c4 (\u2283r)\u2207\u2368\u2363(\u00d7\u2262r)\u22a2\u2375 \u237a\u237a\u2368(\u2283l)\u2207\u2368\u2363(\u00d7\u2262l)\u22a2\u237a}<br/>postorder\u2190 {l r\u2190\u237a \u2375\u2375 \u2375 \u22c4 \u2375 \u237a\u237a\u2368(\u2283r)\u2207\u2368\u2363(\u00d7\u2262r)\u22a2(\u2283l)\u2207\u2368\u2363(\u00d7\u2262l)\u22a2\u237a}<br/>lvlorder \u2190 {0=\u2374\u2375:\u237a \u22c4 (\u2283\u237a\u237a\u2368/(\u233d\u2375),\u2282\u237a)\u2207\u2283\u2218(,/)\u23632\u22a2\u237a\u2218\u2375\u2375\u00a8\u2375}</pre>"}, {"lang": "AppleScript", "loc": 215, "block": "<pre class=\"applescript highlighted_source\"><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"kw3\">set</span> tree <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>, <span class=\"br0\">{</span><span class=\"nu0\">2</span>, <span class=\"br0\">{</span><span class=\"nu0\">4</span>, <span class=\"br0\">{</span><span class=\"nu0\">7</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"br0\">}</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">3</span>, <span class=\"br0\">{</span><span class=\"nu0\">6</span>, <span class=\"br0\">{</span><span class=\"nu0\">8</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">-- asciiTree\u00a0:: String</span><br/>    <span class=\"kw3\">set</span> asciiTree <span class=\"kw3\">to</span> \u00ac<br/>        unlines<span class=\"br0\">(</span><span class=\"br0\">{</span>\u00ac<br/>            <span class=\"st0\">\"         1\"</span>, \u00ac<br/>            <span class=\"st0\">\"        / <span class=\"es0\">\\\\</span>\"</span>, \u00ac<br/>            <span class=\"st0\">\"       /   <span class=\"es0\">\\\\</span>\"</span>, \u00ac<br/>            <span class=\"st0\">\"      /     <span class=\"es0\">\\\\</span>\"</span>, \u00ac<br/>            <span class=\"st0\">\"     2       3\"</span>, \u00ac<br/>            <span class=\"st0\">\"    / <span class=\"es0\">\\\\</span>     /\"</span>, \u00ac<br/>            <span class=\"st0\">\"   4   5   6\"</span>, \u00ac<br/>            <span class=\"st0\">\"  /       / <span class=\"es0\">\\\\</span>\"</span>, \u00ac<br/>            <span class=\"st0\">\" 7       8   9\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> tabulate<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>s, xs<span class=\"br0\">)</span><br/>            justifyLeft<span class=\"br0\">(</span><span class=\"nu0\">14</span>, <span class=\"kw1\">space</span>, s <span class=\"sy0\">&amp;</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> unwords<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">set</span> strResult <span class=\"kw3\">to</span> asciiTree <span class=\"sy0\">&amp;</span> linefeed <span class=\"sy0\">&amp;</span> linefeed <span class=\"sy0\">&amp;</span> \u00ac<br/>        unlines<span class=\"br0\">(</span>zipWith<span class=\"br0\">(</span>tabulate, \u00ac<br/>            <span class=\"br0\">[</span><span class=\"st0\">\"preorder\"</span>, <span class=\"st0\">\"inorder\"</span>, <span class=\"st0\">\"postorder\"</span>, <span class=\"st0\">\"level-order\"</span><span class=\"br0\">]</span>, \u00ac<br/>            ap<span class=\"br0\">(</span><span class=\"br0\">[</span>preorder, inorder, postorder, levelOrder<span class=\"br0\">]</span>, <span class=\"br0\">[</span>tree<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\"><span class=\"kw3\">set</span> <span class=\"kw2\">the</span> clipboard to</span> strResult<br/>    <span class=\"kw3\">return</span> strResult<br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/><span class=\"co1\">-- TRAVERSAL FUNCTIONS --------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- preorder\u00a0:: Tree Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> preorder<span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>v, l, r<span class=\"br0\">}</span> <span class=\"kw3\">to</span> nodeParts<span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> l <span class=\"kw3\">is</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> lstLeft <span class=\"kw3\">to</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> lstLeft <span class=\"kw3\">to</span> preorder<span class=\"br0\">(</span>l<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> r <span class=\"kw3\">is</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> lstRight <span class=\"kw3\">to</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> lstRight <span class=\"kw3\">to</span> preorder<span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    v <span class=\"sy0\">&amp;</span> lstLeft <span class=\"sy0\">&amp;</span> lstRight<br/><span class=\"kw3\">end</span> preorder<br/>\u00a0<br/><span class=\"co1\">-- inorder\u00a0:: Tree Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> inorder<span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>v, l, r<span class=\"br0\">}</span> <span class=\"kw3\">to</span> nodeParts<span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> l <span class=\"kw3\">is</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> lstLeft <span class=\"kw3\">to</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> lstLeft <span class=\"kw3\">to</span> inorder<span class=\"br0\">(</span>l<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> r <span class=\"kw3\">is</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> lstRight <span class=\"kw3\">to</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> lstRight <span class=\"kw3\">to</span> inorder<span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>    lstLeft <span class=\"sy0\">&amp;</span> v <span class=\"sy0\">&amp;</span> lstRight<br/><span class=\"kw3\">end</span> inorder<br/>\u00a0<br/><span class=\"co1\">-- postorder\u00a0:: Tree Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> postorder<span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>v, l, r<span class=\"br0\">}</span> <span class=\"kw3\">to</span> nodeParts<span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> l <span class=\"kw3\">is</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> lstLeft <span class=\"kw3\">to</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> lstLeft <span class=\"kw3\">to</span> postorder<span class=\"br0\">(</span>l<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>\u00a0<br/>    <span class=\"kw3\">if</span> r <span class=\"kw3\">is</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> lstRight <span class=\"kw3\">to</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> lstRight <span class=\"kw3\">to</span> postorder<span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    lstLeft <span class=\"sy0\">&amp;</span> lstRight <span class=\"sy0\">&amp;</span> v<br/><span class=\"kw3\">end</span> postorder<br/>\u00a0<br/><span class=\"co1\">-- levelOrder\u00a0:: Tree Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> levelOrder<span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> tree &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> <span class=\"br0\">{</span>head, tail<span class=\"br0\">}</span> <span class=\"kw3\">to</span> uncons<span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"co1\">-- Take any value found in the head node</span><br/>        <span class=\"co1\">-- deferring any child nodes to the end of the tail</span><br/>        <span class=\"co1\">-- before recursing</span><br/>\u00a0<br/>        <span class=\"kw3\">if</span> head <span class=\"kw3\">is</span> <span class=\"kw2\">not</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"kw3\">then</span><br/>            <span class=\"kw3\">set</span> <span class=\"br0\">{</span>v, l, r<span class=\"br0\">}</span> <span class=\"kw3\">to</span> nodeParts<span class=\"br0\">(</span>head<span class=\"br0\">)</span><br/>            v <span class=\"sy0\">&amp;</span> levelOrder<span class=\"br0\">(</span>tail <span class=\"sy0\">&amp;</span> <span class=\"br0\">{</span>l, r<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">else</span><br/>            levelOrder<span class=\"br0\">(</span>tail<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> levelOrder<br/>\u00a0<br/><span class=\"co1\">-- nodeParts\u00a0:: Tree -&gt; (Int, Tree, Tree)</span><br/><span class=\"kw3\">on</span> nodeParts<span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> tree <span class=\"kw3\">is</span> <span class=\"kw1\">list</span> <span class=\"kw2\">and</span> length <span class=\"kw3\">of</span> tree <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"kw3\">then</span><br/>        tree<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span>tree<span class=\"br0\">}</span> <span class=\"sy0\">&amp;</span> <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> nodeParts<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ----------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- A list of functions applied to a list of arguments</span><br/><span class=\"co1\">-- (&lt;*&gt; | ap)\u00a0:: [(a -&gt; b)] -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> ap<span class=\"br0\">(</span>fs, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lngFs <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> fs<br/>    <span class=\"kw3\">set</span> lngXs <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lngFs<br/>        <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span><span class=\"kw1\">contents</span> <span class=\"kw3\">of</span> <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> fs<span class=\"br0\">)</span><br/>            <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> j <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lngXs<br/>                <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">contents</span> <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> j <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> ap<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">-- justifyLeft\u00a0:: Int -&gt; Char -&gt; Text -&gt; Text</span><br/><span class=\"kw3\">on</span> justifyLeft<span class=\"br0\">(</span>n, cFiller, strText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> n &gt; length <span class=\"kw3\">of</span> strText <span class=\"kw3\">then</span><br/>        <span class=\"kw1\">text</span> <span class=\"nu0\">1</span> <span class=\"kw2\">thru</span> n <span class=\"kw3\">of</span> <span class=\"br0\">(</span>strText <span class=\"sy0\">&amp;</span> replicate<span class=\"br0\">(</span>n, cFiller<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">else</span><br/>        strText<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> justifyLeft<br/>\u00a0<br/><span class=\"co1\">-- min\u00a0:: Ord a =&gt; a -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> min<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> y <span class=\"sy0\">&lt;</span> x <span class=\"kw3\">then</span><br/>        y<br/>    <span class=\"kw3\">else</span><br/>        x<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> min<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- replicate\u00a0:: Int -&gt; a -&gt; [a]</span><br/><span class=\"kw3\">on</span> replicate<span class=\"br0\">(</span>n, a<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> out <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span> <span class=\"kw3\">return</span> out<br/>    <span class=\"kw3\">set</span> dbl <span class=\"kw3\">to</span> <span class=\"br0\">{</span>a<span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">while</span> <span class=\"br0\">(</span>n &gt; <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span>n <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw3\">set</span> out <span class=\"kw3\">to</span> out <span class=\"sy0\">&amp;</span> dbl<br/>        <span class=\"kw3\">set</span> n <span class=\"kw3\">to</span> <span class=\"br0\">(</span>n <span class=\"kw2\">div</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> dbl <span class=\"kw3\">to</span> <span class=\"br0\">(</span>dbl <span class=\"sy0\">&amp;</span> dbl<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> out <span class=\"sy0\">&amp;</span> dbl<br/><span class=\"kw3\">end</span> replicate<br/>\u00a0<br/><span class=\"co1\">-- uncons\u00a0:: [a] -&gt; Maybe (a, [a])</span><br/><span class=\"kw3\">on</span> uncons<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"br0\">{</span><span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs, rest <span class=\"kw3\">of</span> xs<span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw1\">missing value</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> uncons<br/>\u00a0<br/><span class=\"co1\">-- unlines\u00a0:: [String] -&gt; String</span><br/><span class=\"kw3\">on</span> unlines<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    intercalate<span class=\"br0\">(</span>linefeed, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> unlines<br/>\u00a0<br/><span class=\"co1\">-- unwords\u00a0:: [String] -&gt; String</span><br/><span class=\"kw3\">on</span> unwords<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    intercalate<span class=\"br0\">(</span><span class=\"kw1\">space</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> unwords<br/>\u00a0<br/><span class=\"co1\">-- zipWith\u00a0:: (a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]</span><br/><span class=\"kw3\">on</span> zipWith<span class=\"br0\">(</span>f, xs, ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> min<span class=\"br0\">(</span>length <span class=\"kw3\">of</span> xs, length <span class=\"kw3\">of</span> ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> ys<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> zipWith</pre>"}, {"lang": "ATS", "loc": 98, "block": "<pre class=\"text highlighted_source\">#include<br/>\"share/atspre_staload.hats\"<br/>//<br/>(* ****** ****** *)<br/>//<br/>datatype<br/>tree (a:<a class=\"__cf_email__\" data-cfemail=\"a4d0e4ddd4c1\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>) =<br/>  | tnil of ()<br/>  | tcons of (tree a, a, tree a)<br/>//<br/>(* ****** ****** *)<br/>\u00a0<br/>symintr ++<br/>infixr (+) ++<br/>overload ++ with list_append<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>#define sing list_sing<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>fun{<br/>a:<a class=\"__cf_email__\" data-cfemail=\"1460546d6471\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>} preorder<br/>  (t0: tree a): List0 a =<br/>  case t0 of<br/>  | tnil () =&gt; nil ()<br/>  | tcons (tl, x, tr) =&gt; sing(x) ++ preorder(tl) ++ preorder(tr)<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>fun{<br/>a:<a class=\"__cf_email__\" data-cfemail=\"7602360f0613\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>} inorder<br/>  (t0: tree a): List0 a =<br/>  case t0 of<br/>  | tnil () =&gt; nil ()<br/>  | tcons (tl, x, tr) =&gt; inorder(tl) ++ sing(x) ++ inorder(tr)<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>fun{<br/>a:<a class=\"__cf_email__\" data-cfemail=\"3347734a4356\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>} postorder<br/>  (t0: tree a): List0 a =<br/>  case t0 of<br/>  | tnil () =&gt; nil ()<br/>  | tcons (tl, x, tr) =&gt; postorder(tl) ++ postorder(tr) ++ sing(x)<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>fun{<br/>a:<a class=\"__cf_email__\" data-cfemail=\"3b4f7b424b5e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>} levelorder<br/>  (t0: tree a): List0 a = let<br/>//<br/>fun auxlst<br/>  (ts: List (tree(a))): List0 a =<br/>  case ts of<br/>  | list_nil () =&gt; list_nil ()<br/>  | list_cons (t, ts) =&gt;<br/>    (<br/>      case+ t of<br/>      | tnil () =&gt; auxlst (ts)<br/>      | tcons (tl, x, tr) =&gt; cons (x, auxlst (ts ++ $list{tree(a)}(tl, tr)))<br/>    )<br/>//<br/>in<br/>  auxlst (sing(t0))<br/>end // end of [levelorder]<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>macdef<br/>tsing(x) = tcons (tnil, ,(x), tnil)<br/>\u00a0<br/>(* ****** ****** *)<br/>\u00a0<br/>implement<br/>main0 () = let<br/>//<br/>val t0 =<br/>tcons{int}<br/>(<br/> tcons (tcons (tsing (7), 4, tnil ()), 2, tsing (5))<br/>,<br/>1<br/>,<br/> tcons (tcons (tsing (8), 6, tsing (9)), 3, tnil ())<br/>)<br/>//<br/>in<br/>  println! (\"preorder:\\t\", preorder(t0));<br/>  println! (\"inorder:\\t\", inorder(t0));<br/>  println! (\"postorder:\\t\", postorder(t0));<br/>  println! (\"level-order:\\t\", levelorder(t0));<br/>end (* end of [main0] *)</pre>"}, {"lang": "AutoHotkey", "loc": 53, "block": "<pre class=\"autohotkey highlighted_source\">AddNode<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">; Build global Tree</span><br/>AddNode<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>AddNode<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>AddNode<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>AddNode<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>AddNode<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><br/>AddNode<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>AddNode<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>AddNode<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"Preorder: \"</span>   PreOrder<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"co1\">; 1 2 4 7 5 3 6 8 9</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"Inorder: \"</span>    InOrder<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>   <span class=\"co1\">; 7 4 2 5 1 8 6 9 3</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"postorder: \"</span>  PostOrder<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"co1\">; 7 4 5 2 8 9 6 3 1</span><br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"levelorder: \"</span> LevOrder<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"co1\">; 1 2 3 4 5 6 7 8 9</span><br/>\u00a0<br/>AddNode<span class=\"br0\">(</span>ByRef Tree<span class=\"sy0\">,</span>Node<span class=\"sy0\">,</span><span class=\"kw6\">Left</span><span class=\"sy0\">,</span><span class=\"kw6\">Right</span><span class=\"sy0\">,</span>Value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">if</span>\u00a0!isobject<span class=\"br0\">(</span>Tree<span class=\"br0\">)</span><br/>     Tree <span class=\"sy0\">:=</span> object<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>   Tree<span class=\"br0\">[</span>Node<span class=\"sy0\">,</span> <span class=\"st0\">\"L\"</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw6\">Left</span><br/>   Tree<span class=\"br0\">[</span>Node<span class=\"sy0\">,</span> <span class=\"st0\">\"R\"</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw6\">Right</span><br/>   Tree<span class=\"br0\">[</span>Node<span class=\"sy0\">,</span> <span class=\"st0\">\"V\"</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> Value<br/><span class=\"br0\">}</span><br/>\u00a0<br/>PreOrder<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span>Node<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>ptree <span class=\"sy0\">:=</span> Tree<span class=\"br0\">[</span>Node<span class=\"sy0\">,</span> <span class=\"st0\">\"V\"</span><span class=\"br0\">]</span> <span class=\"st0\">\" \"</span><br/>        <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>L<span class=\"sy0\">:=</span>Tree<span class=\"br0\">[</span>Node<span class=\"sy0\">,</span> <span class=\"st0\">\"L\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0? PreOrder<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span>L<span class=\"br0\">)</span>\u00a0: <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>R<span class=\"sy0\">:=</span>Tree<span class=\"br0\">[</span>Node<span class=\"sy0\">,</span> <span class=\"st0\">\"R\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0? PreOrder<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span>R<span class=\"br0\">)</span>\u00a0: <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">return</span> ptree<br/><span class=\"br0\">}</span><br/>InOrder<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span>Node<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">Return</span> itree <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>L<span class=\"sy0\">:=</span>Tree<span class=\"br0\">[</span>Node<span class=\"sy0\">,</span> <span class=\"st0\">\"L\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0? InOrder<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span>L<span class=\"br0\">)</span>\u00a0: <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">.</span> Tree<span class=\"br0\">[</span>Node<span class=\"sy0\">,</span> <span class=\"st0\">\"V\"</span><span class=\"br0\">]</span> <span class=\"st0\">\" \"</span><br/>        <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>R<span class=\"sy0\">:=</span>Tree<span class=\"br0\">[</span>Node<span class=\"sy0\">,</span> <span class=\"st0\">\"R\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0? InOrder<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span>R<span class=\"br0\">)</span>\u00a0: <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>PostOrder<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span>Node<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw1\">Return</span> ptree <span class=\"sy0\">:=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>L<span class=\"sy0\">:=</span>Tree<span class=\"br0\">[</span>Node<span class=\"sy0\">,</span> <span class=\"st0\">\"L\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0? PostOrder<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span>L<span class=\"br0\">)</span>\u00a0: <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>R<span class=\"sy0\">:=</span>Tree<span class=\"br0\">[</span>Node<span class=\"sy0\">,</span> <span class=\"st0\">\"R\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0? PostOrder<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span>R<span class=\"br0\">)</span>\u00a0: <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">.</span> Tree<span class=\"br0\">[</span>Node<span class=\"sy0\">,</span> <span class=\"st0\">\"V\"</span><span class=\"br0\">]</span> <span class=\"st0\">\" \"</span><br/><span class=\"br0\">}</span><br/>LevOrder<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span>Node<span class=\"sy0\">,</span>Lev<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   Static                        <span class=\"co1\">; make node lists static</span><br/>   i<span class=\"re0\">%Lev%</span> <span class=\"sy0\">.=</span> Tree<span class=\"br0\">[</span>Node<span class=\"sy0\">,</span> <span class=\"st0\">\"V\"</span><span class=\"br0\">]</span> <span class=\"st0\">\" \"</span> <span class=\"co1\">; build node lists in every level</span><br/>   <span class=\"kw1\">If</span> <span class=\"br0\">(</span>L<span class=\"sy0\">:=</span>Tree<span class=\"br0\">[</span>Node<span class=\"sy0\">,</span> <span class=\"st0\">\"L\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>       LevOrder<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span>L<span class=\"sy0\">,</span>Lev<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">If</span> <span class=\"br0\">(</span>R<span class=\"sy0\">:=</span>Tree<span class=\"br0\">[</span>Node<span class=\"sy0\">,</span> <span class=\"st0\">\"R\"</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>       LevOrder<span class=\"br0\">(</span>Tree<span class=\"sy0\">,</span>R<span class=\"sy0\">,</span>Lev<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">If</span> <span class=\"br0\">(</span>Lev <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">Return</span><br/>   <span class=\"kw1\">While</span> i<span class=\"re0\">%Lev%</span>                  <span class=\"co1\">; concatenate node lists from all levels</span><br/>      t <span class=\"sy0\">.=</span> i<span class=\"re0\">%Lev%</span><span class=\"sy0\">,</span> Lev<span class=\"sy0\">++</span><br/>   <span class=\"kw1\">Return</span> t<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 91, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"kw6\">function</span> preorder<span class=\"br0\">(</span>tree, node, res,  child<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>node <span class=\"sy2\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw6\">return</span><br/>    res<span class=\"br0\">[</span>res<span class=\"br0\">[</span><span class=\"st0\">\"count\"</span><span class=\"br0\">]</span><span class=\"sy3\">++</span><span class=\"br0\">]</span> = node<br/>    <span class=\"kw4\">split</span><span class=\"br0\">(</span>tree<span class=\"br0\">[</span>node<span class=\"br0\">]</span>, child, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>    preorder<span class=\"br0\">(</span>tree,child<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>,res<span class=\"br0\">)</span><br/>    preorder<span class=\"br0\">(</span>tree,child<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>,res<span class=\"br0\">)</span><br/><span class=\"br0\">}</span>       <br/>\u00a0<br/><span class=\"kw6\">function</span> inorder<span class=\"br0\">(</span>tree, node, res,   child<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>node <span class=\"sy2\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw6\">return</span><br/>    <span class=\"kw4\">split</span><span class=\"br0\">(</span>tree<span class=\"br0\">[</span>node<span class=\"br0\">]</span>, child, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>    inorder<span class=\"br0\">(</span>tree,child<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>,res<span class=\"br0\">)</span><br/>    res<span class=\"br0\">[</span>res<span class=\"br0\">[</span><span class=\"st0\">\"count\"</span><span class=\"br0\">]</span><span class=\"sy3\">++</span><span class=\"br0\">]</span> = node<br/>    inorder<span class=\"br0\">(</span>tree,child<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>,res<span class=\"br0\">)</span><br/><span class=\"br0\">}</span>       <br/>\u00a0<br/><span class=\"kw6\">function</span> postorder<span class=\"br0\">(</span>tree, node, res,     child<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>node <span class=\"sy2\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw6\">return</span><br/>    <span class=\"kw4\">split</span><span class=\"br0\">(</span>tree<span class=\"br0\">[</span>node<span class=\"br0\">]</span>, child, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>    postorder<span class=\"br0\">(</span>tree,child<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, res<span class=\"br0\">)</span><br/>    postorder<span class=\"br0\">(</span>tree,child<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>, res<span class=\"br0\">)</span><br/>    res<span class=\"br0\">[</span>res<span class=\"br0\">[</span><span class=\"st0\">\"count\"</span><span class=\"br0\">]</span><span class=\"sy3\">++</span><span class=\"br0\">]</span> = node<br/><span class=\"br0\">}</span>   <br/>\u00a0<br/><span class=\"kw6\">function</span> levelorder<span class=\"br0\">(</span>tree, node, res,    nextnode, queue, child<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>node <span class=\"sy2\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw6\">return</span><br/>\u00a0<br/>    queue<span class=\"br0\">[</span><span class=\"st0\">\"tail\"</span><span class=\"br0\">]</span> = <span class=\"nu0\">0</span><br/>    queue<span class=\"br0\">[</span>queue<span class=\"br0\">[</span><span class=\"st0\">\"head\"</span><span class=\"br0\">]</span><span class=\"sy3\">++</span><span class=\"br0\">]</span> = node<br/>\u00a0<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>queue<span class=\"br0\">[</span><span class=\"st0\">\"head\"</span><span class=\"br0\">]</span> <span class=\"sy3\">-</span> queue<span class=\"br0\">[</span><span class=\"st0\">\"tail\"</span><span class=\"br0\">]</span> <span class=\"sy2\">&gt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        nextnode = queue<span class=\"br0\">[</span>queue<span class=\"br0\">[</span><span class=\"st0\">\"tail\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        delete queue<span class=\"br0\">[</span>queue<span class=\"br0\">[</span><span class=\"st0\">\"tail\"</span><span class=\"br0\">]</span><span class=\"sy3\">++</span><span class=\"br0\">]</span><br/>\u00a0<br/>        res<span class=\"br0\">[</span>res<span class=\"br0\">[</span><span class=\"st0\">\"count\"</span><span class=\"br0\">]</span><span class=\"sy3\">++</span><span class=\"br0\">]</span> = nextnode<br/>\u00a0<br/>        <span class=\"kw4\">split</span><span class=\"br0\">(</span>tree<span class=\"br0\">[</span>nextnode<span class=\"br0\">]</span>, child, <span class=\"st0\">\",\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>child<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy2\">!=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>            queue<span class=\"br0\">[</span>queue<span class=\"br0\">[</span><span class=\"st0\">\"head\"</span><span class=\"br0\">]</span><span class=\"sy3\">++</span><span class=\"br0\">]</span> = child<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>child<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy2\">!=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>            queue<span class=\"br0\">[</span>queue<span class=\"br0\">[</span><span class=\"st0\">\"head\"</span><span class=\"br0\">]</span><span class=\"sy3\">++</span><span class=\"br0\">]</span> = child<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    delete queue<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    tree<span class=\"br0\">[</span><span class=\"st0\">\"1\"</span><span class=\"br0\">]</span> = <span class=\"st0\">\"2,3\"</span><br/>    tree<span class=\"br0\">[</span><span class=\"st0\">\"2\"</span><span class=\"br0\">]</span> = <span class=\"st0\">\"4,5\"</span><br/>    tree<span class=\"br0\">[</span><span class=\"st0\">\"3\"</span><span class=\"br0\">]</span> = <span class=\"st0\">\"6,\"</span><br/>    tree<span class=\"br0\">[</span><span class=\"st0\">\"4\"</span><span class=\"br0\">]</span> = <span class=\"st0\">\"7,\"</span><br/>    tree<span class=\"br0\">[</span><span class=\"st0\">\"5\"</span><span class=\"br0\">]</span> = <span class=\"st0\">\",\"</span><br/>    tree<span class=\"br0\">[</span><span class=\"st0\">\"6\"</span><span class=\"br0\">]</span> = <span class=\"st0\">\"8,9\"</span><br/>    tree<span class=\"br0\">[</span><span class=\"st0\">\"7\"</span><span class=\"br0\">]</span> = <span class=\"st0\">\",\"</span><br/>    tree<span class=\"br0\">[</span><span class=\"st0\">\"8\"</span><span class=\"br0\">]</span> = <span class=\"st0\">\",\"</span><br/>    tree<span class=\"br0\">[</span><span class=\"st0\">\"9\"</span><span class=\"br0\">]</span> = <span class=\"st0\">\",\"</span> <br/>\u00a0<br/>    preorder<span class=\"br0\">(</span>tree,<span class=\"st0\">\"1\"</span>,result<span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span> <span class=\"st0\">\"preorder:<span class=\"es0\">\\t</span>\"</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n = <span class=\"nu0\">0</span>; n <span class=\"sy2\">&lt;</span> result<span class=\"br0\">[</span><span class=\"st0\">\"count\"</span><span class=\"br0\">]</span>; n <span class=\"sy3\">+</span>= <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw5\">printf</span> result<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"st0\">\" \"</span><br/>    <span class=\"kw5\">printf</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>    delete result <br/>\u00a0<br/>    inorder<span class=\"br0\">(</span>tree,<span class=\"st0\">\"1\"</span>,result<span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span> <span class=\"st0\">\"inorder:<span class=\"es0\">\\t</span>\"</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n = <span class=\"nu0\">0</span>; n <span class=\"sy2\">&lt;</span> result<span class=\"br0\">[</span><span class=\"st0\">\"count\"</span><span class=\"br0\">]</span>; n <span class=\"sy3\">+</span>= <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw5\">printf</span> result<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"st0\">\" \"</span><br/>    <span class=\"kw5\">printf</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>    delete result <br/>\u00a0<br/>    postorder<span class=\"br0\">(</span>tree,<span class=\"st0\">\"1\"</span>,result<span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span> <span class=\"st0\">\"postorder:<span class=\"es0\">\\t</span>\"</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n = <span class=\"nu0\">0</span>; n <span class=\"sy2\">&lt;</span> result<span class=\"br0\">[</span><span class=\"st0\">\"count\"</span><span class=\"br0\">]</span>; n <span class=\"sy3\">+</span>= <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw5\">printf</span> result<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"st0\">\" \"</span><br/>    <span class=\"kw5\">printf</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>    delete result<br/>\u00a0<br/>    levelorder<span class=\"br0\">(</span>tree,<span class=\"st0\">\"1\"</span>,result<span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span> <span class=\"st0\">\"level-order:<span class=\"es0\">\\t</span>\"</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>n = <span class=\"nu0\">0</span>; n <span class=\"sy2\">&lt;</span> result<span class=\"br0\">[</span><span class=\"st0\">\"count\"</span><span class=\"br0\">]</span>; n <span class=\"sy3\">+</span>= <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw5\">printf</span> result<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"st0\">\" \"</span><br/>    <span class=\"kw5\">printf</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>    delete result<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 41, "block": "<pre class=\"text highlighted_source\">(<br/>  ( tree<br/>  =   1<br/>    .   (2.(4.7.) (5.))<br/>        (3.6.(8.) (9.))<br/>  )<br/>&amp; ( preorder<br/>  =   K sub<br/>    .    \u00a0!arg:(?K.?sub)\u00a0?arg<br/>        &amp;\u00a0!K preorder$!sub preorder$!arg<br/>      |<br/>  )<br/>&amp; out$(\"preorder:   \" preorder$!tree)<br/>&amp; ( inorder<br/>  =   K lhs rhs<br/>    .  \u00a0!arg:(?K.?sub)\u00a0?arg<br/>      &amp; (  \u00a0!sub:%?lhs\u00a0?rhs<br/>          &amp; inorder$!lhs\u00a0!K inorder$!rhs inorder$!arg<br/>        |\u00a0!K<br/>        )<br/>  )<br/>&amp; out$(\"inorder:    \" inorder$!tree)<br/>&amp; ( postorder<br/>  =   K sub<br/>    .    \u00a0!arg:(?K.?sub)\u00a0?arg<br/>        &amp; postorder$!sub\u00a0!K postorder$!arg<br/>      |<br/>  )<br/>&amp; out$(\"postorder:  \" postorder$!tree)<br/>&amp; ( levelorder<br/>  =   todo tree sub<br/>    .  \u00a0!arg:(.)&amp;<br/>      |  \u00a0!arg:(?tree.?todo)<br/>        &amp; (  \u00a0!tree:(?K.?sub)\u00a0?tree<br/>            &amp;\u00a0!K levelorder$(!tree.!todo\u00a0!sub)<br/>          | levelorder$(!todo.)<br/>          )<br/>  )<br/>&amp; out$(\"level-order:\" levelorder$(!tree.))<br/>&amp; <br/>)</pre>"}, {"lang": "C", "loc": 146, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> node_s<br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">int</span> value<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">struct</span> node_s<span class=\"sy0\">*</span> left<span class=\"sy0\">;</span><br/>  <span class=\"kw4\">struct</span> node_s<span class=\"sy0\">*</span> right<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">*</span>node<span class=\"sy0\">;</span><br/>\u00a0<br/>node tree<span class=\"br0\">(</span><span class=\"kw4\">int</span> v<span class=\"sy0\">,</span> node l<span class=\"sy0\">,</span> node r<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  node n <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> node_s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  n<span class=\"sy0\">-&gt;</span>value <span class=\"sy0\">=</span> v<span class=\"sy0\">;</span><br/>  n<span class=\"sy0\">-&gt;</span>left  <span class=\"sy0\">=</span> l<span class=\"sy0\">;</span><br/>  n<span class=\"sy0\">-&gt;</span>right <span class=\"sy0\">=</span> r<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> destroy_tree<span class=\"br0\">(</span>node n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>left<span class=\"br0\">)</span><br/>    destroy_tree<span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>left<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>right<span class=\"br0\">)</span><br/>    destroy_tree<span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>right<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> preorder<span class=\"br0\">(</span>node n<span class=\"sy0\">,</span> <span class=\"kw4\">void</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>f<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  f<span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>left<span class=\"br0\">)</span><br/>    preorder<span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>left<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>right<span class=\"br0\">)</span><br/>    preorder<span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>right<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> inorder<span class=\"br0\">(</span>node n<span class=\"sy0\">,</span> <span class=\"kw4\">void</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>f<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>left<span class=\"br0\">)</span><br/>    inorder<span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>left<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  f<span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>right<span class=\"br0\">)</span><br/>    inorder<span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>right<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> postorder<span class=\"br0\">(</span>node n<span class=\"sy0\">,</span> <span class=\"kw4\">void</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>f<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>left<span class=\"br0\">)</span><br/>    postorder<span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>left<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>right<span class=\"br0\">)</span><br/>    postorder<span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>right<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  f<span class=\"br0\">(</span>n<span class=\"sy0\">-&gt;</span>value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"coMULTI\">/* helper queue for levelorder */</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> qnode_s<br/><span class=\"br0\">{</span><br/>  <span class=\"kw4\">struct</span> qnode_s<span class=\"sy0\">*</span> next<span class=\"sy0\">;</span><br/>  node value<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"sy0\">*</span>qnode<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span> qnode begin<span class=\"sy0\">,</span> end<span class=\"sy0\">;</span> <span class=\"br0\">}</span> queue<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> enqueue<span class=\"br0\">(</span>queue<span class=\"sy0\">*</span> q<span class=\"sy0\">,</span> node n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  qnode node <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html\"><span class=\"kw3\">malloc</span></a><span class=\"br0\">(</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">struct</span> qnode_s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  node<span class=\"sy0\">-&gt;</span>value <span class=\"sy0\">=</span> n<span class=\"sy0\">;</span><br/>  node<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>q<span class=\"sy0\">-&gt;</span>end<span class=\"br0\">)</span><br/>    q<span class=\"sy0\">-&gt;</span>end<span class=\"sy0\">-&gt;</span>next <span class=\"sy0\">=</span> node<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">else</span><br/>    q<span class=\"sy0\">-&gt;</span>begin <span class=\"sy0\">=</span> node<span class=\"sy0\">;</span><br/>  q<span class=\"sy0\">-&gt;</span>end <span class=\"sy0\">=</span> node<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>node dequeue<span class=\"br0\">(</span>queue<span class=\"sy0\">*</span> q<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  node tmp <span class=\"sy0\">=</span> q<span class=\"sy0\">-&gt;</span>begin<span class=\"sy0\">-&gt;</span>value<span class=\"sy0\">;</span><br/>  qnode second <span class=\"sy0\">=</span> q<span class=\"sy0\">-&gt;</span>begin<span class=\"sy0\">-&gt;</span>next<span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/free.html\"><span class=\"kw3\">free</span></a><span class=\"br0\">(</span>q<span class=\"sy0\">-&gt;</span>begin<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  q<span class=\"sy0\">-&gt;</span>begin <span class=\"sy0\">=</span> second<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>q<span class=\"sy0\">-&gt;</span>begin<span class=\"br0\">)</span><br/>    q<span class=\"sy0\">-&gt;</span>end <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> tmp<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> queue_empty<span class=\"br0\">(</span>queue<span class=\"sy0\">*</span> q<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <span class=\"kw1\">return</span> <span class=\"sy0\">!</span>q<span class=\"sy0\">-&gt;</span>begin<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> levelorder<span class=\"br0\">(</span>node n<span class=\"sy0\">,</span> <span class=\"kw4\">void</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>f<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  queue nodequeue <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  enqueue<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>nodequeue<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>queue_empty<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>nodequeue<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">{</span><br/>    node next <span class=\"sy0\">=</span> dequeue<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>nodequeue<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    f<span class=\"br0\">(</span>next<span class=\"sy0\">-&gt;</span>value<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>next<span class=\"sy0\">-&gt;</span>left<span class=\"br0\">)</span><br/>      enqueue<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>nodequeue<span class=\"sy0\">,</span> next<span class=\"sy0\">-&gt;</span>left<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>next<span class=\"sy0\">-&gt;</span>right<span class=\"br0\">)</span><br/>      enqueue<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>nodequeue<span class=\"sy0\">,</span> next<span class=\"sy0\">-&gt;</span>right<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> print<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d \"</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>  node n <span class=\"sy0\">=</span> tree<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                tree<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>                     tree<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><br/>                          tree<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                          <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                     tree<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                tree<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><br/>                     tree<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><br/>                          tree<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                          tree<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                     <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"preorder:    \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  preorder<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> print<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"inorder:     \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  inorder<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> print<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"postorder:   \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  postorder<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> print<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"level-order: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  levelorder<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> print<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  destroy_tree<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 72, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Node<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> <span class=\"kw1\">Value</span><span class=\"sy0\">;</span><br/>    Node Left<span class=\"sy0\">;</span><br/>    Node Right<span class=\"sy0\">;</span><br/>\u00a0<br/>    Node<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"kw1\">value</span> <span class=\"sy0\">=</span> <span class=\"kw1\">default</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>, Node left <span class=\"sy0\">=</span> <span class=\"kw1\">default</span><span class=\"br0\">(</span>Node<span class=\"br0\">)</span>, Node right <span class=\"sy0\">=</span> <span class=\"kw1\">default</span><span class=\"br0\">(</span>Node<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">Value</span> <span class=\"sy0\">=</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>        Left <span class=\"sy0\">=</span> left<span class=\"sy0\">;</span><br/>        Right <span class=\"sy0\">=</span> right<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> Preorder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <span class=\"kw1\">Value</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Left <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> <span class=\"kw1\">value</span> <span class=\"kw1\">in</span> Left<span class=\"sy0\">.</span><span class=\"me1\">Preorder</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Right <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> <span class=\"kw1\">value</span> <span class=\"kw1\">in</span> Right<span class=\"sy0\">.</span><span class=\"me1\">Preorder</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> Inorder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Left <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> <span class=\"kw1\">value</span> <span class=\"kw1\">in</span> Left<span class=\"sy0\">.</span><span class=\"me1\">Inorder</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <span class=\"kw1\">Value</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Right <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> <span class=\"kw1\">value</span> <span class=\"kw1\">in</span> Right<span class=\"sy0\">.</span><span class=\"me1\">Inorder</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> Postorder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Left <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> <span class=\"kw1\">value</span> <span class=\"kw1\">in</span> Left<span class=\"sy0\">.</span><span class=\"me1\">Postorder</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>Right <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> <span class=\"kw1\">value</span> <span class=\"kw1\">in</span> Right<span class=\"sy0\">.</span><span class=\"me1\">Postorder</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <span class=\"kw1\">value</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> <span class=\"kw1\">Value</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> LevelOrder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> queue <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Queue<span class=\"sy0\">&lt;</span>Node<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        queue<span class=\"sy0\">.</span><span class=\"me1\">Enqueue</span><span class=\"br0\">(</span><span class=\"kw1\">this</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>queue<span class=\"sy0\">.</span><span class=\"me1\">Any</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> node <span class=\"sy0\">=</span> queue<span class=\"sy0\">.</span><span class=\"me1\">Dequeue</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> node<span class=\"sy0\">.</span><span class=\"kw1\">Value</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>node<span class=\"sy0\">.</span><span class=\"me1\">Left</span> <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>                queue<span class=\"sy0\">.</span><span class=\"me1\">Enqueue</span><span class=\"br0\">(</span>node<span class=\"sy0\">.</span><span class=\"me1\">Left</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>node<span class=\"sy0\">.</span><span class=\"me1\">Right</span> <span class=\"sy0\">!=</span> <span class=\"kw1\">null</span><span class=\"br0\">)</span><br/>                queue<span class=\"sy0\">.</span><span class=\"me1\">Enqueue</span><span class=\"br0\">(</span>node<span class=\"sy0\">.</span><span class=\"me1\">Right</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> tree <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Node<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Node<span class=\"br0\">(</span><span class=\"nu0\">2</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Node<span class=\"br0\">(</span><span class=\"nu0\">4</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Node<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Node<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Node<span class=\"br0\">(</span><span class=\"nu0\">3</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Node<span class=\"br0\">(</span><span class=\"nu0\">6</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Node<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>, <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Node<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> traversal <span class=\"kw1\">in</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Func<span class=\"sy0\">&lt;</span>IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;&gt;</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"br0\">{</span> tree<span class=\"sy0\">.</span><span class=\"me1\">Preorder</span>, tree<span class=\"sy0\">.</span><span class=\"me1\">Inorder</span>, tree<span class=\"sy0\">.</span><span class=\"me1\">Postorder</span>, tree<span class=\"sy0\">.</span><span class=\"me1\">LevelOrder</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"{0}:<span class=\"es0\">\\t</span>{1}\"</span>, traversal<span class=\"sy0\">.</span><span class=\"me1\">Method</span><span class=\"sy0\">.</span><span class=\"me1\">Name</span>, <span class=\"kw4\">string</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, traversal<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 94, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;boost/scoped_ptr.hpp&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;queue&gt;</span><br/>\u00a0<br/><span class=\"kw2\">template</span><span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> T<span class=\"sy1\">&gt;</span><br/><span class=\"kw2\">class</span> TreeNode <span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>  TreeNode<span class=\"br0\">(</span><span class=\"kw4\">const</span> T<span class=\"sy3\">&amp;</span> n, TreeNode<span class=\"sy2\">*</span> left <span class=\"sy1\">=</span> <span class=\"kw2\">NULL</span>, TreeNode<span class=\"sy2\">*</span> right <span class=\"sy1\">=</span> <span class=\"kw2\">NULL</span><span class=\"br0\">)</span><br/>    <span class=\"sy4\">:</span> mValue<span class=\"br0\">(</span>n<span class=\"br0\">)</span>,<br/>      mLeft<span class=\"br0\">(</span>left<span class=\"br0\">)</span>,<br/>      mRight<span class=\"br0\">(</span>right<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>  T getValue<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> mValue<span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  TreeNode<span class=\"sy2\">*</span> left<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> mLeft.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  TreeNode<span class=\"sy2\">*</span> right<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> mRight.<span class=\"me1\">get</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> preorderTraverse<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">&lt;&lt;</span> getValue<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>mLeft<span class=\"br0\">)</span>  <span class=\"br0\">{</span> mLeft<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>preorderTraverse<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>  <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>mRight<span class=\"br0\">)</span> <span class=\"br0\">{</span> mRight<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>preorderTraverse<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> inorderTraverse<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>mLeft<span class=\"br0\">)</span>  <span class=\"br0\">{</span> mLeft<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>inorderTraverse<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>  <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">&lt;&lt;</span> getValue<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>mRight<span class=\"br0\">)</span> <span class=\"br0\">{</span> mRight<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>inorderTraverse<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> postorderTraverse<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>mLeft<span class=\"br0\">)</span>  <span class=\"br0\">{</span> mLeft<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>postorderTraverse<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>  <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>mRight<span class=\"br0\">)</span> <span class=\"br0\">{</span> mRight<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>postorderTraverse<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">&lt;&lt;</span> getValue<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw4\">void</span> levelorderTraverse<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">queue</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">const</span> TreeNode<span class=\"sy2\">*</span><span class=\"sy1\">&gt;</span> q<span class=\"sy4\">;</span><br/>    q.<span class=\"me1\">push</span><span class=\"br0\">(</span><span class=\"kw3\">this</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy3\">!</span>q.<span class=\"me1\">empty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw4\">const</span> TreeNode<span class=\"sy2\">*</span> n <span class=\"sy1\">=</span> q.<span class=\"me1\">front</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      q.<span class=\"me1\">pop</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">&lt;&lt;</span> n<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>getValue<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>left<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span> q.<span class=\"me1\">push</span><span class=\"br0\">(</span>n<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>left<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span>  <span class=\"br0\">}</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>right<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> q.<span class=\"me1\">push</span><span class=\"br0\">(</span>n<span class=\"sy2\">-</span><span class=\"sy1\">&gt;</span>right<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">protected</span><span class=\"sy4\">:</span><br/>  T mValue<span class=\"sy4\">;</span><br/>  boost<span class=\"sy4\">::</span><span class=\"me2\">scoped_ptr</span><span class=\"sy1\">&lt;</span>TreeNode<span class=\"sy1\">&gt;</span> mLeft<span class=\"sy4\">;</span><br/>  boost<span class=\"sy4\">::</span><span class=\"me2\">scoped_ptr</span><span class=\"sy1\">&lt;</span>TreeNode<span class=\"sy1\">&gt;</span> mRight<span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>  TreeNode<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  TreeNode<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> root<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<br/>    <span class=\"kw3\">new</span> TreeNode<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>,<br/>      <span class=\"kw3\">new</span> TreeNode<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">4</span>,<br/>        <span class=\"kw3\">new</span> TreeNode<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>      <span class=\"kw3\">new</span> TreeNode<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    <span class=\"kw3\">new</span> TreeNode<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">3</span>,<br/>      <span class=\"kw3\">new</span> TreeNode<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">6</span>,<br/>        <span class=\"kw3\">new</span> TreeNode<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>,<br/>        <span class=\"kw3\">new</span> TreeNode<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"preorder:   \"</span><span class=\"sy4\">;</span><br/>  root.<span class=\"me1\">preorderTraverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"inorder:    \"</span><span class=\"sy4\">;</span><br/>  root.<span class=\"me1\">inorderTraverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"postorder:  \"</span><span class=\"sy4\">;</span><br/>  root.<span class=\"me1\">postorderTraverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"level-order:\"</span><span class=\"sy4\">;</span><br/>  root.<span class=\"me1\">levelorderTraverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ceylon", "loc": 97, "block": "<pre class=\"text highlighted_source\">import ceylon.collection {<br/>\tArrayList<br/>}<br/>\u00a0<br/>shared void run() {<br/>\u00a0<br/>\tclass Node(label, left = null, right = null) {<br/>\t\tshared Integer label;<br/>\t\tshared Node? left;<br/>\t\tshared Node? right;<br/>\t\tstring =&gt; label.string;<br/>\t}<br/>\u00a0<br/>\tvoid preorder(Node node) {<br/>\t\tprocess.write(node.string + \" \");<br/>\t\tif(exists left = node.left) {<br/>\t\t\tpreorder(left);<br/>\t\t}<br/>\t\tif(exists right = node.right) {<br/>\t\t\tpreorder(right);<br/>\t\t}<br/>\t}<br/>\u00a0<br/>\tvoid inorder(Node node) {<br/>\t\tif(exists left = node.left) {<br/>\t\t\tinorder(left);<br/>\t\t}<br/>\t\tprocess.write(node.string + \" \");<br/>\t\tif(exists right = node.right) {<br/>\t\t\tinorder(right);<br/>\t\t}<br/>\t}<br/>\u00a0<br/>\tvoid postorder(Node node) {<br/>\t\tif(exists left = node.left) {<br/>\t\t\tpostorder(left);<br/>\t\t}<br/>\t\tif(exists right = node.right) {<br/>\t\t\tpostorder(right);<br/>\t\t}<br/>\t\tprocess.write(node.string + \" \");<br/>\t}<br/>\u00a0<br/>\tvoid levelOrder(Node node) {<br/>\t\tvalue nodes = ArrayList&lt;Node&gt; {node};<br/>\t\twhile(exists current = nodes.accept()) {<br/>\t\t\tprocess.write(current.string + \" \");<br/>\t\t\tif(exists left = current.left) {<br/>\t\t\t\tnodes.offer(left);<br/>\t\t\t}<br/>\t\t\tif(exists right = current.right) {<br/>\t\t\t\tnodes.offer(right);<br/>\t\t\t}<br/>\t\t}<br/>\t}<br/>\u00a0<br/>\tvalue tree = Node {<br/>\t\tlabel = 1;<br/>\t\tleft = Node {<br/>\t\t\tlabel = 2;<br/>\t\t\tleft = Node {<br/>\t\t\t\tlabel = 4;<br/>\t\t\t\tleft = Node {<br/>\t\t\t\t\tlabel = 7;<br/>\t\t\t\t};<br/>\t\t\t};<br/>\t\t\tright = Node {<br/>\t\t\t\tlabel = 5;<br/>\t\t\t};<br/>\t\t};<br/>\t\tright = Node {<br/>\t\t\tlabel = 3;<br/>\t\t\tleft = Node {<br/>\t\t\t\tlabel = 6;<br/>\t\t\t\tleft = Node {<br/>\t\t\t\t\tlabel = 8;<br/>\t\t\t\t};<br/>\t\t\t\tright = Node {<br/>\t\t\t\t\tlabel = 9;<br/>\t\t\t\t};<br/>\t\t\t};<br/>\t\t};<br/>\t};<br/>\u00a0<br/>\tprocess.write(\"preorder:   \");<br/>\tpreorder(tree);<br/>\tprint(\"\");<br/>\tprocess.write(\"inorder:    \");<br/>\tinorder(tree);<br/>\tprint(\"\");<br/>\tprocess.write(\"postorder:  \");<br/>\tpostorder(tree);<br/>\tprint(\"\");<br/>\tprocess.write(\"levelorder: \");<br/>\tlevelOrder(tree);<br/>\tprint(\"\");<br/>}</pre>"}, {"lang": "Clojure", "loc": 44, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> walk <span class=\"br0\">[</span>node f order<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">when</span> node<br/>   <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>o order<span class=\"br0\">]</span><br/>     <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> o\u00a0:<span class=\"me1\">visit</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>f <span class=\"br0\">(</span>:<span class=\"me1\">val</span> node<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>walk <span class=\"br0\">(</span>node o<span class=\"br0\">)</span> f order<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> preorder <span class=\"br0\">[</span>node f<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>walk node f <span class=\"br0\">[</span>:<span class=\"me1\">visit</span>\u00a0:<span class=\"me1\">left</span>\u00a0:<span class=\"me1\">right</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> inorder <span class=\"br0\">[</span>node f<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>walk node f <span class=\"br0\">[</span>:<span class=\"me1\">left</span>\u00a0:<span class=\"me1\">visit</span>\u00a0:<span class=\"me1\">right</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> postorder <span class=\"br0\">[</span>node f<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span>walk node f <span class=\"br0\">[</span>:<span class=\"me1\">left</span>\u00a0:<span class=\"me1\">right</span>\u00a0:<span class=\"me1\">visit</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> queue <span class=\"br0\">[</span><span class=\"sy0\">&amp;</span> xs<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>seq xs<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">apply</span> <span class=\"kw1\">conj</span> clojure<span class=\"sy0\">.</span>lang<span class=\"sy0\">.</span>PersistentQueue<span class=\"sy0\">/</span>EMPTY xs<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> level<span class=\"sy0\">-</span>order <span class=\"br0\">[</span>root f<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>q <span class=\"br0\">(</span>queue root<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">when-not</span> <span class=\"br0\">(</span><span class=\"kw1\">empty?</span> q<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if-let</span> <span class=\"br0\">[</span>node <span class=\"br0\">(</span><span class=\"kw1\">first</span> q<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">do</span><br/>          <span class=\"br0\">(</span>f <span class=\"br0\">(</span>:<span class=\"me1\">val</span> node<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span><span class=\"kw1\">conj</span> <span class=\"br0\">(</span>pop q<span class=\"br0\">)</span> <span class=\"br0\">(</span>:<span class=\"me1\">left</span> node<span class=\"br0\">)</span> <span class=\"br0\">(</span>:<span class=\"me1\">right</span> node<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>pop q<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> vec<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>tree <span class=\"br0\">[</span>t<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">vector?</span> t<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>val left right<span class=\"br0\">]</span> t<span class=\"br0\">]</span><br/>      <span class=\"br0\">{</span>:<span class=\"me1\">val</span> val<br/>      \u00a0:<span class=\"me1\">left</span> <span class=\"br0\">(</span>vec<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>tree left<span class=\"br0\">)</span><br/>      \u00a0:<span class=\"me1\">right</span> <span class=\"br0\">(</span>vec<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>tree right<span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>tree <span class=\"br0\">(</span>vec<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>tree <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span> <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>      fs   '<span class=\"br0\">[</span>preorder inorder postorder level<span class=\"sy0\">-</span>order<span class=\"br0\">]</span><br/>      pr<span class=\"sy0\">-</span>node #<span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"kw1\">format</span> <span class=\"st0\">\"%2d\"</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">doseq</span> <span class=\"br0\">[</span>f fs<span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">print</span> <span class=\"br0\">(</span><span class=\"kw1\">format</span> <span class=\"st0\">\"%-12s\"</span> <span class=\"br0\">(</span><span class=\"kw1\">str</span> f <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">(</span>resolve f<span class=\"br0\">)</span> tree pr<span class=\"sy0\">-</span>node<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>println<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CoffeeScript", "loc": 48, "block": "<pre class=\"coffeescript highlighted_source\">\u00a0<br/><span class=\"co1\"># In this example, we don't encapsulate binary trees as objects; instead, we have a</span><br/><span class=\"co1\"># convention on how to store them as arrays, and we namespace the functions that</span><br/><span class=\"co1\"># operate on those data structures.</span><br/>binary_tree =<br/>  preorder<span class=\"sy0\">:</span> <span class=\"br0\">(</span>tree<span class=\"sy0\">,</span> visit<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">unless</span> tree<span class=\"sy0\">?</span><br/>    <span class=\"br0\">[</span>node<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> right<span class=\"br0\">]</span> = tree<br/>    visit node<br/>    binary_tree.<span class=\"me1\">preorder</span> left<span class=\"sy0\">,</span> visit<br/>    binary_tree.<span class=\"me1\">preorder</span> right<span class=\"sy0\">,</span> visit<br/>\u00a0<br/>  inorder<span class=\"sy0\">:</span> <span class=\"br0\">(</span>tree<span class=\"sy0\">,</span> visit<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">unless</span> tree<span class=\"sy0\">?</span><br/>    <span class=\"br0\">[</span>node<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> right<span class=\"br0\">]</span> = tree<br/>    binary_tree.<span class=\"me1\">inorder</span> left<span class=\"sy0\">,</span> visit<br/>    visit node<br/>    binary_tree.<span class=\"me1\">inorder</span> right<span class=\"sy0\">,</span> visit<br/>\u00a0<br/>  postorder<span class=\"sy0\">:</span> <span class=\"br0\">(</span>tree<span class=\"sy0\">,</span> visit<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">unless</span> tree<span class=\"sy0\">?</span><br/>    <span class=\"br0\">[</span>node<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> right<span class=\"br0\">]</span> = tree<br/>    binary_tree.<span class=\"me1\">postorder</span> left<span class=\"sy0\">,</span> visit<br/>    binary_tree.<span class=\"me1\">postorder</span> right<span class=\"sy0\">,</span> visit<br/>    visit node<br/>\u00a0<br/>  levelorder<span class=\"sy0\">:</span> <span class=\"br0\">(</span>tree<span class=\"sy0\">,</span> visit<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    q = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    q.<span class=\"me1\">push</span> tree<br/>    <span class=\"kw1\">while</span> q.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>      t = q.<span class=\"me1\">shift</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">continue</span> <span class=\"kw1\">unless</span> t<span class=\"sy0\">?</span><br/>      <span class=\"br0\">[</span>node<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> right<span class=\"br0\">]</span> = t<br/>      visit node<br/>      q.<span class=\"me1\">push</span> left<br/>      q.<span class=\"me1\">push</span> right<br/>\u00a0<br/>do <span class=\"sy0\">-&gt;</span><br/>  tree = <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>  test_walk = <span class=\"br0\">(</span>walk_function_name<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    output = <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    binary_tree<span class=\"br0\">[</span>walk_function_name<span class=\"br0\">]</span> tree<span class=\"sy0\">,</span> output.<span class=\"me1\">push</span>.<span class=\"me1\">bind</span><span class=\"br0\">(</span>output<span class=\"br0\">)</span><br/>    console.<span class=\"me1\">log</span> walk_function_name<span class=\"sy0\">,</span> output.<span class=\"me1\">join</span> <span class=\"st0\">' '</span><br/>  test_walk <span class=\"st0\">\"preorder\"</span><br/>  test_walk <span class=\"st0\">\"inorder\"</span><br/>  test_walk <span class=\"st0\">\"postorder\"</span><br/>  test_walk <span class=\"st0\">\"levelorder\"</span><br/>\u00a0</pre>"}, {"lang": "Common Lisp", "loc": 38, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> preorder <span class=\"br0\">(</span>node f<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">when</span> node<br/>    <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f <span class=\"br0\">(</span>first node<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>preorder <span class=\"br0\">(</span>second node<span class=\"br0\">)</span> f<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>preorder <span class=\"br0\">(</span>third node<span class=\"br0\">)</span>  f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> inorder <span class=\"br0\">(</span>node f<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">when</span> node<br/>    <span class=\"br0\">(</span>inorder <span class=\"br0\">(</span>second node<span class=\"br0\">)</span> f<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f <span class=\"br0\">(</span>first node<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>inorder <span class=\"br0\">(</span>third node<span class=\"br0\">)</span>  f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> postorder <span class=\"br0\">(</span>node f<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">when</span> node<br/>    <span class=\"br0\">(</span>postorder <span class=\"br0\">(</span>second node<span class=\"br0\">)</span> f<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>postorder <span class=\"br0\">(</span>third node<span class=\"br0\">)</span>  f<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f <span class=\"br0\">(</span>first node<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> level-order <span class=\"br0\">(</span>node f<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop with level <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> node<span class=\"br0\">)</span><br/>        while level<br/>        <span class=\"kw1\">do</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> level <span class=\"br0\">(</span>loop for node in level<br/>                      <span class=\"kw1\">when</span> node<br/>                        <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> f <span class=\"br0\">(</span>first node<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                        <span class=\"kw1\">and</span> collect <span class=\"br0\">(</span>second node<span class=\"br0\">)</span><br/>                        <span class=\"kw1\">and</span> collect <span class=\"br0\">(</span>third node<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defparameter *tree* '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                            <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                         <span class=\"br0\">(</span><span class=\"nu0\">3</span> <span class=\"br0\">(</span><span class=\"nu0\">6</span> <span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>                               <span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> show <span class=\"br0\">(</span>traversal-<span class=\"kw1\">function</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"~&amp;~(~A~):~12,0T\"</span> traversal-<span class=\"kw1\">function</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">funcall</span> traversal-<span class=\"kw1\">function</span> *tree* <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span><span class=\"kw1\">value</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>format t <span class=\"st0\">\" ~A\"</span> <span class=\"kw1\">value</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>map <span class=\"kw1\">nil</span> #'show '<span class=\"br0\">(</span>preorder inorder postorder level-order<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Coq", "loc": 52, "block": "<pre class=\"text highlighted_source\">Require Import Utf8.<br/>Require Import List.<br/>\u00a0<br/>Unset Elimination Schemes.<br/>\u00a0<br/>(* Rose tree, with numbers on nodes *)<br/>Inductive tree\u00a0:= Tree { value\u00a0: nat\u00a0; children\u00a0: list tree }.<br/>\u00a0<br/>Fixpoint height (t: tree)\u00a0: nat\u00a0:=<br/>  1 + fold_left (\u03bb n t, max n (height t)) (children t) 0.<br/>\u00a0<br/>Example leaf n\u00a0: tree\u00a0:= {| value\u00a0:= n\u00a0; children\u00a0:= nil |}.<br/>\u00a0<br/>Example t2\u00a0: tree\u00a0:= {| value\u00a0:= 2\u00a0; children\u00a0:= {| value\u00a0:= 4\u00a0; children\u00a0:= leaf 7\u00a0:: nil |}\u00a0:: leaf 5\u00a0:: nil |}.<br/>\u00a0<br/>Example t3\u00a0: tree\u00a0:= {| value\u00a0:= 3\u00a0; children\u00a0:= {| value\u00a0:= 6\u00a0; children\u00a0:= leaf 8\u00a0:: leaf 9\u00a0:: nil |}\u00a0:: nil |}.<br/>\u00a0<br/>Example t9\u00a0: tree\u00a0:= {| value\u00a0:= 1\u00a0; children\u00a0:= t2\u00a0:: t3\u00a0:: nil |}.<br/>\u00a0<br/>Fixpoint preorder (t: tree)\u00a0: list nat\u00a0:=<br/>  let '{| value\u00a0:= n\u00a0; children\u00a0:= c |}\u00a0:= t in<br/>  n\u00a0:: flat_map preorder c.<br/>\u00a0<br/>Fixpoint inorder (t: tree)\u00a0: list nat\u00a0:=<br/>  let '{| value\u00a0:= n\u00a0; children\u00a0:= c |}\u00a0:= t in<br/>  match c with<br/>  | nil =&gt; n\u00a0:: nil<br/>  | \u2113\u00a0:: r =&gt; inorder \u2113 ++ n\u00a0:: flat_map inorder r<br/>  end.<br/>\u00a0<br/>Fixpoint postorder (t: tree)\u00a0: list nat\u00a0:=<br/>  let '{| value\u00a0:= n\u00a0; children\u00a0:= c |}\u00a0:= t in<br/>  flat_map postorder c ++ n\u00a0:: nil.<br/>\u00a0<br/>(* Auxiliary function for levelorder, which operates on forests *)<br/>(* Since the recursion is tricky, it relies on a fuel parameter which obviously decreases. *)<br/>Fixpoint levelorder_forest (fuel: nat) (f: list tree)\u00a0: list nat:=<br/>  match fuel with<br/>  | O =&gt; nil<br/>  | S fuel' =&gt;<br/>    let '(p, f)\u00a0:= fold_right (\u03bb t r, let '(x, f)\u00a0:= r in (value t\u00a0:: x, children t ++ f) ) (nil, nil) f in<br/>    p ++ levelorder_forest fuel' f<br/>  end.<br/>\u00a0<br/>Definition levelorder (t: tree)\u00a0: list nat\u00a0:=<br/>  levelorder_forest (height t) (t\u00a0:: nil).<br/>\u00a0<br/>Compute preorder t9.<br/>Compute inorder t9.<br/>Compute postorder t9.<br/>Compute levelorder t9.<br/>\u00a0</pre>"}, {"lang": "D", "loc": 77, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">traits</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">final</span> <span class=\"kw4\">class</span> Node<span class=\"br0\">(</span>T<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    T data<span class=\"sy0\">;</span><br/>    Node left<span class=\"sy0\">,</span> right<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">this</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T data<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Node left<span class=\"sy0\">=</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Node right<span class=\"sy0\">=</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">const</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">this</span>.<span class=\"me1\">data</span> <span class=\"sy0\">=</span> data<span class=\"sy0\">;</span><br/>        <span class=\"kw2\">this</span>.<span class=\"me1\">left</span> <span class=\"sy0\">=</span> left<span class=\"sy0\">;</span><br/>        <span class=\"kw2\">this</span>.<span class=\"me1\">right</span> <span class=\"sy0\">=</span> right<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// 'static' templated opCall can't be used in Node</span><br/><span class=\"kw4\">auto</span> node<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T data<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Node<span class=\"sy0\">!</span>T left<span class=\"sy0\">=</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span> <span class=\"kw2\">in</span> Node<span class=\"sy0\">!</span>T right<span class=\"sy0\">=</span><span class=\"kw2\">null</span><span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">new</span> <span class=\"kw4\">const</span><span class=\"br0\">(</span>Node<span class=\"sy0\">!</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span>data<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> right<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> show<span class=\"br0\">(</span>T<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw2\">in</span> T x<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    write<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">enum</span> Visit <span class=\"br0\">{</span> pre<span class=\"sy0\">,</span> inv<span class=\"sy0\">,</span> post <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// 'visitor' can be any kind of callable or it uses a default visitor.</span><br/><span class=\"co1\">// TNode can be any kind of Node, with data, left and right fields,</span><br/><span class=\"co1\">// so this is more generic than a member function of Node.</span><br/><span class=\"kw4\">void</span> backtrackingOrder<span class=\"br0\">(</span>Visit v<span class=\"sy0\">,</span> TNode<span class=\"sy0\">,</span> TyF<span class=\"sy0\">=</span><span class=\"kw4\">void</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span><span class=\"kw2\">in</span> TNode node<span class=\"sy0\">,</span> TyF visitor<span class=\"sy0\">=</span><span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">alias</span> trueVisitor <span class=\"sy0\">=</span> Select<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw2\">is</span><span class=\"br0\">(</span>TyF <span class=\"sy0\">==</span> <span class=\"kw4\">void</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> show<span class=\"sy0\">,</span> visitor<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>node <span class=\"sy0\">!</span><span class=\"kw2\">is</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>v <span class=\"sy0\">==</span> Visit.<span class=\"me1\">pre</span><span class=\"br0\">)</span><br/>            trueVisitor<span class=\"br0\">(</span>node.<span class=\"me1\">data</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        backtrackingOrder<span class=\"sy0\">!</span>v<span class=\"br0\">(</span>node.<span class=\"me1\">left</span><span class=\"sy0\">,</span> visitor<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>v <span class=\"sy0\">==</span> Visit.<span class=\"me1\">inv</span><span class=\"br0\">)</span><br/>            trueVisitor<span class=\"br0\">(</span>node.<span class=\"me1\">data</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        backtrackingOrder<span class=\"sy0\">!</span>v<span class=\"br0\">(</span>node.<span class=\"me1\">right</span><span class=\"sy0\">,</span> visitor<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">static</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>v <span class=\"sy0\">==</span> Visit.<span class=\"me1\">post</span><span class=\"br0\">)</span><br/>            trueVisitor<span class=\"br0\">(</span>node.<span class=\"me1\">data</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> levelOrder<span class=\"br0\">(</span>TNode<span class=\"sy0\">,</span> TyF<span class=\"sy0\">=</span><span class=\"kw4\">void</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw2\">in</span> TNode node<span class=\"sy0\">,</span> TyF visitor<span class=\"sy0\">=</span><span class=\"kw2\">null</span><span class=\"sy0\">,</span> <span class=\"kw4\">const</span><span class=\"br0\">(</span>TNode<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span> more<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">alias</span> trueVisitor <span class=\"sy0\">=</span> Select<span class=\"sy0\">!</span><span class=\"br0\">(</span><span class=\"kw2\">is</span><span class=\"br0\">(</span>TyF <span class=\"sy0\">==</span> <span class=\"kw4\">void</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> show<span class=\"sy0\">,</span> visitor<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>node <span class=\"sy0\">!</span><span class=\"kw2\">is</span> <span class=\"kw2\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        more <span class=\"sy0\">~=</span> <span class=\"br0\">[</span>node.<span class=\"me1\">left</span><span class=\"sy0\">,</span> node.<span class=\"me1\">right</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        trueVisitor<span class=\"br0\">(</span>node.<span class=\"me1\">data</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>more.<span class=\"me1\">length</span><span class=\"br0\">)</span><br/>        levelOrder<span class=\"br0\">(</span>more<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> visitor<span class=\"sy0\">,</span> more<span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> $<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">alias</span> N <span class=\"sy0\">=</span> node<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">const</span> tree <span class=\"sy0\">=</span> N<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                      N<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>                           N<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><br/>                                N<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                           N<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                      N<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><br/>                           N<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><br/>                                N<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                                N<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    write<span class=\"br0\">(</span><span class=\"st0\">\"  preOrder: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    tree.<span class=\"me1\">backtrackingOrder</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>Visit.<span class=\"me1\">pre</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    write<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>   inorder: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    tree.<span class=\"me1\">backtrackingOrder</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>Visit.<span class=\"me1\">inv</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    write<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span> postOrder: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    tree.<span class=\"me1\">backtrackingOrder</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>Visit.<span class=\"me1\">post</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    write<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>levelorder: \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    tree.<span class=\"me1\">levelOrder</span><span class=\"sy0\">;</span><br/>    writeln<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "E", "loc": 47, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> btree <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                         <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                     <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                 <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                         <span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                     <a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> backtrackingOrder<span class=\"br0\">(</span>node<span class=\"sy0\">,</span> pre<span class=\"sy0\">,</span> mid<span class=\"sy0\">,</span> post<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/switch\"><span class=\"kw1\">switch</span></a> <span class=\"br0\">(</span>node<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> <span class=\"sy0\">==</span><a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> <span class=\"br0\">[</span>value<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> right<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>            pre<span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>            backtrackingOrder<span class=\"br0\">(</span>left<span class=\"sy0\">,</span> pre<span class=\"sy0\">,</span> mid<span class=\"sy0\">,</span> post<span class=\"br0\">)</span><br/>            mid<span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>            backtrackingOrder<span class=\"br0\">(</span>right<span class=\"sy0\">,</span> pre<span class=\"sy0\">,</span> mid<span class=\"sy0\">,</span> post<span class=\"br0\">)</span><br/>            post<span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> levelOrder<span class=\"br0\">(</span>root<span class=\"sy0\">,</span> func<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> level <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>root<span class=\"br0\">]</span>.<span class=\"me1\">diverge</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://wiki.erights.org/wiki/while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>level.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/for\"><span class=\"kw1\">for</span></a> node <a href=\"http://wiki.erights.org/wiki/in\"><span class=\"kw2\">in</span></a> level.<span class=\"me1\">removeRun</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://wiki.erights.org/wiki/switch\"><span class=\"kw1\">switch</span></a> <span class=\"br0\">(</span>node<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> <span class=\"sy0\">==</span><a href=\"http://wiki.erights.org/wiki/null\"><span class=\"kw6\">null</span></a> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>                <a href=\"http://wiki.erights.org/wiki/match\"><span class=\"kw5\">match</span></a> <span class=\"br0\">[</span>value<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> right<span class=\"br0\">]</span> <span class=\"br0\">{</span><br/>                    func<span class=\"br0\">(</span>value<span class=\"br0\">)</span><br/>                    level.<span class=\"me1\">push</span><span class=\"br0\">(</span>left<span class=\"br0\">)</span><br/>                    level.<span class=\"me1\">push</span><span class=\"br0\">(</span>right<span class=\"br0\">)</span><br/><span class=\"br0\">}</span>   <span class=\"br0\">}</span>   <span class=\"br0\">}</span>   <span class=\"br0\">}</span>   <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\"preorder:   \"</span><span class=\"br0\">)</span><br/>backtrackingOrder<span class=\"br0\">(</span>btree<span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> v <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> v<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> _ <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> _ <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\"inorder:    \"</span><span class=\"br0\">)</span><br/>backtrackingOrder<span class=\"br0\">(</span>btree<span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> _ <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> v <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> v<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> _ <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\"postorder:  \"</span><span class=\"br0\">)</span><br/>backtrackingOrder<span class=\"br0\">(</span>btree<span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> _ <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> _ <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> v <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> v<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\"level-order:\"</span><span class=\"br0\">)</span><br/>levelOrder<span class=\"br0\">(</span>btree<span class=\"sy0\">,</span> <a href=\"http://wiki.erights.org/wiki/fn\"><span class=\"kw3\">fn</span></a> v <span class=\"br0\">{</span> <a href=\"http://wiki.erights.org/wiki/print\"><span class=\"kw7\">print</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> v<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><br/><a href=\"http://wiki.erights.org/wiki/println\"><span class=\"kw7\">println</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Eiffel", "loc": 51, "block": "<pre class=\"eiffel highlighted_source\">note<br/>\tdescription <span class=\"sy0\">:</span> <span class=\"st0\">\"Application for tree traversal demonstration\"</span><br/>        output      <span class=\"sy0\">:</span> <span class=\"st0\">\"[<br/>    \t                Prints preorder, inorder, postorder and levelorder traversal of an example binary tree.<br/>    \t\t      ]\"</span><br/>\tauthor\t    <span class=\"sy0\">:</span> <span class=\"st0\">\"Jascha Gr\u00fcbel\"</span><br/>\tdate        <span class=\"sy0\">:</span> <span class=\"st0\">\"$2014-01-07$\"</span><br/>\trevision    <span class=\"sy0\">:</span> <span class=\"st0\">\"$1.0$\"</span><br/>\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span> <span class=\"co1\">-- Initialization</span><br/>\u00a0<br/>\tmake<br/>\t\t\t<span class=\"co1\">-- Run Tree traversal example.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ttree<span class=\"sy0\">:</span>NODE<br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> tree.<span class=\"me1\">make</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\ttree.<span class=\"me1\">set_left_child</span> <span class=\"br0\">(</span><span class=\"kw2\">create</span> <span class=\"br0\">{</span>NODE<span class=\"br0\">}</span>.<span class=\"me1\">make</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\ttree.<span class=\"me1\">set_right_child</span> <span class=\"br0\">(</span><span class=\"kw2\">create</span> <span class=\"br0\">{</span>NODE<span class=\"br0\">}</span>.<span class=\"me1\">make</span> <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\ttree.<span class=\"me1\">left_child</span>.<span class=\"me1\">set_left_child</span> <span class=\"br0\">(</span><span class=\"kw2\">create</span> <span class=\"br0\">{</span>NODE<span class=\"br0\">}</span>.<span class=\"me1\">make</span> <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\ttree.<span class=\"me1\">left_child</span>.<span class=\"me1\">set_right_child</span> <span class=\"br0\">(</span><span class=\"kw2\">create</span> <span class=\"br0\">{</span>NODE<span class=\"br0\">}</span>.<span class=\"me1\">make</span> <span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\ttree.<span class=\"me1\">left_child</span>.<span class=\"me1\">left_child</span>.<span class=\"me1\">set_left_child</span> <span class=\"br0\">(</span><span class=\"kw2\">create</span> <span class=\"br0\">{</span>NODE<span class=\"br0\">}</span>.<span class=\"me1\">make</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\ttree.<span class=\"me1\">right_child</span>.<span class=\"me1\">set_left_child</span> <span class=\"br0\">(</span><span class=\"kw2\">create</span> <span class=\"br0\">{</span>NODE<span class=\"br0\">}</span>.<span class=\"me1\">make</span> <span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\ttree.<span class=\"me1\">right_child</span>.<span class=\"me1\">left_child</span>.<span class=\"me1\">set_left_child</span> <span class=\"br0\">(</span><span class=\"kw2\">create</span> <span class=\"br0\">{</span>NODE<span class=\"br0\">}</span>.<span class=\"me1\">make</span> <span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\ttree.<span class=\"me1\">right_child</span>.<span class=\"me1\">left_child</span>.<span class=\"me1\">set_right_child</span> <span class=\"br0\">(</span><span class=\"kw2\">create</span> <span class=\"br0\">{</span>NODE<span class=\"br0\">}</span>.<span class=\"me1\">make</span> <span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\t\tIo.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"preorder:   \"</span><span class=\"br0\">)</span><br/>\t\t\ttree.<span class=\"me1\">print_preorder</span><br/>\t\t\tIo.<span class=\"me1\">put_new_line</span><br/>\u00a0<br/>\t\t\tIo.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"inorder:    \"</span><span class=\"br0\">)</span><br/>\t\t\ttree.<span class=\"me1\">print_inorder</span><br/>\t\t\tIo.<span class=\"me1\">put_new_line</span><br/>\u00a0<br/>\t\t\tIo.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"postorder:  \"</span><span class=\"br0\">)</span><br/>\t\t\ttree.<span class=\"me1\">print_postorder</span><br/>\t\t\tIo.<span class=\"me1\">put_new_line</span><br/>\u00a0<br/>\t\t\tIo.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"level-order:\"</span><span class=\"br0\">)</span><br/>\t\t\ttree.<span class=\"me1\">print_levelorder</span><br/>\t\t\tIo.<span class=\"me1\">put_new_line</span><br/>\u00a0<br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span> <span class=\"co1\">-- class APPLICATION</span></pre>"}, {"lang": "Elena", "loc": 103, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import extensions'routines.<br/>import system'collections.<br/>\u00a0<br/>class Node<br/>{<br/>    type&lt;IntNumber&gt; rprop value\u00a0:: _value.<br/>    type&lt;Node&gt;      rprop left \u00a0:: _left.<br/>    type&lt;Node&gt;      rprop right\u00a0:: _right.<br/>\u00a0<br/>    constructor new(IntNumber value)<br/>    [<br/>        _value\u00a0:= value.<br/>    ]<br/>\u00a0<br/>    constructor new(IntNumber value, Node left)<br/>    [<br/>        _value\u00a0:= value.<br/>        _left\u00a0:= left.<br/>    ]    <br/>\u00a0<br/>    constructor new(IntNumber value, Node left, Node right)<br/>    [<br/>        _value\u00a0:= value.<br/>        _left\u00a0:=left.<br/>        _right\u00a0:=right.<br/>    ]<br/>\u00a0<br/>    Preorder = BaseEnumerable::<br/>    {<br/>        enumerator = CompoundEnumerator new(SingleEnumerable new(_value), _left Preorder \\ back:$nil, _right Preorder \\ back:$nil).<br/>    }.<br/>\u00a0<br/>    Inorder = BaseEnumerable::<br/>    {<br/>        enumerator<br/>        [<br/>            if ($nil\u00a0!= _left)<br/>            [<br/>                ^ CompoundEnumerator new(_left Inorder, SingleEnumerable new(_value), _right Inorder \\ back:$nil).<br/>            ];<br/>            [<br/>                ^ SingleEnumerable new(_value)<br/>            ]<br/>        ]<br/>    }.<br/>\u00a0<br/>    Postorder = BaseEnumerable::<br/>    {<br/>        enumerator<br/>        [<br/>            if ($nil == _left)<br/>            [<br/>                ^ SingleEnumerable new(_value)<br/>            ];<br/>            if ($nil == _right)<br/>            [<br/>                ^ CompoundEnumerator new(_left Postorder, SingleEnumerable new(_value)).<br/>            ];<br/>            [<br/>                ^ CompoundEnumerator new(_left Postorder, _right Postorder, SingleEnumerable new(_value)).<br/>            ]<br/>        ]<br/>    }.<br/>\u00a0<br/>    LevelOrder = BaseEnumerable::<br/>    {<br/>        queue&lt;Node&gt; queue\u00a0:= (queue&lt;Node&gt;(4)) push:$self.<br/>\u00a0<br/>        enumerator = Enumerator::<br/>        {<br/>            next = queue isNotEmpty.<br/>\u00a0<br/>            get<br/>            [<br/>                type&lt;Node&gt; item\u00a0:= queue pop.<br/>                type&lt;Node&gt; left\u00a0:= item left.<br/>                type&lt;Node&gt; right\u00a0:= item right.<br/>\u00a0<br/>                if ($nil\u00a0!= left)<br/>                [<br/>                    queue push(left).<br/>                ].<br/>                if ($nil\u00a0!= right)<br/>                [<br/>                    queue push(right).<br/>                ].<br/>\u00a0<br/>                ^ item value.<br/>            ]<br/>        }.<br/>    }.    <br/>}<br/>\u00a0<br/>program =<br/>[<br/>   var tree\u00a0:= Node new(1, Node new(2, Node new(4, Node new(7)), Node new(5)), Node new(3, Node new(6, Node new(8), Node new(9)))).<br/>\u00a0<br/>   console printLine(\"Preorder \u00a0:\", tree Preorder).<br/>   console printLine(\"Inorder  \u00a0:\", tree Inorder).<br/>   console printLine(\"Postorder\u00a0:\", tree Postorder).<br/>   console printLine(\"LevelOrder:\", tree LevelOrder).<br/>].</pre>"}, {"lang": "Elisa", "loc": 38, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>component BinaryTreeTraversals (Tree, Element);<br/>type Tree;<br/>type Node = Tree;<br/>     Tree (LeftTree = Tree, Element, RightTree = Tree) -&gt; Tree;<br/>     Leaf (Element)                                    -&gt; Node;<br/>     Node (Tree)                                       -&gt; Node;<br/>     Item (Node)                                       -&gt; Element;<br/>\u00a0<br/>     Preorder (Tree)                                   -&gt; multi (Node);<br/>     Inorder (Tree)                                    -&gt; multi (Node);<br/>     Postorder (Tree)                                  -&gt; multi (Node);<br/>     Level_order(Tree) \t\t                       -&gt; multi (Node);<br/>begin<br/>     Tree (Lefttree, Item, Righttree) = Tree: [ Lefttree; Item; Righttree ];<br/>     Leaf (anItem) = Tree (null(Tree), anItem, null(Tree) );<br/>     Node (aTree) = aTree;<br/>     Item (aNode) = aNode.Item;<br/>\u00a0<br/>     Preorder (=null(Tree)) = no(Tree);<br/>     Preorder (T) = ( T, Preorder (T.Lefttree), Preorder (T.Righttree));<br/>\u00a0<br/>     Inorder (=null(Tree)) = no(Tree);<br/>     Inorder (T) = ( Inorder (T.Lefttree), T, Inorder (T.Righttree));<br/>\u00a0<br/>     Postorder (=null(Tree)) = no(Tree);<br/>     Postorder (T) = ( Postorder (T.Lefttree), Postorder (T.Righttree), T);\t<br/>\u00a0<br/>     Level_order(T) = [ Queue = {T};<br/>\t\t\t node = Tree:items(Queue);<br/>\t\t\t   [ result(node);<br/>\t\t\t     add(Queue, node.Lefttree) when valid(node.Lefttree); \t<br/> \t\t\t     add(Queue, node.Righttree) when valid(node.Righttree); \t<br/>\t\t\t   ];<br/>\t\t\t no(Tree);<br/>\t\t       ];<br/>end component BinaryTreeTraversals;<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 56, "block": "<pre class=\"text highlighted_source\">defmodule Tree_Traversal do<br/>  defp tnode, do: {}<br/>  defp tnode(v), do: {:node, v, {}, {}}<br/>  defp tnode(v,l,r), do: {:node, v, l, r}<br/>\u00a0<br/>  defp preorder(_,{}), do:\u00a0:ok<br/>  defp preorder(f,{:node,v,l,r}) do<br/>    f.(v)<br/>    preorder(f,l)<br/>    preorder(f,r)<br/>  end<br/>\u00a0<br/>  defp inorder(_,{}), do:\u00a0:ok<br/>  defp inorder(f,{:node,v,l,r}) do<br/>    inorder(f,l)<br/>    f.(v)<br/>    inorder(f,r)<br/>  end<br/>\u00a0<br/>  defp postorder(_,{}), do:\u00a0:ok<br/>  defp postorder(f,{:node,v,l,r}) do<br/>    postorder(f,l)<br/>    postorder(f,r)<br/>    f.(v)<br/>  end<br/>\u00a0<br/>  defp levelorder(_, []), do: []<br/>  defp levelorder(f, [{}|t]), do: levelorder(f, t)<br/>  defp levelorder(f, [{:node,v,l,r}|t]) do<br/>    f.(v)<br/>    levelorder(f, t++[l,r])<br/>  end<br/>  defp levelorder(f, x), do: levelorder(f, [x])<br/>\u00a0<br/>  def main do<br/>    tree = tnode(1,<br/>                 tnode(2,<br/>                       tnode(4, tnode(7), tnode()),<br/>                       tnode(5, tnode(), tnode())),<br/>                 tnode(3,<br/>                       tnode(6, tnode(8), tnode(9)),<br/>                       tnode()))<br/>    f = fn x -&gt; IO.write \"#{x} \" end<br/>    IO.write \"preorder:   \"<br/>    preorder(f, tree)<br/>    IO.write \"\\ninorder:    \"<br/>    inorder(f, tree)<br/>    IO.write \"\\npostorder:  \"<br/>    postorder(f, tree)<br/>    IO.write \"\\nlevelorder: \"<br/>    levelorder(f, tree)<br/>    IO.puts \"\"<br/>  end<br/>end<br/>\u00a0<br/>Tree_Traversal.main</pre>"}, {"lang": "Erlang", "loc": 42, "block": "<pre class=\"erlang highlighted_source\"><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>tree_traversal<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>preorder<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> inorder<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> postorder<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> levelorder<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>tnode<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> tnode<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> tnode<span class=\"sy3\">/</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">define</span><span class=\"br0\">(</span><span class=\"re0\">NEWLINE</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~n\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">tnode</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/><span class=\"re3\">tnode</span><span class=\"br0\">(</span><span class=\"re5\">V</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"kw3\">node</span><span class=\"sy1\">,</span> <span class=\"re5\">V</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/><span class=\"re3\">tnode</span><span class=\"br0\">(</span><span class=\"re5\">V</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">R</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"kw3\">node</span><span class=\"sy1\">,</span> <span class=\"re5\">V</span><span class=\"sy1\">,</span> <span class=\"re5\">L</span><span class=\"sy1\">,</span> <span class=\"re5\">R</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">preorder</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">ok</span><span class=\"sy1\">;</span><br/><span class=\"re3\">preorder</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span><span class=\"br0\">{</span><span class=\"kw3\">node</span><span class=\"sy1\">,</span><span class=\"re5\">V</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">R</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <br/>    <span class=\"re5\">F</span><span class=\"br0\">(</span><span class=\"re5\">V</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">preorder</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">preorder</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span><span class=\"re5\">R</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">inorder</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">ok</span><span class=\"sy1\">;</span><br/><span class=\"re3\">inorder</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span><span class=\"br0\">{</span><span class=\"kw3\">node</span><span class=\"sy1\">,</span><span class=\"re5\">V</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">R</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">inorder</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">F</span><span class=\"br0\">(</span><span class=\"re5\">V</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">inorder</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span><span class=\"re5\">R</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">postorder</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">ok</span><span class=\"sy1\">;</span><br/><span class=\"re3\">postorder</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span><span class=\"br0\">{</span><span class=\"kw3\">node</span><span class=\"sy1\">,</span><span class=\"re5\">V</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">R</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re3\">postorder</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">postorder</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span><span class=\"re5\">R</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">F</span><span class=\"br0\">(</span><span class=\"re5\">V</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">levelorder</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"re3\">levelorder</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"br0\">}</span>|T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">levelorder</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re5\">T</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">levelorder</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"kw3\">node</span><span class=\"sy1\">,</span><span class=\"re5\">V</span><span class=\"sy1\">,</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">R</span><span class=\"br0\">}</span>|T<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">F</span><span class=\"br0\">(</span><span class=\"re5\">V</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">levelorder</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re5\">T</span><span class=\"sy3\">++</span><span class=\"br0\">[</span><span class=\"re5\">L</span><span class=\"sy1\">,</span><span class=\"re5\">R</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"re3\">levelorder</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">levelorder</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Tree</span> <span class=\"sy3\">=</span> <span class=\"re3\">tnode</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><br/>                 <span class=\"re3\">tnode</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><br/>                       <span class=\"re3\">tnode</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"re3\">tnode</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">tnode</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                       <span class=\"re3\">tnode</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"re3\">tnode</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">tnode</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                 <span class=\"re3\">tnode</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><br/>                       <span class=\"re3\">tnode</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"re3\">tnode</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">tnode</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>                       <span class=\"re3\">tnode</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">F</span> <span class=\"sy3\">=</span> <span class=\"kw1\">fun</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"~p \"</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">preorder</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>\u00a0?<span class=\"re4\">NEWLINE</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">inorder</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>\u00a0?<span class=\"re4\">NEWLINE</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">postorder</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>\u00a0?<span class=\"re4\">NEWLINE</span><span class=\"sy1\">,</span><br/>    <span class=\"re3\">levelorder</span><span class=\"br0\">(</span><span class=\"re5\">F</span><span class=\"sy1\">,</span> <span class=\"re5\">Tree</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>\u00a0?<span class=\"re4\">NEWLINE</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Euphoria", "loc": 67, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">constant</span> VALUE <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy2\">,</span> LEFT <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy2\">,</span> RIGHT <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><br/>\u00a0<br/><span class=\"kw1\">constant</span> tree <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><br/>                    <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy2\">,</span><br/>                        <span class=\"br0\">{</span><span class=\"nu0\">4</span><span class=\"sy2\">,</span><br/>                            <span class=\"br0\">{</span><span class=\"nu0\">7</span><span class=\"sy2\">,</span> <span class=\"nu0\">0</span><span class=\"sy2\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><br/>                            <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><br/>                        <span class=\"br0\">{</span><span class=\"nu0\">5</span><span class=\"sy2\">,</span> <span class=\"nu0\">0</span><span class=\"sy2\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><br/>                    <span class=\"br0\">{</span><span class=\"nu0\">3</span><span class=\"sy2\">,</span><br/>                        <span class=\"br0\">{</span><span class=\"nu0\">6</span><span class=\"sy2\">,</span><br/>                            <span class=\"br0\">{</span><span class=\"nu0\">8</span><span class=\"sy2\">,</span> <span class=\"nu0\">0</span><span class=\"sy2\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><br/>                            <span class=\"br0\">{</span><span class=\"nu0\">9</span><span class=\"sy2\">,</span> <span class=\"nu0\">0</span><span class=\"sy2\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy2\">,</span><br/>                        <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> preorder<span class=\"br0\">(</span><span class=\"kw2\">object</span> tree<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">sequence</span><span class=\"br0\">(</span>tree<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"%d \"</span><span class=\"sy2\">,</span><span class=\"br0\">{</span>tree<span class=\"br0\">[</span>VALUE<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        preorder<span class=\"br0\">(</span>tree<span class=\"br0\">[</span>LEFT<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        preorder<span class=\"br0\">(</span>tree<span class=\"br0\">[</span>RIGHT<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">procedure</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> inorder<span class=\"br0\">(</span><span class=\"kw2\">object</span> tree<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">sequence</span><span class=\"br0\">(</span>tree<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        inorder<span class=\"br0\">(</span>tree<span class=\"br0\">[</span>LEFT<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"%d \"</span><span class=\"sy2\">,</span><span class=\"br0\">{</span>tree<span class=\"br0\">[</span>VALUE<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>        inorder<span class=\"br0\">(</span>tree<span class=\"br0\">[</span>RIGHT<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">procedure</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> postorder<span class=\"br0\">(</span><span class=\"kw2\">object</span> tree<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">sequence</span><span class=\"br0\">(</span>tree<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        postorder<span class=\"br0\">(</span>tree<span class=\"br0\">[</span>LEFT<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        postorder<span class=\"br0\">(</span>tree<span class=\"br0\">[</span>RIGHT<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"%d \"</span><span class=\"sy2\">,</span><span class=\"br0\">{</span>tree<span class=\"br0\">[</span>VALUE<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">procedure</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> lo<span class=\"br0\">(</span><span class=\"kw2\">object</span> tree<span class=\"sy2\">,</span> <span class=\"kw2\">sequence</span> more<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">sequence</span><span class=\"br0\">(</span>tree<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        more <span class=\"sy1\">&amp;=</span> <span class=\"br0\">{</span>tree<span class=\"br0\">[</span>LEFT<span class=\"br0\">]</span><span class=\"sy2\">,</span>tree<span class=\"br0\">[</span>RIGHT<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>        <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"%d \"</span><span class=\"sy2\">,</span><span class=\"br0\">{</span>tree<span class=\"br0\">[</span>VALUE<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">if</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>more<span class=\"br0\">)</span> &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        lo<span class=\"br0\">(</span>more<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy2\">,</span>more<span class=\"br0\">[</span><span class=\"nu0\">2</span>..$<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">procedure</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> level_order<span class=\"br0\">(</span><span class=\"kw2\">object</span> tree<span class=\"br0\">)</span><br/>    lo<span class=\"br0\">(</span>tree<span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">procedure</span><br/>\u00a0<br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"preorder:    \"</span><span class=\"br0\">)</span><br/>preorder<span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"inorder:     \"</span><span class=\"br0\">)</span><br/>inorder<span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"postorder:   \"</span><span class=\"br0\">)</span><br/>postorder<span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"level-order: \"</span><span class=\"br0\">)</span><br/>level_order<span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 75, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/><span class=\"kw1\">open</span> System.<span class=\"me1\">IO</span><br/>\u00a0<br/><span class=\"kw1\">type</span> Tree<span class=\"sy0\">&lt;</span><span class=\"st0\">'a&gt; =<br/>   | Tree of '</span>a <span class=\"sy0\">*</span> Tree<span class=\"sy0\">&lt;</span><span class=\"st0\">'a&gt; * Tree&lt;'</span>a<span class=\"sy0\">&gt;</span><br/>   | Empty<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> inorder tree <span class=\"sy0\">=</span><br/>    <span class=\"kw4\">seq</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">match</span> tree <span class=\"kw1\">with</span><br/>          | Tree<span class=\"br0\">(</span>x, left, right<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>               <span class=\"kw1\">yield!</span> inorder left<br/>               <span class=\"kw1\">yield</span> x<br/>               <span class=\"kw1\">yield!</span> inorder right<br/>          | Empty <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span>   <br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> preorder tree <span class=\"sy0\">=</span><br/>    <span class=\"kw4\">seq</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">match</span> tree <span class=\"kw1\">with</span><br/>          | Tree<span class=\"br0\">(</span>x, left, right<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>               <span class=\"kw1\">yield</span> x<br/>               <span class=\"kw1\">yield!</span> preorder left<br/>               <span class=\"kw1\">yield!</span> preorder right<br/>          | Empty <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span>   <br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> postorder tree <span class=\"sy0\">=</span><br/>    <span class=\"kw4\">seq</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">match</span> tree <span class=\"kw1\">with</span><br/>          | Tree<span class=\"br0\">(</span>x, left, right<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>               <span class=\"kw1\">yield!</span> postorder left<br/>               <span class=\"kw1\">yield!</span> postorder right<br/>               <span class=\"kw1\">yield</span> x<br/>          | Empty <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span>   <br/>\u00a0<br/><span class=\"kw1\">let</span> levelorder tree <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop queue <span class=\"sy0\">=</span><br/>        <span class=\"kw4\">seq</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">match</span> queue <span class=\"kw1\">with</span><br/>            | <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>            | <span class=\"br0\">(</span>Empty::tail<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">yield!</span> loop tail<br/>            | <span class=\"br0\">(</span>Tree<span class=\"br0\">(</span>x, l, r<span class=\"br0\">)</span>::tail<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <br/>                <span class=\"kw1\">yield</span> x<br/>                <span class=\"kw1\">yield!</span> loop <span class=\"br0\">(</span>tail @ <span class=\"br0\">[</span>l<span class=\"sy0\">;</span> r<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/>    loop <span class=\"br0\">[</span>tree<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main _ <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> tree <span class=\"sy0\">=</span><br/>        Tree <span class=\"br0\">(</span><span class=\"nu0\">1</span>,<br/>              Tree <span class=\"br0\">(</span><span class=\"nu0\">2</span>,<br/>                    Tree <span class=\"br0\">(</span><span class=\"nu0\">4</span>,<br/>                          Tree <span class=\"br0\">(</span><span class=\"nu0\">7</span>, Empty, Empty<span class=\"br0\">)</span>,<br/>                          Empty<span class=\"br0\">)</span>,<br/>                    Tree <span class=\"br0\">(</span><span class=\"nu0\">5</span>, Empty, Empty<span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>              Tree <span class=\"br0\">(</span><span class=\"nu0\">3</span>,<br/>                    Tree <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<br/>                          Tree <span class=\"br0\">(</span><span class=\"nu0\">8</span>, Empty, Empty<span class=\"br0\">)</span>,<br/>                          Tree <span class=\"br0\">(</span><span class=\"nu0\">9</span>, Empty, Empty<span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>                    Empty<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">let</span> show x <span class=\"sy0\">=</span> printf <span class=\"st0\">\"%d \"</span> x<br/>\u00a0<br/>    printf <span class=\"st0\">\"preorder:    \"</span><br/>    preorder tree   <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> show<br/>    printf <span class=\"st0\">\"<span class=\"es0\">\\n</span>inorder:     \"</span><br/>    inorder tree    <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> show<br/>    printf <span class=\"st0\">\"<span class=\"es0\">\\n</span>postorder:   \"</span><br/>    postorder tree  <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> show<br/>    printf <span class=\"st0\">\"<span class=\"es0\">\\n</span>level-order: \"</span><br/>    levelorder tree <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">iter</span> show<br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Factor", "loc": 72, "block": "<pre class=\"text highlighted_source\">USING: accessors combinators deques dlists fry io kernel<br/>math.parser\u00a0;<br/>IN: rosetta.tree-traversal<br/>\u00a0<br/>TUPLE: node data left right\u00a0;<br/>\u00a0<br/>CONSTANT: example-tree<br/>    T{ node f 1<br/>        T{ node f 2<br/>            T{ node f 4<br/>                T{ node f 7 f f }<br/>                f<br/>            }<br/>            T{ node f 5 f f }<br/>        }<br/>        T{ node f 3<br/>            T{ node f 6<br/>                T{ node f 8 f f }<br/>                T{ node f 9 f f }<br/>            }<br/>            f<br/>        }<br/>    }<br/>\u00a0<br/>: preorder ( node quot: ( data -- ) -- )<br/>    [ [ data&gt;&gt; ] dip call ]<br/>    [ [ left&gt;&gt; ] dip over [ preorder ] [ 2drop ] if ]<br/>    [ [ right&gt;&gt; ] dip over [ preorder ] [ 2drop ] if ]<br/>    2tri\u00a0; inline recursive<br/>\u00a0<br/>: inorder ( node quot: ( data -- ) -- )<br/>    [ [ left&gt;&gt; ] dip over [ inorder ] [ 2drop ] if ]<br/>    [ [ data&gt;&gt; ] dip call ]<br/>    [ [ right&gt;&gt; ] dip over [ inorder ] [ 2drop ] if ]<br/>    2tri\u00a0; inline recursive<br/>\u00a0<br/>: postorder ( node quot: ( data -- ) -- )<br/>    [ [ left&gt;&gt; ] dip over [ postorder ] [ 2drop ] if ]<br/>    [ [ right&gt;&gt; ] dip over [ postorder ] [ 2drop ] if ]<br/>    [ [ data&gt;&gt; ] dip call ]<br/>    2tri\u00a0; inline recursive<br/>\u00a0<br/>: (levelorder) ( dlist quot: ( data -- ) -- )<br/>    over deque-empty? [ 2drop ] [<br/>        [ dup pop-front ] dip {<br/>            [ [ data&gt;&gt; ] dip call drop ]<br/>            [ drop left&gt;&gt; [ swap push-back ] [ drop ] if* ]<br/>            [ drop right&gt;&gt; [ swap push-back ] [ drop ] if* ]<br/>            [ nip (levelorder) ] <br/>        } 3cleave<br/>    ] if\u00a0; inline recursive<br/>\u00a0<br/>: levelorder ( node quot: ( data -- ) -- )<br/>    [ 1dlist ] dip (levelorder)\u00a0; inline<br/>\u00a0<br/>: levelorder2 ( node quot: ( data -- ) -- )<br/>    [ 1dlist ] dip<br/>    [ dup deque-empty? not ] swap '[<br/>        dup pop-front<br/>        [ data&gt;&gt; @ ]<br/>        [ left&gt;&gt; [ over push-back ] when* ]<br/>        [ right&gt;&gt; [ over push-back ] when* ] tri<br/>    ] while drop\u00a0; inline<br/>\u00a0<br/>: main ( -- )<br/>    example-tree [ number&gt;string write \" \" write ] {<br/>        [ \"preorder:    \" write preorder    nl ]<br/>        [ \"inorder:     \" write inorder     nl ]<br/>        [ \"postorder:   \" write postorder   nl ]<br/>        [ \"levelorder:  \" write levelorder  nl ]<br/>        [ \"levelorder2: \" write levelorder2 nl ]<br/>    } 2cleave\u00a0;</pre>"}, {"lang": "Fantom", "loc": 71, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>class Tree<br/>{<br/>  readonly Int label<br/>  readonly Tree? left<br/>  readonly Tree? right<br/>\u00a0<br/>  new make (Int label, Tree? left\u00a0:= null, Tree? right\u00a0:= null)<br/>  {<br/>    this.label = label<br/>    this.left = left<br/>    this.right = right<br/>  }<br/>\u00a0<br/>  Void preorder(|Int-&gt;Void| func)<br/>  {<br/>    func(label)<br/>    left?.preorder(func) //\u00a0?. will not call method if 'left' is null<br/>    right?.preorder(func)<br/>  }  <br/>\u00a0<br/>  Void postorder(|Int-&gt;Void| func)<br/>  {<br/>    left?.postorder(func)<br/>    right?.postorder(func)<br/>    func(label)<br/>  }  <br/>\u00a0<br/>  Void inorder(|Int-&gt;Void| func)<br/>  {<br/>    left?.inorder(func)<br/>    func(label)<br/>    right?.inorder(func)<br/>  }<br/>\u00a0<br/>  Void levelorder(|Int-&gt;Void| func)<br/>  {<br/>    Tree[] nodes\u00a0:= [this]<br/>    while (nodes.size &gt; 0)<br/>    {<br/>      Tree cur\u00a0:= nodes.removeAt(0)<br/>      func(cur.label)<br/>      if (cur.left\u00a0!= null) nodes.add (cur.left)<br/>      if (cur.right\u00a0!= null) nodes.add (cur.right)<br/>    }<br/>  }<br/>}<br/>\u00a0<br/>class Main<br/>{<br/>  public static Void main ()<br/>  {<br/>    tree\u00a0:= Tree(1,<br/>              Tree(2, Tree(4, Tree(7)), Tree(5)),<br/>              Tree(3, Tree(6, Tree(8), Tree(9))))<br/>    List result\u00a0:= [,]<br/>    collect\u00a0:= |Int a -&gt; Void| { result.add(a) }<br/>    tree.preorder(collect)<br/>    echo (\"preorder:    \" + result.join(\" \"))<br/>    result = [,]<br/>    tree.inorder(collect)<br/>    echo (\"inorder:     \" + result.join(\" \"))<br/>    result = [,]<br/>    tree.postorder(collect)<br/>    echo (\"postorder:   \" + result.join(\" \"))<br/>    result = [,]<br/>    tree.levelorder(collect)<br/>    echo (\"levelorder:  \" + result.join(\" \"))<br/>  }<br/>}<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 56, "block": "<pre class=\"text highlighted_source\">\\ binary tree (dictionary)<br/>: node ( l r data -- node ) here &gt;r , , , r&gt;\u00a0;<br/>: leaf ( data -- node ) 0 0 rot node\u00a0;<br/>\u00a0<br/>: &gt;data  ( node -- ) @\u00a0;<br/>: &gt;right ( node -- ) cell+ @\u00a0;<br/>: &gt;left  ( node -- ) cell+ cell+ @\u00a0;<br/>\u00a0<br/>: preorder ( xt tree -- )<br/>  dup 0= if 2drop exit then<br/>  2dup &gt;data swap execute<br/>  2dup &gt;left recurse<br/>       &gt;right recurse\u00a0;<br/>\u00a0<br/>: inorder ( xt tree -- )<br/>  dup 0= if 2drop exit then<br/>  2dup &gt;left recurse<br/>  2dup &gt;data swap execute<br/>       &gt;right recurse\u00a0;<br/>\u00a0<br/>: postorder ( xt tree -- )<br/>  dup 0= if 2drop exit then<br/>  2dup &gt;left recurse<br/>  2dup &gt;right recurse<br/>       &gt;data swap execute\u00a0;<br/>\u00a0<br/>: max-depth ( tree -- n )<br/>  dup 0= if exit then<br/>  dup  &gt;left recurse<br/>  swap &gt;right recurse max 1+\u00a0;<br/>\u00a0<br/>defer depthaction<br/>: depthorder ( depth tree -- )<br/>  dup 0= if 2drop exit then<br/>  over 0=<br/>  if   &gt;data depthaction drop<br/>  else over 1- over &gt;left  recurse<br/>       swap 1- swap &gt;right recurse<br/>  then\u00a0;<br/>\u00a0<br/>: levelorder ( xt tree -- )<br/>  swap is depthaction<br/>  dup max-depth 0\u00a0?do<br/>    i over depthorder<br/>  loop drop\u00a0;<br/>\u00a0<br/>7 leaf 0      4 node<br/>              5 leaf 2 node<br/>8 leaf 9 leaf 6 node<br/>              0      3 node 1 node value tree<br/>\u00a0<br/>cr ' . tree preorder    \\ 1 2 4 7 5 3 6 8 9<br/>cr ' . tree inorder     \\ 7 4 2 5 1 8 6 9 3<br/>cr ' . tree postorder   \\ 7 4 5 2 8 9 6 3 1<br/>cr tree max-depth .     \\ 4<br/>cr ' . tree levelorder  \\ 1 2 3 4 5 6 7 8 9</pre>"}, {"lang": "Fortran", "loc": 6, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>STYLE.<span class=\"me1\">EQ</span>.<span class=\"st0\">\"PRE\"</span><span class=\"br0\">)</span>  <span class=\"kw1\">CALL</span> <span class=\"kw3\">OUT</span><span class=\"br0\">(</span>HAS<span class=\"br0\">)</span><br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>LINKL<span class=\"br0\">(</span>HAS<span class=\"br0\">)</span>.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> TARZAN<span class=\"br0\">(</span>LINKL<span class=\"br0\">(</span>HAS<span class=\"br0\">)</span>,STYLE<span class=\"br0\">)</span><br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>STYLE.<span class=\"me1\">EQ</span>.<span class=\"st0\">\"IN\"</span><span class=\"br0\">)</span>   <span class=\"kw1\">CALL</span> <span class=\"kw3\">OUT</span><span class=\"br0\">(</span>HAS<span class=\"br0\">)</span><br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>LINKR<span class=\"br0\">(</span>HAS<span class=\"br0\">)</span>.<span class=\"me1\">GT</span>.0<span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> TARZAN<span class=\"br0\">(</span>LINKR<span class=\"br0\">(</span>HAS<span class=\"br0\">)</span>,STYLE<span class=\"br0\">)</span><br/>      <span class=\"kw1\">IF</span> <span class=\"br0\">(</span>STYLE.<span class=\"me1\">EQ</span>.<span class=\"st0\">\"POST\"</span><span class=\"br0\">)</span> <span class=\"kw1\">CALL</span> <span class=\"kw3\">OUT</span><span class=\"br0\">(</span>HAS<span class=\"br0\">)</span></pre>"}, {"lang": "FunL", "loc": 36, "block": "<pre class=\"text highlighted_source\">data Tree = Empty | Node( value, left, right )<br/>\u00a0<br/>def<br/>  preorder( Empty )          =  []<br/>  preorder( Node(v, l, r) )  =  [v] + preorder( l ) + preorder( r )<br/>\u00a0<br/>  inorder( Empty )           =  []<br/>  inorder( Node(v, l, r) )   =  inorder( l ) + [v] + inorder( r )<br/>\u00a0<br/>  postorder( Empty )         =  []<br/>  postorder( Node(v, l, r) ) =  postorder( l ) + postorder( r ) + [v]<br/>\u00a0<br/>  levelorder( x ) =<br/>    def<br/>      order( [] )                 =  []<br/>      order( Empty        \u00a0: xs ) =  order( xs )<br/>      order( Node(v, l, r)\u00a0: xs ) =  v\u00a0: order( xs + [l, r] )<br/>\u00a0<br/>    order( [x] )<br/>\u00a0<br/>tree =    Node( 1,<br/>            Node( 2,<br/>              Node( 4,<br/>                Node( 7, Empty, Empty ),<br/>                Empty ),<br/>              Node( 5, Empty, Empty ) ),<br/>            Node( 3,<br/>              Node( 6,<br/>                Node( 8, Empty, Empty ),<br/>                Node( 9, Empty, Empty ) ),<br/>              Empty ) )<br/>\u00a0<br/>println( preorder(tree) )<br/>println( inorder(tree) )<br/>println( postorder(tree) )<br/>println( levelorder(tree) )</pre>"}, {"lang": "GFA Basic", "loc": 118, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>maxnodes%=100\u00a0! set a limit to size of tree<br/>content%=0\u00a0! index of content field<br/>left%=1\u00a0! index of left tree<br/>right%=2\u00a0! index of right tree<br/>DIM tree%(maxnodes%,3)\u00a0! create space for tree<br/>'<br/>OPENW 1<br/>CLEARW 1<br/>'<br/>@create_tree<br/>PRINT \"Preorder:   \";<br/>@preorder_traversal(1)<br/>PRINT \"\"<br/>PRINT \"Inorder:    \";<br/>@inorder_traversal(1)<br/>PRINT \"\"<br/>PRINT \"Postorder:  \";<br/>@postorder_traversal(1)<br/>PRINT \"\"<br/>PRINT \"Levelorder: \";<br/>@levelorder_traversal(1)<br/>PRINT \"\"<br/>'<br/>~INP(2)<br/>CLOSEW 1<br/>'<br/>' Define the example tree<br/>'<br/>PROCEDURE create_tree<br/>  tree%(1,content%)=1<br/>  tree%(1,left%)=2<br/>  tree%(1,right%)=3<br/>  tree%(2,content%)=2<br/>  tree%(2,left%)=4<br/>  tree%(2,right%)=5<br/>  tree%(3,content%)=3<br/>  tree%(3,left%)=6<br/>  tree%(3,right%)=0\u00a0! 0 is used for no subtree<br/>  tree%(4,content%)=4<br/>  tree%(4,left%)=7<br/>  tree%(4,right%)=0<br/>  tree%(5,content%)=5<br/>  tree%(5,left%)=0<br/>  tree%(5,right%)=0<br/>  tree%(6,content%)=6<br/>  tree%(6,left%)=8<br/>  tree%(6,right%)=9<br/>  tree%(7,content%)=7<br/>  tree%(7,left%)=0<br/>  tree%(7,right%)=0<br/>  tree%(8,content%)=8<br/>  tree%(8,left%)=0<br/>  tree%(8,right%)=0<br/>  tree%(9,content%)=9<br/>  tree%(9,left%)=0<br/>  tree%(9,right%)=0<br/>RETURN<br/>'<br/>' Preorder traversal from given node<br/>'<br/>PROCEDURE preorder_traversal(node%)<br/>  IF node%&lt;&gt;0\u00a0! 0 means there is no node<br/>    PRINT tree%(node%,content%);<br/>    preorder_traversal(tree%(node%,left%))<br/>    preorder_traversal(tree%(node%,right%))<br/>  ENDIF<br/>RETURN<br/>'<br/>' Postorder traversal from given node<br/>'<br/>PROCEDURE postorder_traversal(node%)<br/>  IF node%&lt;&gt;0\u00a0! 0 means there is no node<br/>    postorder_traversal(tree%(node%,left%))<br/>    postorder_traversal(tree%(node%,right%))<br/>    PRINT tree%(node%,content%);<br/>  ENDIF<br/>RETURN<br/>'<br/>' Inorder traversal from given node<br/>'<br/>PROCEDURE inorder_traversal(node%)<br/>  IF node%&lt;&gt;0\u00a0! 0 means there is no node<br/>    inorder_traversal(tree%(node%,left%))<br/>    PRINT tree%(node%,content%);<br/>    inorder_traversal(tree%(node%,right%))<br/>  ENDIF<br/>RETURN<br/>'<br/>' Level order traversal from given node<br/>'<br/>PROCEDURE levelorder_traversal(node%)<br/>  LOCAL nodes%,first_free%,current%<br/>  '<br/>  ' Set up initial queue of nodes<br/>  '<br/>  DIM nodes%(maxnodes%)\u00a0! some working space to store queue of nodes<br/>  current%=1<br/>  nodes%(current%)=node%<br/>  first_free%=current%+1<br/>  '<br/>  WHILE nodes%(current%)&lt;&gt;0<br/>    ' add the children of current node onto queue<br/>    IF tree%(nodes%(current%),left%)&lt;&gt;0<br/>      nodes%(first_free%)=tree%(nodes%(current%),left%)<br/>      first_free%=first_free%+1<br/>    ENDIF<br/>    IF tree%(nodes%(current%),right%)&lt;&gt;0<br/>      nodes%(first_free%)=tree%(nodes%(current%),right%)<br/>      first_free%=first_free%+1<br/>    ENDIF<br/>    ' print the current node content<br/>    PRINT tree%(nodes%(current%),content%);<br/>    ' advance to next node<br/>    current%=current%+1<br/>  WEND<br/>RETURN<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 86, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">type</span> node <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    value       <span class=\"kw4\">int</span><br/>    left<span class=\"sy1\">,</span> right <span class=\"sy3\">*</span>node<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>n <span class=\"sy3\">*</span>node<span class=\"sy1\">)</span> iterPreorder<span class=\"sy1\">(</span>visit <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">))</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    visit<span class=\"sy1\">(</span>n<span class=\"sy3\">.</span>value<span class=\"sy1\">)</span><br/>    n<span class=\"sy3\">.</span>left<span class=\"sy3\">.</span>iterPreorder<span class=\"sy1\">(</span>visit<span class=\"sy1\">)</span><br/>    n<span class=\"sy3\">.</span>right<span class=\"sy3\">.</span>iterPreorder<span class=\"sy1\">(</span>visit<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>n <span class=\"sy3\">*</span>node<span class=\"sy1\">)</span> iterInorder<span class=\"sy1\">(</span>visit <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">))</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    n<span class=\"sy3\">.</span>left<span class=\"sy3\">.</span>iterInorder<span class=\"sy1\">(</span>visit<span class=\"sy1\">)</span><br/>    visit<span class=\"sy1\">(</span>n<span class=\"sy3\">.</span>value<span class=\"sy1\">)</span><br/>    n<span class=\"sy3\">.</span>right<span class=\"sy3\">.</span>iterInorder<span class=\"sy1\">(</span>visit<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>n <span class=\"sy3\">*</span>node<span class=\"sy1\">)</span> iterPostorder<span class=\"sy1\">(</span>visit <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">))</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    n<span class=\"sy3\">.</span>left<span class=\"sy3\">.</span>iterPostorder<span class=\"sy1\">(</span>visit<span class=\"sy1\">)</span><br/>    n<span class=\"sy3\">.</span>right<span class=\"sy3\">.</span>iterPostorder<span class=\"sy1\">(</span>visit<span class=\"sy1\">)</span><br/>    visit<span class=\"sy1\">(</span>n<span class=\"sy3\">.</span>value<span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> <span class=\"sy1\">(</span>n <span class=\"sy3\">*</span>node<span class=\"sy1\">)</span> iterLevelorder<span class=\"sy1\">(</span>visit <span class=\"kw4\">func</span><span class=\"sy1\">(</span><span class=\"kw4\">int</span><span class=\"sy1\">))</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy3\">==</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">for</span> queue <span class=\"sy2\">:=</span> <span class=\"sy1\">[]</span><span class=\"sy3\">*</span>node<span class=\"sy1\">{</span>n<span class=\"sy1\">};</span> <span class=\"sy1\">;</span> <span class=\"sy1\">{</span><br/>        n <span class=\"sy2\">=</span> queue<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span><br/>        visit<span class=\"sy1\">(</span>n<span class=\"sy3\">.</span>value<span class=\"sy1\">)</span><br/>        <span class=\"kw3\">copy</span><span class=\"sy1\">(</span>queue<span class=\"sy1\">,</span> queue<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">:])</span><br/>        queue <span class=\"sy2\">=</span> queue<span class=\"sy1\">[:</span><span class=\"kw3\">len</span><span class=\"sy1\">(</span>queue<span class=\"sy1\">)</span><span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span><br/>        <span class=\"kw1\">if</span> n<span class=\"sy3\">.</span>left <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            queue <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>queue<span class=\"sy1\">,</span> n<span class=\"sy3\">.</span>left<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> n<span class=\"sy3\">.</span>right <span class=\"sy2\">!=</span> <span class=\"kw2\">nil</span> <span class=\"sy1\">{</span><br/>            queue <span class=\"sy2\">=</span> append<span class=\"sy1\">(</span>queue<span class=\"sy1\">,</span> n<span class=\"sy3\">.</span>right<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>queue<span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    tree <span class=\"sy2\">:=</span> &amp;node<span class=\"sy1\">{</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><br/>        &amp;node<span class=\"sy1\">{</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span><br/>            &amp;node<span class=\"sy1\">{</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span><br/>                &amp;node<span class=\"sy1\">{</span><span class=\"nu0\">7</span><span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">},</span><br/>                <span class=\"kw2\">nil</span><span class=\"sy1\">},</span><br/>            &amp;node<span class=\"sy1\">{</span><span class=\"nu0\">5</span><span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">}},</span><br/>        &amp;node<span class=\"sy1\">{</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span><br/>            &amp;node<span class=\"sy1\">{</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span><br/>                &amp;node<span class=\"sy1\">{</span><span class=\"nu0\">8</span><span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">},</span><br/>                &amp;node<span class=\"sy1\">{</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">,</span> <span class=\"kw2\">nil</span><span class=\"sy1\">}},</span><br/>            <span class=\"kw2\">nil</span><span class=\"sy1\">}}</span><br/>    fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"preorder:    \"</span><span class=\"sy1\">)</span><br/>    tree<span class=\"sy3\">.</span><span class=\"me1\">iterPreorder</span><span class=\"sy1\">(</span>visitor<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Print</span><span class=\"sy1\">(</span><span class=\"st0\">\"inorder:     \"</span><span class=\"sy1\">)</span> <br/>    tree<span class=\"sy3\">.</span><span class=\"me1\">iterInorder</span><span class=\"sy1\">(</span>visitor<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Print</span><span class=\"sy1\">(</span><span class=\"st0\">\"postorder:   \"</span><span class=\"sy1\">)</span><br/>    tree<span class=\"sy3\">.</span><span class=\"me1\">iterPostorder</span><span class=\"sy1\">(</span>visitor<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Println</span><span class=\"sy1\">()</span> <br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Print</span><span class=\"sy1\">(</span><span class=\"st0\">\"level-order: \"</span><span class=\"sy1\">)</span><br/>    tree<span class=\"sy3\">.</span>iterLevelorder<span class=\"sy1\">(</span>visitor<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">()</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> visitor<span class=\"sy1\">(</span>value <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>value<span class=\"sy1\">,</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 35, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> preorder<span class=\"sy0\">;</span><br/>preorder <span class=\"sy0\">=</span> <span class=\"br0\">{</span> Node node <span class=\"sy0\">-&gt;</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">[</span>node<span class=\"br0\">]</span> <span class=\"sy0\">+</span> node.<span class=\"me1\">children</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> preorder<span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20flatten\"><span class=\"kw5\">flatten</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> postorder<span class=\"sy0\">;</span><br/>postorder <span class=\"sy0\">=</span> <span class=\"br0\">{</span> Node node <span class=\"sy0\">-&gt;</span><br/>    <span class=\"br0\">(</span>node.<span class=\"me1\">children</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> postorder<span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"sy0\">+</span> <span class=\"br0\">[</span>node<span class=\"br0\">]</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20flatten\"><span class=\"kw5\">flatten</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> inorder<span class=\"sy0\">;</span><br/>inorder <span class=\"sy0\">=</span> <span class=\"br0\">{</span> Node node <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> kids <span class=\"sy0\">=</span> node.<span class=\"me1\">children</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>kids.<span class=\"me1\">empty</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>node<span class=\"br0\">]</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20else\"><span class=\"kw1\">else</span></a> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>kids.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span>  kids<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"st0\">'@right'</span><span class=\"br0\">)</span> <span class=\"br0\">[</span>node<span class=\"br0\">]</span> <span class=\"sy0\">+</span> inorder<span class=\"br0\">(</span>kids<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20else\"><span class=\"kw1\">else</span></a> inorder<span class=\"br0\">(</span>kids<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"br0\">[</span>node<span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"br0\">(</span>kids.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span> <span class=\"sy0\">?</span> inorder<span class=\"br0\">(</span>kids<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>\u00a0: <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> levelorder <span class=\"sy0\">=</span> <span class=\"br0\">{</span> Node node <span class=\"sy0\">-&gt;</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> nodeList <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> level <span class=\"sy0\">=</span> <span class=\"br0\">[</span>node<span class=\"br0\">]</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"sy0\">!</span>level.<span class=\"me1\">empty</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        nodeList <span class=\"sy0\">+=</span> level<br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> nextLevel <span class=\"sy0\">=</span> level.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect\"><span class=\"kw5\">collect</span></a> <span class=\"br0\">{</span> it.<span class=\"me1\">children</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20flatten\"><span class=\"kw5\">flatten</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        level <span class=\"sy0\">=</span> nextLevel<br/>    <span class=\"br0\">}</span><br/>    nodeList<br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20class\"><span class=\"kw2\">class</span></a> BinaryNodeBuilder <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20extends\"><span class=\"kw2\">extends</span></a> NodeBuilder <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20protected\"><span class=\"kw2\">protected</span></a> <a href=\"http://www.google.de/search?as_q=Object&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Object</span></a> postNodeCompletion<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=Object&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Object</span></a> parent, <a href=\"http://www.google.de/search?as_q=Object&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Object</span></a> node<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert\"><span class=\"kw2\">assert</span></a> node.<span class=\"me1\">children</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20size\"><span class=\"kw5\">size</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span><br/>        node<br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Haskell", "loc": 55, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">data</span> Tree a<br/>  <span class=\"sy0\">=</span> Empty<br/>  <span class=\"sy0\">|</span> Node <span class=\"br0\">{</span> value <span class=\"sy0\">::</span> a<br/>         <span class=\"sy0\">,</span> left <span class=\"sy0\">::</span> Tree a<br/>         <span class=\"sy0\">,</span> right <span class=\"sy0\">::</span> Tree a<span class=\"br0\">}</span><br/>\u00a0<br/>preorder<span class=\"sy0\">,</span> inorder<span class=\"sy0\">,</span> postorder<span class=\"sy0\">,</span> levelorder <span class=\"sy0\">::</span> Tree a <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span>a<span class=\"br0\">]</span><br/>preorder Empty <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>preorder <span class=\"br0\">(</span>Node v l r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> v\u00a0: preorder l <span class=\"sy0\">++</span> preorder r<br/>\u00a0<br/>inorder Empty <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>inorder <span class=\"br0\">(</span>Node v l r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> inorder l <span class=\"sy0\">++</span> <span class=\"br0\">(</span>v\u00a0: inorder r<span class=\"br0\">)</span><br/>\u00a0<br/>postorder Empty <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>postorder <span class=\"br0\">(</span>Node v l r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> postorder l <span class=\"sy0\">++</span> postorder r <span class=\"sy0\">++</span> <span class=\"br0\">[</span>v<span class=\"br0\">]</span><br/>\u00a0<br/>levelorder x <span class=\"sy0\">=</span> loop <span class=\"br0\">[</span>x<span class=\"br0\">]</span><br/>  <span class=\"kw1\">where</span><br/>    loop <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>    loop <span class=\"br0\">(</span>Empty:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> loop xs<br/>    loop <span class=\"br0\">(</span>Node v l r:xs<span class=\"br0\">)</span> <span class=\"sy0\">=</span> v\u00a0: loop <span class=\"br0\">(</span>xs <span class=\"sy0\">++</span> <span class=\"br0\">[</span>l<span class=\"sy0\">,</span> r<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- TEST --------------------------------------------------------------</span><br/>tree <span class=\"sy0\">::</span> Tree <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>tree <span class=\"sy0\">=</span><br/>  Node<br/>    <span class=\"nu0\">1</span><br/>    <span class=\"br0\">(</span>Node <span class=\"nu0\">2</span> <span class=\"br0\">(</span>Node <span class=\"nu0\">4</span> <span class=\"br0\">(</span>Node <span class=\"nu0\">7</span> Empty Empty<span class=\"br0\">)</span> Empty<span class=\"br0\">)</span> <span class=\"br0\">(</span>Node <span class=\"nu0\">5</span> Empty Empty<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>Node <span class=\"nu0\">3</span> <span class=\"br0\">(</span>Node <span class=\"nu0\">6</span> <span class=\"br0\">(</span>Node <span class=\"nu0\">8</span> Empty Empty<span class=\"br0\">)</span> <span class=\"br0\">(</span>Node <span class=\"nu0\">9</span> Empty Empty<span class=\"br0\">)</span><span class=\"br0\">)</span> Empty<span class=\"br0\">)</span><br/>\u00a0<br/>asciiTree <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>asciiTree <span class=\"sy0\">=</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unlines\"><span class=\"kw3\">unlines</span></a><br/>    <span class=\"br0\">[</span> <span class=\"st0\">\"         1\"</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"        / <span class=\"es0\">\\\\</span>\"</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"       /   <span class=\"es0\">\\\\</span>\"</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"      /     <span class=\"es0\">\\\\</span>\"</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"     2       3\"</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"    / <span class=\"es0\">\\\\</span>     /\"</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"   4   5   6\"</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\"  /       / <span class=\"es0\">\\\\</span>\"</span><br/>    <span class=\"sy0\">,</span> <span class=\"st0\">\" 7       8   9\"</span><br/>    <span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- OUTPUT --------------------------------------------------------------</span><br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> asciiTree<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span><br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a><br/>      <span class=\"br0\">(</span>\\s xs <span class=\"sy0\">-&gt;</span> justifyLeft <span class=\"nu0\">14</span> <span class=\"st0\">' '</span> <span class=\"br0\">(</span>s <span class=\"sy0\">++</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:unwords\"><span class=\"kw3\">unwords</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"sy0\">&lt;$&gt;</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">[</span><span class=\"st0\">\"preorder\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"inorder\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"postorder\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"level-order\"</span><span class=\"br0\">]</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">[</span>preorder<span class=\"sy0\">,</span> inorder<span class=\"sy0\">,</span> postorder<span class=\"sy0\">,</span> levelorder<span class=\"br0\">]</span> <span class=\"sy0\">&lt;*&gt;</span> <span class=\"br0\">[</span>tree<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    justifyLeft n c s <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> n <span class=\"br0\">(</span>s <span class=\"sy0\">++</span> replicate n c<span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 32, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    bTree <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    showTree<span class=\"br0\">(</span>bTree<span class=\"sy1\">,</span> preorder<span class=\"sy1\">|</span>inorder<span class=\"sy1\">|</span>postorder<span class=\"sy1\">|</span>levelorder<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> showTree<span class=\"br0\">(</span>tree<span class=\"sy1\">,</span> f<span class=\"br0\">)</span><br/>    <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"kw4\">image</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"st0\">\":<span class=\"es0\">\\t</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">,</span>f<span class=\"br0\">(</span>tree<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> preorder<span class=\"br0\">(</span>L<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy1\">\\</span>L <span class=\"kw1\">then</span> <span class=\"kw1\">suspend</span> L <span class=\"sy1\">|</span> preorder<span class=\"br0\">(</span>L<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">|</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> inorder<span class=\"br0\">(</span>L<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy1\">\\</span>L <span class=\"kw1\">then</span> <span class=\"kw1\">suspend</span> inorder<span class=\"br0\">(</span>L<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> L <span class=\"sy1\">|</span> inorder<span class=\"br0\">(</span>L<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> postorder<span class=\"br0\">(</span>L<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy1\">\\</span>L <span class=\"kw1\">then</span> <span class=\"kw1\">suspend</span> postorder<span class=\"br0\">(</span>L<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">|</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> L<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> levelorder<span class=\"br0\">(</span>L<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy1\">\\</span>L <span class=\"kw1\">then</span> <span class=\"br0\">{</span><br/>        queue <span class=\"sy1\">:=</span> <span class=\"br0\">[</span>L<span class=\"br0\">]</span><br/>        <span class=\"kw1\">while</span> nextnode <span class=\"sy1\">:=</span> <span class=\"kw4\">get</span><span class=\"br0\">(</span>queue<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>queue<span class=\"sy1\">,</span> <span class=\"sy1\">\\</span>nextnode<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy1\">|</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">suspend</span> nextnode<br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 4, "block": "<pre class=\"j highlighted_source\">preorder=: ]S:<span class=\"nu0\">0</span><br/>postorder=: <span class=\"sy0\">(</span>[:; postorder&amp;.&gt;@}.<span class=\"sy0\">)</span> , &gt;@{.<br/>levelorder=:\u00a0;@<span class=\"sy0\">(</span>{::L:<span class=\"nu0\">1</span> <span class=\"nu0\">_</span>~ [: <span class=\"sy0\">(</span>/: #@&gt;<span class=\"sy0\">)</span> &lt;S:<span class=\"nu0\">1</span>@{::<span class=\"sy0\">)</span><br/>inorder=: <span class=\"sy0\">(</span>[:; inorder&amp;.&gt;@<span class=\"sy0\">(</span><span class=\"st_h\">''</span>\"<span class=\"nu0\">_</span>`<span class=\"sy0\">(</span><span class=\"nu0\">1</span>&amp;{<span class=\"sy0\">)</span>@.<span class=\"sy0\">(</span><span class=\"nu0\">1</span>&lt;#<span class=\"sy0\">)))</span> , &gt;@{. , [:; inorder&amp;.&gt;@}<a class=\"__cf_email__\" data-cfemail=\"072947\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>}.</pre>"}, {"lang": "Java", "loc": 87, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.*</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> TreeTraversal <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw2\">static</span> <span class=\"kw2\">class</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>\t\tT value<span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> left<span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span>T<span class=\"sy0\">&gt;</span> right<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"br0\">(</span>T value<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw2\">this</span>.<span class=\"me1\">value</span> = value<span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"kw3\">void</span> visit<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">print</span><span class=\"br0\">(</span><span class=\"kw2\">this</span>.<span class=\"me1\">value</span> + <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">static</span> <span class=\"kw2\">enum</span> ORDER <span class=\"br0\">{</span><br/>\t\tPREORDER, INORDER, POSTORDER, LEVEL<br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw2\">static</span> <span class=\"kw3\">void</span> traverse<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;?&gt;</span> node, ORDER order<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>node == <span class=\"kw4\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw2\">return</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">switch</span> <span class=\"br0\">(</span>order<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">case</span> PREORDER:<br/>\t\t\tnode.<span class=\"me1\">visit</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ttraverse<span class=\"br0\">(</span>node.<span class=\"me1\">left</span>, order<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ttraverse<span class=\"br0\">(</span>node.<span class=\"me1\">right</span>, order<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> INORDER:<br/>\t\t\ttraverse<span class=\"br0\">(</span>node.<span class=\"me1\">left</span>, order<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tnode.<span class=\"me1\">visit</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ttraverse<span class=\"br0\">(</span>node.<span class=\"me1\">right</span>, order<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> POSTORDER:<br/>\t\t\ttraverse<span class=\"br0\">(</span>node.<span class=\"me1\">left</span>, order<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\ttraverse<span class=\"br0\">(</span>node.<span class=\"me1\">right</span>, order<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tnode.<span class=\"me1\">visit</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">case</span> LEVEL:<br/>\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Queue.html\"><span class=\"kw46\">Queue</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;?&gt;&gt;</span> queue = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/LinkedList.html\"><span class=\"kw46\">LinkedList</span></a><span class=\"sy0\">&lt;&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\tqueue.<span class=\"me1\">add</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>queue.<span class=\"me1\">isEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;?&gt;</span> next = queue.<span class=\"me1\">remove</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\tnext.<span class=\"me1\">visit</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>next.<span class=\"me1\">left</span><span class=\"sy0\">!</span>=<span class=\"kw4\">null</span><span class=\"br0\">)</span><br/>\t\t\t\t\tqueue.<span class=\"me1\">add</span><span class=\"br0\">(</span>next.<span class=\"me1\">left</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>next.<span class=\"me1\">right</span><span class=\"sy0\">!</span>=<span class=\"kw4\">null</span><span class=\"br0\">)</span><br/>\t\t\t\t\tqueue.<span class=\"me1\">add</span><span class=\"br0\">(</span>next.<span class=\"me1\">right</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span>\t<br/>\u00a0<br/>\t<span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> one = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> two = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> three = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> four = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> five = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> six = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> seven = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> eight = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> nine = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/org/w3c/dom/Node.html\"><span class=\"kw159\">Node</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\tone.<span class=\"me1\">left</span> = two<span class=\"sy0\">;</span><br/>\t\tone.<span class=\"me1\">right</span> = three<span class=\"sy0\">;</span><br/>\t\ttwo.<span class=\"me1\">left</span> = four<span class=\"sy0\">;</span><br/>\t\ttwo.<span class=\"me1\">right</span> = five<span class=\"sy0\">;</span><br/>\t\tthree.<span class=\"me1\">left</span> = six<span class=\"sy0\">;</span><br/>\t\tfour.<span class=\"me1\">left</span> = seven<span class=\"sy0\">;</span><br/>\t\tsix.<span class=\"me1\">left</span> = eight<span class=\"sy0\">;</span><br/>\t\tsix.<span class=\"me1\">right</span> = nine<span class=\"sy0\">;</span><br/>\u00a0<br/>\t\ttraverse<span class=\"br0\">(</span>one, ORDER.<span class=\"me1\">PREORDER</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>\t\ttraverse<span class=\"br0\">(</span>one, ORDER.<span class=\"me1\">INORDER</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ttraverse<span class=\"br0\">(</span>one, ORDER.<span class=\"me1\">POSTORDER</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\ttraverse<span class=\"br0\">(</span>one, ORDER.<span class=\"me1\">LEVEL</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 40, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> BinaryTree<span class=\"br0\">(</span>value<span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> right<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">value</span> <span class=\"sy0\">=</span> value<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">left</span> <span class=\"sy0\">=</span> left<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">this</span>.<span class=\"me1\">right</span> <span class=\"sy0\">=</span> right<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>BinaryTree.<span class=\"kw1\">prototype</span>.<span class=\"me1\">preorder</span>  <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">this</span>.<span class=\"me1\">walk</span><span class=\"br0\">(</span>f<span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">'this'</span><span class=\"sy0\">,</span><span class=\"st0\">'left'</span><span class=\"sy0\">,</span><span class=\"st0\">'right'</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>BinaryTree.<span class=\"kw1\">prototype</span>.<span class=\"me1\">inorder</span>   <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">this</span>.<span class=\"me1\">walk</span><span class=\"br0\">(</span>f<span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">'left'</span><span class=\"sy0\">,</span><span class=\"st0\">'this'</span><span class=\"sy0\">,</span><span class=\"st0\">'right'</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>BinaryTree.<span class=\"kw1\">prototype</span>.<span class=\"me1\">postorder</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"kw1\">this</span>.<span class=\"me1\">walk</span><span class=\"br0\">(</span>f<span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"st0\">'left'</span><span class=\"sy0\">,</span><span class=\"st0\">'right'</span><span class=\"sy0\">,</span><span class=\"st0\">'this'</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>BinaryTree.<span class=\"kw1\">prototype</span>.<span class=\"me1\">walk</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>func<span class=\"sy0\">,</span> order<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"kw1\">in</span> order<span class=\"br0\">)</span> <br/>        <span class=\"kw1\">switch</span> <span class=\"br0\">(</span>order<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"this\"</span><span class=\"sy0\">:</span> func<span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"left\"</span><span class=\"sy0\">:</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">left</span><span class=\"br0\">)</span> <span class=\"kw1\">this</span>.<span class=\"me1\">left</span>.<span class=\"me1\">walk</span><span class=\"br0\">(</span>func<span class=\"sy0\">,</span> order<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">case</span> <span class=\"st0\">\"right\"</span><span class=\"sy0\">:</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">this</span>.<span class=\"me1\">right</span><span class=\"br0\">)</span> <span class=\"kw1\">this</span>.<span class=\"me1\">right</span>.<span class=\"me1\">walk</span><span class=\"br0\">(</span>func<span class=\"sy0\">,</span> order<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>BinaryTree.<span class=\"kw1\">prototype</span>.<span class=\"me1\">levelorder</span> <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>func<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> queue <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"kw1\">this</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    while <span class=\"br0\">(</span>queue.<span class=\"me1\">length</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> node <span class=\"sy0\">=</span> queue.<span class=\"me1\">shift</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        func<span class=\"br0\">(</span>node.<span class=\"me1\">value</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>node.<span class=\"me1\">left</span><span class=\"br0\">)</span> queue.<span class=\"me1\">push</span><span class=\"br0\">(</span>node.<span class=\"me1\">left</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>node.<span class=\"me1\">right</span><span class=\"br0\">)</span> queue.<span class=\"me1\">push</span><span class=\"br0\">(</span>node.<span class=\"me1\">right</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// convenience function for creating a binary tree</span><br/><span class=\"kw1\">function</span> createBinaryTreeFromArray<span class=\"br0\">(</span>ary<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> left <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">,</span> right <span class=\"sy0\">=</span> <span class=\"kw2\">null</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ary<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> left <span class=\"sy0\">=</span> createBinaryTreeFromArray<span class=\"br0\">(</span>ary<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>ary<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> right <span class=\"sy0\">=</span> createBinaryTreeFromArray<span class=\"br0\">(</span>ary<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">new</span> BinaryTree<span class=\"br0\">(</span>ary<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> left<span class=\"sy0\">,</span> right<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> tree <span class=\"sy0\">=</span> createBinaryTreeFromArray<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>print<span class=\"br0\">(</span><span class=\"st0\">\"*** preorder ***\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>   tree.<span class=\"me1\">preorder</span><span class=\"br0\">(</span>print<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>print<span class=\"br0\">(</span><span class=\"st0\">\"*** inorder ***\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    tree.<span class=\"me1\">inorder</span><span class=\"br0\">(</span>print<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>print<span class=\"br0\">(</span><span class=\"st0\">\"*** postorder ***\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  tree.<span class=\"me1\">postorder</span><span class=\"br0\">(</span>print<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>print<span class=\"br0\">(</span><span class=\"st0\">\"*** levelorder ***\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> tree.<span class=\"me1\">levelorder</span><span class=\"br0\">(</span>print<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 27, "block": "<pre class=\"text highlighted_source\">def preorder:<br/>  if length == 0 then empty<br/>  else .[0], (.[1]|preorder), (.[2]|preorder)<br/>  end;<br/>\u00a0<br/>def inorder:<br/>  if length == 0 then empty<br/>  else (.[1]|inorder), .[0] , (.[2]|inorder)<br/>  end;<br/>\u00a0<br/>def postorder:<br/>  if length == 0 then empty<br/>  else (.[1] | postorder), (.[2]|postorder), .[0]<br/>  end;<br/>\u00a0<br/># Helper functions for levelorder:<br/>  # Produce a stream of the first elements<br/>  def heads: map( .[0] | select(.\u00a0!= null)) | .[];<br/>\u00a0<br/># Produce a stream of the left/right branches:<br/>  def tails:<br/>    if length == 0 then empty<br/>    else [map ( .[1], .[2] ) | .[] | select( .\u00a0!= null)]<br/>    end;<br/>\u00a0<br/>def levelorder: [.] | recurse( tails ) | heads;<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 27, "block": "<pre class=\"text highlighted_source\">tree = Any[1, Any[2, Any[4, Any[7, Any[],<br/>                                          Any[]],<br/>                                   Any[]],<br/>                            Any[5, Any[],<br/>                                   Any[]]],<br/>                     Any[3, Any[6, Any[8, Any[],<br/>                                          Any[]],<br/>                                   Any[9, Any[],<br/>                                          Any[]]],<br/>                            Any[]]]<br/>\u00a0<br/>preorder(t, f) = if\u00a0!isempty(t)<br/>                     f(t[1]); preorder(t[2], f); preorder(t[3], f)<br/>                 end<br/>\u00a0<br/>inorder(t, f) = if\u00a0!isempty(t)<br/>                    inorder(t[2], f); f(t[1]); inorder(t[3], f)<br/>                end<br/>\u00a0<br/>postorder(t, f) = if\u00a0!isempty(t) <br/>                      postorder(t[2], f); postorder(t[3], f); f(t[1])<br/>                  end<br/>\u00a0<br/>levelorder(t, f) = while\u00a0!isempty(t)<br/>                       t = mapreduce(x -&gt; isa(x, Number)\u00a0? (f(x); [])\u00a0: x, vcat, t)<br/>                   end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 67, "block": "<pre class=\"scala highlighted_source\">data <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Node<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> v<span class=\"sy0\">:</span> Int, <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> left<span class=\"sy0\">:</span> Node<span class=\"sy0\">?</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a>, <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> right<span class=\"sy0\">:</span> Node<span class=\"sy0\">?</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">override</span></a> fun toString<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"$v\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun preOrder<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Node<span class=\"sy0\">?</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    n<span class=\"sy0\">?</span>.<span class=\"me1\">let</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"$n \"</span><span class=\"br0\">)</span><br/>        preOrder<span class=\"br0\">(</span>n.<span class=\"me1\">left</span><span class=\"br0\">)</span><br/>        preOrder<span class=\"br0\">(</span>n.<span class=\"me1\">right</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun inorder<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Node<span class=\"sy0\">?</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    n<span class=\"sy0\">?</span>.<span class=\"me1\">let</span> <span class=\"br0\">{</span><br/>        inorder<span class=\"br0\">(</span>n.<span class=\"me1\">left</span><span class=\"br0\">)</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"$n \"</span><span class=\"br0\">)</span><br/>        inorder<span class=\"br0\">(</span>n.<span class=\"me1\">right</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun postOrder<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Node<span class=\"sy0\">?</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    n<span class=\"sy0\">?</span>.<span class=\"me1\">let</span> <span class=\"br0\">{</span><br/>        postOrder<span class=\"br0\">(</span>n.<span class=\"me1\">left</span><span class=\"br0\">)</span><br/>        postOrder<span class=\"br0\">(</span>n.<span class=\"me1\">right</span><span class=\"br0\">)</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"$n \"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun levelOrder<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Node<span class=\"sy0\">?</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    n<span class=\"sy0\">?</span>.<span class=\"me1\">let</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> queue <span class=\"sy0\">=</span> mutableListOf<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>queue.<span class=\"me1\">isNotEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> node <span class=\"sy0\">=</span> queue.<span class=\"me1\">removeAt</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            print<span class=\"br0\">(</span><span class=\"st0\">\"$node \"</span><span class=\"br0\">)</span><br/>            node.<span class=\"me1\">left</span><span class=\"sy0\">?</span>.<span class=\"me1\">let</span> <span class=\"br0\">{</span> queue.<span class=\"me1\">add</span><span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>            node.<span class=\"me1\">right</span><span class=\"sy0\">?</span>.<span class=\"me1\">let</span> <span class=\"br0\">{</span> queue.<span class=\"me1\">add</span><span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>inline fun exec<span class=\"br0\">(</span>name<span class=\"sy0\">:</span> String, n<span class=\"sy0\">:</span> Node<span class=\"sy0\">?</span>, f<span class=\"sy0\">:</span> <span class=\"br0\">(</span>Node<span class=\"sy0\">?</span><span class=\"br0\">)</span> -<span class=\"sy0\">&gt;</span> Unit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    print<span class=\"br0\">(</span>name<span class=\"br0\">)</span><br/>    f<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> nodes <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> Node<span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>    nodes<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">left</span> <span class=\"sy0\">=</span> nodes<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>    nodes<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">right</span> <span class=\"sy0\">=</span> nodes<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><br/>\u00a0<br/>    nodes<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">left</span> <span class=\"sy0\">=</span> nodes<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><br/>    nodes<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span>.<span class=\"me1\">right</span> <span class=\"sy0\">=</span> nodes<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><br/>\u00a0<br/>    nodes<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span>.<span class=\"me1\">left</span> <span class=\"sy0\">=</span> nodes<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><br/>\u00a0<br/>    nodes<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span>.<span class=\"me1\">left</span> <span class=\"sy0\">=</span> nodes<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><br/>\u00a0<br/>    nodes<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span>.<span class=\"me1\">left</span> <span class=\"sy0\">=</span> nodes<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><br/>    nodes<span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span>.<span class=\"me1\">right</span> <span class=\"sy0\">=</span> nodes<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><br/>\u00a0<br/>    exec<span class=\"br0\">(</span><span class=\"st0\">\"   preOrder: \"</span>, nodes<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"sy0\">::</span>preOrder<span class=\"br0\">)</span><br/>    exec<span class=\"br0\">(</span><span class=\"st0\">\"    inorder: \"</span>, nodes<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"sy0\">::</span>inorder<span class=\"br0\">)</span><br/>    exec<span class=\"br0\">(</span><span class=\"st0\">\"  postOrder: \"</span>, nodes<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"sy0\">::</span>postOrder<span class=\"br0\">)</span><br/>    exec<span class=\"br0\">(</span><span class=\"st0\">\"level-order: \"</span>, nodes<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"sy0\">::</span>levelOrder<span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lingo", "loc": 28, "block": "<pre class=\"text highlighted_source\">-- parent script \"BinaryTreeNode\"<br/>\u00a0<br/>property _val, _left, _right<br/>\u00a0<br/>on new (me, val)<br/>  me._val = val<br/>  return me<br/>end<br/>\u00a0<br/>on getValue (me)<br/>  return me._val<br/>end<br/>\u00a0<br/>on setLeft (me, node)<br/>  me._left = node<br/>end<br/>\u00a0<br/>on setRight (me, node)<br/>  me._right = node<br/>end<br/>\u00a0<br/>on getLeft (me)<br/>  return me._left<br/>end<br/>\u00a0<br/>on getRight (me)<br/>  return me._right<br/>end</pre>"}, {"lang": "Logo", "loc": 57, "block": "<pre class=\"text highlighted_source\">; nodes are [data left right], use \"first\" to get data<br/>\u00a0<br/>to node.left\u00a0:node<br/>  if empty? butfirst\u00a0:node [output []]<br/>  output first butfirst\u00a0:node<br/>end<br/>to node.right\u00a0:node<br/>  if empty? butfirst\u00a0:node [output []]<br/>  if empty? butfirst butfirst\u00a0:node [output []]<br/>  output first butfirst butfirst\u00a0:node<br/>end<br/>to max\u00a0:a\u00a0:b<br/>  output ifelse\u00a0:a &gt;\u00a0:b [:a] [:b]<br/>end<br/>to tree.depth\u00a0:tree<br/>  if empty?\u00a0:tree [output 0]<br/>  output 1 + max tree.depth node.left\u00a0:tree  tree.depth node.right\u00a0:tree<br/>end<br/>\u00a0<br/>to pre.order\u00a0:tree\u00a0:action<br/>  if empty?\u00a0:tree [stop]<br/>  invoke\u00a0:action first\u00a0:tree<br/>  pre.order node.left\u00a0:tree\u00a0:action<br/>  pre.order node.right\u00a0:tree\u00a0:action<br/>end<br/>to in.order\u00a0:tree\u00a0:action<br/>  if empty?\u00a0:tree [stop]<br/>  in.order node.left\u00a0:tree\u00a0:action<br/>  invoke\u00a0:action first\u00a0:tree<br/>  in.order node.right\u00a0:tree\u00a0:action<br/>end<br/>to post.order\u00a0:tree\u00a0:action<br/>  if empty?\u00a0:tree [stop]<br/>  post.order node.left\u00a0:tree\u00a0:action<br/>  post.order node.right\u00a0:tree\u00a0:action<br/>  invoke\u00a0:action first\u00a0:tree<br/>end<br/>to at.depth\u00a0:n\u00a0:tree\u00a0:action<br/>  if empty?\u00a0:tree [stop]<br/>  ifelse\u00a0:n = 1 [invoke\u00a0:action first\u00a0:tree] [<br/>    at.depth\u00a0:n-1 node.left \u00a0:tree\u00a0:action<br/>    at.depth\u00a0:n-1 node.right\u00a0:tree\u00a0:action<br/>  ]<br/>end<br/>to level.order\u00a0:tree\u00a0:action<br/>  for [i 1 [tree.depth\u00a0:tree]] [at.depth\u00a0:i\u00a0:tree\u00a0:action]<br/>end<br/>\u00a0<br/>make \"tree [1 [2 [4 [7]]<br/>                 [5]]<br/>              [3 [6 [8]<br/>                    [9]]]]<br/>\u00a0<br/>  pre.order\u00a0:tree [(type\u00a0? \"| |)]  (print)<br/>   in.order\u00a0:tree [(type\u00a0? \"| |)]  (print)<br/> post.order\u00a0:tree [(type\u00a0? \"| |)]  (print)<br/>level.order\u00a0:tree [(type\u00a0? \"| |)]  (print)</pre>"}, {"lang": "Logtalk", "loc": 82, "block": "<pre class=\"logtalk highlighted_source\">\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw1\">object</span>(tree_traversal).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(orders<span class=\"sy1\">/</span><span class=\"nu0\">1</span>).<br/>    orders(<span class=\"re0\">Tree</span>) <span class=\"sy2\">:-</span><br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'Pre-order:   '</span>), pre_order(<span class=\"re0\">Tree</span>), <span class=\"kw5\">nl</span>,<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'In-order:    '</span>), in_order(<span class=\"re0\">Tree</span>), <span class=\"kw5\">nl</span>,<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'Post-order:  '</span>), post_order(<span class=\"re0\">Tree</span>), <span class=\"kw5\">nl</span>,<br/>        <span class=\"kw4\">write</span>(<span class=\"st0\">'Level-order: '</span>), level_order(<span class=\"re0\">Tree</span>).<br/>\u00a0<br/>    <span class=\"sy2\">:-</span> <span class=\"kw1\">public</span>(orders<span class=\"sy1\">/</span><span class=\"nu0\">0</span>).<br/>    orders <span class=\"sy2\">:-</span><br/>        tree(<span class=\"re0\">Tree</span>),<br/>        orders(<span class=\"re0\">Tree</span>).<br/>\u00a0<br/>    tree(<br/>        t(<span class=\"nu0\">1</span>,<br/>            t(<span class=\"nu0\">2</span>,<br/>                t(<span class=\"nu0\">4</span>,<br/>                    t(<span class=\"nu0\">7</span>, t, t),<br/>                    t<br/>                ),<br/>                t(<span class=\"nu0\">5</span>, t, t)<br/>            ),<br/>            t(<span class=\"nu0\">3</span>,<br/>                t(<span class=\"nu0\">6</span>,<br/>                    t(<span class=\"nu0\">8</span>, t, t),<br/>                    t(<span class=\"nu0\">9</span>, t, t)<br/>                ),<br/>                t<br/>            )<br/>        )<br/>    ).<br/>\u00a0<br/>    pre_order(t).<br/>    pre_order(t(<span class=\"re0\">Value</span>, <span class=\"re0\">Left</span>, <span class=\"re0\">Right</span>)) <span class=\"sy2\">:-</span><br/>        <span class=\"kw4\">write</span>(<span class=\"re0\">Value</span>), <span class=\"kw4\">write</span>(<span class=\"st0\">' '</span>),<br/>        pre_order(<span class=\"re0\">Left</span>),<br/>        pre_order(<span class=\"re0\">Right</span>).<br/>\u00a0<br/>    in_order(t).<br/>    in_order(t(<span class=\"re0\">Value</span>, <span class=\"re0\">Left</span>, <span class=\"re0\">Right</span>)) <span class=\"sy2\">:-</span><br/>        in_order(<span class=\"re0\">Left</span>),<br/>        <span class=\"kw4\">write</span>(<span class=\"re0\">Value</span>), <span class=\"kw4\">write</span>(<span class=\"st0\">' '</span>),<br/>        in_order(<span class=\"re0\">Right</span>).<br/>\u00a0<br/>    post_order(t).<br/>    post_order(t(<span class=\"re0\">Value</span>, <span class=\"re0\">Left</span>, <span class=\"re0\">Right</span>)) <span class=\"sy2\">:-</span><br/>        post_order(<span class=\"re0\">Left</span>),<br/>        post_order(<span class=\"re0\">Right</span>),<br/>        <span class=\"kw4\">write</span>(<span class=\"re0\">Value</span>), <span class=\"kw4\">write</span>(<span class=\"st0\">' '</span>).<br/>\u00a0<br/>    level_order(t).<br/>    level_order(t(<span class=\"re0\">Value</span>, <span class=\"re0\">Left</span>, <span class=\"re0\">Right</span>)) <span class=\"sy2\">:-</span><br/>        <span class=\"co1\">% write tree root value</span><br/>        <span class=\"kw4\">write</span>(<span class=\"re0\">Value</span>), <span class=\"kw4\">write</span>(<span class=\"st0\">' '</span>),<br/>        <span class=\"co1\">% write rest of the tree</span><br/>        level_order([<span class=\"re0\">Left</span>, <span class=\"re0\">Right</span>], <span class=\"re0\">Tail</span><span class=\"sy1\">-</span><span class=\"re0\">Tail</span>).<br/>\u00a0<br/>    level_order([], <span class=\"re0\">Trees</span><span class=\"sy1\">-</span>[]) <span class=\"sy2\">:-</span><br/>        (   <span class=\"re0\">Trees</span> <span class=\"sy1\">\\=</span> [] <span class=\"sy1\">-&gt;</span><br/>            <span class=\"co1\">% print next level</span><br/>            level_order(<span class=\"re0\">Trees</span>, <span class=\"re0\">Tail</span><span class=\"sy1\">-</span><span class=\"re0\">Tail</span>)<br/>        <span class=\"sy1\">;</span>   <span class=\"co1\">% no more levels</span><br/>            <span class=\"kw5\">true</span><br/>        ).<br/>    level_order([<span class=\"re0\">Tree</span>| <span class=\"re0\">Trees</span>], <span class=\"re0\">Rest0</span>) <span class=\"sy2\">:-</span><br/>        (   <span class=\"re0\">Tree</span> <span class=\"sy1\">=</span> t(<span class=\"re0\">Value</span>, <span class=\"re0\">Left</span>, <span class=\"re0\">Right</span>) <span class=\"sy1\">-&gt;</span><br/>            <span class=\"kw4\">write</span>(<span class=\"re0\">Value</span>), <span class=\"kw4\">write</span>(<span class=\"st0\">' '</span>),<br/>            <span class=\"co1\">% collect the subtrees to print the next level</span><br/>            append(<span class=\"re0\">Rest0</span>, [<span class=\"re0\">Left</span>, <span class=\"re0\">Right</span>| <span class=\"re0\">Tail</span>]<span class=\"sy1\">-</span><span class=\"re0\">Tail</span>, <span class=\"re0\">Rest1</span>),<br/>            <span class=\"co1\">% continue printing the current level </span><br/>            level_order(<span class=\"re0\">Trees</span>, <span class=\"re0\">Rest1</span>)<br/>        <span class=\"sy1\">;</span>   <span class=\"co1\">% continue printing the current level</span><br/>            level_order(<span class=\"re0\">Trees</span>, <span class=\"re0\">Rest0</span>)<br/>        ).<br/>\u00a0<br/>    <span class=\"co1\">% use difference-lists for constant time append</span><br/>    append(<span class=\"re0\">List1</span><span class=\"sy1\">-</span><span class=\"re0\">Tail1</span>, <span class=\"re0\">Tail1</span><span class=\"sy1\">-</span><span class=\"re0\">Tail2</span>, <span class=\"re0\">List1</span><span class=\"sy1\">-</span><span class=\"re0\">Tail2</span>).<br/>\u00a0<br/><span class=\"sy2\">:-</span> <span class=\"kw2\">end_object</span>.<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 9, "block": "<pre class=\"text highlighted_source\">preorder[a_Integer]\u00a0:= a; <br/>preorder[a_[b__]]\u00a0:= <a class=\"__cf_email__\" data-cfemail=\"793f15180d0d1c1739\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{a, preorder /@ {b}}; <br/>inorder[a_Integer]\u00a0:= a; <br/>inorder[a_[b_, c_]]\u00a0:= <a class=\"__cf_email__\" data-cfemail=\"80c6ece1f4f4e5eec0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{<a class=\"__cf_email__\" data-cfemail=\"523b3c3d203637201230\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, a, <a class=\"__cf_email__\" data-cfemail=\"cca5a2a3bea8a9be8caf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>}; <br/>inorder[a_[b_]]\u00a0:= <a class=\"__cf_email__\" data-cfemail=\"98def4f9ececfdf6d8\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{<a class=\"__cf_email__\" data-cfemail=\"0c6562637e68697e4c6e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, a}; postorder[a_Integer]\u00a0:= a; <br/>postorder[a_[b__]]\u00a0:= <a class=\"__cf_email__\" data-cfemail=\"93d5fff2e7e7f6fdd3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{postorder /@ {b}, a}; <br/>levelorder[a_]\u00a0:= <br/> Flatten[Table[Level[a, {n}], {n, 0, <a class=\"__cf_email__\" data-cfemail=\"de9abbaeaab69ebf\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>}]] /. {b_Integer[__]\u00a0:&gt; <br/>    b};</pre>"}, {"lang": "Mercury", "loc": 93, "block": "<pre class=\"text highlighted_source\">:- module tree_traversal.<br/>:- interface.<br/>\u00a0<br/>:- import_module io.<br/>\u00a0<br/>:- pred main(io::di, io::uo) is det.<br/>\u00a0<br/>:- implementation.<br/>\u00a0<br/>:- import_module list.<br/>\u00a0<br/>:- type tree(V)<br/>    ---&gt;    empty<br/>   \u00a0;       node(V, tree(V), tree(V)).<br/>\u00a0<br/>:- pred preorder(pred(V, A, A), tree(V), A, A).<br/>:- mode preorder(pred(in, di, uo) is det, in, di, uo) is det.<br/>\u00a0<br/>preorder(_, empty,\u00a0!Acc).<br/>preorder(P, node(Value, Left, Right),\u00a0!Acc)\u00a0:-<br/>    P(Value,\u00a0!Acc),<br/>    preorder(P, Left,\u00a0!Acc),<br/>    preorder(P, Right,\u00a0!Acc).<br/>\u00a0<br/>:- pred inorder(pred(V, A, A), tree(V), A, A).<br/>:- mode inorder(pred(in, di, uo) is det, in, di, uo) is det.<br/>\u00a0<br/>inorder(_, empty,\u00a0!Acc).<br/>inorder(P, node(Value, Left, Right),\u00a0!Acc)\u00a0:-<br/>    inorder(P, Left,\u00a0!Acc),<br/>    P(Value,\u00a0!Acc),<br/>    inorder(P, Right,\u00a0!Acc).<br/>\u00a0<br/>:- pred postorder(pred(V, A, A), tree(V), A, A).<br/>:- mode postorder(pred(in, di, uo) is det, in, di, uo) is det.<br/>\u00a0<br/>postorder(_, empty,\u00a0!Acc).<br/>postorder(P, node(Value, Left, Right),\u00a0!Acc)\u00a0:-<br/>    postorder(P, Left,\u00a0!Acc),<br/>    postorder(P, Right,\u00a0!Acc),<br/>    P(Value,\u00a0!Acc).<br/>\u00a0<br/>:- pred levelorder(pred(V, A, A), tree(V), A, A).<br/>:- mode levelorder(pred(in, di, uo) is det, in, di, uo) is det.<br/>\u00a0<br/>levelorder(P, Tree,\u00a0!Acc)\u00a0:-<br/>    do_levelorder(P, [Tree],\u00a0!Acc).<br/>\u00a0<br/>:- pred do_levelorder(pred(V, A, A), list(tree(V)), A, A).<br/>:- mode do_levelorder(pred(in, di, uo) is det, in, di, uo) is det.<br/>\u00a0<br/>do_levelorder(_, [],\u00a0!Acc).<br/>do_levelorder(P, [empty | Xs],\u00a0!Acc)\u00a0:-<br/>   do_levelorder(P, Xs,\u00a0!Acc).<br/>do_levelorder(P, [node(Value, Left, Right) | Xs],\u00a0!Acc)\u00a0:-<br/>   P(Value,\u00a0!Acc),<br/>   do_levelorder(P, Xs ++ [Left, Right],\u00a0!Acc).<br/>\u00a0<br/>:- func tree = tree(int).<br/>\u00a0<br/>tree =<br/>    node(1,<br/>        node(2,<br/>            node(4,<br/>                node(7, empty, empty),<br/>                empty<br/>            ),<br/>            node(5, empty, empty)<br/>        ),<br/>        node(3,<br/>            node(6,<br/>                node(8, empty, empty),<br/>                node(9, empty, empty)<br/>            ),<br/>            empty<br/>        )<br/>    ).<br/>\u00a0<br/>main(!IO)\u00a0:-<br/>     io.write_string(\"preorder:   \" ,!IO),<br/>     preorder(print_value, tree,\u00a0!IO), io.nl(!IO),<br/>     io.write_string(\"inorder:    \" ,!IO),<br/>     inorder(print_value, tree,\u00a0!IO), io.nl(!IO),<br/>     io.write_string(\"postorder:  \" ,!IO),<br/>     postorder(print_value, tree,\u00a0!IO), io.nl(!IO),<br/>     io.write_string(\"levelorder: \" ,!IO),<br/>     levelorder(print_value, tree,\u00a0!IO), io.nl(!IO).<br/>\u00a0<br/>:- pred print_value(V::in, io::di, io::uo) is det.<br/>\u00a0<br/>print_value(V,\u00a0!IO)\u00a0:-<br/>    io.print(V,\u00a0!IO),<br/>    io.write_string(\" \",\u00a0!IO).</pre>"}, {"lang": "Nim", "loc": 47, "block": "<pre class=\"text highlighted_source\">import queues, sequtils<br/>\u00a0<br/>type<br/>  Node[T] = ref TNode[T]<br/>  TNode[T] = object<br/>    data: T<br/>    left, right: Node[T]<br/>\u00a0<br/>proc newNode[T](data: T; left, right: Node[T] = nil): Node[T] =<br/>  Node[T](data: data, left: left, right: right)<br/>\u00a0<br/>proc preorder[T](n: Node[T]): seq[T] =<br/>  if n == nil: @[]<br/>  else: @[n.data] &amp; preorder(n.left) &amp; preorder(n.right)<br/>\u00a0<br/>proc inorder[T](n: Node[T]): seq[T] =<br/>  if n == nil: @[]<br/>  else: inorder(n.left) &amp; @[n.data] &amp; inorder(n.right)<br/>\u00a0<br/>proc postorder[T](n: Node[T]): seq[T] =<br/>  if n == nil: @[]<br/>  else: postorder(n.left) &amp; postorder(n.right) &amp; @[n.data]<br/>\u00a0<br/>proc levelorder[T](n: Node[T]): seq[T] =<br/>  result = @[]<br/>  var queue = initQueue[Node[T]]()<br/>  queue.enqueue(n)<br/>  while queue.len &gt; 0:<br/>    let next = queue.dequeue()<br/>    result.add next.data<br/>    if next.left\u00a0!= nil: queue.enqueue(next.left)<br/>    if next.right\u00a0!= nil: queue.enqueue(next.right)<br/>\u00a0<br/>let tree = 1.newNode(<br/>             2.newNode(<br/>               4.newNode(<br/>                 7.newNode),<br/>               5.newNode),<br/>             3.newNode(<br/>               6.newNode(<br/>                 8.newNode,<br/>                 9.newNode)))<br/>\u00a0<br/>echo preorder tree<br/>echo inorder tree<br/>echo postorder tree<br/>echo levelorder tree</pre>"}, {"lang": "Objeck", "loc": 114, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/>\ufeff\ufeff<span class=\"kw1\">use</span> Collection<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Test <span class=\"br0\">{</span><br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    one <span class=\"sy0\">:=</span> Node<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    two <span class=\"sy0\">:=</span> Node<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    three <span class=\"sy0\">:=</span> Node<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    four <span class=\"sy0\">:=</span> Node<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    five <span class=\"sy0\">:=</span> Node<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    six <span class=\"sy0\">:=</span> Node<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    seven <span class=\"sy0\">:=</span> Node<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    eight <span class=\"sy0\">:=</span> Node<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    nine <span class=\"sy0\">:=</span> Node<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    one<span class=\"sy0\">-&gt;</span><span class=\"me1\">SetLeft</span><span class=\"br0\">(</span>two<span class=\"br0\">)</span><span class=\"sy0\">;</span> one<span class=\"sy0\">-&gt;</span><span class=\"me1\">SetRight</span><span class=\"br0\">(</span>three<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    two<span class=\"sy0\">-&gt;</span><span class=\"me1\">SetLeft</span><span class=\"br0\">(</span>four<span class=\"br0\">)</span><span class=\"sy0\">;</span> two<span class=\"sy0\">-&gt;</span><span class=\"me1\">SetRight</span><span class=\"br0\">(</span>five<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    three<span class=\"sy0\">-&gt;</span><span class=\"me1\">SetLeft</span><span class=\"br0\">(</span>six<span class=\"br0\">)</span><span class=\"sy0\">;</span> four<span class=\"sy0\">-&gt;</span><span class=\"me1\">SetLeft</span><span class=\"br0\">(</span>seven<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    six<span class=\"sy0\">-&gt;</span><span class=\"me1\">SetLeft</span><span class=\"br0\">(</span>eight<span class=\"br0\">)</span><span class=\"sy0\">;</span> six<span class=\"sy0\">-&gt;</span><span class=\"me1\">SetRight</span><span class=\"br0\">(</span>nine<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"st0\">\"Preorder: \"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> Preorder<span class=\"br0\">(</span>one<span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    <span class=\"st0\">\"<span class=\"es0\">\\n</span>Inorder: \"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> Inorder<span class=\"br0\">(</span>one<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"<span class=\"es0\">\\n</span>Postorder: \"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> Postorder<span class=\"br0\">(</span>one<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"<span class=\"es0\">\\n</span>Levelorder: \"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> Levelorder<span class=\"br0\">(</span>one<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Preorder<span class=\"br0\">(</span>node <span class=\"sy0\">:</span> Node<span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>node <span class=\"sy0\">&lt;&gt;</span> <span class=\"kw2\">Nil</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      System.IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>node<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetData</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Preorder<span class=\"br0\">(</span>node<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetLeft</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    <br/>      Preorder<span class=\"br0\">(</span>node<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetRight</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    <br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span>  <br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Inorder<span class=\"br0\">(</span>node <span class=\"sy0\">:</span> Node<span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>node <span class=\"sy0\">&lt;&gt;</span> <span class=\"kw2\">Nil</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      Inorder<span class=\"br0\">(</span>node<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetLeft</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  <br/>      System.IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>node<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetData</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      Inorder<span class=\"br0\">(</span>node<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetRight</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    <br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Postorder<span class=\"br0\">(</span>node <span class=\"sy0\">:</span> Node<span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>node <span class=\"sy0\">&lt;&gt;</span> <span class=\"kw2\">Nil</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      Postorder<span class=\"br0\">(</span>node<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetLeft</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>    <br/>      Postorder<span class=\"br0\">(</span>node<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetRight</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      System.IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>node<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetData</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Levelorder<span class=\"br0\">(</span>node <span class=\"sy0\">:</span> Node<span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    nodequeue <span class=\"sy0\">:=</span> Collection.Queue<span class=\"sy0\">-&gt;</span><span class=\"me1\">New</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>node <span class=\"sy0\">&lt;&gt;</span> <span class=\"kw2\">Nil</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      nodequeue<span class=\"sy0\">-&gt;</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>nodequeue<span class=\"sy0\">-&gt;</span><span class=\"me1\">IsEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw3\">false</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      next <span class=\"sy0\">:=</span> nodequeue<span class=\"sy0\">-&gt;</span><span class=\"me1\">Remove</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span>Node<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      System.IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span>next<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetData</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>next<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetLeft</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"kw2\">Nil</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        nodequeue<span class=\"sy0\">-&gt;</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>next<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetLeft</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>next<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetRight</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"kw2\">Nil</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        nodequeue<span class=\"sy0\">-&gt;</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>next<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetRight</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">class</span> Node <span class=\"kw1\">from</span> BasicCompare <span class=\"br0\">{</span><br/>  @left <span class=\"sy0\">:</span> Node<span class=\"sy0\">;</span><br/>  @right <span class=\"sy0\">:</span> Node<span class=\"sy0\">;</span><br/>  @data <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  New<span class=\"br0\">(</span>data <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    Parent<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    @data <span class=\"sy0\">:=</span> data<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span>  <br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> GetData<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> @data<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> SetLeft<span class=\"br0\">(</span>left <span class=\"sy0\">:</span> Node<span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    @left <span class=\"sy0\">:=</span> left<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> GetLeft<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ Node <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> @left<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> SetRight<span class=\"br0\">(</span>right <span class=\"sy0\">:</span> Node<span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>    @right <span class=\"sy0\">:=</span> right<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> GetRight<span class=\"br0\">(</span><span class=\"br0\">)</span> ~ Node <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> @right<span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">method</span> <span class=\"sy0\">:</span> <span class=\"kw1\">public</span> <span class=\"sy0\">:</span> Compare<span class=\"br0\">(</span>rhs <span class=\"sy0\">:</span> Compare<span class=\"br0\">)</span> ~ <span class=\"kw2\">Int</span> <span class=\"br0\">{</span><br/>    right <span class=\"sy0\">:</span> Node <span class=\"sy0\">:=</span> rhs<span class=\"sy0\">-&gt;</span><span class=\"me1\">As</span><span class=\"br0\">(</span>Node<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>@data <span class=\"sy0\">=</span> right<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetData</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>@data <span class=\"sy0\">&lt;</span> right<span class=\"sy0\">-&gt;</span><span class=\"me1\">GetData</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "OCaml", "loc": 50, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">type</span> <span class=\"sy0\">'</span>a tree <span class=\"sy0\">=</span> Empty<br/>             <span class=\"sy0\">|</span> Node <span class=\"kw1\">of</span> <span class=\"sy0\">'</span>a <span class=\"sy0\">*</span> <span class=\"sy0\">'</span>a tree <span class=\"sy0\">*</span> <span class=\"sy0\">'</span>a tree<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> preorder f <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>    Empty        <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> Node <span class=\"br0\">(</span>v,l,r<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> f v<span class=\"sy0\">;</span><br/>                    preorder f l<span class=\"sy0\">;</span><br/>                    preorder f r<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> inorder f <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>    Empty        <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> Node <span class=\"br0\">(</span>v,l,r<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> inorder f l<span class=\"sy0\">;</span><br/>                    f v<span class=\"sy0\">;</span><br/>                    inorder f r<br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> postorder f <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>    Empty        <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"sy0\">|</span> Node <span class=\"br0\">(</span>v,l,r<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> postorder f l<span class=\"sy0\">;</span><br/>                    postorder f r<span class=\"sy0\">;</span><br/>                    f v<br/>\u00a0<br/><span class=\"kw1\">let</span> levelorder f x <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> queue <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Queue.html\"><span class=\"kw2\">Queue</span></a><span class=\"sy0\">.</span>create <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Queue.html\"><span class=\"kw2\">Queue</span></a><span class=\"sy0\">.</span>add x queue<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Queue.html\"><span class=\"kw2\">Queue</span></a><span class=\"sy0\">.</span>is_empty queue<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">match</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Queue.html\"><span class=\"kw2\">Queue</span></a><span class=\"sy0\">.</span>take queue <span class=\"kw1\">with</span><br/>          Empty        <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"sy0\">|</span> Node <span class=\"br0\">(</span>v,l,r<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> f v<span class=\"sy0\">;</span><br/>                          <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Queue.html\"><span class=\"kw2\">Queue</span></a><span class=\"sy0\">.</span>add l queue<span class=\"sy0\">;</span><br/>                          <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Queue.html\"><span class=\"kw2\">Queue</span></a><span class=\"sy0\">.</span>add r queue<br/>    <span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"kw1\">let</span> tree <span class=\"sy0\">=</span><br/>  Node <span class=\"br0\">(</span><span class=\"nu0\">1</span>,<br/>        Node <span class=\"br0\">(</span><span class=\"nu0\">2</span>,<br/>              Node <span class=\"br0\">(</span><span class=\"nu0\">4</span>,<br/>                    Node <span class=\"br0\">(</span><span class=\"nu0\">7</span>, Empty, Empty<span class=\"br0\">)</span>,<br/>                    Empty<span class=\"br0\">)</span>,<br/>              Node <span class=\"br0\">(</span><span class=\"nu0\">5</span>, Empty, Empty<span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>        Node <span class=\"br0\">(</span><span class=\"nu0\">3</span>,<br/>              Node <span class=\"br0\">(</span><span class=\"nu0\">6</span>,<br/>                    Node <span class=\"br0\">(</span><span class=\"nu0\">8</span>, Empty, Empty<span class=\"br0\">)</span>,<br/>                    Node <span class=\"br0\">(</span><span class=\"nu0\">9</span>, Empty, Empty<span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>              Empty<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  preorder   <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%d \"</span><span class=\"br0\">)</span> tree<span class=\"sy0\">;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  inorder    <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%d \"</span><span class=\"br0\">)</span> tree<span class=\"sy0\">;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  postorder  <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%d \"</span><span class=\"br0\">)</span> tree<span class=\"sy0\">;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  levelorder <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"%d \"</span><span class=\"br0\">)</span> tree<span class=\"sy0\">;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Oforth", "loc": 31, "block": "<pre class=\"text highlighted_source\">Object Class new: Tree(v, l, r)<br/>\u00a0<br/>Tree method: initialize(v, l, r)  v\u00a0:= v l\u00a0:= l r\u00a0:= r\u00a0;<br/>Tree method: v   @v\u00a0;<br/>Tree method: l   @l\u00a0;<br/>Tree method: r   @r\u00a0;<br/>\u00a0<br/>Tree method: preOrder(f) <br/>   @v f perform<br/>   @l ifNotNull: [ @l preOrder(f) ]<br/>   @r ifNotNull: [ @r preOrder(f) ]\u00a0;<br/>\u00a0<br/>Tree method: inOrder(f)<br/>   @l ifNotNull: [ @l inOrder(f) ]<br/>   @v f perform<br/>   @r ifNotNull: [ @r inOrder(f) ]\u00a0;<br/>\u00a0<br/>Tree method: postOrder(f) <br/>   @l ifNotNull: [ @l postOrder(f) ]<br/>   @r ifNotNull: [ @r postOrder(f) ]<br/>   @v f perform\u00a0;<br/>\u00a0<br/>Tree method: levelOrder(f)<br/>| c n |<br/>   Channel new self over send drop -&gt;c<br/>   while(c notEmpty) [<br/>      c receive -&gt;n<br/>      n v f perform<br/>      n l dup ifNotNull: [ c send ] drop<br/>      n r dup ifNotNull: [ c send ] drop<br/>      ]\u00a0;</pre>"}, {"lang": "ooRexx", "loc": 85, "block": "<pre class=\"oorexx highlighted_source\">\u00a0<br/>  one = <span class=\"sy0\">.</span>Node~new<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>  two = <span class=\"sy0\">.</span>Node~new<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>  three = <span class=\"sy0\">.</span>Node~new<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>  four = <span class=\"sy0\">.</span>Node~new<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>  five = <span class=\"sy0\">.</span>Node~new<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span>;<br/>  six = <span class=\"sy0\">.</span>Node~new<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"br0\">)</span>;<br/>  seven = <span class=\"sy0\">.</span>Node~new<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>;<br/>  eight = <span class=\"sy0\">.</span>Node~new<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>;<br/>  nine = <span class=\"sy0\">.</span>Node~new<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>  one~<span class=\"kw6\">left</span> = two<br/>  one~<span class=\"kw6\">right</span> = three<br/>  two~<span class=\"kw6\">left</span> = four<br/>  two~<span class=\"kw6\">right</span> = five<br/>  three~<span class=\"kw6\">left</span> = six<br/>  four~<span class=\"kw6\">left</span> = seven<br/>  six~<span class=\"kw6\">left</span> = eight<br/>  six~<span class=\"kw6\">right</span> = nine<br/>\u00a0<br/>  out = <span class=\"sy0\">.</span>array~new<br/>  <span class=\"sy0\">.</span>treetraverser~preorder<span class=\"br0\">(</span>one, out<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"Preorder:  \"</span> out~toString<span class=\"br0\">(</span><span class=\"st0\">\"l\"</span>, <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>  out~empty<br/>  <span class=\"sy0\">.</span>treetraverser~inorder<span class=\"br0\">(</span>one, out<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"Inorder:   \"</span> out~toString<span class=\"br0\">(</span><span class=\"st0\">\"l\"</span>, <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>  out~empty<br/>  <span class=\"sy0\">.</span>treetraverser~postorder<span class=\"br0\">(</span>one, out<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"Postorder: \"</span> out~toString<span class=\"br0\">(</span><span class=\"st0\">\"l\"</span>, <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>  out~empty<br/>  <span class=\"sy0\">.</span>treetraverser~levelorder<span class=\"br0\">(</span>one, out<span class=\"br0\">)</span>;<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">\"Levelorder:\"</span> out~toString<span class=\"br0\">(</span><span class=\"st0\">\"l\"</span>, <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/>::class node<br/>::method init<br/>  <span class=\"kw1\">expose</span> <span class=\"kw6\">left</span> <span class=\"kw6\">right</span> data<br/>  <span class=\"kw1\">use</span> strict <span class=\"kw1\">arg</span> data<br/>  <span class=\"kw6\">left</span> = <span class=\"sy0\">.</span>nil<br/>  <span class=\"kw6\">right</span> = <span class=\"sy0\">.</span>nil<br/>\u00a0<br/>::<span class=\"kw1\">attribute</span> <span class=\"kw6\">left</span><br/>::<span class=\"kw1\">attribute</span> <span class=\"kw6\">right</span><br/>::<span class=\"kw1\">attribute</span> data<br/>\u00a0<br/>::class treeTraverser<br/>::method preorder class<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> node, out<br/>  <span class=\"kw1\">if</span> node <span class=\"sy0\">\\</span>== <span class=\"sy0\">.</span>nil <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      out~append<span class=\"br0\">(</span>node~data<span class=\"br0\">)</span><br/>      self~preorder<span class=\"br0\">(</span>node~<span class=\"kw6\">left</span>, out<span class=\"br0\">)</span><br/>      self~preorder<span class=\"br0\">(</span>node~<span class=\"kw6\">right</span>, out<span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/>::method inorder class<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> node, out<br/>  <span class=\"kw1\">if</span> node <span class=\"sy0\">\\</span>== <span class=\"sy0\">.</span>nil <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      self~inorder<span class=\"br0\">(</span>node~<span class=\"kw6\">left</span>, out<span class=\"br0\">)</span><br/>      out~append<span class=\"br0\">(</span>node~data<span class=\"br0\">)</span><br/>      self~inorder<span class=\"br0\">(</span>node~<span class=\"kw6\">right</span>, out<span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/>::method postorder class<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> node, out<br/>  <span class=\"kw1\">if</span> node <span class=\"sy0\">\\</span>== <span class=\"sy0\">.</span>nil <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      self~postorder<span class=\"br0\">(</span>node~<span class=\"kw6\">left</span>, out<span class=\"br0\">)</span><br/>      self~postorder<span class=\"br0\">(</span>node~<span class=\"kw6\">right</span>, out<span class=\"br0\">)</span><br/>      out~append<span class=\"br0\">(</span>node~data<span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/>::method levelorder class<br/>  <span class=\"kw1\">use</span> <span class=\"kw1\">arg</span> node, out<br/>\u00a0<br/>  <span class=\"kw1\">if</span> node == <span class=\"sy0\">.</span>nil <span class=\"kw3\">then</span> <span class=\"kw1\">return</span><br/>  nodequeue = <span class=\"sy0\">.</span><span class=\"kw1\">queue</span>~new<br/>  nodequeue~<span class=\"kw1\">queue</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><br/>  <span class=\"kw1\">loop</span> <span class=\"kw2\">while</span> <span class=\"sy0\">\\</span>nodequeue~isEmpty<br/>      next = nodequeue~<span class=\"kw1\">pull</span><br/>      out~append<span class=\"br0\">(</span>next~data<span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> next~<span class=\"kw6\">left</span> <span class=\"sy0\">\\</span>= <span class=\"sy0\">.</span>nil <span class=\"kw3\">then</span><br/>          nodequeue~<span class=\"kw1\">queue</span><span class=\"br0\">(</span>next~<span class=\"kw6\">left</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">if</span> next~<span class=\"kw6\">right</span> <span class=\"sy0\">\\</span>= <span class=\"sy0\">.</span>nil <span class=\"kw3\">then</span><br/>          nodequeue~<span class=\"kw1\">queue</span><span class=\"br0\">(</span>next~<span class=\"kw6\">right</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 58, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  Tree = n<span class=\"br0\">(</span>1<br/>           n<span class=\"br0\">(</span>2<br/>             n<span class=\"br0\">(</span>4 n<span class=\"br0\">(</span>7 e e<span class=\"br0\">)</span> e<span class=\"br0\">)</span><br/>             n<span class=\"br0\">(</span>5 e e<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           n<span class=\"br0\">(</span>3<br/>             n<span class=\"br0\">(</span>6 n<span class=\"br0\">(</span>8 e e<span class=\"br0\">)</span> n<span class=\"br0\">(</span>9 e e<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             e<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Concat</span> Xs<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>FoldR Xs Append nil<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Preorder</span> T<span class=\"br0\">}</span><br/>     <span class=\"kw1\">case</span> T <span class=\"kw1\">of</span> e <span class=\"kw1\">then</span> nil<br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> n<span class=\"br0\">(</span>V L R<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"br0\">{</span>Concat <span class=\"br0\">[</span><span class=\"br0\">[</span>V<span class=\"br0\">]</span><br/>                 <span class=\"br0\">{</span>Preorder L<span class=\"br0\">}</span><br/>                 <span class=\"br0\">{</span>Preorder R<span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Inorder</span> T<span class=\"br0\">}</span><br/>     <span class=\"kw1\">case</span> T <span class=\"kw1\">of</span> e <span class=\"kw1\">then</span> nil<br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> n<span class=\"br0\">(</span>V L R<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"br0\">{</span>Concat <span class=\"br0\">[</span><span class=\"br0\">{</span>Inorder L<span class=\"br0\">}</span><br/>                 <span class=\"br0\">[</span>V<span class=\"br0\">]</span><br/>                 <span class=\"br0\">{</span>Inorder R<span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Postorder</span> T<span class=\"br0\">}</span><br/>     <span class=\"kw1\">case</span> T <span class=\"kw1\">of</span> e <span class=\"kw1\">then</span> nil<br/>     <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> n<span class=\"br0\">(</span>V L R<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"br0\">{</span>Concat <span class=\"br0\">[</span><span class=\"br0\">{</span>Postorder L<span class=\"br0\">}</span><br/>                 <span class=\"br0\">{</span>Postorder R<span class=\"br0\">}</span><br/>                 <span class=\"br0\">[</span>V<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">local</span><br/>     <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Collect</span> Queue<span class=\"br0\">}</span><br/>        <span class=\"kw1\">case</span> Queue <span class=\"kw1\">of</span> nil <span class=\"kw1\">then</span> nil<br/>        <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> e<span class=\"sy0\">|</span>Xr <span class=\"kw1\">then</span> <span class=\"br0\">{</span>Collect Xr<span class=\"br0\">}</span><br/>        <span class=\"re5\"><span class=\"br0\">[</span><span class=\"br0\">]</span></span> n<span class=\"br0\">(</span>V L R<span class=\"br0\">)</span><span class=\"sy0\">|</span>Xr <span class=\"kw1\">then</span><br/>           V<span class=\"sy0\">|</span><span class=\"br0\">{</span>Collect <span class=\"br0\">{</span>Append Xr <span class=\"br0\">[</span>L R<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Levelorder</span> T<span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>Collect <span class=\"br0\">[</span>T<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>Preorder Tree<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>Inorder Tree<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>Postorder Tree<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>Levelorder Tree<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "Perl", "loc": 36, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> preorder<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"re0\">$t</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> preorder<span class=\"br0\">(</span><span class=\"re0\">$t</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> preorder<span class=\"br0\">(</span><span class=\"re0\">$t</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> inorder<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span>inorder<span class=\"br0\">(</span><span class=\"re0\">$t</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$t</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> inorder<span class=\"br0\">(</span><span class=\"re0\">$t</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> postorder<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"br0\">(</span>postorder<span class=\"br0\">(</span><span class=\"re0\">$t</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> postorder<span class=\"br0\">(</span><span class=\"re0\">$t</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"re0\">$t</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> depth<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@ret</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">my</span> <span class=\"re0\">@a</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">@a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">my</span> <span class=\"re0\">$v</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"re0\">@a</span> <span class=\"kw1\">or</span> <span class=\"kw1\">next</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@ret</span><span class=\"sy0\">,</span> <span class=\"re0\">$v</span><span class=\"sy0\">-&gt;</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@a</span><span class=\"sy0\">,</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"re0\">$v</span><span class=\"br0\">}</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">@ret</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"pre:   @{[preorder($x)]}<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"in:    @{[inorder($x)]}<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"post:  @{[postorder($x)]}<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"depth: @{[depth($x)]}<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 58, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> TreeNode <span class=\"br0\">{</span><br/>    <span class=\"kw1\">has</span> TreeNode <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">parent</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> TreeNode <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">left</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> TreeNode <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">right</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">has</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> pre<span class=\"sy0\">-</span>order <span class=\"br0\">{</span><br/>        flat gather <span class=\"br0\">{</span><br/>            take <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"sy0\">;</span><br/>            take <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">left</span><span class=\"sy0\">.</span><span class=\"me1\">pre</span><span class=\"sy0\">-</span>order <span class=\"kw1\">if</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">left</span><span class=\"sy0\">;</span><br/>            take <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">right</span><span class=\"sy0\">.</span><span class=\"me1\">pre</span><span class=\"sy0\">-</span>order <span class=\"kw1\">if</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">right</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> in<span class=\"sy0\">-</span>order <span class=\"br0\">{</span><br/>        flat gather <span class=\"br0\">{</span><br/>            take <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">left</span><span class=\"sy0\">.</span><span class=\"me1\">in</span><span class=\"sy0\">-</span>order <span class=\"kw1\">if</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">left</span><span class=\"sy0\">;</span><br/>            take <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"sy0\">;</span><br/>            take <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">right</span><span class=\"sy0\">.</span><span class=\"me1\">in</span><span class=\"sy0\">-</span>order <span class=\"kw1\">if</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">right</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> post<span class=\"sy0\">-</span>order <span class=\"br0\">{</span><br/>        flat gather <span class=\"br0\">{</span><br/>            take <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">left</span><span class=\"sy0\">.</span><span class=\"me1\">post</span><span class=\"sy0\">-</span>order <span class=\"kw1\">if</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">left</span><span class=\"sy0\">;</span><br/>            take <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">right</span><span class=\"sy0\">.</span><span class=\"me1\">post</span><span class=\"sy0\">-</span>order <span class=\"kw1\">if</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">right</span><span class=\"sy0\">;</span><br/>            take <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">method</span> level<span class=\"sy0\">-</span>order <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> TreeNode <span class=\"re0\">@queue</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>self<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        flat gather <span class=\"kw1\">while</span> <span class=\"re0\">@queue</span><span class=\"sy0\">.</span><span class=\"kw3\">elems</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">@queue</span><span class=\"sy0\">.</span><span class=\"kw3\">shift</span><span class=\"sy0\">;</span><br/>            take <span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"me1\">value</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">@queue</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"me1\">left</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"me1\">left</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">@queue</span><span class=\"sy0\">.</span><span class=\"kw3\">push</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"me1\">right</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"re0\">$n</span><span class=\"sy0\">.</span><span class=\"me1\">right</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> TreeNode <span class=\"re0\">$root</span> <span class=\"sy0\">.=</span> <span class=\"kw2\">new</span><span class=\"br0\">(</span> value <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>                    left <span class=\"sy0\">=&gt;</span> TreeNode<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> value <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>                            left <span class=\"sy0\">=&gt;</span> TreeNode<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> value <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">4</span><span class=\"sy0\">,</span> left <span class=\"sy0\">=&gt;</span> TreeNode<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>value <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                            right <span class=\"sy0\">=&gt;</span> TreeNode<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> value <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                    right <span class=\"sy0\">=&gt;</span> TreeNode<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> value <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <br/>                             left <span class=\"sy0\">=&gt;</span> TreeNode<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span> value <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">6</span><span class=\"sy0\">,</span> <br/>                                     left <span class=\"sy0\">=&gt;</span> TreeNode<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>value <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                                     right <span class=\"sy0\">=&gt;</span> TreeNode<span class=\"sy0\">.</span><span class=\"kw2\">new</span><span class=\"br0\">(</span>value <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>                                     <span class=\"br0\">)</span><br/>                             <span class=\"br0\">)</span><br/>                    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"preorder:  \"</span><span class=\"sy0\">,</span><span class=\"re0\">$root</span><span class=\"sy0\">.</span><span class=\"me1\">pre</span><span class=\"sy0\">-</span>order<span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"inorder:   \"</span><span class=\"sy0\">,</span><span class=\"re0\">$root</span><span class=\"sy0\">.</span><span class=\"me1\">in</span><span class=\"sy0\">-</span>order<span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"postorder: \"</span><span class=\"sy0\">,</span><span class=\"re0\">$root</span><span class=\"sy0\">.</span><span class=\"me1\">post</span><span class=\"sy0\">-</span>order<span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"levelorder:\"</span><span class=\"sy0\">,</span><span class=\"re0\">$root</span><span class=\"sy0\">.</span><span class=\"me1\">level</span><span class=\"sy0\">-</span>order<span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 46, "block": "<pre class=\"text highlighted_source\">constant VALUE = 1, LEFT = 2, RIGHT = 3<br/>\u00a0<br/>constant tree = {1, {2, {4, {7, 0, 0}, 0},<br/>                        {5, 0, 0}},<br/>                    {3, {6, {8, 0, 0}, <br/>                            {9, 0, 0}},<br/>                        0}}<br/>\u00a0<br/>procedure preorder(object tree)<br/>    if sequence(tree) then<br/>        printf(1,\"%d \",{tree[VALUE]})<br/>        preorder(tree[LEFT])<br/>        preorder(tree[RIGHT])<br/>    end if<br/>end procedure<br/>\u00a0<br/>procedure inorder(object tree)<br/>    if sequence(tree) then<br/>        inorder(tree[LEFT])<br/>        printf(1,\"%d \",{tree[VALUE]})<br/>        inorder(tree[RIGHT])<br/>    end if<br/>end procedure<br/>\u00a0<br/>procedure postorder(object tree)<br/>    if sequence(tree) then<br/>        postorder(tree[LEFT])<br/>        postorder(tree[RIGHT])<br/>        printf(1,\"%d \",{tree[VALUE]})<br/>    end if<br/>end procedure<br/>\u00a0<br/>procedure level_order(object tree, sequence more = {})<br/>    if sequence(tree) then<br/>        more &amp;= {tree[LEFT],tree[RIGHT]}<br/>        printf(1,\"%d \",{tree[VALUE]})<br/>    end if<br/>    if length(more) &gt; 0 then<br/>        level_order(more[1],more[2..$])<br/>    end if<br/>end procedure<br/>\u00a0<br/>puts(1,\"\\n preorder:    \")  preorder(tree)<br/>puts(1,\"\\n inorder:     \")  inorder(tree)<br/>puts(1,\"\\n postorder:   \")  postorder(tree)<br/>puts(1,\"\\n level-order: \")  level_order(tree)</pre>"}, {"lang": "PHP", "loc": 102, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">class</span> Node <span class=\"br0\">{</span><br/>    <span class=\"kw2\">private</span> <span class=\"re0\">$left</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">private</span> <span class=\"re0\">$right</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">private</span> <span class=\"re0\">$value</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">function</span> __construct<span class=\"br0\">(</span><span class=\"re0\">$value</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">value</span> <span class=\"sy0\">=</span> <span class=\"re0\">$value</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> getLeft<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">left</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> getRight<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">right</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> getValue<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">value</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> setLeft<span class=\"br0\">(</span><span class=\"re0\">$value</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">left</span> <span class=\"sy0\">=</span> <span class=\"re0\">$value</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> setRight<span class=\"br0\">(</span><span class=\"re0\">$value</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">right</span> <span class=\"sy0\">=</span> <span class=\"re0\">$value</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> setValue<span class=\"br0\">(</span><span class=\"re0\">$value</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">value</span> <span class=\"sy0\">=</span> <span class=\"re0\">$value</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> TreeTraversal <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> preOrder<span class=\"br0\">(</span>Node <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">echo</span> <span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getLeft</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw4\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">preOrder</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getLeft</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getRight</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw4\">null</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">preOrder</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getRight</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> inOrder<span class=\"br0\">(</span>Node <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getLeft</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw4\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">inOrder</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getLeft</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">echo</span> <span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getRight</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw4\">null</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">inOrder</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getRight</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> postOrder<span class=\"br0\">(</span>Node <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getLeft</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw4\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">postOrder</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getLeft</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getRight</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw4\">null</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">postOrder</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getRight</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">echo</span> <span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> levelOrder<span class=\"br0\">(</span><span class=\"re0\">$arg</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$q</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$arg</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><a href=\"http://www.php.net/empty\"><span class=\"kw3\">empty</span></a><span class=\"br0\">(</span><span class=\"re0\">$q</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/array_shift\"><span class=\"kw3\">array_shift</span></a><span class=\"br0\">(</span><span class=\"re0\">$q</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">echo</span> <span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getValue</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getLeft</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw4\">null</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$q</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getLeft</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getRight</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"kw4\">null</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                <span class=\"re0\">$q</span><span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getRight</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$arr</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> Node<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setLeft</span><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setRight</span><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setLeft</span><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setLeft</span><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setLeft</span><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setRight</span><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setLeft</span><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">setRight</span><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"re0\">$tree</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> TreeTraversal<span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"preorder:<span class=\"es1\">\\t</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$tree</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">preOrder</span><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>inorder:<span class=\"es1\">\\t</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$tree</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">inOrder</span><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>postorder:<span class=\"es1\">\\t</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$tree</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">postOrder</span><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>level-order:<span class=\"es1\">\\t</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$tree</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">levelOrder</span><span class=\"br0\">(</span><span class=\"re0\">$arr</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PicoLisp", "loc": 34, "block": "<pre class=\"text highlighted_source\">(de preorder (Node Fun)<br/>   (when Node<br/>      (Fun (car Node))<br/>      (preorder (cadr Node) Fun)<br/>      (preorder (caddr Node) Fun) ) )<br/>\u00a0<br/>(de inorder (Node Fun)<br/>   (when Node<br/>      (inorder (cadr Node) Fun)<br/>      (Fun (car Node))<br/>      (inorder (caddr Node) Fun) ) )<br/>\u00a0<br/>(de postorder (Node Fun)<br/>   (when Node<br/>      (postorder (cadr Node) Fun)<br/>      (postorder (caddr Node) Fun)<br/>      (Fun (car Node)) ) )<br/>\u00a0<br/>(de level-order (Node Fun)<br/>   (for (Q (circ Node)  Q)<br/>      (let N (fifo 'Q)<br/>         (Fun (car N))<br/>         (and (cadr N) (fifo 'Q @))<br/>         (and (caddr N) (fifo 'Q @)) ) ) )<br/>\u00a0<br/>(setq *Tree<br/>   (1<br/>      (2 (4 (7)) (5))<br/>      (3 (6 (8) (9))) ) )<br/>\u00a0<br/>(for Order '(preorder inorder postorder level-order)<br/>   (prin (align -13 (pack Order \":\")))<br/>   (Order *Tree printsp)<br/>   (prinl) )</pre>"}, {"lang": "Prolog", "loc": 57, "block": "<pre class=\"prolog highlighted_source\">tree <span class=\"sy1\">:-</span><br/>\tTree<span class=\"sy6\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span><br/>\t        <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span><br/>\t\t   <span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"sy4\">,</span><br/>\t\t     <span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"sy4\">,</span> nil<span class=\"sy4\">,</span> nil<span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\t\t     nil<span class=\"br0\">]</span><span class=\"sy4\">,</span> <br/>\t\t   <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"sy4\">,</span> nil<span class=\"sy4\">,</span> nil<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\t        <span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy4\">,</span><br/>\t\t <span class=\"br0\">[</span><span class=\"nu0\">6</span><span class=\"sy4\">,</span><br/>\t\t   <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"sy4\">,</span> nil<span class=\"sy4\">,</span> nil<span class=\"br0\">]</span><span class=\"sy4\">,</span> <br/>\t\t   <span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"sy4\">,</span>nil<span class=\"sy4\">,</span> nil<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <br/>\t\t nil<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy4\">,</span><br/>\u00a0<br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"st_h\">'preorder   \u00a0: '</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> preorder<span class=\"br0\">(</span>Tree<span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"st_h\">'inorder    \u00a0: '</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> inorder<span class=\"br0\">(</span>Tree<span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"st_h\">'postorder  \u00a0: '</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> postorder<span class=\"br0\">(</span>Tree<span class=\"br0\">)</span><span class=\"sy4\">,</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">nl</span></a><span class=\"sy4\">,</span><br/>\t<a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">write</span></a><span class=\"br0\">(</span><span class=\"st_h\">'level-order\u00a0: '</span><span class=\"br0\">)</span><span class=\"sy4\">,</span> level_order<span class=\"br0\">(</span><span class=\"br0\">[</span>Tree<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>preorder<span class=\"br0\">(</span>nil<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>preorder<span class=\"br0\">(</span><span class=\"br0\">[</span>Node<span class=\"sy4\">,</span> FG<span class=\"sy4\">,</span> FD<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'~w '</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Node<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tpreorder<span class=\"br0\">(</span>FG<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tpreorder<span class=\"br0\">(</span>FD<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>inorder<span class=\"br0\">(</span>nil<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>inorder<span class=\"br0\">(</span><span class=\"br0\">[</span>Node<span class=\"sy4\">,</span> FG<span class=\"sy4\">,</span> FD<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tinorder<span class=\"br0\">(</span>FG<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'~w '</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Node<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tinorder<span class=\"br0\">(</span>FD<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>postorder<span class=\"br0\">(</span>nil<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>postorder<span class=\"br0\">(</span><span class=\"br0\">[</span>Node<span class=\"sy4\">,</span> FG<span class=\"sy4\">,</span> FD<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tpostorder<span class=\"br0\">(</span>FG<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tpostorder<span class=\"br0\">(</span>FD<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'~w '</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Node<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>level_order<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>level_order<span class=\"br0\">(</span>A<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tlevel_order_<span class=\"br0\">(</span>A<span class=\"sy4\">,</span> U<span class=\"sy3\">-</span>U<span class=\"sy4\">,</span> S<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tlevel_order<span class=\"br0\">(</span>S<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>level_order_<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> S<span class=\"sy3\">-</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span>S<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>level_order_<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">[</span>Node<span class=\"sy4\">,</span> FG<span class=\"sy4\">,</span> FD<span class=\"br0\">]</span> <span class=\"sy5\">|</span> T<span class=\"br0\">]</span><span class=\"sy4\">,</span> CS<span class=\"sy4\">,</span> FS<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tformat<span class=\"br0\">(</span><span class=\"st_h\">'~w '</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>Node<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tappend_dl<span class=\"br0\">(</span>CS<span class=\"sy4\">,</span> <span class=\"br0\">[</span>FG<span class=\"sy4\">,</span> FD<span class=\"sy5\">|</span>U<span class=\"br0\">]</span><span class=\"sy3\">-</span>U<span class=\"sy4\">,</span> CS1<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\tlevel_order_<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> CS1<span class=\"sy4\">,</span> FS<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>level_order_<span class=\"br0\">(</span><span class=\"br0\">[</span>nil <span class=\"sy5\">|</span> T<span class=\"br0\">]</span><span class=\"sy4\">,</span> CS<span class=\"sy4\">,</span> FS<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tlevel_order_<span class=\"br0\">(</span>T<span class=\"sy4\">,</span> CS<span class=\"sy4\">,</span> FS<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>append_dl<span class=\"br0\">(</span>X<span class=\"sy3\">-</span>Y<span class=\"sy4\">,</span> Y<span class=\"sy3\">-</span>Z<span class=\"sy4\">,</span> X<span class=\"sy3\">-</span>Z<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 135, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Structure</span> node<br/>  value.i<br/>  <span class=\"sy0\">*</span><span class=\"kw2\">left</span>.node<br/>  <span class=\"sy0\">*</span><span class=\"kw2\">right</span>.node<br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">Structure</span> queue<br/>  List q.i<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndStructure</span><br/>\u00a0<br/><span class=\"kw1\">DataSection</span><br/>  tree:<br/>  <span class=\"kw1\">Data</span>.s <span class=\"st0\">\"1(2(4(7),5),3(6(8,9)))\"</span><br/><span class=\"kw1\">EndDataSection</span><br/>\u00a0<br/><span class=\"co1\">;Convenient routine to interpret string data to construct a tree of integers.</span><br/><span class=\"kw1\">Procedure</span> createTree<span class=\"br0\">(</span><span class=\"sy0\">*</span>n.node, <span class=\"sy0\">*</span>tPtr.Character<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> num.s, <span class=\"sy0\">*</span>l.node, <span class=\"sy0\">*</span>ntPtr.Character<br/>\u00a0<br/>  <span class=\"kw1\">Repeat</span><br/>    <span class=\"kw1\">Select</span> <span class=\"sy0\">*</span>tPtr<span class=\"sy0\">\\</span>c<br/>      <span class=\"kw1\">Case</span> '<span class=\"nu0\">0</span>' <span class=\"kw1\">To</span> '<span class=\"nu0\">9</span>'<br/>        num <span class=\"sy0\">+</span> <span class=\"kw2\">Chr</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>tPtr<span class=\"sy0\">\\</span>c<span class=\"br0\">)</span><br/>      <span class=\"kw1\">Case</span> '<span class=\"br0\">(</span>'<br/>        <span class=\"sy0\">*</span>n<span class=\"sy0\">\\</span>value <span class=\"sy0\">=</span> <span class=\"kw2\">Val</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span>: num <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>        <span class=\"sy0\">*</span>ntPtr <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>tPtr <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>ntPtr<span class=\"sy0\">\\</span>c <span class=\"sy0\">=</span> ',' <br/>          <span class=\"kw1\">ProcedureReturn</span> <span class=\"sy0\">*</span>tPtr<br/>        <span class=\"kw1\">Else</span><br/>          <span class=\"sy0\">*</span>l <span class=\"sy0\">=</span> <span class=\"kw2\">AllocateMemory</span><span class=\"br0\">(</span><span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"sy0\">*</span>n<span class=\"sy0\">\\</span><span class=\"kw2\">left</span> <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>l: <span class=\"sy0\">*</span>tPtr <span class=\"sy0\">=</span> createTree<span class=\"br0\">(</span><span class=\"sy0\">*</span>l, <span class=\"sy0\">*</span>ntPtr<span class=\"br0\">)</span><br/>        <span class=\"kw1\">EndIf</span><br/>      <span class=\"kw1\">Case</span> '<span class=\"br0\">)</span>', ',', #Null<br/>        <span class=\"kw1\">If</span> num: <span class=\"sy0\">*</span>n<span class=\"sy0\">\\</span>value <span class=\"sy0\">=</span> <span class=\"kw2\">Val</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span>: <span class=\"kw1\">EndIf</span><br/>        <span class=\"kw1\">ProcedureReturn</span> <span class=\"sy0\">*</span>tPtr<br/>    <span class=\"kw1\">EndSelect</span><br/>\u00a0<br/>    <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>tPtr<span class=\"sy0\">\\</span>c <span class=\"sy0\">=</span> ','<br/>      <span class=\"sy0\">*</span>l <span class=\"sy0\">=</span> <span class=\"kw2\">AllocateMemory</span><span class=\"br0\">(</span><span class=\"kw2\">SizeOf</span><span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"br0\">)</span>: <br/>      <span class=\"sy0\">*</span>n<span class=\"sy0\">\\</span><span class=\"kw2\">right</span> <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>l: <span class=\"sy0\">*</span>tPtr <span class=\"sy0\">=</span> createTree<span class=\"br0\">(</span><span class=\"sy0\">*</span>l, <span class=\"sy0\">*</span>tPtr <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span> <br/>    <span class=\"sy0\">*</span>tPtr <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">ForEver</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> enqueue<span class=\"br0\">(</span>List q.i<span class=\"br0\">(</span><span class=\"br0\">)</span>, element<span class=\"br0\">)</span><br/>  <span class=\"kw2\">LastElement</span><span class=\"br0\">(</span>q<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">AddElement</span><span class=\"br0\">(</span>q<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  q<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> element<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> dequeue<span class=\"br0\">(</span>List q.i<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> element<br/>  <span class=\"kw1\">If</span> <span class=\"kw2\">FirstElement</span><span class=\"br0\">(</span>q<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    element <span class=\"sy0\">=</span> q<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">DeleteElement</span><span class=\"br0\">(</span>q<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">ProcedureReturn</span> element<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> onVisit<span class=\"br0\">(</span><span class=\"sy0\">*</span>n.node<span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>n<span class=\"sy0\">\\</span>value<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> preorder<span class=\"br0\">(</span><span class=\"sy0\">*</span>n.node<span class=\"br0\">)</span> <span class=\"co1\">;recursive</span><br/>  onVisit<span class=\"br0\">(</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>n<span class=\"sy0\">\\</span><span class=\"kw2\">left</span><br/>    preorder<span class=\"br0\">(</span><span class=\"sy0\">*</span>n<span class=\"sy0\">\\</span><span class=\"kw2\">left</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>n<span class=\"sy0\">\\</span><span class=\"kw2\">right</span><br/>    preorder<span class=\"br0\">(</span><span class=\"sy0\">*</span>n<span class=\"sy0\">\\</span><span class=\"kw2\">right</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> inorder<span class=\"br0\">(</span><span class=\"sy0\">*</span>n.node<span class=\"br0\">)</span> <span class=\"co1\">;recursive</span><br/>  <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>n<span class=\"sy0\">\\</span><span class=\"kw2\">left</span><br/>    inorder<span class=\"br0\">(</span><span class=\"sy0\">*</span>n<span class=\"sy0\">\\</span><span class=\"kw2\">left</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span> <br/>  onVisit<span class=\"br0\">(</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>n<span class=\"sy0\">\\</span><span class=\"kw2\">right</span><br/>    inorder<span class=\"br0\">(</span><span class=\"sy0\">*</span>n<span class=\"sy0\">\\</span><span class=\"kw2\">right</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span> <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> postorder<span class=\"br0\">(</span><span class=\"sy0\">*</span>n.node<span class=\"br0\">)</span> <span class=\"co1\">;recursive</span><br/>  <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>n<span class=\"sy0\">\\</span><span class=\"kw2\">left</span><br/>    postorder<span class=\"br0\">(</span><span class=\"sy0\">*</span>n<span class=\"sy0\">\\</span><span class=\"kw2\">left</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span> <br/>  <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>n<span class=\"sy0\">\\</span><span class=\"kw2\">right</span><br/>    postorder<span class=\"br0\">(</span><span class=\"sy0\">*</span>n<span class=\"sy0\">\\</span><span class=\"kw2\">right</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">EndIf</span> <br/>  onVisit<span class=\"br0\">(</span><span class=\"sy0\">*</span>n<span class=\"br0\">)</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> levelorder<span class=\"br0\">(</span><span class=\"sy0\">*</span>n.node<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> q.queue<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> readQueue <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, writeQueue, <span class=\"sy0\">*</span>currNode.node<br/>\u00a0<br/>  enqueue<span class=\"br0\">(</span>q<span class=\"br0\">(</span>writeQueue<span class=\"br0\">)</span><span class=\"sy0\">\\</span>q<span class=\"br0\">(</span><span class=\"br0\">)</span>,<span class=\"sy0\">*</span>n<span class=\"br0\">)</span> <span class=\"co1\">;start queue off with root</span><br/>  <span class=\"kw1\">Repeat</span><br/>    readQueue <span class=\"sy0\">!</span> <span class=\"nu0\">1</span>: writeQueue <span class=\"sy0\">!</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">While</span> ListSize<span class=\"br0\">(</span>q<span class=\"br0\">(</span>readQueue<span class=\"br0\">)</span><span class=\"sy0\">\\</span>q<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"sy0\">*</span>currNode <span class=\"sy0\">=</span> dequeue<span class=\"br0\">(</span>q<span class=\"br0\">(</span>readQueue<span class=\"br0\">)</span><span class=\"sy0\">\\</span>q<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>currNode<span class=\"sy0\">\\</span><span class=\"kw2\">left</span><br/>        enqueue<span class=\"br0\">(</span>q<span class=\"br0\">(</span>writeQueue<span class=\"br0\">)</span><span class=\"sy0\">\\</span>q<span class=\"br0\">(</span><span class=\"br0\">)</span>,<span class=\"sy0\">*</span>currNode<span class=\"sy0\">\\</span><span class=\"kw2\">left</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">EndIf</span> <br/>      <span class=\"kw1\">If</span> <span class=\"sy0\">*</span>currNode<span class=\"sy0\">\\</span><span class=\"kw2\">right</span><br/>        enqueue<span class=\"br0\">(</span>q<span class=\"br0\">(</span>writeQueue<span class=\"br0\">)</span><span class=\"sy0\">\\</span>q<span class=\"br0\">(</span><span class=\"br0\">)</span>,<span class=\"sy0\">*</span>currNode<span class=\"sy0\">\\</span><span class=\"kw2\">right</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">EndIf</span> <br/>      onVisit<span class=\"br0\">(</span><span class=\"sy0\">*</span>currNode<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">Until</span> ListSize<span class=\"br0\">(</span>q<span class=\"br0\">(</span>writeQueue<span class=\"br0\">)</span><span class=\"sy0\">\\</span>q<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> root.node<br/>  createTree<span class=\"br0\">(</span>root,?tree<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"preorder: \"</span><span class=\"br0\">)</span><br/>  preorder<span class=\"br0\">(</span>root<span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"inorder: \"</span><span class=\"br0\">)</span><br/>  inorder<span class=\"br0\">(</span>root<span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"postorder: \"</span><span class=\"br0\">)</span><br/>  postorder<span class=\"br0\">(</span>root<span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"levelorder: \"</span><span class=\"br0\">)</span><br/>  levelorder<span class=\"br0\">(</span>root<span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span>#CRLF$ <span class=\"sy0\">+</span> #CRLF$ <span class=\"sy0\">+</span> <span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 55, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">collections</span> <span class=\"kw1\">import</span> namedtuple<br/><span class=\"kw1\">from</span> <span class=\"kw3\">sys</span> <span class=\"kw1\">import</span> stdout<br/>\u00a0<br/>Node <span class=\"sy0\">=</span> namedtuple<span class=\"br0\">(</span><span class=\"st0\">'Node'</span><span class=\"sy0\">,</span> <span class=\"st0\">'data, left, right'</span><span class=\"br0\">)</span><br/>tree <span class=\"sy0\">=</span> Node<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><br/>            Node<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><br/>                 Node<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><br/>                      Node<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"kw2\">None</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                      <span class=\"kw2\">None</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                 Node<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"kw2\">None</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>            Node<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><br/>                 Node<span class=\"br0\">(</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><br/>                      Node<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"kw2\">None</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                      Node<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"kw2\">None</span><span class=\"sy0\">,</span> <span class=\"kw2\">None</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>                 <span class=\"kw2\">None</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> printwithspace<span class=\"br0\">(</span>i<span class=\"br0\">)</span>:<br/>    stdout.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"%i \"</span>\u00a0% i<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> preorder<span class=\"br0\">(</span>node<span class=\"sy0\">,</span> visitor <span class=\"sy0\">=</span> printwithspace<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> node <span class=\"kw1\">is</span> <span class=\"kw1\">not</span> <span class=\"kw2\">None</span>:<br/>        visitor<span class=\"br0\">(</span>node.<span class=\"me1\">data</span><span class=\"br0\">)</span><br/>        preorder<span class=\"br0\">(</span>node.<span class=\"me1\">left</span><span class=\"sy0\">,</span> visitor<span class=\"br0\">)</span><br/>        preorder<span class=\"br0\">(</span>node.<span class=\"me1\">right</span><span class=\"sy0\">,</span> visitor<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> inorder<span class=\"br0\">(</span>node<span class=\"sy0\">,</span> visitor <span class=\"sy0\">=</span> printwithspace<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> node <span class=\"kw1\">is</span> <span class=\"kw1\">not</span> <span class=\"kw2\">None</span>:<br/>        inorder<span class=\"br0\">(</span>node.<span class=\"me1\">left</span><span class=\"sy0\">,</span> visitor<span class=\"br0\">)</span><br/>        visitor<span class=\"br0\">(</span>node.<span class=\"me1\">data</span><span class=\"br0\">)</span><br/>        inorder<span class=\"br0\">(</span>node.<span class=\"me1\">right</span><span class=\"sy0\">,</span> visitor<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> postorder<span class=\"br0\">(</span>node<span class=\"sy0\">,</span> visitor <span class=\"sy0\">=</span> printwithspace<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> node <span class=\"kw1\">is</span> <span class=\"kw1\">not</span> <span class=\"kw2\">None</span>:<br/>        postorder<span class=\"br0\">(</span>node.<span class=\"me1\">left</span><span class=\"sy0\">,</span> visitor<span class=\"br0\">)</span><br/>        postorder<span class=\"br0\">(</span>node.<span class=\"me1\">right</span><span class=\"sy0\">,</span> visitor<span class=\"br0\">)</span><br/>        visitor<span class=\"br0\">(</span>node.<span class=\"me1\">data</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">def</span> levelorder<span class=\"br0\">(</span>node<span class=\"sy0\">,</span> more<span class=\"sy0\">=</span><span class=\"kw2\">None</span><span class=\"sy0\">,</span> visitor <span class=\"sy0\">=</span> printwithspace<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">if</span> node <span class=\"kw1\">is</span> <span class=\"kw1\">not</span> <span class=\"kw2\">None</span>:<br/>        <span class=\"kw1\">if</span> more <span class=\"kw1\">is</span> <span class=\"kw2\">None</span>:<br/>            more <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        more +<span class=\"sy0\">=</span> <span class=\"br0\">[</span>node.<span class=\"me1\">left</span><span class=\"sy0\">,</span> node.<span class=\"me1\">right</span><span class=\"br0\">]</span><br/>        visitor<span class=\"br0\">(</span>node.<span class=\"me1\">data</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> more:    <br/>        levelorder<span class=\"br0\">(</span>more<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> more<span class=\"br0\">[</span><span class=\"nu0\">1</span>:<span class=\"br0\">]</span><span class=\"sy0\">,</span> visitor<span class=\"br0\">)</span><br/>\u00a0<br/>stdout.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'  preorder: '</span><span class=\"br0\">)</span><br/>preorder<span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/>stdout.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>   inorder: '</span><span class=\"br0\">)</span><br/>inorder<span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/>stdout.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span> postorder: '</span><span class=\"br0\">)</span><br/>postorder<span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/>stdout.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>levelorder: '</span><span class=\"br0\">)</span><br/>levelorder<span class=\"br0\">(</span>tree<span class=\"br0\">)</span><br/>stdout.<span class=\"me1\">write</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span></pre>"}, {"lang": "Qi", "loc": 46, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(set *tree* [1 [2 [4 [7]]<br/>                  [5]]<br/>               [3 [6 [8]<br/>                     [9]]]])<br/>\u00a0<br/>(define inorder<br/>  []      -&gt; []<br/>  [V]     -&gt; [V]<br/>  [V L]   -&gt; (append (inorder L)<br/>                     [V])<br/>  [V L R] -&gt; (append (inorder L)<br/>                     [V]<br/>                     (inorder R)))<br/>\u00a0<br/>(define postorder<br/>  []      -&gt; []<br/>  [V]     -&gt; [V]<br/>  [V L]   -&gt; (append (postorder L)<br/>                     [V])<br/>  [V L R] -&gt; (append (postorder L)<br/>                     (postorder R)<br/>                     [V]))<br/>\u00a0<br/>(define preorder<br/>  []      -&gt; []<br/>  [V]     -&gt; [V]<br/>  [V L]   -&gt; (append [V]<br/>                     (preorder L)) <br/>  [V L R] -&gt; (append [V]<br/>                     (preorder L)<br/>                     (preorder R)))<br/>\u00a0<br/>(define levelorder-0<br/>  []             -&gt; []<br/>  [[]       | Q] -&gt; (levelorder-0 Q)<br/>  [[V | LR] | Q] -&gt; [V | (levelorder-0 (append Q LR))])<br/>\u00a0<br/>(define levelorder<br/>  Node -&gt; (levelorder-0 [Node]))<br/>\u00a0<br/>(preorder (value *tree*))<br/>(postorder (value *tree*))<br/>(inorder (value *tree*))<br/>(levelorder (value *tree*))<br/>\u00a0</pre>"}, {"lang": "Racket", "loc": 27, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define the-tree\u00a0; Node: (list &lt;data&gt; &lt;left&gt; &lt;right&gt;)<br/>  '(1 (2 (4 (7 #f #f) #f) (5 #f #f)) (3 (6 (8 #f #f) (9 #f #f)) #f)))<br/>\u00a0<br/>(define (preorder tree visit)<br/>  (let loop ([t tree])<br/>    (when t (visit (car t)) (loop (cadr t)) (loop (caddr t)))))<br/>(define (inorder tree visit)<br/>  (let loop ([t tree])<br/>    (when t (loop (cadr t)) (visit (car t)) (loop (caddr t)))))<br/>(define (postorder tree visit)<br/>  (let loop ([t tree])<br/>    (when t (loop (cadr t)) (loop (caddr t)) (visit (car t)))))<br/>(define (levelorder tree visit)<br/>  (let loop ([trees (list tree)])<br/>    (unless (null? trees)<br/>      ((compose1 loop (curry filter values) append*)<br/>       (for/list ([t trees] #:when t) (visit (car t)) (cdr t))))))<br/>\u00a0<br/>(define (run order)<br/>  (printf \"~a:\" (object-name order))<br/>  (order the-tree (\u03bb(x) (printf \" ~s\" x)))<br/>  (newline))<br/>(for-each run (list preorder inorder postorder levelorder))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 319, "block": "<pre class=\"rexx highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* REXX ***************************************************************<br/>* Tree traversal<br/>=           1<br/>=          / \\<br/>=         /   \\<br/>=        /     \\<br/>=       2       3<br/>=      / \\     /<br/>=     4   5   6<br/>=    /       / \\<br/>=   7       8   9<br/>=<br/>= The correct output should look like this:<br/>=  preorder:    1 2 4 7 5 3 6 8 9<br/>=  level-order: 1 2 3 4 5 6 7 8 9<br/>=  postorder:   7 4 5 2 8 9 6 3 1<br/>=  inorder:     7 4 2 5 1 8 6 9 3<br/>\u00a0<br/>* 17.06.2012 Walter Pachl not thoroughly tested<br/>**********************************************************************/</span><br/>debug=<span class=\"nu0\">0</span><br/>wl_soll=<span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">7</span> <span class=\"nu0\">5</span> <span class=\"nu0\">3</span> <span class=\"nu0\">6</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span><br/>il_soll=<span class=\"nu0\">7</span> <span class=\"nu0\">4</span> <span class=\"nu0\">2</span> <span class=\"nu0\">5</span> <span class=\"nu0\">1</span> <span class=\"nu0\">8</span> <span class=\"nu0\">6</span> <span class=\"nu0\">9</span> <span class=\"nu0\">3</span><br/>pl_soll=<span class=\"nu0\">7</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">2</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span> <span class=\"nu0\">6</span> <span class=\"nu0\">3</span> <span class=\"nu0\">1</span><br/>ll_soll=<span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span><br/>\u00a0<br/><span class=\"kw1\">Call</span> mktree<br/>wl<span class=\"sy0\">.</span>=<span class=\"st0\">''</span>; wl=<span class=\"st0\">''</span> <span class=\"coMULTI\">/* preorder    */</span><br/>ll<span class=\"sy0\">.</span>=<span class=\"st0\">''</span>; ll=<span class=\"st0\">''</span> <span class=\"coMULTI\">/* level-order */</span><br/>        il=<span class=\"st0\">''</span> <span class=\"coMULTI\">/* inorder     */</span><br/>        pl=<span class=\"st0\">''</span> <span class=\"coMULTI\">/* postorder   */</span><br/>\u00a0<br/><span class=\"coMULTI\">/**********************************************************************<br/>* First walk the tree and construct preorder and level-order lists<br/>**********************************************************************/</span><br/>done<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>lvl=<span class=\"nu0\">1</span><br/>z=root<br/><span class=\"kw1\">Call</span> note z<br/><span class=\"kw1\">Do</span> <span class=\"kw2\">Until</span> z=<span class=\"nu0\">0</span><br/>  z=go_next<span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Call</span> note z<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Call</span> show <span class=\"st0\">'preorder:   '</span>,wl,wl_soll<br/><span class=\"kw1\">Do</span> lvl=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">4</span><br/>  ll=ll ll<span class=\"sy0\">.</span>lvl<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Call</span> show <span class=\"st0\">'level-order:'</span>,ll,ll_soll<br/>\u00a0<br/><span class=\"coMULTI\">/**********************************************************************<br/>* Next construct postorder list<br/>**********************************************************************/</span><br/>done<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>ridone<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>z=lbot<span class=\"br0\">(</span>root<span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> notep z<br/><span class=\"kw1\">Do</span> <span class=\"kw2\">Until</span> z=<span class=\"nu0\">0</span><br/>  br=brother<span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> br<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span>,<br/>     done<span class=\"sy0\">.</span>br=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    ridone<span class=\"sy0\">.</span>br=<span class=\"nu0\">1</span><br/>    z=lbot<span class=\"br0\">(</span>br<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Call</span> notep z<br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">Else</span><br/>  z=father<span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Call</span> notep z<br/>  <span class=\"kw3\">End</span><br/><span class=\"kw1\">Call</span> show <span class=\"st0\">'postorder:  '</span>,pl,pl_soll<br/>\u00a0<br/><span class=\"coMULTI\">/**********************************************************************<br/>* Finally construct inorder list<br/>**********************************************************************/</span><br/>done<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>ridone<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>z=lbot<span class=\"br0\">(</span>root<span class=\"br0\">)</span><br/><span class=\"kw1\">Call</span> notei z<br/><span class=\"kw1\">Do</span> <span class=\"kw2\">Until</span> z=<span class=\"nu0\">0</span><br/>  z=father<span class=\"br0\">(</span>z<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Call</span> notei z<br/>  ri=node<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0rite<br/>  <span class=\"kw1\">If</span> ridone<span class=\"sy0\">.</span>z=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    ridone<span class=\"sy0\">.</span>z=<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> ri<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>      z=lbot<span class=\"br0\">(</span>ri<span class=\"br0\">)</span><br/>      <span class=\"kw1\">Call</span> notei z<br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw3\">End</span><br/>\u00a0<br/><span class=\"coMULTI\">/**********************************************************************<br/>* And now show the results and check them for correctness<br/>**********************************************************************/</span><br/><span class=\"kw1\">Call</span> show <span class=\"st0\">'inorder:    '</span>,il,il_soll<br/>\u00a0<br/><span class=\"kw1\">Exit</span><br/>\u00a0<br/>show: <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> Which,have,soll<br/><span class=\"coMULTI\">/**********************************************************************<br/>* Show our result and show it it's correct<br/>**********************************************************************/</span><br/>have=<span class=\"kw6\">space</span><span class=\"br0\">(</span>have<span class=\"br0\">)</span><br/><span class=\"kw1\">If</span> have=soll <span class=\"kw3\">Then</span><br/>  tag=<span class=\"st0\">''</span><br/><span class=\"kw3\">Else</span><br/>  tag=<span class=\"st0\">'*wrong*'</span><br/><span class=\"kw1\">Say</span> which have tag<br/><span class=\"kw1\">If</span> tag<span class=\"sy0\">&lt;&gt;</span><span class=\"st0\">''</span> <span class=\"kw3\">Then</span><br/>  <span class=\"kw1\">Say</span> <span class=\"st0\">'------------&gt;'</span>soll <span class=\"st0\">'is the expected result'</span><br/><span class=\"kw1\">Return</span><br/>\u00a0<br/>brother: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> node<span class=\"sy0\">.</span><br/><span class=\"coMULTI\">/**********************************************************************<br/>* Return the right node of this node's father or 0<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">arg</span> no<br/>  nof=node<span class=\"sy0\">.</span>no<span class=\"sy0\">.</span>0father<br/>  brot1=node<span class=\"sy0\">.</span>nof<span class=\"sy0\">.</span>0rite<br/>  <span class=\"kw1\">Return</span> brot1<br/>\u00a0<br/>notei: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> debug il done<span class=\"sy0\">.</span><br/><span class=\"coMULTI\">/**********************************************************************<br/>* append the given node to il<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> nd<br/>  <span class=\"kw1\">If</span> nd<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span>,<br/>     done<span class=\"sy0\">.</span>nd=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>    il=il nd<br/>  <span class=\"kw1\">If</span> debug <span class=\"kw3\">Then</span><br/>    <span class=\"kw1\">Say</span> <span class=\"st0\">'notei'</span> nd<br/>  done<span class=\"sy0\">.</span>nd=<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Return</span><br/>\u00a0<br/>notep: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> debug pl done<span class=\"sy0\">.</span><br/><span class=\"coMULTI\">/**********************************************************************<br/>* append the given node to pl<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> nd<br/>  <span class=\"kw1\">If</span> nd<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span>,<br/>     done<span class=\"sy0\">.</span>nd=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    pl=pl nd<br/>    <span class=\"kw1\">If</span> debug <span class=\"kw3\">Then</span><br/>      <span class=\"kw1\">Say</span> <span class=\"st0\">'notep'</span> nd<br/>    <span class=\"kw3\">End</span><br/>  done<span class=\"sy0\">.</span>nd=<span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Return</span><br/>\u00a0<br/>father: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> node<span class=\"sy0\">.</span><br/><span class=\"coMULTI\">/**********************************************************************<br/>* Return the father of the argument<br/>* or 0 if the root is given as argument<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> nd<br/>  <span class=\"kw1\">Return</span> node<span class=\"sy0\">.</span>nd<span class=\"sy0\">.</span>0father<br/>\u00a0<br/>lbot: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> node<span class=\"sy0\">.</span><br/><span class=\"coMULTI\">/**********************************************************************<br/>* From node z: Walk down on the left side until you reach the bottom<br/>* and return the bottom node<br/>* If z has no left son (at the bottom of the tree) returm itself<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> z<br/>  <span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">100</span><br/>    <span class=\"kw1\">If</span> node<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0left<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>      z=node<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0left<br/>    <span class=\"kw3\">Else</span><br/>      <span class=\"kw1\">Leave</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span> z<br/>\u00a0<br/>note:<br/><span class=\"coMULTI\">/**********************************************************************<br/>* add the node to the preorder list unless it's already there<br/>* add the node to the level list<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">If</span> z<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"sy0\">&amp;</span>,                           <span class=\"coMULTI\">/* it's a node                */</span><br/>     done<span class=\"sy0\">.</span>z=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>                  <span class=\"coMULTI\">/* not yet done               */</span><br/>    wl=wl z                            <span class=\"coMULTI\">/* add it to the preorder list*/</span><br/>    ll<span class=\"sy0\">.</span>lvl=ll<span class=\"sy0\">.</span>lvl z                    <span class=\"coMULTI\">/* add it to the level list   */</span><br/>    done<span class=\"sy0\">.</span>z=<span class=\"nu0\">1</span>                           <span class=\"coMULTI\">/* remember it's done         */</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span><br/>\u00a0<br/>go_next: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> node<span class=\"sy0\">.</span> lvl<br/><span class=\"coMULTI\">/**********************************************************************<br/>* find the next node to visit in the treewalk<br/>**********************************************************************/</span><br/>  next=<span class=\"nu0\">0</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">arg</span> z<br/>  <span class=\"kw1\">If</span> node<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0left<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>           <span class=\"coMULTI\">/* there is a left son        */</span><br/>    <span class=\"kw1\">If</span> node<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0left<span class=\"sy0\">.</span>done=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>     <span class=\"coMULTI\">/* we have not visited it     */</span><br/>      next=node<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0left                <span class=\"coMULTI\">/* so we go there             */</span><br/>      node<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0left<span class=\"sy0\">.</span>done=<span class=\"nu0\">1</span>              <span class=\"coMULTI\">/* note we were here          */</span><br/>      lvl=lvl+<span class=\"nu0\">1</span>                        <span class=\"coMULTI\">/* increase the level         */</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">If</span> next=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>                    <span class=\"coMULTI\">/* not moved yet              */</span><br/>    <span class=\"kw1\">If</span> node<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0rite<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>         <span class=\"coMULTI\">/* there is a right son       */</span><br/>      <span class=\"kw1\">If</span> node<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0rite<span class=\"sy0\">.</span>done=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>   <span class=\"coMULTI\">/* we have not visited it     */</span><br/>        next=node<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0rite              <span class=\"coMULTI\">/* so we go there             */</span><br/>        node<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0rite<span class=\"sy0\">.</span>done=<span class=\"nu0\">1</span>            <span class=\"coMULTI\">/* note we were here          */</span><br/>        lvl=lvl+<span class=\"nu0\">1</span>                      <span class=\"coMULTI\">/* increase the level         */</span><br/>        <span class=\"kw3\">End</span><br/>      <span class=\"kw3\">End</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">If</span> next=<span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span>                    <span class=\"coMULTI\">/* not moved yet              */</span><br/>    next=node<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0father                <span class=\"coMULTI\">/* go to the father           */</span><br/>    lvl=lvl-<span class=\"nu0\">1</span>                          <span class=\"coMULTI\">/* decrease the level         */</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span> next                          <span class=\"coMULTI\">/* that's the next node       */</span><br/>                                       <span class=\"coMULTI\">/* or zero if we are done     */</span><br/>\u00a0<br/>mknode: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> node<span class=\"sy0\">.</span><br/><span class=\"coMULTI\">/**********************************************************************<br/>* create a new node<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> <span class=\"kw2\">name</span><br/>  z=node<span class=\"sy0\">.</span>0+<span class=\"nu0\">1</span><br/>  node<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0name=<span class=\"kw2\">name</span><br/>  node<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0father=<span class=\"nu0\">0</span><br/>  node<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0left  =<span class=\"nu0\">0</span><br/>  node<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0rite  =<span class=\"nu0\">0</span><br/>  node<span class=\"sy0\">.</span>0=z<br/>  <span class=\"kw1\">Return</span> z                        <span class=\"coMULTI\">/* number of the node just created */</span><br/>\u00a0<br/>attleft: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> node<span class=\"sy0\">.</span><br/><span class=\"coMULTI\">/**********************************************************************<br/>* make son the left son of father<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> son,father<br/>  node<span class=\"sy0\">.</span>son<span class=\"sy0\">.</span>0father=father<br/>  z=node<span class=\"sy0\">.</span>father<span class=\"sy0\">.</span>0left<br/>  <span class=\"kw1\">If</span> z<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    node<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0father=son<br/>    node<span class=\"sy0\">.</span>son<span class=\"sy0\">.</span>0left=z<br/>    <span class=\"kw3\">End</span><br/>  node<span class=\"sy0\">.</span>father<span class=\"sy0\">.</span>0left=son<br/>  <span class=\"kw1\">Return</span><br/>\u00a0<br/>attrite: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> node<span class=\"sy0\">.</span><br/><span class=\"coMULTI\">/**********************************************************************<br/>* make son the right son of father<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> son,father<br/>  node<span class=\"sy0\">.</span>son<span class=\"sy0\">.</span>0father=father<br/>  z=node<span class=\"sy0\">.</span>father<span class=\"sy0\">.</span>0rite<br/>  <span class=\"kw1\">If</span> z<span class=\"sy0\">&lt;&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span> <span class=\"kw1\">Do</span><br/>    node<span class=\"sy0\">.</span>z<span class=\"sy0\">.</span>0father=son<br/>    node<span class=\"sy0\">.</span>son<span class=\"sy0\">.</span>0rite=z<br/>    <span class=\"kw3\">End</span><br/>  node<span class=\"sy0\">.</span>father<span class=\"sy0\">.</span>0rite=son<br/>  le=node<span class=\"sy0\">.</span>father<span class=\"sy0\">.</span>0left<br/>  <span class=\"kw1\">If</span> le<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span> <span class=\"kw3\">Then</span><br/>    node<span class=\"sy0\">.</span>le<span class=\"sy0\">.</span>0brother=node<span class=\"sy0\">.</span>father<span class=\"sy0\">.</span>0rite<br/>  <span class=\"kw1\">Return</span><br/>\u00a0<br/>mktree: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> node<span class=\"sy0\">.</span> root<br/><span class=\"coMULTI\">/**********************************************************************<br/>* build the tree according to the task<br/>**********************************************************************/</span><br/>  node<span class=\"sy0\">.</span>=<span class=\"nu0\">0</span><br/>  a=mknode<span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span>; root=a<br/>  b=mknode<span class=\"br0\">(</span><span class=\"st0\">'B'</span><span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attleft b,a<br/>  c=mknode<span class=\"br0\">(</span><span class=\"st0\">'C'</span><span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attrite c,a<br/>  d=mknode<span class=\"br0\">(</span><span class=\"st0\">'D'</span><span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attleft d,b<br/>  e=mknode<span class=\"br0\">(</span><span class=\"st0\">'E'</span><span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attrite e,b<br/>  f=mknode<span class=\"br0\">(</span><span class=\"st0\">'F'</span><span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attleft f,c<br/>  g=mknode<span class=\"br0\">(</span><span class=\"st0\">'G'</span><span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attleft g,d<br/>  h=mknode<span class=\"br0\">(</span><span class=\"st0\">'H'</span><span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attleft h,f<br/>  i=mknode<span class=\"br0\">(</span><span class=\"st0\">'I'</span><span class=\"br0\">)</span>; <span class=\"kw1\">Call</span> attrite i,f<br/>  <span class=\"kw1\">Call</span> show_tree <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">Return</span><br/>\u00a0<br/>show_tree: <span class=\"kw1\">Procedure</span> <span class=\"kw1\">Expose</span> node<span class=\"sy0\">.</span><br/><span class=\"coMULTI\">/**********************************************************************<br/>* Show the tree<br/>*         f<br/>*     l1   1  r1<br/>*   l   r   l   r<br/>*  l r l r l r l r<br/>* 12345678901234567890<br/>**********************************************************************/</span><br/>  <span class=\"kw1\">Parse</span> <span class=\"kw1\">Arg</span> f<br/>  l<span class=\"sy0\">.</span>=<span class=\"st0\">''</span><br/>                          l<span class=\"sy0\">.</span>1=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>f   ,l<span class=\"sy0\">.</span>1, <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>\u00a0<br/>  l1=node<span class=\"sy0\">.</span>f<span class=\"sy0\">.</span>0left       \u00a0;l<span class=\"sy0\">.</span>2=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>l1  ,l<span class=\"sy0\">.</span>2, <span class=\"nu0\">5</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*b1=node.f.0brother    \u00a0;l.2=overlay(b1  ,l.2, 9) */</span><br/>  r1=node<span class=\"sy0\">.</span>f<span class=\"sy0\">.</span>0rite       \u00a0;l<span class=\"sy0\">.</span>2=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>r1  ,l<span class=\"sy0\">.</span>2,<span class=\"nu0\">13</span><span class=\"br0\">)</span><br/>\u00a0<br/>  l1g=node<span class=\"sy0\">.</span>l1<span class=\"sy0\">.</span>0left     \u00a0;l<span class=\"sy0\">.</span>3=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>l1g ,l<span class=\"sy0\">.</span>3, <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*b1g=node.l1.0brother  \u00a0;l.3=overlay(b1g ,l.3, 5) */</span><br/>  r1g=node<span class=\"sy0\">.</span>l1<span class=\"sy0\">.</span>0rite     \u00a0;l<span class=\"sy0\">.</span>3=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>r1g ,l<span class=\"sy0\">.</span>3, <span class=\"nu0\">7</span><span class=\"br0\">)</span><br/>\u00a0<br/>  l2g=node<span class=\"sy0\">.</span>r1<span class=\"sy0\">.</span>0left     \u00a0;l<span class=\"sy0\">.</span>3=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>l2g ,l<span class=\"sy0\">.</span>3,<span class=\"nu0\">11</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*b2g=node.r1.0brother  \u00a0;l.3=overlay(b2g ,l.3,13) */</span><br/>  r2g=node<span class=\"sy0\">.</span>r1<span class=\"sy0\">.</span>0rite     \u00a0;l<span class=\"sy0\">.</span>3=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>r2g ,l<span class=\"sy0\">.</span>3,<span class=\"nu0\">15</span><span class=\"br0\">)</span><br/>\u00a0<br/>  l1ls=node<span class=\"sy0\">.</span>l1g<span class=\"sy0\">.</span>0left   \u00a0;l<span class=\"sy0\">.</span>4=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>l1ls,l<span class=\"sy0\">.</span>4, <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*b1ls=node.l1g.0brother\u00a0;l.4=overlay(b1ls,l.4, 3) */</span><br/>  r1ls=node<span class=\"sy0\">.</span>l1g<span class=\"sy0\">.</span>0rite   \u00a0;l<span class=\"sy0\">.</span>4=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>r1ls,l<span class=\"sy0\">.</span>4, <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>\u00a0<br/>  l1rs=node<span class=\"sy0\">.</span>r1g<span class=\"sy0\">.</span>0left   \u00a0;l<span class=\"sy0\">.</span>4=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>l1rs,l<span class=\"sy0\">.</span>4, <span class=\"nu0\">6</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*b1rs=node.r1g.0brother\u00a0;l.4=overlay(b1rs,l.4, 7) */</span><br/>  r1rs=node<span class=\"sy0\">.</span>r1g<span class=\"sy0\">.</span>0rite   \u00a0;l<span class=\"sy0\">.</span>4=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>r1rs,l<span class=\"sy0\">.</span>4, <span class=\"nu0\">8</span><span class=\"br0\">)</span><br/>\u00a0<br/>  l2ls=node<span class=\"sy0\">.</span>l2g<span class=\"sy0\">.</span>0left   \u00a0;l<span class=\"sy0\">.</span>4=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>l2ls,l<span class=\"sy0\">.</span>4,<span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*b2ls=node.l2g.0brother\u00a0;l.4=overlay(b2ls,l.4,11) */</span><br/>  r2ls=node<span class=\"sy0\">.</span>l2g<span class=\"sy0\">.</span>0rite   \u00a0;l<span class=\"sy0\">.</span>4=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>r2ls,l<span class=\"sy0\">.</span>4,<span class=\"nu0\">12</span><span class=\"br0\">)</span><br/>\u00a0<br/>  l2rs=node<span class=\"sy0\">.</span>r2g<span class=\"sy0\">.</span>0left   \u00a0;l<span class=\"sy0\">.</span>4=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>l2rs,l<span class=\"sy0\">.</span>4,<span class=\"nu0\">14</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*b2rs=node.r2g.0brother\u00a0;l.4=overlay(b2rs,l.4,15) */</span><br/>  r2rs=node<span class=\"sy0\">.</span>r2g<span class=\"sy0\">.</span>0rite   \u00a0;l<span class=\"sy0\">.</span>4=<span class=\"kw6\">overlay</span><span class=\"br0\">(</span>r2rs,l<span class=\"sy0\">.</span>4,<span class=\"nu0\">16</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Do</span> i=<span class=\"nu0\">1</span> <span class=\"kw2\">To</span> <span class=\"nu0\">4</span><br/>    <span class=\"kw1\">Say</span> <span class=\"kw6\">translate</span><span class=\"br0\">(</span>l<span class=\"sy0\">.</span>i,<span class=\"st0\">' '</span>,<span class=\"st0\">'0'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Say</span> <span class=\"st0\">''</span><br/>    <span class=\"kw3\">End</span><br/>  <span class=\"kw1\">Return</span></pre>"}, {"lang": "Ruby", "loc": 40, "block": "<pre class=\"ruby highlighted_source\">BinaryTreeNode = <span class=\"kw4\">Struct</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span><span class=\"re3\">:value</span>, <span class=\"re3\">:left</span>, <span class=\"re3\">:right</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">def</span> <span class=\"kw2\">self</span>.<span class=\"me1\">from_array</span><span class=\"br0\">(</span>nested_list<span class=\"br0\">)</span><br/>    value, left, right = nested_list<br/>    <span class=\"kw1\">if</span> value <br/>      <span class=\"kw2\">self</span>.<span class=\"me1\">new</span><span class=\"br0\">(</span>value, <span class=\"kw2\">self</span>.<span class=\"me1\">from_array</span><span class=\"br0\">(</span>left<span class=\"br0\">)</span>, <span class=\"kw2\">self</span>.<span class=\"me1\">from_array</span><span class=\"br0\">(</span>right<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> walk_nodes<span class=\"br0\">(</span>order, <span class=\"sy0\">&amp;</span>block<span class=\"br0\">)</span><br/>    order.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>node<span class=\"sy0\">|</span><br/>      <span class=\"kw1\">case</span> node<br/>      <span class=\"kw1\">when</span> <span class=\"re3\">:left</span>  <span class=\"kw1\">then</span> left <span class=\"sy0\">&amp;&amp;</span> left.<span class=\"me1\">walk_nodes</span><span class=\"br0\">(</span>order, <span class=\"sy0\">&amp;</span>block<span class=\"br0\">)</span><br/>      <span class=\"kw1\">when</span>\u00a0:<span class=\"kw2\">self</span>  <span class=\"kw1\">then</span> <span class=\"kw1\">yield</span> <span class=\"kw2\">self</span><br/>      <span class=\"kw1\">when</span> <span class=\"re3\">:right</span> <span class=\"kw1\">then</span> right <span class=\"sy0\">&amp;&amp;</span> right.<span class=\"me1\">walk_nodes</span><span class=\"br0\">(</span>order, <span class=\"sy0\">&amp;</span>block<span class=\"br0\">)</span><br/>      <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> each_preorder<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>b<span class=\"br0\">)</span>  walk_nodes<span class=\"br0\">(</span><span class=\"br0\">[</span>:<span class=\"kw2\">self</span>, <span class=\"re3\">:left</span>, <span class=\"re3\">:right</span><span class=\"br0\">]</span>, <span class=\"sy0\">&amp;</span>b<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">def</span> each_inorder<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>b<span class=\"br0\">)</span>   walk_nodes<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">:left</span>,\u00a0:<span class=\"kw2\">self</span>, <span class=\"re3\">:right</span><span class=\"br0\">]</span>, <span class=\"sy0\">&amp;</span>b<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">def</span> each_postorder<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>b<span class=\"br0\">)</span> walk_nodes<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">:left</span>, <span class=\"re3\">:right</span>,\u00a0:<span class=\"kw2\">self</span><span class=\"br0\">]</span>, <span class=\"sy0\">&amp;</span>b<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">def</span> each_levelorder<br/>    queue = <span class=\"br0\">[</span><span class=\"kw2\">self</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">until</span> queue.<span class=\"me1\">empty</span>?<br/>      node = queue.<span class=\"me1\">shift</span><br/>      <span class=\"kw1\">yield</span> node<br/>      queue <span class=\"sy0\">&lt;&lt;</span> node.<span class=\"me1\">left</span> <span class=\"kw1\">if</span> node.<span class=\"me1\">left</span><br/>      queue <span class=\"sy0\">&lt;&lt;</span> node.<span class=\"me1\">right</span> <span class=\"kw1\">if</span> node.<span class=\"me1\">right</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>root = BinaryTreeNode.<span class=\"me1\">from_array</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"br0\">[</span><span class=\"nu0\">2</span>, <span class=\"br0\">[</span><span class=\"nu0\">4</span>, <span class=\"nu0\">7</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">3</span>, <span class=\"br0\">[</span><span class=\"nu0\">6</span>, <span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span>, <span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <br/>\u00a0<br/>BinaryTreeNode.<span class=\"me1\">instance_methods</span>.<span class=\"kw3\">select</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>m<span class=\"sy0\">|</span> m=~<span class=\"sy0\">/</span>.<span class=\"sy0\">+</span>order<span class=\"sy0\">/</span><span class=\"br0\">}</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>mthd<span class=\"sy0\">|</span><br/>  <span class=\"kw3\">printf</span> <span class=\"st0\">\"%-11s \"</span>, mthd<span class=\"br0\">[</span><span class=\"nu0\">5</span>..<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">':'</span><br/>  root.<span class=\"me1\">send</span><span class=\"br0\">(</span>mthd<span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>node<span class=\"sy0\">|</span> <span class=\"kw3\">print</span> <span class=\"st0\">\"#{node.value} \"</span><span class=\"br0\">}</span><br/>  <span class=\"kw3\">puts</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Rust", "loc": 177, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#![feature(box_syntax, box_patterns)]<br/>\u00a0<br/>use std::collections::VecDeque;<br/>\u00a0<br/>#[derive(Debug)]<br/>struct TreeNode&lt;T&gt; {<br/>    value: T,<br/>    left: Option&lt;Box&lt;TreeNode&lt;T&gt;&gt;&gt;,<br/>    right: Option&lt;Box&lt;TreeNode&lt;T&gt;&gt;&gt;,<br/>}<br/>\u00a0<br/>enum TraversalMethod {<br/>    PreOrder,<br/>    InOrder,<br/>    PostOrder,<br/>    LevelOrder,<br/>}<br/>\u00a0<br/>impl&lt;T&gt; TreeNode&lt;T&gt; {<br/>    pub fn new(arr: &amp;[[i8; 3]]) -&gt; TreeNode&lt;i8&gt; {<br/>\u00a0<br/>        let l = match arr[0][1] {<br/>            -1 =&gt; None,<br/>            i @ _ =&gt; Some(Box::new(TreeNode::&lt;i8&gt;::new(&amp;arr[(i - arr[0][0]) as usize..]))),<br/>        };<br/>        let r = match arr[0][2] {<br/>            -1 =&gt; None,<br/>            i @ _ =&gt; Some(Box::new(TreeNode::&lt;i8&gt;::new(&amp;arr[(i - arr[0][0]) as usize..]))),<br/>        };<br/>\u00a0<br/>        TreeNode {<br/>            value: arr[0][0],<br/>            left: l,<br/>            right: r,<br/>        }<br/>    }<br/>\u00a0<br/>    pub fn traverse(&amp;self, tr: &amp;TraversalMethod) -&gt; Vec&lt;&amp;TreeNode&lt;T&gt;&gt; {<br/>        match tr {<br/>            &amp;TraversalMethod::PreOrder =&gt; self.iterative_preorder(),<br/>            &amp;TraversalMethod::InOrder =&gt; self.iterative_inorder(),<br/>            &amp;TraversalMethod::PostOrder =&gt; self.iterative_postorder(),<br/>            &amp;TraversalMethod::LevelOrder =&gt; self.iterative_levelorder(),<br/>        }<br/>    }<br/>\u00a0<br/>    fn iterative_preorder(&amp;self) -&gt; Vec&lt;&amp;TreeNode&lt;T&gt;&gt; {<br/>        let mut stack: Vec&lt;&amp;TreeNode&lt;T&gt;&gt; = Vec::new();<br/>        let mut res: Vec&lt;&amp;TreeNode&lt;T&gt;&gt; = Vec::new();<br/>\u00a0<br/>        stack.push(self);<br/>        while\u00a0!stack.is_empty() {<br/>            let node = stack.pop().unwrap();<br/>            res.push(node);<br/>            match node.right {<br/>                None =&gt; {}<br/>                Some(box ref n) =&gt; stack.push(n),<br/>            }<br/>            match node.left {<br/>                None =&gt; {}<br/>                Some(box ref n) =&gt; stack.push(n),<br/>            }<br/>        }<br/>        res<br/>    }<br/>\u00a0<br/>    // Leftmost to rightmost<br/>    fn iterative_inorder(&amp;self) -&gt; Vec&lt;&amp;TreeNode&lt;T&gt;&gt; {<br/>        let mut stack: Vec&lt;&amp;TreeNode&lt;T&gt;&gt; = Vec::new();<br/>        let mut res: Vec&lt;&amp;TreeNode&lt;T&gt;&gt; = Vec::new();<br/>        let mut p = self;<br/>\u00a0<br/>        loop {<br/>            // Stack parents and right children while left-descending<br/>            loop {<br/>                match p.right {<br/>                    None =&gt; {}<br/>                    Some(box ref n) =&gt; stack.push(n),<br/>                }<br/>                stack.push(p);<br/>                match p.left {<br/>                    None =&gt; break,<br/>                    Some(box ref n) =&gt; p = n,<br/>                }<br/>            }<br/>            // Visit the nodes with no right child<br/>            p = stack.pop().unwrap();<br/>            while\u00a0!stack.is_empty() &amp;&amp; p.right.is_none() {<br/>                res.push(p);<br/>                p = stack.pop().unwrap();<br/>            }<br/>            // First node that can potentially have a right child:<br/>            res.push(p);<br/>            if stack.is_empty() {<br/>                break;<br/>            } else {<br/>                p = stack.pop().unwrap();<br/>            }<br/>        }<br/>        res<br/>    }<br/>\u00a0<br/>    // Left-to-right postorder is same sequence as right-to-left preorder, reversed<br/>    fn iterative_postorder(&amp;self) -&gt; Vec&lt;&amp;TreeNode&lt;T&gt;&gt; {<br/>        let mut stack: Vec&lt;&amp;TreeNode&lt;T&gt;&gt; = Vec::new();<br/>        let mut res: Vec&lt;&amp;TreeNode&lt;T&gt;&gt; = Vec::new();<br/>\u00a0<br/>        stack.push(self);<br/>        while\u00a0!stack.is_empty() {<br/>            let node = stack.pop().unwrap();<br/>            res.push(node);<br/>            match node.left {<br/>                None =&gt; {}<br/>                Some(box ref n) =&gt; stack.push(n),<br/>            }<br/>            match node.right {<br/>                None =&gt; {}<br/>                Some(box ref n) =&gt; stack.push(n),<br/>            }<br/>        }<br/>        let rev_iter = res.iter().rev();<br/>        let mut rev: Vec&lt;&amp;TreeNode&lt;T&gt;&gt; = Vec::new();<br/>        for elem in rev_iter {<br/>            rev.push(elem);<br/>        }<br/>        rev<br/>    }<br/>\u00a0<br/>    fn iterative_levelorder(&amp;self) -&gt; Vec&lt;&amp;TreeNode&lt;T&gt;&gt; {<br/>        let mut queue: VecDeque&lt;&amp;TreeNode&lt;T&gt;&gt; = VecDeque::new();<br/>        let mut res: Vec&lt;&amp;TreeNode&lt;T&gt;&gt; = Vec::new();<br/>\u00a0<br/>        queue.push_back(self);<br/>        while\u00a0!queue.is_empty() {<br/>            let node = queue.pop_front().unwrap();<br/>            res.push(node);<br/>            match node.left {<br/>                None =&gt; {}<br/>                Some(box ref n) =&gt; queue.push_back(n),<br/>            }<br/>            match node.right {<br/>                None =&gt; {}<br/>                Some(box ref n) =&gt; queue.push_back(n),<br/>            }<br/>        }<br/>        res<br/>    }<br/>}<br/>\u00a0<br/>fn main() {<br/>    // Array representation of task tree<br/>    let arr_tree = [[1, 2, 3],<br/>                    [2, 4, 5],<br/>                    [3, 6, -1],<br/>                    [4, 7, -1],<br/>                    [5, -1, -1],<br/>                    [6, 8, 9],<br/>                    [7, -1, -1],<br/>                    [8, -1, -1],<br/>                    [9, -1, -1]];<br/>\u00a0<br/>    let root = TreeNode::&lt;i8&gt;::new(&amp;arr_tree);<br/>\u00a0<br/>    for method_label in [(TraversalMethod::PreOrder, \"pre-order:\"),<br/>                         (TraversalMethod::InOrder, \"in-order:\"),<br/>                         (TraversalMethod::PostOrder, \"post-order:\"),<br/>                         (TraversalMethod::LevelOrder, \"level-order:\")]<br/>                            .iter() {<br/>        print!(\"{}\\t\", method_label.1);<br/>        for n in root.traverse(&amp;method_label.0) {<br/>            print!(\" {}\", n.value);<br/>        }<br/>        print!(\"\\n\");<br/>    }<br/>}<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 55, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> IntNode<span class=\"br0\">(</span>value<span class=\"sy0\">:</span> Int, left<span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>IntNode<span class=\"br0\">]</span> <span class=\"sy0\">=</span> None, right<span class=\"sy0\">:</span> Option<span class=\"br0\">[</span>IntNode<span class=\"br0\">]</span> <span class=\"sy0\">=</span> None<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> preorder<span class=\"br0\">(</span>f<span class=\"sy0\">:</span> IntNode <span class=\"sy0\">=&gt;</span> Unit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    f<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span><br/>    left.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">preorder</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// Same as: if(left.isDefined) left.get.preorder(f)</span><br/>    right.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">preorder</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> postorder<span class=\"br0\">(</span>f<span class=\"sy0\">:</span> IntNode <span class=\"sy0\">=&gt;</span> Unit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    left.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">postorder</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    right.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">postorder</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    f<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> inorder<span class=\"br0\">(</span>f<span class=\"sy0\">:</span> IntNode <span class=\"sy0\">=&gt;</span> Unit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    left.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">inorder</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    f<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span><br/>    right.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"me1\">inorder</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> levelorder<span class=\"br0\">(</span>f<span class=\"sy0\">:</span> IntNode <span class=\"sy0\">=&gt;</span> Unit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> loVisit<span class=\"br0\">(</span>ls<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>IntNode<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> ls <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Nil <span class=\"sy0\">=&gt;</span> None<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> node <span class=\"sy0\">::</span> rest <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span>node<span class=\"br0\">)</span><span class=\"sy0\">;</span> loVisit<span class=\"br0\">(</span>rest ++ node.<span class=\"me1\">left</span> ++ node.<span class=\"me1\">right</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    loVisit<span class=\"br0\">(</span>List<span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> TreeTraversal <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">implicit</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> intNode2SomeIntNode<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> IntNode<span class=\"br0\">)</span> <span class=\"sy0\">=</span> Some<span class=\"br0\">[</span>IntNode<span class=\"br0\">]</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> tree <span class=\"sy0\">=</span> IntNode<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<br/>    IntNode<span class=\"br0\">(</span><span class=\"nu0\">2</span>,<br/>      IntNode<span class=\"br0\">(</span><span class=\"nu0\">4</span>,<br/>        IntNode<span class=\"br0\">(</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>      IntNode<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,<br/>    IntNode<span class=\"br0\">(</span><span class=\"nu0\">3</span>,<br/>      IntNode<span class=\"br0\">(</span><span class=\"nu0\">6</span>,<br/>        IntNode<span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span>,<br/>        IntNode<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  List<span class=\"br0\">(</span><br/>    <span class=\"st0\">\"  preorder: \"</span> -<span class=\"sy0\">&gt;</span> tree.<span class=\"me1\">preorder</span> <span class=\"sy0\">_</span>, <span class=\"co1\">// `_` denotes the function value of type `IntNode =&gt; Unit` (returning nothing)</span><br/>    <span class=\"st0\">\"   inorder: \"</span> -<span class=\"sy0\">&gt;</span> tree.<span class=\"me1\">inorder</span> <span class=\"sy0\">_</span>,<br/>    <span class=\"st0\">\" postorder: \"</span> -<span class=\"sy0\">&gt;</span> tree.<span class=\"me1\">postorder</span> <span class=\"sy0\">_</span>,<br/>    <span class=\"st0\">\"levelorder: \"</span> -<span class=\"sy0\">&gt;</span> tree.<span class=\"me1\">levelorder</span> <span class=\"sy0\">_</span><span class=\"br0\">)</span> foreach <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>name, func<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> StringBuilder<span class=\"br0\">(</span>name<span class=\"br0\">)</span><br/>        func<span class=\"br0\">(</span>n <span class=\"sy0\">=&gt;</span> s ++<span class=\"sy0\">=</span> n.<span class=\"me1\">value</span>.<span class=\"me1\">toString</span> + <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        println<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "SequenceL", "loc": 44, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>main(args(2))\u00a0:=<br/>    \"preorder: \" ++ toString(preOrder(testTree)) ++<br/>    \"\\ninoder: \" ++ toString(inOrder(testTree)) ++<br/>    \"\\npostorder: \" ++ toString(postOrder(testTree)) ++<br/>    \"\\nlevel-order: \" ++ toString(levelOrder(testTree));<br/>\u00a0<br/>Node\u00a0::= (value\u00a0: int, left\u00a0: Node, right\u00a0: Node);<br/>\u00a0<br/>preOrder(n)\u00a0:= [n.value] ++<br/>               (preOrder(n.left) when isDefined(n, left) else []) ++<br/>               (preOrder(n.right) when isDefined(n, right) else []);<br/>\u00a0<br/>inOrder(n)\u00a0:=  (inOrder(n.left) when isDefined(n, left) else []) ++<br/>               [n.value] ++<br/>               (inOrder(n.right) when isDefined(n, right) else []);<br/>\u00a0<br/>postOrder(n)\u00a0:= (postOrder(n.left) when isDefined(n, left) else []) ++<br/>                (postOrder(n.right) when isDefined(n, right) else []) ++<br/>                [n.value];<br/>\u00a0<br/>levelOrder(n)\u00a0:= levelOrderHelper([n]);<br/>levelOrderHelper(ns(1))\u00a0:=<br/>    let<br/>        n\u00a0:= head(ns);<br/>    in<br/>        [] when size(ns) = 0 else<br/>        [n.value] ++ levelOrderHelper(tail(ns) ++<br/>        ([n.left] when isDefined(n, left) else []) ++<br/>        ([n.right] when isDefined(n, right) else []));<br/>\u00a0<br/>testTree\u00a0:=<br/>    (value\u00a0: 1,<br/>     left\u00a0: (value\u00a0: 2,<br/>             left\u00a0: (value\u00a0: 4,<br/>                     left\u00a0: (value\u00a0: 7)),<br/>                     right\u00a0: (value\u00a0: 5)),<br/>             right\u00a0: (value\u00a0: 3,<br/>                      left\u00a0: (value\u00a0: 6,<br/>                              left\u00a0: (value\u00a0: 8),<br/>                              right\u00a0: (value\u00a0: 9))<br/>             )<br/>    );<br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 28, "block": "<pre class=\"ruby highlighted_source\">func preorder<span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    t\u00a0? <span class=\"br0\">[</span>t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, __FUNC__<span class=\"br0\">(</span>t<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>..., __FUNC__<span class=\"br0\">(</span>t<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>...<span class=\"br0\">]</span>\u00a0: <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func inorder<span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    t\u00a0? <span class=\"br0\">[</span>__FUNC__<span class=\"br0\">(</span>t<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>..., t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, __FUNC__<span class=\"br0\">(</span>t<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>...<span class=\"br0\">]</span>\u00a0: <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func postorder<span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    t\u00a0? <span class=\"br0\">[</span>__FUNC__<span class=\"br0\">(</span>t<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span>..., __FUNC__<span class=\"br0\">(</span>t<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span>..., t<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span>\u00a0: <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func depth<span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var a = <span class=\"br0\">[</span>t<span class=\"br0\">]</span>;<br/>    var ret = <span class=\"br0\">[</span><span class=\"br0\">]</span>;<br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>a.<span class=\"me1\">len</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        var v = <span class=\"br0\">(</span>a.<span class=\"me1\">shift</span> \\\\ <span class=\"kw1\">next</span><span class=\"br0\">)</span>;<br/>        ret \u00ab\u00a0v<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>;<br/>        a <span class=\"sy0\">+</span>= <span class=\"br0\">[</span>v<span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">]</span>;<br/>    <span class=\"br0\">}</span>;<br/>    <span class=\"kw2\">return</span> ret;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>var x = <span class=\"br0\">[</span><span class=\"nu0\">1</span>,<span class=\"br0\">[</span><span class=\"nu0\">2</span>,<span class=\"br0\">[</span><span class=\"nu0\">4</span>,<span class=\"br0\">[</span><span class=\"nu0\">7</span><span class=\"br0\">]</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">5</span><span class=\"br0\">]</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">3</span>,<span class=\"br0\">[</span><span class=\"nu0\">6</span>,<span class=\"br0\">[</span><span class=\"nu0\">8</span><span class=\"br0\">]</span>,<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span>;<br/>say <span class=\"st0\">\"pre:   #{preorder(x)}\"</span>;<br/>say <span class=\"st0\">\"in:    #{inorder(x)}\"</span>;<br/>say <span class=\"st0\">\"post:  #{postorder(x)}\"</span>;<br/>say <span class=\"st0\">\"depth: #{depth(x)}\"</span>;</pre>"}, {"lang": "Tcl", "loc": 50, "block": "<pre class=\"tcl highlighted_source\">oo::<span class=\"me1\">class</span> create tree <span class=\"br0\">{</span><br/>    <span class=\"co1\"># Basic tree data structure stuff...</span><br/>    <span class=\"kw1\">variable</span> val l r<br/>    constructor <span class=\"br0\">{</span>value <span class=\"br0\">{</span>left <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>right <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> val <span class=\"re0\">$value</span><br/>\t<span class=\"kw1\">set</span> l <span class=\"re0\">$left</span><br/>\t<span class=\"kw1\">set</span> r <span class=\"re0\">$right</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> value <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$val</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> left  <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$l</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> right <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"re0\">$r</span><span class=\"br0\">}</span><br/>    destructor <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$l</span> ne <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$l</span> destroy<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$r</span> ne <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$r</span> destroy<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># Traversal methods</span><br/>    <span class=\"kw1\">method</span> preorder <span class=\"br0\">{</span>varName script <span class=\"br0\">{</span>level <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">upvar</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> level<span class=\"br0\">]</span> <span class=\"re0\">$varName</span> var<br/>\t<span class=\"kw1\">set</span> var <span class=\"re0\">$val</span><br/>\t<span class=\"kw1\">uplevel</span> <span class=\"re0\">$level</span> <span class=\"re0\">$script</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$l</span> ne <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$l</span> preorder <span class=\"re0\">$varName</span> <span class=\"re0\">$script</span> <span class=\"re0\">$level</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$r</span> ne <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$r</span> preorder <span class=\"re0\">$varName</span> <span class=\"re0\">$script</span> <span class=\"re0\">$level</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> inorder <span class=\"br0\">{</span>varName script <span class=\"br0\">{</span>level <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">upvar</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> level<span class=\"br0\">]</span> <span class=\"re0\">$varName</span> var<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$l</span> ne <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$l</span> inorder <span class=\"re0\">$varName</span> <span class=\"re0\">$script</span> <span class=\"re0\">$level</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> var <span class=\"re0\">$val</span><br/>\t<span class=\"kw1\">uplevel</span> <span class=\"re0\">$level</span> <span class=\"re0\">$script</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$r</span> ne <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$r</span> inorder <span class=\"re0\">$varName</span> <span class=\"re0\">$script</span> <span class=\"re0\">$level</span><span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> postorder <span class=\"br0\">{</span>varName script <span class=\"br0\">{</span>level <span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">upvar</span> <span class=\"br0\">[</span><span class=\"kw2\">incr</span> level<span class=\"br0\">]</span> <span class=\"re0\">$varName</span> var<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$l</span> ne <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$l</span> postorder <span class=\"re0\">$varName</span> <span class=\"re0\">$script</span> <span class=\"re0\">$level</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$r</span> ne <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$r</span> postorder <span class=\"re0\">$varName</span> <span class=\"re0\">$script</span> <span class=\"re0\">$level</span><span class=\"br0\">}</span><br/>\t<span class=\"kw1\">set</span> var <span class=\"re0\">$val</span><br/>\t<span class=\"kw1\">uplevel</span> <span class=\"re0\">$level</span> <span class=\"re0\">$script</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">method</span> levelorder <span class=\"br0\">{</span>varName script<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$varName</span> var<br/>\t<span class=\"kw1\">set</span> nodes <span class=\"br0\">[</span><span class=\"kw2\">list</span> <span class=\"br0\">[</span>self<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\"># A queue of nodes to process</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$nodes</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">set</span> nodes <span class=\"br0\">[</span>lassign <span class=\"re0\">$nodes</span> n<span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">set</span> var <span class=\"br0\">[</span><span class=\"re0\">$n</span> value<span class=\"br0\">]</span><br/>\t    <span class=\"kw1\">uplevel</span> <span class=\"nu0\">1</span> <span class=\"re0\">$script</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re0\">$n</span> left<span class=\"br0\">]</span> ne <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> nodes <span class=\"br0\">[</span><span class=\"re0\">$n</span> left<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"re0\">$n</span> right<span class=\"br0\">]</span> ne <span class=\"st0\">\"\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> nodes <span class=\"br0\">[</span><span class=\"re0\">$n</span> right<span class=\"br0\">]</span><span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "UNIX Shell", "loc": 84, "block": "<pre class=\"bash highlighted_source\"><span class=\"re2\">left</span>=<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"re2\">right</span>=<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"re2\">value</span>=<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co0\"># node node#, left#, right#, value</span><br/><span class=\"co0\">#</span><br/><span class=\"co0\"># if value is empty, use node#</span><br/>\u00a0<br/>node<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"re2\">nx</span>=<span class=\"co1\">${1:-'Missing node index'}</span><br/>  <span class=\"re2\">leftx</span>=<span class=\"co1\">${2}</span><br/>  <span class=\"re2\">rightx</span>=<span class=\"co1\">${3}</span><br/>  <span class=\"re2\">val</span>=<span class=\"co1\">${4:-$1}</span><br/>  value<span class=\"br0\">[</span><span class=\"re1\">$nx</span><span class=\"br0\">]</span>=<span class=\"st0\">\"<span class=\"es2\">$val</span>\"</span><br/>  left<span class=\"br0\">[</span><span class=\"re1\">$nx</span><span class=\"br0\">]</span>=<span class=\"st0\">\"<span class=\"es2\">$leftx</span>\"</span><br/>  right<span class=\"br0\">[</span><span class=\"re1\">$nx</span><span class=\"br0\">]</span>=<span class=\"st0\">\"<span class=\"es2\">$rightx</span>\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co0\"># define the tree</span><br/>\u00a0<br/>node <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><br/>node <span class=\"nu0\">2</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><br/>node <span class=\"nu0\">3</span> <span class=\"nu0\">6</span><br/>node <span class=\"nu0\">4</span> <span class=\"nu0\">7</span><br/>node <span class=\"nu0\">5</span><br/>node <span class=\"nu0\">6</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span><br/>node <span class=\"nu0\">7</span><br/>node <span class=\"nu0\">8</span><br/>node <span class=\"nu0\">9</span><br/>\u00a0<br/><span class=\"co0\"># walk NODE# ORDER</span><br/>\u00a0<br/>walk<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw3\">local</span> <span class=\"re2\">nx</span>=<span class=\"co1\">${1-\"Missing index\"}</span><br/>  <span class=\"kw3\">shift</span><br/>  <span class=\"kw1\">for</span> branch <span class=\"kw1\">in</span> <span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"436703\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span>\u00a0; <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">case</span> <span class=\"st0\">\"<span class=\"es2\">$branch</span>\"</span> <span class=\"kw1\">in</span><br/>      left<span class=\"br0\">)</span>  <span class=\"kw1\">if</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es3\">${left[$nx]}</span>\"</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>;      <span class=\"kw1\">then</span> walk <span class=\"co1\">${left[$nx]}</span>  $<span class=\"sy0\">@</span>\u00a0; <span class=\"kw1\">fi</span> <span class=\"sy0\">;;</span><br/>      right<span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"st0\">\"<span class=\"es3\">${right[$nx]}</span>\"</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>;     <span class=\"kw1\">then</span> walk <span class=\"co1\">${right[$nx]}</span> $<span class=\"sy0\">@</span>\u00a0; <span class=\"kw1\">fi</span> <span class=\"sy0\">;;</span><br/>      self<span class=\"br0\">)</span>  <span class=\"kw3\">printf</span> <span class=\"st0\">\"%d \"</span> <span class=\"st0\">\"<span class=\"es3\">${value[$nx]}</span>\"</span>  <span class=\"sy0\">;;</span><br/>    <span class=\"kw1\">esac</span><br/>  <span class=\"kw1\">done</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>apush<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw3\">local</span> <span class=\"re2\">var</span>=<span class=\"st0\">\"$1\"</span><br/>  <span class=\"kw3\">eval</span> <span class=\"st0\">\"<span class=\"es2\">$var</span>=( <span class=\"es1\">\\\"</span><span class=\"es1\">\\$</span>{<span class=\"es2\">$var</span>[@]}<span class=\"es1\">\\\"</span> <span class=\"es1\">\\\"</span>$2<span class=\"es1\">\\\"</span> )\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>showname<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw3\">printf</span> <span class=\"st0\">\"%-12s \"</span> <span class=\"st0\">\"$1:\"</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>showdata<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  showname <span class=\"st0\">\"$1\"</span><br/>  <span class=\"kw3\">shift</span><br/>  walk <span class=\"st0\">\"<a class=\"__cf_email__\" data-cfemail=\"e2c6a2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\"</span><br/>  <span class=\"kw3\">echo</span> <span class=\"st_h\">''</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>preorder<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"br0\">{</span> showdata <span class=\"re1\">$FUNCNAME</span> <span class=\"re4\">$1</span> self left right\u00a0; <span class=\"br0\">}</span><br/>inorder<span class=\"br0\">(</span><span class=\"br0\">)</span>   <span class=\"br0\">{</span> showdata <span class=\"re1\">$FUNCNAME</span> <span class=\"re4\">$1</span> left self right\u00a0; <span class=\"br0\">}</span><br/>postorder<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> showdata <span class=\"re1\">$FUNCNAME</span> <span class=\"re4\">$1</span> left right self\u00a0; <span class=\"br0\">}</span><br/>levelorder<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  showname <span class=\"st_h\">'level-order'</span><br/>  <span class=\"re2\">queue</span>=<span class=\"br0\">(</span> <span class=\"re4\">$1</span> <span class=\"br0\">)</span><br/>  <span class=\"re2\">x</span>=<span class=\"nu0\">0</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re1\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"co1\">${#queue[*]}</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"kw1\">do</span><br/>    <span class=\"re2\">value</span>=<span class=\"st0\">\"<span class=\"es3\">${queue[$x]}</span>\"</span><br/>    <span class=\"kw3\">printf</span> <span class=\"st0\">\"%d \"</span> <span class=\"st0\">\"<span class=\"es2\">$value</span>\"</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw2\">more</span> <span class=\"kw1\">in</span> <span class=\"st0\">\"<span class=\"es3\">${left[$value]}</span>\"</span> <span class=\"st0\">\"<span class=\"es3\">${right[$value]}</span>\"</span>\u00a0; <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re5\">-n</span> <span class=\"st0\">\"<span class=\"es2\">$more</span>\"</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"kw1\">then</span><br/>\tapush queue <span class=\"st0\">\"<span class=\"es2\">$more</span>\"</span><br/>      <span class=\"kw1\">fi</span><br/>    <span class=\"kw1\">done</span><br/>   \u00a0: $<span class=\"br0\">(</span><span class=\"br0\">(</span>x++<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">done</span><br/>  <span class=\"kw3\">echo</span> <span class=\"st_h\">''</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>preorder   <span class=\"nu0\">1</span><br/>inorder    <span class=\"nu0\">1</span><br/>postorder  <span class=\"nu0\">1</span><br/>levelorder <span class=\"nu0\">1</span></pre>"}, {"lang": "Ursala", "loc": 14, "block": "<pre class=\"text highlighted_source\">tree = <br/>\u00a0<br/>1^:&lt;<br/>   2^: &lt;4^: &lt;7^: &lt;&gt;, 0&gt;, 5^: &lt;&gt;&gt;,<br/>   3^: &lt;6^: &lt;8^: &lt;&gt;, 9^: &lt;&gt;&gt;, 0&gt;&gt;<br/>\u00a0<br/>pre  = ~&amp;dvLPCo<br/>post = ~&amp;vLPdNCTo<br/>in   = ~&amp;vvhPdvtL2CTiQo<br/>lev  = ~&amp;iNCaadSPfavSLiF3RTaq<br/>\u00a0<br/>#cast\u00a0%nLL<br/>\u00a0<br/>main = &lt;.pre,in,post,lev&gt; tree</pre>"}, {"lang": "zkl", "loc": 31, "block": "<pre class=\"text highlighted_source\">class Node{ var [mixin=Node]left,right; var v;<br/>   fcn init(val,[Node]l=Void,[Node]r=Void) { v,left,right=vm.arglist }<br/>}<br/>\u00a0<br/>class BTree{ var [mixin=Node] root;<br/>   fcn init(r){ root=r }<br/>   const VISIT=Void, LEFT=\"left\", RIGHT=\"right\";<br/>   fcn preOrder  { traverse(VISIT,LEFT, RIGHT) }<br/>   fcn inOrder   { traverse(LEFT, VISIT,RIGHT) }<br/>   fcn postOrder { traverse(LEFT, RIGHT,VISIT) }<br/>   fcn [private] traverse(order){  //--&gt; list of Nodes<br/>      sink:=List();<br/>      fcn(sink,[Node]n,order){<br/>         if(n){ foreach o in (order){<br/>\t    if(VISIT==o) sink.write(n);<br/>\t    else self.fcn(sink,n.setVar(o),order);  // actually get var, eg n.left<br/>\t }}<br/>      }(sink,root,vm.arglist);<br/>      sink<br/>   }<br/>   fcn levelOrder{  // breadth first<br/>      sink:=List(); q:=List(root);<br/>      while(q){<br/>         n:=q.pop(0); l:=n.left; r:=n.right;<br/>\t sink.write(n);<br/>\t if(l) q.append(l);<br/>\t if(r) q.append(r);<br/>      }<br/>      sink<br/>   }<br/>}</pre>"}]}