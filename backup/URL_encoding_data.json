{"task": "URL_encoding", "blocks": [{"lang": "Ada", "loc": 7, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> AWS.<span class=\"me1\">URL</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">procedure</span> Encode <span class=\"kw1\">is</span><br/>   Normal\u00a0: <span class=\"kw3\">constant</span> String\u00a0:= <span class=\"st0\">\"http://foo bar/\"</span>;<br/><span class=\"kw1\">begin</span><br/>   Put_Line <span class=\"br0\">(</span>AWS.<span class=\"me1\">URL</span>.<span class=\"me1\">Encode</span> <span class=\"br0\">(</span>Normal<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Encode;</pre>"}, {"lang": "AutoHotkey", "loc": 19, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% UriEncode<span class=\"br0\">(</span><span class=\"st0\">\"http://foo bar/\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; Modified from http://goo.gl/0a0iJq</span><br/>UriEncode<span class=\"br0\">(</span>Uri<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>Var<span class=\"sy0\">,</span> StrPut<span class=\"br0\">(</span>Uri<span class=\"sy0\">,</span> <span class=\"st0\">\"UTF-8\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>\tStrPut<span class=\"br0\">(</span>Uri<span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>Var<span class=\"sy0\">,</span> <span class=\"st0\">\"UTF-8\"</span><span class=\"br0\">)</span><br/>\tf <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_FormatInteger\"><span class=\"kw2\">A_FormatInteger</span></a><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/SetFormat.htm\"><span class=\"kw3\">SetFormat</span></a><span class=\"sy0\">,</span> IntegerFast<span class=\"sy0\">,</span> H<br/>\t<span class=\"kw1\">While</span> Code <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumGet</span></a><span class=\"br0\">(</span>Var<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"st0\">\"UChar\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">If</span> <span class=\"br0\">(</span>Code <span class=\"sy0\">&gt;=</span> 0x30 <span class=\"sy0\">&amp;&amp;</span> Code <span class=\"sy0\">&lt;=</span> 0x39 <span class=\"co1\">; 0-9</span><br/>\t\t\t|| Code <span class=\"sy0\">&gt;=</span> 0x41 <span class=\"sy0\">&amp;&amp;</span> Code <span class=\"sy0\">&lt;=</span> 0x5A <span class=\"co1\">; A-Z</span><br/>\t\t\t|| Code <span class=\"sy0\">&gt;=</span> 0x61 <span class=\"sy0\">&amp;&amp;</span> Code <span class=\"sy0\">&lt;=</span> 0x7A<span class=\"br0\">)</span> <span class=\"co1\">; a-z</span><br/>\t\t\tRes <span class=\"sy0\">.=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Chr</span></a><span class=\"br0\">(</span>Code<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">Else</span><br/>\t\t\tRes <span class=\"sy0\">.=</span> <span class=\"st0\">\"%\"</span> <span class=\"sy0\">.</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>Code <span class=\"sy0\">+</span> 0x100<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/SetFormat.htm\"><span class=\"kw3\">SetFormat</span></a><span class=\"sy0\">,</span> IntegerFast<span class=\"sy0\">,</span> <span class=\"re0\">%f%</span><br/>\t<span class=\"kw1\">Return</span><span class=\"sy0\">,</span> Res<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Apex", "loc": 1, "block": "<pre class=\"text highlighted_source\">EncodingUtil.urlEncode('http://foo bar/', 'UTF-8')</pre>"}, {"lang": "AppleScript", "loc": 1, "block": "<pre class=\"applescript highlighted_source\">AST URL encode <span class=\"st0\">\"http://foo bar/\"</span></pre>"}, {"lang": "AWK", "loc": 24, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i = <span class=\"nu0\">0</span>; i <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">255</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span><br/>\t\tord<span class=\"br0\">[</span><span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"%c\"</span>, i<span class=\"br0\">)</span><span class=\"br0\">]</span> = i<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Encode string with application/x-www-form-urlencoded escapes.</span><br/><span class=\"kw6\">function</span> escape<span class=\"br0\">(</span>str,    c, len, res<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tlen = <span class=\"kw4\">length</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>\tres = <span class=\"st0\">\"\"</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i = <span class=\"nu0\">1</span>; i <span class=\"sy2\">&lt;=</span> len; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tc = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>str, i, <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>c <span class=\"sy4\">~</span> <span class=\"sy3\">/</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy3\">-</span>9A<span class=\"sy3\">-</span>Za<span class=\"sy3\">-</span>z<span class=\"br0\">]</span><span class=\"sy3\">/</span><span class=\"br0\">)</span><br/>\t\t<span class=\"co1\">#if (c ~ /[-._*0-9A-Za-z]/)</span><br/>\t\t\tres = res c<br/>\t\t<span class=\"co1\">#else if (c == \" \")</span><br/>\t\t<span class=\"co1\">#\tres = res \"+\"</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\tres = res <span class=\"st0\">\"%\"</span> <span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"%02X\"</span>, ord<span class=\"br0\">[</span>c<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw6\">return</span> res<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Escape every line of input.</span><br/><span class=\"br0\">{</span> <span class=\"kw5\">print</span> escape<span class=\"br0\">(</span><span class=\"re0\">$0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span></pre>"}, {"lang": "BBC BASIC", "loc": 13, "block": "<pre class=\"text highlighted_source\">      PRINT FNurlencode(\"http://foo bar/\")<br/>      END<br/>\u00a0<br/>      DEF FNurlencode(url$)<br/>      LOCAL c%, i%<br/>      WHILE i% &lt; LEN(url$)<br/>        i% += 1<br/>        c% = ASCMID$(url$, i%)<br/>        IF c%&lt;&amp;30 OR c%&gt;&amp;7A OR c%&gt;&amp;39 AND c%&lt;&amp;41 OR c%&gt;&amp;5A AND c%&lt;&amp;61 THEN<br/>          url$ = LEFT$(url$,i%-1) + \"%\" + RIGHT$(\"0\"+STR$~c%,2) + MID$(url$,i%+1)<br/>        ENDIF<br/>      ENDWHILE<br/>      = url$</pre>"}, {"lang": "Bracmat", "loc": 42, "block": "<pre class=\"text highlighted_source\">(     ( encode<br/>      =   encoded exceptions octet string<br/>        .    \u00a0!arg:(?exceptions.?string)<br/>            &amp;\u00a0:?encoded<br/>            &amp; @(\u00a0!string<br/>              \u00a0:  \u00a0?<br/>                   (\u00a0%@?octet\u00a0?<br/>                   &amp;    \u00a0!encoded<br/>                         (  \u00a0!octet<br/>                          \u00a0: ( ~&lt;0:~&gt;9<br/>                             | ~&lt;A:~&gt;Z<br/>                             | ~&lt;a:~&gt;z<br/>                             )<br/>                         |   @(!exceptions:?\u00a0!octet\u00a0?)<br/>                           &amp;\u00a0!octet<br/>                         | \"%\" d2x$(asc$!octet)<br/>                         )<br/>                    \u00a0:\u00a0?encoded<br/>                   &amp; ~<br/>                   )<br/>               )<br/>          | str$!encoded<br/>      )<br/>    &amp; out$\"without exceptions:<br/>\"<br/>    &amp; out$(encode$(.\"http://foo bar/\"))<br/>    &amp; out$(encode$(.\"mailto:Ivan\"))<br/>    &amp; out$(encode$(.\"Aim &lt;<a class=\"__cf_email__\" data-cfemail=\"650c13040b4b040c08250008040c094b060a08\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;\"))<br/>    &amp; out$(encode$(.\"mailto:Irma\"))<br/>    &amp; out$(encode$(.\"User &lt;<a class=\"__cf_email__\" data-cfemail=\"ef869d828ec19a9c8a9daf828e8683c18c8082\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;\"))<br/>    &amp; out$(encode$(.\"http://foo.bar.com/~user-name/_subdir/*~.html\"))<br/>    &amp; out$\"<br/>with RFC 3986 rules:<br/>\"<br/>    &amp; out$(encode$(\"-._~\".\"http://foo bar/\"))<br/>    &amp; out$(encode$(\"-._~\".\"mailto:Ivan\"))<br/>    &amp; out$(encode$(\"-._~\".\"Aim &lt;<a class=\"__cf_email__\" data-cfemail=\"87eef1e6e9a9e6eeeac7e2eae6eeeba9e4e8ea\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;\"))<br/>    &amp; out$(encode$(\"-._~\".\"mailto:Irma\"))<br/>    &amp; out$(encode$(\"-._~\".\"User &lt;<a class=\"__cf_email__\" data-cfemail=\"fb9289969ad58e889e89bb969a9297d5989496\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;\"))<br/>    &amp; out$(encode$(\"-._~\".\"http://foo.bar.com/~user-name/_subdir/*~.html\"))<br/>);<br/>\u00a0</pre>"}, {"lang": "C", "loc": 34, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;ctype.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">char</span> rfc3986<span class=\"br0\">[</span><span class=\"nu0\">256</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/><span class=\"kw4\">char</span> html5<span class=\"br0\">[</span><span class=\"nu0\">256</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">/* caller responsible for memory */</span><br/><span class=\"kw4\">void</span> encode<span class=\"br0\">(</span><span class=\"kw4\">const</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>enc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span>tb<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy0\">;</span> <span class=\"sy0\">*</span>s<span class=\"sy0\">;</span> s<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>tb<span class=\"br0\">[</span><span class=\"sy0\">*</span>s<span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span>enc<span class=\"sy0\">,</span> <span class=\"st0\">\"%c\"</span><span class=\"sy0\">,</span> tb<span class=\"br0\">[</span><span class=\"sy0\">*</span>s<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sprintf.html\"><span class=\"kw3\">sprintf</span></a><span class=\"br0\">(</span>enc<span class=\"sy0\">,</span> <span class=\"st0\">\"%%%02X\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">*</span>s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">*++</span>enc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">const</span> <span class=\"kw4\">char</span> url<span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"http://foo bar/\"</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">char</span> enc<span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html\"><span class=\"kw3\">strlen</span></a><span class=\"br0\">(</span>url<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">256</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\trfc3986<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isalnum.html\"><span class=\"kw3\">isalnum</span></a><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">||</span>i <span class=\"sy0\">==</span> <span class=\"st0\">'~'</span><span class=\"sy0\">||</span>i <span class=\"sy0\">==</span> <span class=\"st0\">'-'</span><span class=\"sy0\">||</span>i <span class=\"sy0\">==</span> <span class=\"st0\">'.'</span><span class=\"sy0\">||</span>i <span class=\"sy0\">==</span> <span class=\"st0\">'_'</span><br/>\t\t\t<span class=\"sy0\">?</span> i <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t\thtml5<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/isalnum.html\"><span class=\"kw3\">isalnum</span></a><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">||</span>i <span class=\"sy0\">==</span> <span class=\"st0\">'*'</span><span class=\"sy0\">||</span>i <span class=\"sy0\">==</span> <span class=\"st0\">'-'</span><span class=\"sy0\">||</span>i <span class=\"sy0\">==</span> <span class=\"st0\">'.'</span><span class=\"sy0\">||</span>i <span class=\"sy0\">==</span> <span class=\"st0\">'_'</span><br/>\t\t\t<span class=\"sy0\">?</span> i <span class=\"sy0\">:</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"st0\">'+'</span> <span class=\"sy0\">:</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tencode<span class=\"br0\">(</span>url<span class=\"sy0\">,</span> enc<span class=\"sy0\">,</span> rfc3986<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/puts.html\"><span class=\"kw3\">puts</span></a><span class=\"br0\">(</span>enc<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 9, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;QByteArray&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   QByteArray text <span class=\"br0\">(</span> <span class=\"st0\">\"http://foo bar/\"</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   QByteArray encoded<span class=\"br0\">(</span> text.<span class=\"me1\">toPercentEncoding</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> encoded.<span class=\"me1\">data</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 17, "block": "<pre class=\"c highlighted_source\">using System<span class=\"sy0\">;</span><br/>\u00a0<br/>namespace URLEncode<br/><span class=\"br0\">{</span><br/>    internal class Program<br/>    <span class=\"br0\">{</span><br/>        private <span class=\"kw4\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span>string<span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console.<span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>Encode<span class=\"br0\">(</span><span class=\"st0\">\"http://foo bar/\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        private <span class=\"kw4\">static</span> string Encode<span class=\"br0\">(</span>string uri<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">return</span> Uri.<span class=\"me1\">EscapeDataString</span><span class=\"br0\">(</span>uri<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 2, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">import</span> 'java<span class=\"sy0\">.</span>net<span class=\"sy0\">.</span>URLEncoder<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>URLEncoder<span class=\"sy0\">/</span>encode <span class=\"st0\">\"http://foo bar/\"</span> <span class=\"st0\">\"UTF-8\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "ColdFusion", "loc": 15, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> needs-encoding-p <span class=\"br0\">(</span>char<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>digit-char-p char <span class=\"nu0\">36</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> encode-char <span class=\"br0\">(</span>char<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format <span class=\"kw1\">nil</span> <span class=\"st0\">\"%~2,'0X\"</span> <span class=\"br0\">(</span>char-code char<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> url-encode <span class=\"br0\">(</span>url<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'concatenate 'string<br/>         <span class=\"br0\">(</span>map '<span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>char<span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>needs-encoding-p char<span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span>encode-char char<span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span>string char<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              url<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>url-encode <span class=\"st0\">\"http://foo bar/\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 15, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> needs-encoding-p <span class=\"br0\">(</span>char<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>digit-char-p char <span class=\"nu0\">36</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> encode-char <span class=\"br0\">(</span>char<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format <span class=\"kw1\">nil</span> <span class=\"st0\">\"%~2,'0X\"</span> <span class=\"br0\">(</span>char-code char<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> url-encode <span class=\"br0\">(</span>url<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'concatenate 'string<br/>         <span class=\"br0\">(</span>map '<span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>char<span class=\"br0\">)</span><br/>                      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>needs-encoding-p char<span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span>encode-char char<span class=\"br0\">)</span><br/>                          <span class=\"br0\">(</span>string char<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              url<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>url-encode <span class=\"st0\">\"http://foo bar/\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 5, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">uri</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writeln<span class=\"br0\">(</span>encodeComponent<span class=\"br0\">(</span><span class=\"st0\">\"http://foo bar/\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 2, "block": "<pre class=\"text highlighted_source\">iex(1)&gt; URI.encode(\"http://foo bar/\", &amp;URI.char_unreserved?/1)<br/>\"http%3A%2F%2Ffoo%20bar%2F\"</pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre>1&gt; http_uri:encode(\"http://foo bar/\").\n\"http%3A%2F%2Ffoo%20bar%2F\"\n</pre>"}, {"lang": "F#", "loc": 6, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main args <span class=\"sy0\">=</span><br/>    printfn <span class=\"st0\">\"%s\"</span> <span class=\"br0\">(</span>Uri.<span class=\"me1\">EscapeDataString</span><span class=\"br0\">(</span>args.<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Go", "loc": 10, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"net/url\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>url<span class=\"sy3\">.</span>QueryEscape<span class=\"sy1\">(</span><span class=\"st0\">\"http://foo bar/\"</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 5, "block": "<pre class=\"groovy highlighted_source\">\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> normal <span class=\"sy0\">=</span> <span class=\"st0\">\"http://foo bar/\"</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> encoded <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?as_q=URLEncoder&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">URLEncoder</span></a>.<span class=\"me1\">encode</span><span class=\"br0\">(</span>normal, <span class=\"st0\">\"utf-8\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> encoded<br/>\u00a0</pre>"}, {"lang": "Haskell", "loc": 14, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw1\">qualified</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"kw1\">as</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><br/><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Printf<br/>\u00a0<br/>encode <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>encode c<br/>  <span class=\"sy0\">|</span> c <span class=\"sy0\">==</span> <span class=\"st0\">' '</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"+\"</span><br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char\"><span class=\"kw4\">Char</span></a><span class=\"sy0\">.</span>isAlphaNum c <span class=\"sy0\">||</span> c `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem\"><span class=\"kw3\">elem</span></a>` <span class=\"st0\">\"-._~\"</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>c<span class=\"br0\">]</span><br/>  <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> printf <span class=\"st0\">\"%%%02X\"</span> c<br/>\u00a0<br/>urlEncode <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>urlEncode <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> encode<br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> urlEncode <span class=\"st0\">\"http://foo bar/\"</span></pre>"}, {"lang": "Icon and Unicon", "loc": 19, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> hexcvt<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"text    = \"</span><span class=\"sy1\">,</span><span class=\"kw4\">image</span><span class=\"br0\">(</span>u <span class=\"sy1\">:=</span> <span class=\"st0\">\"http://foo bar/\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"encoded = \"</span><span class=\"sy1\">,</span><span class=\"kw4\">image</span><span class=\"br0\">(</span>ue <span class=\"sy1\">:=</span> encodeURL<span class=\"br0\">(</span>u<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> encodeURL<span class=\"br0\">(</span>s<span class=\"br0\">)</span>           <span class=\"co1\">#: encode data for inclusion in a URL/URI</span><br/><span class=\"kw2\">static</span> en                           <br/><span class=\"kw1\">initial</span> <span class=\"br0\">{</span>                           <span class=\"co1\"># build lookup table for everything</span><br/>   en <span class=\"sy1\">:=</span> <span class=\"kw4\">table</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> en<span class=\"br0\">[</span>c <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span><span class=\"kw4\">string</span><span class=\"br0\">(</span><span class=\"sy1\">~</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\">digits</span><span class=\"sy1\">++&amp;</span><span class=\"kw3\">letters</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"st0\">\"%\"</span><span class=\"sy1\">||</span>hexstring<span class=\"br0\">(</span><span class=\"kw4\">ord</span><span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>   <span class=\"kw1\">every</span> <span class=\"sy1\">/</span>en<span class=\"br0\">[</span>c <span class=\"sy1\">:=</span> <span class=\"sy1\">!</span><span class=\"kw4\">string</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span><span class=\"kw3\"><span class=\"kw4\">cset</span></span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> c<br/>   <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">every</span> <span class=\"br0\">(</span>c <span class=\"sy1\">:=</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <span class=\"sy1\">||:=</span> en<span class=\"br0\">[</span><span class=\"sy1\">!</span>s<span class=\"br0\">]</span>         <span class=\"co1\"># re-encode everything</span><br/><span class=\"kw1\">return</span> c   <br/><span class=\"kw1\">end</span><br/>\u00a0</pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">require<span class=\"st_h\">'strings convert'</span><br/>urlencode=: rplc&amp;<span class=\"sy0\">((</span>#~<span class=\"nu0\">2</span>|<span class=\"nu0\">_1</span> <span class=\"nu0\">47</span> <span class=\"nu0\">57</span> <span class=\"nu0\">64</span> <span class=\"nu0\">90</span> <span class=\"nu0\">96</span> <span class=\"nu0\">122</span> <a class=\"__cf_email__\" data-cfemail=\"6e274007402e\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#<span class=\"sy0\">)</span>a.;\"<span class=\"nu0\">_1</span><span class=\"st_h\">'%'</span>,.hfd i.#a.<span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 12, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">java.io.UnsupportedEncodingException</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.net.URLEncoder</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Main<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"kw1\">throws</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aunsupportedencodingexception+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">UnsupportedEncodingException</span></a><br/>    <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> normal <span class=\"sy0\">=</span> <span class=\"st0\">\"http://foo bar/\"</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> encoded <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Aurlencoder+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">URLEncoder</span></a>.<span class=\"me1\">encode</span><span class=\"br0\">(</span>normal, <span class=\"st0\">\"utf-8\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>encoded<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 2, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">var</span> normal <span class=\"sy0\">=</span> <span class=\"st0\">'http://foo/bar/'</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">var</span> encoded <span class=\"sy0\">=</span> encodeURIComponent<span class=\"br0\">(</span>normal<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"\u00e1\" | @uri</pre>"}, {"lang": "Julia", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>using URIParser<br/>\u00a0<br/>dcd = \"http://foo bar/\"<br/>enc = escape(dcd)<br/>\u00a0<br/>println(dcd, \" =&gt; \", enc)<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 8, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">net</span>.<span class=\"me1\">URLEncoder</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> url <span class=\"sy0\">=</span> <span class=\"st0\">\"http://foo bar/\"</span><br/>    println<span class=\"br0\">(</span>URLEncoder.<span class=\"me1\">encode</span><span class=\"br0\">(</span>url, <span class=\"st0\">\"utf-8\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">// note: encodes space to + not\u00a0%20</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lasso", "loc": 1, "block": "<pre class=\"text highlighted_source\">bytes('http://foo bar/') -&gt; encodeurl</pre>"}, {"lang": "Liberty BASIC", "loc": 25, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>    <span class=\"kw1\">dim</span> lookUp$<span class=\"br0\">(</span> <span class=\"nu0\">256</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">256</span><br/>        lookUp$<span class=\"br0\">(</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span><span class=\"st0\">\"%\"</span> <span class=\"sy0\">+</span><span class=\"kw2\">dechex$</span><span class=\"br0\">(</span> i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">next</span> i<br/>\u00a0<br/>    string$ <span class=\"sy0\">=</span><span class=\"st0\">\"http://foo bar/\"</span><br/>\u00a0<br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"Supplied string '\"</span>; string$; <span class=\"st0\">\"'\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"As URL          '\"</span>; url$<span class=\"br0\">(</span> string$<span class=\"br0\">)</span>; <span class=\"st0\">\"'\"</span><br/>\u00a0<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> url$<span class=\"br0\">(</span> i$<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span> i$<span class=\"br0\">)</span><br/>        c$ <span class=\"sy0\">=</span><span class=\"kw2\">mid$</span><span class=\"br0\">(</span> i$<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw2\">instr</span><span class=\"br0\">(</span> <span class=\"st0\">\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"</span><span class=\"sy0\">,</span> c$<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            url$ <span class=\"sy0\">=</span>url$ <span class=\"sy0\">+</span>c$ <br/>        <span class=\"kw1\">else</span><br/>            url$ <span class=\"sy0\">=</span>url$ <span class=\"sy0\">+</span>lookUp$<span class=\"br0\">(</span> <span class=\"kw2\">asc</span><span class=\"br0\">(</span> c$<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">next</span> j<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 2, "block": "<pre class=\"text highlighted_source\">put urlencode(\"http://foo bar/\")<br/>-- \"http%3a%2f%2ffoo+bar%2f\"</pre>"}, {"lang": "LiveCode", "loc": 2, "block": "<pre class=\"text highlighted_source\">urlEncode(\"http://foo bar/\")<br/>-- http%3A%2F%2Ffoo+bar%2F</pre>"}, {"lang": "Lua", "loc": 11, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> encodeChar<span class=\"br0\">(</span>chr<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw3\">string.format</span><span class=\"br0\">(</span><span class=\"st0\">\"%%%X\"</span><span class=\"sy0\">,</span><span class=\"kw3\">string.byte</span><span class=\"br0\">(</span>chr<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> encodeString<span class=\"br0\">(</span>str<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">local</span> output<span class=\"sy0\">,</span> t <span class=\"sy0\">=</span> <span class=\"kw3\">string.gsub</span><span class=\"br0\">(</span>str<span class=\"sy0\">,</span><span class=\"st0\">\"[^%w]\"</span><span class=\"sy0\">,</span>encodeChar<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> output<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- will print \"http%3A%2F%2Ffoo%20bar%2F\"</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span>encodeString<span class=\"br0\">(</span><span class=\"st0\">\"http://foo bar/\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "NetRexx", "loc": 65, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>options replace format comments java crossref symbols nobinary<br/>\u00a0<br/><span class=\"coMULTI\">/* -------------------------------------------------------------------------- */</span><br/>  testcase<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">say</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'RFC3986'</span><br/>  testcase<span class=\"br0\">(</span><span class=\"st0\">'RFC3986'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">say</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'HTML5'</span><br/>  testcase<span class=\"br0\">(</span><span class=\"st0\">'HTML5'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">say</span><br/>  <span class=\"kw1\">return</span><br/>\u00a0<br/><span class=\"coMULTI\">/* -------------------------------------------------------------------------- */</span><br/>method encode<span class=\"br0\">(</span>url, varn<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  variation = varn.<span class=\"kw6\">upper</span> <br/>  opts = <span class=\"st0\">''</span><br/>  opts<span class=\"br0\">[</span><span class=\"st0\">'RFC3986'</span><span class=\"br0\">]</span> = <span class=\"st0\">'-._~'</span><br/>  opts<span class=\"br0\">[</span><span class=\"st0\">'HTML5'</span><span class=\"br0\">]</span>   = <span class=\"st0\">'-._*'</span><br/>\u00a0<br/>  rp = <span class=\"st0\">''</span><br/>  <span class=\"kw1\">loop</span> while url.<span class=\"me0\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">parse</span> url tc +<span class=\"nu0\">1</span> url<br/>    <span class=\"kw1\">select</span><br/>      <span class=\"kw3\">when</span> tc.<span class=\"kw6\">datatype</span><span class=\"br0\">(</span><span class=\"st0\">'A'</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>        rp = rp <span class=\"sy0\">||</span> tc<br/>        <span class=\"kw3\">end</span><br/>      <span class=\"kw3\">when</span> tc == <span class=\"st0\">' '</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> variation = <span class=\"st0\">'HTML5'</span> <span class=\"kw3\">then</span><br/>          rp = rp <span class=\"sy0\">||</span> <span class=\"st0\">'+'</span><br/>        <span class=\"kw3\">else</span><br/>          rp = rp <span class=\"sy0\">||</span> <span class=\"st0\">'%'</span> <span class=\"sy0\">||</span> tc.<span class=\"kw6\">c2x</span><br/>        <span class=\"kw3\">end</span><br/>      <span class=\"kw3\">otherwise</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> opts<span class=\"br0\">[</span>variation<span class=\"br0\">]</span>.<span class=\"me0\">pos</span><span class=\"br0\">(</span>tc<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>          rp = rp <span class=\"sy0\">||</span> tc<br/>          <span class=\"kw3\">end</span><br/>        <span class=\"kw3\">else</span> <span class=\"kw1\">do</span><br/>          rp = rp <span class=\"sy0\">||</span> <span class=\"st0\">'%'</span> <span class=\"sy0\">||</span> tc.<span class=\"kw6\">c2x</span><br/>          <span class=\"kw3\">end</span><br/>        <span class=\"kw3\">end</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> rp<br/>\u00a0<br/><span class=\"coMULTI\">/* -------------------------------------------------------------------------- */</span><br/>method testcase<span class=\"br0\">(</span>variation = <span class=\"st0\">''</span><span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span><br/>\u00a0<br/>  url = <span class=\"br0\">[</span> -<br/>      <span class=\"st0\">'http://foo bar/'</span> -<br/>    , <span class=\"st0\">'mailto:\"Ivan Aim\" &lt;<a class=\"__cf_email__\" data-cfemail=\"345d42555a1a555d59745159555d581a575b59\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;'</span> -<br/>    , <span class=\"st0\">'mailto:\"Irma User\" &lt;<a class=\"__cf_email__\" data-cfemail=\"48213a2529663d3b2d3a0825292124662b2725\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;'</span> -<br/>    , <span class=\"st0\">'http://foo.bar.com/~user-name/_subdir/*~.html'</span> -<br/>    <span class=\"br0\">]</span><br/>\u00a0<br/>  <span class=\"kw1\">loop</span> i_ = <span class=\"nu0\">0</span> to url.<span class=\"me0\">length</span> - <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">say</span> url<span class=\"br0\">[</span>i_<span class=\"br0\">]</span><br/>    <span class=\"kw1\">say</span> encode<span class=\"br0\">(</span>url<span class=\"br0\">[</span>i_<span class=\"br0\">]</span>, variation<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> i_<br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/>\u00a0</pre>"}, {"lang": "Maple", "loc": 1, "block": "<pre class=\"text highlighted_source\">URL:-Escape(\"http://foo bar/\");</pre>"}, {"lang": "Mathematica", "loc": 7, "block": "<pre class=\"text highlighted_source\">URLEncoding[url_]\u00a0:= <br/> StringReplace[url, <br/>  x\u00a0: Except[<br/>     Join[CharacterRange[\"0\", \"9\"], CharacterRange[\"a\", \"z\"], <br/>      CharacterRange[\"A\", \"Z\"]]]\u00a0:&gt; <br/>   StringJoin[(\"%\" ~~ #) &amp; /@ <br/>     IntegerString[ToCharacterCode[x, \"UTF8\"], 16]]]</pre>"}, {"lang": "MATLAB / Octave", "loc": 10, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> u = urlencoding<span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>\tu = <span class=\"co2\">''</span>;<br/>\t<span class=\"kw1\">for</span> k = <span class=\"nu0\">1</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>s<span class=\"br0\">)</span>,<br/>\t\t<span class=\"kw1\">if</span> isalnum<span class=\"br0\">(</span>s<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tu<span class=\"br0\">(</span><span class=\"kw1\">end</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span> = s<span class=\"br0\">(</span>k<span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\tu=<span class=\"br0\">[</span>u,<span class=\"co2\">'%'</span>,<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/dec2hex.html\"><span class=\"kw2\">dec2hex</span></a><span class=\"br0\">(</span>s<span class=\"br0\">(</span>k<span class=\"br0\">)</span>+<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">]</span>;<br/>\t\t<span class=\"kw1\">end</span>; \t<br/>\t<span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "NewLISP", "loc": 6, "block": "<pre class=\"newlisp highlighted_source\"><span class=\"co1\">;; simple encoder</span><br/><span class=\"co1\">;; (source http://www.newlisp.org/index.cgi?page=Code_Snippets)</span><br/><span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#define\"><span class=\"kw1\">define</span></a> <span class=\"br0\">(</span>url<span class=\"sy1\">-</span>encode str<span class=\"br0\">)</span> <br/>  <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#replace\"><span class=\"kw1\">replace</span></a> <span class=\"coMULTI\">{([^a-zA-Z0-9])}</span> str <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#format\"><span class=\"kw1\">format</span></a> <span class=\"st0\">\"%%%2X\"</span> <span class=\"br0\">(</span><a href=\"http://www.newlisp.org/downloads/newlisp_manual.html#char\"><span class=\"kw1\">char</span></a> <span class=\"re1\">$1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>url<span class=\"sy1\">-</span>encode <span class=\"st0\">\"http://foo bar/\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Nim", "loc": 3, "block": "<pre class=\"text highlighted_source\">import cgi<br/>\u00a0<br/>echo encodeUrl(\"http://foo/bar/\")</pre>"}, {"lang": "Oberon-2", "loc": 14, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> URLEncoding;<br/><span class=\"kw1\">IMPORT</span><br/>  Out <span class=\"sy0\">:=</span> NPCT<span class=\"sy0\">:</span>Console<span class=\"sy0\">,</span><br/>  ADT<span class=\"sy0\">:</span>StringBuffer<span class=\"sy0\">,</span> <br/>  URI <span class=\"sy0\">:=</span> URI<span class=\"sy0\">:</span>String;<br/><span class=\"kw1\">VAR</span><br/>  encodedUrl<span class=\"sy0\">:</span> StringBuffer.<span class=\"me1\">StringBuffer</span>;<br/><span class=\"kw1\">BEGIN</span><br/>  encodedUrl <span class=\"sy0\">:=</span> <span class=\"kw3\">NEW</span><span class=\"br0\">(</span>StringBuffer.<span class=\"me1\">StringBuffer</span><span class=\"sy0\">,</span><span class=\"nu0\">512</span><span class=\"br0\">)</span>;<br/>  URI.<span class=\"me1\">AppendEscaped</span><span class=\"br0\">(</span><span class=\"st0\">\"http://foo bar/\"</span><span class=\"sy0\">,</span><span class=\"st0\">\"\"</span><span class=\"sy0\">,</span>encodedUrl<span class=\"br0\">)</span>;<br/>  Out.<span class=\"me1\">String</span><span class=\"br0\">(</span>encodedUrl.<span class=\"me1\">ToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> URLEncoding.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 12, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">use</span> FastCgi<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> UrlEncode <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      url <span class=\"sy0\">:=</span> <span class=\"st0\">\"http://foo bar/\"</span><span class=\"sy0\">;</span><br/>      UrlUtility<span class=\"sy0\">-&gt;</span><span class=\"me1\">Encode</span><span class=\"br0\">(</span>url<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 3, "block": "<pre class=\"objc highlighted_source\"><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span>normal <span class=\"sy0\">=</span> <span class=\"co3\">@</span><span class=\"st0\">\"http://foo bar/\"</span>;<br/><a href=\"http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/\"><span class=\"kw5\">NSString</span></a> <span class=\"sy0\">*</span>encoded <span class=\"sy0\">=</span> <span class=\"br0\">[</span>normal stringByAddingPercentEscapesUsingEncoding<span class=\"sy0\">:</span>NSUTF8StringEncoding<span class=\"br0\">]</span>;<br/>NSLog<span class=\"br0\">(</span><span class=\"co3\">@</span><span class=\"st0\">\"%@\"</span>, encoded<span class=\"br0\">)</span>;</pre>"}, {"lang": "OCaml", "loc": 6, "block": "<pre class=\"ocaml highlighted_source\">$ ocaml<br/><span class=\"sy0\">#</span> <span class=\"sy0\">#</span>use <span class=\"st0\">\"topfind\"</span><span class=\"sy0\">;;</span><br/><span class=\"sy0\">#</span> <span class=\"sy0\">#</span>require <span class=\"st0\">\"netstring\"</span><span class=\"sy0\">;;</span><br/>\u00a0<br/><span class=\"sy0\">#</span> Netencoding<span class=\"sy0\">.</span>Url<span class=\"sy0\">.</span>encode <span class=\"st0\">\"http://foo bar/\"</span> <span class=\"sy0\">;;</span><br/><span class=\"sy0\">-</span> <span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEstring\"><span class=\"kw4\">string</span></a> <span class=\"sy0\">=</span> <span class=\"st0\">\"http%3A%2F%2Ffoo+bar%2F\"</span></pre>"}, {"lang": "ooRexx", "loc": 9, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> urlencode <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$s</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/([^-A-Za-z0-9_.!~*'() ])/sprintf(\"%%%02X\", ord($1))/eg</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$s</span> <span class=\"sy0\">=~</span> <span class=\"co2\">tr/ /+/</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$s</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> urlencode<span class=\"br0\">(</span><span class=\"st_h\">'http://foo bar/'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 9, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> urlencode <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$s</span> <span class=\"sy0\">=~</span> <span class=\"co2\">s/([^-A-Za-z0-9_.!~*'() ])/sprintf(\"%%%02X\", ord($1))/eg</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$s</span> <span class=\"sy0\">=~</span> <span class=\"co2\">tr/ /+/</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$s</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> urlencode<span class=\"br0\">(</span><span class=\"st_h\">'http://foo bar/'</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$url</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'http://foo bar/'</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"re0\">$url</span><span class=\"sy0\">.</span><span class=\"kw3\">subst</span><span class=\"br0\">(</span><span class=\"co2\">/&lt;-alnum&gt;/</span><span class=\"sy0\">,</span> <span class=\"sy0\">*.</span><span class=\"me1\">ord</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%%%02X\"</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"sy0\">:</span>g<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 29, "block": "<pre class=\"text highlighted_source\">--<br/>-- demo\\rosetta\\encode_url.exw<br/>-- ===========================<br/>--<br/>function nib(integer b)<br/>    return b+iff(b&lt;=9?'0':'A'-10)<br/>end function<br/>\u00a0<br/>function encode_url(string s, string exclusions=\"\", integer spaceplus=0)<br/>string res = \"\"<br/>    for i=1 to length(s) do<br/>        integer ch = s[i]<br/>        if ch=' ' and spaceplus then<br/>            ch = '+'<br/>        elsif not find(ch,exclusions)<br/>          and (ch&lt;'0'<br/>           or (ch&gt;'9' and ch&lt;'A')<br/>           or (ch&gt;'Z' and ch&lt;'a')<br/>           or  ch&gt;'z') then<br/>            res &amp;= '%'<br/>            res &amp;= nib(floor(ch/#10))<br/>            ch = nib(and_bits(ch,#0F))<br/>        end if<br/>        res &amp;= ch<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>printf(1,\"%s\\n\",{encode_url(\"http://foo bar/\")})</pre>"}, {"lang": "PHP", "loc": 4, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"st_h\">'http://foo/bar/'</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/rawurlencode\"><span class=\"kw3\">rawurlencode</span></a><span class=\"br0\">(</span><span class=\"re0\">$s</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 8, "block": "<pre class=\"text highlighted_source\">(de urlEncodeTooMuch (Str)<br/>   (pack<br/>      (mapcar<br/>         '((C)<br/>            (if (or (&gt;= \"9\" C \"0\") (&gt;= \"Z\" (uppc C) \"A\"))<br/>               C<br/>               (list '% (hex (char C))) ) )<br/>         (chop Str) ) ) )</pre>"}, {"lang": "Powershell", "loc": 5, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"br0\">[</span>uri<span class=\"br0\">]</span>::EscapeDataString<span class=\"br0\">(</span><span class=\"st0\">'http://foo bar/'</span><span class=\"br0\">)</span><br/>\u00a0<br/>http<span class=\"sy0\">%</span>3A<span class=\"sy0\">%</span>2F<span class=\"sy0\">%</span>2Ffoo<span class=\"sy0\">%</span>20bar<span class=\"sy0\">%</span>2F<br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 1, "block": "<pre class=\"purebasic highlighted_source\">URL$ <span class=\"sy0\">=</span> URLEncoder<span class=\"br0\">(</span><span class=\"st0\">\"http://foo bar/\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 3, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">import</span> <span class=\"kw3\">urllib</span><br/>s <span class=\"sy0\">=</span> <span class=\"st0\">'http://foo/bar/'</span><br/>s <span class=\"sy0\">=</span> <span class=\"kw3\">urllib</span>.<span class=\"me1\">quote</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 1, "block": "<pre class=\"text highlighted_source\">URLencode(\"http://foo bar/\")</pre>"}, {"lang": "Racket", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require net/uri-codec)<br/>(uri-encode \"http://foo bar/\")<br/>\u00a0</pre>"}, {"lang": "REALbasic", "loc": 5, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>  <span class=\"kw4\">Dim</span> URL <span class=\"kw4\">As</span> <span class=\"kw1\">String</span> = <span class=\"st0\">\"http://foo bar/\"</span><br/>  URL = EncodeURLComponent(URL)<br/>  <span class=\"kw4\">Print</span>(URL)<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 73, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* Rexx */</span><br/><span class=\"kw1\">do</span><br/>  <span class=\"kw1\">call</span> testcase<br/>  <span class=\"kw1\">say</span><br/>  <span class=\"kw1\">say</span> RFC3986<br/>  <span class=\"kw1\">call</span> testcase RFC3986<br/>  <span class=\"kw1\">say</span><br/>  <span class=\"kw1\">say</span> HTML5<br/>  <span class=\"kw1\">call</span> testcase HTML5<br/>  <span class=\"kw1\">say</span><br/>  <span class=\"kw1\">return</span><br/><span class=\"kw3\">end</span><br/><span class=\"kw1\">exit</span><br/>\u00a0<br/><span class=\"coMULTI\">/* -------------------------------------------------------------------------- */</span><br/>encode:<br/><span class=\"kw1\">procedure</span><br/><span class=\"kw1\">do</span><br/>  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> url, varn <span class=\"sy0\">.</span><br/>  <span class=\"kw1\">parse</span> <span class=\"kw2\">upper</span> <span class=\"kw2\">var</span> varn variation <br/>  <span class=\"kw1\">drop</span> RFC3986 HTML5<br/>  opts<span class=\"sy0\">.</span> = <span class=\"st0\">''</span><br/>  opts<span class=\"sy0\">.</span>RFC3986 = <span class=\"st0\">'-._~'</span><br/>  opts<span class=\"sy0\">.</span>HTML5   = <span class=\"st0\">'-._*'</span><br/>\u00a0<br/>  rp = <span class=\"st0\">''</span><br/>  <span class=\"kw1\">do</span> <span class=\"kw2\">while</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>url<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> url tc +<span class=\"nu0\">1</span> url<br/>    <span class=\"kw1\">select</span><br/>      <span class=\"kw3\">when</span> <span class=\"kw6\">datatype</span><span class=\"br0\">(</span>tc, <span class=\"st0\">'A'</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>        rp = rp <span class=\"sy0\">||</span> tc<br/>        <span class=\"kw3\">end</span><br/>      <span class=\"kw3\">when</span> tc == <span class=\"st0\">' '</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> variation = HTML5 <span class=\"kw3\">then</span><br/>          rp = rp <span class=\"sy0\">||</span> <span class=\"st0\">'+'</span><br/>        <span class=\"kw3\">else</span><br/>          rp = rp <span class=\"sy0\">||</span> <span class=\"st0\">'%'</span> <span class=\"sy0\">||</span> <span class=\"kw6\">c2x</span><span class=\"br0\">(</span>tc<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span><br/>      <span class=\"kw3\">otherwise</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>tc, opts<span class=\"sy0\">.</span>variation<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>          rp = rp <span class=\"sy0\">||</span> tc<br/>          <span class=\"kw3\">end</span><br/>        <span class=\"kw3\">else</span> <span class=\"kw1\">do</span><br/>          rp = rp <span class=\"sy0\">||</span> <span class=\"st0\">'%'</span> <span class=\"sy0\">||</span> <span class=\"kw6\">c2x</span><span class=\"br0\">(</span>tc<span class=\"br0\">)</span><br/>          <span class=\"kw3\">end</span><br/>        <span class=\"kw3\">end</span><br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> rp<br/><span class=\"kw3\">end</span><br/><span class=\"kw1\">exit</span><br/>\u00a0<br/><span class=\"coMULTI\">/* -------------------------------------------------------------------------- */</span><br/>testcase:<br/><span class=\"kw1\">procedure</span><br/><span class=\"kw1\">do</span><br/>  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> variation<br/>  X = <span class=\"nu0\">0</span><br/>  url<span class=\"sy0\">.</span> = <span class=\"st0\">''</span><br/>  X = X + <span class=\"nu0\">1</span>; url<span class=\"sy0\">.</span>0 = X; url<span class=\"sy0\">.</span>X = <span class=\"st0\">'http://foo bar/'</span><br/>  X = X + <span class=\"nu0\">1</span>; url<span class=\"sy0\">.</span>0 = X; url<span class=\"sy0\">.</span>X = <span class=\"st0\">'mailto:\"Ivan Aim\" &lt;<a class=\"__cf_email__\" data-cfemail=\"c4adb2a5aaeaa5ada984a1a9a5ada8eaa7aba9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;'</span><br/>  X = X + <span class=\"nu0\">1</span>; url<span class=\"sy0\">.</span>0 = X; url<span class=\"sy0\">.</span>X = <span class=\"st0\">'mailto:\"Irma User\" &lt;<a class=\"__cf_email__\" data-cfemail=\"2148534c400f54524453614c40484d0f424e4c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>&gt;'</span><br/>  X = X + <span class=\"nu0\">1</span>; url<span class=\"sy0\">.</span>0 = X; url<span class=\"sy0\">.</span>X = <span class=\"st0\">'http://foo.bar.com/~user-name/_subdir/*~.html'</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> i_ = <span class=\"nu0\">1</span> <span class=\"kw2\">to</span> url<span class=\"sy0\">.</span>0<br/>    <span class=\"kw1\">say</span> url<span class=\"sy0\">.</span>i_<br/>    <span class=\"kw1\">say</span> encode<span class=\"br0\">(</span>url<span class=\"sy0\">.</span>i_, variation<span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> i_<br/>\u00a0<br/>  <span class=\"kw1\">return</span><br/><span class=\"kw3\">end</span><br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 3, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw3\">require</span> <span class=\"st0\">'cgi'</span><br/><span class=\"kw3\">puts</span> <span class=\"kw4\">CGI</span>.<span class=\"me1\">escape</span><span class=\"br0\">(</span><span class=\"st0\">\"http://foo bar/\"</span><span class=\"br0\">)</span>.<span class=\"kw3\">gsub</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span>, <span class=\"st0\">\"%20\"</span><span class=\"br0\">)</span><br/><span class=\"co1\"># =&gt; \"http%3A%2F%2Ffoo%20bar%2F\"</span></pre>"}, {"lang": "Run BASIC", "loc": 9, "block": "<pre class=\"text highlighted_source\">urlIn$ = \"http://foo bar/\"<br/>\u00a0<br/>for i = 1 to len(urlIn$)<br/>  a$ = mid$(urlIn$,i,1)<br/>  if (a$ &gt;= \"0\" and a$ &lt;= \"9\") _<br/>  or (a$ &gt;= \"A\" and a$ &lt;= \"Z\") _<br/>  or (a$ &gt;= \"a\" and a$ &lt;= \"z\") then url$ = url$ + a$ else url$ = url$ + \"%\"+dechex$(asc(a$))<br/>next i<br/>print urlIn$;\" -&gt; \";url$</pre>"}, {"lang": "Scala", "loc": 16, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">net</span>.<span class=\"br0\">{</span>URLDecoder, URLEncoder<span class=\"br0\">}</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">compat</span>.<span class=\"me1\">Platform</span>.<span class=\"me1\">currentTime</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> UrlCoded <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> original <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><span class=\"st0\">\"http://foo bar/\"</span><span class=\"st0\">\"\"</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> encoded<span class=\"sy0\">:</span> String <span class=\"sy0\">=</span> URLEncoder.<span class=\"me1\">encode</span><span class=\"br0\">(</span>original, <span class=\"st0\">\"UTF-8\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  assert<span class=\"br0\">(</span>encoded <span class=\"sy0\">==</span> <span class=\"st0\">\"http%3A%2F%2Ffoo+bar%2F\"</span>, s<span class=\"st0\">\"Original: $original not properly encoded: $encoded\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> percentEncoding <span class=\"sy0\">=</span> encoded.<span class=\"me1\">replace</span><span class=\"br0\">(</span><span class=\"st0\">\"+\"</span>, <span class=\"st0\">\"%20\"</span><span class=\"br0\">)</span><br/>  assert<span class=\"br0\">(</span>percentEncoding <span class=\"sy0\">==</span> <span class=\"st0\">\"http%3A%2F%2Ffoo%20bar%2F\"</span>, s<span class=\"st0\">\"Original: $original not properly percent-encoded: $percentEncoding\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>  assert<span class=\"br0\">(</span>URLDecoder.<span class=\"me1\">decode</span><span class=\"br0\">(</span>encoded, <span class=\"st0\">\"UTF-8\"</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> URLDecoder.<span class=\"me1\">decode</span><span class=\"br0\">(</span>percentEncoding, <span class=\"st0\">\"UTF-8\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Successfully completed without errors. [total ${currentTime - executionStart} ms]\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Seed7", "loc": 8, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"encoding.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(toPercentEncoded(\"http://foo bar/\"));<br/>    writeln(toUrlEncoded(\"http://foo bar/\"));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 7, "block": "<pre class=\"ruby highlighted_source\">func urlencode<span class=\"br0\">(</span>str<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    str.<span class=\"kw3\">gsub!</span><span class=\"br0\">(</span><span class=\"sy0\">%</span>r<span class=\"st0\">\"([^-A-Za-z0-9_.!~*'() ])\"</span>, <span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> <span class=\"st0\">\"%%%02X\"</span> <span class=\"sy0\">%</span> a.<span class=\"me1\">ord</span><span class=\"br0\">}</span><span class=\"br0\">)</span>;<br/>    str.<span class=\"kw3\">gsub!</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>, <span class=\"st0\">'+'</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw2\">return</span> str;<br/><span class=\"br0\">}</span><br/>\u00a0<br/>say urlencode<span class=\"br0\">(</span><span class=\"st0\">'http://foo bar/'</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Tcl", "loc": 8, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># Encode all except \"unreserved\" characters; use UTF-8 for extended chars.</span><br/><span class=\"co1\"># See http://tools.ietf.org/html/rfc3986 \u00a72.4 and \u00a72.5</span><br/><span class=\"kw1\">proc</span> urlEncode <span class=\"br0\">{</span>str<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> uStr <span class=\"br0\">[</span>encoding convertto utf-<span class=\"nu0\">8</span> <span class=\"re0\">$str</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> chRE <span class=\"br0\">{</span><span class=\"br0\">[</span>^-A-Za-z0-<span class=\"nu0\">9</span>._~\\n<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"sy0\">;</span>\t\t<span class=\"co1\"># Newline is special case!</span><br/>    <span class=\"kw1\">set</span> replacement <span class=\"br0\">{</span><span class=\"sy0\">%</span><span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"%02X\"</span> <span class=\"br0\">[</span><span class=\"kw2\">scan</span> <span class=\"st0\">\"<span class=\"es0\">\\\\</span><span class=\"es0\">\\0</span>\"</span> <span class=\"st0\">\"%c\"</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> map <span class=\"br0\">{</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"st0\">\"%0A\"</span><span class=\"br0\">}</span> <span class=\"br0\">[</span><span class=\"kw2\">subst</span> <span class=\"br0\">[</span><span class=\"kw2\">regsub</span> -all <span class=\"re0\">$chRE</span> <span class=\"re0\">$uStr</span> <span class=\"re0\">$replacement</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TUSCRIPT", "loc": 12, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>text=\"http://foo bar/\"<br/>BUILD S_TABLE spez_char=\"::&gt;/:&lt;/::&lt;%:\"<br/>spez_char=STRINGS (text,spez_char)<br/>LOOP/CLEAR c=spez_char<br/>c=ENCODE(c,hex),c=concat(\"%\",c),spez_char=APPEND(spez_char,c)<br/>ENDLOOP<br/>url_encoded=SUBSTITUTE(text,spez_char,0,0,spez_char)<br/>print \"text:    \", text<br/>PRINT \"encoded: \", url_encoded<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 48, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw1\">function</span> urlencode<br/><span class=\"br0\">{</span><br/>\t<span class=\"kw3\">typeset</span> <span class=\"re2\">decoded</span>=<span class=\"re4\">$1</span> <span class=\"re2\">encoded</span>= <span class=\"re2\">rest</span>= <span class=\"re2\">c</span>=<br/>\t<span class=\"kw3\">typeset</span> <span class=\"re2\">rest2</span>= <span class=\"re2\">bug</span>=<span class=\"st_h\">'rest2=${rest}'</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re5\">-z</span> <span class=\"co1\">${BASH_VERSION}</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"kw1\">then</span><br/>\t\t<span class=\"co0\"># bug /usr/bin/sh HP-UX 11.00</span><br/>\t\t<span class=\"kw3\">typeset</span> <span class=\"re2\">_decoded</span>=<span class=\"st_h\">'xyz%26xyz'</span><br/>\t\t<span class=\"re2\">rest</span>=<span class=\"st0\">\"<span class=\"es3\">${_decoded#?}</span>\"</span><br/>\t\t<span class=\"re2\">c</span>=<span class=\"st0\">\"<span class=\"es3\">${_decoded%%${rest}</span>}\"</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> <span class=\"co1\">${#c}</span> <span class=\"sy0\">!</span>= <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">then</span><br/>\t\t\t<span class=\"kw3\">typeset</span> <span class=\"re2\">qm</span>=<span class=\"st_h\">'????????????????????????????????????????????????????????????????????????'</span><br/>\t\t\t<span class=\"kw3\">typeset</span> <span class=\"re2\">bug</span>=<span class=\"st_h\">'(( ${#rest} &gt; 0 )) &amp;&amp; typeset -L${#rest} rest2=\"${qm}\" || rest2=${rest}'</span><br/>\t\t<span class=\"kw1\">fi</span><br/>\t<span class=\"kw1\">fi</span><br/>\u00a0<br/>\t<span class=\"re2\">rest</span>=<span class=\"st0\">\"<span class=\"es3\">${decoded#?}</span>\"</span><br/>\t<span class=\"kw3\">eval</span> <span class=\"co1\">${bug}</span><br/>\t<span class=\"re2\">c</span>=<span class=\"st0\">\"<span class=\"es3\">${decoded%%${rest2}</span>}\"</span><br/>\t<span class=\"re2\">decoded</span>=<span class=\"st0\">\"<span class=\"es3\">${rest}</span>\"</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re5\">-n</span> <span class=\"co1\">${c}</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">case</span> <span class=\"co1\">${c}</span> <span class=\"kw1\">in</span><br/>\t\t<span class=\"br0\">[</span>-a-zA-z0-<span class=\"nu0\">9</span>.<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">;;</span><br/>\t\t<span class=\"st_h\">' '</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"re2\">c</span>=<span class=\"st_h\">'+'</span><br/>\t\t\t<span class=\"sy0\">;;</span><br/>\t\t<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"re2\">c</span>=$<span class=\"br0\">(</span><span class=\"kw3\">printf</span> <span class=\"st0\">\"%%%02X\"</span> <span class=\"st0\">\"'<span class=\"es2\">$c</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">;;</span><br/>\t\t<span class=\"kw1\">esac</span><br/>\u00a0<br/>\t\t<span class=\"re2\">encoded</span>=<span class=\"st0\">\"<span class=\"es3\">${encoded}</span><span class=\"es3\">${c}</span>\"</span><br/>\u00a0<br/>\t\t<span class=\"re2\">rest</span>=<span class=\"st0\">\"<span class=\"es3\">${decoded#?}</span>\"</span><br/>\t\t<span class=\"kw3\">eval</span> <span class=\"co1\">${bug}</span><br/>\t\t<span class=\"re2\">c</span>=<span class=\"st0\">\"<span class=\"es3\">${decoded%%${rest2}</span>}\"</span><br/>\t\t<span class=\"re2\">decoded</span>=<span class=\"st0\">\"<span class=\"es3\">${rest}</span>\"</span><br/>\t<span class=\"kw1\">done</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re5\">-n</span> <span class=\"co1\">${BASH_VERSION:-}</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"kw1\">then</span><br/>\t\t\\<span class=\"kw3\">echo</span> <span class=\"re5\">-E</span> <span class=\"st0\">\"<span class=\"es3\">${encoded}</span>\"</span><br/>\t<span class=\"kw1\">else</span><br/>\t\tprint <span class=\"re5\">-r</span> <span class=\"re5\">--</span> <span class=\"st0\">\"<span class=\"es3\">${encoded}</span>\"</span><br/>\t<span class=\"kw1\">fi</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 13, "block": "<pre class=\"text highlighted_source\">Function UrlEncode(url)<br/>\tFor i = 1 To Len(url)<br/>\t\tn = Asc(Mid(url,i,1))<br/>\t\tIf (n &gt;= 48 And n &lt;=57) Or (n &gt;= 65 And n &lt;= 90) _<br/>\t\t\tOr (n &gt;= 97 And n &lt;= 122) Then<br/>\t\t\tUrlEncode = UrlEncode &amp; Mid(url,i,1)<br/>\t\tElse<br/>\t\t\tUrlEncode = UrlEncode &amp; \"%\" &amp; Hex(Asc(Mid(url,i,1)))<br/>\t\tEnd If<br/>\tNext<br/>End Function<br/>\u00a0<br/>WScript.Echo UrlEncode(\"http://foo bar/\")</pre>"}, {"lang": "XPL0", "loc": 21, "block": "<pre class=\"text highlighted_source\">code Text=12;<br/>string 0;               \\use zero-terminated strings<br/>\u00a0<br/>func Encode(S0);        \\Encode URL string and return its address<br/>char S0;<br/>char HD, S1(80);        \\BEWARE: very temporary string space returned<br/>int  C, I, J;<br/>[HD:= \"0123456789ABCDEF\"; \\hex digits<br/>I:= 0;  J:= 0;<br/>repeat  C:= S0(I);  I:= I+1;<br/>        if C&gt;=^0 &amp; C&lt;=^9\u00a0! C&gt;=^A &amp; C&lt;=^Z\u00a0! C&gt;=^a &amp; C&lt;=^z\u00a0! C=0<br/>        then    [S1(J):= C;  J:= J+1]           \\simply pass char to S1<br/>        else    [S1(J):= ^%;  J:= J+1;          \\encode char into S1<br/>                 S1(J):= HD(C&gt;&gt;4);  J:= J+1;<br/>                 S1(J):= HD(C&amp;$0F); J:= J+1;<br/>                ];<br/>until   C=0;<br/>return S1;<br/>];<br/>\u00a0<br/>Text(0, Encode(\"http://foo bar/\"))</pre>"}, {"lang": "Yabasic", "loc": 17, "block": "<pre class=\"text highlighted_source\">sub encode_url$(s$, exclusions$, spaceplus)<br/>    local res$, i, ch$<br/>\u00a0<br/>    for i=1 to len(s$)<br/>        ch$ = mid$(s$, i, 1)<br/>        if ch$ = \" \" and spaceplus then<br/>            ch$ = \"+\"<br/>        elsif not instr(esclusions$, ch$) and (ch$ &lt; \"0\" or (ch$ &gt; \"9\" and ch$ &lt; \"A\") or (ch$ &gt; \"Z\" and ch$ &lt; \"a\") or  ch$ &gt; \"z\") then<br/>            res$ = res$ + \"%\"<br/>            ch$ = upper$(hex$(asc(ch$)))<br/>        end if<br/>        res$ = res$ + ch$<br/>    next i<br/>    return res$<br/>end sub<br/>\u00a0<br/>print encode_url$(\"http://foo bar/\")</pre>"}, {"lang": "zkl", "loc": 2, "block": "<pre class=\"text highlighted_source\">var CURL=Import(\"zklCurl\");<br/>CURL.urlEncode(\"http://foo bar/\") //--&gt; \"http%3A%2F%2Ffoo%20bar%2F\"</pre>"}]}