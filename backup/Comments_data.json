{"task": "Comments", "blocks": [{"lang": "360 Assembly", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>* An asterisk in column one denotes a comment line<br/>* Comments may also follow any syntactically complete instruction: <br/>         LA    1,0           Comment <br/>         NOP                 Comment (after a NOP instruction)<br/>* Comments after instructions with omitted operands require a comma \",\"<br/>         END   ,             Comment (without comma, \"Comment\" assumed an operand of \"END\")<br/>\u00a0</pre>"}, {"lang": "4D", "loc": 2, "block": "<pre class=\"text highlighted_source\">`Comments in 4th Dimension begin with the accent character and extend to the end of the line (until 4D version 2004).<br/>// This is a comment starting from 4D v11 and newer. Accent character is replaced by //</pre>"}, {"lang": "6502 Assembly", "loc": 1, "block": "<pre class=\"text highlighted_source\">          nop          \u00a0; comments begin with a semicolon</pre>"}, {"lang": "8086 Assembly", "loc": 2, "block": "<pre class=\"asm highlighted_source\">\t<span class=\"kw1\">MOV</span> <span class=\"kw4\">AX</span><span class=\"sy1\">,</span> <span class=\"nu0\">4C00h</span> \t\t<span class=\"co1\">; go back to DOS</span><br/>\t<span class=\"kw1\">INT</span> <span class=\"nu0\">21h</span>                 <span class=\"co1\">; BIOS interrupt 21 base 16</span></pre>"}, {"lang": "ACL2", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">; Single line comment</span><br/>#<span class=\"sy0\">|</span> Multi-line<br/>comment <span class=\"sy0\">|</span>#</pre>"}, {"lang": "ActionScript", "loc": 1, "block": "<pre class=\"ada highlighted_source\"><span class=\"co1\">-- All Ada comments begin with \"--\" and extend to the end of the line</span></pre>"}, {"lang": "Ada", "loc": 1, "block": "<pre class=\"ada highlighted_source\"><span class=\"co1\">-- All Ada comments begin with \"--\" and extend to the end of the line</span></pre>"}, {"lang": "Agena", "loc": 9, "block": "<pre class=\"text highlighted_source\"># single line comment<br/>\u00a0<br/>#/ multi-line comment<br/>   - ends with the \"/ followed by #\" terminator on the next line<br/>/#<br/>\u00a0<br/>/* multi-line comment - C-style<br/>   - ends with the \"* followed by /\" terminator on the next line<br/>*/</pre>"}, {"lang": "ALGOL 60", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'COMMENT' this is a first comment;<br/>'COMMENT' <br/>****** this is a second comment ******<br/>;<br/>\u00a0</pre>"}, {"lang": "ALGOL 68", "loc": 1, "block": "<pre>\u00a3 This is a hash/pound comment for a UK keyboard \u00a3\n</pre>"}, {"lang": "ALGOL W", "loc": 8, "block": "<pre class=\"text highlighted_source\">begin<br/>    comment a comment;<br/>   \u00a0% another comment<br/>   \u00a0;<br/>   \u00a0% and<br/>      another<br/>   \u00a0%<br/>end this_word_is_also_a_comment.</pre>"}, {"lang": "AmigaE", "loc": 3, "block": "<pre class=\"text highlighted_source\">/* multiline comment<br/>are like C ... */<br/>-&gt; this is a end of line comment</pre>"}, {"lang": "AntLang", "loc": 1, "block": "<pre class=\"text highlighted_source\">2 + 2 /This is a comment</pre>"}, {"lang": "Apex", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>System.debug ('I will execute');   // This comment is ignored.<br/>/*<br/> I am a large comment, completely ignored as well.<br/>*/<br/>\u00a0</pre>"}, {"lang": "APL", "loc": 1, "block": "<pre class=\"text highlighted_source\">\u235d This is a comment</pre>"}, {"lang": "AppleScript", "loc": 14, "block": "<pre class=\"applescript highlighted_source\">\u00a0<br/><span class=\"co1\">--This is a single line comment</span><br/>\u00a0<br/><span class=\"kw1\">display dialog</span> <span class=\"st0\">\"ok\"</span> <span class=\"co1\">--it can go at the end of a line</span><br/>\u00a0<br/># Hash style comments are also supported<br/>\u00a0<br/><span class=\"coMULTI\">(* This is a multi<br/>line comment*)</span><br/>\u00a0<br/><span class=\"coMULTI\">(* This is a comment. --comments can be nested<br/>  (* Nested block comment *)</span><br/><span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "ARM Assembly", "loc": 10, "block": "<pre class=\"arm highlighted_source\">\u00a0<br/><span class=\"sy0\">/*</span> ARM assembly Raspberry PI comment one line <span class=\"sy0\">*/</span><br/><span class=\"sy0\">/*</span>  comment line <span class=\"nu0\">1</span><br/>    comment line <span class=\"nu0\">2</span><br/><span class=\"sy0\">*/</span> <br/>\u00a0<br/>\t<span class=\"kw1\">mov</span> <span class=\"kw35\">r0</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>    @ this comment on end of line<br/>\t<span class=\"kw1\">mov</span> <span class=\"kw35\">r1</span><span class=\"sy0\">,</span>#<span class=\"nu0\">0</span>    <span class=\"sy0\">//</span>  authorized comment<br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Arendelle", "loc": 1, "block": "<pre class=\"asymptote highlighted_source\"><span class=\"co1\">// double slash to newline</span></pre>"}, {"lang": "Asymptote", "loc": 1, "block": "<pre class=\"asymptote highlighted_source\"><span class=\"co1\">// double slash to newline</span></pre>"}, {"lang": "AutoHotkey", "loc": 5, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">Msgbox</span></a><span class=\"sy0\">,</span> comments demo <span class=\"co1\">; end of line comment</span><br/><span class=\"coMULTI\">/*<br/>multiline comment1<br/>multiline comment2<br/>*/</span></pre>"}, {"lang": "AutoIt", "loc": 7, "block": "<pre class=\"autoit highlighted_source\">\u00a0<br/><span class=\"coMULTI\">#cs<br/>Everything between the cs and and the ce is commented.<br/>Commented code is not used by the computer.<br/>#ce</span><br/><span class=\"co0\">;individual lines after a semicolon are commented.</span><br/>\u00a0</pre>"}, {"lang": "AWK", "loc": 3, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span> <span class=\"co1\"># this code does something</span><br/>  <span class=\"co1\"># do something</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Axe", "loc": 1, "block": "<pre class=\"text highlighted_source\">.This is a single-line comment</pre>"}, {"lang": "Babel", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>-- This is a line-comment<br/>\u00a0<br/>#<br/>    This is a block-comment<br/>    It goes until de-dent<br/>\u00a0<br/>dedent: 0x42 -- The comment block above is now closed<br/>\u00a0</pre>"}, {"lang": "BASIC", "loc": 2, "block": "<pre class=\"gwbasic highlighted_source\"><span class=\"nu0\">100</span> <span class=\"co2\">REM Standard BASIC comments begin with \"REM\" (remark) and extend to the end of the line</span><br/><span class=\"nu0\">110</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"this is code\"</span>: <span class=\"co2\">REM comment after statement</span></pre>"}, {"lang": "Batch File", "loc": 1, "block": "<pre class=\"dos highlighted_source\"><span class=\"co1\">rem Single-line comment.</span></pre>"}, {"lang": "BBC BASIC", "loc": 2, "block": "<pre class=\"text highlighted_source\">      REM This is a comment which is ignored by the compiler<br/>      *| This is a comment which is compiled but ignored at run time</pre>"}, {"lang": "bc", "loc": 11, "block": "<pre class=\"text highlighted_source\">/* This is a comment. */<br/>\u00a0<br/>2 + /* Comment between tokens. */ 3<br/>\u00a0<br/>\"This is a string, /* NOT a comment */.\"<br/>\u00a0<br/>/*<br/> * A comment can have multiple lines. These asterisks in the middle<br/> * of the comment are only for style. You must not nest a comment<br/> * inside another comment; the first asterisk-slash ends the comment.<br/> */</pre>"}, {"lang": "Befunge", "loc": 2, "block": "<pre class=\"text highlighted_source\">&amp; read a number 2+ add two <a class=\"__cf_email__\" data-cfemail=\"1c325c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> display result and exit<br/>  ^- inline comments -^     &lt;-^- other comments</pre>"}, {"lang": "Blast", "loc": 2, "block": "<pre class=\"text highlighted_source\"># A hash symbol at the beginning of a line marks the line as a comment <br/>\u00a0</pre>"}, {"lang": "Bracmat", "loc": 1, "block": "<pre class=\"bf highlighted_source\"><span class=\"co1\">This is a comment</span></pre>"}, {"lang": "Brainf***", "loc": 1, "block": "<pre class=\"bf highlighted_source\"><span class=\"co1\">This is a comment</span></pre>"}, {"lang": "Brat", "loc": 5, "block": "<pre class=\"text highlighted_source\"># Single line comment<br/>\u00a0<br/>#* Multi<br/>   Line<br/>   Comment *#</pre>"}, {"lang": "Brlcad", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/> # Comments in mget scripts are prefixed with a hash symbol<br/> ls   # comments may appear at the end of a line<br/>\u00a0</pre>"}, {"lang": "Burlesque", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>\"I'm sort of a comment\"vv<br/>\u00a0</pre>"}, {"lang": "C", "loc": 4, "block": "<pre class=\"c highlighted_source\"><span class=\"coMULTI\">/* This is a comment. */</span><br/><span class=\"coMULTI\">/* So is this<br/>   multiline comment.<br/> */</span></pre>"}, {"lang": "ChucK", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&lt;-- Not common <br/>// Usual comment<br/>\u00a0</pre>"}, {"lang": "C++", "loc": 1, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co1\">// This is a comment</span></pre>"}, {"lang": "C#", "loc": 8, "block": "<pre class=\"csharp highlighted_source\"><span class=\"co1\">//This is a comment.</span><br/><span class=\"co1\">//This is other comment.</span><br/>\u00a0<br/><span class=\"coMULTI\">/* This is a comment too. */</span><br/>\u00a0<br/><span class=\"coMULTI\">/* This is a <br/>multi-line<br/>comment */</span></pre>"}, {"lang": "Chapel", "loc": 4, "block": "<pre class=\"text highlighted_source\">// single line<br/>\u00a0<br/>/* multi<br/>line */</pre>"}, {"lang": "Chef", "loc": 16, "block": "<pre class=\"text highlighted_source\">Comment Stew.<br/>\u00a0<br/>This is a comment.<br/>The other comment is a loop, but you can name it anything (single word only).<br/>You can also name ingredients as comments<br/>This is pseudocode.<br/>\u00a0<br/>Ingredients.<br/>Ingredient list<br/>\u00a0<br/>Method.<br/>Methods.<br/>SingleWordCommentOne the Ingredient.<br/>Methods.<br/>SingleWordCommentTwo until SingleWordCommentOned.<br/>Methods.</pre>"}, {"lang": "Clean", "loc": 2, "block": "<pre class=\"text highlighted_source\">Start = /* This is a multi-<br/>           line comment     */ 17 // This is a single-line comment</pre>"}, {"lang": "Clojure", "loc": 3, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;; This is a comment</span><br/><span class=\"br0\">(</span>defn foo <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>  <span class=\"nu0\">123</span><span class=\"br0\">)</span> <span class=\"co1\">; also a comment</span></pre>"}, {"lang": "COBOL", "loc": 1, "block": "<pre class=\"cobol highlighted_source\">     <span class=\"sy0\"> * </span>an asterisk <span class=\"kw3\">in</span> 7th <span class=\"kw3\">column</span> comments the <span class=\"kw3\">line</span> out</pre>"}, {"lang": "CoffeeScript", "loc": 5, "block": "<pre class=\"coffeescript highlighted_source\"><span class=\"co1\"># one line comment</span><br/>\u00a0<br/><span class=\"coMULTI\">### multi<br/>line<br/>comment ###</span></pre>"}, {"lang": "ColdFusion", "loc": 5, "block": "<pre class=\"cfm highlighted_source\">As ColdFusion's grammar is based around HTML syntax, commenting is similar to HTML.<br/><span class=\"sc0\">&lt;!--- This is a comment.  Nothing in this tag can be seen by the end user.</span><br/><span class=\"sc0\">       Note the three-or-greater dashes to open and close the tag. ---&gt;</span><br/><span class=\"sc0\">&lt;!--  This is an HTML comment.  Any HTML between the opening and closing of the tag will be ignored, but any ColdFusion code will still run.</span><br/><span class=\"sc0\">       Note that in the popular FuseBox framework for ColdFusion, the circuit.xml files require that you use this style of comment. --&gt;</span></pre>"}, {"lang": "Common Lisp", "loc": 12, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;;;; This code implements the foo and bar functions</span><br/>\u00a0<br/><span class=\"co1\">;;; The foo function calls bar on the first argument and multiplies the result by the second.</span><br/><span class=\"co1\">;;; The arguments are two integers</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> foo <span class=\"br0\">(</span>a b<span class=\"br0\">)</span><br/>   <span class=\"co1\">;; Call bar and multiply</span><br/>   <span class=\"br0\">(</span>* <span class=\"br0\">(</span>bar a<span class=\"br0\">)</span> <span class=\"co1\">; Calling bar</span><br/>      b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;;; The bar function simply adds 3 to the argument</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> bar <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>+ n <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Component Pascal", "loc": 5, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"coMULTI\">(* Comments (* can nest *)</span> <br/>   and they can span multiple lines.<br/> <span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 22, "block": "<pre class=\"d highlighted_source\"><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// A single line comment.</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* This is a simple C-style comment that can't be nested.<br/>    Comments mostly work similar to C, newlines are irrelevant.<br/>    */</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/+ This is a nestable comment<br/>      /+ See?<br/>      +/</span><br/>    <span class=\"sy0\">+/</span><br/>\u00a0<br/>    <span class=\"co2\">/// Documentation single line comment.</span><br/>\u00a0<br/>    <span class=\"co3\">/**<br/>    Simple C-style documentation comment.<br/>    */</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/++<br/>    Nestable documenttion comment.<br/>    +/</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "dc", "loc": 1, "block": "<pre class=\"text highlighted_source\">[Making and discarding a string acts like a comment] sz</pre>"}, {"lang": "Deluge", "loc": 1, "block": "<pre class=\"text highlighted_source\">// single line comment</pre>"}, {"lang": "Delphi", "loc": 1, "block": "<pre class=\"delphi highlighted_source\"><span class=\"co1\">// single line comment</span></pre>"}, {"lang": "D\u00e9j\u00e0 Vu", "loc": 2, "block": "<pre class=\"text highlighted_source\">#this is a comment<br/>!print \"this is not a comment, obviously\" #this is a comment as well</pre>"}, {"lang": "DWScript", "loc": 10, "block": "<pre class=\"delphi highlighted_source\"><span class=\"coMULTI\">(* This is a comment.<br/>   It may extend across multiple lines. *)</span><br/>\u00a0<br/><span class=\"coMULTI\">{ Alternatively curly braces<br/>  can be used. }</span><br/>\u00a0<br/><span class=\"sy3\">/*</span> C<span class=\"sy3\">-</span>style multi<span class=\"sy3\">-</span>line comments <br/>   are supported  <span class=\"sy3\">*/</span><br/>\u00a0<br/><span class=\"co1\">// and single-line C++ style comments too</span></pre>"}, {"lang": "Dylan", "loc": 7, "block": "<pre class=\"text highlighted_source\">// This is a comment<br/>\u00a0<br/>/* <br/>   This is a comment<br/>   that spans multiple<br/>   lines <br/>*/</pre>"}, {"lang": "E", "loc": 6, "block": "<pre class=\"e highlighted_source\"><span class=\"co1\"># This is a regular comment.</span><br/>\u00a0<br/><span class=\"sy0\">?</span> <span class=\"st0\">\"This is an Updoc comment, which<br/>&gt; is an executable example or test case.\"</span>.<span class=\"me1\">split</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/><span class=\"co1\"># value: [\"This\", \"is\", \"an\", \"Updoc\", \"comment,\", \"which</span><br/><span class=\"co1\">#        is\", \"an\", \"executable\", \"example\", \"or\", \"test\", \"case.\"]</span></pre>"}, {"lang": "EchoLisp", "loc": 16, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"nu0\">666</span> <span class=\"co1\">; this is an end-of-line comment</span><br/>\u00a0<br/>#<span class=\"sy0\">|</span> <br/> This is a multi-line comment<br/> Nesting is <span class=\"kw1\">not</span> allowed<br/><span class=\"sy0\">|</span>#<br/>\u00a0<br/><span class=\"co1\">;; The (info &lt;name&gt; [&lt;string&gt;)] function associates a symbol and a comment</span><br/><span class=\"co1\">;; These info strings are saved in permanent memory (local storage)</span><br/><span class=\"co1\">;; Unicode characters may be used, as everywhere in the language</span><br/>\u00a0<br/><span class=\"br0\">(</span>define mynumber <span class=\"nu0\">666</span><span class=\"br0\">)</span> \u2192 mynumber<br/><span class=\"br0\">(</span>info 'mynumber <span class=\"st0\">\"\ud83d\udc40 Symbols may be commented with an information string \ud83d\udc7a\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>info 'mynumber<span class=\"br0\">)</span> \u2192 displays the above inside the 'info' field<span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "ECL", "loc": 1, "block": "<pre class=\"text highlighted_source\">// this is a one-line comment </pre>"}, {"lang": "EDSAC order code", "loc": 7, "block": "<pre class=\"text highlighted_source\">[This is a comment]<br/>[<br/>And so<br/>is<br/>this<br/>]<br/>[But in 1949 they wouldn't have been]</pre>"}, {"lang": "EGL", "loc": 1, "block": "<pre class=\"eiffel highlighted_source\"><span class=\"co1\">-- inline comment, continues until new line</span></pre>"}, {"lang": "Eiffel", "loc": 1, "block": "<pre class=\"eiffel highlighted_source\"><span class=\"co1\">-- inline comment, continues until new line</span></pre>"}, {"lang": "Ela", "loc": 4, "block": "<pre class=\"text highlighted_source\">//single line comment<br/>\u00a0<br/>/*multiple line<br/>comment*/</pre>"}, {"lang": "Elena", "loc": 4, "block": "<pre class=\"text highlighted_source\">//single line comment<br/>\u00a0<br/>/*multiple line<br/>comment*/</pre>"}, {"lang": "Elixir", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># single line comment<br/>\u00a0</pre>"}, {"lang": "Elm", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>-- a single line comment<br/>\u00a0<br/>{- a multiline comment<br/>   {- can be nested -}<br/>-}<br/>\u00a0</pre>"}, {"lang": "Emacs Lisp", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">; This is a comment</span></pre>"}, {"lang": "Erlang", "loc": 1, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">% Erlang comments begin with \"%\" and extend to the end of the line.</span></pre>"}, {"lang": "ERRE", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>! Standard ERRE comments begin with\u00a0! and extend to the end of the line<br/>\u00a0<br/>PRINT(\"this is code\")\u00a0! comment after statement<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 1, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"co1\">-- This is a comment</span></pre>"}, {"lang": "FreeBASIC", "loc": 19, "block": "<pre class=\"text highlighted_source\">' FB 1.05.0 Win64<br/>\u00a0<br/>' This a single line comment<br/>\u00a0<br/>REM This is another way of writing a single line comment<br/>\u00a0<br/>/' <br/>  This is a<br/>  multi-line<br/>  comment<br/>'/<br/>\u00a0<br/>/' <br/>  Multi-line comments<br/>  /'<br/>    can also be nested<br/>  '/<br/>  like this<br/>'/</pre>"}, {"lang": "F#", "loc": 3, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"co1\">// this comments to the end of the line</span><br/><span class=\"co3\">(* this comments a region<br/>   which can be multi-line *)</span></pre>"}, {"lang": "Factor", "loc": 4, "block": "<pre class=\"text highlighted_source\">! Comments starts with \"! \"<br/>#! Or with \"#! \"<br/>! and last until the end of the line<br/>\u00a0</pre>"}, {"lang": "Fancy", "loc": 3, "block": "<pre class=\"text highlighted_source\"># Comments starts with \"#\"<br/># and last until the end of the line<br/>\u00a0</pre>"}, {"lang": "Falcon", "loc": 8, "block": "<pre class=\"falcon highlighted_source\">\u00a0<br/><span class=\"coMULTI\">/* Start comment block<br/> My Life Story<br/> */</span><br/>\u00a0<br/><span class=\"co1\">// set up my bank account total</span><br/>bank_account_total <span class=\"sy0\">=</span> <span class=\"nu0\">1000000</span> <span class=\"co1\">// Wish this was the case</span><br/>\u00a0</pre>"}, {"lang": "FALSE", "loc": 1, "block": "<pre class=\"text highlighted_source\">{comments are in curly braces}</pre>"}, {"lang": "Fish", "loc": 4, "block": "<pre class=\"text highlighted_source\">v This is the Fish version of the Integer sequence task<br/>&gt;0&gt;:n1+v all comments here<br/>  ^o\" \"&lt; still here<br/>And of course here\u00a0:)</pre>"}, {"lang": "Forth", "loc": 2, "block": "<pre class=\"text highlighted_source\">\\ The backslash skips everything else on the line<br/>( The left paren skips everything up to the next right paren on the same line)</pre>"}, {"lang": "Fortran", "loc": 2, "block": "<pre class=\"fortran highlighted_source\"><span class=\"co1\">C     This would be some kind of comment</span><br/><span class=\"co1\">C     Usually one would avoid columns 2-6 even in a comment.</span></pre>"}, {"lang": "Frink", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>// This is a single-line comment<br/>/*  This is a comment<br/>    that spans multiple lines<br/>    and so on.<br/>*/<br/>\u00a0</pre>"}, {"lang": "Futhark", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>-- Single-line comment<br/>\u00a0<br/>-- Multi-line<br/>-- comment (yes, just several single-line comments).<br/>\u00a0</pre>"}, {"lang": "FUZE BASIC", "loc": 5, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"sy0\">//</span>Comment <span class=\"br0\">(</span>No space required<span class=\"br0\">)</span><br/># Comment <span class=\"br0\">(</span>Space required<span class=\"br0\">)</span><br/>REM Comment <span class=\"br0\">(</span>Space require<span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"This is an inline comment.\"</span><span class=\"sy0\">//</span>Comment <span class=\"br0\">(</span>No space required<span class=\"br0\">)</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a></pre>"}, {"lang": "Gambas", "loc": 8, "block": "<pre class=\"gambas highlighted_source\">\u00a0<br/> <span class=\"co1\">' This whole line is a comment and is ignored by the gambas interpreter</span><br/> <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">print</span></a> <span class=\"st0\">\"Hello\"</span> <span class=\"co1\">' Comments after an apostrophe are ignored</span><br/> <span class=\"co1\">'' A bold-style comment</span><br/> <span class=\"co1\">' TODO:  To Do  comment will appear in Task Bar</span><br/> <span class=\"co1\">' FIXME: Fix Me comment will appear in Task Bar</span><br/> <span class=\"co1\">' NOTE:  Note   commnet will appear in Task Bar</span><br/>\u00a0</pre>"}, {"lang": "GAP", "loc": 1, "block": "<pre class=\"text highlighted_source\"># Comment (till end of line)</pre>"}, {"lang": "Gema", "loc": 1, "block": "<pre class=\"text highlighted_source\">! comment starts with \"!\" and continues to end of line</pre>"}, {"lang": "GML", "loc": 1, "block": "<pre class=\"gml highlighted_source\"> <span class=\"co1\">// comment starts with \"//\" and continues to the end of the line</span></pre>"}, {"lang": "gnuplot", "loc": 5, "block": "<pre class=\"gnuplot highlighted_source\"><span class=\"co1\"># this is a comment</span><br/>\u00a0<br/><span class=\"co1\"># backslash continues \\</span><br/>a comment to the <span class=\"sy0\">ne</span>xt \\<br/>li<span class=\"sy0\">ne</span> or <span class=\"kw5\">lines</span></pre>"}, {"lang": "Go", "loc": 5, "block": "<pre class=\"go highlighted_source\"><span class=\"co1\">// this is a single line comment</span><br/><span class=\"coMULTI\">/* this is<br/>   a multi-line<br/>   block comment.<br/>/* It does not nest */</span></pre>"}, {"lang": "Golfscript", "loc": 1, "block": "<pre class=\"text highlighted_source\"># end of line comment</pre>"}, {"lang": "Gri", "loc": 2, "block": "<pre class=\"text highlighted_source\"># this is a comment<br/>show 123        # this too is a comment</pre>"}, {"lang": "Groovy", "loc": 2, "block": "<pre class=\"gwbasic highlighted_source\"><span class=\"nu0\">100</span> <span class=\"co2\">REM Standard BASIC comments begin with \"REM\" (remark) and extend to the end of the line</span><br/><span class=\"nu0\">110</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"this is code\"</span>: <span class=\"co2\">REM comment after statement</span></pre>"}, {"lang": "GW-BASIC", "loc": 2, "block": "<pre class=\"gwbasic highlighted_source\"><span class=\"nu0\">100</span> <span class=\"co2\">REM Standard BASIC comments begin with \"REM\" (remark) and extend to the end of the line</span><br/><span class=\"nu0\">110</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"this is code\"</span>: <span class=\"co2\">REM comment after statement</span></pre>"}, {"lang": "Haskell", "loc": 15, "block": "<pre class=\"haskell highlighted_source\">i code <span class=\"sy0\">=</span> True <span class=\"co1\">-- I am a comment.</span><br/>\u00a0<br/><span class=\"coMULTI\">{- I am also<br/>   a comment. {-comments can be nested-}</span><br/>   <span class=\"kw1\">let</span> u x <span class=\"sy0\">=</span> x x <span class=\"br0\">(</span>this code <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not\"><span class=\"kw3\">not</span></a> compiled<span class=\"br0\">)</span><br/>   Are you<span class=\"sy0\">?</span> <span class=\"sy0\">-</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">-- |This is a Haddock documentation comment for the following code</span><br/>i code <span class=\"sy0\">=</span> True<br/><span class=\"co1\">-- ^This is a Haddock documentation comment for the preceding code</span><br/>\u00a0<br/><span class=\"coMULTI\">{-|<br/>  This is a Haddock documentation block comment<br/>-}</span><br/>i code <span class=\"sy0\">=</span> True</pre>"}, {"lang": "Haxe", "loc": 7, "block": "<pre class=\"text highlighted_source\">// Single line commment.<br/>\u00a0<br/>/* <br/>   Multiple<br/>   line<br/>   comment.<br/>*/</pre>"}, {"lang": "HicEst", "loc": 1, "block": "<pre class=\"hicest highlighted_source\"><span class=\"co1\">! a comment starts with a \"!\" and ends at the end of the line</span></pre>"}, {"lang": "HTML", "loc": 1, "block": "<pre class=\"html5 highlighted_source\"><span class=\"sc-1\">&lt;!-- Anything within these bracket tags is commented, single or multi-line. --&gt;</span></pre>"}, {"lang": "Icon and Unicon", "loc": 4, "block": "<pre class=\"icon highlighted_source\"><span class=\"co1\"># This is a comment</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> x<span class=\"br0\">(</span>y<span class=\"sy1\">,</span>z<span class=\"br0\">)</span>    <span class=\"co1\">#: This is a comment and an IPL meta-comment for a procedure</span><br/>\u00a0</pre>"}, {"lang": "IDL", "loc": 2, "block": "<pre class=\"idl highlighted_source\"><span class=\"sy0\">;</span> The following computes the factorial of a number <span class=\"st0\">\"n\"</span><br/>fact <span class=\"sy0\">=</span> product<span class=\"br0\">(</span>indgen<span class=\"br0\">(</span> n <span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">;</span> where n should be an integer</pre>"}, {"lang": "Inform 7", "loc": 6, "block": "<pre class=\"text highlighted_source\">[This is a single-line comment.]<br/>\u00a0<br/>[This is a<br/>multi-line comment.]<br/>\u00a0<br/>[Comments can [be nested].]</pre>"}, {"lang": "Io", "loc": 6, "block": "<pre class=\"io highlighted_source\"><span class=\"co2\"># Single-line comment</span><br/>\u00a0<br/><span class=\"co1\">// Single-line comment</span><br/>\u00a0<br/><span class=\"coMULTI\">/* Multi-line<br/>   comment */</span></pre>"}, {"lang": "J", "loc": 13, "block": "<pre class=\"j highlighted_source\"><span class=\"co1\">NB. Text that follows 'NB.' has no effect on execution.</span><br/>\u00a0<br/><span class=\"nu0\">0</span>\u00a0: <span class=\"nu0\">0</span><br/>Multi-line comments may be placed in strings,<br/>like this.<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>Note<span class=\"co2\"> 'example'<br/>Another way to record multi-line comments as text is to use 'Note', which is actually<br/>a simple program that makes it clearer when defined text is used only to provide comment.<br/>)</span><br/>\u00a0<br/><span class=\"st_h\">'A simple string which is not used is legal, and will be discarded'</span></pre>"}, {"lang": "Java", "loc": 1, "block": "<pre class=\"java highlighted_source\"><span class=\"coMULTI\">/* This is a comment */</span></pre>"}, {"lang": "JavaScript", "loc": 1, "block": "<pre class=\"javascript highlighted_source\">n <span class=\"sy0\">=</span> n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"co1\">// This is a comment</span></pre>"}, {"lang": "JCL", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>//* This is a comment line (//* in columns 1-3)<br/>\u00a0</pre>"}, {"lang": "Joy", "loc": 4, "block": "<pre class=\"text highlighted_source\"># this is a single line comment<br/>\u00a0<br/>(* this is a<br/>multi-line comment *)</pre>"}, {"lang": "jq", "loc": 3, "block": "<pre class=\"text highlighted_source\"># this is a single line comment<br/>\"Hello #world\" # the first # on this line is part of the jq program<br/>\u00a0</pre>"}, {"lang": "Julia", "loc": 7, "block": "<pre class=\"text highlighted_source\"># single line<br/>\u00a0<br/>#=<br/>Multi-<br/>line<br/>comment<br/>=#</pre>"}, {"lang": "K", "loc": 3, "block": "<pre class=\"text highlighted_source\">  / this is a comment<br/>  2+2  / as is this<br/>\u00a0</pre>"}, {"lang": "KonsolScript", "loc": 8, "block": "<pre class=\"text highlighted_source\">//This is a comment.<br/>//This is another comment.<br/>\u00a0<br/>/* This is a comment too. */<br/>\u00a0<br/>/* This is a <br/>multi-line<br/>comment */</pre>"}, {"lang": "Kotlin", "loc": 31, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// This is a single line comment</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/>    This is a <br/>    multi-line<br/>    comment<br/>*/</span><br/>\u00a0<br/><span class=\"coMULTI\">/*<br/>    Multi-line comments<br/>    /*<br/>        can also be nested<br/>    */</span><br/>    like so<br/><span class=\"sy0\">*</span>/<br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> CURRENT<span class=\"sy0\">_</span>VERSION <span class=\"sy0\">=</span> <span class=\"st0\">\"1.0.5-2\"</span>  <span class=\"co1\">// A comment can also be added at the end of a line</span><br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"coMULTI\">/* or even in the middle of a line */</span> NEXT<span class=\"sy0\">_</span>MAJOR<span class=\"sy0\">_</span>VERSION <span class=\"sy0\">=</span> <span class=\"st0\">\"1.1\"</span><br/>\u00a0<br/><span class=\"coMULTI\">/**<br/> * This is a documentation comment used by KDoc.<br/> *<br/> * It's documenting the main function which is the entry-point to a Kotlin executable.<br/> *<br/> * @param [args] A string array containing the command line arguments (if any) passed to the executable<br/> * @return Implicit return value is Unit which signifies no meaningful return value (like 'void' in java)<br/> */</span><br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Current stable version is $CURRENT_VERSION\"</span><span class=\"br0\">)</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Next major version is $NEXT_MAJOR_VERSION\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "LabVIEW", "loc": 1, "block": "<pre class=\"text highlighted_source\"># This is a comment.</pre>"}, {"lang": "Lang5", "loc": 1, "block": "<pre class=\"text highlighted_source\"># This is a comment.</pre>"}, {"lang": "Lasso", "loc": 11, "block": "<pre class=\"text highlighted_source\">//This is a comment.<br/>\u00a0<br/>/* This is also a comment. */<br/>\u00a0<br/>/* A multi-line<br/>comment */<br/>\u00a0<br/>/* ==========================<br/>A multi-line<br/>comment <br/>=========================== */</pre>"}, {"lang": "LaTeX", "loc": 1, "block": "<pre class=\"latex highlighted_source\"><span class=\"co1\">% This is a comment</span></pre>"}, {"lang": "Liberty BASIC", "loc": 5, "block": "<pre class=\"lb highlighted_source\"><span class=\"co1\">'This is a comment</span><br/><span class=\"kw1\">REM</span> This is a comment<br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">\"This has a comment on the end of the line.\"</span> <span class=\"co1\">'This is a comment</span><br/><span class=\"kw1\">print</span> <span class=\"st0\">\"This also has a comment on the end of the line.\"</span> <span class=\"sy0\">:</span> <span class=\"kw1\">REM</span> This is a comment</pre>"}, {"lang": "Lily", "loc": 1, "block": "<pre class=\"text highlighted_source\"># This is a single-line comment</pre>"}, {"lang": "Lilypond", "loc": 4, "block": "<pre class=\"text highlighted_source\">% This is a comment<br/>\u00a0<br/>%{ This is a comment<br/>spanning several lines\u00a0%}</pre>"}, {"lang": "Lingo", "loc": 2, "block": "<pre class=\"text highlighted_source\">-- This is a comment.<br/>-- This is another comment</pre>"}, {"lang": "LiveCode", "loc": 6, "block": "<pre class=\"text highlighted_source\">-- comment may appear anywhere on line<br/>// comment may appear anywhere on line<br/># comment may appear anywhere on line<br/>/*  this is a <br/>block comment that<br/>may span any number of lines */</pre>"}, {"lang": "Logo", "loc": 1, "block": "<pre class=\"text highlighted_source\">; comments come after a semicolon, and last until the end of the line</pre>"}, {"lang": "Logtalk", "loc": 1, "block": "<pre class=\"logtalk highlighted_source\"><span class=\"co1\">% single-line comment; extends to the end of the line</span></pre>"}, {"lang": "LotusScript", "loc": 1, "block": "<pre class=\"lotusscript highlighted_source\"><span class=\"co1\">' This is a comment</span></pre>"}, {"lang": "LSE64", "loc": 1, "block": "<pre class=\"text highlighted_source\"># single line comment (space after # is required)</pre>"}, {"lang": "Lua", "loc": 4, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- A single line comment</span><br/>\u00a0<br/><span class=\"coMULTI\">--[[A multi-line <br/>    comment --]]</span></pre>"}, {"lang": "M4", "loc": 8, "block": "<pre class=\"text highlighted_source\">eval(2*3)  # eval(2*3)  \"#\" and text after it aren't processed but passed along<br/>\u00a0<br/>dnl  this text completely disappears, including the new line<br/>\u00a0<br/>divert(-1)<br/>Everything diverted to -1 is processed but the output is discarded.<br/>A comment could take this form as long as no macro names are used.<br/>divert</pre>"}, {"lang": "Maple", "loc": 5, "block": "<pre class=\"text highlighted_source\">x\u00a0:= 4: x; # Everything on this line, after this, is a comment.<br/>\u00a0<br/>17; (* This<br/>   is<br/>   a multiline comment *) 23.4;</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 1, "block": "<pre class=\"text highlighted_source\">(*this is a comment*)</pre>"}, {"lang": "MATLAB", "loc": 2, "block": "<pre class=\"matlab highlighted_source\"><span class=\"co1\">%This is a comment</span><br/><span class=\"co1\">%% Two percent signs and a space are called a cell divider</span></pre>"}, {"lang": "Maxima", "loc": 3, "block": "<pre class=\"text highlighted_source\">/* Comment<br/>  /* Nested comment */<br/>*/</pre>"}, {"lang": "MAXScript", "loc": 4, "block": "<pre class=\"text highlighted_source\">-- Two dashes precede a single line comment<br/>\u00a0<br/>/* This is a<br/>   multi-line comment */</pre>"}, {"lang": "MBS", "loc": 6, "block": "<pre class=\"text highlighted_source\">! A pling in a line starts a comment<br/>\u00a0<br/>INT   n:=5  \u00a0! Comments can appear at the end of a line<br/>\u00a0<br/>/* A comment block can also be defined using climbstar and starclimb symbols. <br/>  This allows comments to be stretched across several lines */</pre>"}, {"lang": "Metafont", "loc": 1, "block": "<pre class=\"text highlighted_source\">% this is \"to-end-of-line\" comment</pre>"}, {"lang": "Microsoft Small Basic", "loc": 2, "block": "<pre class=\"text highlighted_source\">' This is a comment<br/>i = i + 1  ' You can also append comments to statements</pre>"}, {"lang": "Mirah", "loc": 5, "block": "<pre class=\"text highlighted_source\">puts 'code' # I am a comment<br/>/* This is<br/> * a multiple<br/> * line comment */<br/>\u00a0</pre>"}, {"lang": "mIRC Scripting Language", "loc": 6, "block": "<pre class=\"mirc highlighted_source\"><span class=\"co1\">;Single Line Comment</span><br/><span class=\"sy0\">/</span>*<br/>Multiple<br/>Line<br/>Comment<br/>*<span class=\"sy0\">/</span></pre>"}, {"lang": "Modula-2", "loc": 3, "block": "<pre class=\"text highlighted_source\">(* Comments (* can nest *) <br/>   and they can span multiple lines.<br/> *)</pre>"}, {"lang": "Modula-3", "loc": 3, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"coMULTI\">(* Comments (* can nest *)</span> <br/>   and they can span multiple lines.<br/> <span class=\"sy0\">*</span><span class=\"br0\">)</span></pre>"}, {"lang": "Monte", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># This comment goes to the end of the line<br/>/** This comment is multi-line.<br/>    Yes, it starts with a two stars<br/>    and ends with only one.<br/>    These should only be used for docstrings. */<br/>\u00a0</pre>"}, {"lang": "MontiLang", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>/# This is a comment #/<br/>/# <br/>comments can span multiple lines <br/>nested comments are not supported #/<br/>\u00a0</pre>"}, {"lang": "MOO", "loc": 3, "block": "<pre class=\"text highlighted_source\">\"String literals are technically the only long-term comment format\";<br/>// Some compilers will, however, compile // one-liners to string literals as well (and vice-versa)<br/>/* Classical C-style comments are removed entirely during compile */</pre>"}, {"lang": "Neko", "loc": 4, "block": "<pre class=\"text highlighted_source\">// Single line comment, of course!<br/>/*<br/>Multi line comment!<br/>*/</pre>"}, {"lang": "Nemerle", "loc": 6, "block": "<pre class=\"text highlighted_source\">// This comment goes up to the end of the line<br/>/* This<br/>is<br/>a<br/>multiline<br/>comment */</pre>"}, {"lang": "NESL", "loc": 1, "block": "<pre class=\"text highlighted_source\">% This is a comment.\u00a0%</pre>"}, {"lang": "NetRexx", "loc": 9, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/*<br/>\u00a0<br/> NetRexx comment block<br/>\u00a0<br/>*/</span><br/>\u00a0<br/><span class=\"co1\">-- NetRexx line comment</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "NewLISP", "loc": 1, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">; This is a comment</span></pre>"}, {"lang": "Nim", "loc": 16, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\"># Nim supports single-line comments</span><br/>\u00a0<br/>var x <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"co1\">## Documentation comments start with double hash characters.</span><br/>\u00a0<br/>var y <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"co1\">## Documentation comments are a proper part of the syntax (they're not discarded by parser, and a real part of AST).</span><br/>\u00a0<br/><span class=\"co1\">#[</span><br/>There are also multi-line comments<br/>Everything inside of <span class=\"co1\">#[]# is commented.</span><br/><span class=\"br0\">]</span><span class=\"co1\">#</span><br/>\u00a0<br/><span class=\"co1\"># You can also discard multiline statements:</span><br/>\u00a0<br/>discard <span class=\"st0\">\"\"\"This can be considered as a \"comment\" too<br/>This is multi-line\"\"\"</span><br/>\u00a0</pre>"}, {"lang": "NSIS", "loc": 8, "block": "<pre class=\"nsis highlighted_source\">\u00a0<br/><span class=\"co2\"># This is a comment that goes from the # to the end of the line.</span><br/><span class=\"co1\">; This is a comment that goes from the\u00a0; to the end of the </span><br/>\u00a0<br/><span class=\"coMULTI\">/* This is a <br/>multi-line<br/>comment */</span><br/>\u00a0</pre>"}, {"lang": "Oberon-2", "loc": 8, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"coMULTI\">(* this is a comment *)</span><br/><span class=\"coMULTI\">(* <br/>   and this is a<br/>   multiline comment<br/>   (* with a nested comment *)</span><br/><span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 10, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"co1\">#This is a comment.</span><br/><span class=\"co1\"># This is other comment.</span><br/>\u00a0<br/><span class=\"coMULTI\">#~ This is a comment too. ~#</span><br/>\u00a0<br/><span class=\"coMULTI\">#~ This is a <br/>multi-line<br/>comment ~#</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 5, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"co1\">(* This a comment<br/>   (* containing nested comment *)<br/> *)</span><br/>\u00a0<br/><span class=\"co1\">(** This an OCamldoc documentation comment *)</span></pre>"}, {"lang": "OCaml", "loc": 5, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"co1\">(* This a comment<br/>   (* containing nested comment *)<br/> *)</span><br/>\u00a0<br/><span class=\"co1\">(** This an OCamldoc documentation comment *)</span></pre>"}, {"lang": "Oforth", "loc": 1, "block": "<pre class=\"text highlighted_source\">// This is a comment...</pre>"}, {"lang": "Octave", "loc": 8, "block": "<pre class=\"octave highlighted_source\"><span class=\"co1\"># I am a comment till the end of line</span><br/><span class=\"co2\">% I am a comment till the end of line</span><br/><span class=\"co5\"><br/>%{<br/>  This comment spans<br/>  multiple lines<br/>%}</span><br/>\u00a0</pre>"}, {"lang": "ooRexx", "loc": 11, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"coMULTI\">/*<br/>  Multi-line comment block<br/> */</span><br/>\u00a0<br/><span class=\"co1\">-- this type of comment works in ooRexx, NetRexx and some of the more popular REXX implementations like Regina</span><br/>\u00a0<br/>hour = <span class=\"nu0\">0</span>  <span class=\"co1\">-- which is, like midnight, dude.</span><br/>\u00a0<br/>hour = <span class=\"nu0\">12</span> <span class=\"coMULTI\">/* time for lunch! works as well (and really everywhere) */</span><br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Openscad", "loc": 9, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>// This is a single line comment<br/>\u00a0<br/>/*<br/>  This comment spans<br/>  multiple lines<br/>*/<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "OxygenBasic", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>'  Basic line comment<br/>;  Assembly code line comment<br/>// C line comment<br/>/* C block comment */<br/>\u00a0</pre>"}, {"lang": "Oz", "loc": 8, "block": "<pre class=\"oz highlighted_source\"><span class=\"co1\">% one line comment</span><br/>\u00a0<br/><span class=\"co1\">%% often with double \"%\" because then the indentation is correct in Emacs</span><br/>\u00a0<br/><span class=\"coMULTI\">/* multi line<br/>   comment<br/>*/</span><br/>\u00a0</pre>"}, {"lang": "PARI/GP", "loc": 10, "block": "<pre class=\"pascal highlighted_source\"><span class=\"coMULTI\">(* This is a comment.<br/>   It may extend across multiple lines. *)</span><br/>\u00a0<br/><span class=\"coMULTI\">{ Alternatively curly braces<br/>  can be used. }</span><br/>\u00a0<br/><span class=\"coMULTI\">(* This is a valid comment in Standard Pascal,<br/>   but not valid in [[Turbo Pascal]]. }<br/>\u00a0<br/>{ The same is true in this case *)</span></pre>"}, {"lang": "Pascal", "loc": 10, "block": "<pre class=\"pascal highlighted_source\"><span class=\"coMULTI\">(* This is a comment.<br/>   It may extend across multiple lines. *)</span><br/>\u00a0<br/><span class=\"coMULTI\">{ Alternatively curly braces<br/>  can be used. }</span><br/>\u00a0<br/><span class=\"coMULTI\">(* This is a valid comment in Standard Pascal,<br/>   but not valid in [[Turbo Pascal]]. }<br/>\u00a0<br/>{ The same is true in this case *)</span></pre>"}, {"lang": "PASM", "loc": 3, "block": "<pre class=\"text highlighted_source\"># This is a comment<br/>print \"Hello\\n\"    # This is also a comment<br/>end</pre>"}, {"lang": "Peloton", "loc": 5, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&lt;@ OMT&gt;This is a<br/>multiline<br/>comment&lt;/@&gt;<br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 1, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\"># this is commented</span></pre>"}, {"lang": "Perl 6", "loc": 28, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"co1\"># Single-line comment.</span><br/>\u00a0<br/><span class=\"co1\">#`( </span><br/>    Comments beginning with a backtick <span class=\"kw1\">and</span> <span class=\"kw3\">one</span> <span class=\"kw1\">or</span> more<br/>    opening bracketing characters are embedded comments<span class=\"sy0\">.</span><br/>    <span class=\"me1\">They</span> can span more than <span class=\"kw3\">one</span> line\u2026<br/><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"co1\">#`{ \u2026or only part of a line. } 3;</span><br/>\u00a0<br/><span class=\"co1\">#`{{</span><br/>    Using more than <span class=\"kw3\">one</span> bracketing character lets you include<br/>    an unmatched close bracket<span class=\"sy0\">,</span> like this<span class=\"sy0\">:</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">#`\u2045 Synopsis 2: \"Bracketing characters are defined as any</span><br/>    Unicode characters with either bidirectional mirrorings <span class=\"kw1\">or</span><br/>    Ps<span class=\"sy0\">/</span>Pe<span class=\"sy0\">/</span>Pi<span class=\"sy0\">/</span>Pf properties<span class=\"sy0\">.</span><span class=\"st0\">\" \u2046 <br/>\u00a0<br/>=begin comment<br/>\u00a0<br/>Pod is the successor to Perl 5's POD. This is the simplest way<br/>to use it for multi-line comments. For more about Pod, see<br/>Synopsis 26:<br/>\u00a0<br/>http://perlcabal.org/syn/S26.html<br/>\u00a0<br/>=end comment</span></pre>"}, {"lang": "Phix", "loc": 1, "block": "<pre class=\"text highlighted_source\">-- This is a comment</pre>"}, {"lang": "PHP", "loc": 2, "block": "<pre class=\"php highlighted_source\"><span class=\"co2\"># this is commented<br/></span><span class=\"co1\">// this is commented</span></pre>"}, {"lang": "PicoLisp", "loc": 12, "block": "<pre class=\"text highlighted_source\"># The rest of the line is ignored<br/>#{<br/>   This is a<br/>   multiline comment<br/>}#<br/>NIL<br/>Immediately stop reading this file. Because all text in the input file following<br/>a top-level 'NIL' is ignored.<br/>\u00a0<br/>This is typically used conditionally, with a read-macro expression like<br/>`*Dbg<br/>so that this text is only read if in debugging mode.</pre>"}, {"lang": "Pike", "loc": 7, "block": "<pre class=\"pike highlighted_source\"><span class=\"co1\">// This is a comment.</span><br/><span class=\"coMULTI\">/* This is a <br/>   multi<br/>   line<br/>   comment */</span><br/>\u00a0<br/>int e <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> <span class=\"co1\">// end-of-statement comment.</span></pre>"}, {"lang": "Plain TeX", "loc": 2, "block": "<pre class=\"text highlighted_source\">% this is a comment<br/>This is not.</pre>"}, {"lang": "PL/I", "loc": 1, "block": "<pre class=\"pli highlighted_source\"><span class=\"coMULTI\">/* This is a comment. */</span></pre>"}, {"lang": "PL/SQL", "loc": 1, "block": "<pre class=\"plsql highlighted_source\"><span class=\"co1\">--this is a single line comment</span></pre>"}, {"lang": "Pop11", "loc": 1, "block": "<pre class=\"text highlighted_source\">;;; This is a comment</pre>"}, {"lang": "PostScript", "loc": 3, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>%This is a legal comment in PostScript<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 1, "block": "<pre class=\"powershell highlighted_source\"><span class=\"co1\"># single-line comment</span></pre>"}, {"lang": "Processing", "loc": 10, "block": "<pre class=\"text highlighted_source\">// a single-line comment<br/>\u00a0<br/>/* a multi-line<br/>   comment<br/>*/<br/>\u00a0<br/>/*<br/> * a multi-line comment<br/> * with some decorative stars<br/> */</pre>"}, {"lang": "ProDOS", "loc": 1, "block": "<pre class=\"text highlighted_source\">IGNORELINE your text here</pre>"}, {"lang": "Prolog", "loc": 1, "block": "<pre class=\"prolog highlighted_source\"><span class=\"co1\">% this is a single-line comment that extends to the end of the line</span></pre>"}, {"lang": "PureBasic", "loc": 3, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"co1\">;comments come after an unquoted semicolon and last until the end of the line</span><br/>foo <span class=\"sy0\">=</span> <span class=\"nu0\">5</span> <span class=\"co1\">;This is a comment</span><br/>c$ <span class=\"sy0\">=</span> <span class=\"st0\">\";This is not a comment\"</span>  <span class=\"co1\">;This is also a comment</span></pre>"}, {"lang": "Python", "loc": 2, "block": "<pre class=\"python highlighted_source\"><span class=\"co1\"># This is a comment</span><br/>foo <span class=\"sy0\">=</span> <span class=\"nu0\">5</span> <span class=\"co1\"># You can also append comments to statements</span></pre>"}, {"lang": "R", "loc": 1, "block": "<pre class=\"rsplus highlighted_source\"><span class=\"co1\"># end of line comment</span></pre>"}, {"lang": "Racket", "loc": 11, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>; this is a to-end-of-line coment<br/>\u00a0<br/>#| balanced comment, #| can be nested |# |#<br/>\u00a0<br/>#;(this expression is ignored)<br/>\u00a0<br/>#;\u00a0; the following expression is commented because of the #; in the beginning<br/>(ignored)<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 1, "block": "<pre class=\"text highlighted_source\"> # this is a comment</pre>"}, {"lang": "REALbasic", "loc": 3, "block": "<pre class=\"text highlighted_source\">//Comments are denoted by a preceding double slash or or single quote<br/>'and continue to the end of the line. There are no multi-line comment blocks<br/>Dim foo As Integer //Comments can also occupy the ends of code lines</pre>"}, {"lang": "REBOL", "loc": 7, "block": "<pre class=\"rebol highlighted_source\">\u00a0<br/><span class=\"co1\">; This is a line comment.</span><br/>\u00a0<br/><span class=\"br0\">{</span> Multi-line strings can<br/>  be used as comments <br/>  <span class=\"kw2\">if</span> you like <span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Retro", "loc": 1, "block": "<pre class=\"text highlighted_source\">( comments are placed between parentheses. A space must follow the opening parenthesis. )</pre>"}, {"lang": "REXX", "loc": 3, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program that demonstrates what happens when dividing by zero.  */</span><br/>y=<span class=\"nu0\">7</span><br/><span class=\"kw1\">say</span> <span class=\"nu0\">44</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"nu0\">7</span>-y<span class=\"br0\">)</span>      <span class=\"coMULTI\">/* divide by some strange thingy.*/</span></pre>"}, {"lang": "Ring", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>//this is a single line comment<br/>#this also a single line comment!<br/>\u00a0</pre>"}, {"lang": "RLaB", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>x = \"code\" # I am a comment<br/>x = \"code\" // Here I comment thee<br/>#  matlab-like document line<br/>// C++ like document line<br/>\u00a0</pre>"}, {"lang": "Robotic", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>. \"This is a comment line\"<br/>\u00a0<br/>. \"Print Hello world\"<br/>* \"Hello world.\"<br/>\u00a0<br/>. \"This is the only way to comment a line in Robotic\"<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 5, "block": "<pre class=\"ruby highlighted_source\">x = <span class=\"st0\">\"code\"</span> <span class=\"co1\"># I am a comment</span><br/>\u00a0<br/><span class=\"coMULTI\">=begin hello<br/>I a POD documentation comment like Perl<br/>=end</span> <span class=\"kw3\">puts</span> <span class=\"st0\">\"code\"</span></pre>"}, {"lang": "Run BASIC", "loc": 6, "block": "<pre class=\"text highlighted_source\">'This is a comment<br/>REM This is a comment<br/>\u00a0<br/>print \"Notice comment at  the end of the line.\"          'This is a comment<br/>print \"Also notice this comment at the end of the line.\"\u00a0: REM This is a comment<br/>\u00a0</pre>"}, {"lang": "Rust", "loc": 39, "block": "<pre class=\"text highlighted_source\">// A single line comment<br/>\u00a0<br/>/*<br/>    This is a multi-line (aka block) comment<br/>\u00a0<br/>    /*<br/>        containing nested multi-line comment<br/>        (nesting supported since 0.9-pre https://github.com/mozilla/rust/issues/9468)<br/>    */<br/>*/<br/>\u00a0<br/>\u00a0<br/>/// Outer single line Rustdoc comments apply to the next item.<br/>\u00a0<br/>/**<br/>    Outer multi-line Rustdoc comments.<br/>\u00a0<br/> *  Leading asterisk (*) in multi-line Rustdoc comments<br/> *  is not considered to be part of the comment text,<br/> *  blanks and tabs preceding the initial asterisk (*) are also stripped.<br/>*/<br/>\u00a0<br/>fn example() {<br/>\u00a0<br/>    //! Inner single line Rustdoc comments apply to their enclosing item.<br/>\u00a0<br/>    /*!<br/>        Inner multi-line Rustdoc comments.<br/>        See also https://github.com/mozilla/rust/wiki/Doc-using-rustdoc<br/>    */<br/>}<br/>\u00a0<br/>#[doc = \"Unsugared outer Rustdoc comments.<br/>        (outer attributes are not terminated by a semi-colon)\"]<br/>fn example() {<br/>    #[doc = \"Unsugared inner Rustdoc comments.<br/>            (inner attributes are terminated by a semi-colon)<br/>            See also https://github.com/mozilla/rust/blob/master/doc/rust.md#attributes\"];<br/>}</pre>"}, {"lang": "SAS", "loc": 8, "block": "<pre class=\"sas highlighted_source\"><span class=\"coMULTI\">/* comment */</span><br/>\u00a0<br/><span class=\"coMULTI\">*another comment;</span><br/>\u00a0<br/><span class=\"coMULTI\">* both<br/>  may<br/>  be<br/>  multiline;</span></pre>"}, {"lang": "Sather", "loc": 1, "block": "<pre class=\"text highlighted_source\">-- a single line comment</pre>"}, {"lang": "Scala", "loc": 4, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// A single line comment</span><br/>\u00a0<br/><span class=\"coMULTI\">/* A multi-line <br/>   comment */</span></pre>"}, {"lang": "Scilab", "loc": 2, "block": "<pre class=\"text highlighted_source\">// this is a comment<br/>i=i+1 // this is a comment</pre>"}, {"lang": "Scheme", "loc": 10, "block": "<pre class=\"scheme highlighted_source\"><span class=\"co1\">; Basically the same as Common Lisp</span><br/><span class=\"co1\">; While R5RS does not provide block comments, they are defined in SRFI-30, as in Common Lisp\u00a0:</span><br/>\u00a0<br/><span class=\"coMULTI\">#| comment<br/>... #| nested comment<br/>... |#</span><br/><span class=\"sy0\">|</span>#<br/>\u00a0<br/><span class=\"co1\">; See http://srfi.schemers.org/srfi-30/srfi-30.html</span><br/>\u00a0</pre>"}, {"lang": "sed", "loc": 1, "block": "<pre class=\"text highlighted_source\"># a single line comment</pre>"}, {"lang": "Seed7", "loc": 7, "block": "<pre class=\"text highlighted_source\"># A single line comment<br/>\u00a0<br/>(* A multi-line <br/>    comment *)<br/>\u00a0<br/>(* In Seed7, <br/>(* comments can be nested. *) *)</pre>"}, {"lang": "Set lang", "loc": 2, "block": "<pre class=\"text highlighted_source\">&gt; Comments start where a &gt; (greater than symbol) starts<br/>set a 0 &gt; Comments may start after a Set command</pre>"}, {"lang": "SETL", "loc": 2, "block": "<pre class=\"text highlighted_source\">print(\"This is not a comment\"); -- This is a comment<br/>$ For nostalgic reasons, this is also a comment.</pre>"}, {"lang": "Sidef", "loc": 1, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\"># this is commented</span></pre>"}, {"lang": "Simula", "loc": 1, "block": "<pre class=\"text highlighted_source\">COMMENT This is a comment for Simula 67;</pre>"}, {"lang": "Slate", "loc": 1, "block": "<pre class=\"text highlighted_source\">\"basically the same as smalltalk\"</pre>"}, {"lang": "Smalltalk", "loc": 6, "block": "<pre class=\"smalltalk highlighted_source\"><span class=\"coMULTI\">\"Comments traditionally are in double quotes.\"</span><br/><span class=\"coMULTI\">\"Multiline comments are also supported.<br/> Comments are saved as metadata along with the source to a method.<br/> A comment just after a method signature is often given to explain the<br/> usage of the method. The class browser may display such comments<br/> specially.\"</span></pre>"}, {"lang": "smart BASIC", "loc": 20, "block": "<pre class=\"text highlighted_source\">'Single line comments are preceded by a single quote or the command REM<br/>\u00a0<br/>PRINT \"Hello\" 'Single line comments may follow code<br/>\u00a0<br/>PRINT \"Hello\" REM You can also use the command REM following code<br/>\u00a0<br/>/*<br/>Multi-line comments<br/>are surrounded by<br/>mirrored slash<br/>and asterisk <br/>*/<br/>\u00a0<br/>/*Multi-line comments do not have to actually have multiple lines*/<br/>\u00a0<br/>/* Spaces before or after comment bounds are optional.*/<br/>\u00a0<br/>/* A comment can also follow another comment */  'Like this<br/>\u00a0<br/>Some programmers like to do this to allow for /* Procedural comments */ followed by 'Programmer's notes.</pre>"}, {"lang": "SNOBOL4", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>* An asterisk in column 1 is the standard Snobol comment<br/>* mechanism, marking the entire line as a comment. There<br/>* are no block or multiline comments.<br/>\u00a0<br/>*               Comments may begin at<br/>*               any position on the line.<br/>\u00a0<br/>- A hyphen in column 1 begins a control statement. <br/>- Unrecognized control statements are ignored and<br/>- may also mark comment lines. Not recommended.<br/>\u00a0<br/>                  \u00a0;* The semicolon statement separator<br/>    output = 'FOO'\u00a0;* begins a new statement. This idiom<br/>    output = 'BAR'\u00a0;* simulates an asterisk in the first<br/>                  \u00a0;* column, allowing end of line comments.<br/>\u00a0<br/>END<br/>\u00a0<br/>Any text after the required END label is ignored.</pre>"}, {"lang": "SNUSP", "loc": 4, "block": "<pre class=\"text highlighted_source\">'This is single-line comment<br/>\u00a0<br/>''This is<br/>multiline comment''</pre>"}, {"lang": "SPL", "loc": 4, "block": "<pre class=\"text highlighted_source\">'This is single-line comment<br/>\u00a0<br/>''This is<br/>multiline comment''</pre>"}, {"lang": "SQL", "loc": 1, "block": "<pre class=\"sql highlighted_source\"><span class=\"kw1\">SELECT</span> <span class=\"sy0\">*</span> <span class=\"kw1\">FROM</span> mytable <span class=\"co1\">-- Selects all columns and rows</span></pre>"}, {"lang": "SQL PL", "loc": 3, "block": "<pre class=\"sql highlighted_source\">\u00a0<br/><span class=\"co1\">--This is a single line comment.</span><br/>\u00a0</pre>"}, {"lang": "SSEM", "loc": 1, "block": "<pre class=\"text highlighted_source\">00101010010001000100100100001100</pre>"}, {"lang": "Standard ML", "loc": 3, "block": "<pre class=\"text highlighted_source\">(* This a comment<br/>   (* containing nested comment *)<br/> *)</pre>"}, {"lang": "Squirrel", "loc": 7, "block": "<pre class=\"text highlighted_source\">//this is a single line comment<br/>\u00a0<br/>#this is also a single line comment<br/>\u00a0<br/>/*<br/>    this is a multi-line comment<br/>*/</pre>"}, {"lang": "Stata", "loc": 7, "block": "<pre class=\"text highlighted_source\">* Line comment: must be used at the beginning of a line (does not work in Mata)<br/>\u00a0<br/>// Line comment until the end of the line<br/>\u00a0<br/>/* Multiline comment<br/>\u00a0<br/>*/</pre>"}, {"lang": "Swift", "loc": 10, "block": "<pre class=\"text highlighted_source\">// this is a single line comment<br/>/* This a block comment<br/>   /* containing nested comment */<br/> */<br/>\u00a0<br/>///This is a documentation comment<br/>\u00a0<br/>/**<br/>  This is a documentation block comment<br/>*/</pre>"}, {"lang": "Tcl", "loc": 3, "block": "<pre class=\"tcl highlighted_source\"><span class=\"co1\"># comment on a line by itself. The next is a command by itself:</span><br/><span class=\"kw1\">set</span> var1 <span class=\"re0\">$value1</span><br/><span class=\"kw1\">set</span> var2 <span class=\"re0\">$value2</span> <span class=\"sy0\">;</span> <span class=\"co1\"># comment that follows a line of code</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">:\"THIS IS A COMMENT</pre>"}, {"lang": "TI-89 BASIC", "loc": 1, "block": "<pre class=\"text highlighted_source\">\u00a9 This is a comment. Everything from \u00a9 to the end of the line is ignored.</pre>"}, {"lang": "Toka", "loc": 1, "block": "<pre class=\"text highlighted_source\">#! Everything on this line (after the shebang to the left) will be ignored.</pre>"}, {"lang": "TorqueScript", "loc": 1, "block": "<pre class=\"text highlighted_source\">//This is a one line comment. There are no other commenting options in TorqueScript.</pre>"}, {"lang": "TPP", "loc": 1, "block": "<pre class=\"text highlighted_source\">--## comments are prefixed with a long handed double paintbrush</pre>"}, {"lang": "TUSCRIPT", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>- This is a comment<br/>\u00a0</pre>"}, {"lang": "TXR", "loc": 4, "block": "<pre class=\"text highlighted_source\">@# old-style comment to end of line<br/>@; new-style comment to end of line<br/>@(bind a\u00a0; comment within expression<br/>       \"foo\")</pre>"}, {"lang": "UNIX Shell", "loc": 7, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#!/bin/sh</span><br/><span class=\"co0\"># A leading hash symbol begins a comment.</span><br/><span class=\"kw3\">echo</span> <span class=\"st0\">\"Hello\"</span>      <span class=\"co0\"># Comments can appear after a statement.</span><br/>\u00a0<br/><span class=\"co0\"># The hash symbol must be at the beginning of a word.</span><br/><span class=\"kw3\">echo</span> This_Is<span class=\"co0\">#Not_A_Comment</span><br/><span class=\"co0\">#Comment</span></pre>"}, {"lang": "Unlambda", "loc": 1, "block": "<pre># this is a comment.\n</pre>"}, {"lang": "Ursa", "loc": 3, "block": "<pre class=\"text highlighted_source\"># this is a comment<br/># this is another comment<br/>\u00a0</pre>"}, {"lang": "Ursala", "loc": 17, "block": "<pre class=\"text highlighted_source\"># this is single line a comment<br/>\u00a0<br/># this is a\\<br/>continued comment<br/>\u00a0<br/>(# this is a<br/>multi-line comment #)<br/>\u00a0<br/>(# comments in (# this form #) can (# <br/>be (# arbitrarily #) #) nested #)<br/>\u00a0<br/>---- this is also a comment\\<br/>and can be continued<br/>\u00a0<br/>###<br/>The whole rest of the file after three hashes<br/>is a comment.</pre>"}, {"lang": "VBA", "loc": 2, "block": "<pre class=\"vb highlighted_source\"><span class=\"co1\">' This is a VBA comment<br/></span></pre>"}, {"lang": "VBScript", "loc": 2, "block": "<pre class=\"vb highlighted_source\"><span class=\"co1\">' This is a VBScript comment<br/></span></pre>"}, {"lang": "Verbexx", "loc": 94, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>//////////////////////////////////////////////////////////////////////////////////////////////<br/>//<br/>// Line Comments: <br/>// =============<br/>//<br/>@VAR v1 = 10; // Line comments start from the \"//\" and continue to end of the line. <br/>//               (normal code can appear on the same line, before the //)<br/>//<br/>//   Line comments can span a complete line, or start in the middle of a line.<br/>///<br/>//// Additional // chars and /* /*  /[  ]/ and  /] are ignored<br/>//// Line comments can be appear to be nested, since any additional // is ignored.<br/>///<br/>//   Note: // can appear in strings without triggering a line comment<br/>//         // cannot appear inside an operator (or verbname), since a line comment<br/>//            would start<br/>//<br/>/////////////////////////////////////////////////////////////////////////////////////////////<br/>\u00a0<br/>/********************************************************************************************<br/> *<br/> *  Block Comments:<br/> *  ==============<br/> *<br/> ********************************************************************************************/<br/>//* <br/>//*  These start with /* and end with the next */ .  They cannot be nested, since the first */  <br/>//*  will end the block comment.  For example, the comment, /* /* */ */ would end after the     <br/>//*  first */. Note that /* is ignored inside a block comment, as are   //   /[   /] and  /].<br/>//* <br/>//*  Also note that something like the following will cause trouble in a block comment:<br/>//* <br/>//*    /* comments                          //<br/>//*     * more comments                     //   */  (the // does not prevent the */ from ending    <br/>//*     * (no longer part of the comment)   //        block comment)<br/>//*     */<br/>//* <br/>//*    Note: /* can appear in strings without triggering the start of a block comment<br/>//*          /* cannot appear inside an operator (or verbname), since a line comment will<br/>//*             start, although */ is allowed inside an operator (verbname).  Commenting<br/>//*             out such a verbname may cause problems.<br/>//* <br/>//*    Note: Since string literals are not recognized in block comments, */ appearing<br/>//*          in a string literal inside a block comment (perhaps commented-out code)<br/>//*          will cause the block comment to end.  <br/>//* <br/>//*    Note: It is an error to start a block comment and not end it, so that it is still<br/>//*          in progresss when the end-of-file is reached.<br/>//* <br/>//*    Block comments can appear inside lines of code:  <br/>//* <br/>/*1*/@VAR/*2*/v2/*3*/=/*4*/20/*5*/;/*6*/  // a line comment can follow block comments on the <br/>                                           // same line<br/>\u00a0<br/>/[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][] <br/>/[]                                                                                          [] <br/>/[]     Nestable Block Comments:                                                             []<br/> []     ========================                                                             []/<br/> []                                                                                          []/<br/> [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]/ <br/>\u00a0<br/>//[] <br/>//[]  These start with /[ and end with the next matching ]/ .  Additional occurrences<br/>//[]  of /[ ... ]/ can appear inside a nestable block comment.  The nestable block comment    <br/>//[]  will end only when the nest level reaches 0.  Note that /* is ignored inside a nestable     <br/>//[]  block comment, as are  */   //  and  /].<br/>//[]<br/>//[]  Nestable block comments can be used to comment out blocks of code containing line <br/>//[]  comments or regular comments, and even balanced and well-formed nestable block comments.<br/>//[] <br/>//[]    Note: /[ can appear in strings without triggering the start of a block comment.  <br/>//[]          However, strings literals are not recognized inside a nestable block comment, so<br/>//[]          any appearances of /[ and /] inside a string literal in a nestable block commment <br/>//[]          will affect the nest level, and may cause problems.<br/>//[] <br/>//[]    Note: It is an error to start a nestable block comment and not end it, so that it is<br/>//[]          still in progresss when the end of file is reached.<br/>//[] <br/>//[]    Nestable block comments can appear inside lines of code:  <br/>//[] <br/>/[1]/@VAR/[2]/v3/[3]/=/[4]/30/[5]/;/[6]/  // a line comment can follow nestable block comments <br/>                                          // on the same line<br/>\u00a0<br/>@SAY v1 v2 v3;                            // should see:   10 20 30<br/>\u00a0<br/>/]<br/>/=================================================================================================\\<br/>|                                                                                                 |<br/>|   /] starts a block comment that lasts until the end of the current file.  Everything after     |<br/>|   the /] is ignored.                                                                            |<br/>|                                                                                                 |<br/>\\=================================================================================================/<br/>\u00a0</pre>"}, {"lang": "Verilog", "loc": 7, "block": "<pre class=\"verilog highlighted_source\"><span class=\"co1\">// Single line commment.</span><br/>\u00a0<br/><span class=\"coMULTI\">/* <br/>   Multiple<br/>   line<br/>   comment.<br/>*/</span></pre>"}, {"lang": "VHDL", "loc": 1, "block": "<pre class=\"vhdl highlighted_source\"><span class=\"co1\">-- Single line commment in VHDL</span></pre>"}, {"lang": "Vim Script", "loc": 2, "block": "<pre class=\"vim highlighted_source\"><span class=\"kw1\">let</span> a = <span class=\"nu0\">4</span><span class=\"co1\"> \" A valid comment</span><br/><span class=\"kw1\">echo</span> <span class=\"st0\">\"foo\"</span><span class=\"co1\"> \" Not a comment but an argument that misses the closing quote</span></pre>"}, {"lang": "Visual Basic", "loc": 7, "block": "<pre class=\"vb highlighted_source\"><span class=\"co1\">'comment<br/></span>Rem comment<br/>#If 0<br/>  Technically <span class=\"kw3\">not</span> a comment; the compiler may <span class=\"kw3\">or</span> may <span class=\"kw3\">not</span> ignore this, but the<br/>  IDE won<span class=\"co1\">'t. Note the somewhat odd formatting seen here; the IDE will likely<br/></span>  just mark the entire <span class=\"kw4\">line</span>(s) <span class=\"kw4\">as</span> errors.<br/>#End <span class=\"kw3\">If</span></pre>"}, {"lang": "Visual Basic .NET", "loc": 4, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"co1\">' This is a comment</span><br/><span class=\"kw1\">REM</span> This <span class=\"kw1\">is</span> also a comment<br/><span class=\"kw1\">Dim</span> comment <span class=\"kw1\">as</span> <span class=\"kw2\">string</span> <span class=\"co1\">' You can also append comments to statements</span><br/><span class=\"kw1\">Dim</span> comment2 <span class=\"kw1\">as</span> <span class=\"kw2\">string</span> <span class=\"kw1\">REM</span> You can append comments <span class=\"kw1\">to</span> statements</pre>"}, {"lang": "Vorpal", "loc": 1, "block": "<pre class=\"text highlighted_source\"># single line comment</pre>"}, {"lang": "Wart", "loc": 1, "block": "<pre class=\"text highlighted_source\"># single-line comment</pre>"}, {"lang": "XLISP", "loc": 1, "block": "<pre class=\"text highlighted_source\">; this is a comment</pre>"}, {"lang": "XPL0", "loc": 1, "block": "<pre class=\"text highlighted_source\">Text(0, \\comment\\ \"Hello \\not a comment\\ World!\"); \\comment</pre>"}, {"lang": "XQuery", "loc": 1, "block": "<pre class=\"text highlighted_source\">(: This is a XQuery comment\u00a0:)</pre>"}, {"lang": "XSLT", "loc": 1, "block": "<pre class=\"xml highlighted_source\"><span class=\"sc-1\">&lt;!-- Comment syntax is borrowed from XML and HTML. --&gt;</span></pre>"}, {"lang": "XUL", "loc": 1, "block": "<pre class=\"text highlighted_source\">&lt;!-- Comment syntax is borrowed from XML and HTML. --&gt;</pre>"}, {"lang": "zonnon", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(* this is a comment *)<br/>(* <br/>   and this is a<br/>   multiline comment<br/>   (* with a nested comment *)<br/>*)<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 10, "block": "<pre class=\"text highlighted_source\">x=1; // comment ala C++<br/>x=2; # ala scripts<br/>/* ala C, these comments are parsed (also ala C) */<br/>/* can /* be */ nested */<br/>#if 0<br/>  also ala C (and parsed)<br/>#endif<br/>#&lt;&lt;&lt;#<br/>  \"here\" comment, unparsed<br/>#&lt;&lt;&lt;#</pre>"}]}