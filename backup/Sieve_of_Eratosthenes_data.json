{"task": "Sieve_of_Eratosthenes", "blocks": [{"lang": "360 Assembly", "loc": 71, "block": "<pre class=\"text highlighted_source\">*        Sieve of Eratosthenes <br/>ERATOST  CSECT  <br/>         USING  ERATOST,R12<br/>SAVEAREA B      STM-SAVEAREA(R15)<br/>         DC     17F'0'<br/>         DC     CL8'ERATOST'<br/>STM      STM    R14,R12,12(R13) save calling context<br/>         ST     R13,4(R15)      <br/>         ST     R15,8(R13)<br/>         LR     R12,R15         set addessability<br/>*        ----   CODE<br/>         LA     R4,1            I=1  <br/>         LA     R6,1            increment<br/>         L      R7,N            limit<br/>LOOPI    BXH    R4,R6,ENDLOOPI  do I=2 to N<br/>         LR     R1,R4           R1=I<br/>         BCTR   R1,0             <br/>         LA     R14,CRIBLE(R1)<br/>         CLI    0(R14),X'01'<br/>         BNE    ENDIF           if not CRIBLE(I)<br/>         LR     R5,R4           J=I<br/>         LR     R8,R4<br/>         LR     R9,R7<br/>LOOPJ    BXH    R5,R8,ENDLOOPJ  do J=I*2 to N by I<br/>         LR     R1,R5           R1=J<br/>         BCTR   R1,0<br/>         LA     R14,CRIBLE(R1)<br/>         MVI    0(R14),X'00'    CRIBLE(J)='0'B<br/>         B      LOOPJ<br/>ENDLOOPJ EQU    *<br/>ENDIF    EQU    *<br/>         B      LOOPI<br/>ENDLOOPI EQU    *<br/>         LA     R4,1            I=1  <br/>         LA     R6,1<br/>         L      R7,N<br/>LOOP     BXH    R4,R6,ENDLOOP   do I=1 to N<br/>         LR     R1,R4           R1=I<br/>         BCTR   R1,0<br/>         LA     R14,CRIBLE(R1)<br/>         CLI    0(R14),X'01'<br/>         BNE    NOTPRIME        if not CRIBLE(I) <br/>         CVD    R4,P            P=I<br/>         UNPK   Z,P             Z=P<br/>         MVC    C,Z             C=Z<br/>         OI     C+L'C-1,X'F0'   zap sign<br/>         MVC    WTOBUF(8),C+8<br/>         WTO    MF=(E,WTOMSG)\t\t  <br/>NOTPRIME EQU    *<br/>         B      LOOP<br/>ENDLOOP  EQU    *<br/>RETURN   EQU    *<br/>         LM     R14,R12,12(R13) restore context<br/>         XR     R15,R15         set return code to 0<br/>         BR     R14             return to caller<br/>*        ----   DATA<br/>I        DS     F<br/>J        DS     F<br/>         DS     0F<br/>P        DS     PL8             packed<br/>Z        DS     ZL16            zoned<br/>C        DS     CL16            character <br/>WTOMSG   DS     0F<br/>         DC     H'80'           length of WTO buffer<br/>         DC     H'0'            must be binary zeroes<br/>WTOBUF   DC     80C' '<br/>         LTORG  <br/>N        DC     F'100000'<br/>CRIBLE   DC     100000X'01'<br/>         YREGS  <br/>         END    ERATOST</pre>"}, {"lang": "6502 Assembly", "loc": 39, "block": "<pre class=\"text highlighted_source\">ERATOS: STA  $D0     \u00a0; value of n<br/>        LDA  #$00<br/>        LDX  #$00<br/>SETUP:  STA  $1000,X \u00a0; populate array<br/>        ADC  #$01<br/>        INX<br/>        CPX  $D0<br/>        BPL  SET<br/>        JMP  SETUP<br/>SET:    LDX  #$02<br/>SIEVE:  LDA  $1000,X \u00a0; find non-zero<br/>        INX<br/>        CPX  $D0<br/>        BPL  SIEVED<br/>        CMP  #$00<br/>        BEQ  SIEVE<br/>        STA  $D1     \u00a0; current prime<br/>MARK:   CLC<br/>        ADC  $D1<br/>        TAY<br/>        LDA  #$00<br/>        STA  $1000,Y<br/>        TYA<br/>        CMP  $D0<br/>        BPL  SIEVE<br/>        JMP  MARK<br/>SIEVED: LDX  #$01<br/>        LDY  #$00<br/>COPY:   INX<br/>        CPX  $D0<br/>        BPL  COPIED<br/>        LDA  $1000,X<br/>        CMP  #$00<br/>        BEQ  COPY<br/>        STA  $2000,Y<br/>        INY<br/>        JMP  COPY<br/>COPIED: TYA          \u00a0; how many found<br/>        RTS</pre>"}, {"lang": "68000 Assembly", "loc": 255, "block": "<pre class=\"_68000devpac highlighted_source\"><span class=\"sy0\">*-----------------------------------------------------------</span><br/><span class=\"sy0\">*</span> Title     \u00a0: BitSieve<br/><span class=\"sy0\">*</span> Written by\u00a0: G. A. Tippery<br/><span class=\"sy0\">*</span> Date      \u00a0: <span class=\"nu0\">2014</span><span class=\"sy0\">-</span>Feb<span class=\"sy0\">-</span><span class=\"nu0\">24</span>, <span class=\"nu0\">2013</span><span class=\"sy0\">-</span>Dec<span class=\"sy0\">-</span><span class=\"nu0\">22</span><br/><span class=\"sy0\">*</span> Description: Prime number sieve<br/><span class=\"sy0\">*-----------------------------------------------------------</span><br/>    \t<span class=\"kw1\">ORG</span>    <span class=\"nu13\">$1000</span><br/>\u00a0<br/><span class=\"sy0\">**</span>\t<span class=\"sy0\">----</span> Generic macros <span class=\"sy0\">----</span>\t<span class=\"sy0\">**</span><br/><span class=\"re0\">PUSH\t</span><span class=\"kw1\">MACRO</span><br/>\t<span class=\"kw2\">MOVE</span>.<span class=\"kw3\">L</span>\t\\<span class=\"nu0\">1</span>,<span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">SP</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">ENDM</span><br/>\u00a0<br/><span class=\"re0\">POP\t</span><span class=\"kw1\">MACRO</span><br/>\t<span class=\"kw2\">MOVE</span>.<span class=\"kw3\">L</span>\t<span class=\"br0\">(</span><span class=\"kw4\">SP</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>,\\<span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">ENDM</span><br/>\u00a0<br/><span class=\"re0\">DROP\t</span><span class=\"kw1\">MACRO</span><br/>\t<span class=\"kw2\">ADDQ</span>\t#<span class=\"nu0\">4</span>,<span class=\"kw4\">SP</span><br/>\t<span class=\"kw1\">ENDM</span><br/>\u00a0<br/><span class=\"re0\">PUTS\t</span><span class=\"kw1\">MACRO</span><br/>\t<span class=\"sy0\">**</span> Print a null<span class=\"sy0\">-</span>terminated string <span class=\"kw3\">w</span><span class=\"sy0\">/</span>o CRLF <span class=\"sy0\">**</span><br/>\t<span class=\"sy0\">**</span> Usage: PUTS stringaddress<br/>\t<span class=\"sy0\">**</span> Returns with <span class=\"kw4\">D0</span>, <span class=\"kw4\">A1</span> modified<br/>\t<span class=\"kw2\">MOVEQ</span>\t#<span class=\"nu0\">14</span>,<span class=\"kw4\">D0</span>\t<span class=\"co1\">; task number 14 (display null string)</span><br/>\t<span class=\"kw2\">LEA</span>\t\\<span class=\"nu0\">1</span>,<span class=\"kw4\">A1</span>\t<span class=\"co1\">; address of string</span><br/>\t<span class=\"kw2\">TRAP</span>\t#<span class=\"nu0\">15</span>\t<span class=\"co1\">; display it</span><br/>\t<span class=\"kw1\">ENDM</span><br/>\u00a0<br/><span class=\"re0\">GETN\t</span><span class=\"kw1\">MACRO</span><br/>\t<span class=\"kw2\">MOVEQ</span>\t#<span class=\"nu0\">4</span>,<span class=\"kw4\">D0</span>\t<span class=\"co1\">; Read a number from the keyboard into D1.L. </span><br/>\t<span class=\"kw2\">TRAP</span>\t#<span class=\"nu0\">15</span><br/>\t<span class=\"kw1\">ENDM</span><br/>\u00a0<br/><span class=\"sy0\">**</span>\t<span class=\"sy0\">----</span> Application<span class=\"sy0\">-</span>specific macros <span class=\"sy0\">----</span>\t<span class=\"sy0\">**</span><br/>\u00a0<br/><span class=\"re0\">val\t</span><span class=\"kw1\">MACRO</span>\t\t<span class=\"co1\">; Used by bit sieve. Converts bit address to the number it represents.</span><br/>\t<span class=\"kw2\">ADD</span>.<span class=\"kw3\">L</span>\t\\<span class=\"nu0\">1</span>,\\<span class=\"nu0\">1</span>\t<span class=\"co1\">; double it because odd numbers are omitted</span><br/>\t<span class=\"kw2\">ADDQ</span>\t#<span class=\"nu0\">3</span>,\\<span class=\"nu0\">1</span>\t<span class=\"co1\">; add offset because initial primes (1, 2) are omitted</span><br/>\t<span class=\"kw1\">ENDM</span><br/>\u00a0<br/><span class=\"sy0\">*</span> <span class=\"sy0\">**</span> <span class=\"sy0\">================================================================================</span> <span class=\"sy0\">**</span><br/><span class=\"sy0\">*</span> <span class=\"sy0\">**</span> Integer square root routine, bisection method <span class=\"sy0\">**</span><br/><span class=\"sy0\">*</span> <span class=\"sy0\">**</span> IN: <span class=\"kw4\">D0</span>, should be <span class=\"nu0\">0</span><span class=\"sy0\">&lt;</span>D0<span class=\"sy0\">&lt;</span><span class=\"nu13\">$10000</span> <span class=\"br0\">(</span><span class=\"nu0\">65536</span><span class=\"br0\">)</span> <span class=\"sy0\">--</span> higher values MAY work, no guarantee<br/><span class=\"sy0\">*</span> <span class=\"sy0\">**</span> OUT: <span class=\"kw4\">D1</span><br/><span class=\"sy0\">*</span><br/><span class=\"re0\">SquareRoot:<br/></span><span class=\"sy0\">*</span><br/>\t<span class=\"kw2\">MOVEM</span>.<span class=\"kw3\">L</span>\tD2<span class=\"sy0\">-</span><span class=\"kw4\">D4</span>,<span class=\"sy0\">-</span><span class=\"br0\">(</span><span class=\"kw4\">SP</span><span class=\"br0\">)</span>\t<span class=\"co1\">; save registers needed for local variables</span><br/><span class=\"sy0\">*</span>\tDO <span class=\"sy0\">==</span> n<br/><span class=\"sy0\">*</span>\t<span class=\"kw4\">D1</span> <span class=\"sy0\">==</span> a<br/><span class=\"sy0\">*</span>\t<span class=\"kw4\">D2</span> <span class=\"sy0\">==</span> <span class=\"kw3\">b</span><br/><span class=\"sy0\">*</span>\t<span class=\"kw4\">D3</span> <span class=\"sy0\">==</span> guess<br/><span class=\"sy0\">*</span>\t<span class=\"kw4\">D4</span> <span class=\"sy0\">==</span> temp<br/><span class=\"sy0\">*</span><br/><span class=\"sy0\">*</span>\t\ta <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"co1\">;</span><br/><span class=\"sy0\">*</span>\t\t<span class=\"kw3\">b</span> <span class=\"sy0\">=</span> n<span class=\"co1\">;</span><br/>\t<span class=\"kw2\">MOVEQ</span>\t#<span class=\"nu0\">1</span>,<span class=\"kw4\">D1</span><br/>\t<span class=\"kw2\">MOVE</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D0</span>,<span class=\"kw4\">D2</span><br/><span class=\"sy0\">*</span>\t\tdo <span class=\"br0\">{</span><br/>\tREPEAT<br/><span class=\"sy0\">*</span>\t\tguess <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">+</span><span class=\"kw3\">b</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"co1\">;</span><br/>\t<span class=\"kw2\">MOVE</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D1</span>,<span class=\"kw4\">D3</span><br/>\t<span class=\"kw2\">ADD</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D2</span>,<span class=\"kw4\">D3</span><br/>\t<span class=\"kw2\">LSR</span>.<span class=\"kw3\">L</span>\t#<span class=\"nu0\">1</span>,<span class=\"kw4\">D3</span><br/><span class=\"sy0\">*</span>\t\tif <span class=\"br0\">(</span>guess<span class=\"sy0\">*</span>guess <span class=\"sy0\">&gt;</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span>\t<span class=\"sy0\">//</span> inverse function of sqrt is square<br/>\t<span class=\"kw2\">MOVE</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D3</span>,<span class=\"kw4\">D4</span><br/>\t<span class=\"kw2\">MULU</span>\t<span class=\"kw4\">D4</span>,<span class=\"kw4\">D4</span>\t\t<span class=\"co1\">; guess^2</span><br/>\t<span class=\"kw2\">CMP</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D0</span>,<span class=\"kw4\">D4</span><br/>\t<span class=\"kw2\">BLS</span>\t.else<br/><span class=\"sy0\">*</span>\t\t<span class=\"kw3\">b</span> <span class=\"sy0\">=</span> guess<span class=\"co1\">;</span><br/>\t<span class=\"kw2\">MOVE</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D3</span>,<span class=\"kw4\">D2</span><br/>\t<span class=\"kw2\">BRA</span>\t.endif<br/><span class=\"sy0\">*</span>\t\t<span class=\"br0\">}</span> else <span class=\"br0\">{</span><br/><span class=\"re0\">.else:<br/></span><span class=\"sy0\">*</span>\t\ta <span class=\"sy0\">=</span> guess<span class=\"co1\">;</span><br/>\t<span class=\"kw2\">MOVE</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D3</span>,<span class=\"kw4\">D1</span><br/><span class=\"sy0\">*</span>\t\t<span class=\"br0\">}</span> <span class=\"sy0\">//</span>if<br/><span class=\"re0\">.endif:<br/></span><span class=\"sy0\">*</span>\t\t<span class=\"br0\">}</span> while <span class=\"br0\">(</span><span class=\"br0\">(</span>b<span class=\"sy0\">-</span>a<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"co1\">;\t; Same as until (b-a)&lt;=1 or until (a-b)&gt;=1</span><br/>\t<span class=\"kw2\">MOVE</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D2</span>,<span class=\"kw4\">D4</span><br/>\t<span class=\"kw2\">SUB</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D1</span>,<span class=\"kw4\">D4</span>\t<span class=\"co1\">; b-a</span><br/>\tUNTIL.<span class=\"kw3\">L</span>\t  <span class=\"kw4\">D4</span> <span class=\"sy0\">&lt;</span>LE<span class=\"sy0\">&gt;</span> #<span class=\"nu0\">1</span> DO.<span class=\"kw3\">S</span><br/><span class=\"sy0\">*</span>\t\treturn <span class=\"br0\">(</span>a<span class=\"br0\">)</span>\t<span class=\"co1\">; Result is in D1</span><br/><span class=\"sy0\">*</span>\t\t<span class=\"br0\">}</span> <span class=\"sy0\">//</span>LongSqrt<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<span class=\"kw2\">MOVEM</span>.<span class=\"kw3\">L</span>\t<span class=\"br0\">(</span><span class=\"kw4\">SP</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>,D2<span class=\"sy0\">-</span><span class=\"kw4\">D4</span>\t<span class=\"co1\">; restore saved registers</span><br/>\t<span class=\"kw2\">RTS</span><br/><span class=\"sy0\">*</span><br/><span class=\"sy0\">*</span> <span class=\"sy0\">**</span> <span class=\"sy0\">================================================================================</span> <span class=\"sy0\">**</span><br/>\u00a0<br/>\u00a0<br/><span class=\"sy0\">**</span> <span class=\"sy0\">=======================================================================</span> <span class=\"sy0\">**</span><br/><span class=\"sy0\">*</span><br/><span class=\"sy0\">**</span>  Prime<span class=\"sy0\">-</span>number Sieve of Eratosthenes routine using a big bit field for flags  <span class=\"sy0\">**</span><br/><span class=\"sy0\">*</span>  Enter with <span class=\"kw4\">D0</span> <span class=\"sy0\">=</span> size of sieve <span class=\"br0\">(</span>bit array<span class=\"br0\">)</span><br/><span class=\"sy0\">*</span>  Prints found primes <span class=\"nu0\">10</span> per line<br/><span class=\"sy0\">*</span>  Returns # prime found in <span class=\"kw4\">D6</span><br/><span class=\"sy0\">*</span><br/><span class=\"sy0\">*</span>   Register usage:<br/><span class=\"sy0\">*</span><br/><span class=\"sy0\">*</span>\t<span class=\"kw4\">D0</span> <span class=\"sy0\">==</span> n<br/><span class=\"sy0\">*</span>\t<span class=\"kw4\">D1</span> <span class=\"sy0\">==</span> prime<br/><span class=\"sy0\">*</span>\t<span class=\"kw4\">D2</span> <span class=\"sy0\">==</span> sqroot<br/><span class=\"sy0\">*</span>\t<span class=\"kw4\">D3</span> <span class=\"sy0\">==</span> PIndex<br/><span class=\"sy0\">*</span>\t<span class=\"kw4\">D4</span> <span class=\"sy0\">==</span> CIndex<br/><span class=\"sy0\">*</span>\t<span class=\"kw4\">D5</span> <span class=\"sy0\">==</span> MaxIndex<br/><span class=\"sy0\">*</span>\t<span class=\"kw4\">D6</span> <span class=\"sy0\">==</span> PCount<br/><span class=\"sy0\">*</span><br/><span class=\"sy0\">*</span>\t<span class=\"kw4\">A0</span> <span class=\"sy0\">==</span> PMtx<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/><span class=\"sy0\">*</span><br/><span class=\"sy0\">*</span>   On return, all registers above except <span class=\"kw4\">D0</span> are modified. Could <span class=\"kw2\">add</span> MOVEMs to save <span class=\"kw2\">and</span> restore D2<span class=\"sy0\">-</span><span class=\"kw4\">D6</span><span class=\"sy0\">/</span><span class=\"kw4\">A0</span>.<br/><span class=\"sy0\">*</span><br/>\u00a0<br/><span class=\"sy0\">**</span>\t<span class=\"sy0\">------------------------</span>\t<span class=\"sy0\">**</span><br/>\u00a0<br/><span class=\"re0\">GetBit:\t</span>\t<span class=\"sy0\">**</span> sub<span class=\"sy0\">-</span>part of Sieve subroutine <span class=\"sy0\">**</span><br/>\t\t<span class=\"sy0\">**</span> Entry: bit # is on TOS<br/>\t\t<span class=\"sy0\">**</span> Exit: <span class=\"kw4\">A6</span> holds the byte number, <span class=\"kw4\">D7</span> holds the bit number within the byte<br/>\t\t<span class=\"sy0\">**</span> Note: Input param is still on TOS after return. Could have passed via a register, but<br/>                <span class=\"sy0\">**</span>  wanted to practice with stack.\u00a0:<span class=\"br0\">)</span><br/><span class=\"sy0\">*</span>\t\t<br/>\t<span class=\"kw2\">MOVE</span>.<span class=\"kw3\">L</span>\t<span class=\"br0\">(</span><span class=\"nu0\">4</span>,<span class=\"kw4\">SP</span><span class=\"br0\">)</span>,<span class=\"kw4\">D7</span>\t<span class=\"co1\">; get value from (pre-call) TOS</span><br/>\t<span class=\"kw2\">ASR</span>.<span class=\"kw3\">L</span>\t#<span class=\"nu0\">3</span>,<span class=\"kw4\">D7</span>\t<span class=\"co1\">; /8</span><br/>\t<span class=\"kw2\">MOVEA</span>\t<span class=\"kw4\">D7</span>,<span class=\"kw4\">A6</span>\t<span class=\"co1\">; byte #</span><br/>\t<span class=\"kw2\">MOVE</span>.<span class=\"kw3\">L</span>\t<span class=\"br0\">(</span><span class=\"nu0\">4</span>,<span class=\"kw4\">SP</span><span class=\"br0\">)</span>,<span class=\"kw4\">D7</span>\t<span class=\"co1\">; get value from (pre-call) TOS</span><br/>\t<span class=\"kw2\">AND</span>.<span class=\"kw3\">L</span>\t#<span class=\"nu13\">$7</span>,<span class=\"kw4\">D7</span>\t<span class=\"co1\">; bit #</span><br/>\t<span class=\"kw2\">RTS</span><br/>\u00a0<br/><span class=\"sy0\">**</span>\t<span class=\"sy0\">------------------------</span>\t<span class=\"sy0\">**</span><br/>\u00a0<br/><span class=\"re0\">Sieve:<br/></span>\t<span class=\"kw2\">MOVE</span>\t<span class=\"kw4\">D0</span>,<span class=\"kw4\">D5</span><br/>\t<span class=\"kw2\">SUBQ</span>\t#<span class=\"nu0\">1</span>,<span class=\"kw4\">D5</span><br/>\t<span class=\"kw2\">JSR</span>\tSquareRoot\t<span class=\"co1\">; sqrt D0 =&gt; D1</span><br/>\t<span class=\"kw2\">MOVE</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D1</span>,<span class=\"kw4\">D2</span><br/>\t<span class=\"kw2\">LEA</span>\tPArray,<span class=\"kw4\">A0</span><br/>\t<span class=\"kw2\">CLR</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D3</span><br/><span class=\"sy0\">*</span><br/><span class=\"re0\">PrimeLoop:<br/></span>\t<span class=\"kw2\">MOVE</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D3</span>,<span class=\"kw4\">D1</span><br/>\tval\t<span class=\"kw4\">D1</span><br/>\t<span class=\"kw2\">MOVE</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D3</span>,<span class=\"kw4\">D4</span><br/>\t<span class=\"kw2\">ADD</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D1</span>,<span class=\"kw4\">D4</span><br/><span class=\"sy0\">*</span><br/><span class=\"re0\">CxLoop:\t</span>\t<span class=\"co1\">; Goes through array marking multiples of d1 as composite numbers</span><br/>\t<span class=\"kw2\">CMP</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D5</span>,<span class=\"kw4\">D4</span><br/>\t<span class=\"kw2\">BHI</span>\tExitCx<br/>\tPUSH\t<span class=\"kw4\">D4</span>\t<span class=\"co1\">; set D7 as bit # and A6 as byte pointer for D4'th bit of array</span><br/>\t<span class=\"kw2\">JSR</span> GetBit<br/>\tDROP<br/>\t<span class=\"kw2\">BSET</span>\t<span class=\"kw4\">D7</span>,<span class=\"nu0\">0</span><span class=\"br0\">(</span><span class=\"kw4\">A0</span>,<span class=\"kw4\">A6</span>.<span class=\"kw3\">L</span><span class=\"br0\">)</span>\t<span class=\"co1\">; set bit to mark as composite number</span><br/>\t<span class=\"kw2\">ADD</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D1</span>,<span class=\"kw4\">D4</span>\t<span class=\"co1\">; next number to mark</span><br/>\t<span class=\"kw2\">BRA</span>\tCxLoop<br/><span class=\"re0\">ExitCx:<br/></span>\t<span class=\"kw2\">CLR</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D1</span>\t<span class=\"co1\">; Clear new-prime-found flag</span><br/>\t<span class=\"kw2\">ADDQ</span>\t#<span class=\"nu0\">1</span>,<span class=\"kw4\">D3</span>\t<span class=\"co1\">; Start just past last prime found </span><br/><span class=\"re0\">PxLoop:\t</span>\t<span class=\"co1\">; Searches for next unmarked (not composite) number</span><br/>\t<span class=\"kw2\">CMP</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D2</span>,<span class=\"kw4\">D3</span>\t<span class=\"co1\">; no point searching past where first unmarked multiple would be past end of array</span><br/>\t<span class=\"kw2\">BHI</span>\tExitPx\t<span class=\"co1\">; if past end of array</span><br/>\t<span class=\"kw2\">TST</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D1</span><br/>\t<span class=\"kw2\">BNE</span>\tExitPx\t<span class=\"co1\">; if flag set, new prime found</span><br/>\tPUSH <span class=\"kw4\">D3</span>\t\t<span class=\"co1\">; check D3'th bit flag</span><br/>\t<span class=\"kw2\">JSR</span>\tGetBit\t<span class=\"co1\">; sets D7 as bit # and A6 as byte pointer</span><br/>\tDROP\t\t<span class=\"co1\">; drop TOS</span><br/>\t<span class=\"kw2\">BTST</span>\t<span class=\"kw4\">D7</span>,<span class=\"nu0\">0</span><span class=\"br0\">(</span><span class=\"kw4\">A0</span>,<span class=\"kw4\">A6</span>.<span class=\"kw3\">L</span><span class=\"br0\">)</span>\t<span class=\"co1\">; read bit flag</span><br/>\t<span class=\"kw2\">BNE</span>\tIsSet\t<span class=\"co1\">; If already tagged as composite</span><br/>\t<span class=\"kw2\">MOVEQ</span>\t#<span class=\"sy0\">-</span><span class=\"nu0\">1</span>,<span class=\"kw4\">D1</span>\t<span class=\"co1\">; Set flag that we've found a new prime</span><br/><span class=\"re0\">IsSet:<br/></span>\t<span class=\"kw2\">ADDQ</span>\t#<span class=\"nu0\">1</span>,<span class=\"kw4\">D3</span>\t<span class=\"co1\">; next PIndex</span><br/>\t<span class=\"kw2\">BRA</span>\tPxLoop<br/><span class=\"re0\">ExitPx:<br/></span>\t<span class=\"kw2\">SUBQ</span>\t#<span class=\"nu0\">1</span>,<span class=\"kw4\">D3</span>\t<span class=\"co1\">; back up PIndex</span><br/>\t<span class=\"kw2\">TST</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D1</span>\t<span class=\"co1\">; Did we find a new prime #?</span><br/>\t<span class=\"kw2\">BNE</span>\tPrimeLoop\t<span class=\"co1\">; If another prime # found, go process it</span><br/><span class=\"sy0\">*</span><br/>\t\t<span class=\"co1\">; fall through to print routine</span><br/>\u00a0<br/><span class=\"sy0\">**</span>\t<span class=\"sy0\">------------------------</span>\t<span class=\"sy0\">**</span><br/>\u00a0<br/><span class=\"sy0\">*</span> Print primes found<br/><span class=\"sy0\">*</span><br/><span class=\"sy0\">*</span>\t<span class=\"kw4\">D4</span> <span class=\"sy0\">==</span> Column count<br/><span class=\"sy0\">*</span><br/><span class=\"sy0\">*</span>\tPrint header <span class=\"kw2\">and</span> assumed primes <span class=\"br0\">(</span>#<span class=\"nu0\">1</span>, #<span class=\"nu0\">2</span><span class=\"br0\">)</span> <br/>    \tPUTS\tHeader\t<span class=\"co1\">; Print string @ Header, no CR/LF</span><br/>\t<span class=\"kw2\">MOVEQ</span>\t#<span class=\"nu0\">2</span>,<span class=\"kw4\">D6</span>\t<span class=\"co1\">; Start counter at 2 because #1 and #2 are assumed primes</span><br/>\t<span class=\"kw2\">MOVEQ</span>\t#<span class=\"nu0\">2</span>,<span class=\"kw4\">D4</span><br/><span class=\"sy0\">*</span><br/>\t<span class=\"kw2\">MOVEQ</span>\t#<span class=\"nu0\">0</span>,<span class=\"kw4\">D3</span><br/><span class=\"re0\">PrintLoop:<br/></span>\t<span class=\"kw2\">CMP</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D5</span>,<span class=\"kw4\">D3</span><br/>\tBHS\tExitPL<br/>\tPUSH\t<span class=\"kw4\">D3</span><br/>\t<span class=\"kw2\">JSR</span>\tGetBit\t<span class=\"co1\">; sets D7 as bit # and A6 as byte pointer</span><br/>\tDROP\t\t<span class=\"co1\">; drop TOS</span><br/>\t<span class=\"kw2\">BTST</span>\t<span class=\"kw4\">D7</span>,<span class=\"nu0\">0</span><span class=\"br0\">(</span><span class=\"kw4\">A0</span>,<span class=\"kw4\">A6</span>.<span class=\"kw3\">L</span><span class=\"br0\">)</span><br/>\t<span class=\"kw2\">BNE</span>\t\tNotPrime<br/><span class=\"sy0\">*</span>\t\tprintf<span class=\"br0\">(</span><span class=\"st0\">\"\u00a0%6d\"</span>, val<span class=\"br0\">(</span>PIndex<span class=\"br0\">)</span><br/>\t<span class=\"kw2\">MOVE</span>.<span class=\"kw3\">L</span>\t<span class=\"kw4\">D3</span>,<span class=\"kw4\">D1</span><br/>\tval\t<span class=\"kw4\">D1</span><br/>\t<span class=\"kw2\">AND</span>.<span class=\"kw3\">L</span>\t#<span class=\"nu13\">$0000FFFF</span>,<span class=\"kw4\">D1</span><br/>\t<span class=\"kw2\">MOVEQ</span>\t#<span class=\"nu0\">6</span>,<span class=\"kw4\">D2</span><br/>\t<span class=\"kw2\">MOVEQ</span>\t#<span class=\"nu0\">20</span>,<span class=\"kw4\">D0</span>\t<span class=\"co1\">; display signed RJ</span><br/>\t<span class=\"kw2\">TRAP</span>\t#<span class=\"nu0\">15</span><br/>\t<span class=\"kw2\">ADDQ</span>\t#<span class=\"nu0\">1</span>,<span class=\"kw4\">D4</span><br/>\t<span class=\"kw2\">ADDQ</span>\t#<span class=\"nu0\">1</span>,<span class=\"kw4\">D6</span><br/><span class=\"sy0\">*</span>\t<span class=\"sy0\">***</span> Display formatting <span class=\"sy0\">***</span><br/><span class=\"sy0\">*</span>\t\tif<span class=\"br0\">(</span><span class=\"br0\">(</span>PCount\u00a0% <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> printf<span class=\"br0\">(</span><span class=\"st0\">\"\\n\"</span><span class=\"br0\">)</span><span class=\"co1\">;</span><br/>\t<span class=\"kw2\">CMP</span>\t#<span class=\"nu0\">10</span>,<span class=\"kw4\">D4</span><br/>\tBLO\tNoLF<br/>\tPUTS\tCRLF<br/>\t<span class=\"kw2\">MOVEQ</span>\t#<span class=\"nu0\">0</span>,<span class=\"kw4\">D4</span><br/><span class=\"re0\">NoLF:<br/></span><span class=\"re0\">NotPrime:<br/></span>\t<span class=\"kw2\">ADDQ</span>\t#<span class=\"nu0\">1</span>,<span class=\"kw4\">D3</span><br/>\t<span class=\"kw2\">BRA</span>\tPrintLoop<br/><span class=\"re0\">ExitPL:<br/></span>\t<span class=\"kw2\">RTS</span><br/>\u00a0<br/><span class=\"sy0\">**</span> <span class=\"sy0\">=======================================================================</span> <span class=\"sy0\">**</span><br/>\u00a0<br/><span class=\"re0\">N\t</span><span class=\"kw1\">EQU</span>\t<span class=\"nu0\">5000</span>\t<span class=\"co1\">; *** Size of boolean (bit) array ***</span><br/><span class=\"re0\">SizeInBytes\t</span><span class=\"kw1\">EQU</span>\t<span class=\"br0\">(</span>N<span class=\"sy0\">+</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">8</span><br/><span class=\"sy0\">*</span><br/><span class=\"re0\">START: </span>                 \t<span class=\"co1\">; first instruction of program</span><br/>\t<span class=\"kw2\">MOVE</span>.<span class=\"kw3\">L</span>\t#N,<span class=\"kw4\">D0</span>\t<span class=\"co1\">; # to test</span><br/>\t<span class=\"kw2\">JSR</span>\tSieve<br/><span class=\"sy0\">*</span>\t\tprintf<span class=\"br0\">(</span><span class=\"st0\">\"\\n\u00a0%d prime numbers found.\\n\"</span>, <span class=\"kw4\">D6</span><span class=\"br0\">)</span><span class=\"co1\">; ***</span><br/>\tPUTS\tSummary1,<span class=\"kw4\">A1</span><br/>\t<span class=\"kw2\">MOVE</span>\t#<span class=\"nu0\">3</span>,<span class=\"kw4\">D0</span>\t<span class=\"co1\">; Display signed number in D1.L in decimal in smallest field.</span><br/>\t<span class=\"kw2\">MOVE</span>.<span class=\"kw3\">W</span>\t<span class=\"kw4\">D6</span>,<span class=\"kw4\">D1</span><br/>\t<span class=\"kw2\">TRAP</span>\t#<span class=\"nu0\">15</span><br/>\tPUTS\tSummary2,<span class=\"kw4\">A1</span><br/>\u00a0<br/>\tSIMHALT             \t<span class=\"co1\">; halt simulator</span><br/>\u00a0<br/><span class=\"sy0\">**</span> <span class=\"sy0\">=======================================================================</span> <span class=\"sy0\">**</span><br/>\u00a0<br/><span class=\"sy0\">*</span> Variables <span class=\"kw2\">and</span> constants here<br/>\u00a0<br/>\t<span class=\"kw1\">ORG</span>\t<span class=\"nu13\">$2000</span><br/><span class=\"re0\">CR\t</span><span class=\"kw1\">EQU</span>\t<span class=\"nu0\">13</span><br/><span class=\"re0\">LF\t</span><span class=\"kw1\">EQU</span>\t<span class=\"nu0\">10</span><br/><span class=\"re0\">CRLF\t</span><span class=\"kw1\">DC.B</span>\tCR,LF,<span class=\"nu13\">$00</span><br/>\u00a0<br/><span class=\"re0\">PArray:\t</span><span class=\"kw1\">DCB.B</span>\tSizeInBytes,<span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"re0\">Header:\t</span><span class=\"kw1\">DC.B</span>\tCR,LF,LF,<span class=\"st0\">' Primes'</span>,CR,LF,<span class=\"st0\">' ======'</span>,CR,LF<br/>\t\t<span class=\"kw1\">DC.B</span>\t<span class=\"st0\">'     1     2'</span>,<span class=\"nu13\">$00</span><br/>\u00a0<br/><span class=\"re0\">Summary1:\t</span><span class=\"kw1\">DC.B</span>\tCR,LF,<span class=\"st0\">' '</span>,<span class=\"nu13\">$00</span><br/><span class=\"re0\">Summary2:\t</span><span class=\"kw1\">DC.B</span>\t<span class=\"st0\">' prime numbers found.'</span>,CR,LF,<span class=\"nu13\">$00</span><br/>\u00a0<br/>    <span class=\"kw1\">END</span>    START        \t<span class=\"co1\">; last line of source</span></pre>"}, {"lang": "ABAP", "loc": 43, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/>PARAMETERS<span class=\"sy0\">:</span> <span class=\"me1\">p_limit</span> TYPE i OBLIGATORY DEFAULT <span class=\"nu0\">100</span><span class=\"sy0\">.</span><br/>\u00a0<br/>AT SELECTION-SCREEN ON p_limit<span class=\"sy0\">.</span><br/>  <span class=\"kw1\">IF</span> p_limit LE <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>    MESSAGE 'Limit must be higher then <span class=\"nu0\">1</span><span class=\"sy0\">.</span>' TYPE 'E'<span class=\"sy0\">.</span><br/>  ENDIF<span class=\"sy0\">.</span><br/>\u00a0<br/>START-OF-SELECTION<span class=\"sy0\">.</span><br/>  FIELD-SYMBOLS<span class=\"sy0\">:</span> <span class=\"sy0\">&lt;</span>fs_prime<span class=\"sy0\">&gt;</span> TYPE flag<span class=\"sy0\">.</span><br/>  DATA<span class=\"sy0\">:</span> <span class=\"me1\">gt_prime</span> TYPE TABLE OF flag<span class=\"sy0\">,</span><br/>        gv_prime TYPE flag<span class=\"sy0\">,</span><br/>        gv_i     TYPE i<span class=\"sy0\">,</span><br/>        gv_j     TYPE i<span class=\"sy0\">.</span><br/>\u00a0<br/>  <span class=\"kw1\">DO</span> p_limit TIMES<span class=\"sy0\">.</span><br/>    <span class=\"kw1\">IF</span> sy-index <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>      gv_prime <span class=\"sy0\">=</span> abap_true<span class=\"sy0\">.</span><br/>    ELSE<span class=\"sy0\">.</span><br/>      gv_prime <span class=\"sy0\">=</span> abap_false<span class=\"sy0\">.</span><br/>    ENDIF<span class=\"sy0\">.</span><br/>\u00a0<br/>    <span class=\"kw1\">APPEND</span> gv_prime TO gt_prime<span class=\"sy0\">.</span><br/>  ENDDO<span class=\"sy0\">.</span><br/>\u00a0<br/>  gv_i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">.</span><br/>  WHILE <span class=\"br0\">(</span> gv_i <span class=\"sy0\">&lt;=</span> trunc<span class=\"br0\">(</span> <span class=\"kw1\">sqrt</span><span class=\"br0\">(</span> p_limit <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span> gt_prime<span class=\"br0\">[</span> gv_i <span class=\"br0\">]</span> <span class=\"kw1\">EQ</span> abap_true <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>      gv_j <span class=\"sy0\">=</span>  gv_i ** <span class=\"nu0\">2</span><span class=\"sy0\">.</span><br/>      WHILE <span class=\"br0\">(</span> gv_j <span class=\"sy0\">&lt;=</span> p_limit <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>        gt_prime<span class=\"br0\">[</span> gv_j <span class=\"br0\">]</span> <span class=\"sy0\">=</span> abap_false<span class=\"sy0\">.</span><br/>        gv_j <span class=\"sy0\">=</span> <span class=\"br0\">(</span> gv_i ** <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"sy0\"> + </span><span class=\"br0\">(</span> sy-index<span class=\"sy0\"> * </span>gv_i <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>      ENDWHILE<span class=\"sy0\">.</span><br/>    ENDIF<span class=\"sy0\">.</span><br/>    gv_i <span class=\"sy0\">=</span> gv_i<span class=\"sy0\"> + </span><span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>  ENDWHILE<span class=\"sy0\">.</span><br/>\u00a0<br/>  LOOP AT gt_prime INTO gv_prime<span class=\"sy0\">.</span><br/>    <span class=\"kw1\">IF</span> gv_prime <span class=\"sy0\">=</span> abap_true<span class=\"sy0\">.</span><br/>      <span class=\"kw1\">WRITE</span><span class=\"sy0\">: / </span>sy-tabix<span class=\"sy0\">.</span><br/>    ENDIF<span class=\"sy0\">.</span><br/>  ENDLOOP<span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "ACL2", "loc": 30, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> nats-to-from <span class=\"br0\">(</span>n i<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>xargs <span class=\"sy0\">:</span><span class=\"me1\">measure</span> <span class=\"br0\">(</span>nfix <span class=\"br0\">(</span>- n i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zp <span class=\"br0\">(</span>- n i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"kw1\">nil</span><br/>       <span class=\"br0\">(</span><span class=\"kw1\">cons</span> i <span class=\"br0\">(</span>nats-to-from n <span class=\"br0\">(</span>+ i <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> remove-multiples-up-to-r <span class=\"br0\">(</span>factor limit xs i<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>xargs <span class=\"sy0\">:</span><span class=\"me1\">measure</span> <span class=\"br0\">(</span>nfix <span class=\"br0\">(</span>- limit i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> i limit<span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>zp <span class=\"br0\">(</span>- limit i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>zp factor<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       xs<br/>       <span class=\"br0\">(</span>remove-multiples-up-to-r<br/>        factor<br/>        limit<br/>        <span class=\"br0\">(</span><span class=\"kw1\">remove</span> i xs<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>+ i factor<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> remove-multiples-up-to <span class=\"br0\">(</span>factor limit xs<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>remove-multiples-up-to-r factor limit xs <span class=\"br0\">(</span>* factor <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sieve-r <span class=\"br0\">(</span>factor limit<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>xargs <span class=\"sy0\">:</span><span class=\"me1\">measure</span> <span class=\"br0\">(</span>nfix <span class=\"br0\">(</span>- limit factor<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zp <span class=\"br0\">(</span>- limit factor<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>nats-to-from limit <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>remove-multiples-up-to factor <span class=\"br0\">(</span>+ limit <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                               <span class=\"br0\">(</span>sieve-r <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ factor<span class=\"br0\">)</span> limit<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sieve <span class=\"br0\">(</span>limit<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>sieve-r <span class=\"nu0\">2</span> limit<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 24, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">function</span> eratosthenes<span class=\"br0\">(</span>limit:<span class=\"kw3\">int</span><span class=\"br0\">)</span>:<span class=\"kw3\">Array</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw2\">var</span> primes:<span class=\"kw3\">Array</span> = <span class=\"kw2\">new</span> <span class=\"kw3\">Array</span><span class=\"br0\">(</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>limit <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw2\">var</span> sqrtlmt:<span class=\"kw3\">int</span> = <span class=\"kw3\">int</span><span class=\"br0\">(</span><span class=\"kw3\">Math</span>.<span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>limit<span class=\"br0\">)</span> - <span class=\"nu0\">2</span><span class=\"br0\">)</span>;<br/>\t\t<span class=\"kw2\">var</span> nums:<span class=\"kw3\">Array</span> = <span class=\"kw2\">new</span> <span class=\"kw3\">Array</span><span class=\"br0\">(</span><span class=\"br0\">)</span>; <span class=\"co1\">// start with an empty Array...</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw2\">var</span> i:<span class=\"kw3\">int</span> = <span class=\"nu0\">2</span>; i <span class=\"sy0\">&lt;</span>= limit; i++<span class=\"br0\">)</span> <span class=\"co1\">// and</span><br/>\t\t\tnums.<span class=\"kw3\">push</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"co1\">// only initialize the Array once...</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw2\">var</span> j:<span class=\"kw3\">int</span> = <span class=\"nu0\">0</span>; j <span class=\"sy0\">&lt;</span>= sqrtlmt; j++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw2\">var</span> p:<span class=\"kw3\">int</span> = nums<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw2\">var</span> t:<span class=\"kw3\">int</span> = p <span class=\"sy0\">*</span> p - <span class=\"nu0\">2</span>; t <span class=\"sy0\">&lt;</span> nums.<span class=\"kw3\">length</span>; t += p<span class=\"br0\">)</span><br/>\t\t\t\t\tnums<span class=\"br0\">[</span>t<span class=\"br0\">]</span> = <span class=\"nu0\">0</span>;<br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw2\">var</span> m:<span class=\"kw3\">int</span> = <span class=\"nu0\">0</span>; m <span class=\"sy0\">&lt;</span> nums.<span class=\"kw3\">length</span>; m++<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw2\">var</span> r:<span class=\"kw3\">int</span> = nums<span class=\"br0\">[</span>m<span class=\"br0\">]</span>;<br/>\t\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>\t\t\t\tprimes.<span class=\"kw3\">push</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span>;<br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> primes;<br/><span class=\"br0\">}</span><br/><span class=\"kw2\">var</span> <span class=\"kw3\">e</span>:<span class=\"kw3\">Array</span> = eratosthenes<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span>;<br/><span class=\"kw3\">trace</span><span class=\"br0\">(</span><span class=\"kw3\">e</span><span class=\"br0\">)</span>;</pre>"}, {"lang": "Ada", "loc": 28, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>, Ada.<span class=\"me1\">Command_Line</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Eratos <span class=\"kw1\">is</span><br/>\u00a0<br/>   Last: Positive\u00a0:= Positive'Value<span class=\"br0\">(</span>Ada.<span class=\"me1\">Command_Line</span>.<span class=\"me1\">Argument</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   Prime: <span class=\"kw3\">array</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"me1\">Last</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Boolean\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">1</span> =&gt; False, <span class=\"kw3\">others</span> =&gt; True<span class=\"br0\">)</span>;<br/>   Base: Positive\u00a0:= <span class=\"nu0\">2</span>;<br/>   Cnt: Positive;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">loop</span><br/>      <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Base * Base &gt; Last;<br/>      <span class=\"kw1\">if</span> Prime<span class=\"br0\">(</span>Base<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         Cnt\u00a0:= Base + Base;<br/>         <span class=\"kw1\">loop</span><br/>            <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Cnt &gt; Last;<br/>            Prime<span class=\"br0\">(</span>Cnt<span class=\"br0\">)</span>\u00a0:= False;<br/>            Cnt\u00a0:= Cnt + Base;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      Base\u00a0:= Base + <span class=\"nu0\">1</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"Primes less or equal\"</span> &amp; Positive'Image<span class=\"br0\">(</span>Last<span class=\"br0\">)</span> &amp;<span class=\"st0\">\" are:\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> Number <span class=\"kw3\">in</span> Prime'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">if</span> Prime<span class=\"br0\">(</span>Number<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Positive'Image<span class=\"br0\">(</span>Number<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Eratos;</pre>"}, {"lang": "Agena", "loc": 32, "block": "<pre class=\"text highlighted_source\"># Sieve of Eratosthenes<br/>\u00a0<br/># generate and return a sequence containing the primes up to sieveSize<br/>sieve\u00a0:= proc( sieveSize\u00a0:: number )\u00a0:: sequence is<br/>    local sieve, result;<br/>\u00a0<br/>    result\u00a0:= seq(); # sequence of primes - initially empty<br/>    create register sieve( sieveSize ); # \"vector\" to be sieved<br/>\u00a0<br/>    sieve[ 1 ]\u00a0:= false;<br/>    for sPos from 2 to sieveSize do sieve[ sPos ]\u00a0:= true od;<br/>\u00a0<br/>    # sieve the primes<br/>    for sPos from 2 to entier( sqrt( sieveSize ) ) do<br/>        if sieve[ sPos ] then<br/>            for p from sPos * sPos to sieveSize by sPos do<br/>                sieve[ p ]\u00a0:= false<br/>            od<br/>        fi<br/>    od;<br/>\u00a0<br/>    # construct the sequence of primes<br/>    for sPos from 1 to sieveSize do<br/>        if sieve[ sPos ] then insert sPos into result fi<br/>    od<br/>\u00a0<br/>return result<br/>end; # sieve<br/>\u00a0<br/>\u00a0<br/># test the sieve proc<br/>for i in sieve( 100 ) do write( \" \", i ) od; print();</pre>"}, {"lang": "ALGOL 60", "loc": 1, "block": "<pre><b>comment</b> Sieve of Eratosthenes;\n<b>begin</b>\n   <b>integer array</b> t[0:1000];\n   <b>integer</b> i,j,k;\n   <b>for</b> i:=0 <b>step</b> 1 <b>until</b> 1000 <b>do</b> t[i]:=1;\n   t[0]:=0; t[1]:=0; i:=0;\n   <b>for</b> i:=i <b>while</b> i&lt;1000 <b>do</b>\n   <b>begin</b>\n       <b>for</b> i:=i <b>while</b> i&lt;1000 <b>and</b> t[i]=0 <b>do</b> i:=i+1;\n       <b>if</b> i&lt;1000 <b>then</b>\n       <b>begin</b>\n           j:=2;\n           k:=j*i;\n           <b>for</b> k:=k <b>while</b> k&lt;1000 <b>do</b>\n           <b>begin</b>\n               t[k]:=0;\n               j:=j+1;\n               k:=j*i\n           <b>end</b>;\n           i:=i+1\n       <b>end</b>\n   <b>end</b>;\n   <b>for</b> i:=0 <b>step</b> 1 <b>until</b> 999 <b>do</b>\n   <b>if</b> t[i]\u22600 <b>then</b> print(i,\ua78c is prime\ua78c)\n<b>end</b>\n</pre>"}, {"lang": "ALGOL 68", "loc": 18, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw3\">BOOL</span> prime <span class=\"sy1\">=</span> <span class=\"kw7\">TRUE</span><span class=\"sy1\">,</span> non prime <span class=\"sy1\">=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/><span class=\"kw4\">PROC</span> eratosthenes <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">INT</span> n<span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>  <span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"kw3\">BOOL</span> sieve<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> <span class=\"kw8\">UPB</span> sieve <span class=\"kw2\">DO</span> sieve<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> prime <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">INT</span> m <span class=\"sy1\">=</span> <span class=\"kw8\">ENTIER</span> <span class=\"kw24\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  sieve<span class=\"br0\">[</span>1<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> non prime<span class=\"sy1\">;</span><br/>  <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> m <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">IF</span> sieve<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> prime <span class=\"kw2\">THEN</span><br/>      <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> i<span class=\"sy1\">*</span>i <span class=\"kw2\">BY</span> i <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span><br/>        sieve<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> non prime<br/>      <span class=\"kw2\">OD</span><br/>    <span class=\"kw2\">FI</span><br/>  <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>  sieve<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/> <span class=\"kw22\">print</span><span class=\"br0\">(</span><span class=\"br0\">(</span>eratosthenes<span class=\"br0\">(</span>80<span class=\"br0\">)</span><span class=\"sy1\">,</span><span class=\"kw22\">new line</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ALGOL W", "loc": 43, "block": "<pre class=\"text highlighted_source\">begin<br/>\u00a0<br/>   \u00a0% implements the sieve of Eratosthenes                                  \u00a0%<br/>   \u00a0%     s(i) is set to true if i is prime, false otherwise                \u00a0%<br/>   \u00a0%     algol W doesn't have a upb operator, so we pass the size of the   \u00a0%<br/>   \u00a0%     array in n                                                        \u00a0%<br/>    procedure sieve( logical array s ( * ); integer value n )\u00a0;<br/>    begin<br/>\u00a0<br/>       \u00a0% start with everything flagged as prime                            \u00a0% <br/>        for i\u00a0:= 1 until n do s( i )\u00a0:= true;<br/>\u00a0<br/>       \u00a0% sieve out the non-primes                                          \u00a0%<br/>        s( 1 )\u00a0:= false;<br/>        for i\u00a0:= 2 until truncate( sqrt( n ) )<br/>        do begin<br/>            if s( i )<br/>            then begin<br/>                for p\u00a0:= i * i step i until n do s( p )\u00a0:= false<br/>            end if_s_i<br/>        end for_i\u00a0;<br/>\u00a0<br/>    end sieve\u00a0;<br/>\u00a0<br/>   \u00a0% test the sieve procedure                                              \u00a0%<br/>\u00a0<br/>    integer sieveMax;<br/>\u00a0<br/>    sieveMax\u00a0:= 100;<br/>    begin<br/>\u00a0<br/>        logical array s ( 1\u00a0:: sieveMax );<br/>\u00a0<br/>        i_w\u00a0:= 2;\u00a0% set output field width                                  \u00a0%<br/>        s_w\u00a0:= 1;\u00a0% and output separator width                              \u00a0%<br/>\u00a0<br/>       \u00a0% find and display the primes                                       \u00a0%<br/>        sieve( s, sieveMax );<br/>        for i\u00a0:= 1 until sieveMax do if s( i ) then writeon( i );<br/>\u00a0<br/>    end<br/>\u00a0<br/>end.</pre>"}, {"lang": "APL", "loc": 10, "block": "<pre class=\"text highlighted_source\">sieve2\u2190{                          <br/>  b\u2190\u2375\u23741             <br/>  b[\u23732\u230a\u2375]\u21900         <br/>  2\u2265\u2375:b             <br/>  p\u2190{\u2375/\u2373\u2374\u2375}\u2207\u2308\u2375*0.5  <br/>  m\u21901+\u230a(\u2375-1+p\u00d7p)\u00f7p  <br/>  b \u22a3 p {b[\u237a\u00d7\u237a+\u2373\u2375]\u21900}\u00a8 m<br/>}<br/>\u00a0<br/>primes2\u2190{\u2375/\u2373\u2374\u2375}\u2218sieve2</pre>"}, {"lang": "AutoHotkey", "loc": 16, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"st0\">\"12345678901234567890`n\"</span> Sieve<span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <br/>\u00a0<br/>Sieve<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; Sieve of Eratosthenes =&gt; string of 0|1 chars, 1 at position k: k is prime </span><br/>   Static zero <span class=\"sy0\">:=</span> <span class=\"nu0\">48</span><span class=\"sy0\">,</span> one <span class=\"sy0\">:=</span> <span class=\"nu0\">49</span> <span class=\"co1\">; Asc(\"0\"), Asc(\"1\") </span><br/>   <a href=\"http://www.autohotkey.com/docs/commands/VarSetCapacity.htm\"><span class=\"kw3\">VarSetCapacity</span></a><span class=\"br0\">(</span>S<span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>one<span class=\"br0\">)</span> <br/>   <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span>zero<span class=\"sy0\">,</span>S<span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"st0\">\"char\"</span><span class=\"br0\">)</span> <br/>   i <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span> <br/>   <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">sqrt</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"br0\">{</span> <br/>      <span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumGet</span></a><span class=\"br0\">(</span>S<span class=\"sy0\">,</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"st0\">\"char\"</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> one<span class=\"br0\">)</span> <br/>         <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% n<span class=\"sy0\">//</span>i <br/>            <span class=\"kw1\">If</span> <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>               <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">NumPut</span></a><span class=\"br0\">(</span>zero<span class=\"sy0\">,</span>S<span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">*</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"st0\">\"char\"</span><span class=\"br0\">)</span> <br/>      i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"br0\">(</span>i<span class=\"sy0\">&gt;</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <br/>   <span class=\"br0\">}</span> <br/>   <span class=\"kw1\">Return</span> S <br/><span class=\"br0\">}</span></pre>"}, {"lang": "AutoIt", "loc": 15, "block": "<pre class=\"autoit highlighted_source\"><span class=\"kw5\">#include</span><span class=\"co1\"> &lt;Array.au3&gt;</span><br/><span class=\"re0\">$M</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/InputBox.htm\"><span class=\"kw3\">InputBox</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Integer\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Enter biggest Integer\"</span><span class=\"br0\">)</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Global</span></a> <span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$M</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$r</span><span class=\"br0\">[</span><span class=\"re0\">$M</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"re0\">$M</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Not</span></a> <span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t<span class=\"re0\">$r</span><span class=\"br0\">[</span><span class=\"re0\">$c</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><br/>\t\t<span class=\"re0\">$c</span> <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$k</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"re0\">$M</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Step</span></a> <span class=\"re0\">$i</span><br/>\t\t\t<span class=\"re0\">$a</span><span class=\"br0\">[</span><span class=\"re0\">$k</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">True</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/><span class=\"re0\">$r</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$c</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">ReDim</span></a> <span class=\"re0\">$r</span><span class=\"br0\">[</span><span class=\"re0\">$c</span><span class=\"br0\">]</span><br/><span class=\"kw4\">_ArrayDisplay</span><span class=\"br0\">(</span><span class=\"re0\">$r</span><span class=\"br0\">)</span></pre>"}, {"lang": "AWK", "loc": 1, "block": "<pre>$ awk '{for(i=2;i&lt;=$1;i++) a[i]=1;\n&gt;       for(i=2;i&lt;=sqrt($1);i++) for(j=2;j&lt;=$1;j++) delete a[i*j];\n&gt;       for(i in a) printf i\" \"}'\n100\n71 53 17 5 73 37 19 83 47 29 7 67 59 11 97 79 89 31 13 41 23 2 61 43 3\n</pre>"}, {"lang": "BASIC", "loc": 17, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"kw1\">DIM</span> n <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span>, k <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span>, limit <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span><br/>\u00a0<br/><span class=\"kw1\">INPUT</span> <span class=\"st0\">\"Enter number to search to: \"</span>; limit<br/><span class=\"kw1\">DIM</span> flags<span class=\"br0\">(</span>limit<span class=\"br0\">)</span> <span class=\"kw1\">AS</span> <span class=\"kw1\">Integer</span><br/>\u00a0<br/><span class=\"kw1\">FOR</span> n = <span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> <span class=\"kw1\">SQR</span><span class=\"br0\">(</span>limit<span class=\"br0\">)</span><br/>    <span class=\"kw1\">IF</span> flags<span class=\"br0\">(</span>n<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">FOR</span> k = n*n <span class=\"kw1\">TO</span> limit <span class=\"kw1\">STEP</span> n<br/>            flags<span class=\"br0\">(</span>k<span class=\"br0\">)</span> = <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">NEXT</span> k<br/>    <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/><span class=\"kw1\">NEXT</span> n<br/>\u00a0<br/><span class=\"co1\">' Display the primes</span><br/><span class=\"kw1\">FOR</span> n = <span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> limit<br/>    <span class=\"kw1\">IF</span> flags<span class=\"br0\">(</span>n<span class=\"br0\">)</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">PRINT</span> n; <span class=\"st0\">\", \"</span>;<br/><span class=\"kw1\">NEXT</span> n</pre>"}, {"lang": "BBC BASIC", "loc": 15, "block": "<pre class=\"text highlighted_source\">      limit% = 100000<br/>      DIM sieve% limit%<br/>\u00a0<br/>      prime% = 2<br/>      WHILE prime%^2 &lt; limit%<br/>        FOR I% = prime%*2 TO limit% STEP prime%<br/>          sieve%?I% = 1<br/>        NEXT<br/>        REPEAT prime% += 1\u00a0: UNTIL sieve%?prime%=0<br/>      ENDWHILE<br/>\u00a0<br/>      REM Display the primes:<br/>      FOR I% = 1 TO limit%<br/>        IF sieve%?I% = 0 PRINT I%;<br/>      NEXT</pre>"}, {"lang": "bash", "loc": 20, "block": "<pre class=\"dos highlighted_source\"><span class=\"co2\">:: Sieve of Eratosthenes for Rosetta Code - PG</span><br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> ENABLEDELAYEDEXPANSION<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> ENABLEEXTENSIONS<br/><span class=\"co1\">rem echo on</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /p n=limit: <br/><span class=\"co1\">rem set n=100</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /L <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,<span class=\"sy0\">%</span><span class=\"re3\">n</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> crible.<span class=\"sy0\">%%</span><span class=\"re3\">i</span>=1<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /L <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>2,1,<span class=\"sy0\">%</span><span class=\"re3\">n</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">crible.%%<span class=\"re3\">i</span></span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">EQU</span></a> 1 <span class=\"sy0\">(</span><br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /A w = <span class=\"sy0\">%%</span><span class=\"re3\">i</span> * 2<br/>    <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /L <span class=\"sy0\">%%</span><span class=\"re3\">j</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(!</span><span class=\"re2\">w</span><span class=\"sy0\">!</span>,<span class=\"sy0\">%%</span><span class=\"re3\">i</span>,<span class=\"sy0\">%</span><span class=\"re3\">n</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> crible.<span class=\"sy0\">%%</span><span class=\"re3\">j</span>=0<br/>\t<span class=\"sy0\">)</span><br/>  <span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /L <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>2,1,<span class=\"sy0\">%</span><span class=\"re3\">n</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">crible.%%<span class=\"re3\">i</span></span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">EQU</span></a> 1 <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a></pre>"}, {"lang": "Batch File", "loc": 20, "block": "<pre class=\"dos highlighted_source\"><span class=\"co2\">:: Sieve of Eratosthenes for Rosetta Code - PG</span><br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> ENABLEDELAYEDEXPANSION<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> ENABLEEXTENSIONS<br/><span class=\"co1\">rem echo on</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /p n=limit: <br/><span class=\"co1\">rem set n=100</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /L <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,<span class=\"sy0\">%</span><span class=\"re3\">n</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> crible.<span class=\"sy0\">%%</span><span class=\"re3\">i</span>=1<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /L <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>2,1,<span class=\"sy0\">%</span><span class=\"re3\">n</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">crible.%%<span class=\"re3\">i</span></span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">EQU</span></a> 1 <span class=\"sy0\">(</span><br/>    <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /A w = <span class=\"sy0\">%%</span><span class=\"re3\">i</span> * 2<br/>    <a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /L <span class=\"sy0\">%%</span><span class=\"re3\">j</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(!</span><span class=\"re2\">w</span><span class=\"sy0\">!</span>,<span class=\"sy0\">%%</span><span class=\"re3\">i</span>,<span class=\"sy0\">%</span><span class=\"re3\">n</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>\t  <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> crible.<span class=\"sy0\">%%</span><span class=\"re3\">j</span>=0<br/>\t<span class=\"sy0\">)</span><br/>  <span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /L <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>2,1,<span class=\"sy0\">%</span><span class=\"re3\">n</span><span class=\"sy0\">%)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">!</span><span class=\"re2\">crible.%%<span class=\"re3\">i</span></span><span class=\"sy0\">!</span> <a href=\"http://www.ss64.com/nt/equ.html\"><span class=\"kw2\">EQU</span></a> 1 <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/pause.html\"><span class=\"kw3\">pause</span></a></pre>"}, {"lang": "Befunge", "loc": 1, "block": "<pre>2&gt;:3g\" \"-!v\\  g30          &lt;\n |!`\"O\":+1_:.:03p&gt;03g+:\"O\"`|\n @               ^  p3\\\" \":&lt;\n2 234567890123456789012345678901234567890123456789012345678901234567890123456789\n</pre>"}, {"lang": "Bracmat", "loc": 22, "block": "<pre class=\"text highlighted_source\">( ( eratosthenes<br/>  =   n j i<br/>    .  \u00a0!arg:?n<br/>      &amp; 1:?i<br/>      &amp;   whl<br/>        ' ( (1+!i:?i)^2:~&gt;!n:?j<br/>          &amp; (\u00a0!!i<br/>            |   whl<br/>              ' (\u00a0!j:~&gt;!n<br/>                &amp; nonprime:?!j<br/>                &amp;\u00a0!j+!i:?j<br/>                )<br/>            )<br/>          )<br/>      &amp; 1:?i<br/>      &amp;   whl<br/>        ' ( 1+!i:~&gt;!n:?i<br/>          &amp; (!!i|put$(!i \" \"))<br/>          )<br/>  )<br/>&amp; eratosthenes$100<br/>)</pre>"}, {"lang": "C", "loc": 28, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">char</span><span class=\"sy0\">*</span><br/>eratosthenes<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> <span class=\"sy0\">*</span>c<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">char</span><span class=\"sy0\">*</span> sieve<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> m<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">return</span> NULL<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"sy0\">*</span>c <span class=\"sy0\">=</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span>     <span class=\"coMULTI\">/* primes count */</span><br/>\tm <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* calloc initializes to zero */</span><br/>\tsieve <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">char</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tsieve<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\tsieve<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> m<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>sieve<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> i<span class=\"sy0\">*</span>i<span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> j <span class=\"sy0\">+=</span> i<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>sieve<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\t\tsieve<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <br/>\t\t\t\t\t<span class=\"sy0\">--</span><span class=\"br0\">(</span><span class=\"sy0\">*</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t\t<span class=\"br0\">}</span><br/>  \t<span class=\"kw1\">return</span> sieve<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 47, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw2\">template</span> <span class=\"sy1\">&lt;</span><span class=\"kw2\">typename</span> ForwardIterator<span class=\"sy1\">&gt;</span><br/><span class=\"kw4\">size_t</span> prime_sieve<span class=\"br0\">(</span>ForwardIterator start, ForwardIterator end<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>start <span class=\"sy1\">==</span> end<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>    <span class=\"co1\">// clear the container with 0</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">fill</span><span class=\"br0\">(</span>start, end, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"co1\">// mark composites with 1</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>ForwardIterator prime_it <span class=\"sy1\">=</span> start <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> prime_it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> end<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>prime_it<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>prime_it <span class=\"sy1\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">continue</span><span class=\"sy4\">;</span><br/>        <span class=\"co1\">// determine the prime number represented by this iterator location</span><br/>        <span class=\"kw4\">size_t</span> stride <span class=\"sy1\">=</span> <span class=\"br0\">(</span>prime_it <span class=\"sy2\">-</span> start<span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        <span class=\"co1\">// mark all multiples of this prime number up to max</span><br/>        ForwardIterator mark_it <span class=\"sy1\">=</span> prime_it<span class=\"sy4\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>end <span class=\"sy2\">-</span> mark_it<span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> stride<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            std<span class=\"sy4\">::</span><span class=\"me2\">advance</span><span class=\"br0\">(</span>mark_it, stride<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"sy2\">*</span>mark_it <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"co1\">// copy marked primes into container</span><br/>    ForwardIterator out_it <span class=\"sy1\">=</span> start<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>ForwardIterator it <span class=\"sy1\">=</span> start <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> it <span class=\"sy3\">!</span><span class=\"sy1\">=</span> end<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>it<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy2\">*</span>it <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"sy2\">*</span>out_it <span class=\"sy1\">=</span> <span class=\"br0\">(</span>it <span class=\"sy2\">-</span> start<span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>            <span class=\"sy2\">++</span>out_it<span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> out_it <span class=\"sy2\">-</span> start<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc, <span class=\"kw4\">const</span> <span class=\"kw4\">char</span><span class=\"sy2\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> primes<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw4\">size_t</span> count <span class=\"sy1\">=</span> prime_sieve<span class=\"br0\">(</span>primes.<span class=\"me1\">begin</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, primes.<span class=\"me1\">end</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"co1\">// display the primes</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">size_t</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> count<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> primes<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 44, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">namespace</span> SieveOfEratosthenes<br/><span class=\"br0\">{</span><br/>    <span class=\"kw4\">class</span> Program<br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw4\">int</span> maxprime <span class=\"sy0\">=</span> <span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">Parse</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> primelist <span class=\"sy0\">=</span> GetAllPrimesLessThan<span class=\"br0\">(</span>maxprime<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> prime <span class=\"kw1\">in</span> primelist<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>prime<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Count = \"</span> <span class=\"sy0\">+</span> primelist<span class=\"sy0\">.</span><span class=\"me1\">Count</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> GetAllPrimesLessThan<span class=\"br0\">(</span><span class=\"kw4\">int</span> maxPrime<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> primes <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> List<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> maxSquareRoot <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>maxPrime<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">var</span> eliminated <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> BitArray<span class=\"br0\">(</span>maxPrime <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> maxPrime<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>eliminated<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">{</span><br/>                    primes<span class=\"sy0\">.</span><span class=\"kw1\">Add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;=</span> maxSquareRoot<span class=\"br0\">)</span><br/>                    <span class=\"br0\">{</span><br/>                        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> i <span class=\"sy0\">*</span> i<span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;=</span> maxPrime<span class=\"sy0\">;</span> j <span class=\"sy0\">+=</span> i<span class=\"br0\">)</span><br/>                        <span class=\"br0\">{</span><br/>                            eliminated<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>                        <span class=\"br0\">}</span><br/>                    <span class=\"br0\">}</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">return</span> primes<span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Chapel", "loc": 23, "block": "<pre class=\"text highlighted_source\">// yield prime and remove all multiples of it from children sieves<br/>iter sieve(prime):int {<br/>\u00a0<br/>        yield prime;<br/>\u00a0<br/>        var last = prime;<br/>        label candidates for candidate in sieve(prime+1) do {<br/>                for composite in last..candidate by prime do {<br/>\u00a0<br/>                        // candidate is a multiple of this prime<br/>                        if composite == candidate then {<br/>                                // remember size of last composite<br/>                                last = composite;<br/>                                // and try the next candidate<br/>                                continue candidates;<br/>                        }<br/>                }<br/>\u00a0<br/>                // candidate cannot need to be removed by this sieve<br/>                // yield to parent sieve for checking<br/>                yield candidate;<br/>        }<br/>}</pre>"}, {"lang": "Clojure", "loc": 9, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> primes<span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">remove</span> <span class=\"br0\">(</span><span class=\"kw1\">into</span> #<span class=\"br0\">{</span><span class=\"br0\">}</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">mapcat</span> #<span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"sy0\">%</span> <span class=\"sy0\">%</span><span class=\"br0\">)</span> n <span class=\"sy0\">%</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">3</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>sqrt n<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"nu0\">2</span> <span class=\"br0\">(</span><span class=\"kw1\">range</span> <span class=\"nu0\">3</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "CMake", "loc": 35, "block": "<pre class=\"cmake highlighted_source\"><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:function\"><span class=\"kw1\">function</span></a><span class=\"sy0\">(</span>eratosthenes var limit<span class=\"sy0\">)</span><br/>  <span class=\"co1\"># Check for integer overflow. With CMake using 32-bit signed integer,</span><br/>  <span class=\"co1\"># this check fails when limit &gt; 46340.</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:if\"><span class=\"kw1\">if</span></a><span class=\"sy0\">(</span><span class=\"kw3\">NOT</span> limit <span class=\"kw3\">EQUAL</span> 0<span class=\"sy0\">)</span>         <span class=\"co1\"># Avoid division by zero.</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:math\"><span class=\"kw1\">math</span></a><span class=\"sy0\">(</span>EXPR i <span class=\"st0\">\"(<span class=\"es1\">${limit}</span> * <span class=\"es1\">${limit}</span>) / <span class=\"es1\">${limit}</span>\"</span><span class=\"sy0\">)</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:if\"><span class=\"kw1\">if</span></a><span class=\"sy0\">(</span><span class=\"kw3\">NOT</span> limit <span class=\"kw3\">EQUAL</span> <span class=\"re0\">${i}</span><span class=\"sy0\">)</span><br/>      <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:message\"><span class=\"kw1\">message</span></a><span class=\"sy0\">(</span><span class=\"kw3\">FATAL_ERROR</span> <span class=\"st0\">\"limit is too large, would cause integer overflow\"</span><span class=\"sy0\">)</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endif\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">()</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endif\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">()</span><br/>\u00a0<br/>  <span class=\"co1\"># Use local variables prime_2, prime_3, ..., prime_${limit} as array.</span><br/>  <span class=\"co1\"># Initialize array to y =&gt; yes it is prime.</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:foreach\"><span class=\"kw1\">foreach</span></a><span class=\"sy0\">(</span>i RANGE 2 <span class=\"re0\">${limit}</span><span class=\"sy0\">)</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span>prime_<span class=\"re0\">${i}</span> y<span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endforeach\"><span class=\"kw1\">endforeach</span></a><span class=\"sy0\">(</span>i<span class=\"sy0\">)</span><br/>\u00a0<br/>  <span class=\"co1\"># Gather a list of prime numbers.</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span>list<span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:foreach\"><span class=\"kw1\">foreach</span></a><span class=\"sy0\">(</span>i RANGE 2 <span class=\"re0\">${limit}</span><span class=\"sy0\">)</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:if\"><span class=\"kw1\">if</span></a><span class=\"sy0\">(</span>prime_<span class=\"re0\">${i}</span><span class=\"sy0\">)</span><br/>      <span class=\"co1\"># Append this prime to list.</span><br/>      <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:list\"><span class=\"kw1\">list</span></a><span class=\"sy0\">(</span><span class=\"kw3\">APPEND</span> list <span class=\"re0\">${i}</span><span class=\"sy0\">)</span><br/>\u00a0<br/>      <span class=\"co1\"># For each multiple of i, set n =&gt; no it is not prime.</span><br/>      <span class=\"co1\"># Optimization: start at i squared.</span><br/>      <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:math\"><span class=\"kw1\">math</span></a><span class=\"sy0\">(</span>EXPR square <span class=\"st0\">\"<span class=\"es1\">${i}</span> * <span class=\"es1\">${i}</span>\"</span><span class=\"sy0\">)</span><br/>      <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:if\"><span class=\"kw1\">if</span></a><span class=\"sy0\">(</span><span class=\"kw3\">NOT</span> square <span class=\"kw3\">GREATER</span> <span class=\"re0\">${limit}</span><span class=\"sy0\">)</span>   <span class=\"co1\"># Avoid fatal error.</span><br/>        <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:foreach\"><span class=\"kw1\">foreach</span></a><span class=\"sy0\">(</span>m RANGE <span class=\"re0\">${square}</span> <span class=\"re0\">${limit}</span> <span class=\"re0\">${i}</span><span class=\"sy0\">)</span><br/>          <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span>prime_<span class=\"re0\">${m}</span> n<span class=\"sy0\">)</span><br/>        <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endforeach\"><span class=\"kw1\">endforeach</span></a><span class=\"sy0\">(</span>m<span class=\"sy0\">)</span><br/>      <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endif\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">()</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endif\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">(</span>prime_<span class=\"re0\">${i}</span><span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endforeach\"><span class=\"kw1\">endforeach</span></a><span class=\"sy0\">(</span>i<span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span><span class=\"re0\">${var}</span> <span class=\"re0\">${list}</span> <span class=\"kw3\">PARENT_SCOPE</span><span class=\"sy0\">)</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endfunction\"><span class=\"kw1\">endfunction</span></a><span class=\"sy0\">(</span>eratosthenes<span class=\"sy0\">)</span></pre>"}, {"lang": "COBOL", "loc": 55, "block": "<pre class=\"cobol highlighted_source\"><span class=\"co1\">*&gt; Please ignore the asterisks in the first column of the next comments,</span><br/><span class=\"co1\">*&gt; which are kludges to get syntax highlighting to work.</span><br/>       <span class=\"kw3\">IDENTIFICATION</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">PROGRAM-ID</span><span class=\"sy0\">.</span> Sieve-Of-Eratosthenes<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">DATA</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">WORKING-STORAGE</span> <span class=\"kw1\">SECTION</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  Max-<span class=\"kw3\">Number</span>       <span class=\"kw3\">USAGE</span> UNSIGNED-INT<span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  Max-Prime        <span class=\"kw3\">USAGE</span> UNSIGNED-INT<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  Num-<span class=\"kw3\">Group</span><span class=\"sy0\">.</span><br/>           <span class=\"nu0\">03</span>  Num-<span class=\"kw3\">Table</span> <span class=\"kw3\">PIC</span> X <span class=\"kw3\">VALUE</span> <span class=\"st0\">\"P\"</span><br/>                   <span class=\"kw3\">OCCURS</span> <span class=\"nu0\">1</span> <span class=\"kw2\">TO</span> <span class=\"nu0\">10000000</span> <span class=\"kw2\">TIMES</span> <span class=\"kw3\">DEPENDING</span> <span class=\"kw3\">ON</span> Max-<span class=\"kw3\">Number</span><br/>                   <span class=\"kw3\">INDEXED</span> <span class=\"kw3\">BY</span> Num-<span class=\"kw3\">Index</span><span class=\"sy0\">.</span><br/>               <span class=\"nu0\">88</span>  Is-Prime <span class=\"kw3\">VALUE</span> <span class=\"st0\">\"P\"</span> <span class=\"kw3\">FALSE</span> <span class=\"st0\">\"N\"</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  Current-Prime    <span class=\"kw3\">USAGE</span> UNSIGNED-INT<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"nu0\">01</span>  I                <span class=\"kw3\">USAGE</span> UNSIGNED-INT<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">PROCEDURE</span> <span class=\"kw3\">DIVISION</span><span class=\"sy0\">.</span><br/>           <span class=\"kw2\">DISPLAY</span> <span class=\"st0\">\"Enter the limit: \"</span> <span class=\"kw3\">WITH</span> <span class=\"kw3\">NO</span> <span class=\"kw3\">ADVANCING</span><br/>           <span class=\"kw2\">ACCEPT</span> Max-<span class=\"kw3\">Number</span><br/>           <span class=\"kw2\">DIVIDE</span> Max-<span class=\"kw3\">Number</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">2</span> <span class=\"kw2\">GIVING</span> Max-Prime<br/>\u00a0<br/><span class=\"co1\">*          *&gt; Set Is-Prime of all non-prime numbers to false.</span><br/>           <span class=\"kw3\">SET</span> Is-Prime <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">TO</span> <span class=\"kw3\">FALSE</span><br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">UNTIL</span> Max-Prime &lt; Current-Prime<br/><span class=\"co1\">*              *&gt; Set current-prime to next prime.</span><br/>               <span class=\"kw2\">ADD</span> <span class=\"nu0\">1</span> <span class=\"kw2\">TO</span> Current-Prime<br/>               <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> Num-<span class=\"kw3\">Index</span> <span class=\"kw3\">FROM</span> Current-Prime <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span><br/>                   <span class=\"kw2\">UNTIL</span> Is-Prime <span class=\"br0\">(</span>Num-<span class=\"kw3\">Index</span><span class=\"br0\">)</span><br/>               END-<span class=\"kw2\">PERFORM</span><br/>               <span class=\"kw2\">MOVE</span> Num-<span class=\"kw3\">Index</span> <span class=\"kw2\">TO</span> Current-Prime<br/>\u00a0<br/><span class=\"co1\">*              *&gt; Set Is-Prime of all multiples of current-prime to</span><br/><span class=\"co1\">*              *&gt; false, starting from current-prime sqaured.</span><br/>               <span class=\"kw2\">COMPUTE</span> Num-<span class=\"kw3\">Index</span> <span class=\"sy0\">=</span> Current-Prime<span class=\"sy0\"> ** </span><span class=\"nu0\">2</span><br/>               <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">UNTIL</span> Max-<span class=\"kw3\">Number</span> &lt; Num-<span class=\"kw3\">Index</span><br/>                   <span class=\"kw3\">SET</span> Is-Prime <span class=\"br0\">(</span>Num-<span class=\"kw3\">Index</span><span class=\"br0\">)</span> <span class=\"kw2\">TO</span> <span class=\"kw3\">FALSE</span><br/>                   <span class=\"kw3\">SET</span> Num-<span class=\"kw3\">Index</span> <span class=\"kw3\">UP</span> <span class=\"kw3\">BY</span> Current-Prime<br/>               END-<span class=\"kw2\">PERFORM</span><br/>           END-<span class=\"kw2\">PERFORM</span><br/>\u00a0<br/><span class=\"co1\">*          *&gt; Display the prime numbers.</span><br/>           <span class=\"kw2\">PERFORM</span> <span class=\"kw2\">VARYING</span> Num-<span class=\"kw3\">Index</span> <span class=\"kw3\">FROM</span> <span class=\"nu0\">1</span> <span class=\"kw3\">BY</span> <span class=\"nu0\">1</span><br/>                   <span class=\"kw2\">UNTIL</span> Max-<span class=\"kw3\">Number</span> &lt; Num-<span class=\"kw3\">Index</span><br/>               <span class=\"kw1\">IF</span> Is-Prime <span class=\"br0\">(</span>Num-<span class=\"kw3\">Index</span><span class=\"br0\">)</span><br/>                   <span class=\"kw2\">DISPLAY</span> Num-<span class=\"kw3\">Index</span><br/>               END-<span class=\"kw1\">IF</span><br/>           END-<span class=\"kw2\">PERFORM</span><br/>\u00a0<br/>           GOBACK<br/>           <span class=\"sy0\">.</span></pre>"}, {"lang": "Common Lisp", "loc": 11, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sieve-of-eratosthenes <span class=\"br0\">(</span>maximum<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop<br/>     with sieve <span class=\"sy0\">=</span> <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ maximum<span class=\"br0\">)</span><br/>                              <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> 'bit<br/>                              <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>     for candidate from <span class=\"nu0\">2</span> to maximum<br/>     <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span>bit sieve candidate<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>     collect candidate<br/>     <span class=\"kw1\">and</span> <span class=\"kw1\">do</span> <span class=\"br0\">(</span>loop for composite from <span class=\"br0\">(</span><span class=\"kw1\">expt</span> candidate <span class=\"nu0\">2</span><span class=\"br0\">)</span> <br/>               to maximum by candidate<br/>               <span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span>bit sieve composite<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 19, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">functional</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">uint</span><span class=\"br0\">[</span><span class=\"br0\">]</span> sieve<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> limit<span class=\"br0\">)</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>limit <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">auto</span> composite <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> <span class=\"kw4\">bool</span><span class=\"br0\">[</span>limit<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> <span class=\"kw4\">uint</span> n<span class=\"sy0\">;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"kw2\">cast</span><span class=\"br0\">(</span><span class=\"kw4\">uint</span><span class=\"br0\">)</span><span class=\"br0\">(</span>limit <span class=\"sy0\">^^</span> <span class=\"nu16\">0.5</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>composite<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">uint</span> k <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;</span> limit<span class=\"sy0\">;</span> k <span class=\"sy0\">+=</span> n<span class=\"br0\">)</span><br/>                composite<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">//return iota(2, limit).filter!(not!composite).array;</span><br/>    <span class=\"kw1\">return</span> iota<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> limit<span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">!</span>composite<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"nu0\">50</span>.<span class=\"me1\">sieve</span>.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 33, "block": "<pre class=\"text highlighted_source\">// helper function to pretty print an Iterable<br/>String iterableToString(Iterable seq) {<br/>  String str = \"[\";<br/>  Iterator i = seq.iterator;<br/>  if (i.moveNext()) str += i.current.toString();<br/>  while(i.moveNext()) {<br/>    str += \", \" + i.current.toString();<br/>  }<br/>  return str + \"]\";<br/>}<br/>\u00a0<br/>main() {<br/>  int limit = 1000;<br/>  int strt = new DateTime.now().millisecondsSinceEpoch;<br/>  Set&lt;int&gt; sieve = new Set&lt;int&gt;();<br/>\u00a0<br/>  for(int i = 2; i &lt;= limit; i++) {<br/>    sieve.add(i);<br/>  }<br/>  for(int i = 2; i * i &lt;= limit; i++) {<br/>   if(sieve.contains(i)) {<br/>     for(int j = i * i; j &lt;= limit; j += i) {<br/>       sieve.remove(j);<br/>     }<br/>   }<br/>  }<br/>  var sortedValues = new List&lt;int&gt;.from(sieve);<br/>  int elpsd = new DateTime.now().millisecondsSinceEpoch - strt;<br/>  print(\"Found \" + sieve.length.toString() + \" primes up to \" + limit.toString() +<br/>      \" in \" + elpsd.toString() + \" milliseconds.\");<br/>  print(iterableToString(sortedValues)); // expect sieve.length to be 168 up to 1000...<br/>//  Expect.equals(168, sieve.length);<br/>}</pre>"}, {"lang": "Delphi", "loc": 85, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> erathostenes<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"co2\">{$APPTYPE CONSOLE}</span><br/>\u00a0<br/><span class=\"kw1\">type</span><br/>  TSieve <span class=\"sy3\">=</span> <span class=\"kw1\">class</span><br/>  <span class=\"kw1\">private</span><br/>    fPrimes<span class=\"sy1\">:</span> TArray&lt;boolean&gt;<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">procedure</span> InitArray<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">procedure</span> Sieve<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">function</span> getNextPrime<span class=\"br0\">(</span>aStart<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">function</span> getPrimeArray<span class=\"sy1\">:</span> TArray&lt;integer&gt;<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">public</span><br/>    <span class=\"kw1\">function</span> getPrimes<span class=\"br0\">(</span>aMax<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> TArray&lt;integer&gt;<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">{ TSieve }</span><br/>\u00a0<br/><span class=\"kw1\">function</span> TSieve<span class=\"sy1\">.</span><span class=\"me1\">getNextPrime</span><span class=\"br0\">(</span>aStart<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> aStart<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> <span class=\"kw1\">not</span> fPrimes<span class=\"br0\">[</span>result<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">inc</span><span class=\"br0\">(</span>result<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> TSieve<span class=\"sy1\">.</span><span class=\"me1\">getPrimeArray</span><span class=\"sy1\">:</span> TArray&lt;integer&gt;<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span> n<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">setlength</span><span class=\"br0\">(</span>result<span class=\"sy1\">,</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span>fPrimes<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// init array with maximum elements</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"kw3\">high</span><span class=\"br0\">(</span>fPrimes<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">if</span> fPrimes<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>    <span class=\"kw1\">begin</span><br/>      result<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i<span class=\"sy1\">;</span><br/>      <span class=\"kw3\">inc</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">setlength</span><span class=\"br0\">(</span>result<span class=\"sy1\">,</span> n<span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"co1\">// reduce array to actual elements</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> TSieve<span class=\"sy1\">.</span><span class=\"me1\">getPrimes</span><span class=\"br0\">(</span>aMax<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> TArray&lt;integer&gt;<span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">setlength</span><span class=\"br0\">(</span>fPrimes<span class=\"sy1\">,</span> aMax<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  InitArray<span class=\"sy1\">;</span><br/>  Sieve<span class=\"sy1\">;</span><br/>  result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> getPrimeArray<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TSieve<span class=\"sy1\">.</span><span class=\"me1\">InitArray</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"kw3\">high</span><span class=\"br0\">(</span>fPrimes<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    fPrimes<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">true</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> TSieve<span class=\"sy1\">.</span><span class=\"me1\">Sieve</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">,</span> n<span class=\"sy1\">,</span> max<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  max <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span>fPrimes<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">while</span> i &lt; <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>max<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>    n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">sqr</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> n &lt; max <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      fPrimes<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">inc</span><span class=\"br0\">(</span>n<span class=\"sy1\">,</span> i<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> getNextPrime<span class=\"br0\">(</span>i <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  Sieve<span class=\"sy1\">:</span> TSieve<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  Sieve <span class=\"sy1\">:</span><span class=\"sy3\">=</span> TSieve<span class=\"sy1\">.</span><span class=\"me1\">Create</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> Sieve<span class=\"sy1\">.</span><span class=\"me1\">getPrimes</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">write</span><span class=\"br0\">(</span>i<span class=\"sy1\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Sieve<span class=\"sy1\">.</span><span class=\"me1\">Free</span><span class=\"sy1\">;</span><br/>  readln<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "DWScript", "loc": 21, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">function</span> Primes<span class=\"br0\">(</span>limit <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span> <span class=\"sy1\">:</span> <span class=\"kw1\">array</span> <span class=\"kw1\">of</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>   n<span class=\"sy1\">,</span> k <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/>   sieve <span class=\"sy1\">:</span><span class=\"sy3\">=</span> new <span class=\"kw4\">Boolean</span><span class=\"br0\">[</span>limit<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"kw3\">Round</span><span class=\"br0\">(</span><span class=\"kw3\">Sqrt</span><span class=\"br0\">(</span>limit<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> sieve<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>         <span class=\"kw1\">for</span> k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy3\">*</span>n <span class=\"kw1\">to</span> limit step n <span class=\"kw1\">do</span><br/>            sieve<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">True</span><span class=\"sy1\">;</span><br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>   <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>   <span class=\"kw1\">for</span> k<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">to</span> limit <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> sieve<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>         Result<span class=\"sy1\">.</span><span class=\"me1\">Add</span><span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> r <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Primes<span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span> i <span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">for</span> i<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">to</span> r<span class=\"sy1\">.</span><span class=\"me1\">High</span> <span class=\"kw1\">do</span><br/>   PrintLn<span class=\"br0\">(</span>r<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">;</span></pre>"}, {"lang": "Dylan", "loc": 24, "block": "<pre class=\"text highlighted_source\">define method primes(n)<br/>  let limit = floor(n ^ 0.5) + 1;<br/>  let sieve = make(limited(&lt;simple-vector&gt;, of: &lt;boolean&gt;), size: n + 1, fill: #t);<br/>  let last-prime = 2;<br/>\u00a0<br/>  while (last-prime &lt; limit)<br/>    for (x from last-prime ^ 2 to n by last-prime)<br/>      sieve[x]\u00a0:= #f;<br/>    end for;<br/>    block (found-prime)<br/>      for (n from last-prime + 1 below limit)<br/>        if (sieve[n] = #f)<br/>          last-prime\u00a0:= n;<br/>          found-prime()<br/>        end;<br/>      end;<br/>      last-prime\u00a0:= limit;<br/>    end block;<br/>  end while;<br/>\u00a0<br/>  for (x from 2 to n)<br/>    if (sieve[x]) format-out(\"Prime:\u00a0%d\\n\", x); end;<br/>  end;<br/>end;</pre>"}, {"lang": "E", "loc": 1, "block": "<pre>def rangeFromBelowBy(start, limit, step) {\n  return def stepper {\n    to iterate(f) {\n      var i\u00a0:= start\n      while (i &lt; limit) {\n        f(null, i)\n        i += step\n      }\n    }\n  }\n}\n</pre>"}, {"lang": "eC", "loc": 45, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> FindPrime<br/><span class=\"br0\">{</span><br/>   Array<span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> primeList <span class=\"br0\">{</span> <span class=\"br0\">[</span> <span class=\"nu0\">2</span> <span class=\"br0\">]</span>, minAllocSize <span class=\"sy1\">=</span> <span class=\"nu0\">64</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>   <span class=\"kw4\">int</span> index<span class=\"sy4\">;</span><br/>\u00a0<br/>   index <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><span class=\"sy4\">;</span><br/>\u00a0<br/>   <span class=\"kw4\">bool</span> HasPrimeFactor<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><br/>      <span class=\"kw4\">int</span> max <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"kw3\">floor</span><span class=\"br0\">(</span><span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy4\">:</span> primeList<span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>         <span class=\"kw1\">if</span><span class=\"br0\">(</span>i <span class=\"sy1\">&gt;</span> max<span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>         <span class=\"kw1\">if</span><span class=\"br0\">(</span>x <span class=\"sy2\">%</span> i <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <span class=\"kw2\">public</span> <span class=\"kw4\">int</span> GetPrime<span class=\"br0\">(</span><span class=\"kw4\">int</span> x<span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>x <span class=\"sy1\">&gt;</span> primeList.<span class=\"me1\">count</span> <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">{</span><br/>         <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"sy4\">;</span> primeList.<span class=\"me1\">count</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> x<span class=\"sy4\">;</span> index <span class=\"sy2\">+</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy3\">!</span>HasPrimeFactor<span class=\"br0\">(</span>index<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">{</span><br/>               <span class=\"kw1\">if</span><span class=\"br0\">(</span>primeList.<span class=\"me1\">count</span> <span class=\"sy1\">&gt;=</span> primeList.<span class=\"me1\">minAllocSize</span><span class=\"br0\">)</span> primeList.<span class=\"me1\">minAllocSize</span> <span class=\"sy2\">*</span><span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span><br/>               primeList.<span class=\"me1\">Add</span><span class=\"br0\">(</span>index<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">return</span> primeList<span class=\"br0\">[</span>x<span class=\"sy2\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> PrimeApp <span class=\"sy4\">:</span> Application<br/><span class=\"br0\">{</span><br/>   FindPrime fp <span class=\"br0\">{</span> <span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>   <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">{</span><br/>      <span class=\"kw4\">int</span> num <span class=\"sy1\">=</span> argc <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy4\">?</span> <span class=\"kw3\">atoi</span><span class=\"br0\">(</span>argv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy4\">:</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span><br/>      PrintLn<span class=\"br0\">(</span>fp.<span class=\"me1\">GetPrime</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "EchoLisp", "loc": 30, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>require 'types<span class=\"br0\">)</span> <span class=\"co1\">;; bit-vector</span><br/>\u00a0<br/><span class=\"co1\">;; converts sieve-&gt;list for integers in [nmin .. nmax[</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>s-range sieve nmin nmax <span class=\"br0\">(</span>base <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span>for/<span class=\"kw1\">list</span> <span class=\"br0\">(</span><span class=\"br0\">[</span> i <span class=\"br0\">(</span>in-range nmin nmax<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span> #<span class=\"sy0\">:</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>bit-vector-ref sieve i<span class=\"br0\">)</span> <span class=\"br0\">(</span>+ i base<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; next prime in sieve &gt; p, or #f</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>s-next-prime sieve p <span class=\"br0\">)</span> <span class=\"co1\">;; </span><br/>\t\t<span class=\"br0\">(</span>bit-vector-scan-<span class=\"nu0\">1</span> sieve <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">;; returns a bit-vector - sieve- all numbers in [0..n[</span><br/><span class=\"br0\">(</span>define <span class=\"br0\">(</span>eratosthenes n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>define primes <span class=\"br0\">(</span>make-bit-vector-<span class=\"nu0\">1</span> n <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>bit-vector-<span class=\"kw1\">set</span><span class=\"sy0\">!</span> primes <span class=\"nu0\">0</span> #f<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>bit-vector-<span class=\"kw1\">set</span><span class=\"sy0\">!</span> primes <span class=\"nu0\">1</span> #f<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">[</span>p <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  \t\t #<span class=\"sy0\">:</span><span class=\"kw1\">when</span> <span class=\"br0\">(</span>bit-vector-ref primes  p<span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">[</span>j <span class=\"br0\">(</span>in-range <span class=\"br0\">(</span>* p p<span class=\"br0\">)</span> n p<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>bit-vector-<span class=\"kw1\">set</span><span class=\"sy0\">!</span> primes j #f<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   primes<span class=\"br0\">)</span> <br/>\u00a0<br/><span class=\"br0\">(</span>define s-primes <span class=\"br0\">(</span>eratosthenes <span class=\"nu0\">10</span>_000_000<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>s-range s-primes <span class=\"nu0\">0</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><br/>   \u2192 <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">11</span> <span class=\"nu0\">13</span> <span class=\"nu0\">17</span> <span class=\"nu0\">19</span> <span class=\"nu0\">23</span> <span class=\"nu0\">29</span> <span class=\"nu0\">31</span> <span class=\"nu0\">37</span> <span class=\"nu0\">41</span> <span class=\"nu0\">43</span> <span class=\"nu0\">47</span> <span class=\"nu0\">53</span> <span class=\"nu0\">59</span> <span class=\"nu0\">61</span> <span class=\"nu0\">67</span> <span class=\"nu0\">71</span> <span class=\"nu0\">73</span> <span class=\"nu0\">79</span> <span class=\"nu0\">83</span> <span class=\"nu0\">89</span> <span class=\"nu0\">97</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>s-range s-primes <span class=\"nu0\">1</span>_000_000 <span class=\"nu0\">1</span>_000_100<span class=\"br0\">)</span><br/>   \u2192 <span class=\"br0\">(</span><span class=\"nu0\">1000003</span> <span class=\"nu0\">1000033</span> <span class=\"nu0\">1000037</span> <span class=\"nu0\">1000039</span> <span class=\"nu0\">1000081</span> <span class=\"nu0\">1000099</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>s-next-prime s-primes <span class=\"nu0\">9</span>_000_000<span class=\"br0\">)</span><br/>   \u2192 <span class=\"nu0\">9000011</span></pre>"}, {"lang": "Eiffel", "loc": 35, "block": "<pre class=\"eiffel highlighted_source\"><span class=\"kw1\">class</span><br/>    APPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>    make<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>       make<br/>            <span class=\"co1\">-- Run application.</span><br/>        <span class=\"kw2\">do</span><br/>            across primes_through <span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> ic <span class=\"kw2\">loop</span> print <span class=\"br0\">(</span>ic.<span class=\"me1\">item</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"kw2\">end</span><br/>        <span class=\"kw2\">end</span><br/>\u00a0<br/>    primes_through <span class=\"br0\">(</span>a_limit<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+linked_list&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">LINKED_LIST</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>            <span class=\"co1\">-- Prime numbers through `a_limit'</span><br/>        <span class=\"kw2\">require</span><br/>            valid_upper_limit<span class=\"sy0\">:</span> a_limit <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span><br/>        <span class=\"kw2\">local</span><br/>            l_tab<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><span class=\"br0\">]</span><br/>        <span class=\"kw2\">do</span><br/>            <span class=\"kw2\">create</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">make</span><br/>            <span class=\"kw2\">create</span> l_tab.<span class=\"me1\">make_filled</span> <span class=\"br0\">(</span><span class=\"kw3\">True</span>, <span class=\"nu0\">2</span>, a_limit<span class=\"br0\">)</span><br/>            across<br/>                l_tab <span class=\"kw2\">as</span> ic<br/>            <span class=\"kw2\">loop</span><br/>                <span class=\"kw2\">if</span> ic.<span class=\"me1\">item</span> <span class=\"kw2\">then</span><br/>                    <span class=\"kw3\">Result</span>.<span class=\"me1\">extend</span> <span class=\"br0\">(</span>ic.<span class=\"me1\">target_index</span><span class=\"br0\">)</span><br/>                    across <span class=\"br0\">(</span><span class=\"br0\">(</span>ic.<span class=\"me1\">target_index</span> <span class=\"sy0\">*</span> ic.<span class=\"me1\">target_index</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> l_tab.<span class=\"me1\">upper</span><span class=\"br0\">)</span>.<span class=\"me1\">new_cursor</span>.<span class=\"me1\">with_step</span> <span class=\"br0\">(</span>ic.<span class=\"me1\">target_index</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> id<br/>                    <span class=\"kw2\">loop</span><br/>                        l_tab <span class=\"br0\">[</span>id.<span class=\"me1\">item</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">False</span><br/>                    <span class=\"kw2\">end</span><br/>                <span class=\"kw2\">end</span><br/>            <span class=\"kw2\">end</span><br/>        <span class=\"kw2\">end</span><br/><span class=\"kw2\">end</span></pre>"}, {"lang": "Elixir", "loc": 25, "block": "<pre class=\"text highlighted_source\">defmodule Prime do<br/>  def eratosthenes(limit \\\\ 1000) do<br/>    sieve = [false, false | Enum.to_list(2..limit)] |&gt; List.to_tuple<br/>    check_list = [2 | Stream.iterate(3, &amp;(&amp;1+2)) |&gt; Enum.take(round(:math.sqrt(limit)/2))]<br/>    Enum.reduce(check_list, sieve, fn i,tuple -&gt;<br/>      if elem(tuple,i) do<br/>        clear_num = Stream.iterate(i*i, &amp;(&amp;1+i)) |&gt; Enum.take_while(fn x -&gt; x &lt;= limit end)<br/>        clear(tuple, clear_num)<br/>      else<br/>        tuple<br/>      end<br/>    end)<br/>  end<br/>\u00a0<br/>  defp clear(sieve, list) do<br/>    Enum.reduce(list, sieve, fn i, acc -&gt; put_elem(acc, i, false) end)<br/>  end<br/>end<br/>\u00a0<br/>limit = 199<br/>sieve = Prime.eratosthenes(limit)<br/>Enum.each(0..limit, fn n -&gt;<br/>  if x=elem(sieve, n), do:\u00a0:io.format(\"~3w\", [x]), else:\u00a0:io.format(\"  .\") <br/>  if rem(n+1, 20)==0, do: IO.puts \"\"<br/>end)</pre>"}, {"lang": "Emacs Lisp", "loc": 9, "block": "<pre class=\"lisp highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> sieve-<span class=\"kw1\">set</span> <span class=\"br0\">(</span>limit<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>xs <span class=\"br0\">(</span>make-vector <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ limit<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">2</span> to limit<br/>          <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> xs i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          collect i<br/>          <span class=\"kw1\">and</span> <span class=\"kw1\">do</span> <span class=\"br0\">(</span>loop for m from <span class=\"br0\">(</span>* i i<span class=\"br0\">)</span> to limit by i<br/>                       <span class=\"kw1\">do</span> <span class=\"br0\">(</span>aset xs m <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 19, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> sieve_of_eratosthenes <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>primes_upto<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">primes_upto</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Ns</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Dict</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">from_list</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> potential_prime<span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Ns</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">Upto_sqrt_ns</span><span class=\"sy1\">,</span> <span class=\"re5\">_T</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">split</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/erlang.html\"><span class=\"kw5\">erlang</span></a>:<span class=\"kw3\">round</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sqrt</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Ns</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Prime_dict</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> find_prime<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">Upto_sqrt_ns</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">fetch_keys</span><span class=\"br0\">(</span><span class=\"re5\">Prime_dict</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">find_prime</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">find_prime</span><span class=\"br0\">(</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"re3\">find</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">}</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">find_prime</span><span class=\"br0\">(</span> error<span class=\"sy1\">,</span> <span class=\"re5\">_N</span><span class=\"sy1\">,</span> <span class=\"re5\">Acc</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Acc</span><span class=\"sy1\">;</span><br/><span class=\"re3\">find_prime</span><span class=\"br0\">(</span> <span class=\"br0\">{</span>ok<span class=\"sy1\">,</span> <span class=\"re5\">_Value</span><span class=\"br0\">}</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"br0\">{</span><span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"br0\">}</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">{</span><span class=\"re5\">Max</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">foldl</span><span class=\"br0\">(</span> <span class=\"kw1\">fun</span> <a href=\"http://erlang.org/doc/man/dict.html\"><span class=\"kw5\">dict</span></a>:<span class=\"kw3\">erase</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"re5\">Dict</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy3\">*</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Max</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 31, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>PROGRAM SIEVE_ORG<br/> \u00a0! --------------------------------------------------<br/> \u00a0! Eratosthenes Sieve Prime Number Program in BASIC<br/> \u00a0! (da 3 a SIZE*2)   from Byte September 1981<br/> \u00a0!---------------------------------------------------<br/>  CONST SIZE%=8190<br/>\u00a0<br/>  DIM FLAGS%[SIZE%]<br/>\u00a0<br/>BEGIN<br/>  PRINT(\"Only 1 iteration\")<br/>  COUNT%=0<br/>  FOR I%=0 TO SIZE% DO<br/>     IF FLAGS%[I%]=TRUE THEN<br/>        \u00a0!$NULL<br/>       ELSE<br/>         PRIME%=I%+I%+3<br/>         K%=I%+PRIME%<br/>         WHILE NOT (K%&gt;SIZE%) DO<br/>            FLAGS%[K%]=TRUE<br/>            K%=K%+PRIME%<br/>         END WHILE<br/>         PRINT(PRIME%;)<br/>         COUNT%=COUNT%+1<br/>     END IF<br/>  END FOR<br/>  PRINT<br/>  PRINT(COUNT%;\" PRIMES\")<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 18, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">constant</span> limit <span class=\"sy1\">=</span> <span class=\"nu0\">1000</span><br/><span class=\"kw2\">sequence</span> flags<span class=\"sy2\">,</span>primes<br/>flags <span class=\"sy1\">=</span> <span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span> limit<span class=\"br0\">)</span><br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"kw2\">sqrt</span><span class=\"br0\">(</span>limit<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> flags<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">for</span> k <span class=\"sy1\">=</span> i<span class=\"sy1\">*</span>i <span class=\"kw1\">to</span> limit <span class=\"kw1\">by</span> i <span class=\"kw1\">do</span><br/>            flags<span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\u00a0<br/>primes <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> limit <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> flags<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>        primes <span class=\"sy1\">&amp;=</span> i<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/><span class=\"sy2\">?</span> primes</pre>"}, {"lang": "F#", "loc": 14, "block": "<pre class=\"fsharp highlighted_source\">\u00a0<br/><span class=\"co3\">(*<br/>  An interesting implementation of The Sieve of Eratosthenes.<br/>  Nigel Galloway April 7th., 2017.<br/>*)</span><br/><span class=\"kw1\">let</span> SofE <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> fn n g <span class=\"sy0\">=</span> <span class=\"kw4\">seq</span><span class=\"br0\">{</span> <span class=\"kw1\">match</span> n <span class=\"kw1\">with</span><br/>                        |<span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">yield</span> false<span class=\"sy0\">;</span> <span class=\"kw1\">yield!</span> fn g g <br/>                        |_ <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">yield</span>  true<span class=\"sy0\">;</span> <span class=\"kw1\">yield!</span> fn <span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> g<span class=\"br0\">}</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> fg ng <span class=\"sy0\">=</span> <span class=\"kw4\">seq</span><span class=\"br0\">{</span><br/>    <span class=\"kw1\">let</span> g <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">findIndex</span><span class=\"br0\">(</span>id<span class=\"br0\">)</span> ng<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">2</span><br/>    <span class=\"kw1\">yield</span> g<span class=\"sy0\">;</span> <span class=\"kw1\">yield!</span> fg <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">cache</span><span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">map2</span><span class=\"br0\">(</span>&amp;&amp;<span class=\"br0\">)</span> ng <span class=\"br0\">(</span>fn <span class=\"br0\">(</span>g<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> g<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  fg <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">initInfinite</span><span class=\"br0\">(</span><span class=\"kw1\">fun</span> x<span class=\"sy0\">-&gt;</span><span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 1, "block": "<pre>: prime? ( n --\u00a0? ) here + <a class=\"__cf_email__\" data-cfemail=\"781b38\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> 0=\u00a0;\n: composite! ( n -- ) here + 1 swap c!\u00a0;\n\n: sieve ( n -- )\n  here over erase\n  2\n  begin\n    2dup dup * &gt;\n  while\n    dup prime? if\n      2dup dup * do\n        i composite!\n      dup +loop\n    then\n    1+\n  repeat\n  drop\n  .\" Primes: \" 2 do i prime? if i . then loop\u00a0;\n\n100 sieve\n</pre>"}, {"lang": "Fortran", "loc": 18, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> sieve<br/>\u00a0<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">i_max</span> <span class=\"sy0\">=</span> <span class=\"nu0\">100</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>  <span class=\"kw3\">logical</span>, <span class=\"kw3\">dimension</span> <span class=\"br0\">(</span>i_max<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">is_prime</span><br/>\u00a0<br/>  is_prime <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/>  is_prime <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, <span class=\"kw4\">int</span> <span class=\"br0\">(</span><span class=\"kw4\">sqrt</span> <span class=\"br0\">(</span><span class=\"kw3\">real</span> <span class=\"br0\">(</span>i_max<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>is_prime <span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> is_prime <span class=\"br0\">(</span>i <span class=\"sy0\">*</span> i <span class=\"sy0\">:</span> i_max <span class=\"sy0\">:</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, i_max<br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>is_prime <span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">'(i0, 1x)'</span>, <span class=\"kw1\">advance</span> <span class=\"sy0\">=</span> <span class=\"st0\">'no'</span><span class=\"br0\">)</span> i<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  write <span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> sieve</pre>"}, {"lang": "FreeBASIC", "loc": 39, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0</span><br/>\u00a0<br/><span class=\"kw1\">Sub</span> sieve<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span><br/>  <span class=\"kw1\">Dim</span> a<span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"kw1\">To</span> n<span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> n\u00a0: a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> = i\u00a0: <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> p = <span class=\"nu0\">2</span>, q<br/>  <span class=\"co1\">' mark non-prime numbers by setting the corresponding array element to 0</span><br/>  <span class=\"kw1\">Do</span><br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = p * p <span class=\"kw1\">To</span> n <span class=\"kw1\">Step</span> p<br/>      a<span class=\"br0\">(</span>j<span class=\"br0\">)</span> = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">Next</span> j<br/>    <span class=\"co1\">' look for next non-zero element in array after 'p'</span><br/>    q = <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">For</span> j <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = p + <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>      <span class=\"kw1\">If</span> a<span class=\"br0\">(</span>j<span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        q = j<br/>        <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>      <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span> j    <br/>    <span class=\"kw1\">If</span> q = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Do</span><br/>    p = q<br/>  <span class=\"kw1\">Loop</span><br/>\u00a0<br/>  <span class=\"co1\">' print the non-zero numbers remaining i.e. the primes</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> n<br/>    <span class=\"kw1\">If</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> &lt;&gt; <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>      <span class=\"kw1\">Print</span> <span class=\"kw1\">Using</span> <span class=\"st0\">\"####\"</span>; a<span class=\"br0\">(</span>i<span class=\"br0\">)</span>;      <br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Print</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Sub</span><br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"The primes up to 1000 are\u00a0:\"</span><br/><span class=\"kw1\">Print</span><br/>sieve<span class=\"br0\">(</span><span class=\"nu0\">1000</span><span class=\"br0\">)</span><br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "GAP", "loc": 25, "block": "<pre class=\"text highlighted_source\">Eratosthenes\u00a0:= function(n)<br/>    local a, i, j;<br/>    a\u00a0:= ListWithIdenticalEntries(n, true);<br/>    if n &lt; 2 then<br/>        return [];<br/>    else<br/>        for i in [2 .. n] do<br/>            if a[i] then<br/>                j\u00a0:= i*i;<br/>                if j &gt; n then<br/>                    return Filtered([2 .. n], i -&gt; a[i]);<br/>                else<br/>                    while j &lt;= n do<br/>                        a[j]\u00a0:= false;<br/>                        j\u00a0:= j + i;<br/>                    od;<br/>                fi;<br/>            fi;<br/>        od;<br/>    fi;<br/>end;<br/>\u00a0<br/>Eratosthenes(100);<br/>\u00a0<br/>[ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 ]</pre>"}, {"lang": "GLBasic", "loc": 25, "block": "<pre class=\"text highlighted_source\">// Sieve of Eratosthenes (find primes)<br/>// GLBasic implementation<br/>\u00a0<br/>\u00a0<br/>GLOBAL n%, k%, limit%, flags%[]<br/>\u00a0<br/>limit = 100\t\t\t// search primes up to this number<br/>\u00a0<br/>DIM flags[limit+1]\t\t// GLBasic arrays start at 0<br/>\u00a0<br/>FOR n = 2 TO SQR(limit)<br/>    IF flags[n] = 0<br/>        FOR k = n*n TO limit STEP n<br/>            flags[k] = 1<br/>        NEXT<br/>    ENDIF<br/>NEXT<br/>\u00a0<br/>// Display the primes<br/>FOR n = 2 TO limit<br/>    IF flags[n] = 0 THEN STDOUT n + \", \"<br/>NEXT<br/>\u00a0<br/>KEYWAIT<br/>\u00a0</pre>"}, {"lang": "FutureBasic", "loc": 21, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>begin globals<br/>dim dynamic gPrimes(1) as Boolean<br/>end globals<br/>\u00a0<br/>local fn SieveOfEratosthenes( n as long )<br/>dim as long i, j<br/>\u00a0<br/>for i = 2 to  n<br/>  for j = i * i to n step i <br/>    gPrimes(j) = _true<br/>  next<br/>  if gPrimes(i) = 0 then print i;<br/>next i<br/>kill gPrimes<br/>end fn<br/>\u00a0<br/>fn SieveOfEratosthenes( 100 )<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 42, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">const</span> limit <span class=\"sy2\">=</span> <span class=\"nu0\">201</span> <span class=\"co1\">// means sieve numbers &lt; 201</span><br/>\u00a0<br/>    <span class=\"co1\">// sieve</span><br/>    c <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> limit<span class=\"sy1\">)</span> <span class=\"co1\">// c for composite.  false means prime candidate</span><br/>    c<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span>              <span class=\"co1\">// 1 not considered prime</span><br/>    p <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        <span class=\"co1\">// first allowed optimization:  outer loop only goes to sqrt(limit)</span><br/>        p2 <span class=\"sy2\">:=</span> p <span class=\"sy3\">*</span> p<br/>        <span class=\"kw1\">if</span> p2 &gt;<span class=\"sy2\">=</span> limit <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// second allowed optimization:  inner loop starts at sqr(p)</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> p2<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; limit<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> <span class=\"sy2\">+=</span> p <span class=\"sy1\">{</span><br/>            c<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw2\">true</span> <span class=\"co1\">// it's a composite</span><br/>\u00a0<br/>        <span class=\"sy1\">}</span><br/>        <span class=\"co1\">// scan to get next prime for outer loop</span><br/>        <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>            p<span class=\"sy2\">++</span><br/>            <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>c<span class=\"sy1\">[</span>p<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// sieve complete.  now print a representation.</span><br/>    <span class=\"kw1\">for</span> n <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> n &lt; limit<span class=\"sy1\">;</span> n<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> c<span class=\"sy1\">[</span>n<span class=\"sy1\">]</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"  .\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%3d\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> n<span class=\"sy3\">%</span><span class=\"nu0\">20</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 11, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> sievePrimes <span class=\"sy0\">=</span> <span class=\"br0\">{</span> bound <span class=\"sy0\">-&gt;</span> <br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> isPrime  <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new\"><span class=\"kw2\">new</span></a> <a href=\"http://www.google.de/search?as_q=BitSet&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">BitSet</span></a><span class=\"br0\">(</span>bound<span class=\"br0\">)</span><br/>    isPrime<span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20false\"><span class=\"kw2\">false</span></a><br/>    isPrime<span class=\"br0\">[</span><span class=\"nu0\">2</span>..<span class=\"me1\">bound</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true\"><span class=\"kw2\">true</span></a><br/>    <span class=\"br0\">(</span><span class=\"nu0\">2</span>..<span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>bound<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each\"><span class=\"kw5\">each</span></a> <span class=\"br0\">{</span> pc <span class=\"sy0\">-&gt;</span><br/>        <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isPrime<span class=\"br0\">[</span>pc<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span>pc<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>..<span class=\"me1\">bound</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20step\"><span class=\"kw8\">step</span></a><span class=\"br0\">(</span>pc<span class=\"br0\">)</span> <span class=\"br0\">{</span> isPrime<span class=\"br0\">[</span>it<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20false\"><span class=\"kw2\">false</span></a> <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"me1\">bound</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20findAll\"><span class=\"kw5\">findAll</span></a> <span class=\"br0\">{</span> isPrime<span class=\"br0\">[</span>it<span class=\"br0\">]</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "GW-BASIC", "loc": 12, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"co3\">10</span>  <a href=\"http://www.qbasicnews.com/qboho/qckinput.shtml\"><span class=\"kw3\">INPUT</span></a> <span class=\"st0\">\"ENTER NUMBER TO SEARCH TO: \"</span>;LIMIT<br/><span class=\"co3\">20</span>  <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> FLAGS<span class=\"br0\">(</span>LIMIT<span class=\"br0\">)</span><br/><span class=\"co3\">30</span>  <span class=\"kw1\">FOR</span> N <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> <a href=\"http://www.qbasicnews.com/qboho/qcksqr.shtml\"><span class=\"kw3\">SQR</span></a> <span class=\"br0\">(</span>LIMIT<span class=\"br0\">)</span><br/><span class=\"co3\">40</span>  <span class=\"kw1\">IF</span> FLAGS<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">GOTO</span> <span class=\"nu0\">80</span><br/><span class=\"co3\">50</span>  <span class=\"kw1\">FOR</span> K <span class=\"sy0\">=</span> N <span class=\"sy0\">*</span> N <span class=\"kw1\">TO</span> LIMIT <span class=\"kw1\">STEP</span> N<br/><span class=\"co3\">60</span>  FLAGS<span class=\"br0\">(</span>K<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/><span class=\"co3\">70</span>  <span class=\"kw1\">NEXT</span> K<br/><span class=\"co3\">80</span>  <span class=\"kw1\">NEXT</span> N<br/><span class=\"co3\">90</span>  REM  DISPLAY THE PRIMES<br/><span class=\"co3\">100</span>  <span class=\"kw1\">FOR</span> N <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> LIMIT<br/><span class=\"co3\">110</span>  <span class=\"kw1\">IF</span> FLAGS<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> N;<span class=\"st0\">\", \"</span>;<br/><span class=\"co3\">120</span>  <span class=\"kw1\">NEXT</span> N</pre>"}, {"lang": "Haskell", "loc": 20, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a> <span class=\"br0\">(</span>forM<span class=\"sy0\">_,</span> when<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad\"><span class=\"kw4\">Monad</span></a><span class=\"sy0\">.</span>ST<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<span class=\"sy0\">.</span>ST<br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>Array<span class=\"sy0\">.</span>Unboxed<br/>\u00a0<br/>sieveUO <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> UArray <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool\"><span class=\"kw4\">Bool</span></a><br/>sieveUO top <span class=\"sy0\">=</span> runSTUArray <span class=\"sy0\">$</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> m <span class=\"sy0\">=</span> <span class=\"br0\">(</span>top<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><br/>        r <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:floor\"><span class=\"kw3\">floor</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> top <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    sieve <span class=\"sy0\">&lt;-</span> newArray <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span>m<span class=\"br0\">)</span> True          <span class=\"co1\">--\u00a0:: ST s (STUArray s Int Bool)</span><br/>    forM<span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>r `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:div\"><span class=\"kw3\">div</span></a>` <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy0\">$</span> \\i <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span>       <span class=\"co1\">-- prime(i) = 2i+1</span><br/>      isPrime <span class=\"sy0\">&lt;-</span> readArray sieve i        <span class=\"co1\">-- ((2i+1)^2-1)`div`2 = 2i(i+1)</span><br/>      when isPrime <span class=\"sy0\">$</span> <span class=\"kw1\">do</span>                   <br/>        forM<span class=\"sy0\">_</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>i<span class=\"sy0\">*</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span>i<span class=\"sy0\">*</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span>m<span class=\"br0\">]</span> <span class=\"sy0\">$</span> \\j <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span><br/>          writeArray sieve j False<br/>    <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> sieve<br/>\u00a0<br/>primesToUO <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><br/>primesToUO top <span class=\"sy0\">|</span> top <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span>   <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>\u00a0: <span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">|</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>True<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> assocs <span class=\"sy0\">$</span> sieveUO top<span class=\"br0\">]</span><br/>               <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span></pre>"}, {"lang": "HicEst", "loc": 14, "block": "<pre class=\"hicest highlighted_source\"><span class=\"kw1\">REAL</span> <span class=\"sy1\">::</span> N<span class=\"sy1\">=</span><span class=\"nu0\">100</span><span class=\"sy1\">,</span>  sieve<span class=\"br0\">(</span>N<span class=\"br0\">)</span><br/>\u00a0<br/>sieve <span class=\"sy1\">=</span> <span class=\"sy2\">$</span> <span class=\"sy1\">&gt;</span> <span class=\"nu0\">1</span>     <span class=\"co1\">! = 0 1 1 1 1 ...</span><br/><span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> N<span class=\"sy1\">^</span><span class=\"nu0\">0.5</span><br/>  <span class=\"kw1\">IF</span><span class=\"br0\">(</span> sieve<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>     <span class=\"kw1\">DO</span> j <span class=\"sy1\">=</span> i<span class=\"sy1\">^</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> N<span class=\"sy1\">,</span> i<br/>       sieve<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>     <span class=\"kw1\">ENDDO</span><br/>  <span class=\"kw1\">ENDIF</span><br/><span class=\"kw1\">ENDDO</span><br/>\u00a0<br/><span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> N<br/>  <span class=\"kw1\">IF</span><span class=\"br0\">(</span> sieve<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span><span class=\"br0\">)</span> i<br/><span class=\"kw1\">ENDDO</span> </pre>"}, {"lang": "Icon and Unicon", "loc": 11, "block": "<pre class=\"icon highlighted_source\"> <span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    sieve<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><br/> <span class=\"kw1\">end</span><br/>\u00a0<br/> <span class=\"kw1\">procedure</span> sieve<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw2\">local</span> p<span class=\"sy1\">,</span>i<span class=\"sy1\">,</span>j<br/>    p<span class=\"sy1\">:=</span><span class=\"kw4\">list</span><span class=\"br0\">(</span>n<span class=\"sy1\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> i<span class=\"sy1\">:=</span><span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> j<span class=\"sy1\">:=</span> i<span class=\"sy1\">+</span>i <span class=\"kw1\">to</span> n by i <span class=\"sy1\">&amp;</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">==</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">do</span> p<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span>i<span class=\"sy1\">:=</span><span class=\"nu0\">2</span> <span class=\"kw1\">to</span> n <span class=\"sy1\">&amp;</span> p<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">&amp;</span> i<span class=\"br0\">)</span><br/> <span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">   <span class=\"nu0\">10</span>|<span class=\"nu0\">13</span><br/><span class=\"nu0\">3</span></pre>"}, {"lang": "Java", "loc": 22, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.LinkedList</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> Sieve<span class=\"br0\">{</span><br/>       <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/LinkedList.html\"><span class=\"kw46\">LinkedList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> sieve<span class=\"br0\">(</span><span class=\"kw3\">int</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>               <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw2\">return</span> <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/LinkedList.html\"><span class=\"kw46\">LinkedList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>               <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/LinkedList.html\"><span class=\"kw46\">LinkedList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> primes = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/LinkedList.html\"><span class=\"kw46\">LinkedList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>               <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/LinkedList.html\"><span class=\"kw46\">LinkedList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> nums = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/LinkedList.html\"><span class=\"kw46\">LinkedList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>               <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = <span class=\"nu0\">2</span><span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span>= n<span class=\"sy0\">;</span>i++<span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"co1\">//unoptimized</span><br/>                       nums.<span class=\"me1\">add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>               <span class=\"br0\">}</span><br/>\u00a0<br/>               <span class=\"kw1\">while</span><span class=\"br0\">(</span>nums.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                       <span class=\"kw3\">int</span> nextPrime = nums.<span class=\"me1\">remove</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                       <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw3\">int</span> i = nextPrime <span class=\"sy0\">*</span> nextPrime<span class=\"sy0\">;</span>i <span class=\"sy0\">&lt;</span>= n<span class=\"sy0\">;</span>i += nextPrime<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                               nums.<span class=\"me1\">removeFirstOccurrence</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                       <span class=\"br0\">}</span><br/>                       primes.<span class=\"me1\">add</span><span class=\"br0\">(</span>nextPrime<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>               <span class=\"br0\">}</span><br/>               <span class=\"kw2\">return</span> primes<span class=\"sy0\">;</span><br/>       <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 27, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> eratosthenes<span class=\"br0\">(</span>limit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> primes <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>limit <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> sqrtlmt <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>limit<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> nums <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">Array</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// start with an empty Array...</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> limit<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"co1\">// and</span><br/>            nums.<span class=\"me1\">push</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">// only initialize the Array once...</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> sqrtlmt<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> p <span class=\"sy0\">=</span> nums<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>                <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> j <span class=\"sy0\">=</span> p <span class=\"sy0\">*</span> p <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> nums.<span class=\"me1\">length</span><span class=\"sy0\">;</span> j <span class=\"sy0\">+=</span> p<span class=\"br0\">)</span><br/>                    nums<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> nums.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">var</span> p <span class=\"sy0\">=</span> nums<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>                primes.<span class=\"me1\">push</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> primes<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">var</span> primes <span class=\"sy0\">=</span> eratosthenes<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">typeof</span> print <span class=\"sy0\">==</span> <span class=\"st0\">\"undefined\"</span><span class=\"br0\">)</span><br/>    print <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">typeof</span> WScript <span class=\"sy0\">!=</span> <span class=\"st0\">\"undefined\"</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> WScript.<span class=\"me1\">Echo</span> <span class=\"sy0\">:</span> alert<span class=\"sy0\">;</span><br/>print<span class=\"br0\">(</span>primes<span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "JOVIAL", "loc": 55, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>START<br/>FILE MYOUTPUT ... $ ''Insufficient information to complete this declaration''<br/>PROC SIEVEE $<br/>    '' define the sieve data structure ''<br/>    ARRAY CANDIDATES 1000 B $<br/>    FOR I =0,1,999 $<br/>    BEGIN<br/>        '' everything is potentially prime until proven otherwise ''<br/>        CANDIDATES($I$) = 1$<br/>    END<br/>    '' Neither 1 nor 0 is prime, so flag them off ''<br/>    CANDIDATES($0$) = 0$<br/>    CANDIDATES($1$) = 0$<br/>    '' start the sieve with the integer 0 ''<br/>    FOR I = 0$<br/>    BEGIN<br/>        IF I GE 1000$<br/>        GOTO DONE$<br/>        '' advance to the next un-crossed out number. ''<br/>        '' this number must be a prime ''<br/>NEXTI.  IF I LS 1000 AND Candidates($I$) EQ 0 $<br/>        BEGIN<br/>            I = I + 1 $<br/>            GOTO NEXTI $<br/>        END<br/>        '' insure against running off the end of the data structure ''<br/>        IF I LT 1000 $<br/>        BEGIN<br/>            '' cross out all multiples of the prime, starting with 2*p. ''<br/>            FOR J=2 $<br/>            FOR K=0 $<br/>            BEGIN<br/>                K = J * I $<br/>                IF K GT 999 $<br/>                GOTO ADV $<br/>                CANDIDATES($K$) = 0 $<br/>                J = J + 1 $<br/>            END<br/>            '' advance to the next candidate ''<br/>ADV.        I = I + 1 $<br/>        END<br/>    END<br/>    '' all uncrossed-out numbers are prime (and only those numbers) ''<br/>    '' print all primes ''<br/>DONE. OPEN OUTPUT MYOUTPUT $<br/>    FOR I=0,1,999$<br/>    BEGIN<br/>        IF CANDIDATES($I$) NQ 0$<br/>        BEGIN<br/>            OUTPUT MYOUTPUT I $<br/>        END<br/>    END<br/>TERM$ <br/>\u00a0</pre>"}, {"lang": "jq", "loc": 15, "block": "<pre class=\"text highlighted_source\"># Denoting the input by $n, which is assumed to be a positive integer,<br/># eratosthenes/0 produces an array of primes less than or equal to $n:<br/>def eratosthenes:<br/>\u00a0<br/>  # erase(i) sets .[i*j] to false for integral j &gt; 1<br/>  def erase(i):<br/>    if .[i] then reduce range(2; (1 + length) / i) as $j (.; .[i * $j] = false)<br/>    else .<br/>    end;<br/>\u00a0<br/>  (. + 1) as $n<br/>  | (($n|sqrt) / 2) as $s<br/>  | [null, null, range(2; $n)]<br/>  | reduce (2, 1 + (2 * range(1; $s))) as $i (.; erase($i))<br/>  | map(select(.));</pre>"}, {"lang": "Julia", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Returns an array of positive prime numbers less than or equal to lim<br/>function sieve(lim\u00a0:: Int)<br/>    is_prime\u00a0:: Array = trues(lim)<br/>    llim\u00a0:: Int = isqrt(lim)<br/>    result\u00a0:: Array = [2]  #Initial array<br/>    for i = 3:2:lim<br/>        if is_prime[i]<br/>            if i &lt;= llim<br/>                for j = i*i:2*i:lim<br/>                    is_prime[j] = false<br/>                end<br/>            end<br/>            push!(result,i)<br/>        end<br/>    end<br/>    return result<br/>end<br/>\u00a0</pre>"}, {"lang": "Kotlin", "loc": 30, "block": "<pre class=\"scala highlighted_source\">fun sieve<span class=\"br0\">(</span>limit<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> primes <span class=\"sy0\">=</span> mutableListOf<span class=\"sy0\">&lt;</span>Int<span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>limit <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> numbers <span class=\"sy0\">=</span> Array<span class=\"br0\">(</span>limit + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a> <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sqrtLimit <span class=\"sy0\">=</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>limit.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>factor in <span class=\"nu0\">2</span>..<span class=\"me1\">sqrtLimit</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>numbers<span class=\"br0\">[</span>factor<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>multiple in <span class=\"br0\">(</span>factor <span class=\"sy0\">*</span> factor<span class=\"br0\">)</span>..<span class=\"me1\">limit</span> step factor<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    numbers<span class=\"br0\">[</span>multiple<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        numbers.<span class=\"me1\">forEachIndexed</span> <span class=\"br0\">{</span> number, isPrime -<span class=\"sy0\">&gt;</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>number <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isPrime<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    primes.<span class=\"me1\">add</span><span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> primes<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    println<span class=\"br0\">(</span>sieve<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 25, "block": "<pre class=\"lb highlighted_source\">    <span class=\"co1\">'Notice that arrays are globally visible to functions.</span><br/>    <span class=\"co1\">'The sieve() function uses the flags() array.</span><br/>    <span class=\"co1\">'This is a Sieve benchmark adapted from BYTE 1985</span><br/>    <span class=\"co1\">' May, page 286</span><br/>\u00a0<br/>    size <span class=\"sy0\">=</span> <span class=\"nu0\">7000</span><br/>    <span class=\"kw1\">dim</span> flags<span class=\"br0\">(</span><span class=\"nu0\">7001</span><span class=\"br0\">)</span><br/>    start <span class=\"sy0\">=</span> <span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span> sieve<span class=\"br0\">(</span>size<span class=\"br0\">)</span>; <span class=\"st0\">\" primes found.\"</span><br/>    <span class=\"kw1\">print</span> <span class=\"st0\">\"End of iteration.  Elapsed time in milliseconds: \"</span>; <span class=\"kw2\">time$</span><span class=\"br0\">(</span><span class=\"st0\">\"ms\"</span><span class=\"br0\">)</span><span class=\"sy0\">-</span>start<br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> sieve<span class=\"br0\">(</span>size<span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> size<br/>            <span class=\"kw1\">if</span> flags<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>                prime <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">3</span><br/>                k <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> prime<br/>                <span class=\"kw1\">while</span> k <span class=\"sy0\">&lt;=</span> size<br/>                    flags<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>                    k <span class=\"sy0\">=</span> k <span class=\"sy0\">+</span> prime<br/>                <span class=\"kw1\">wend</span><br/>                sieve <span class=\"sy0\">=</span> sieve <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">next</span> i<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "Limbo", "loc": 41, "block": "<pre class=\"go highlighted_source\">implement Sieve<span class=\"sy1\">;</span><br/>\u00a0<br/>include <span class=\"st0\">\"sys.m\"</span><span class=\"sy1\">;</span><br/>\tsys<span class=\"sy1\">:</span> Sys<span class=\"sy1\">;</span><br/>\t<span class=\"kw3\">print</span><span class=\"sy1\">:</span> <span class=\"kw1\">import</span> sys<span class=\"sy1\">;</span><br/>include <span class=\"st0\">\"draw.m\"</span><span class=\"sy1\">;</span><br/>\tdraw<span class=\"sy1\">:</span> Draw<span class=\"sy1\">;</span><br/>\u00a0<br/>Sieve <span class=\"sy1\">:</span> module<br/><span class=\"sy1\">{</span><br/>\tinit <span class=\"sy1\">:</span> fn<span class=\"sy1\">(</span>ctxt <span class=\"sy1\">:</span> ref Draw<span class=\"sy3\">-</span>&gt;Context<span class=\"sy1\">,</span> args <span class=\"sy1\">:</span> list of <span class=\"kw4\">string</span><span class=\"sy1\">);</span><br/><span class=\"sy1\">};</span><br/>\u00a0<br/>init <span class=\"sy1\">(</span>ctxt<span class=\"sy1\">:</span> ref Draw<span class=\"sy3\">-</span>&gt;Context<span class=\"sy1\">,</span> args<span class=\"sy1\">:</span> list of <span class=\"kw4\">string</span><span class=\"sy1\">)</span><br/><span class=\"sy1\">{</span><br/>\tsys <span class=\"sy2\">=</span> load Sys Sys<span class=\"sy3\">-</span>&gt;PATH<span class=\"sy1\">;</span><br/>\u00a0<br/>\tlimit <span class=\"sy2\">:=</span> <span class=\"nu0\">201</span><span class=\"sy1\">;</span><br/>\tsieve <span class=\"sy1\">:</span> array of <span class=\"kw4\">int</span><span class=\"sy1\">;</span><br/>\tsieve <span class=\"sy2\">=</span> array <span class=\"sy1\">[</span><span class=\"nu0\">201</span><span class=\"sy1\">]</span> of <span class=\"sy1\">{</span><span class=\"sy3\">*</span> <span class=\"sy2\">=</span>&gt; <span class=\"nu0\">1</span><span class=\"sy1\">};</span><br/>\t<span class=\"sy1\">(</span>sieve<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">],</span> sieve<span class=\"sy1\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">])</span> <span class=\"sy2\">=</span> <span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span><span class=\"sy1\">);</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"sy1\">(</span>n <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> n &lt; limit<span class=\"sy1\">;</span> n<span class=\"sy2\">++</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"sy1\">(</span>sieve<span class=\"sy1\">[</span>n<span class=\"sy1\">])</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"sy1\">(</span><span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> n<span class=\"sy3\">*</span>n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; limit<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> <span class=\"sy2\">+=</span> n<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\t\t\tsieve<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>\t\t\t<span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"sy1\">(</span>n <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> n &lt; limit<span class=\"sy1\">;</span> n<span class=\"sy2\">++</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"sy1\">(</span>sieve<span class=\"sy1\">[</span>n<span class=\"sy1\">])</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw3\">print</span> <span class=\"sy1\">(</span><span class=\"st0\">\"%4d\"</span><span class=\"sy1\">,</span> n<span class=\"sy1\">);</span><br/>\t\t<span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw3\">print</span><span class=\"sy1\">(</span><span class=\"st0\">\"   .\"</span><span class=\"sy1\">);</span><br/>\t\t<span class=\"sy1\">};</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"sy1\">((</span>n<span class=\"sy3\">%</span><span class=\"nu0\">20</span><span class=\"sy1\">)</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">)</span> <br/>\t\t\t<span class=\"kw3\">print</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">);</span><br/>\t<span class=\"sy1\">}</span>\t<br/><span class=\"sy1\">}</span><br/>\u00a0</pre>"}, {"lang": "Lingo", "loc": 41, "block": "<pre class=\"text highlighted_source\">-- parent script \"sieve\"<br/>property _sieve<br/>\u00a0<br/>----------------------------------------<br/>-- @constructor<br/>----------------------------------------<br/>on new (me)<br/>    me._sieve = []<br/>    return me<br/>end<br/>\u00a0<br/>----------------------------------------<br/>-- Returns list of primes &lt;= n<br/>----------------------------------------<br/>on getPrimes (me, limit)<br/>    if me._sieve.count&lt;limit then me._primeSieve(limit)<br/>    primes = []<br/>    repeat with i = 2 to limit<br/>        if me._sieve[i] then primes.add(i)<br/>    end repeat<br/>    return primes<br/>end<br/>\u00a0<br/>----------------------------------------<br/>-- Sieve of Eratosthenes<br/>----------------------------------------<br/>on _primeSieve (me, limit)<br/>    me._sieve = [0]<br/>    repeat with i = 2 to limit<br/>        me._sieve[i] = 1<br/>    end repeat<br/>    c = sqrt(limit)<br/>    repeat with i = 2 to c<br/>        if (me._sieve[i]=0) then next repeat<br/>        j = i*i -- start with square<br/>        repeat while (j&lt;=limit)<br/>            me._sieve[j] = 0<br/>            j = j + i<br/>        end repeat<br/>    end repeat<br/>end</pre>"}, {"lang": "LiveCode", "loc": 22, "block": "<pre class=\"text highlighted_source\">function sieveE int<br/>    set itemdel to comma<br/>    local sieve<br/>    repeat with i = 2 to int<br/>        put i into sieve[i]<br/>    end repeat<br/>    put 2 into n<br/>    repeat while n &lt; int<br/>        repeat with p = n to int step n<br/>            if p = n then <br/>                next repeat<br/>            else<br/>                put empty into sieve[p]<br/>            end if<br/>        end repeat<br/>        add 1 to n<br/>    end repeat<br/>    combine sieve with comma<br/>    filter items of sieve without empty<br/>    sort items of sieve ascending numeric<br/>    return sieve<br/>end sieveE</pre>"}, {"lang": "Logo", "loc": 1, "block": "<pre>to sieve\u00a0:limit\n  make \"a (array\u00a0:limit 2)    \u00a0; initialized to empty lists\n  make \"p []\n  for [i 2\u00a0:limit] [\n    if empty? item\u00a0:i\u00a0:a [\n      queue \"p\u00a0:i\n      for [j [:i *\u00a0:i]\u00a0:limit\u00a0:i] [setitem\u00a0:j\u00a0:a\u00a0:i]\n    ]\n  ]\n  output\u00a0:p\nend\nprint sieve 100  \u00a0; 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n</pre>"}, {"lang": "Logtalk", "loc": 1, "block": "<pre>due to the use of mod (modulo = division) in the filter function.\n</pre>"}, {"lang": "Lua", "loc": 10, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> erato<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"br0\">{</span><span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">local</span> t <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"co1\">-- clears '1'</span><br/>  <span class=\"kw1\">local</span> sqrtlmt <span class=\"sy0\">=</span> <span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> n <span class=\"kw1\">do</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> sqrtlmt <span class=\"kw1\">do</span> <span class=\"kw1\">if</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">~=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> i<span class=\"sy0\">*</span>i<span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> i <span class=\"kw1\">do</span> t<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">end</span> <span class=\"kw1\">end</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">local</span> primes <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> n <span class=\"kw1\">do</span> <span class=\"kw1\">if</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">~=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>primes<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"kw1\">end</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> primes<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Lucid", "loc": 1, "block": "<pre>prime\n where\n    prime = 2 fby (n whenever isprime(n));\n    n = 3 fby n+2;\n    isprime(n) = not(divs) asa divs or prime*prime &gt; N\n                    where\n                      N is current n;\n                      divs = N mod prime eq 0;\n                    end;\n end\n</pre>"}, {"lang": "M2000 Interpreter", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>Module EratosthenesSieve (x) {<br/>      \\\\ \u039a\u03cc\u03c3\u03ba\u03b9\u03bd\u03bf \u03c4\u03bf\u03c5 \u0395\u03c1\u03b1\u03c4\u03bf\u03c3\u03b8\u03ad\u03bd\u03b7<br/>      If x&gt;200000 Then Exit<br/>      Dim i(x+1)<br/>      k=2<br/>      k2=x div 2<br/>      While k&lt;=k2 {<br/>            m=k+k<br/>            While m&lt;=x {<br/>                  i(m)=1<br/>                  m+=k<br/>            }<br/>            k++<br/>      }<br/>      For i=2 to x {<br/>      If i(i)=0 Then Print i,<br/>      }<br/>      Print<br/>}<br/>EratosthenesSieve 1000<br/>\u00a0</pre>"}, {"lang": "M4", "loc": 12, "block": "<pre class=\"text highlighted_source\">define(`lim',100)dnl<br/>define(`for',<br/>   `ifelse($#,0,<br/>      ``$0'',<br/>      `ifelse(eval($2&lt;=$3),1,<br/>         `pushdef(`$1',$2)$5`'popdef(`$1')$0(`$1',eval($2+$4),$3,$4,`$5')')')')dnl<br/>for(`j',2,lim,1,<br/>   `ifdef(a[j],<br/>      `',<br/>      `j for(`k',eval(j*j),lim,j,<br/>         `define(a[k],1)')')')<br/>\u00a0</pre>"}, {"lang": "Mathematica", "loc": 6, "block": "<pre class=\"text highlighted_source\">Eratosthenes[n_]\u00a0:= Module[{numbers = Range[n]},<br/>  Do[If[numbers[[i]]\u00a0!= 0, Do[numbers[[i j]] = 0, {j, 2, n/i}]], {i, <br/>    2, Sqrt[n]}];<br/>  Select[numbers, # &gt; 1 &amp;]]<br/>\u00a0<br/>Eratosthenes[100]</pre>"}, {"lang": "MATLAB", "loc": 13, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> P = erato<span class=\"br0\">(</span>x<span class=\"br0\">)</span>        <span class=\"co1\">% Sieve of Eratosthenes: returns all primes between 2 and x</span><br/>\u00a0<br/>    P = <span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"nu0\">2</span>:x<span class=\"br0\">]</span>;             <span class=\"co1\">% Create vector with all ints between 2 and x where</span><br/>                             <span class=\"co1\">%   position 1 is hard-coded as 0 since 1 is not a prime.</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> n = <span class=\"nu0\">2</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sqrt.html\"><span class=\"kw2\">sqrt</span></a><span class=\"br0\">(</span>x<span class=\"br0\">)</span>        <span class=\"co1\">% All primes factors lie between 2 and sqrt(x).</span><br/>       <span class=\"kw1\">if</span> P<span class=\"br0\">(</span>n<span class=\"br0\">)</span>               <span class=\"co1\">% If the current value is not 0 (i.e. a prime),</span><br/>          P<span class=\"br0\">(</span>n*n:n:x<span class=\"br0\">)</span> = <span class=\"nu0\">0</span>;    <span class=\"co1\">% then replace all further multiples of it with 0.</span><br/>       <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span>                      <span class=\"co1\">% At this point P is a vector with only primes and zeroes.</span><br/>\u00a0<br/>    P = P<span class=\"br0\">(</span>P ~= <span class=\"nu0\">0</span><span class=\"br0\">)</span>;           <span class=\"co1\">% Remove all zeroes from P, leaving only the primes.</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maxima", "loc": 10, "block": "<pre class=\"text highlighted_source\">sieve(n):=block(<br/>   [a:makelist(true,n),i:1,j],<br/>   a[1]:false,<br/>   do (<br/>      i:i+1,<br/>      unless a[i] do i:i+1,<br/>      if i*i&gt;n then return(sublist_indices(a,identity)),<br/>      for j from i*i step i while j&lt;=n do a[j]:false<br/>   )<br/>)$</pre>"}, {"lang": "MAXScript", "loc": 1, "block": "<pre>fn eratosthenes n =\n(\n    multiples = #()\n    print 2\n    for i in 3 to n do\n    (\n        if (findItem multiples i) == 0 then\n        (\n            print i\n            for j in (i * i) to n by i do\n            (\n                append multiples j\n            )\n        )\n    )\n)\n\neratosthenes 100\n</pre>"}, {"lang": "Microsoft Small Basic", "loc": 24, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>TextWindow.Write(\"Enter number to search to: \")<br/>limit = TextWindow.ReadNumber()<br/>For n = 2 To limit <br/>  flags[n] = 0<br/>EndFor<br/>For n = 2 To math.SquareRoot(limit)<br/>  If flags[n] = 0 Then<br/>    For K = n * n To limit Step n<br/>      flags[K] = 1<br/>    EndFor<br/>  EndIf<br/>EndFor<br/>' Display the primes<br/>If limit &gt;= 2 Then<br/>  TextWindow.Write(2)<br/>  For n = 3 To limit<br/>    If flags[n] = 0 Then <br/>      TextWindow.Write(\", \" + n)<br/>    EndIf  <br/>  EndFor<br/>  TextWindow.WriteLine(\"\")<br/>EndIf<br/>\u00a0</pre>"}, {"lang": "Modula-3", "loc": 27, "block": "<pre class=\"modula3 highlighted_source\"><span class=\"kw1\">MODULE</span> Prime <span class=\"kw1\">EXPORTS</span> Main;<br/>\u00a0<br/><span class=\"kw1\">IMPORT</span> IO;<br/>\u00a0<br/><span class=\"kw1\">CONST</span> LastNum <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span>;<br/>\u00a0<br/><span class=\"kw1\">VAR</span> a<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span>..<span class=\"me1\">LastNum</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">BOOLEAN</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"kw3\">FIRST</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LAST</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>    a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">TRUE</span>;<br/>  <span class=\"kw1\">END</span>;<br/>\u00a0<br/>  <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"kw3\">FIRST</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LAST</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>    <span class=\"kw1\">IF</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">THEN</span><br/>      IO.<span class=\"me1\">PutInt</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>;<br/>      IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">FOR</span> j <span class=\"sy0\">:=</span> <span class=\"kw3\">FIRST</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">TO</span> <span class=\"kw3\">LAST</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw1\">DO</span><br/>        <span class=\"kw1\">IF</span> j <span class=\"kw1\">MOD</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>          a<span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">FALSE</span>;<br/>        <span class=\"kw1\">END</span>;<br/>      <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">END</span>;<br/>  <span class=\"kw1\">END</span>;<br/>  IO.<span class=\"me1\">Put</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">END</span> Prime.</pre>"}, {"lang": "MUMPS", "loc": 10, "block": "<pre class=\"text highlighted_source\">ERATO1(HI)<br/>\u00a0;performs the Sieve of Erotosethenes up to the number passed in.<br/>\u00a0;This version sets an array containing the primes<br/> SET HI=HI\\1<br/> KILL ERATO1\u00a0;Don't make it new - we want it to remain after we quit the function<br/> NEW I,J,P<br/> FOR I=2:1:(HI**.5)\\1 FOR J=I*I:I:HI SET P(J)=1<br/> FOR I=2:1:HI S:'$DATA(P(I)) ERATO1(I)=I<br/> KILL I,J,P<br/> QUIT</pre>"}, {"lang": "NetRexx", "loc": 57, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>\u00a0<br/><span class=\"kw1\">options</span> replace <span class=\"kw6\">format</span> comments java crossref savelog symbols binary<br/>\u00a0<br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> loWatermark hiWatermark <span class=\"sy0\">.</span><br/><span class=\"kw1\">if</span> loWatermark = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> loWatermark = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> loWatermark = <span class=\"nu0\">1</span><br/><span class=\"kw1\">if</span> hiWatermark = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> hiWatermark = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> hiWatermark = <span class=\"nu0\">200</span><br/>\u00a0<br/><span class=\"kw1\">do</span><br/>  <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>loWatermark<span class=\"sy0\">.</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span><span class=\"st0\">'w'</span><span class=\"br0\">)</span> <span class=\"sy0\">|</span> <span class=\"sy0\">\\</span>hiWatermark<span class=\"sy0\">.</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span><span class=\"st0\">'w'</span><span class=\"br0\">)</span> <span class=\"kw3\">then</span> -<br/>    <span class=\"kw1\">signal</span> NumberFormatException<span class=\"br0\">(</span><span class=\"st0\">'arguments must be whole numbers'</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> loWatermark <span class=\"sy0\">&gt;</span> hiWatermark <span class=\"kw3\">then</span> -<br/>    <span class=\"kw1\">signal</span> IllegalArgumentException<span class=\"br0\">(</span><span class=\"st0\">'the start value must be less than the end value'</span><span class=\"br0\">)</span><br/>\u00a0<br/>  seive = sieveOfEratosthenes<span class=\"br0\">(</span>hiWatermark<span class=\"br0\">)</span><br/>  primes = getPrimes<span class=\"br0\">(</span>seive, loWatermark, hiWatermark<span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw6\">strip</span><br/>\u00a0<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'List of prime numbers from'</span> loWatermark <span class=\"st0\">'to'</span> hiWatermark <span class=\"st0\">'via a \"Sieve of Eratosthenes\" algorithm:'</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'  '</span>primes<span class=\"sy0\">.</span><span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>, <span class=\"st0\">','</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'  Count of primes:'</span> primes<span class=\"sy0\">.</span><span class=\"kw6\">words</span><br/>catch ex = Exception<br/>  ex<span class=\"sy0\">.</span>printStackTrace<br/><span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/>method sieveOfEratosthenes<span class=\"br0\">(</span>hn = long<span class=\"br0\">)</span> public static binary returns Rexx<br/>\u00a0<br/>  sv = Rexx<span class=\"br0\">(</span>isTrue<span class=\"br0\">)</span><br/>  sv<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = isFalse<br/>  ix = long<br/>  jx = long<br/>\u00a0<br/>  <span class=\"kw1\">loop</span> ix = <span class=\"nu0\">2</span> <span class=\"kw2\">while</span> ix <span class=\"sy0\">*</span> ix <span class=\"sy0\">&lt;</span>= hn<br/>    <span class=\"kw1\">if</span> sv<span class=\"br0\">[</span>ix<span class=\"br0\">]</span> <span class=\"kw3\">then</span> <span class=\"kw1\">loop</span> jx = ix <span class=\"sy0\">*</span> ix <span class=\"kw2\">by</span> ix <span class=\"kw2\">while</span> jx <span class=\"sy0\">&lt;</span>= hn<br/>      sv<span class=\"br0\">[</span>jx<span class=\"br0\">]</span> = isFalse<br/>      <span class=\"kw3\">end</span> jx<br/>    <span class=\"kw3\">end</span> ix<br/>\u00a0<br/>  <span class=\"kw1\">return</span> sv<br/>\u00a0<br/>method getPrimes<span class=\"br0\">(</span>seive = Rexx, lo = long, hi = long<span class=\"br0\">)</span> private <span class=\"kw1\">constant</span> binary returns Rexx<br/>\u00a0<br/>  primes = Rexx<span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">loop</span> p_ = lo <span class=\"kw2\">to</span> hi<br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>seive<span class=\"br0\">[</span>p_<span class=\"br0\">]</span> <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> p_<br/>    primes = primes p_<br/>    <span class=\"kw3\">end</span> p_<br/>\u00a0<br/>  <span class=\"kw1\">return</span> primes<br/>\u00a0<br/>method isTrue public <span class=\"kw1\">constant</span> binary returns boolean<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> == <span class=\"nu0\">1</span><br/>\u00a0<br/>method isFalse public <span class=\"kw1\">constant</span> binary returns boolean<br/>  <span class=\"kw1\">return</span> <span class=\"sy0\">\\</span>isTrue<br/>\u00a0</pre>"}, {"lang": "Nial", "loc": 1, "block": "<pre>primes is sublist [ each (2 = sum eachright (0 = mod) [pass,count]), pass ] rest count\n</pre>"}, {"lang": "Nim", "loc": 24, "block": "<pre class=\"text highlighted_source\">from math import sqrt<br/>\u00a0<br/>iterator primesUpto(limit: int): int =<br/>  let sqrtLimit = int(sqrt(float64(limit)))<br/>  var composites = newSeq[bool](limit + 1)<br/>  composites[0] = true<br/>  composites[1] = true<br/>  for n in 2 .. sqrtLimit: # cull to square root of limit<br/>    if not composites[n]: # if prime -&gt; cull its composites<br/>      for i in countup(n *% n, limit + 1, n): # start at ``n`` squared<br/>        composites[i] = true<br/>  for n in 2 .. limit: # separate iteration over results<br/>    if not composites[n]:<br/>      yield n<br/>\u00a0<br/>echo(\"Primes are:\")<br/>for x in primesUpto(100):<br/>   write(stdout, x, \" \")<br/>echo \"\"<br/>\u00a0<br/>var count = 0<br/>for p in primesUpto(1000000):<br/>  count += 1<br/>echo \"There are \", count, \" primes up to 1000000.\"</pre>"}, {"lang": "Niue", "loc": 21, "block": "<pre class=\"text highlighted_source\">[ dup 2 &lt; ] '&lt;2\u00a0;<br/>[ 1 + 'count\u00a0; [ &lt;2 [ , ] when ] count times ] 'fill-stack\u00a0;<br/>\u00a0<br/>0 'n\u00a0; 0 'v\u00a0;<br/>\u00a0<br/>[ .clr 0 'n\u00a0; 0 'v\u00a0; ] 'reset\u00a0;<br/>[ len 1 - n - at 'v\u00a0; ] 'set-base\u00a0;<br/>[ n 1 + 'n\u00a0; ] 'incr-n\u00a0;<br/>[ mod 0 = ] 'is-factor\u00a0;<br/>[ dup * ] 'sqr\u00a0;<br/>\u00a0<br/>[ set-base<br/>  v sqr 2 at &gt; not <br/>  [ [ dup v = not swap v is-factor and ] remove-if incr-n run ] when ] 'run\u00a0;<br/>\u00a0<br/>[ fill-stack run ] 'sieve\u00a0;<br/>\u00a0<br/>( tests )<br/>\u00a0<br/>10 sieve .s ( =&gt; 2 3 5 7 9 ) reset newline<br/>30 sieve .s ( =&gt; 2 3 5 7 11 13 17 19 23 29 ) </pre>"}, {"lang": "Oberon-2", "loc": 34, "block": "<pre class=\"oberon2 highlighted_source\"><span class=\"kw1\">MODULE</span> Primes;<br/>\u00a0<br/>   <span class=\"kw1\">IMPORT</span> Out<span class=\"sy0\">,</span> Math;<br/>\u00a0<br/>   <span class=\"kw1\">CONST</span> N <span class=\"sy0\">=</span> <span class=\"nu0\">1000</span>;<br/>\u00a0<br/>   <span class=\"kw1\">VAR</span> a<span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span> N <span class=\"kw1\">OF</span> <span class=\"kw4\">BOOLEAN</span>;<br/>      i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> m<span class=\"sy0\">:</span> <span class=\"kw4\">INTEGER</span>;<br/>\u00a0<br/><span class=\"kw1\">BEGIN</span><br/>   <span class=\"coMULTI\">(* Set all elements of a to TRUE. *)</span><br/>   <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> N <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>      a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">TRUE</span>;<br/>   <span class=\"kw1\">END</span>;<br/>\u00a0<br/>   <span class=\"coMULTI\">(* Compute square root of N and convert back to INTEGER. *)</span><br/>   m <span class=\"sy0\">:=</span> <span class=\"kw3\">ENTIER</span><span class=\"br0\">(</span>Math.<span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> m <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">IF</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">THEN</span><br/>         <span class=\"kw1\">FOR</span> j <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> <span class=\"br0\">(</span>N <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">DIV</span> i <span class=\"kw1\">DO</span> <br/>            a<span class=\"br0\">[</span>i<span class=\"sy0\">*</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> <span class=\"kw2\">FALSE</span>;<br/>         <span class=\"kw1\">END</span>;<br/>      <span class=\"kw1\">END</span>;<br/>   <span class=\"kw1\">END</span>;<br/>\u00a0<br/>   <span class=\"coMULTI\">(* Print all the elements of a that are TRUE. *)</span><br/>   <span class=\"kw1\">FOR</span> i <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">TO</span> N <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">DO</span><br/>      <span class=\"kw1\">IF</span> a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">THEN</span><br/>         Out.<span class=\"me1\">Int</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">END</span>;<br/>   <span class=\"kw1\">END</span>;<br/>   Out.<span class=\"me1\">Ln</span>;<br/><span class=\"kw1\">END</span> Primes.</pre>"}, {"lang": "OCaml", "loc": 14, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> sieve n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> is_prime <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>create n <span class=\"kw1\">true</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">let</span> limit <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALtruncate\"><span class=\"kw3\">truncate</span></a><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> limit <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> is_prime<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">let</span> j <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"br0\">(</span>i<span class=\"sy0\">*</span>i<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>      <span class=\"kw1\">while</span> <span class=\"sy0\">!</span>j <span class=\"sy0\">&lt;</span> n <span class=\"kw1\">do</span><br/>        is_prime<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>j<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>        j <span class=\"sy0\">:=</span> <span class=\"sy0\">!</span>j <span class=\"sy0\">+</span> i<span class=\"sy0\">;</span><br/>      <span class=\"kw1\">done</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  is_prime<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>  is_prime<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>  is_prime</pre>"}, {"lang": "Oforth", "loc": 7, "block": "<pre class=\"text highlighted_source\">: eratosthenes(n)<br/>| i j |<br/>   ListBuffer newSize(n) dup add(null) seqFrom(2, n) over addAll<br/>   2 n sqrt asInteger for: i [<br/>      dup at(i) ifNotNull: [ i sq n i step: j [ dup put(j, null) ] ]<br/>      ]<br/>   filter(#notNull)\u00a0;</pre>"}, {"lang": "Oz", "loc": 24, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Sieve</span> N<span class=\"br0\">}</span><br/>     S = <span class=\"br0\">{</span>Array<span class=\"sy0\">.</span>new 2 N <span class=\"kw1\">true</span><span class=\"br0\">}</span><br/>     M = <span class=\"br0\">{</span>Float<span class=\"sy0\">.</span>toInt <span class=\"br0\">{</span>Sqrt <span class=\"br0\">{</span>Int<span class=\"sy0\">.</span>toFloat N<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"kw1\">for</span> I <span class=\"kw1\">in</span> 2<span class=\"sy0\">..</span>M <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">if</span> S<span class=\"sy0\">.</span>I <span class=\"kw1\">then</span><br/>\t   <span class=\"kw1\">for</span> J <span class=\"kw1\">in</span> I<span class=\"sy0\">*</span>I<span class=\"sy0\">..</span>N;I <span class=\"kw1\">do</span><br/>\t      S<span class=\"sy0\">.</span>J <span class=\"sy0\">:=</span> <span class=\"kw1\">false</span><br/>\t   <span class=\"kw1\">end</span><br/>\t<span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>     S<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Primes</span> N<span class=\"br0\">}</span><br/>     S = <span class=\"br0\">{</span>Sieve N<span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"kw1\">for</span> I <span class=\"kw1\">in</span> 2<span class=\"sy0\">..</span>N collect:C <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">if</span> S<span class=\"sy0\">.</span>I <span class=\"kw1\">then</span> <span class=\"br0\">{</span>C I<span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Show <span class=\"br0\">{</span>Primes 30<span class=\"br0\">}</span><span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 9, "block": "<pre class=\"parigp highlighted_source\">Eratosthenes<span class=\"br0\">(</span>lim<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>v<span class=\"sy0\">=</span>Vectorsmall<span class=\"br0\">(</span>lim<span class=\"sy0\">\\</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>unused<span class=\"sy0\">,</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">forprime</span><span class=\"br0\">(</span>p<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"kw1\">sqrt</span><span class=\"br0\">(</span>lim<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"kw1\">forstep</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span>p<span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>lim<span class=\"sy0\">,</span>p<span class=\"sy0\">,</span><br/>      v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"nu1\">0</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>lim<span class=\"sy0\">,</span><span class=\"kw1\">if</span><span class=\"br0\">(</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span><span class=\"kw1\">print1</span><span class=\"br0\">(</span>i<span class=\"st0\">\", \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Pascal", "loc": 42, "block": "<pre class=\"pascal highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> primes<span class=\"br0\">(</span>output<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">const</span><br/> PrimeLimit <span class=\"sy3\">=</span> <span class=\"nu0\">1000</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span><br/> primes<span class=\"sy1\">:</span> <span class=\"kw4\">set</span> <span class=\"kw1\">of</span> <span class=\"nu0\">1</span> <span class=\"sy1\">..</span> <span class=\"me1\">PrimeLimit</span><span class=\"sy1\">;</span><br/> n<span class=\"sy1\">,</span> k<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/> needcomma<span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/> <span class=\"coMULTI\">{ calculate the primes }</span><br/> primes <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"sy1\">..</span> <span class=\"me1\">PrimeLimit</span><span class=\"br0\">]</span><span class=\"sy1\">;</span><br/> <span class=\"kw1\">for</span> n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> trunc<span class=\"br0\">(</span><span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>PrimeLimit<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">if</span> n <span class=\"kw1\">in</span> primes<br/>    <span class=\"kw1\">then</span><br/>     <span class=\"kw1\">begin</span><br/>      k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> n<span class=\"sy3\">*</span>n<span class=\"sy1\">;</span><br/>      <span class=\"kw1\">while</span> k &lt; PrimeLimit <span class=\"kw1\">do</span><br/>       <span class=\"kw1\">begin</span><br/>        primes <span class=\"sy1\">:</span><span class=\"sy3\">=</span> primes <span class=\"sy3\">-</span> <span class=\"br0\">[</span>k<span class=\"br0\">]</span><span class=\"sy1\">;</span><br/>        k <span class=\"sy1\">:</span><span class=\"sy3\">=</span> k <span class=\"sy3\">+</span> n<br/>       <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"coMULTI\">{ output the primes }</span><br/>  needcomma <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">for</span> n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> PrimeLimit <span class=\"kw1\">do</span><br/>   <span class=\"kw1\">if</span> n <span class=\"kw1\">in</span> primes<br/>    <span class=\"kw1\">then</span><br/>     <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> needcomma<br/>       <span class=\"kw1\">then</span><br/>        <span class=\"kw3\">write</span><span class=\"br0\">(</span><span class=\"st0\">', '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">write</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      needcomma <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">true</span><br/>     <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Perl", "loc": 16, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> sieve <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">@composite</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"re0\">$composite</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"re0\">$i</span><span class=\"re0\">*$i</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"re0\">$j</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$composite</span><span class=\"br0\">[</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">@primes</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$composite</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">||</span> <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@primes</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"re0\">@primes</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Perl 6", "loc": 14, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> sieve<span class=\"br0\">(</span> Int <span class=\"re0\">$limit</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@is</span><span class=\"sy0\">-</span>prime <span class=\"sy0\">=</span> <span class=\"kw1\">False</span><span class=\"sy0\">,</span> <span class=\"kw1\">False</span><span class=\"sy0\">,</span> slip <span class=\"kw1\">True</span> <span class=\"kw1\">xx</span> <span class=\"re0\">$limit</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    gather <span class=\"kw1\">for</span> <span class=\"re0\">@is</span><span class=\"sy0\">-</span>prime<span class=\"sy0\">.</span><span class=\"kw3\">kv</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$number</span><span class=\"sy0\">,</span> <span class=\"re0\">$is</span><span class=\"sy0\">-</span>prime <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"re0\">$is</span><span class=\"sy0\">-</span>prime <span class=\"br0\">{</span><br/>            take <span class=\"re0\">$number</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">loop</span> <span class=\"br0\">(</span><span class=\"kw1\">my</span> <span class=\"re0\">$s</span> <span class=\"sy0\">=</span> <span class=\"re0\">$number</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"re0\">$s</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$limit</span><span class=\"sy0\">;</span> <span class=\"re0\">$s</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$number</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">@is</span><span class=\"sy0\">-</span>prime<span class=\"br0\">[</span><span class=\"re0\">$s</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw1\">False</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">(</span>sieve <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">join</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">say</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 16, "block": "<pre class=\"text highlighted_source\">constant limit = 1000<br/>sequence primes = {}<br/>sequence flags = repeat(1, limit)<br/>for i=2 to floor(sqrt(limit)) do<br/>    if flags[i] then<br/>        for k=i*i to limit by i do<br/>            flags[k] = 0<br/>        end for<br/>    end if<br/>end for<br/>for i=2 to limit do<br/>    if flags[i] then<br/>        primes &amp;= i<br/>    end if<br/>end for<br/>? primes</pre>"}, {"lang": "PHP", "loc": 22, "block": "<pre class=\"php highlighted_source\">\u00a0<br/><span class=\"kw2\">function</span> iprimes_upto<span class=\"br0\">(</span><span class=\"re0\">$limit</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$limit</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"re0\">$primes</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$limit</span><span class=\"sy0\">;</span> <span class=\"re0\">$n</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$primes</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span><span class=\"sy0\">*</span><span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$limit</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span><br/>\t    <span class=\"br0\">{</span><br/>\t\t<span class=\"re0\">$primes</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>\t    <span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$primes</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 8, "block": "<pre class=\"text highlighted_source\">(de sieve (N)<br/>   (let Sieve (range 1 N)<br/>      (set Sieve)<br/>      (for I (cdr Sieve)<br/>         (when I<br/>            (for (S (nth Sieve (* I I)) S (nth (cdr S) I))<br/>               (set S) ) ) )<br/>      (filter bool Sieve) ) )</pre>"}, {"lang": "PL/I", "loc": 37, "block": "<pre class=\"pli highlighted_source\">eratos<span class=\"sy0\">:</span> <span class=\"kw1\">proc</span> <span class=\"kw1\">options</span> <span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span> <span class=\"kw1\">reorder</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">dcl</span> i  <span class=\"kw1\">fixed</span> <span class=\"kw1\">bin</span> <span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">dcl</span> j  <span class=\"kw1\">fixed</span> <span class=\"kw1\">bin</span> <span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">dcl</span> n  <span class=\"kw1\">fixed</span> <span class=\"kw1\">bin</span> <span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">dcl</span> sn <span class=\"kw1\">fixed</span> <span class=\"kw1\">bin</span> <span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">dcl</span> <span class=\"kw1\">hbound</span> <span class=\"kw1\">builtin</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">dcl</span> <span class=\"kw1\">sqrt</span>   <span class=\"kw1\">builtin</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">dcl</span> <span class=\"kw1\">sysin</span>    <span class=\"kw1\">file</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">dcl</span> <span class=\"kw1\">sysprint</span> <span class=\"kw1\">file</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">get</span> <span class=\"kw1\">list</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>sn <span class=\"sy0\">=</span> <span class=\"kw1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">dcl</span> primes<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">bit</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">aligned</span> <span class=\"kw1\">init</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"st0\">'1'</span>b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span>i <span class=\"sy0\">&lt;=</span> sn<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> i <span class=\"sy0\">**</span> <span class=\"nu0\">2</span> <span class=\"kw1\">by</span> i <span class=\"kw1\">to</span> <span class=\"kw1\">hbound</span><span class=\"br0\">(</span>primes<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"coMULTI\">/* Adding a test would just slow down processing! */</span><br/>      primes<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"st0\">'0'</span>b<span class=\"sy0\">;</span> <br/>     <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> sn <span class=\"kw1\">until</span><span class=\"br0\">(</span>primes<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"kw1\">hbound</span><span class=\"br0\">(</span>primes<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> primes<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw1\">put</span> <span class=\"kw1\">data</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span> eratos<span class=\"sy0\">;</span></pre>"}, {"lang": "Pop11", "loc": 1, "block": "<pre>define eratostenes(n);\nlvars bits = inits(n), i, j;\nfor i from 2 to n do\n   if bits(i) = 0 then\n      printf('' &gt;&lt; i, '%s\\n');\n      for j from 2*i by i to n do\n         1 -&gt; bits(j);\n      endfor;\n   endif;\nendfor;\nenddefine;\n</pre>"}, {"lang": "PowerShell", "loc": 12, "block": "<pre class=\"powershell highlighted_source\"><span class=\"kw3\">function</span> Sieve <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span> <span class=\"re0\">$num</span> <span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"re0\">$isprime</span> <span class=\"sy0\">=</span> <span class=\"sy0\">@</span><span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"nu0\">2</span>..<span class=\"re0\">$num</span> <span class=\"sy0\">|</span> <span class=\"kw1\">Where-Object</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$isprime</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">]</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$null</span> <span class=\"br0\">}</span> <span class=\"sy0\">|</span> <span class=\"kw1\">ForEach-Object</span> <span class=\"br0\">{</span><br/>        <a href=\"about:blank\"><span class=\"kw6\">$_</span></a><br/>        <span class=\"re0\">$isprime</span><span class=\"br0\">[</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$true</span><br/>        <span class=\"re0\">$i</span><span class=\"sy0\">=</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><span class=\"sy0\">*</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a><br/>        <span class=\"kw3\">for</span> <span class=\"br0\">(</span>\u00a0; <span class=\"re0\">$i</span> <span class=\"kw4\">-le</span> <span class=\"re0\">$num</span>; <span class=\"re0\">$i</span> <span class=\"sy0\">+=</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span> <span class=\"re0\">$isprime</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$false</span> <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Processing", "loc": 49, "block": "<pre class=\"java highlighted_source\"><span class=\"kw4\">int</span> maxx,maxy<span class=\"sy0\">;</span><br/><span class=\"kw4\">int</span> max<span class=\"sy0\">;</span><br/><span class=\"kw4\">boolean</span><span class=\"br0\">[</span><span class=\"br0\">]</span> sieve<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> plot<span class=\"br0\">(</span><span class=\"kw4\">int</span> pos, <span class=\"kw4\">boolean</span> active<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  set<span class=\"br0\">(</span>pos<span class=\"sy0\">%</span>maxx,pos<span class=\"sy0\">/</span>maxx, active<span class=\"sy0\">?</span>#000000<span class=\"sy0\">:</span>#ffffff<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> setup<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  size<span class=\"br0\">(</span><span class=\"nu0\">1000</span>, <span class=\"nu0\">1000</span>, P2D<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  frameRate<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  maxx<span class=\"sy0\">=</span>width<span class=\"sy0\">;</span><br/>  maxy<span class=\"sy0\">=</span>height<span class=\"sy0\">;</span><br/>  max<span class=\"sy0\">=</span>width<span class=\"sy0\">*</span>height<span class=\"sy0\">;</span><br/>  sieve<span class=\"sy0\">=</span><span class=\"kw1\">new</span> <span class=\"kw4\">boolean</span><span class=\"br0\">[</span>max<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  sieve<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>  plot<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  plot<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;=</span>max<span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    sieve<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    plot<span class=\"br0\">(</span>i,<span class=\"kw2\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> i<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> draw<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>sieve<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>i<span class=\"sy0\">*</span>i<span class=\"sy0\">&lt;</span>max <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span>sieve<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      i<span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>sieve<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    print<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j<span class=\"sy0\">=</span>i<span class=\"sy0\">*</span>i<span class=\"sy0\">;</span>j<span class=\"sy0\">&lt;=</span>max<span class=\"sy0\">;</span>j<span class=\"sy0\">+=</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>sieve<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        sieve<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>        plot<span class=\"br0\">(</span>j,<span class=\"kw2\">false</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>i<span class=\"sy0\">*</span>i<span class=\"sy0\">&lt;</span>max<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    i<span class=\"sy0\">++;</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    noLoop<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"finished\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 14, "block": "<pre class=\"prolog highlighted_source\">primes<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> L<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> numlist<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> Xs<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>\t        sieve<span class=\"br0\">(</span>Xs<span class=\"sy4\">,</span> L<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>sieve<span class=\"br0\">(</span><span class=\"br0\">[</span>H<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span>H<span class=\"sy5\">|</span>X<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">:-</span> H2 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> H <span class=\"sy3\">+</span> H<span class=\"sy4\">,</span> <br/>                       filter<span class=\"br0\">(</span>H<span class=\"sy4\">,</span> H2<span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>                       sieve<span class=\"br0\">(</span>R<span class=\"sy4\">,</span> X<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>sieve<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>filter<span class=\"br0\">(</span>_<span class=\"sy4\">,</span> _<span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy4\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>filter<span class=\"br0\">(</span>H<span class=\"sy4\">,</span> H2<span class=\"sy4\">,</span> <span class=\"br0\">[</span>H1<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> R<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>    <span class=\"br0\">(</span>   H1 <span class=\"sy6\">&lt;</span> H2 <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> R <span class=\"sy6\">=</span> <span class=\"br0\">[</span>H1<span class=\"sy5\">|</span>R1<span class=\"br0\">]</span><span class=\"sy4\">,</span> filter<span class=\"br0\">(</span>H<span class=\"sy4\">,</span> H2<span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> R1<span class=\"br0\">)</span><br/>    <span class=\"sy4\">;</span>   H3 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> H2 <span class=\"sy3\">+</span> H<span class=\"sy4\">,</span><br/>        <span class=\"br0\">(</span>   H1 <span class=\"sy1\">=:=</span> H2  <span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span>       filter<span class=\"br0\">(</span>H<span class=\"sy4\">,</span> H3<span class=\"sy4\">,</span> T<span class=\"sy4\">,</span> R<span class=\"br0\">)</span><br/>        <span class=\"sy4\">;</span>                       filter<span class=\"br0\">(</span>H<span class=\"sy4\">,</span> H3<span class=\"sy4\">,</span> <span class=\"br0\">[</span>H1<span class=\"sy5\">|</span>T<span class=\"br0\">]</span><span class=\"sy4\">,</span> R<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 9, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">For</span> n<span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">To</span> <span class=\"kw2\">Sqr</span><span class=\"br0\">(</span>lim<span class=\"br0\">)</span><br/>  <span class=\"kw1\">If</span> Nums<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><br/>    m<span class=\"sy0\">=</span>n<span class=\"sy0\">*</span>n<br/>    <span class=\"kw1\">While</span> m<span class=\"sy0\">&lt;=</span>lim<br/>      Nums<span class=\"br0\">(</span>m<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>      m<span class=\"sy0\">+</span>n<br/>    <span class=\"kw1\">Wend</span><br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">Next</span> n</pre>"}, {"lang": "Python", "loc": 8, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> eratosthenes2<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    multiples <span class=\"sy0\">=</span> <span class=\"kw2\">set</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> n+<span class=\"nu0\">1</span><span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">if</span> i <span class=\"kw1\">not</span> <span class=\"kw1\">in</span> multiples:<br/>            <span class=\"kw1\">yield</span> i<br/>            multiples.<span class=\"me1\">update</span><span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span>i*i<span class=\"sy0\">,</span> n+<span class=\"nu0\">1</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"kw2\">list</span><span class=\"br0\">(</span>eratosthenes2<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 14, "block": "<pre class=\"text highlighted_source\">sieve &lt;- function(n) {<br/>  if (n &lt; 2) return(NULL)<br/>  a &lt;- rep(T, n)<br/>  a[1] &lt;- F<br/>  for(i in seq(n)) {<br/>    if (a[i]) {<br/>      j &lt;- i * i<br/>      if (j &gt; n) return(which(a))<br/>      a[seq(j, n, by=i)] &lt;- F<br/>    }<br/>  }<br/>}<br/>\u00a0<br/>sieve(1000)</pre>"}, {"lang": "Racket", "loc": 13, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define (sieve n)<br/>  (define non-primes '())<br/>  (define primes '())<br/>  (for ([i (in-range 2 (add1 n))])<br/>    (unless (member i non-primes)<br/>      (set! primes (cons i primes))<br/>      (for ([j (in-range (* i i) (add1 n) i)])<br/>        (set! non-primes (cons j non-primes)))))<br/>  (reverse primes))<br/>\u00a0<br/>(sieve 100)</pre>"}, {"lang": "REXX", "loc": 12, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  generates primes  via the  sieve of Eratosthenes  algorithm.            */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> H <span class=\"sy0\">.</span>;   <span class=\"kw1\">if</span> H==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> H==<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> H=<span class=\"nu0\">200</span>   <span class=\"coMULTI\">/*optain optional argument from the CL.*/</span><br/>w=<span class=\"kw6\">length</span><span class=\"br0\">(</span>H<span class=\"br0\">)</span>;     @prime=<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">'prime'</span>, <span class=\"nu0\">20</span><span class=\"br0\">)</span>       <span class=\"coMULTI\">/*W:   is used for aligning the output.*/</span><br/>@<span class=\"sy0\">.</span>=<span class=\"sy0\">.</span>                                             <span class=\"coMULTI\">/*assume all the numbers are  prime.   */</span><br/>#=<span class=\"nu0\">0</span>                                              <span class=\"coMULTI\">/*number of primes found  (so far).    */</span><br/>     <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">for</span> H-<span class=\"nu0\">1</span>;  <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>j==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>  <span class=\"coMULTI\">/*all prime integers up to H inclusive.*/</span><br/>     #=#+<span class=\"nu0\">1</span>                                       <span class=\"coMULTI\">/*bump the prime number counter.       */</span><br/>     <span class=\"kw1\">say</span>  @prime <span class=\"kw6\">right</span><span class=\"br0\">(</span>#,w<span class=\"br0\">)</span>  <span class=\"st0\">\" \u2500\u2500\u2500\u25ba \"</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>j,w<span class=\"br0\">)</span> <span class=\"coMULTI\">/*display the  prime  to the terminal. */</span><br/>         <span class=\"kw1\">do</span> m=j<span class=\"sy0\">*</span>j  <span class=\"kw2\">to</span> H  <span class=\"kw2\">by</span> j;  @<span class=\"sy0\">.</span>m=; <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*m*/</span>  <span class=\"coMULTI\">/*strike all multiples as being \u00ac prime*/</span><br/>     <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span>                                 <span class=\"coMULTI\">/*       \u2500\u2500\u2500                           */</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span>  <span class=\"kw6\">right</span><span class=\"br0\">(</span>#,w+<span class=\"kw6\">length</span><span class=\"br0\">(</span>@prime<span class=\"br0\">)</span>+<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"st0\">'primes found.'</span> <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span></pre>"}, {"lang": "Ring", "loc": 10, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>limit = 100<br/>sieve = list(limit)<br/>for i = 2 to limit<br/>    for k = i*i to limit step i <br/>        sieve[k] = 1<br/>    next<br/>    if sieve[i] = 0 see \"\" + i + \" \" ok<br/>next <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 9, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> eratosthenes<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  nums = <span class=\"br0\">[</span><span class=\"kw2\">nil</span>, <span class=\"kw2\">nil</span>, <span class=\"sy0\">*</span><span class=\"nu0\">2</span>..<span class=\"me1\">n</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">2</span>..<span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>    <span class=\"br0\">(</span>i<span class=\"sy0\">**</span><span class=\"nu0\">2</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">step</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>m<span class=\"sy0\">|</span> nums<span class=\"br0\">[</span>m<span class=\"br0\">]</span> = <span class=\"kw2\">nil</span><span class=\"br0\">}</span>  <span class=\"kw1\">if</span> nums<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/>  nums.<span class=\"me1\">compact</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">p</span> eratosthenes<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span></pre>"}, {"lang": "Run BASIC", "loc": 8, "block": "<pre class=\"text highlighted_source\">input \"Gimme the limit:\"; limit<br/>dim flags(limit)<br/>for i = 2 to  limit<br/> for k = i*i to limit step i <br/>  flags(k) = 1<br/> next k<br/>if flags(i) = 0 then print i;\", \";<br/>next i</pre>"}, {"lang": "Rust", "loc": 24, "block": "<pre class=\"text highlighted_source\">fn simple_sieve(limit: usize) -&gt; Vec&lt;usize&gt; {<br/>\u00a0<br/>    let mut is_prime = vec![true; limit+1];<br/>    is_prime[0] = false;<br/>    if limit &gt;= 1 { is_prime[1] = false }<br/>\u00a0<br/>    for num in 2..limit+1 {<br/>        if is_prime[num] {<br/>            let mut multiple = num*num;<br/>            while multiple &lt;= limit {<br/>                is_prime[multiple] = false;<br/>                multiple += num;<br/>            }<br/>        }<br/>    }<br/>\u00a0<br/>    is_prime.iter().enumerate()<br/>        .filter_map(|(pr, &amp;is_pr)| if is_pr {Some(pr)} else {None} )<br/>        .collect()<br/>}<br/>\u00a0<br/>fn main() {<br/>    println!(\"{:?}\", simple_sieve(100));<br/>}</pre>"}, {"lang": "SAS", "loc": 17, "block": "<pre class=\"text highlighted_source\">proc iml;<br/>start sieve(n);<br/>    a = J(n,1);<br/>    a[1] = 0;<br/>    do i = 1 to n;<br/>        if a[i] then do;<br/>            if i*i&gt;n then return(a);<br/>            a[i*(i:int(n/i))] = 0;<br/>        end;<br/>    end;<br/>finish;<br/>\u00a0<br/>a = loc(sieve(1000))`;<br/>create primes from a;<br/>append from a;<br/>close primes;<br/>quit;</pre>"}, {"lang": "SASL", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>show primes<br/>WHERE<br/>primes = sieve (2...)<br/>sieve (p\u00a0: x ) = p\u00a0: sieve {a &lt;- x; a REM p &gt; 0}<br/>?<br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 22, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">annotation</span>.<span class=\"me1\">tailrec</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">collection</span>.<span class=\"me1\">parallel</span>.<span class=\"me1\">mutable</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> scala.<span class=\"me1\">compat</span>.<span class=\"me1\">Platform</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> GenuineEratosthenesSieve <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> sieveOfEratosthenes<span class=\"br0\">(</span>limit<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>primes<span class=\"sy0\">:</span> mutable.<span class=\"me1\">ParSet</span><span class=\"br0\">[</span>Int<span class=\"br0\">]</span>, sqrtLimit<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span>mutable.<span class=\"me1\">ParSet</span>.<span class=\"me1\">empty</span> ++ <span class=\"br0\">(</span><span class=\"nu0\">2</span> to limit<span class=\"br0\">)</span>, math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>limit<span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">)</span><br/>    <span class=\"sy0\">@</span>tailrec<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> prim<span class=\"br0\">(</span>candidate<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>candidate <span class=\"sy0\">&lt;=</span> sqrtLimit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>primes contains candidate<span class=\"br0\">)</span> primes --<span class=\"sy0\">=</span> candidate <span class=\"sy0\">*</span> candidate to limit by candidate<br/>        prim<span class=\"br0\">(</span>candidate + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    prim<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    primes<br/>  <span class=\"br0\">}</span><br/>  <span class=\"co1\">// BitSet toList is shuffled when using the ParSet version. So it has to be sorted before using it as a sequence.</span><br/>\u00a0<br/>  assert<span class=\"br0\">(</span>sieveOfEratosthenes<span class=\"br0\">(</span><span class=\"nu0\">15099480</span><span class=\"br0\">)</span>.<span class=\"me1\">size</span> <span class=\"sy0\">==</span> <span class=\"nu0\">976729</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Successfully completed without errors. [total ${Platform.currentTime - executionStart} ms]\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 21, "block": "<pre class=\"scheme highlighted_source\"><span class=\"co1\">; Tail-recursive solution\u00a0:</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>sieve n<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>aux u v<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"br0\">(</span><span class=\"kw1\">car</span> v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> p p<span class=\"br0\">)</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">let</span> rev<span class=\"sy0\">-</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>u u<span class=\"br0\">)</span> <span class=\"br0\">(</span>v v<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">null?</span> u<span class=\"br0\">)</span> v <span class=\"br0\">(</span>rev<span class=\"sy0\">-</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> u<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> u<span class=\"br0\">)</span> v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>aux <span class=\"br0\">(</span><span class=\"kw1\">cons</span> p u<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"kw1\">let</span> wheel <span class=\"br0\">(</span><span class=\"br0\">(</span>u '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>v <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> v<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>a <span class=\"br0\">(</span><span class=\"sy0\">*</span> p p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">null?</span> v<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> u<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> v<span class=\"br0\">)</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span>wheel u <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> v<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> a p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> v<span class=\"br0\">)</span> a<span class=\"br0\">)</span> <span class=\"br0\">(</span>wheel u v <span class=\"br0\">(</span><span class=\"sy0\">+</span> a p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                  <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span>wheel <span class=\"br0\">(</span><span class=\"kw1\">cons</span> <span class=\"br0\">(</span><span class=\"kw1\">car</span> v<span class=\"br0\">)</span> u<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> v<span class=\"br0\">)</span> a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>aux '<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> range <span class=\"br0\">(</span><span class=\"br0\">(</span>v '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>k <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">odd?</span> n<span class=\"br0\">)</span> n <span class=\"br0\">(</span><span class=\"sy0\">-</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> k <span class=\"nu0\">3</span><span class=\"br0\">)</span> v <span class=\"br0\">(</span>range <span class=\"br0\">(</span><span class=\"kw1\">cons</span> k v<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> k <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">; &gt; (sieve 100)</span><br/><span class=\"co1\">; (2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)</span><br/><span class=\"co1\">; &gt; (length (sieve 10000000))</span><br/><span class=\"co1\">; 664579</span></pre>"}, {"lang": "Scilab", "loc": 19, "block": "<pre class=\"text highlighted_source\">function a = sieve(n)<br/>    a = ~zeros(n, 1)<br/>    a(1) =\u00a0%f<br/>    for i = 1:n<br/>        if a(i)<br/>            j = i*i<br/>            if j &gt; n<br/>                return<br/>            end<br/>            a(j:i:n) =\u00a0%f<br/>        end<br/>    end<br/>endfunction<br/>\u00a0<br/>find(sieve(100))<br/>// [2 3 5 ... 97]<br/>\u00a0<br/>sum(sieve(1000))<br/>// 168, the number of primes below 1000</pre>"}, {"lang": "Seed7", "loc": 23, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const func set of integer: eratosthenes (in integer: n) is func<br/>  result<br/>    var set of integer: sieve is EMPTY_SET;<br/>  local<br/>    var integer: i is 0;<br/>    var integer: j is 0;<br/>  begin<br/>    sieve\u00a0:= {2 .. n};<br/>    for i range 2 to sqrt(n) do<br/>      if i in sieve then<br/>        for j range i ** 2 to n step i do<br/>          excl(sieve, j);<br/>        end for;<br/>      end if;<br/>    end for;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(card(eratosthenes(10000000)));<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 15, "block": "<pre class=\"ruby highlighted_source\">func sieve<span class=\"br0\">(</span>limit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var sieve_arr = <span class=\"br0\">[</span><span class=\"kw2\">false</span>, <span class=\"kw2\">false</span>, <span class=\"br0\">(</span>limit<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>.<span class=\"me1\">of</span><span class=\"br0\">(</span><span class=\"kw2\">true</span><span class=\"br0\">)</span>...<span class=\"br0\">]</span><br/>    gather <span class=\"br0\">{</span><br/>        sieve_arr.<span class=\"me1\">each_kv</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>number, is_prime<span class=\"sy0\">|</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>is_prime<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                take<span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>                <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">(</span>number<span class=\"sy0\">**</span><span class=\"nu0\">2</span> .. <span class=\"me1\">limit</span> <span class=\"st0\">`by`</span> number<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    sieve_arr<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = <span class=\"kw2\">false</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>say sieve<span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Simula", "loc": 28, "block": "<pre class=\"text highlighted_source\">BEGIN<br/>    INTEGER ARRAY t(0:1000);<br/>    INTEGER i,j,k;<br/>    FOR i:=0 STEP 1 UNTIL 1000 DO t(i):=1;<br/>    t(0):=0; t(1):=0;<br/>    i:=0;<br/>    FOR i:=i WHILE i&lt;1000 DO<br/>    BEGIN<br/>        FOR i:=i WHILE i&lt;1000 AND t(i)=0 DO i:=i+1;<br/>        IF i&lt;1000 THEN<br/>        BEGIN<br/>            j:=2;<br/>            k:=j*i;<br/>            FOR k:=k WHILE k&lt;1000 DO<br/>            BEGIN<br/>                t(k):=0;<br/>                j:=j+1;<br/>                k:=j*i<br/>            END;<br/>            i:=i+1<br/>        END<br/>    END;<br/>    FOR i:=0 STEP 1 UNTIL 999 DO<br/>       IF t(i)&lt;&gt;0  THEN<br/>       BEGIN<br/>           OutInt(i,5); OutImage<br/>       END<br/>END</pre>"}, {"lang": "Smalltalk", "loc": 16, "block": "<pre class=\"smalltalk highlighted_source\">|<span class=\"re3\"> potentialPrimes limit </span>|<br/><span class=\"re6\">limit</span> <span class=\"sy0\">:=</span> <span class=\"re5\">100</span>.<br/><span class=\"re5\">potentialPrimes</span> <span class=\"sy0\">:=</span> <span class=\"re0\">Array</span> new: <span class=\"re5\">limit</span>.<br/><span class=\"re5\">potentialPrimes</span> atAllPut: <span class=\"kw1\">true</span>.<br/><span class=\"re5\">2</span> to: <span class=\"re5\">limit</span> sqrt do: <span class=\"br0\">[</span>:<span class=\"re5\">testNumber</span> |<br/>    <span class=\"br0\">(</span><span class=\"re5\">potentialPrimes</span> at: <span class=\"re5\">testNumber</span><span class=\"br0\">)</span> ifTrue: <span class=\"br0\">[</span><br/>        <span class=\"br0\">(</span><span class=\"re5\">testNumber</span> * <span class=\"re5\">2</span><span class=\"br0\">)</span> to: <span class=\"re5\">limit</span> by: <span class=\"re5\">testNumber</span> do: <span class=\"br0\">[</span>:<span class=\"re5\">nonPrime</span> |<br/>            potentialPrimes at: <span class=\"re5\">nonPrime</span> put: <span class=\"kw1\">false</span><br/>        <span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><br/><span class=\"br0\">]</span>.<br/><span class=\"re5\">2</span> to: <span class=\"re5\">limit</span> do: <span class=\"br0\">[</span>:<span class=\"re5\">testNumber</span> |<br/>    <span class=\"br0\">(</span><span class=\"re5\">potentialPrimes</span> at: <span class=\"re5\">testNumber</span><span class=\"br0\">)</span> ifTrue: <span class=\"br0\">[</span><br/>        <span class=\"re0\">Transcript</span> show: <span class=\"re5\">testNumber</span> asString; cr<br/>    <span class=\"br0\">]</span><br/><span class=\"br0\">]</span></pre>"}, {"lang": "SNOBOL4", "loc": 17, "block": "<pre class=\"text highlighted_source\">        define('sieve(n)i,j,k,p,str,res')\u00a0:(sieve_end)<br/>sieve   i = lt(i,n - 1) i + 1\u00a0:f(sv1)<br/>        str = str (i + 1) ' '\u00a0:(sieve)<br/>sv1     str break(' ') . j span(' ') =\u00a0:f(return)<br/>        sieve = sieve j ' '<br/>        sieve = gt(j ^ 2,n) sieve str\u00a0:s(return)\u00a0;* Opt1<br/>        res = ''<br/>        str (arb ' ') @p ((j ^ 2) ' ')\u00a0;* Opt2<br/>        str len(p) . res =\u00a0;* Opt2<br/>sv2     str break(' ') . k  span(' ') =\u00a0:f(sv3)<br/>        res = ne(remdr(k,j),0) res k ' '\u00a0:(sv2)<br/>sv3     str = res\u00a0:(sv1)<br/>sieve_end<br/>\u00a0<br/>*       # Test and display        <br/>        output = sieve(100)<br/>end</pre>"}, {"lang": "Stata", "loc": 20, "block": "<pre class=\"text highlighted_source\">prog def sieve<br/>\targs n<br/>\tclear<br/>\tqui set obs `n'<br/>\tgen long p=_n<br/>\tgen byte a=_n&gt;1<br/>\tforv i=2/`n' {<br/>\t\tif a[`i'] {<br/>\t\t\tloc j=`i'*`i'<br/>\t\t\tif `j'&gt;`n' {<br/>\t\t\t\tcontinue, break<br/>\t\t\t}<br/>\t\t\tforv k=`j'(`i')`n' {<br/>\t\t\t\tqui replace a=0 in `k'<br/>\t\t\t}<br/>\t\t}<br/>\t}<br/>\tqui keep if a<br/>\tdrop a<br/>end</pre>"}, {"lang": "Swift", "loc": 21, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>func primes(n: Int) -&gt; AnyGenerator&lt;Int&gt; {<br/>\u00a0<br/>  var (seive, i) = ([Int](0..&lt;n), 1)<br/>  let lim = Int(sqrt(Double(n)))<br/>\u00a0<br/>  return anyGenerator {<br/>    while ++i &lt; n {<br/>      if seive[i]\u00a0!= 0 {<br/>        if i &lt;= lim {<br/>          for notPrime in stride(from: i*i, to: n, by: i) {<br/>            seive[notPrime] = 0<br/>          }<br/>        }<br/>        return i<br/>      }<br/>    }<br/>    return nil<br/>  }<br/>}</pre>"}, {"lang": "Tcl", "loc": 26, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> sieve n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\"># create a container to hold the sequence of numbers.</span><br/>    <span class=\"co1\"># use a dictionary for its speedy access (like an associative array) </span><br/>    <span class=\"co1\"># and for its insertion order preservation (like a list)</span><br/>    <span class=\"kw1\">set</span> nums <span class=\"br0\">[</span>dict create<span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"co1\"># the actual value is never used</span><br/>        dict <span class=\"kw1\">set</span> nums <span class=\"re0\">$i</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> primes <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw1\">set</span> nextPrime <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"br0\">[</span>dict keys <span class=\"re0\">$nums</span><span class=\"br0\">]</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">&lt;</span>= sqrt<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        dict unset nums <span class=\"re0\">$nextPrime</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$nextPrime</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i <span class=\"re0\">$nextPrime</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            dict unset nums <span class=\"re0\">$i</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">lappend</span> primes <span class=\"re0\">$nextPrime</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">concat</span> <span class=\"re0\">$primes</span> <span class=\"br0\">[</span>dict keys <span class=\"re0\">$nums</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span>sieve <span class=\"nu0\">100</span><span class=\"br0\">]</span>   <span class=\"sy0\">;</span><span class=\"co1\"># 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 20, "block": "<pre class=\"text highlighted_source\">Input \"Limit:\",N<br/>N\u2192Dim(L1)<br/>For(I,2,N)<br/>1\u2192L1(I)<br/>End<br/>For(I,2,SQRT(N))<br/>If L1(I)=1<br/>Then<br/>For(J,I*I,N,I)<br/>0\u2192L1(J)<br/>End<br/>End<br/>End<br/>For(I,2,N)<br/>If L1(I)=1<br/>Then<br/>Disp i<br/>End<br/>End<br/>ClrList L1</pre>"}, {"lang": "UNIX Shell", "loc": 22, "block": "<pre class=\"bash highlighted_source\"><span class=\"co0\">#!/usr/bin/zsh</span><br/>\u00a0<br/><span class=\"kw1\">function</span> primes<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">typeset</span> <span class=\"re5\">-a</span> a<br/>\t<span class=\"kw3\">typeset</span> i j<br/>\u00a0<br/>\ta<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>=<span class=\"st0\">\"\"</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> i = <span class=\"nu0\">2</span>; i <span class=\"sy0\">&lt;</span>= <span class=\"re4\">$1</span>; i++ <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>\t\ta<span class=\"br0\">[</span><span class=\"re1\">$i</span><span class=\"br0\">]</span>=<span class=\"re1\">$i</span><br/>\t<span class=\"kw1\">done</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> i = <span class=\"nu0\">2</span>; i <span class=\"sy0\">*</span> i <span class=\"sy0\">&lt;</span>= <span class=\"re4\">$1</span>; i++ <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"sy0\">!</span> <span class=\"re5\">-z</span> <span class=\"re1\">$a</span><span class=\"br0\">[</span><span class=\"re1\">$i</span><span class=\"br0\">]</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"kw1\">then</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> j = i <span class=\"sy0\">*</span> i; j <span class=\"sy0\">&lt;</span>= <span class=\"re4\">$1</span>; j += i <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>\t\t\t\ta<span class=\"br0\">[</span><span class=\"re1\">$j</span><span class=\"br0\">]</span>=<span class=\"st0\">\"\"</span><br/>\t\t\t<span class=\"kw1\">done</span><br/>\t\t<span class=\"kw1\">fi</span><br/>\t<span class=\"kw1\">done</span><br/>\tprint <span class=\"re1\">$a</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>primes <span class=\"nu0\">1000</span></pre>"}, {"lang": "Ursala", "loc": 3, "block": "<pre class=\"text highlighted_source\">#import nat<br/>\u00a0<br/>sieve = ~&lt;{0,1}&amp;&amp; iota; @NttPX ~&amp;r-&gt;lx ^/~&amp;rhPlC <a class=\"__cf_email__\" data-cfemail=\"6311060e020a0d07061123110f3b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>~|@r</pre>"}, {"lang": "Vala", "loc": 38, "block": "<pre class=\"vala highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">Gee</span><span class=\"sy0\">;</span><br/>\u00a0<br/>ArrayList<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span> primes<span class=\"br0\">(</span><span class=\"kw4\">int</span> limit<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> sieve <span class=\"sy0\">=</span> <span class=\"kw3\">new</span> ArrayList<span class=\"sy0\">&lt;</span><span class=\"kw4\">bool</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">var</span> prime_list <span class=\"sy0\">=</span> <span class=\"kw3\">new</span> ArrayList<span class=\"sy0\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> limit<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\tsieve.<span class=\"me1\">add</span><span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\tsieve<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> false<span class=\"sy0\">;</span><br/>\tsieve<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> false<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> limit<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>sieve<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"kw1\">false</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i<span class=\"sy0\">*</span>j <span class=\"sy0\">&lt;=</span> limit<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\tsieve<span class=\"br0\">[</span>i<span class=\"sy0\">*</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> false<span class=\"sy0\">;</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> sieve.<span class=\"me1\">size</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>sieve<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"kw1\">false</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tprime_list.<span class=\"me1\">add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> prime_list<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"co1\">// end primes</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">var</span> prime_list <span class=\"sy0\">=</span> primes<span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">foreach</span><span class=\"br0\">(</span><span class=\"kw1\">var</span> prime <span class=\"kw1\">in</span> prime_list<span class=\"br0\">)</span><br/>\t\tstdout.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%s \"</span>, prime.<span class=\"me1\">to_string</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tstdout.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "VAX Assembly", "loc": 29, "block": "<pre class=\"text highlighted_source\">                           000F4240  0000     1 n=1000*1000<br/>                               0000  0000     2 .entry\tmain,0<br/>                            7E 7CFD  0002     3 \tclro\t-(sp)\t\t\t;result buffer<br/>                            5E   DD  0005     4 \tpushl\tsp\t\t\t;pointer to buffer<br/>                            10   DD  0007     5 \tpushl\t#16\t\t\t;descriptor -&gt; len of buffer<br/>                                     0009     6 <br/>                            02   DD  0009     7 \tpushl\t#2\t\t\t;1st candidate<br/>                                     000B     8 test:<br/>                 09 46'AF   6E   E1  000B     9 \tbbc\t(sp), b^bits, found\t;bc - bit clear<br/>                                     0010    10 next:<br/>           F3 6E   000F4240 8F   F2  0010    11         aoblss  #n, (sp), test\t\t;+1: limit,index<br/>                                 04  0018    12         ret<br/>                                     0019    13 found:<br/>                         04 AE   7F  0019    14 \tpushaq\t4(sp)\t\t\t;-&gt; descriptor by ref<br/>                         04 AE   DF  001C    15 \tpushal\t4(sp)\t\t\t;-&gt; prime on stack by ref<br/>              00000000'GF   02   FB  001F    16 \tcalls\t#2, g^ots$cvt_l_ti\t;convert integer to string<br/>                         04 AE   7F  0026    17 \tpushaq\t4(sp)\t\t\t;<br/>              00000000'GF   01   FB  0029    18 \tcalls\t#1, g^lib$put_output\t;show result<br/>                                     0030    19 <br/>                       53   6E   D0  0030    20 \tmovl\t(sp), r3<br/>                                     0033    21 mult:<br/>    0002 53   6E   000F4240 8F   F1  0033    22 \tacbl    #n, (sp), r3, set_mult\t;limit,add,index<br/>                            D1   11  003D    23 \tbrb\tnext<br/>                                     003F    24 set_mult:\t\t\t\t;set bits for multiples<br/>                 EF 46'AF   53   E2  003F    25 \tbbss\tr3, b^bits, mult\t;branch on bit set &amp; set<br/>                            ED   11  0044    26 \tbrb\tmult<br/>                                     0046    27 <br/>                           0001E892  0046    28 bits:\t.blkl\t&lt;n+2+31&gt;/32<br/>                                     E892    29 .end\tmain</pre>"}, {"lang": "VBScript", "loc": 22, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/>    <span class=\"kw4\">Dim</span> sieve()<br/>\t<span class=\"kw3\">If</span> WScript.Arguments.Count&gt;=1 <span class=\"kw3\">Then</span><br/>\t    n = WScript.Arguments(0)<br/>\t<span class=\"kw3\">Else</span> <br/>\t    n = 99<br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw4\">ReDim</span> sieve(n)<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> n<br/>        sieve(i) = <span class=\"kw5\">True</span><br/>    <span class=\"kw3\">Next</span><br/>    <span class=\"kw3\">For</span> i = 2 <span class=\"kw3\">To</span> n<br/>        <span class=\"kw3\">If</span> sieve(i) <span class=\"kw3\">Then</span><br/>            <span class=\"kw3\">For</span> j = i * 2 <span class=\"kw3\">To</span> n <span class=\"kw3\">Step</span> i<br/>                sieve(j) = <span class=\"kw5\">False</span><br/>            <span class=\"kw3\">Next</span><br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span><br/>    <span class=\"kw3\">For</span> i = 2 <span class=\"kw3\">To</span> n<br/>        <span class=\"kw3\">If</span> sieve(i) <span class=\"kw3\">Then</span> WScript.Echo i<br/>    <span class=\"kw3\">Next</span><br/>\u00a0</pre>"}, {"lang": "Vedit macro language", "loc": 1, "block": "<pre>#10 = Get_Num(\"Enter number to search to: \", STATLINE)\nBuf_Switch(Buf_Free)                    // Use edit buffer as flags array\nIns_Text(\"--\")                          // 0 and 1 are not primes\nIns_Char('P', COUNT, #10-1)             // init rest of the flags to \"prime\"\nfor (#1 = 2; #1*#1 &lt; #10; #1++) {\n    Goto_Pos(#1)\n    if (Cur_Char=='P') {                // this is a prime number\n        for (#2 = #1*#1; #2 &lt;= #10; #2 += #1) {\n            Goto_Pos(#2)\n            Ins_Char('-', OVERWRITE)\n        }\n    }\n}\n</pre>"}, {"lang": "VBA Excel", "loc": 31, "block": "<pre class=\"vb highlighted_source\"> <span class=\"kw2\">Sub</span> primes()<br/><span class=\"co1\">'BRRJPA<br/></span><span class=\"co1\">'Prime calculation for VBA_Excel<br/></span><span class=\"co1\">'p is the superior limit of the range calculation<br/></span><span class=\"co1\">'This example calculates from 2 to 100000 and print it<br/></span><span class=\"co1\">'at the collum A<br/></span><br/>\u00a0<br/>p = 100000<br/>\u00a0<br/><span class=\"kw4\">Dim</span> nprimes(1 <span class=\"kw3\">To</span> 100000) <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>b = Sqr(p)<br/>\u00a0<br/><span class=\"kw3\">For</span> n = 2 <span class=\"kw3\">To</span> b<br/>\u00a0<br/>    <span class=\"kw3\">For</span> k = n * n <span class=\"kw3\">To</span> p <span class=\"kw3\">Step</span> n<br/>        nprimes(k) = 1<br/>\u00a0<br/>    <span class=\"kw3\">Next</span> k<br/><span class=\"kw3\">Next</span> n<br/>\u00a0<br/>\u00a0<br/><span class=\"kw3\">For</span> a = 2 <span class=\"kw3\">To</span> p<br/>    <span class=\"kw3\">If</span> nprimes(a) = 0 <span class=\"kw3\">Then</span><br/>      c = c + 1<br/>      Range(<span class=\"st0\">\"A\"</span> &amp; c).Value = a<br/>\u00a0<br/>    <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/> <span class=\"kw3\">Next</span> a<br/>\u00a0<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span> </pre>"}, {"lang": "Visual Basic", "loc": 19, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Sub</span> Eratost()<br/>    <span class=\"kw4\">Dim</span> sieve() <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>    <span class=\"kw4\">Dim</span> n <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, i <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, j <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span><br/>    n = InputBox(<span class=\"st0\">\"limit:\"</span>, n)<br/>    <span class=\"kw4\">ReDim</span> sieve(n)<br/>    <span class=\"kw3\">For</span> i = 1 <span class=\"kw3\">To</span> n<br/>        sieve(i) = <span class=\"kw5\">True</span><br/>    <span class=\"kw3\">Next</span> i<br/>    <span class=\"kw3\">For</span> i = 2 <span class=\"kw3\">To</span> n<br/>        <span class=\"kw3\">If</span> sieve(i) <span class=\"kw3\">Then</span><br/>            <span class=\"kw3\">For</span> j = i * 2 <span class=\"kw3\">To</span> n <span class=\"kw3\">Step</span> i<br/>                sieve(j) = <span class=\"kw5\">False</span><br/>            <span class=\"kw3\">Next</span> j<br/>        <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>    <span class=\"kw3\">Next</span> i<br/>    <span class=\"kw3\">For</span> i = 2 <span class=\"kw3\">To</span> n<br/>        <span class=\"kw3\">If</span> sieve(i) <span class=\"kw3\">Then</span> Debug.<span class=\"kw4\">Print</span> i<br/>    <span class=\"kw3\">Next</span> i<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span> 'Eratost</pre>"}, {"lang": "Visual Basic .NET", "loc": 18, "block": "<pre class=\"vbnet highlighted_source\"><span class=\"kw1\">Dim</span> n <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span>, k <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span>, limit <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/>Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"Enter number to search to: \"</span><span class=\"br0\">)</span><br/>limit <span class=\"sy0\">=</span> Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><br/><span class=\"kw1\">Dim</span> flags<span class=\"br0\">(</span>limit<span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw2\">Integer</span><br/><span class=\"kw1\">For</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> Math<span class=\"sy0\">.</span><a href=\"http://www.google.com/search?q=SQRT+site:msdn.microsoft.com\"><span class=\"kw7\">Sqrt</span></a><span class=\"br0\">(</span>limit<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> flags<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        <span class=\"kw1\">For</span> k <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n <span class=\"kw1\">To</span> limit <span class=\"kw1\">Step</span> n<br/>            flags<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Next</span> k<br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span> n<br/>\u00a0<br/><span class=\"co1\">' Display the primes</span><br/><span class=\"kw1\">For</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">To</span> limit<br/>    <span class=\"kw1\">If</span> flags<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span> n</pre>"}, {"lang": "Vorpal", "loc": 23, "block": "<pre class=\"text highlighted_source\">self.print_primes = method(m){<br/>   p = new()<br/>   p.fill(0, m, 1, true)<br/>\u00a0<br/>   count = 0<br/>   i = 2<br/>   while(i &lt; m){<br/>      if(p[i] == true){<br/>         p.fill(i+i, m, i, false)<br/>         count = count + 1<br/>      }<br/>      i = i + 1<br/>   }<br/>   ('primes: ' + count + ' in ' + m).print()<br/>   for(i = 2, i &lt; m, i = i + 1){<br/>      if(p[i] == true){<br/>         ('' + i + ', ').put()<br/>      }<br/>   }<br/>   ''.print()<br/>}<br/>\u00a0<br/>self.print_primes(100)</pre>"}, {"lang": "WebAssembly", "loc": 1, "block": "<pre>(module\n (import \"js\" \"print\" (func $print (param i32)))\n (memory 4096)\n \n (func $sieve (export \"sieve\") (param $n i32)\n   (local $i i32)\n   (local $j i32)\n \n   (set_local $i (i32.const 0))\n   (block $endLoop\n     (loop $loop\n       (br_if $endLoop (i32.ge_s (get_local $i) (get_local $n)))\n       (i32.store8 (get_local $i) (i32.const 1))\n       (set_local $i (i32.add (get_local $i) (i32.const 1)))\n       (br $loop)))\n \n   (set_local $i (i32.const 2))\n   (block $endLoop\n     (loop $loop\n       (br_if $endLoop (i32.ge_s (i32.mul (get_local $i) (get_local $i)) \n                                 (get_local $n)))\n       (if (i32.eq (i32.load8_s (get_local $i)) (i32.const 1))\n         (then\n           (set_local $j (i32.mul (get_local $i) (get_local $i)))\n           (block $endInnerLoop\n             (loop $innerLoop\n               (i32.store8 (get_local $j) (i32.const 0))\n               (set_local $j (i32.add (get_local $j) (get_local $i)))\n               (br_if $endInnerLoop (i32.ge_s (get_local $j) (get_local $n)))\n               (br $innerLoop)))))\n       (set_local $i (i32.add (get_local $i) (i32.const 1)))\n       (br $loop)))\n \n   (set_local $i (i32.const 2))\n   (block $endLoop\n     (loop $loop\n       (if (i32.eq (i32.load8_s (get_local $i)) (i32.const 1))\n         (then\n           (call $print (get_local $i))))\n       (set_local $i (i32.add (get_local $i) (i32.const 1)))\n       (br_if $endLoop (i32.ge_s (get_local $i) (get_local $n)))\n       (br $loop)))))\n</pre>"}, {"lang": "Xojo", "loc": 33, "block": "<pre class=\"text highlighted_source\">Dim limit, prime, i As Integer<br/>Dim s As String<br/>Dim t As Double<br/>Dim sieve(100000000) As Boolean<br/>\u00a0<br/>REM Get the maximum number<br/>While limit&lt;1 Or limit &gt; 100000000<br/>  Print(\"Max number? [1 to 100000000]\")<br/>  s = Input<br/>  limit = CDbl(s)<br/>Wend<br/>\u00a0<br/>REM Do the calculations<br/>t = Microseconds<br/>prime = 2<br/>While prime^2 &lt; limit<br/>  For i = prime*2 To limit Step prime<br/>    sieve(i) = True<br/>  Next<br/>  Do<br/>    prime = prime+1<br/>  Loop Until Not sieve(prime)<br/>Wend<br/>t = Microseconds-t<br/>Print(\"Compute time = \"+Str(t/1000000)+\" sec\")<br/>Print(\"Press Enter...\")<br/>s = Input<br/>\u00a0<br/>REM Display the prime numbers<br/>For i = 1 To limit<br/>  If Not sieve(i) Then Print(Str(i))<br/>Next<br/>s = Input</pre>"}, {"lang": "XPL0", "loc": 17, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;                  \\intrinsic 'code' declarations<br/>int  Size, Prime, I, Kill;<br/>char Flag;<br/>[Size:= IntIn(0);<br/>Flag:= Reserve(Size+1);<br/>for I:= 2 to Size do Flag(I):= true;<br/>for I:= 2 to Size do<br/>    if Flag(I) then                     \\found a prime<br/>        [Prime:= I;<br/>        IntOut(0, Prime);  CrLf(0);<br/>        Kill:= Prime + Prime;           \\first multiple to kill<br/>        while Kill &lt;= Size do<br/>                [Flag(Kill):= false;    \\zero a non-prime<br/>                Kill:= Kill + Prime;    \\next multiple<br/>                ];<br/>        ];<br/>]</pre>"}, {"lang": "Yabasic", "loc": 53, "block": "<pre class=\"text highlighted_source\">#!/usr/bin/yabasic<br/>\u00a0<br/>// ---------------------------<br/>// Prime Sieve Benchmark --<br/>// \"Shootout\" Version    --<br/>// ---------------------------<br/>// usage:<br/>//     yabasic sieve8k.yab 90000<br/>\u00a0<br/>\u00a0<br/>SIZE = 8192<br/>ONN = 1\u00a0: OFF = 0<br/>dim flags(SIZE)<br/>\u00a0<br/>sub main()<br/>\u00a0<br/>    cmd = peek(\"arguments\")<br/>    if cmd = 1 then<br/>       iterations = val(peek$(\"argument\"))<br/>       if iterations = 0 then print \"Argument wrong. Done 1000.\"\u00a0: iterations = 1000 end if<br/>    else<br/>       print \"1000 iterations.\"<br/>       iterations = 1000<br/>    end if<br/>\u00a0<br/>    for iter = 1 to iterations<br/>        count = 0<br/>        for n= 1 to SIZE\u00a0: flags(n) = ONN: next n<br/>        for i = 2 to SIZE<br/>            if flags(i) = ONN then<br/>               let k = i + i<br/>               if k &lt; SIZE then<br/>                 for k = k to SIZE step i<br/>                    flags(k) = OFF<br/>                 next k<br/>               end if<br/>               count = count + 1                 <br/>            end if<br/>        next i<br/>    next iter<br/>    print \"Count: \", count  // 1028<br/>end sub<br/>\u00a0<br/>clear screen<br/>\u00a0<br/>print \"Prime Sieve Benchmark\\n\"<br/>\u00a0<br/>main()<br/>\u00a0<br/>t = val(mid$(time$,10))<br/>\u00a0<br/>print \"time: \", t, \"\\n\"<br/>print peek(\"millisrunning\")</pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">fcn sieve(limit){<br/>   composite:=Data(limit+1).fill(1);  // bucket of bytes set to 1 (prime)<br/>   (2).pump(limit.toFloat().sqrt()+1, Void,  // Void==no results, just loop<br/>       composite.get, Void.Filter,\t// if prime, zero multiples<br/>      'wrap(n){ [n*n..limit,n].pump(Void,composite.set.fp1(0)) }); //composite[n*p]=0<br/>   (2).filter(limit-1,composite.get); // bytes still 1 are prime<br/>}<br/>sieve(53).println();</pre>"}]}