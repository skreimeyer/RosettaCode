{"task": "Number_reversal_game", "blocks": [{"lang": "Ada", "loc": 77, "block": "<pre class=\"ada highlighted_source\">\u00a0<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_Io</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_Io</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Integer_Text_Io</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Integer_Text_Io</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Discrete_Random</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> NumberReverse <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">subtype</span> RandRange <span class=\"kw1\">is</span> Integer <span class=\"kw3\">range</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">9</span>;<br/>   <span class=\"kw3\">type</span> NumArrayType <span class=\"kw1\">is</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Integer <span class=\"kw3\">range</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"kw3\">of</span> Integer;<br/>\u00a0<br/>   <span class=\"kw3\">package</span> RandNumbers <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Discrete_Random</span><span class=\"br0\">(</span>RandRange<span class=\"br0\">)</span>;<br/>   <span class=\"kw3\">use</span> RandNumbers;<br/>\u00a0<br/>   G\u00a0: Generator;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> FillArray <span class=\"br0\">(</span>A\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> NumArrayType<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      Temp\u00a0: RandRange;<br/>   <span class=\"kw1\">begin</span><br/>      A\u00a0:= <span class=\"br0\">(</span><span class=\"kw3\">others</span> =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">9</span> <span class=\"kw1\">loop</span><br/>         Temp\u00a0:= Random<span class=\"br0\">(</span>G<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">while</span> A<span class=\"br0\">(</span>Temp<span class=\"br0\">)</span> /= <span class=\"nu0\">0</span> <span class=\"kw1\">loop</span><br/>            Temp\u00a0:= Random<span class=\"br0\">(</span>G<span class=\"br0\">)</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         A<span class=\"br0\">(</span>Temp<span class=\"br0\">)</span>\u00a0:= I;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> FillArray;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Put<span class=\"br0\">(</span>A\u00a0: <span class=\"kw3\">in</span> NumArrayType<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">9</span> <span class=\"kw1\">loop</span><br/>         Put<span class=\"br0\">(</span>A<span class=\"br0\">(</span>I<span class=\"br0\">)</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>         Put<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Put;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Prompt <span class=\"br0\">(</span>Index\u00a0: <span class=\"kw3\">out</span> Integer<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      New_Line;<br/>      Put<span class=\"br0\">(</span><span class=\"st0\">\"How many numbers would you like to reverse: \"</span><span class=\"br0\">)</span>;<br/>      Get<span class=\"br0\">(</span>Index<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Prompt;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> ReverseArray<span class=\"br0\">(</span>Arr\u00a0: <span class=\"kw3\">in</span> <span class=\"kw3\">out</span> NumArrayType;<br/>                          Index\u00a0: <span class=\"kw3\">in</span> Integer<span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>      Temp\u00a0: RandRange;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span>..<span class=\"me1\">Index</span>/<span class=\"nu0\">2</span> <span class=\"kw1\">loop</span><br/>         Temp\u00a0:= Arr<span class=\"br0\">(</span>I<span class=\"br0\">)</span>;<br/>         Arr<span class=\"br0\">(</span>I<span class=\"br0\">)</span>\u00a0:= Arr<span class=\"br0\">(</span>Index + <span class=\"nu0\">1</span> - I<span class=\"br0\">)</span>;<br/>         Arr<span class=\"br0\">(</span>Index + <span class=\"nu0\">1</span> - I<span class=\"br0\">)</span>\u00a0:= Temp;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> ReverseArray;<br/>\u00a0<br/>   Sorted\u00a0: <span class=\"kw3\">constant</span> NumArrayType\u00a0:= <span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span>;<br/>   Arr   \u00a0: NumArrayType;<br/>   Index \u00a0: Integer;<br/>   Count \u00a0: Integer\u00a0:= <span class=\"nu0\">0</span>;<br/><span class=\"kw1\">begin</span><br/>   Reset<span class=\"br0\">(</span>G<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">loop</span><br/>      FillArray<span class=\"br0\">(</span>Arr<span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Sorted /= Arr;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">loop</span><br/>      Put<span class=\"br0\">(</span>Arr<span class=\"br0\">)</span>;<br/>      Prompt<span class=\"br0\">(</span>Index<span class=\"br0\">)</span>;<br/>      Count\u00a0:= Count + <span class=\"nu0\">1</span>;<br/>      ReverseArray<span class=\"br0\">(</span>Arr, Index<span class=\"br0\">)</span>;<br/>      <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Sorted = Arr;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Put<span class=\"br0\">(</span>Arr<span class=\"br0\">)</span>;<br/>   New_Line;<br/>   Put<span class=\"br0\">(</span><span class=\"st0\">\"Congratulations! You win. It took \"</span> &amp; <br/>         Integer'Image<span class=\"br0\">(</span>Count<span class=\"br0\">)</span> &amp; <span class=\"st0\">\" tries.\"</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> NumberReverse;<br/>\u00a0</pre>"}, {"lang": "Astro", "loc": 14, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">print</span> <span class=\"st0\">'# Number reversal game'</span><br/>\u00a0<br/>var data<span class=\"sy0\">,</span> trials <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>\u00a0<br/><span class=\"kw1\">while</span> data <span class=\"sy0\">==</span> sort data:<br/>    <span class=\"kw3\">random</span>.<span class=\"me1\">shuffle</span> data<br/>\u00a0<br/><span class=\"kw1\">while</span> data <span class=\"sy0\">!=</span> sort data:<br/>    trials +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    flip <span class=\"sy0\">=</span> <span class=\"kw2\">int</span> <span class=\"kw2\">input</span> <span class=\"st0\">'#$trials: LIST: ${join data} Flip how many?: '</span><br/>    data<span class=\"br0\">[</span>:flip<span class=\"br0\">]</span> <span class=\"sy0\">=</span> data<span class=\"br0\">[</span>end:-<span class=\"nu0\">1</span>:flip<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">print</span> <span class=\"st0\">'<span class=\"es0\">\\n</span>You took $trials attempts to put digits in order!'</span><br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 34, "block": "<pre class=\"autohotkey highlighted_source\"><span class=\"co1\">; Submitted by MasterFocus --- http://tiny.cc/iTunis</span><br/>\u00a0<br/>ScrambledList <span class=\"sy0\">:=</span> CorrectList <span class=\"sy0\">:=</span> <span class=\"st0\">\"1 2 3 4 5 6 7 8 9\"</span> <span class=\"co1\">; Declare two identical correct sequences</span><br/><span class=\"kw1\">While</span> <span class=\"br0\">(</span> ScrambledList <span class=\"sy0\">=</span> CorrectList <span class=\"br0\">)</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/Sort.htm\"><span class=\"kw3\">Sort</span></a><span class=\"sy0\">,</span> ScrambledList<span class=\"sy0\">,</span> <a href=\"http://www.autohotkey.com/docs/commands/Random.htm\"><span class=\"kw3\">Random</span></a> D<span class=\"re0\">%A_Space%</span> <span class=\"co1\">; Shuffle one of them inside a While-loop to ensure it's shuffled</span><br/>\u00a0<br/>Attempts <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">While</span> <span class=\"br0\">(</span> ScrambledList <span class=\"sy0\">&lt;&gt;</span> CorrectList <span class=\"br0\">)</span> <span class=\"co1\">; Repeat until the sequence is correct</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/InputBox.htm\"><span class=\"kw3\">InputBox</span></a><span class=\"sy0\">,</span> EnteredNumber<span class=\"sy0\">,</span> Number Reversal Game<span class=\"sy0\">,</span> Attempts so <span class=\"re2\">far: </span><span class=\"re0\">%Attempts%</span>`n`nCurrent <span class=\"re2\">sequence: </span><span class=\"re0\">%ScrambledList%</span>`n`nHow many numbers <span class=\"br0\">(</span>from the <span class=\"kw6\">left</span><span class=\"br0\">)</span> should be flipped?<span class=\"sy0\">,</span> <span class=\"sy0\">,</span> <span class=\"nu0\">400</span><span class=\"sy0\">,</span> <span class=\"nu0\">200</span><br/>  <span class=\"kw1\">If</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#ErrorLevel\"><span class=\"kw2\">ErrorLevel</span></a><br/>    <a href=\"http://www.autohotkey.com/docs/commands/ExitApp.htm\"><span class=\"kw3\">ExitApp</span></a> <span class=\"co1\">; Exit if user presses ESC or Cancel</span><br/>  <span class=\"kw1\">If</span> EnteredNumber is not integer<br/>    <a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">Continue</span></a> <span class=\"co1\">; Discard attempt if entered number is not an integer</span><br/>  <span class=\"kw1\">If</span> <span class=\"br0\">(</span> EnteredNumber <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Continue.htm\"><span class=\"kw3\">Continue</span></a> <span class=\"co1\">; Discard attempt if entered number is &lt;= 1</span><br/>  Attempts<span class=\"sy0\">++</span> <span class=\"co1\">; Increase the number of attempts</span><br/>  <span class=\"co1\">; Reverse the first part of the string and add the second part</span><br/>  <span class=\"co1\">; The entered number is multiplied by 2 to deal with the spaces</span><br/>  ScrambledList <span class=\"sy0\">:=</span> Reverse<span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>ScrambledList<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>EnteredNumber<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>ScrambledList<span class=\"sy0\">,</span>EnteredNumber<span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span> You took <span class=\"re0\">%Attempts%</span> attempts to get the correct sequence<span class=\"sy0\">.</span> <span class=\"co1\">; Final message</span><br/>\u00a0<br/><span class=\"kw1\">Return</span><br/>\u00a0<br/><span class=\"co1\">;-------------------</span><br/>\u00a0<br/>Reverse<span class=\"br0\">(</span>Str<span class=\"br0\">)</span> <span class=\"co1\">; Auxiliar function (flips a string)</span><br/><span class=\"br0\">{</span><br/>  <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> Str<br/>    Out <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a> Out<br/>  <span class=\"kw1\">Return</span> Out<br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 79, "block": "<pre class=\"awk highlighted_source\"><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw5\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Welcome to the number reversal game!<span class=\"es0\">\\n</span>\"</span><br/>\u00a0<br/>\t<span class=\"kw5\">print</span> <span class=\"st0\">\"You must put the numbers in order from 1 to 9.\"</span><br/>\t<span class=\"kw5\">print</span> <span class=\"st0\">\"Your only moves are to reverse groups of numbers\"</span><br/>\t<span class=\"kw5\">print</span> <span class=\"st0\">\"on the left side of the list.\"</span><br/>\u00a0<br/>\tnewgame<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\tprompt<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># start a new game</span><br/><span class=\"kw6\">function</span> newgame<span class=\"br0\">(</span>  i, j, t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># score = number of moves</span><br/>\tscore = <span class=\"nu0\">0</span><br/>\u00a0<br/>\t<span class=\"co1\"># list = list of numbers</span><br/>\t<span class=\"kw4\">split</span><span class=\"br0\">(</span><span class=\"st0\">\"123456789\"</span>, list, <span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"co1\"># Knuth shuffle</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i = <span class=\"nu0\">9</span>; i <span class=\"sy2\">&gt;</span> <span class=\"nu0\">1</span>; i<span class=\"sy3\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\tj = <span class=\"kw4\">int</span><span class=\"br0\">(</span>i <span class=\"sy3\">*</span> <span class=\"kw4\">rand</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>\t\t\tt = list<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>\t\t\tlist<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = list<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>\t\t\tlist<span class=\"br0\">[</span>j<span class=\"br0\">]</span> = t<br/>\t\t<span class=\"br0\">}</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>win<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># numbers in order?</span><br/><span class=\"kw6\">function</span> win<span class=\"br0\">(</span>  i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"co1\"># check if list[1] == 1, list[2] == 2, ...</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i = <span class=\"nu0\">1</span>; i <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">9</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy2\">!=</span> i<span class=\"br0\">)</span> <span class=\"kw6\">return</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw6\">return</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># user prompt</span><br/><span class=\"kw6\">function</span> prompt<span class=\"br0\">(</span>  i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw5\">printf</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>Your list: \"</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i = <span class=\"nu0\">1</span>; i <span class=\"sy2\">&lt;</span> <span class=\"nu0\">9</span>; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"kw5\">printf</span> <span class=\"st0\">\"%d, \"</span>, list<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>\t<span class=\"kw5\">printf</span> <span class=\"st0\">\"%d<span class=\"es0\">\\n</span>\"</span>, list<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>win<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw5\">print</span> <span class=\"st0\">\"YOU WIN!\"</span><br/>\t\t<span class=\"kw5\">printf</span> <span class=\"st0\">\"Your score is\u00a0%d moves.<span class=\"es0\">\\n</span>\"</span>, score<br/>\t\t<span class=\"kw5\">printf</span> <span class=\"st0\">\"Would you like to play again (y/n)? \"</span><br/>\t\tagain = <span class=\"nu0\">1</span><br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw5\">printf</span> <span class=\"st0\">\"How many numbers to reverse? \"</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># user input in $1</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>again<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tagain = <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw4\">tolower</span><span class=\"br0\">(</span><span class=\"kw4\">substr</span><span class=\"br0\">(</span><span class=\"re0\">$1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy2\">==</span> <span class=\"st0\">\"y\"</span><span class=\"br0\">)</span><br/>\t\t\tnewgame<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\texit<br/>\t<span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>\t\tscore <span class=\"sy3\">+</span>= <span class=\"nu0\">1</span><br/>\t\treverse<span class=\"br0\">(</span><span class=\"re0\">$1</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">}</span><br/>\tprompt<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw6\">function</span> reverse<span class=\"br0\">(</span>right,  left, t<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tleft = <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>right <span class=\"sy2\">&gt;</span> left<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tt = list<span class=\"br0\">[</span>left<span class=\"br0\">]</span><br/>\t\tlist<span class=\"br0\">[</span>left<span class=\"br0\">]</span> = list<span class=\"br0\">[</span>right<span class=\"br0\">]</span><br/>\t\tlist<span class=\"br0\">[</span>right<span class=\"br0\">]</span> = t<br/>\t\tleft<span class=\"sy3\">++</span><br/>\t\tright<span class=\"sy3\">--</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">END</span> <span class=\"br0\">{</span> <span class=\"kw5\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>Bye!\"</span> <span class=\"br0\">}</span></pre>"}, {"lang": "BASIC", "loc": 55, "block": "<pre class=\"qbasic highlighted_source\"><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Given a jumbled list of the numbers 1 to 9,\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"you must select how many digits from the left to reverse.\"</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Your goal is to get the digits in order with 1 on the left and 9 on the right.\"</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckrandomize.shtml\"><span class=\"kw3\">RANDOMIZE</span></a> <a href=\"http://www.qbasicnews.com/qboho/qcktimer.shtml\"><span class=\"kw3\">TIMER</span></a><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> nums<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> L0 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> n <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> flp <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> tries <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"sy0\">,</span> again <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>\u00a0<br/><span class=\"co1\">'initial values</span><br/><span class=\"kw1\">FOR</span> L0 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">9</span><br/>    nums<span class=\"br0\">(</span>L0<span class=\"br0\">)</span> <span class=\"sy0\">=</span> L0<br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/><span class=\"kw1\">DO</span>  <span class=\"co1\">'shuffle</span><br/>    <span class=\"kw1\">FOR</span> L0 <span class=\"sy0\">=</span> <span class=\"nu0\">9</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">2</span> <span class=\"kw1\">STEP</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>        n <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qckint.shtml\"><span class=\"kw3\">INT</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckrnd.shtml\"><span class=\"kw3\">RND</span></a> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>L0<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">IF</span> n <span class=\"sy0\">&lt;&gt;</span> L0 <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckswap.shtml\"><span class=\"kw3\">SWAP</span></a> nums<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> nums<span class=\"br0\">(</span>L0<span class=\"br0\">)</span><br/>    <span class=\"kw1\">NEXT</span><br/>    <span class=\"kw1\">FOR</span> L0 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">8</span> <span class=\"co1\">'make sure it's not in order</span><br/>        <span class=\"kw1\">IF</span> nums<span class=\"br0\">(</span>L0<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> nums<span class=\"br0\">(</span>L0 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckexit.shtml\"><span class=\"kw3\">EXIT</span></a> <span class=\"kw1\">DO</span><br/>    <span class=\"kw1\">NEXT</span><br/><span class=\"kw1\">LOOP</span><br/>\u00a0<br/>again <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">DO</span><br/>    <span class=\"kw1\">IF</span> tries <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\" \"</span>;<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> tries; <span class=\"st0\">\":\"</span>;<br/>    <span class=\"kw1\">FOR</span> L0 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">9</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> nums<span class=\"br0\">(</span>L0<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">NEXT</span><br/>\u00a0<br/>    <span class=\"kw1\">IF</span> <a href=\"http://www.qbasicnews.com/qboho/qcknot.shtml\"><span class=\"kw3\">NOT</span></a> again <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckexit.shtml\"><span class=\"kw3\">EXIT</span></a> <span class=\"kw1\">DO</span><br/>\u00a0<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckinput.shtml\"><span class=\"kw3\">INPUT</span></a> <span class=\"st0\">\" -- How many numbers should be flipped\"</span>; flp<br/>    <span class=\"kw1\">IF</span> flp <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> flp <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">IF</span> flp <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9</span> <span class=\"kw1\">THEN</span> flp <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>    <span class=\"kw1\">FOR</span> L0 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"br0\">(</span>flp \\ <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckswap.shtml\"><span class=\"kw3\">SWAP</span></a> nums<span class=\"br0\">(</span>L0<span class=\"br0\">)</span><span class=\"sy0\">,</span> nums<span class=\"br0\">(</span>flp <span class=\"sy0\">-</span> L0 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">NEXT</span><br/>\u00a0<br/>    again <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"co1\">'check for order</span><br/>    <span class=\"kw1\">FOR</span> L0 <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">8</span><br/>        <span class=\"kw1\">IF</span> nums<span class=\"br0\">(</span>L0<span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> nums<span class=\"br0\">(</span>L0 <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>            again <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <a href=\"http://www.qbasicnews.com/qboho/qckexit.shtml\"><span class=\"kw3\">EXIT</span></a> <span class=\"kw1\">FOR</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>    <span class=\"kw1\">NEXT</span><br/>\u00a0<br/>    <span class=\"kw1\">IF</span> flp <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> tries <span class=\"sy0\">=</span> tries <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">LOOP</span><br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a>\u00a0: <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"You took \"</span>; <a href=\"http://www.qbasicnews.com/qboho/qckltrim%24.shtml\"><span class=\"kw3\">LTRIM$</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckrtrim%24.shtml\"><span class=\"kw3\">RTRIM$</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qckstr%24.shtml\"><span class=\"kw3\">STR$</span></a><span class=\"br0\">(</span>tries<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"st0\">\" tries to put the digits in order.\"</span></pre>"}, {"lang": "Batch File", "loc": 72, "block": "<pre class=\"dos highlighted_source\"><span class=\"co2\"><br/>::</span><br/><span class=\"co2\">::Number Reversal Game Task from Rosetta Code Wiki</span><br/><span class=\"co2\">::Batch File Implementation</span><br/><span class=\"co2\">::</span><br/><span class=\"co2\">::Please do not open this from command prompt. </span><br/><span class=\"co2\">::Directly Open the Batch File to play...</span><br/><span class=\"co2\">::</span><br/>\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/title.html\"><span class=\"kw3\">title</span></a> Number Reversal Game<br/>\u00a0<br/>:<span class=\"re0\">begin</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> score=0<br/><span class=\"co2\"><br/>::The ascending list of 9 digits</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> list=123456789<br/><span class=\"co2\"><br/>\u00a0<br/>::Generating a random set of 9 digits...</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> cyc=9<br/>:<span class=\"re0\">gen</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a tmp1=<span class=\"sy0\">%</span><span class=\"re3\">random</span><span class=\"sy0\">%%</span><span class=\"sy0\">%%</span><span class=\"re3\">cyc</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> n<span class=\"sy0\">%</span><span class=\"re3\">cyc</span><span class=\"sy0\">%</span>=<span class=\"sy0\">!</span><span class=\"re2\">list:~%<span class=\"re3\">tmp1</span>%,1</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> tmp2=<span class=\"sy0\">!</span><span class=\"re2\">n</span><span class=\"sy0\">%</span><span class=\"re3\">cyc</span><span class=\"sy0\">%!</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> list=<span class=\"sy0\">!</span><span class=\"re2\">list:%<span class=\"re3\">tmp2</span>%=</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> <span class=\"sy0\">%</span><span class=\"re3\">cyc</span><span class=\"sy0\">%</span>==2 <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a cyc-=1<br/>\t<a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">gen</span><br/><span class=\"sy0\">)</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a n1=<span class=\"sy0\">%</span><span class=\"re3\">list</span><span class=\"sy0\">%</span><br/><span class=\"co2\"><br/>::Display the Game</span><br/>cls<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> ***Number Reversal Game***<br/>:<span class=\"re0\">loopgame</span><br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> Current arrangement: <span class=\"sy0\">%</span><span class=\"re3\">n1</span><span class=\"sy0\">%%</span><span class=\"re3\">n2</span><span class=\"sy0\">%%</span><span class=\"re3\">n3</span><span class=\"sy0\">%%</span><span class=\"re3\">n4</span><span class=\"sy0\">%%</span><span class=\"re3\">n5</span><span class=\"sy0\">%%</span><span class=\"re3\">n6</span><span class=\"sy0\">%%</span><span class=\"re3\">n7</span><span class=\"sy0\">%%</span><span class=\"re3\">n8</span><span class=\"sy0\">%%</span><span class=\"re3\">n9</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /p <a href=\"http://www.ss64.com/nt/move.html\"><span class=\"kw3\">move</span></a>=How many digits from the left should I reverse?<br/><span class=\"co2\"><br/>::Reverse digits according to the player's input</span><br/><span class=\"co2\">::NOTE: The next command uses the fact that in Batch File,</span><br/><span class=\"co2\">::The output for the division operation is only the integer part of the quotient. </span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a lim=<span class=\"sy0\">(%</span><span class=\"re3\">move</span><span class=\"sy0\">%</span>+1<span class=\"sy0\">)</span>/2<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> cyc2=1<br/>:<span class=\"re0\">reverse</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a tmp4=<span class=\"sy0\">%</span><span class=\"re3\">move</span><span class=\"sy0\">%</span>-<span class=\"sy0\">%</span><span class=\"re3\">cyc2</span><span class=\"sy0\">%</span>+1<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> tmp5=<span class=\"sy0\">!</span><span class=\"re2\">n</span><span class=\"sy0\">%</span><span class=\"re3\">cyc2</span><span class=\"sy0\">%!</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> n<span class=\"sy0\">%</span><span class=\"re3\">cyc2</span><span class=\"sy0\">%</span>=<span class=\"sy0\">!</span><span class=\"re2\">n</span><span class=\"sy0\">%</span><span class=\"re3\">tmp4</span><span class=\"sy0\">%!</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> n<span class=\"sy0\">%</span><span class=\"re3\">tmp4</span><span class=\"sy0\">%</span>=<span class=\"sy0\">%</span><span class=\"re3\">tmp5</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> <span class=\"sy0\">%</span><span class=\"re3\">cyc2</span><span class=\"sy0\">%</span>==<span class=\"sy0\">%</span><span class=\"re3\">lim</span><span class=\"sy0\">%</span> <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a cyc2+=1<br/>\t<a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">reverse</span><br/><span class=\"sy0\">)</span><br/><span class=\"co2\"><br/>::Increment the number of moves took by the player</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a score+=1<br/><span class=\"co2\"><br/>::IF already won...</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">n1</span><span class=\"sy0\">%%</span><span class=\"re3\">n2</span><span class=\"sy0\">%%</span><span class=\"re3\">n3</span><span class=\"sy0\">%%</span><span class=\"re3\">n4</span><span class=\"sy0\">%%</span><span class=\"re3\">n5</span><span class=\"sy0\">%%</span><span class=\"re3\">n6</span><span class=\"sy0\">%%</span><span class=\"re3\">n7</span><span class=\"sy0\">%%</span><span class=\"re3\">n8</span><span class=\"sy0\">%%</span><span class=\"re3\">n9</span><span class=\"sy0\">%</span>==123456789 <span class=\"sy0\">(</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a>.<br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">Set</span></a>: <span class=\"sy0\">%</span><span class=\"re3\">n1</span><span class=\"sy0\">%%</span><span class=\"re3\">n2</span><span class=\"sy0\">%%</span><span class=\"re3\">n3</span><span class=\"sy0\">%%</span><span class=\"re3\">n4</span><span class=\"sy0\">%%</span><span class=\"re3\">n5</span><span class=\"sy0\">%%</span><span class=\"re3\">n6</span><span class=\"sy0\">%%</span><span class=\"re3\">n7</span><span class=\"sy0\">%%</span><span class=\"re3\">n8</span><span class=\"sy0\">%%</span><span class=\"re3\">n9</span><span class=\"sy0\">%</span> DONE<span class=\"co3\">^^</span><span class=\"sy0\">!</span><br/>\t<a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> You took <span class=\"sy0\">%</span><span class=\"re3\">score</span><span class=\"sy0\">%</span> moves to arrange the numbers <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> ascending order.<br/>\tpause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/>\t<a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a><br/><span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a>\u00a0:<span class=\"re0\">loopgame</span><br/><span class=\"sy0\">)</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 32, "block": "<pre class=\"text highlighted_source\">      DIM list%(8), done%(8), test%(8)<br/>      list%() = 1, 2, 3, 4, 5, 6, 7, 8, 9<br/>      done%() = list%()<br/>\u00a0<br/>      REM Shuffle:<br/>      REPEAT<br/>        FOR i% = 9 TO 2 STEP -1<br/>          SWAP list%(i%-1), list%(RND(i%)-1)<br/>        NEXT<br/>        test%() = list%() - done%()<br/>      UNTIL MOD(test%()) &lt;&gt; 0<br/>\u00a0<br/>      REM Run the game:<br/>      tries% = 0<br/>      REPEAT<br/>        tries% += 1<br/>        FOR i% = 0 TO 8\u00a0: PRINT\u00a0; list%(i%) \" \"\u00a0;\u00a0: NEXT<br/>        INPUT \": Reverse how many\", n%<br/>        PROCreverse(list%(), n%)<br/>        test%() = list%() - done%()<br/>      UNTIL MOD(test%()) = 0<br/>      PRINT \"You took \"\u00a0; tries% \" attempts.\"<br/>      END<br/>\u00a0<br/>      DEF PROCreverse(a%(), n%)<br/>      IF n% &lt; 2 ENDPROC<br/>      LOCAL i%<br/>      n% -= 1<br/>      FOR i% = 0 TO n% DIV 2<br/>        SWAP a%(i%), a%(n%-i%)<br/>      NEXT<br/>      ENDPROC</pre>"}, {"lang": "Brat", "loc": 19, "block": "<pre class=\"text highlighted_source\">sorted = 1.to 9<br/>length = sorted.length<br/>numbers = sorted.shuffle<br/>\u00a0<br/>#Make certain numbers are shuffled<br/>true? numbers == sorted<br/>  { while { sorted == numbers.shuffle! } }<br/>\u00a0<br/>turns = 0<br/>\u00a0<br/>while { numbers\u00a0!= sorted } {<br/>  print \"#{numbers} - How many to reverse? \"<br/>  num  = g.to_i<br/>  numbers = numbers[0, num - 1].reverse + numbers[num, length]<br/>  turns = turns + 1<br/>}<br/>\u00a0<br/>p numbers<br/>p \"It took #{turns} turns to sort numbers.\"</pre>"}, {"lang": "C", "loc": 32, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">void</span> number_reversal_game<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Number Reversal Game. Type a number to flip the first n numbers.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Win by sorting the numbers in ascending order.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Anything besides numbers are ignored.<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>  |1__2__3__4__5__6__7__8__9|<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> list<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"sy0\">,</span><span class=\"nu0\">8</span><span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>    shuffle_list<span class=\"br0\">(</span>list<span class=\"sy0\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> tries<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> input<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy0\">!</span>check_array<span class=\"br0\">(</span>list<span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"br0\">(</span><span class=\"br0\">(</span>tries<span class=\"sy0\">&lt;</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Round\u00a0%d\u00a0:  \"</span><span class=\"sy0\">,</span> tries<span class=\"br0\">)</span> <span class=\"sy0\">:</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Round\u00a0%d\u00a0: \"</span><span class=\"sy0\">,</span> tries<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span>i<span class=\"sy0\">&lt;</span><span class=\"nu0\">9</span><span class=\"sy0\">;</span>i<span class=\"sy0\">++</span><span class=\"br0\">)</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d  \"</span><span class=\"sy0\">,</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"  Gimme that number:\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"co1\">//Just keep asking for proper input</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html\"><span class=\"kw3\">scanf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%d\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">&amp;</span>input<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span><span class=\"br0\">(</span>input<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"sy0\">&amp;&amp;</span>input<span class=\"sy0\">&lt;</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>%d - Please enter a number between 2 and 9:\"</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span>input<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        tries<span class=\"sy0\">++;</span><br/>        do_flip<span class=\"br0\">(</span>list<span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> input<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"Hurray! You solved it in\u00a0%d moves!<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> tries<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 31, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Linq</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">class</span> Program<br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"kw4\">string</span><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw1\">var</span> r <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?q=new+msdn.microsoft.com\"><span class=\"kw3\">new</span></a> Random<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">var</span> tries <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> sorted <span class=\"sy0\">=</span> Enumerable<span class=\"sy0\">.</span><span class=\"me1\">Range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">var</span> values <span class=\"sy0\">=</span> sorted<span class=\"sy0\">.</span><span class=\"me1\">OrderBy</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> r<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>Enumerable<span class=\"sy0\">.</span><span class=\"me1\">SequenceEqual</span><span class=\"br0\">(</span>sorted, values<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            values <span class=\"sy0\">=</span> sorted<span class=\"sy0\">.</span><span class=\"me1\">OrderBy</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> r<span class=\"sy0\">.</span><span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">ToList</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">//values = \"1 3 9 2 7 5 4 8 6\".Split().Select(x =&gt; int.Parse(x)).ToList();</span><br/>\u00a0<br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>Enumerable<span class=\"sy0\">.</span><span class=\"me1\">SequenceEqual</span><span class=\"br0\">(</span>sorted, values<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">Write</span><span class=\"br0\">(</span><span class=\"st0\">\"# {0}: LIST: {1} - Flip how many? \"</span>, tries, <span class=\"kw4\">String</span><span class=\"sy0\">.</span><span class=\"kw1\">Join</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span>, values<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            values<span class=\"sy0\">.</span><span class=\"me1\">Reverse</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"kw4\">int</span><span class=\"sy0\">.</span><span class=\"me1\">Parse</span><span class=\"br0\">(</span>Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            tries <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>You took {0} attempts to put the digits in order!\"</span>, tries <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 34, "block": "<pre class=\"cpp highlighted_source\"><span class=\"kw4\">void</span> number_reversal_game<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Number Reversal Game. Type a number to flip the first n numbers.\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"You win by sorting the numbers in ascending order.\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Anything besides numbers are ignored.<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\t</span>  |1__2__3__4__5__6__7__8__9|<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> list<span class=\"br0\">[</span><span class=\"nu0\">9</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> <span class=\"br0\">{</span><span class=\"nu0\">1</span>,<span class=\"nu0\">2</span>,<span class=\"nu0\">3</span>,<span class=\"nu0\">4</span>,<span class=\"nu0\">5</span>,<span class=\"nu0\">6</span>,<span class=\"nu0\">7</span>,<span class=\"nu0\">8</span>,<span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>        <span class=\"kw1\">do</span><br/>        <span class=\"br0\">{</span><br/>\t  shuffle_list<span class=\"br0\">(</span>list,<span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">while</span><span class=\"br0\">(</span>check_array<span class=\"br0\">(</span>list, <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">int</span> tries<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> i<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">int</span> input<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"sy3\">!</span>check_array<span class=\"br0\">(</span>list, <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Round \"</span> <span class=\"sy1\">&lt;&lt;</span> tries <span class=\"sy1\">&lt;&lt;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tries<span class=\"sy1\">&lt;</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy4\">?</span> <span class=\"st0\">\"\u00a0:  \"</span> <span class=\"sy4\">:</span> <span class=\"st0\">\"\u00a0: \"</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy4\">;</span>i<span class=\"sy1\">&lt;</span><span class=\"nu0\">9</span><span class=\"sy4\">;</span>i<span class=\"sy2\">++</span><span class=\"br0\">)</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> list<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"  \"</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"  Gimme that number:\"</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"kw1\">while</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">{</span><br/>\t\t\t<span class=\"kw3\">cin</span> <span class=\"sy1\">&gt;&gt;</span> input<span class=\"sy4\">;</span><br/>\t\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>input<span class=\"sy1\">&gt;</span><span class=\"nu0\">1</span><span class=\"sy3\">&amp;&amp;</span>input<span class=\"sy1\">&lt;</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw1\">break</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t\t\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>Please enter a number between 2 and 9:\"</span><span class=\"sy4\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\ttries<span class=\"sy2\">++</span><span class=\"sy4\">;</span><br/>\t\tdo_flip<span class=\"br0\">(</span>list, <span class=\"nu0\">9</span>, input<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Hurray! You solved it in\u00a0%d moves!<span class=\"es1\">\\n</span>\"</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Clojure", "loc": 16, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> flip<span class=\"sy0\">-</span>at <span class=\"br0\">[</span>n coll<span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span><span class=\"br0\">[</span>x y<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">split-at</span> n coll<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">concat</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> x<span class=\"br0\">)</span> y <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> sorted '<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"co1\">; i.e. (range 1 10)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">def</span> unsorted? #<span class=\"br0\">(</span><span class=\"kw1\">not</span><span class=\"sy0\">=</span> <span class=\"sy0\">%</span> sorted<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">loop</span> <span class=\"br0\">[</span>unsorted <span class=\"br0\">(</span><span class=\"kw1\">first</span> <span class=\"br0\">(</span><span class=\"kw1\">filter</span> unsorted? <span class=\"br0\">(</span><span class=\"kw1\">iterate</span> shuffle sorted<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, steps <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> unsorted sorted<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>printf <span class=\"st0\">\"Done! That took you\u00a0%d steps%n\"</span> steps<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span><br/>      <span class=\"br0\">(</span>println unsorted<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>printf <span class=\"st0\">\"Reverse how many? \"</span><span class=\"br0\">)</span> <br/>      <span class=\"br0\">(</span>flush<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>flipcount <span class=\"br0\">(</span>read<span class=\"br0\">)</span><span class=\"br0\">]</span> <br/>        <span class=\"br0\">(</span><span class=\"kw1\">recur</span> <span class=\"br0\">(</span>flip<span class=\"sy0\">-</span>at flipcount unsorted<span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"kw1\">inc</span> steps<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Common Lisp", "loc": 33, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> shuffle<span class=\"sy0\">!</span> <span class=\"br0\">(</span>vector<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>loop for i from <span class=\"br0\">(</span><span class=\"nu0\">1</span>- <span class=\"br0\">(</span><span class=\"kw1\">length</span> vector<span class=\"br0\">)</span><span class=\"br0\">)</span> downto <span class=\"nu0\">1</span><br/>       <span class=\"kw1\">do</span> <span class=\"br0\">(</span>rotatef <span class=\"br0\">(</span><span class=\"kw1\">aref</span> vector i<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">aref</span> vector <span class=\"br0\">(</span><span class=\"kw1\">random</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> slice <span class=\"br0\">(</span>vector start <span class=\"sy0\">&amp;</span>optional end<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>end <span class=\"br0\">(</span><span class=\"kw1\">or</span> end <span class=\"br0\">(</span><span class=\"kw1\">length</span> vector<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span>- end start<span class=\"br0\">)</span><br/>                <span class=\"sy0\">:</span><span class=\"me1\">element-type</span> <span class=\"br0\">(</span>array-element-type vector<span class=\"br0\">)</span><br/>                <span class=\"sy0\">:</span><span class=\"me1\">displaced-to</span> vector<br/>                <span class=\"sy0\">:</span><span class=\"me1\">displaced-index-offset</span> start<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> orderedp <span class=\"br0\">(</span>seq<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">apply</span> #'<span class=\"sy0\">&lt;=</span> <span class=\"br0\">(</span>coerce seq '<span class=\"kw1\">list</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> prompt-<span class=\"kw1\">integer</span> <span class=\"br0\">(</span>prompt<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>format t <span class=\"st0\">\"~A: \"</span> prompt<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>finish-output<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>clear-input<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">parse-integer</span> <span class=\"br0\">(</span>read-line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> game <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>numbers <span class=\"br0\">(</span>vector <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>shuffle<span class=\"sy0\">!</span> numbers<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>score<br/>           <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>score <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ score<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"br0\">(</span>orderedp numbers<span class=\"br0\">)</span> score<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>format t <span class=\"st0\">\"~A~%\"</span> numbers<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"br0\">(</span>prompt-<span class=\"kw1\">integer</span> <span class=\"st0\">\"How many numbers to reverse\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                    <span class=\"br0\">(</span>slice <span class=\"br0\">(</span>slice numbers <span class=\"nu0\">0</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span>replace slice <span class=\"br0\">(</span>nreverse slice<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>format t <span class=\"st0\">\"~A~%Congratulations, you did it in ~D reversals!~%\"</span> numbers score<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Crystal", "loc": 23, "block": "<pre class=\"ruby highlighted_source\">\u00a0<br/>SIZE = <span class=\"nu0\">9</span><br/>ordered = <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">SIZE</span><span class=\"br0\">)</span>.<span class=\"me1\">to_a</span><br/>shuffled = <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"me1\">SIZE</span><span class=\"br0\">)</span>.<span class=\"me1\">to_a</span><br/>\u00a0<br/><span class=\"kw1\">while</span> shuffled == ordered<br/>  shuffled.<span class=\"me1\">shuffle</span>!<br/><span class=\"kw1\">end</span><br/>\u00a0<br/>score = <span class=\"nu0\">0</span><br/><span class=\"kw1\">until</span> shuffled == ordered<br/>  <span class=\"kw3\">print</span> <span class=\"st0\">\"#{shuffled} Enter items to reverse: \"</span><br/>\u00a0<br/>  <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> guess = <span class=\"kw3\">gets</span><br/>  <span class=\"kw1\">next</span> <span class=\"kw1\">unless</span> num = guess.<span class=\"me1\">to_i</span>?<br/>  <span class=\"kw1\">next</span> <span class=\"kw1\">if</span> num <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> num <span class=\"sy0\">&gt;</span> SIZE<br/>\u00a0<br/>  shuffled<span class=\"br0\">[</span><span class=\"nu0\">0</span>, num<span class=\"br0\">]</span> = shuffled<span class=\"br0\">[</span><span class=\"nu0\">0</span>, num<span class=\"br0\">]</span>.<span class=\"me1\">reverse</span><br/>  score <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"#{shuffled} Your score: #{score}\"</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 15, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">random</span><span class=\"sy0\">,</span> std.<span class=\"kw4\">string</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span><br/>       std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> data <span class=\"sy0\">=</span> iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">array</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">do</span> data.<span class=\"me1\">randomShuffle</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span>data.<span class=\"me1\">isSorted</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw4\">int</span> trial<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>data.<span class=\"me1\">isSorted</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        writef<span class=\"br0\">(</span><span class=\"st0\">\"%d:\u00a0%s How many numbers to flip? \"</span><span class=\"sy0\">,</span> <span class=\"sy0\">++</span>trial<span class=\"sy0\">,</span> data<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        data<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">readln</span>.<span class=\"me1\">strip</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"kw4\">uint</span><span class=\"br0\">]</span>.<span class=\"me1\">reverse</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>You took\u00a0%d attempts.\"</span><span class=\"sy0\">,</span> trial<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Egel", "loc": 39, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import \"prelude.eg\"<br/>import \"io.ego\"<br/>import \"random.ego\"<br/>\u00a0<br/>using System<br/>using IO<br/>using List<br/>using Math<br/>\u00a0<br/>def swap =<br/>    [ (I J) XX -&gt; insert I (nth J XX) (insert J (nth I XX) XX) ]<br/>\u00a0<br/>def shuffle =<br/>    [ XX -&gt;<br/>        let INDICES = reverse (fromto 0 ((length XX) - 1)) in<br/>        let SWAPS = map [ I -&gt; I (between 0 I) ] INDICES in<br/>            foldr [I J -&gt; swap I J] XX SWAPS ]<br/>\u00a0<br/>def prompt =<br/>    [ XX TURN -&gt;<br/>        let _ = print TURN \". \" in<br/>        let _ = map [ X -&gt; print X \" \" ] XX in<br/>        let _ = print \"\u00a0: \" in<br/>            toint getline ]<br/>\u00a0<br/>def game =<br/>    [ GOAL SHUFFLE TURN -&gt;<br/>        if SHUFFLE == GOAL then<br/>            let _ = print \"the goal was \" in<br/>            let _ = map [ X -&gt; print X \" \" ] GOAL in<br/>                print \"\\nit took you \" TURN \" turns\\n\"<br/>        else<br/>            let N = prompt SHUFFLE TURN in<br/>            let YY = (reverse (take N SHUFFLE)) ++ (drop N SHUFFLE) in<br/>                game GOAL YY (TURN + 1) ]<br/>\u00a0<br/>def main = <br/>    let XX = fromto 1 9 in game XX (shuffle XX) 0</pre>"}, {"lang": "Eiffel", "loc": 106, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>\tmake<br/>\t\t\t<span class=\"co1\">-- Plays Number Reversal Game.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tcount<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tinitialize_game<br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"Let's play the number reversal game.<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\tacross<br/>\t\t\t\tnumbers <span class=\"kw2\">as</span> ar<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>ar.<span class=\"me1\">item</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%T</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\tis_sorted <span class=\"br0\">(</span>numbers, <span class=\"nu0\">1</span>, numbers.<span class=\"me1\">count</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">%N</span>How many numbers should be reversed?<span class=\"es0\">%N</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t\tio.<span class=\"me1\">read_integer</span><br/>\t\t\t\treverse_array <span class=\"br0\">(</span>io.<span class=\"me1\">last_integer</span><span class=\"br0\">)</span><br/>\t\t\t\tacross<br/>\t\t\t\t\tnumbers <span class=\"kw2\">as</span> ar<br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span>ar.<span class=\"me1\">item</span>.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">%T</span>\"</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\tcount <span class=\"sy0\">:=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\tio.<span class=\"me1\">put_string</span> <span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">%N</span>You needed \"</span> <span class=\"sy0\">+</span> count.<span class=\"me1\">out</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" reversals.\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>\tinitialize_game<br/>\t\t\t<span class=\"co1\">-- Array with numbers from 1 to 9 in a random unsorted order.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\trandom<span class=\"sy0\">:</span> V_RANDOM<br/>\t\t\titem, i<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> random<br/>\t\t\t<span class=\"kw2\">create</span> numbers.<span class=\"me1\">make_empty</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\tnumbers.<span class=\"me1\">count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">9</span> <span class=\"kw2\">and</span> <span class=\"kw2\">not</span> is_sorted <span class=\"br0\">(</span>numbers, <span class=\"nu0\">1</span>, numbers.<span class=\"me1\">count</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\titem <span class=\"sy0\">:=</span> random.<span class=\"me1\">bounded_item</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">if</span> <span class=\"kw2\">not</span> numbers.<span class=\"me1\">has</span> <span class=\"br0\">(</span>item<span class=\"br0\">)</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\tnumbers.<span class=\"me1\">force</span> <span class=\"br0\">(</span>item, i<span class=\"br0\">)</span><br/>\t\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\trandom.<span class=\"me1\">forth</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tnumbers<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\u00a0<br/>\treverse_array <span class=\"br0\">(</span>upper<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><br/>\t\t\t<span class=\"co1\">-- Array numbers with first element up to nth element reversed.</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tupper_positive<span class=\"sy0\">:</span> upper <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t\tar_not_void<span class=\"sy0\">:</span> numbers <span class=\"sy0\">/=</span> <span class=\"kw3\">Void</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ti, j<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\tnew_array<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> new_array.<span class=\"me1\">make_empty</span><br/>\t\t\tnew_array.<span class=\"me1\">deep_copy</span> <span class=\"br0\">(</span>numbers<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t\tj <span class=\"sy0\">:=</span> upper<br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\ti <span class=\"sy0\">&gt;</span> j<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\tnew_array <span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> numbers <span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>\t\t\t\tnew_array <span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> numbers <span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\tj <span class=\"sy0\">:=</span> j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t\tnumbers <span class=\"sy0\">:=</span> new_array<br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tis_sorted <span class=\"br0\">(</span>ar<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span>; l, r<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>\t\t\t<span class=\"co1\">-- Is Array 'ar' sorted in ascending order?</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tar_not_empty<span class=\"sy0\">:</span> <span class=\"kw2\">not</span> ar.<span class=\"me1\">is_empty</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">True</span><br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> <span class=\"br0\">(</span>r <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">if</span> ar <span class=\"br0\">[</span>c.<span class=\"me1\">item</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> ar <span class=\"br0\">[</span>c.<span class=\"me1\">item</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">False</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elena", "loc": 25, "block": "<pre class=\"text highlighted_source\">import system'routines.<br/>import extensions.<br/>\u00a0<br/>program =<br/>[<br/>    var sorted\u00a0:= Array new:9; populate(:n)( n + 1 ).<br/>    var values\u00a0:= sorted clone; randomize:9.<br/>\u00a0<br/>    while (sorted sequenceEqual:values)<br/>    [<br/>        values\u00a0:= sorted randomize:9<br/>    ].<br/>\u00a0<br/>    var tries\u00a0:= Integer new.<br/>    until (sorted sequenceEqual:values)<br/>    [<br/>        tries append:1.<br/>\u00a0<br/>        console print(\"# \",tries,\"\u00a0: LIST\u00a0: \",values,\" - Flip how many?\").<br/>\u00a0<br/>        values sequenceReverse(console readLine; toInt) at:0.<br/>    ].<br/>\u00a0<br/>    console printLine(\"You took \",tries,\" attempts to put the digits in order!\"); readChar.<br/>].</pre>"}, {"lang": "Elixir", "loc": 20, "block": "<pre class=\"text highlighted_source\">defmodule Number_reversal_game do<br/>  def start( n ) when n &gt; 1 do<br/>    IO.puts \"Usage: #{usage(n)}\"<br/>    targets = Enum.to_list( 1..n )<br/>    jumbleds = Enum.shuffle(targets)<br/>    attempt = loop( targets, jumbleds, 0 )<br/>    IO.puts \"Numbers sorted in #{attempt} atttempts\"<br/>  end<br/>\u00a0<br/>  defp loop( targets, targets, attempt ), do: attempt<br/>  defp loop( targets, jumbleds, attempt ) do<br/>    IO.inspect jumbleds<br/>    {n,_} = IO.gets(\"How many digits from the left to reverse? \") |&gt; Integer.parse<br/>    loop( targets, Enum.reverse_slice(jumbleds, 0, n), attempt+1 )<br/>  end<br/>\u00a0<br/>  defp usage(n), do: \"Given a jumbled list of the numbers 1 to #{n} that are definitely not in ascending order, show the list then ask the player how many digits from the left to reverse. Reverse those digits, then ask again, until all the digits end up in ascending order.\"<br/>end<br/>\u00a0<br/>Number_reversal_game.start( 9 )</pre>"}, {"lang": "Erlang", "loc": 25, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> number_reversal_game <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span>task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> start<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">start</span><span class=\"br0\">(</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Usage: ~s~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re3\">usage</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Targets</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">N</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Jumbleds</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">X</span><span class=\"sy3\">||</span><span class=\"br0\">{</span><span class=\"re5\">_</span><span class=\"sy1\">,</span><span class=\"re5\">X</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">sort</span><span class=\"br0\">(</span><span class=\"br0\">[</span> <span class=\"br0\">{</span><a href=\"http://erlang.org/doc/man/random.html\"><span class=\"kw5\">random</span></a>:<span class=\"re3\">uniform</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re5\">Y</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">Y</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Targets</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Attempt</span> <span class=\"sy3\">=</span> <span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">Targets</span><span class=\"sy1\">,</span> <span class=\"re5\">Jumbleds</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"Numbers sorted in ~p atttempts~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Attempt</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">start</span><span class=\"br0\">(</span> <span class=\"nu0\">9</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">Targets</span><span class=\"sy1\">,</span> <span class=\"re5\">Targets</span><span class=\"sy1\">,</span> <span class=\"re5\">Attempt</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re5\">Attempt</span><span class=\"sy1\">;</span><br/><span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">Targets</span><span class=\"sy1\">,</span> <span class=\"re5\">Jumbleds</span><span class=\"sy1\">,</span> <span class=\"re5\">Attempt</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Jumbleds</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span>ok<span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"re5\">N</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fread</span><span class=\"br0\">(</span> <span class=\"st0\">\"How many digits from the left to reverse? \"</span><span class=\"sy1\">,</span> <span class=\"st0\">\"~d\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">Lefts</span><span class=\"sy1\">,</span> <span class=\"re5\">Rights</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">split</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Jumbleds</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re3\">loop</span><span class=\"br0\">(</span> <span class=\"re5\">Targets</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span><span class=\"re5\">Lefts</span><span class=\"br0\">)</span> <span class=\"sy3\">++</span> <span class=\"re5\">Rights</span><span class=\"sy1\">,</span> <span class=\"re5\">Attempt</span> <span class=\"sy3\">+</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">usage</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <a href=\"http://erlang.org/doc/man/io_lib.html\"><span class=\"kw5\">io_lib</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span> <span class=\"st0\">\"Given a jumbled list of the numbers 1 to ~p that are definitely not in ascending order, show the list then ask the player how many digits from the left to reverse. Reverse those digits, then ask again, until all the digits end up in ascending order.\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">N</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euphoria", "loc": 55, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">include</span> get.e<br/>\u00a0<br/><span class=\"kw1\">function</span> accending<span class=\"br0\">(</span><span class=\"kw2\">sequence</span> s<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"kw2\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span><span class=\"sy1\">-</span><span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> s<span class=\"br0\">[</span>i<span class=\"br0\">]</span>&gt;s<span class=\"br0\">[</span>i<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"kw1\">then</span><br/>            <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"Given a jumbled list of the numbers 1 to 9,<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"you must select how many digits from the left to reverse.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">puts</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"Your goal is to get the digits in order with 1 on the left and 9 on the right.<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">sequence</span> nums<br/>nums <span class=\"sy1\">=</span> <span class=\"kw2\">repeat</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy2\">,</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/><span class=\"kw2\">integer</span> n<span class=\"sy2\">,</span>flp<span class=\"sy2\">,</span>tries<span class=\"sy2\">,</span>temp<br/>\u00a0<br/><span class=\"co1\">-- initial values</span><br/><span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">9</span> <span class=\"kw1\">do</span><br/>    nums<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> i<br/><span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\u00a0<br/><span class=\"kw1\">while</span> accending<span class=\"br0\">(</span>nums<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"co1\">-- shuffle</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">9</span> <span class=\"kw1\">do</span><br/>        n <span class=\"sy1\">=</span> <span class=\"kw2\">rand</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>        temp <span class=\"sy1\">=</span> nums<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/>        nums<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy1\">=</span> nums<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        nums<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> temp<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>\u00a0<br/>tries <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">while</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"%2d\u00a0: \"</span><span class=\"sy2\">,</span>tries<span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">9</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"%d \"</span><span class=\"sy2\">,</span>nums<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> accending<span class=\"br0\">(</span>nums<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">exit</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>\u00a0<br/>    flp <span class=\"sy1\">=</span> prompt_number<span class=\"br0\">(</span><span class=\"st0\">\" -- How many numbers should be flipped? \"</span><span class=\"sy2\">,</span><span class=\"br0\">{</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"nu0\">9</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> flp<span class=\"sy1\">/</span><span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>        temp <span class=\"sy1\">=</span> nums<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        nums<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy1\">=</span> nums<span class=\"br0\">[</span>flp<span class=\"sy1\">-</span>i<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        nums<span class=\"br0\">[</span>flp<span class=\"sy1\">-</span>i<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy1\">=</span> temp<br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>\u00a0<br/>    tries <span class=\"sy1\">+=</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">while</span><br/>\u00a0<br/><span class=\"kw2\">printf</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy2\">,</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>You took\u00a0%d tries to put the digits in order.\"</span><span class=\"sy2\">,</span> tries<span class=\"br0\">)</span></pre>"}, {"lang": "F#", "loc": 21, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">let</span> rand <span class=\"sy0\">=</span> System.<span class=\"me1\">Random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"kw1\">true</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> randomNums<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> xs <span class=\"sy0\">=</span> <span class=\"br0\">[</span>|for i <span class=\"kw1\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">9</span> <span class=\"sy0\">-&gt;</span> rand.<span class=\"me1\">Next</span><span class=\"br0\">(</span><span class=\"br0\">)</span>, i|<span class=\"br0\">]</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">sort</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">map</span> <span class=\"kw3\">snd</span><br/>    <span class=\"kw1\">if</span> xs <span class=\"sy0\">=</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">sort</span> xs <span class=\"kw1\">then</span> randomNums<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">else</span> xs<br/>\u00a0<br/>  <span class=\"kw1\">let</span> xs <span class=\"sy0\">=</span> randomNums<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> suffix <span class=\"sy0\">=</span> <span class=\"kw1\">function</span> | <span class=\"nu0\">1</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"st\"</span> | <span class=\"nu0\">2</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"nd\"</span> | <span class=\"nu0\">3</span> <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"rd\"</span> | _ <span class=\"sy0\">-&gt;</span> <span class=\"st0\">\"th\"</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> move i <span class=\"sy0\">=</span><br/>    printf <span class=\"st0\">\"<span class=\"es0\">\\n</span>%A<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>Reverse how many digits from the left in your\u00a0%i%s move?\u00a0: \"</span> xs i <span class=\"br0\">(</span>suffix i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <span class=\"kw3\">stdin</span>.<span class=\"me1\">ReadLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">|&gt;</span> <span class=\"kw4\">int</span><br/>    <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">blit</span> <span class=\"br0\">(</span><a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">rev</span> xs.<span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"me1\">n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"nu0\">0</span> xs <span class=\"nu0\">0</span> n<br/>    <span class=\"kw1\">if</span> xs <span class=\"sy0\">&lt;&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Array</span></a>.<span class=\"me1\">sort</span> xs <span class=\"kw1\">then</span><br/>        move <span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>        printfn <span class=\"st0\">\"<span class=\"es0\">\\n</span>You took\u00a0%i moves to put the digits in order!<span class=\"es0\">\\n</span>\"</span> i<br/>\u00a0<br/>  move <span class=\"nu0\">1</span></pre>"}, {"lang": "Factor", "loc": 30, "block": "<pre class=\"text highlighted_source\">USING: formatting io kernel math math.parser math.ranges<br/>namespaces random sequences strings\u00a0;<br/>IN: rosetta.number-reversal<br/>\u00a0<br/>: make-jumbled-array ( -- sorted jumbled )<br/>    CHAR: 1 CHAR: 9 [a,b] [ 1string ] map dup clone randomize<br/>    [ 2dup = ] [ randomize ] while\u00a0;<br/>\u00a0<br/>SYMBOL: trials<br/>\u00a0<br/>: prompt ( jumbled -- n )<br/>    trials get \"#%2d: \" printf<br/>    \", \" join write<br/>    \"   Flip how many? \" write flush<br/>    readln string&gt;number\u00a0;<br/>\u00a0<br/>: game-loop ( sorted jumbled -- )<br/>    2dup = [<br/>        2drop trials get<br/>        \"\\nYou took\u00a0%d attempts to put the digits in order!\\n\" printf<br/>        flush<br/>    ] [<br/>        trials [ 1 + ] change<br/>        dup dup prompt head-slice reverse! drop<br/>        game-loop<br/>    ] if\u00a0;<br/>\u00a0<br/>: play ( -- )<br/>    0 trials set<br/>    make-jumbled-array game-loop\u00a0;</pre>"}, {"lang": "Forth", "loc": 50, "block": "<pre class=\"text highlighted_source\">include random.fs<br/>\u00a0<br/>variable flips<br/>create nums 9 cells allot<br/>\u00a0<br/>: .array ( addr len -- ) 0\u00a0?do dup @ . cell+ loop drop\u00a0;<br/>\u00a0<br/>: shuffle ( addr len -- )<br/>  2 swap do<br/>    dup i random cells +<br/>    over @ over @  swap<br/>    rot \u00a0! over\u00a0!<br/>    cell+<br/>  -1 +loop drop\u00a0;<br/>\u00a0<br/>: sorted? ( addr len -- )<br/>  1- cells bounds\u00a0?do<br/>    i <a class=\"__cf_email__\" data-cfemail=\"774537\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt; if unloop false exit then<br/>  cell +loop true\u00a0;<br/>\u00a0<br/>: init<br/>  0 flips\u00a0!<br/>  nums 10 1 do<br/>    i over\u00a0!  cell+<br/>  loop drop<br/>  begin nums 9 shuffle nums 9 sorted? 0= until <br/>  cr nums 9 .array\u00a0;<br/>\u00a0<br/>: reverse ( addr len -- )<br/>  1- cells bounds<br/>  begin 2dup &gt;<br/>  while over @ over @ &gt;r over\u00a0! over r&gt; swap\u00a0!<br/>        cell+ swap 1 cells - swap<br/>  repeat 2drop\u00a0;<br/>\u00a0<br/>: flip ( n -- )<br/>  dup 2 10 within 0= if . .\" must be within 2 to 9\" exit then<br/>  nums swap reverse<br/>  1 flips +!<br/>  nums 9 sorted? if<br/>    cr .\" Got it in \" flips @ . .\" tries!\"<br/>  else<br/>    cr nums 9 .array<br/>  then\u00a0;<br/>\u00a0<br/>init <br/>1 2 8 5 7 6 9 4 3  ok<br/>7 flip <br/>9 6 7 5 8 2 1 4 3  ok<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 54, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> Reversal_game<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">list</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">1</span>, <span class=\"nu0\">2</span>, <span class=\"nu0\">3</span>, <span class=\"nu0\">4</span>, <span class=\"nu0\">5</span>, <span class=\"nu0\">6</span>, <span class=\"nu0\">7</span>, <span class=\"nu0\">8</span>, <span class=\"nu0\">9</span> <span class=\"sy0\">/</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">pos</span>, attempts <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\u00a0<br/>  <span class=\"kw1\">call</span> <span class=\"kw4\">random_seed</span><br/>  <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>sorted<span class=\"br0\">(</span>list<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> Shuffle<span class=\"br0\">(</span>list<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(9i5)\"</span><span class=\"br0\">)</span> list<br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">do</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw2\">.<span class=\"kw4\">not</span>.</span> Sorted<span class=\"br0\">(</span>list<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a)\"</span>, <span class=\"kw1\">advance</span><span class=\"sy0\">=</span><span class=\"st0\">\"no\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"How many numbers from the left do you want to reverse?\u00a0: \"</span><br/>    read<span class=\"sy0\">*</span>, pos<br/>    attempts <span class=\"sy0\">=</span> attempts <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    list<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>pos<span class=\"br0\">)</span> <span class=\"sy0\">=</span> list<span class=\"br0\">(</span>pos<span class=\"sy0\">:</span><span class=\"nu0\">1</span><span class=\"sy0\">:-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(9i5)\"</span><span class=\"br0\">)</span> list<br/>    write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(a,i0,a)\"</span><span class=\"br0\">)</span> <span class=\"st0\">\"Congratulations! Solved in \"</span>, attempts, <span class=\"st0\">\" attempts\"</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">subroutine</span> Shuffle<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">inout</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, randpos, temp<br/>  <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">r</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>, <span class=\"nu0\">2</span>, <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">call</span> <span class=\"kw4\">random_number</span><span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>    randpos <span class=\"sy0\">=</span> <span class=\"kw4\">int</span><span class=\"br0\">(</span>r <span class=\"sy0\">*</span> i<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    temp <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>randpos<span class=\"br0\">)</span><br/>    a<span class=\"br0\">(</span>randpos<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    a<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> temp<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Sorted<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw3\">logical</span> <span class=\"sy0\">::</span> <span class=\"me2\">Sorted</span><br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">size</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>list<span class=\"br0\">(</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/=</span> list<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      Sorted <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><br/>      <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  Sorted <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "Go", "loc": 43, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math/rand\"</span><br/>    <span class=\"st0\">\"sort\"</span><br/>    <span class=\"st0\">\"time\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    rand<span class=\"sy3\">.</span>Seed<span class=\"sy1\">(</span>time<span class=\"sy3\">.</span>Now<span class=\"sy1\">()</span><span class=\"sy3\">.</span>UnixNano<span class=\"sy1\">())</span><br/>    <span class=\"kw1\">var</span> k <span class=\"sy1\">[]</span><span class=\"kw4\">int</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        k <span class=\"sy2\">=</span> rand<span class=\"sy3\">.</span>Perm<span class=\"sy1\">(</span><span class=\"nu0\">9</span><span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"kw1\">range</span> k <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> r <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                k<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">9</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>sort<span class=\"sy3\">.</span>IntsAreSorted<span class=\"sy1\">(</span>k<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">break</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"Sort digits by reversing a number of digits on the left.\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">var</span> n<span class=\"sy1\">,</span> score <span class=\"kw4\">int</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"Digits: \"</span><span class=\"sy1\">,</span> k<span class=\"sy1\">,</span> <span class=\"st0\">\". How many to reverse? \"</span><span class=\"sy1\">)</span><br/>        <span class=\"nu2\">i</span><span class=\"sy1\">,</span> _ <span class=\"sy2\">:=</span> fmt<span class=\"sy3\">.</span>Scanln<span class=\"sy1\">(</span>&amp;n<span class=\"sy1\">)</span><br/>        score<span class=\"sy2\">++</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> n &lt; <span class=\"nu0\">2</span> <span class=\"sy3\">||</span> n &gt; <span class=\"nu0\">9</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>(Enter a number from 2 to 9)\"</span><span class=\"sy1\">)</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">for</span> l<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> n<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">;</span> l &lt; r<span class=\"sy1\">;</span> l<span class=\"sy1\">,</span> r <span class=\"sy2\">=</span> l<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> r<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            k<span class=\"sy1\">[</span>l<span class=\"sy1\">],</span> k<span class=\"sy1\">[</span>r<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> k<span class=\"sy1\">[</span>r<span class=\"sy1\">],</span> k<span class=\"sy1\">[</span>l<span class=\"sy1\">]</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> sort<span class=\"sy3\">.</span>IntsAreSorted<span class=\"sy1\">(</span>k<span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"Digits: \"</span><span class=\"sy1\">,</span> k<span class=\"sy1\">,</span> <span class=\"st0\">\".<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>            fmt<span class=\"sy3\">.</span><span class=\"me1\">Print</span><span class=\"sy1\">(</span><span class=\"st0\">\"Your score: \"</span><span class=\"sy1\">,</span> score<span class=\"sy1\">,</span> <span class=\"st0\">\".  Good job.<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>            <span class=\"kw1\">return</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 15, "block": "<pre class=\"groovy highlighted_source\">sorted <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>arr    <span class=\"sy0\">=</span> sorted.<span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20void\"><span class=\"kw4\">void</span></a> flipstart<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> arr<span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> arr<span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"sy0\">&lt;</span>n<span class=\"br0\">]</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20reverse\"><span class=\"kw5\">reverse</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a> steps <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>arr<span class=\"sy0\">==</span>sorted<span class=\"br0\">)</span> <a href=\"http://www.google.de/search?as_q=Collections&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Collections</span></a>.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span>arr<span class=\"br0\">)</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>arr<span class=\"sy0\">!=</span>sorted<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> arr.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20join\"><span class=\"kw5\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20print\"><span class=\"kw8\">print</span></a> <span class=\"st0\">'Reverse how many? '</span><br/>    <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> flipcount <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?as_q=System&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">System</span></a>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20in\"><span class=\"kw1\">in</span></a>.<span class=\"me1\">readLine</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    flipstart<span class=\"br0\">(</span> flipcount.<span class=\"me1\">toInteger</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>    steps <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println\"><span class=\"kw8\">println</span></a> <span class=\"st0\">\"Done! That took you ${steps} steps\"</span></pre>"}, {"lang": "Haskell", "loc": 35, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Arrow<br/><span class=\"kw1\">import</span> Rosetta<span class=\"sy0\">.</span>Knuthshuffle<br/>\u00a0<br/>numberRevGame <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">let</span> goal <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span><span class=\"br0\">]</span><br/>\u00a0<br/>      shuffle xs <span class=\"sy0\">=</span><br/>\t<span class=\"kw1\">if</span> xs <span class=\"sy0\">/=</span> goal <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> xs<br/>\t\t    <span class=\"kw1\">else</span> shuffle <span class=\"sy0\">=&lt;&lt;</span> knuthShuffle xs<br/>\u00a0<br/>      prefixFlipAt k <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:uncurry\"><span class=\"kw3\">uncurry</span></a> <span class=\"br0\">(</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"sy0\">.</span> first <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a><span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:splitAt\"><span class=\"kw3\">splitAt</span></a> k<br/>\u00a0<br/>      prompt r ry <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>\t <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr\"><span class=\"kw3\">putStr</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> r <span class=\"sy0\">++</span> <span class=\"st0\">\". \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <span class=\"br0\">(</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a><span class=\"br0\">)</span> ry<br/>\t\t   <span class=\"sy0\">++</span> <span class=\"st0\">\" How many to flip? \"</span><br/>\t answ <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:getLine\"><span class=\"kw3\">getLine</span></a><br/>\t <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a> answ<br/>\t <span class=\"kw1\">if</span> n<span class=\"sy0\">&lt;</span><span class=\"nu0\">10</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"nu0\">0</span><span class=\"sy0\">&lt;</span>n <span class=\"kw1\">then</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:return\"><span class=\"kw3\">return</span></a> n<br/>\t    <span class=\"kw1\">else</span> <span class=\"kw1\">do</span><br/>\t      <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"Error. The number should be between 0 and 10. Try again\"</span><br/>\t      prompt r ry<br/>\u00a0<br/>      playNRG r nrs <span class=\"sy0\">=</span> <br/>\t<span class=\"kw1\">if</span> nrs <span class=\"sy0\">==</span> goal <span class=\"kw1\">then</span> <span class=\"kw1\">do</span><br/>\t  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"The answer is: \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:flip\"><span class=\"kw3\">flip</span></a> <span class=\"br0\">(</span><span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"st0\">\" \"</span><span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a><span class=\"br0\">)</span> nrs<br/>\t  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <span class=\"st0\">\"It took you \"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> r <span class=\"sy0\">++</span> <span class=\"st0\">\" attempts to sort the numbers.\"</span><br/>\t  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"\"</span><br/>\t\t<span class=\"kw1\">else</span> <span class=\"kw1\">do</span><br/>\t\t  answ <span class=\"sy0\">&lt;-</span> prompt r nrs <br/>\t\t  playNRG <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:succ\"><span class=\"kw3\">succ</span></a> r<span class=\"br0\">)</span> <span class=\"br0\">(</span>prefixFlipAt answ nrs<span class=\"br0\">)</span><br/>\u00a0<br/>  start <span class=\"sy0\">&lt;-</span> shuffle goal<br/>\u00a0<br/>  playNRG <span class=\"nu0\">1</span> start</pre>"}, {"lang": "HicEst", "loc": 23, "block": "<pre class=\"hicest highlighted_source\">   <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Messagebox<span class=\"br0\">)</span> <span class=\"st0\">\"You took \"</span><span class=\"sy1\">,</span> Reversals<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" attempts\"</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> Reversals<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">DIMENSION</span> digits<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> temp<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>\u00a0<br/>  digits <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">9</span> <span class=\"co1\">! create the shuffled digits</span><br/> <span class=\"nu0\">1</span>   x <span class=\"sy1\">=</span> <span class=\"kw1\">CEILING</span><span class=\"br0\">(</span> <span class=\"kw1\">RAN</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>     <span class=\"kw1\">IF</span><span class=\"br0\">(</span> <span class=\"kw1\">INDEX</span><span class=\"br0\">(</span>digits<span class=\"sy1\">,</span> x<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">GOTO</span> <span class=\"nu0\">1</span> <span class=\"co1\">! HicEst has no WHILE</span><br/>     digits<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy1\">=</span> x<br/>  <span class=\"kw1\">ENDDO</span><br/>\u00a0<br/>  <span class=\"kw1\">DO</span> Reversals <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> 1E6 <span class=\"co1\">! HicEst needs an upper bound</span><br/>     <span class=\"kw1\">DLG</span><span class=\"br0\">(</span>NameEdit<span class=\"sy1\">=</span>Flips<span class=\"sy1\">,</span> DNum<span class=\"sy1\">,</span> <span class=\"kw1\">MIn</span><span class=\"sy1\">=</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span> <span class=\"kw1\">MAx</span><span class=\"sy1\">=</span><span class=\"nu0\">9</span><span class=\"sy1\">,</span> Text<span class=\"sy1\">=</span>digits<span class=\"br0\">)</span><br/>     <span class=\"kw1\">DO</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> Flips<span class=\"sy1\">/</span><span class=\"nu0\">2</span><br/>        swap <span class=\"sy1\">=</span> digits<span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>        digits<span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy1\">=</span> digits<span class=\"br0\">(</span>Flips<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">-</span>j<span class=\"br0\">)</span><br/>        digits<span class=\"br0\">(</span>Flips<span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">-</span>j<span class=\"br0\">)</span> <span class=\"sy1\">=</span> swap<br/>     <span class=\"kw1\">ENDDO</span><br/>     temp <span class=\"sy1\">=</span> digits<span class=\"br0\">(</span><span class=\"sy2\">$</span><span class=\"sy1\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">&gt;</span> digits<span class=\"br0\">(</span><span class=\"sy2\">$</span><span class=\"br0\">)</span> <span class=\"co1\">! $ = left side index</span><br/>     <span class=\"kw1\">IF</span><span class=\"br0\">(</span> <span class=\"kw1\">SUM</span><span class=\"br0\">(</span>temp<span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">8</span> <span class=\"br0\">)</span> <span class=\"kw1\">RETURN</span><br/>  <span class=\"kw1\">ENDDO</span><br/><span class=\"kw1\">END</span></pre>"}, {"lang": "Icon and Unicon", "loc": 69, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span>cq<span class=\"br0\">)</span>                                             <span class=\"co1\"># Number Reversal Game</span><br/><span class=\"kw2\">local</span> x<span class=\"sy1\">,</span>nums<span class=\"sy1\">,</span>R<span class=\"sy1\">,</span>flips<br/>\u00a0<br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> PROTECT <span class=\"br0\">[</span><span class=\"st0\">\"WIN\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"ASK\"</span><span class=\"br0\">]</span><br/><span class=\"sy2\">$</span><span class=\"kw6\">define</span> MAGIC   <span class=\"br0\">[</span><span class=\"st0\">\"xyzzy\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"abracadabra\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"hocus\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"pocus\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"presto\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"changeo\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"open\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"sesame\"</span><span class=\"sy1\">,</span><span class=\"st0\">\"irs\"</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw4\">put</span><span class=\"br0\">(</span>cq<span class=\"sy1\">,</span><span class=\"st0\">\"game\"</span><span class=\"br0\">)</span>                                                 <span class=\"co1\"># start command queue - use command line</span><br/>rule <span class=\"sy1\">:=</span> <span class=\"kw4\">string</span><span class=\"br0\">(</span><span class=\"sy1\">&amp;</span>digits<span class=\"sy1\">--</span><span class=\"st0\">'0'</span><span class=\"br0\">)</span>                                   <span class=\"co1\"># ruler and move commands</span><br/><span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>protected <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"kw4\">map</span><span class=\"br0\">(</span><span class=\"sy1\">!</span>PROTECT<span class=\"br0\">)</span><span class=\"br0\">)</span>                      <span class=\"co1\"># protected commands</span><br/><span class=\"kw1\">every</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>magic <span class=\"sy1\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"sy1\">!</span>MAGIC<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">while</span> x <span class=\"sy1\">:=</span> <span class=\"kw4\">get</span><span class=\"br0\">(</span>cq<span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"MOVE\"</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span>                               <span class=\"co1\"># command from queue or ask for move</span><br/>   <span class=\"kw1\">case</span> x <span class=\"kw1\">of</span> <span class=\"br0\">{</span>                      <br/>      <span class=\"st0\">\"help\"</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"h\"</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"?\"</span> <span class=\"sy1\">:</span>                                     <span class=\"co1\"># --- start of user facing commands ---</span><br/>         <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Input a position.  The list will be flipped left to right at that point.<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>\t       <span class=\"st0\">\"You win when the list is sorted.<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>\t       <span class=\"st0\">\"Commands:<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>               <span class=\"st0\">\"   help, h,\u00a0? - shows this<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>               <span class=\"st0\">\"   new, g     - new game<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span>\t\t\t   <br/>               <span class=\"st0\">\"   ruler, r   - shows a ruler<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>               <span class=\"st0\">\"   show, s    - shows the list<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>               <span class=\"st0\">\"   &lt;n&gt;        - flips the list at ruler position n<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>               <span class=\"st0\">\"   quit, q    - quit<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>               <span class=\"st0\">\"and various magic words.<span class=\"es0\">\\n</span>\"</span><br/>               <span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"kw4\">put</span><span class=\"br0\">(</span>cq<span class=\"sy1\">,</span><span class=\"st0\">\"rule\"</span><span class=\"br0\">)</span><br/>      <span class=\"st0\">\"game\"</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"g\"</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"new\"</span>  <span class=\"sy1\">:</span> <span class=\"br0\">{</span><br/>         <span class=\"kw4\">put</span><span class=\"br0\">(</span>cq<span class=\"sy1\">,</span><span class=\"st0\">\"help\"</span><span class=\"br0\">)</span>                                     <br/>         flips <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><br/>         nums <span class=\"sy1\">:=</span> rule<br/>         <span class=\"kw1\">until</span> nums <span class=\"sy1\">~==</span> rule <span class=\"kw1\">do</span> <br/>         <span class=\"kw1\">every</span> <span class=\"sy1\">!</span>nums <span class=\"sy1\">:=:</span> <span class=\"sy1\">?</span>nums                                 <span class=\"co1\"># shuffle</span><br/>         <span class=\"br0\">}</span><br/>      <span class=\"st0\">\"rule\"</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"ruler\"</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"r\"</span> <span class=\"sy1\">:</span> <br/>         <span class=\"kw4\">put</span><span class=\"br0\">(</span>cq<span class=\"sy1\">,</span><span class=\"st0\">\"show\"</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy1\">||</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">|</span> <span class=\"sy1\">!</span><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"sy1\">/</span>mirror <span class=\"kw1\">then</span> rule <span class=\"kw1\">else</span> <span class=\"kw4\">reverse</span><span class=\"br0\">(</span>rule<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span> <br/>      <span class=\"st0\">\"show\"</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"s\"</span> <span class=\"sy1\">:</span><br/>         <span class=\"kw1\">every</span> <span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span> <span class=\"sy1\">||</span> <span class=\"st0\">\"=\"</span> <span class=\"sy1\">|</span> <span class=\"sy1\">!</span>nums <span class=\"sy1\">|</span> <span class=\"st0\">\" =<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span> <br/>      <span class=\"sy1\">!</span>rule <span class=\"sy1\">:</span> <span class=\"br0\">{</span>                                                <span class=\"co1\">#  0 - 9 for flipping</span><br/>         <span class=\"kw1\">if</span> <span class=\"sy1\">/</span>mirror <span class=\"kw1\">then</span> nums<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">+:</span>x<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">reverse</span><span class=\"br0\">(</span>nums<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">+:</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span> <br/>         <span class=\"kw1\">else</span> nums<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">-:</span>x<span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">reverse</span><span class=\"br0\">(</span>nums<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">-:</span>x<span class=\"br0\">]</span><span class=\"br0\">)</span> \t\t <br/>         flips <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><br/>         <span class=\"kw4\">put</span><span class=\"br0\">(</span>cq<span class=\"sy1\">,</span><span class=\"kw1\">if</span> nums <span class=\"sy1\">==</span> rule <span class=\"kw1\">then</span> <span class=\"st0\">\"WIN\"</span> <span class=\"kw1\">else</span> <span class=\"st0\">\"show\"</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">}</span><br/>      <span class=\"st0\">\"quit\"</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"q\"</span> <span class=\"sy1\">:</span> <br/>         <span class=\"kw1\">break</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Goodbye.\"</span><span class=\"br0\">)</span> <br/>      <span class=\"sy1\">!</span>magic<span class=\"sy1\">:</span>                                                  <span class=\"co1\"># --- start of magic </span><br/>         <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"That has no power here.  Try again!\"</span><span class=\"br0\">)</span> <br/>      <span class=\"st0\">\"magic\"</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"mirror\"</span> <span class=\"sy1\">|</span> <span class=\"st0\">\"m\"</span> <span class=\"sy1\">:</span> <span class=\"br0\">{</span>                        <br/>         mirror <span class=\"sy1\">:=</span> <span class=\"kw1\">if</span> <span class=\"sy1\">/</span>mirror <span class=\"kw1\">then</span> <span class=\"nu0\">1</span> <span class=\"kw1\">else</span> <span class=\"sy1\">&amp;</span><span class=\"kw3\">null</span> <br/>         <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Wait! What is this? The writing has reversed.\"</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">}</span>\t\t   <br/>      <span class=\"sy1\">!</span>protected<span class=\"sy1\">:</span>                                              <span class=\"co1\"># --- Start of internal (upper case) and protected commands</span><br/>         <span class=\"kw4\">put</span><span class=\"br0\">(</span>cq<span class=\"sy1\">,?</span>rule<span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Tisk, Tisk, don't try and cheat.  Take a random penalty flip!\"</span><span class=\"br0\">)</span> \t\t  <br/>      <span class=\"st0\">\"MOVE\"</span> <span class=\"sy1\">:</span>                                                  <br/>         <span class=\"kw4\">put</span><span class=\"br0\">(</span>cq<span class=\"sy1\">,</span>ask<span class=\"br0\">(</span><span class=\"st0\">\"Command?\u00a0: \"</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> \t\t <br/>      <span class=\"st0\">\"WIN\"</span> <span class=\"sy1\">:</span> <br/>         <span class=\"kw4\">put</span><span class=\"br0\">(</span>cq<span class=\"sy1\">,</span><span class=\"st0\">\"ASK\"</span><span class=\"br0\">)</span> <span class=\"sy1\">&amp;</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Congratulations you won in \"</span><span class=\"sy1\">,</span>flips<span class=\"sy1\">,</span><span class=\"st0\">\" flips!\"</span><span class=\"br0\">)</span> <br/>      <span class=\"st0\">\"ASK\"</span> <span class=\"sy1\">:</span><br/>         <span class=\"kw4\">put</span><span class=\"br0\">(</span>cq<span class=\"sy1\">,</span><span class=\"kw1\">case</span> ask<span class=\"br0\">(</span><span class=\"st0\">\"Play another game?\u00a0: \"</span><span class=\"br0\">)</span> <span class=\"kw1\">of</span> <span class=\"br0\">{</span> <span class=\"st0\">\"y\"</span><span class=\"sy1\">|</span><span class=\"st0\">\"yes\"</span> <span class=\"sy1\">:</span> <span class=\"st0\">\"game\"</span><span class=\"sy1\">;</span> <span class=\"st0\">\"n\"</span><span class=\"sy1\">|</span><span class=\"st0\">\"no\"</span> <span class=\"sy1\">:</span> <span class=\"st0\">\"quit\"</span><span class=\"sy1\">;</span> <span class=\"kw1\">default</span> <span class=\"sy1\">:</span> <span class=\"st0\">\"ASK\"</span> <span class=\"br0\">}</span> <span class=\"br0\">)</span> <br/>      <span class=\"kw1\">default</span><span class=\"sy1\">:</span>                                                 <span class=\"co1\"># --- say what?</span><br/>         <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Sorry I don't know that command, try help?\"</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> ask<span class=\"br0\">(</span>s<span class=\"br0\">)</span>                       <span class=\"co1\">#: ask for input with prompt s and return the 1st word in lower case</span><br/><span class=\"kw4\">writes</span><span class=\"br0\">(</span><span class=\"sy1\">\\</span>s<span class=\"br0\">)</span><br/><span class=\"kw4\">map</span><span class=\"br0\">(</span><span class=\"kw4\">trim</span><span class=\"br0\">(</span><span class=\"kw4\">read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">?</span> <span class=\"kw1\">return</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"kw4\">upto</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">|</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <br/>\u00a0</pre>"}, {"lang": "Inform 7", "loc": 40, "block": "<pre class=\"text highlighted_source\">Number Reversal Game is a room.<br/>\u00a0<br/>The current list is a list of numbers that varies.<br/>\u00a0<br/>When play begins:<br/>\tnow the current list is a shuffled list from 1 to 9;<br/>\tnow the command prompt is \"Current list: [current list in brace notation].[line break]How many items to flip? \".<br/>\u00a0<br/>Definition: a list of numbers (called L) is sorted:<br/>\trepeat with N running from 1 to the number of entries in L:<br/>\t\tif entry N in L is not N, no;<br/>\tyes.<br/>\u00a0<br/>To decide which list of numbers is a shuffled list from (min - number) to (max - number):<br/>\tlet result be a list of numbers;<br/>\trepeat with N running from min to max:<br/>\t\tadd N to result;<br/>\twhile true is true:<br/>\t\tsort result in random order;<br/>\t\tif result is not sorted, decide on result.<br/>\u00a0<br/>Flipping is an action applying to one number. Understand \"[number]\" as flipping.<br/>\u00a0<br/>Carry out flipping:<br/>\tlet N be the number understood;<br/>\tlet L be the current list;<br/>\ttruncate the current list to the first N entries;<br/>\treverse the current list;<br/>\ttruncate L to the last (number of entries in L minus N) entries;<br/>\tadd L to the current list.<br/>\u00a0<br/>Report flipping: say \"\".<br/>\u00a0<br/>Every turn:<br/>\tif the current list is sorted, end the story saying \"You have won\".<br/>\u00a0<br/>This is the new print final score rule:<br/>\tsay \"It took you [turn count] flip[s] to sort the list.\"<br/>\u00a0<br/>The new print final score rule is listed instead of the print final score rule in the for printing the player's obituary rules.</pre>"}, {"lang": "Io", "loc": 19, "block": "<pre class=\"io highlighted_source\">withRange\u00a0:= <span class=\"kw2\">method</span><span class=\"br0\">(</span> a, z, <br/>    Range <span class=\"kw2\">clone</span> setRange<span class=\"br0\">(</span>a,z<span class=\"br0\">)</span> <br/><span class=\"br0\">)</span><br/>sorted\u00a0:= withRange<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">9</span><span class=\"br0\">)</span> asList<br/>numbers\u00a0:= sorted <span class=\"kw2\">clone</span> shuffle<br/><span class=\"kw1\">while</span><span class=\"br0\">(</span> numbers==sorted, numbers = numbers shuffle<span class=\"br0\">)</span><br/>\u00a0<br/>steps\u00a0:=<span class=\"nu0\">0</span><br/>stdin\u00a0:= <span class=\"kw3\">File</span> standardInput<br/><span class=\"kw1\">while</span><span class=\"br0\">(</span> numbers <span class=\"sy0\">!</span>= sorted,<br/>    writeln<span class=\"br0\">(</span>numbers join<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw2\">write</span><span class=\"br0\">(</span><span class=\"st0\">\"Reverse how many? \"</span><span class=\"br0\">)</span><br/>    flipcount\u00a0:= stdin readLine asNumber<br/>    withRange<span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"br0\">(</span><span class=\"br0\">(</span>flipcount-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> floor<span class=\"br0\">)</span> <span class=\"kw1\">foreach</span><span class=\"br0\">(</span> i,<br/>        numbers swapIndices<span class=\"br0\">(</span>i,flipcount-<span class=\"nu0\">1</span>-i<span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>    steps = steps+<span class=\"nu0\">1</span> <br/><span class=\"br0\">)</span><br/>writeln<span class=\"br0\">(</span><span class=\"st0\">\"Done! That took you \"</span>, steps, <span class=\"st0\">\" steps\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "J", "loc": 22, "block": "<pre class=\"j highlighted_source\">require <span class=\"st_h\">'misc'</span>                      <span class=\"co1\">NB. for the verb prompt</span><br/>\u00a0<br/>INTRO=: noun define<br/>Number Reversal Game<br/>Flip groups of numbers from the left of the list until<br/>the numbers are sorted in ascending order.<br/><span class=\"sy0\">)</span><br/>\u00a0<br/>reversegame=: verb define<br/>  <span class=\"kw1\">whilst.</span> <span class=\"sy0\">(</span>-: /:~<span class=\"sy0\">)</span>nums <span class=\"kw1\">do.</span><br/>    nums=. <span class=\"nu0\">1</span>+<span class=\"nu0\">9</span>?<span class=\"nu0\">9</span>                    <span class=\"co1\">NB. 1-9 in random order</span><br/>  <span class=\"kw1\">end.</span><br/>  score=. <span class=\"nu0\">0</span><br/>  smoutput INTRO                    <span class=\"co1\">NB. Display instructions</span><br/>  <span class=\"kw1\">while.</span> -.<span class=\"sy0\">(</span>-: /:~<span class=\"sy0\">)</span>nums <span class=\"kw1\">do.</span><br/>    score=. <span class=\"nu0\">1</span>+ score                <span class=\"co1\">NB. increment score</span><br/>    nnum=. <span class=\"nu0\">0</span>\".prompt <span class=\"sy0\">(</span>\":score<span class=\"sy0\">)</span>,<span class=\"st_h\">': '</span>,<span class=\"sy0\">(</span>\":nums<span class=\"sy0\">)</span>,<span class=\"st_h\">' How many numbers to flip?: '</span><br/>    <span class=\"kw1\">if.</span> <span class=\"nu0\">0</span> = #nnum <span class=\"kw1\">do.</span> <span class=\"kw1\">return.</span> <span class=\"kw1\">end.</span>  <span class=\"co1\">NB. exit on ENTER without number</span><br/>    nums=. <span class=\"sy0\">(</span>C.i.-nnum<span class=\"sy0\">)</span> C. nums      <span class=\"co1\">NB. reverse first nnum numbers</span><br/>  <span class=\"kw1\">end.</span><br/>  <span class=\"st_h\">'You took '</span>,<span class=\"sy0\">(</span>\": score<span class=\"sy0\">)</span>, <span class=\"st_h\">' attempts to put the numbers in order.'</span><br/><span class=\"sy0\">)</span></pre>"}, {"lang": "Java", "loc": 73, "block": "<pre class=\"java5 highlighted_source\"><span class=\"kw2\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.ArrayList</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Scanner</span><span class=\"sy0\">;</span><br/><span class=\"kw2\">import</span> <span class=\"co2\">java.util.Collections</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">public</span> <span class=\"kw2\">class</span> ReversalGame <span class=\"br0\">{</span><br/>    <span class=\"kw2\">private</span> <a href=\"http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+List\"><span class=\"kw166\">List</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span> gameList<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> ReversalGame<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        initialize<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw3\">void</span> play<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw2\">throws</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Exception.html\"><span class=\"kw21\">Exception</span></a> <span class=\"br0\">{</span><br/>        <span class=\"kw3\">int</span> i = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw3\">int</span> moveCount = <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Scanner.html\"><span class=\"kw46\">Scanner</span></a> scanner = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Scanner.html\"><span class=\"kw46\">Scanner</span></a><span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">in</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw4\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>gameList<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Please enter a index to reverse from 2 to 9. Enter 99 to quit\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            i = scanner.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i == <span class=\"nu0\">99</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> || i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Invalid input\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                moveCount++<span class=\"sy0\">;</span><br/>                reverse<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>isSorted<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"Congratulations you solved this in \"</span> + moveCount + <span class=\"st0\">\" moves!\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"br0\">}</span><br/>        scanner.<span class=\"me1\">close</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">private</span> <span class=\"kw3\">void</span> reverse<span class=\"br0\">(</span><span class=\"kw3\">int</span> position<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Collections.html\"><span class=\"kw46\">Collections</span></a>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span>gameList.<span class=\"me1\">subList</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, position<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">private</span> <span class=\"kw3\">boolean</span> isSorted<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i=<span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> gameList.<span class=\"me1\">size</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">1</span><span class=\"sy0\">;</span> ++i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>gameList.<span class=\"me1\">get</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">compareTo</span><span class=\"br0\">(</span>gameList.<span class=\"me1\">get</span><span class=\"br0\">(</span>i + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw2\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw2\">return</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">private</span> <span class=\"kw3\">void</span> initialize<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">this</span>.<span class=\"me1\">gameList</span> = <span class=\"kw2\">new</span> <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html\"><span class=\"kw46\">ArrayList</span></a><span class=\"sy0\">&lt;</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Integer.html\"><span class=\"kw21\">Integer</span></a><span class=\"sy0\">&gt;</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw3\">int</span> i=<span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> ++i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            gameList.<span class=\"me1\">add</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span>isSorted<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Collections.html\"><span class=\"kw46\">Collections</span></a>.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span>gameList<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw3\">void</span> main<span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/String.html\"><span class=\"kw21\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw2\">try</span> <span class=\"br0\">{</span><br/>            ReversalGame game = <span class=\"kw2\">new</span> ReversalGame<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            game.<span class=\"me1\">play</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw2\">catch</span> <span class=\"br0\">(</span><a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/Exception.html\"><span class=\"kw21\">Exception</span></a> e<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html\"><span class=\"kw21\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>e.<span class=\"me1\">getMessage</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            e.<span class=\"me1\">printStackTrace</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 10, "block": "<pre class=\"html4strict highlighted_source\"><span class=\"sc2\">&lt;<a href=\"http://december.com/html/4/element/html.html\"><span class=\"kw2\">html</span></a>&gt;</span><br/><span class=\"sc2\">&lt;<a href=\"http://december.com/html/4/element/head.html\"><span class=\"kw2\">head</span></a>&gt;</span><br/>    <span class=\"sc2\">&lt;<a href=\"http://december.com/html/4/element/title.html\"><span class=\"kw2\">title</span></a>&gt;</span>Number Reversal Game<span class=\"sc2\">&lt;<span class=\"sy0\">/</span><a href=\"http://december.com/html/4/element/title.html\"><span class=\"kw2\">title</span></a>&gt;</span><br/><span class=\"sc2\">&lt;<span class=\"sy0\">/</span><a href=\"http://december.com/html/4/element/head.html\"><span class=\"kw2\">head</span></a>&gt;</span><br/>\u00a0<br/><span class=\"sc2\">&lt;<a href=\"http://december.com/html/4/element/body.html\"><span class=\"kw2\">body</span></a>&gt;</span><br/><span class=\"sc2\">&lt;<a href=\"http://december.com/html/4/element/div.html\"><span class=\"kw2\">div</span></a> <span class=\"kw3\">id</span><span class=\"sy0\">=</span><span class=\"st0\">\"start\"</span>&gt;&lt;<span class=\"sy0\">/</span><a href=\"http://december.com/html/4/element/div.html\"><span class=\"kw2\">div</span></a>&gt;</span><br/><span class=\"sc2\">&lt;<a href=\"http://december.com/html/4/element/div.html\"><span class=\"kw2\">div</span></a> <span class=\"kw3\">id</span><span class=\"sy0\">=</span><span class=\"st0\">\"progress\"</span>&gt;&lt;<span class=\"sy0\">/</span><a href=\"http://december.com/html/4/element/div.html\"><span class=\"kw2\">div</span></a>&gt;</span><br/><span class=\"sc2\">&lt;<a href=\"http://december.com/html/4/element/div.html\"><span class=\"kw2\">div</span></a> <span class=\"kw3\">id</span><span class=\"sy0\">=</span><span class=\"st0\">\"score\"</span>&gt;&lt;<span class=\"sy0\">/</span><a href=\"http://december.com/html/4/element/div.html\"><span class=\"kw2\">div</span></a>&gt;</span><br/><span class=\"sc2\">&lt;<a href=\"http://december.com/html/4/element/script.html\"><span class=\"kw2\">script</span></a> <span class=\"kw3\">type</span><span class=\"sy0\">=</span><span class=\"st0\">\"text/javascript\"</span>&gt;</span></pre>"}, {"lang": "jq", "loc": 19, "block": "<pre class=\"text highlighted_source\"># Input: the initial array<br/>def play:<br/>  def sorted: . == sort;<br/>\u00a0<br/>  def reverse(n):  (.[0:n] | reverse)  + .[n:];<br/>\u00a0<br/>  def prompt: \"List: \\(.list)\\nEnter a pivot number: \";<br/>\u00a0<br/>  def report: \"Great! Your score is \\(.score)\";<br/>\u00a0<br/>  {list: ., score: 0}<br/>  | (if .list | sorted then \"List was sorted to begin with.\"<br/>     else<br/>     prompt,<br/>     ( label $done<br/>     | foreach inputs as $n (.;<br/>         .list |= reverse($n) | .score +=1;<br/>         if .list | sorted then report, break $done else prompt end ))<br/>     end); </pre>"}, {"lang": "Julia", "loc": 18, "block": "<pre class=\"text highlighted_source\"># v0.6<br/>\u00a0<br/>function numrevgame()<br/>    l = collect(1:9)<br/>    while issorted(l) shuffle!(l) end<br/>    score = 0<br/>    println(\"# Number reversal game\")<br/>    while\u00a0!issorted(l)<br/>        print(\"$l\\nInsert the index up to which to revert: \")<br/>        n = parse(Int, readline())<br/>        reverse!(l, 1, n)<br/>        score += 1<br/>    end<br/>    println(\"$l... You won!\\nScore: $score\")<br/>    return score<br/>end<br/>\u00a0<br/>numrevgame()</pre>"}, {"lang": "Kotlin", "loc": 42, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/>fun isAscending<span class=\"br0\">(</span>a<span class=\"sy0\">:</span> IntArray<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span>..<span class=\"nu0\">8</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>a<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> i + <span class=\"nu0\">1</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> r <span class=\"sy0\">=</span> java.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> numbers <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span> <br/>    numbers<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> + r.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"co1\">// this will ensure list isn't ascending</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"nu0\">8</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> rn<span class=\"sy0\">:</span> Int<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span><br/>            rn <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> + r.<span class=\"me1\">nextInt</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>rn in numbers<span class=\"br0\">)</span><br/>        numbers<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> rn<br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"Here's your first list\u00a0: ${numbers.joinToString()}\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">true</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span>        <br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> rev<span class=\"sy0\">:</span> Int<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">do</span></a> <span class=\"br0\">{</span> <br/>            print<span class=\"br0\">(</span><span class=\"st0\">\"How many numbers from the left are to be reversed\u00a0: \"</span><span class=\"br0\">)</span>  <br/>            rev <span class=\"sy0\">=</span> readLine<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">!!</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>rev <span class=\"sy0\">!</span>in <span class=\"nu0\">2</span>..<span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>        count++<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> j <span class=\"sy0\">=</span> rev - <span class=\"nu0\">1</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> temp <span class=\"sy0\">=</span> numbers<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            numbers<span class=\"br0\">[</span>i++<span class=\"br0\">]</span> <span class=\"sy0\">=</span> numbers<span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>            numbers<span class=\"br0\">[</span>j--<span class=\"br0\">]</span> <span class=\"sy0\">=</span> temp<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>isAscending<span class=\"br0\">(</span>numbers<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"Here's your final list\u00a0: ${numbers.joinToString()}\"</span><span class=\"br0\">)</span>   <br/>            break<br/>        <span class=\"br0\">}</span><br/>        println<span class=\"br0\">(</span><span class=\"st0\">\"Here's your list now  \u00a0: ${numbers.joinToString()}\"</span><span class=\"br0\">)</span>   <br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"So you've completed the game with a score of $count\"</span><span class=\"br0\">)</span>        <br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 65, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Initialisation</span><br/><span class=\"kw3\">math.randomseed</span><span class=\"br0\">(</span><span class=\"kw3\">os.time</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>numList <span class=\"sy0\">=</span> <span class=\"br0\">{</span>values <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">-- Check whether list contains n</span><br/><span class=\"kw1\">function</span> numList<span class=\"sy0\">:</span>contains <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>self<span class=\"sy0\">.</span>values<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> v <span class=\"sy0\">==</span> n <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">true</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Check whether list is in order</span><br/><span class=\"kw1\">function</span> numList<span class=\"sy0\">:</span>inOrder <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>self<span class=\"sy0\">.</span>values<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> k <span class=\"sy0\">~=</span>v <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Create necessarily out-of-order list</span><br/><span class=\"kw1\">function</span> numList<span class=\"sy0\">:</span>build <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">local</span> newNum<br/>  <span class=\"kw1\">repeat</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">repeat</span><br/>        newNum <span class=\"sy0\">=</span> <span class=\"kw3\">math.random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">until</span> <span class=\"kw2\">not</span> numList<span class=\"sy0\">:</span>contains<span class=\"br0\">(</span>newNum<span class=\"br0\">)</span><br/>      <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>self<span class=\"sy0\">.</span>values<span class=\"sy0\">,</span> newNum<span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">until</span> <span class=\"kw2\">not</span> numList<span class=\"sy0\">:</span>inOrder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Display list of numbers on one line</span><br/><span class=\"kw1\">function</span> numList<span class=\"sy0\">:</span>show <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>self<span class=\"sy0\">.</span>values<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">io.write</span><span class=\"br0\">(</span>v <span class=\"sy0\">..</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw3\">io.write</span><span class=\"br0\">(</span><span class=\"st0\">\":<span class=\"es1\">\\t</span>\"</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Reverse n values from left</span><br/><span class=\"kw1\">function</span> numList<span class=\"sy0\">:</span>reverse <span class=\"br0\">(</span>n<span class=\"br0\">)</span>  <br/>  <span class=\"kw1\">local</span> swapList <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span> k<span class=\"sy0\">,</span> v <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span>self<span class=\"sy0\">.</span>values<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw3\">table.insert</span><span class=\"br0\">(</span>swapList<span class=\"sy0\">,</span> v<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"kw1\">do</span><br/>    swapList<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> self<span class=\"sy0\">.</span>values<span class=\"br0\">[</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"sy0\">-</span> i<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/>  self<span class=\"sy0\">.</span>values <span class=\"sy0\">=</span> swapList<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Main procedure</span><br/><span class=\"kw1\">local</span> score <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Rosetta Code Number Reversal Game in Lua\"</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"========================================<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>numList<span class=\"sy0\">:</span>build<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">repeat</span><br/>  numList<span class=\"sy0\">:</span>show<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  numList<span class=\"sy0\">:</span>reverse<span class=\"br0\">(</span><span class=\"kw3\">tonumber</span><span class=\"br0\">(</span><span class=\"kw3\">io.read</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  score <span class=\"sy0\">=</span> score <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/><span class=\"kw1\">until</span> numList<span class=\"sy0\">:</span>inOrder<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>numList<span class=\"sy0\">:</span>show<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>W00t!  You scored:\"</span><span class=\"sy0\">,</span> score<span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 6, "block": "<pre class=\"text highlighted_source\">Module[{array = <a class=\"__cf_email__\" data-cfemail=\"87d5e6e9e0e2c7be\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, score = 0}, <br/> While[array == <a class=\"__cf_email__\" data-cfemail=\"7c2e1d121b193c45\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, array = <a class=\"__cf_email__\" data-cfemail=\"4012212e242f2d13212d302c250012212e2725\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@9]; <br/> While[array\u00a0!= <a class=\"__cf_email__\" data-cfemail=\"2371424d4446631a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, <br/>  <a class=\"__cf_email__\" data-cfemail=\"d585a7bcbba195b4a7a7b4ac\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>; (array[[;; #]] = <a class=\"__cf_email__\" data-cfemail=\"1b497e6d7e69687e5b7a69697a62\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[[;; #]]) &amp;@<br/>   Input[\"How many digits would you like to reverse?\"]; score++]; <br/> <a class=\"__cf_email__\" data-cfemail=\"29795b40475d69485b5b4850\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>; Print[\"Your score:\", score]]</pre>"}, {"lang": "MATLAB", "loc": 27, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> NumberReversalGame<br/>    list = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/randperm.html\"><span class=\"kw2\">randperm</span></a><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">while</span> issorted<span class=\"br0\">(</span>list<span class=\"br0\">)</span><br/>        list = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/randperm.html\"><span class=\"kw2\">randperm</span></a><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">end</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Given a list of numbers, try to put them into ascending order\\n'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'by sequentially reversing everything left of a point you choose\\n'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'in the array. Try to do it in as few reversals as possible.\\n'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'No input will quit the game.\\n'</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Position Num:%s\\n'</span>, <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\u00a0%d'</span>, <span class=\"nu0\">1</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html\"><span class=\"kw2\">length</span></a><span class=\"br0\">(</span>list<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Current List:%s'</span>, <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\u00a0%d'</span>, list<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    pivot = <span class=\"nu0\">1</span>;<br/>    nTries = <span class=\"nu0\">0</span>;<br/>    <span class=\"kw1\">while</span> ~isempty<span class=\"br0\">(</span>pivot<span class=\"br0\">)</span> &amp;&amp; ~issorted<span class=\"br0\">(</span>list<span class=\"br0\">)</span><br/>        pivot = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/input.html\"><span class=\"kw2\">input</span></a><span class=\"br0\">(</span><span class=\"co2\">'    Enter position of reversal limit: '</span><span class=\"br0\">)</span>;<br/>        <span class=\"kw1\">if</span> pivot<br/>            list<span class=\"br0\">(</span><span class=\"nu0\">1</span>:pivot<span class=\"br0\">)</span> = list<span class=\"br0\">(</span>pivot:-<span class=\"nu0\">1</span>:<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>            <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'Current List:%s'</span>, <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sprintf.html\"><span class=\"kw2\">sprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\u00a0%d'</span>, list<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            nTries = nTries+<span class=\"nu0\">1</span>;<br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">if</span> issorted<span class=\"br0\">(</span>list<span class=\"br0\">)</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\\nCongratulations! You win! Only\u00a0%d reversals.\\n'</span>, nTries<span class=\"br0\">)</span><br/>    <span class=\"kw1\">else</span><br/>        <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html\"><span class=\"kw2\">fprintf</span></a><span class=\"br0\">(</span><span class=\"co2\">'\\nPlay again soon!\\n'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Nim", "loc": 41, "block": "<pre class=\"text highlighted_source\">import math, rdstdin, strutils, algorithm<br/>randomize()<br/>\u00a0<br/>proc shuffle[T](x: var seq[T]) =<br/>  for i in countdown(x.high, 0):<br/>    let j = random(i + 1)<br/>    swap(x[i], x[j])<br/>\u00a0<br/>proc isSorted[T](s: openarray[T]): bool =<br/>  var last = low(T)<br/>  for c in s:<br/>    if c &lt; last:<br/>      return false<br/>    last = c<br/>  return true<br/>\u00a0<br/>proc toString[T](s: openarray[T]): string =<br/>  result = \"\"<br/>  for i, x in s:<br/>    if i &gt; 0:<br/>      result.add \" \"<br/>    result.add($x)<br/>\u00a0<br/>echo \"\"\"number reversal game<br/>    Given a jumbled list of the numbers 1 to 9<br/>    Show the list.<br/>    Ask the player how many digits from the left to reverse.<br/>    Reverse those digits then ask again.<br/>    until all the digits end up in ascending order.\"\"\"<br/>\u00a0<br/>var data = @[1,2,3,4,5,6,7,8,9]<br/>var trials = 0<br/>while isSorted data:<br/>  shuffle data<br/>while not isSorted data:<br/>  inc trials<br/>  var flip = parseInt readLineFromStdin(<br/>    \"#\" &amp; $trials &amp; \": List: '\" &amp; toString(data) &amp; \"' Flip how many?: \")<br/>  reverse(data, 0, flip - 1)<br/>\u00a0<br/>echo \"You took \", trials, \" attempts to put the digits in order!\"</pre>"}, {"lang": "OCaml", "loc": 48, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> swap ar i j <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">let</span> tmp <span class=\"sy0\">=</span> ar<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  ar<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> ar<span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  ar<span class=\"sy0\">.</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">&lt;-</span> tmp<br/>\u00a0<br/><span class=\"kw1\">let</span> shuffle ar <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length ar<span class=\"br0\">)</span> <span class=\"kw1\">downto</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> j <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint\"><span class=\"kw4\">int</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    swap ar i j<br/>  <span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"kw1\">let</span> reversal ar n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">let</span> j <span class=\"sy0\">=</span> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a> n<span class=\"br0\">)</span> <span class=\"sy0\">-</span> i <span class=\"kw1\">in</span><br/>    swap ar i j<br/>  <span class=\"kw1\">done</span><br/>\u00a0<br/><span class=\"kw1\">let</span> sorted ar <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">try</span><br/>    <span class=\"kw1\">let</span> prev <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> ar<span class=\"sy0\">.</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALpred\"><span class=\"kw3\">pred</span></a><span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>length ar<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>      <span class=\"kw1\">if</span> ar<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"sy0\">!</span>prev <span class=\"kw1\">then</span> <span class=\"kw1\">raise</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#EXCEPTIONExit\"><span class=\"kw5\">Exit</span></a><span class=\"sy0\">;</span><br/>      prev <span class=\"sy0\">:=</span> ar<span class=\"sy0\">.</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">true</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">with</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#EXCEPTIONExit\"><span class=\"kw5\">Exit</span></a> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">false</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"\\<br/>  Number Reversal Game<br/>  Sort the numbers in ascending order by repeatedly <br/>  flipping sets of numbers from the left.\"</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html\"><span class=\"kw2\">Random</span></a><span class=\"sy0\">.</span>self_init<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">let</span> nums <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>init <span class=\"nu0\">9</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> i <span class=\"sy0\">-&gt;</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsucc\"><span class=\"kw3\">succ</span></a> i<span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">while</span> sorted nums <span class=\"kw1\">do</span> shuffle nums <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">let</span> n <span class=\"sy0\">=</span> <span class=\"kw1\">ref</span> <span class=\"nu0\">1</span> <span class=\"kw1\">in</span><br/>  <span class=\"kw1\">while</span> <span class=\"kw1\">not</span><span class=\"br0\">(</span>sorted nums<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"#%2d: \"</span> <span class=\"sy0\">!</span>n<span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html\"><span class=\"kw2\">Array</span></a><span class=\"sy0\">.</span>iter <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"\u00a0%d\"</span><span class=\"br0\">)</span> nums<span class=\"sy0\">;</span><br/>    <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline\"><span class=\"kw3\">print_newline</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">let</span> r <span class=\"sy0\">=</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALread_int\"><span class=\"kw3\">read_int</span></a><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">in</span><br/>    reversal nums r<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">incr</span> n<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">done</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline\"><span class=\"kw3\">print_endline</span></a> <span class=\"st0\">\"Congratulations!\"</span><span class=\"sy0\">;</span><br/>  <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html\"><span class=\"kw2\">Printf</span></a><span class=\"sy0\">.</span>printf <span class=\"st0\">\"You took\u00a0%d attempts to put the digits in order.\\n\"</span> <span class=\"sy0\">!</span>n<span class=\"sy0\">;</span><br/><span class=\"sy0\">;;</span></pre>"}, {"lang": "Oforth", "loc": 16, "block": "<pre class=\"text highlighted_source\">import: console<br/>\u00a0<br/>: reversalGame<br/>| l n |<br/>   doWhile: [\t\t<br/>      ListBuffer new -&gt;l<br/>      while(l size 9 &lt;&gt;) [ 9 rand dup l include ifFalse: [ l add ] else: [ drop ] ]<br/>      l sort l ==<br/>      ]<br/>\u00a0<br/>   0 while(l sort l &lt;&gt;) [<br/>      System.Out \"List is \" &lt;&lt; l &lt;&lt; \" ==&gt; how many digits from left to reverse\u00a0: \" &lt;-<br/>      System.Console askln asInteger dup ifNull: [ drop continue ] -&gt;n<br/>      1+ l left(n) reverse l right(l size n -) + -&gt;l<br/>      ]<br/>   \"You won\u00a0! Your score is\u00a0:\" . println\u00a0;</pre>"}, {"lang": "Oz", "loc": 59, "block": "<pre class=\"oz highlighted_source\"><span class=\"kw1\">declare</span><br/>  <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">Main</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">proc</span> <span class=\"br0\">{</span><span class=\"re1\">Loop</span> N Xs<span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span>Not <span class=\"br0\">{</span>IsSorted Xs<span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"kw1\">then</span><br/>           Num NewXs<br/>        <span class=\"kw1\">in</span><br/>           <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>printInfo N<span class=\"sy0\">#</span><span class=\"st0\">\": \"</span><span class=\"br0\">}</span><br/>           <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>print Xs<span class=\"br0\">}</span><br/>           <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>printInfo <span class=\"st0\">\" -- Reverse how many? \"</span><span class=\"br0\">}</span><br/>           Num = <span class=\"br0\">{</span>String<span class=\"sy0\">.</span>toInt <span class=\"br0\">{</span>ReadLine<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>           NewXs = <span class=\"br0\">{</span>Append<br/>                    <span class=\"br0\">{</span>Reverse <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>take Xs Num<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>                    <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>drop Xs Num<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>           <span class=\"br0\">{</span>Loop N<span class=\"sy0\">+</span>1 NewXs<span class=\"br0\">}</span><br/>        <span class=\"kw1\">else</span><br/>           <span class=\"br0\">{</span>System<span class=\"sy0\">.</span>showInfo <span class=\"st0\">\"You took \"</span><span class=\"sy0\">#</span>N<span class=\"sy0\">#</span><span class=\"st0\">\" tries to put the digits in order.\"</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">EnsureShuffled</span> Xs<span class=\"br0\">}</span><br/>        Ys = <span class=\"br0\">{</span>Shuffle Xs<span class=\"br0\">}</span><br/>     <span class=\"kw1\">in</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span>Not <span class=\"br0\">{</span>IsSorted Ys<span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"kw1\">then</span> Ys<br/>        <span class=\"kw1\">else</span> <span class=\"br0\">{</span>EnsureShuffled Xs<span class=\"br0\">}</span><br/>        <span class=\"kw1\">end</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"br0\">{</span>Loop 0 <span class=\"br0\">{</span>EnsureShuffled <span class=\"br0\">{</span>List<span class=\"sy0\">.</span>number 1 9 1<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">IsSorted</span> Xs<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Sort Xs Value<span class=\"sy0\">.</span><span class=\"st0\">'&lt;'</span><span class=\"br0\">}</span> <span class=\"sy0\">==</span> Xs<br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">local</span><br/>     <span class=\"kw1\">class</span> <span class=\"re2\">TextFile</span> <span class=\"kw1\">from</span> Open<span class=\"sy0\">.</span>file Open<span class=\"sy0\">.</span>text <span class=\"kw1\">end</span><br/>     StdIn = <span class=\"br0\">{</span>New TextFile init<span class=\"br0\">(</span>name:stdin<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  <span class=\"kw1\">in</span><br/>     <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">ReadLine</span><span class=\"br0\">}</span><br/>        <span class=\"br0\">{</span>StdIn getS<span class=\"br0\">(</span>$<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>     <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Shuffle</span> Xs<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>FoldL Xs<br/>      <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">$</span> Z _<span class=\"br0\">}</span><br/>         <span class=\"br0\">{</span>Pick <span class=\"br0\">{</span>Diff Xs Z<span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"sy0\">|</span>Z<br/>      <span class=\"kw1\">end</span><br/>      nil<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Pick</span> Xs<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>Nth Xs <span class=\"br0\">{</span>OS<span class=\"sy0\">.</span>rand<span class=\"br0\">}</span> <span class=\"kw1\">mod</span> <span class=\"br0\">{</span>Length Xs<span class=\"br0\">}</span> <span class=\"sy0\">+</span> 1<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Diff</span> Xs Ys<span class=\"br0\">}</span><br/>     <span class=\"br0\">{</span>FoldL Ys List<span class=\"sy0\">.</span>subtract Xs<span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">in</span><br/>  <span class=\"br0\">{</span>Main<span class=\"br0\">}</span></pre>"}, {"lang": "PARI/GP", "loc": 14, "block": "<pre class=\"parigp highlighted_source\">game<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"kw1\">numtoperm</span><span class=\"br0\">(</span><span class=\"nu1\">9</span><span class=\"sy0\">,</span><span class=\"kw1\">random</span><span class=\"br0\">(</span><span class=\"nu1\">9</span><span class=\"sy0\">!-</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>score<span class=\"sy0\">,</span>in<span class=\"sy0\">,</span>t<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">\\\\ Create vector with 1..9, excluding the one sorted in ascending order</span><br/>  <span class=\"kw1\">while</span><span class=\"br0\">(</span>v<span class=\"sy0\">!=</span><span class=\"kw1\">vecsort</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"st0\">\"\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    in<span class=\"sy0\">=</span><span class=\"kw1\">input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>in<span class=\"sy0\">\\</span><span class=\"nu1\">2</span><span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><br/>      t<span class=\"sy0\">=</span>v<span class=\"br0\">[</span><span class=\"nu1\">9</span><span class=\"sy0\">-</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t  v<span class=\"br0\">[</span><span class=\"nu1\">9</span><span class=\"sy0\">-</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>v<span class=\"br0\">[</span><span class=\"nu1\">10</span><span class=\"sy0\">-</span>in<span class=\"sy0\">+</span>i<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t  v<span class=\"br0\">[</span><span class=\"nu1\">10</span><span class=\"sy0\">-</span>in<span class=\"sy0\">+</span>i<span class=\"br0\">]</span><span class=\"sy0\">=</span>t<br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    score<span class=\"sy0\">++</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  score<br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl", "loc": 20, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> List<span class=\"sy0\">::</span><span class=\"me2\">Util</span> <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">(</span>shuffle<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$turn</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@jumble</span> <span class=\"sy0\">=</span> shuffle <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">while</span> <span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"re0\">@jumble</span><span class=\"br0\">)</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'123456789'</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">@jumble</span> <span class=\"sy0\">=</span> shuffle <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">until</span> <span class=\"br0\">(</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">''</span><span class=\"sy0\">,</span> <span class=\"re0\">@jumble</span><span class=\"br0\">)</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'123456789'</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$turn</span><span class=\"sy0\">++;</span><br/>    <a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"%2d: @jumble - Flip how many digits\u00a0? \"</span><span class=\"sy0\">,</span> <span class=\"re0\">$turn</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"sy0\">&lt;&gt;;</span><br/>\u00a0<br/>    <span class=\"re0\">@jumble</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"re0\">$d</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <span class=\"re0\">@jumble</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">..</span><span class=\"re0\">$d</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"    @jumble<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"You won in $turn turns.<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 15, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw1\">repeat</span> <span class=\"kw1\">while</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span><span class=\"br0\">]</span> <span class=\"kw1\">my</span> <span class=\"re0\">@jumbled</span><span class=\"sy0\">-</span>list <span class=\"br0\">{</span><br/>    <span class=\"re0\">@jumbled</span><span class=\"sy0\">-</span>list <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"kw3\">pick</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> <span class=\"re0\">$turn</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">repeat</span> <span class=\"kw1\">until</span> <span class=\"br0\">[</span><span class=\"sy0\">&lt;</span><span class=\"br0\">]</span> <span class=\"re0\">@jumbled</span><span class=\"sy0\">-</span>list <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$d</span> <span class=\"sy0\">=</span> prompt <span class=\"re0\">$turn</span><span class=\"sy0\">.=</span><span class=\"kw3\">succ</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st_h\">'%2d: '</span><span class=\"br0\">)</span> <span class=\"sy0\">~</span><br/>                   <span class=\"re0\">@jumbled</span><span class=\"sy0\">-</span>list <span class=\"sy0\">~</span><br/>                   <span class=\"st0\">\" - Flip how many digits? \"</span><br/>        <span class=\"kw1\">or</span> exit<span class=\"sy0\">;</span><br/>    <span class=\"re0\">@jumbled</span><span class=\"sy0\">-</span>list<span class=\"br0\">[</span><span class=\"sy0\">^</span><span class=\"re0\">$d</span><span class=\"br0\">]</span> <span class=\"sy0\">.=</span> <span class=\"kw3\">reverse</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"    @jumbled-list[]\"</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">say</span> <span class=\"st0\">\"You won in $turn turns.\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 22, "block": "<pre class=\"text highlighted_source\">puts(1,\"Given a jumbled list of the numbers 1 to 9,\\n\")<br/>puts(1,\"you must select how many digits from the left to reverse.\\n\")<br/>puts(1,\"Your goal is to get the digits in order with 1 on the left and 9 on the right.\\n\")<br/>\u00a0<br/>constant inums = tagset(9)<br/>sequence nums<br/>integer turns = 0, flip<br/>\u00a0<br/>while 1 do<br/>    nums = shuffle(inums)<br/>    if nums!=inums then exit end if<br/>end while<br/>\u00a0<br/>while 1 do<br/>    printf(1,\"%2d\u00a0:\u00a0%d\u00a0%d\u00a0%d\u00a0%d\u00a0%d\u00a0%d\u00a0%d\u00a0%d\u00a0%d \",turns&amp;nums)<br/>    if nums=inums then exit end if<br/>    flip = prompt_number(\" -- How many numbers should be flipped? \",{1,9})<br/>    nums[1..flip] = reverse(nums[1..flip])<br/>    turns += 1<br/>end while<br/>\u00a0<br/>printf(1,\"\\nYou took\u00a0%d turns to put the digits in order.\", turns)</pre>"}, {"lang": "PHP", "loc": 56, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">class</span> ReversalGame <span class=\"br0\">{</span><br/>    <span class=\"kw2\">private</span> <span class=\"re0\">$numbers</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> __construct<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">initialize</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> play<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$moveCount</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"kw4\">true</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">echo</span> <a href=\"http://www.php.net/json_encode\"><span class=\"kw3\">json_encode</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">numbers</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">echo</span> <span class=\"st0\">\"Please enter an index to reverse from 2 to 9. Enter 99 to quit<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>            <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/intval\"><span class=\"kw3\">intval</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/rtrim\"><span class=\"kw3\">rtrim</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/fgets\"><span class=\"kw3\">fgets</span></a><span class=\"br0\">(</span>STDIN<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">==</span> <span class=\"nu0\">99</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">echo</span> <span class=\"st0\">\"Invalid input<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>                <span class=\"re0\">$moveCount</span><span class=\"sy0\">++;</span><br/>                <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">isSorted</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">echo</span> <span class=\"st0\">\"Congratulations you solved this in <span class=\"es4\">$moveCount</span> moves!<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">private</span> <span class=\"kw2\">function</span> reverse<span class=\"br0\">(</span><span class=\"re0\">$position</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.php.net/array_splice\"><span class=\"kw3\">array_splice</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">numbers</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$position</span><span class=\"sy0\">,</span> <a href=\"http://www.php.net/array_reverse\"><span class=\"kw3\">array_reverse</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/array_slice\"><span class=\"kw3\">array_slice</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">numbers</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$position</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">private</span> <span class=\"kw2\">function</span> isSorted<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">numbers</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> <span class=\"sy0\">++</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">numbers</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">numbers</span><span class=\"br0\">[</span><span class=\"re0\">$i</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw2\">private</span> <span class=\"kw2\">function</span> initialize<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">numbers</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/range\"><span class=\"kw3\">range</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">isSorted</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://www.php.net/shuffle\"><span class=\"kw3\">shuffle</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">numbers</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"re0\">$game</span> <span class=\"sy0\">=</span> <span class=\"kw2\">new</span> ReversalGame<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"re0\">$game</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">play</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "PicoLisp", "loc": 12, "block": "<pre class=\"text highlighted_source\">(load \"@lib/simul.l\")<br/>\u00a0<br/>(de reversalGame ()<br/>   (let (Lst (shuffle (range 1 9))  Cnt 0)<br/>      (while (apply &lt; Lst)<br/>         (setq Lst (shuffle Lst)) )<br/>      (loop<br/>         (printsp Lst)<br/>         (T (apply &lt; Lst) Cnt)<br/>         (NIL (num? (read)))<br/>         (setq Lst (flip Lst @))<br/>         (inc 'Cnt) ) ) )</pre>"}, {"lang": "PL/I", "loc": 35, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>digits: procedure options (main); /* 23 April 2010 */<br/>   declare s character (9) varying;<br/>   declare i fixed binary;<br/>   declare digit character (1);<br/>\u00a0<br/>restart:<br/>   put skip list ('In this game, you are given a group of digits.');<br/>   put skip list ('You will specify one of those digits.');<br/>   put skip list ('The computer will then reverse the digits up to the one you nominate.');<br/>   put skip list ('Your task is to repeat this process a number of times until all the digits');<br/>   put skip list ('are in order, left to right, 1 to 9.');<br/>   put skip list ('Here are your digits');<br/>\u00a0<br/>redo:<br/>   s = '';<br/>   do until (length(s) = 9);<br/>      digit = trim ( fixed(trunc (1+random()*9) ) );<br/>      if index(s, digit) = 0 then s = s || digit;<br/>   end;<br/>   if s = '123456789' then go to redo;<br/>\u00a0<br/>loop:<br/>   do forever;<br/>      put skip list (s);<br/>      if s = '123456789' then leave;<br/>      get edit (digit) (a(1));<br/>      i = index(s, digit);<br/>      if i = 0 then do; put skip list ('invalid request'); iterate loop; end;<br/>      s = reverse( substr(s, 1, i) ) || substr(s, i+1, length(s)-i);<br/>   end;<br/>   put skip list ('Congratulations');<br/>   go to restart;<br/>end digits;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 11, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"re0\">$Array</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">9</span> <span class=\"sy0\">|</span> Get<span class=\"sy0\">-</span>Random <span class=\"kw5\">-Count</span> <span class=\"nu0\">9</span><br/><span class=\"re0\">$nTries</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw3\">While</span><span class=\"br0\">(</span><span class=\"sy0\">-</span>join <span class=\"re0\">$Array</span> <span class=\"kw4\">-ne</span> <span class=\"sy0\">-</span>join <span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>    <span class=\"re0\">$nTries</span><span class=\"sy0\">++</span><br/>    <span class=\"re0\">$nReverse</span> <span class=\"sy0\">=</span> <span class=\"kw1\">Read-Host</span> <span class=\"kw5\">-Prompt</span> <span class=\"st0\">\"[$Array] -- How many digits to reverse? \"</span><br/>    <span class=\"br0\">[</span><span class=\"re3\">Array</span><span class=\"br0\">]</span>::Reverse<span class=\"br0\">(</span><span class=\"re0\">$Array</span><span class=\"sy0\">,</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span><span class=\"re0\">$nReverse</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"st0\">\"$Array\"</span><br/><span class=\"st0\">\"Your score: $nTries\"</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 47, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Dim</span> MyList<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Declare</span> is_list_sorted<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span>       <br/>  <span class=\"kw1\">Define</span> score, indata, i, txt$<br/>\u00a0<br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">9</span>         <span class=\"co1\">;- Initiate the list</span><br/>    MyList<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>i<br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">While</span> is_list_sorted<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">9</span>      <span class=\"co1\">;- Do a Fisher\u2013Yates shuffle</span><br/>      <span class=\"kw1\">Swap</span> MyList<span class=\"br0\">(</span>i<span class=\"br0\">)</span>, MyList<span class=\"br0\">(</span><span class=\"kw2\">Random</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Wend</span><br/>\u00a0<br/>  <span class=\"co1\">;- Start the Game</span><br/>  <span class=\"kw1\">Repeat</span><br/>    score<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>    txt$<span class=\"sy0\">=</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>score<span class=\"br0\">)</span>, <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\": \"</span>      <span class=\"co1\">;- Show current list</span><br/>    <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">9</span><br/>      txt$<span class=\"sy0\">+</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>MyList<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" \"</span><br/>    <span class=\"kw1\">Next</span><br/>    <span class=\"kw1\">Repeat</span>                             <span class=\"co1\">;- Get input &amp; swap</span><br/>      <span class=\"kw2\">Print</span><span class=\"br0\">(</span>txt$<span class=\"sy0\">+</span><span class=\"st0\">\"| How many numbers should be flipped? \"</span><span class=\"br0\">)</span>: indata<span class=\"sy0\">=</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Until</span> indata<span class=\"sy0\">&gt;=</span><span class=\"nu0\">1</span> <span class=\"kw1\">And</span> indata<span class=\"sy0\">&lt;=</span><span class=\"nu0\">9</span>      <span class=\"co1\">;- Verify the input</span><br/>    <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"br0\">(</span>indata<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">Swap</span> MyList<span class=\"br0\">(</span>i<span class=\"br0\">)</span>,MyList<span class=\"br0\">(</span>indata<span class=\"sy0\">-</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Until</span> is_list_sorted<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"co1\">;- Present result &amp; wait for users input before closing down</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>#CRLF$<span class=\"sy0\">+</span><span class=\"st0\">\"You did it in \"</span><span class=\"sy0\">+</span><span class=\"kw2\">str</span><span class=\"br0\">(</span>score<span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" moves\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span>: <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">CloseConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> is_list_sorted<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Protected</span> i<br/>  <span class=\"kw1\">Shared</span> MyList<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">9</span><br/>    <span class=\"kw1\">If</span> MyList<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">&lt;&gt;</span>i<br/>      <span class=\"kw1\">ProcedureReturn</span> #False<br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">ProcedureReturn</span> #True<br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 22, "block": "<pre class=\"python highlighted_source\"><span class=\"st0\">'''<br/>number reversal game<br/>    Given a jumbled list of the numbers 1 to 9<br/>    Show the list.<br/>    Ask the player how many digits from the left to reverse.<br/>    Reverse those digits then ask again.<br/>    until all the digits end up in ascending order.<br/>\u00a0<br/>'''</span><br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"kw3\">random</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span>__doc__<span class=\"br0\">)</span><br/>data<span class=\"sy0\">,</span> trials <span class=\"sy0\">=</span> <span class=\"kw2\">list</span><span class=\"br0\">(</span><span class=\"st0\">'123456789'</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">while</span> data <span class=\"sy0\">==</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span>:<br/>    <span class=\"kw3\">random</span>.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span><br/><span class=\"kw1\">while</span> data <span class=\"sy0\">!=</span> <span class=\"kw2\">sorted</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span>:<br/>    trials +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    flip <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw2\">input</span><span class=\"br0\">(</span><span class=\"st0\">'#%2i: LIST:\u00a0%r Flip how many?: '</span>\u00a0% <span class=\"br0\">(</span>trials<span class=\"sy0\">,</span> <span class=\"st0\">' '</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span>data<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    data<span class=\"br0\">[</span>:flip<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"kw2\">reversed</span><span class=\"br0\">(</span>data<span class=\"br0\">[</span>:flip<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>You took\u00a0%2i attempts to put the digits in order!'</span>\u00a0% trials<span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 24, "block": "<pre class=\"text highlighted_source\">reversalGame &lt;- function(){<br/>  cat(\"Welcome to the Number Reversal Game! \\n\")<br/>  cat(\"Sort the numbers into ascending order by repeatedly \\n\",<br/>      \"reversing the first n digits, where you specify n. \\n \\n\", sep=\"\")<br/>\u00a0<br/>  # Generate a list that's definitely not in ascending order, per instuctions<br/>  data &lt;- sample(1:9, 9)<br/>  while (all(data == 1:9)){<br/>    cat(\"What were the chances...? \\n\")<br/>    data &lt;- sample(1:9, 9)<br/>  }<br/>  trials &lt;- 0<br/>\u00a0<br/>  # Play the game<br/>  while (any(data\u00a0!= 1:9)){<br/>    trials &lt;- trials + 1<br/>    cat(\"Trial\", sprintf(\"%02d\", trials), \" # \", data, \" #  \")<br/>    answer &lt;- readline(paste(\"Flip how many? \"))<br/>    data[1:answer] &lt;- data[answer:1]  <br/>  }<br/>\u00a0<br/>  # Victory!<br/>  cat(\"Well done.  You needed\", trials, \"flips. \\n\")<br/>}</pre>"}, {"lang": "Racket", "loc": 8, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(let loop ([nums (range 1 10)] [n 0])<br/>  (cond [(apply &lt; nums) (if (zero? n)<br/>                            (loop (shuffle nums) 0)<br/>                            (printf \"Done in ~s steps.\\n\" n))]<br/>        [else (printf \"Step #~s: ~s\\nFlip how many? \" n nums)<br/>              (define-values (l r) (split-at nums (read)))<br/>              (loop (append (reverse l) r) (add1 n))]))</pre>"}, {"lang": "Rascal", "loc": 37, "block": "<pre class=\"text highlighted_source\">import Prelude;<br/>import vis::Figure;<br/>import vis::Render;<br/>\u00a0<br/>public void NumberReversalGame(){<br/>\u00a0<br/>\t//generate randomlist<br/>\tL = [1..9];<br/>\tscore = 0;<br/>\trandomlist = [];<br/>\twhile (L\u00a0!= []){<br/>\t\ttemp = takeOneFrom(L);<br/>\t\trandomlist += temp[0];<br/>\t\tL = temp[1];<br/>\t}<br/>\u00a0<br/>\t// user interaction<br/>\tscore = 0;<br/>\ttext1 = \"\";<br/>\tfigure = <br/>\tbox(vcat([<br/>\t\tbox(text(str(){<br/>\t\t\treturn \"&lt;randomlist&gt;\";})), <br/>\t\tbox(textfield(\"Insert number of digits you would like to reverse here.\", <br/>\t\t\tvoid(str s){<br/>\t\t\t\tscore += 1;<br/>\t\t\t\tn = toInt(s);<br/>\t\t\t\tspliced = slice(randomlist, 0, n);\t\t\t\t\t<br/>\t\t\t\trandomlist = reverse(spliced) + (randomlist - spliced);<br/>\t\t\t\t},<br/>\t\t\tfillColor(\"lightblue\"))),<br/>\t\tbox(text(str(){<br/>\t\t\treturn ((randomlist == [1 .. 9])\u00a0? \"Well done! Your score: &lt;score&gt;.\"\u00a0: \"Keep going!\");}))<br/>\t\t\t\t]));<br/>\u00a0<br/>\trender(figure);<br/>}</pre>"}, {"lang": "REBOL", "loc": 22, "block": "<pre class=\"rebol highlighted_source\"><span class=\"coMULTI\">rebol []</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"st0\">\"NUMBER REVERSAL GAME\"</span><br/>\u00a0<br/>tries: <span class=\"nu0\">0</span><br/>goal: <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span><span class=\"br0\">]</span><br/><span class=\"kw3\">random</span><span class=\"sy0\">/</span>seed <span class=\"kw3\">now</span><br/>\u00a0<br/><span class=\"kw2\">until</span> <span class=\"br0\">[</span><br/>    jumble: <span class=\"kw3\">random</span> goal<br/>    jumble <span class=\"sy0\">!</span>= goal <span class=\"co1\">; repeat in the unlikely case that jumble isn't jumbled</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw2\">while</span> <span class=\"br0\">[</span>jumble <span class=\"sy0\">!</span>= goal<span class=\"br0\">]</span> <span class=\"br0\">[</span><br/>    <span class=\"kw3\">prin</span> jumble<br/>    <span class=\"kw3\">prin</span> <span class=\"st0\">\" How many to flip? \"</span><br/>    flip-index: <span class=\"kw3\">to-integer</span> <span class=\"kw3\">input</span> <span class=\"co1\">; no validation!</span><br/>    <span class=\"kw3\">reverse</span><span class=\"sy0\">/</span>part jumble flip-index<br/>    tries: tries + <span class=\"nu0\">1</span><br/><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"kw3\">rejoin</span> <span class=\"br0\">[</span><span class=\"st0\">\"You took \"</span> tries <span class=\"st0\">\" attempts.\"</span><span class=\"br0\">]</span></pre>"}, {"lang": "REXX", "loc": 29, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program (a game):  reverse a jumbled set of decimal digits 'til they're in order.*/</span><br/><span class=\"kw1\">signal</span> <span class=\"kw2\">on</span> <span class=\"kw2\">halt</span>                                   <span class=\"coMULTI\">/*allows the CBLF to  HALT the program.*/</span><br/>___= <span class=\"kw6\">copies</span><span class=\"br0\">(</span><span class=\"st0\">'\u2500'</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span>;      pad=<span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">''</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span>        <span class=\"coMULTI\">/*a fence used for computer's messages.*/</span><br/><span class=\"kw1\">say</span> ___  <span class=\"st0\">\"This game will show you nine random unique digits  (1 \u2500\u2500\u25ba 9),  and you'll enter\"</span><br/><span class=\"kw1\">say</span> ___  <span class=\"st0\">\"one of those digits  which will reverse all the digits from the left-most digit\"</span><br/><span class=\"kw1\">say</span> ___  <span class=\"st0\">\"up to  (and including)  that decimal digit.  The game's objective is to get all\"</span><br/><span class=\"kw1\">say</span> ___  <span class=\"st0\">\"of the digits in ascending order with the fewest tries.    Here're your digits:\"</span><br/>ok= <span class=\"nu0\">123456789</span>                                    <span class=\"coMULTI\">/*the result that the string should be.*/</span><br/>$=                                               <span class=\"coMULTI\">/* \u25c4\u2500\u2500\u2500 decimal target to be generated.*/</span><br/>      <span class=\"kw1\">do</span>  <span class=\"kw2\">until</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>$<span class=\"br0\">)</span>==<span class=\"nu0\">9</span>;     _=<span class=\"kw6\">random</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"coMULTI\">/*build a random unique numeric string.*/</span><br/>      <span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>_, $<span class=\"br0\">)</span> <span class=\"sy0\">\\</span>== <span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>           <span class=\"coMULTI\">/*\u00ac unique? Only use a decimal dig once*/</span><br/>      $=$ <span class=\"sy0\">||</span> _                                   <span class=\"coMULTI\">/*construct a string of unique digits. */</span><br/>      <span class=\"kw1\">if</span> $==ok  <span class=\"kw3\">then</span> $=                          <span class=\"coMULTI\">/*string can't be in order, start over.*/</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*until*/</span><br/>\u00a0<br/>  <span class=\"kw1\">do</span>  score=<span class=\"nu0\">1</span>  <span class=\"kw2\">until</span>  $==ok;           <span class=\"kw1\">say</span>       <span class=\"coMULTI\">/* [\u2193]  display the digits &amp; the prompt*/</span><br/>  <span class=\"kw1\">say</span> ___  $   <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"st0\">'please enter a digit  (or  Quit):'</span>, <span class=\"nu0\">50</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">parse</span> <span class=\"kw1\">pull</span> ox  <span class=\"sy0\">.</span>  <span class=\"nu0\">1</span>  ux <span class=\"sy0\">.</span> <span class=\"nu0\">1</span>  x  <span class=\"sy0\">.</span>;   <span class=\"kw2\">upper</span> ux  <span class=\"coMULTI\">/*get a decimal digit (maybe) from CBLF*/</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw6\">abbrev</span><span class=\"br0\">(</span><span class=\"st0\">'QUIT'</span>, ux, <span class=\"nu0\">1</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">signal</span> <span class=\"kw2\">halt</span>     <span class=\"coMULTI\">/*does the CBLF want to quit this game?*/</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">say</span> ___ pad <span class=\"st0\">'***error***  invalid input:  '</span> ox;  <span class=\"kw1\">iterate</span>;  <span class=\"kw3\">end</span><br/>  <span class=\"kw1\">if</span> x=<span class=\"st0\">''</span>  <span class=\"kw3\">then</span>  <span class=\"kw1\">iterate</span>                         <span class=\"coMULTI\">/*try again, CBLF didn't enter anything*/</span><br/>  g=<span class=\"kw6\">pos</span><span class=\"br0\">(</span>x, $<span class=\"br0\">)</span>                                    <span class=\"coMULTI\">/*validate if the input digit is legal.*/</span><br/>  <span class=\"kw1\">if</span> g==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> ___ pad <span class=\"st0\">'***error***  invalid digit:  '</span>     ox<br/>           <span class=\"kw3\">else</span> $=<span class=\"kw6\">strip</span><span class=\"br0\">(</span><span class=\"kw6\">reverse</span><span class=\"br0\">(</span><span class=\"kw6\">left</span><span class=\"br0\">(</span>$,g<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"kw6\">substr</span><span class=\"br0\">(</span>$,g+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*reverse some (or all) digits*/</span><br/>  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*score*/</span><br/>\u00a0<br/><span class=\"kw1\">say</span>;    <span class=\"kw1\">say</span> ___  $;     <span class=\"kw1\">say</span>;    <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">' Congratulations! '</span>, <span class=\"nu0\">70</span>, <span class=\"st0\">\"\u2550\"</span><span class=\"br0\">)</span>;       <span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span> ___ pad  <span class=\"st0\">'Your score was'</span> score;  <span class=\"kw1\">exit</span>       <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"kw2\">halt</span>:  <span class=\"kw1\">say</span>  ___  pad  <span class=\"st0\">'quitting.'</span>;     <span class=\"kw1\">exit</span>      <span class=\"coMULTI\">/*  \"   \"   \"   \"  \"     \"    \"    \"   */</span></pre>"}, {"lang": "Ring", "loc": 52, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Number reversal game<br/>\u00a0<br/>rever = 1:9<br/>leftrever = []<br/>for n = 1 to len(rever)<br/>     rnd = random(8) + 1<br/>     temp = rever[n]<br/>     rever[n] = rever[rnd]<br/>     rever[rnd] = temp<br/>next<br/>see rever<br/>see nl<br/>while true<br/>         num = 0<br/>         leftrever = []<br/>         showarray(rever)<br/>         see \"\u00a0: Reverse how many = \"<br/>         give r<br/>         r = number(r)<br/>         for n = 1 to r<br/>               add(leftrever, rever[n])<br/>         next<br/>         leftrever = reverse(leftrever)<br/>         for pos = 1 to r<br/>               rever[pos] = leftrever[pos]<br/>         next  <br/>         for m = 1 to len(rever)<br/>              if rever[m] = m<br/>                 num = num + 1<br/>              ok<br/>         next<br/>         if num = len(rever)<br/>            exit<br/>         ok<br/>end<br/>see \"You took \" + num + \" attempts.\" + nl<br/>\u00a0<br/>func swap(a, b)<br/>       temp = a<br/>       a = b<br/>       b = temp<br/>       return [a, b]<br/>\u00a0<br/>func showarray(vect)<br/>       svect = \"\"<br/>       for n = 1 to len(vect)<br/>             svect = svect + vect[n] + \" \"<br/>       next<br/>       svect = left(svect, len(svect) - 1)<br/>       see svect <br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">ary = <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">9</span><span class=\"br0\">)</span>.<span class=\"me1\">to_a</span><br/>ary.<span class=\"me1\">shuffle</span>! <span class=\"kw1\">while</span> ary == ary.<span class=\"me1\">sort</span><br/>score = <span class=\"nu0\">0</span><br/><span class=\"kw1\">until</span> ary == ary.<span class=\"me1\">sort</span><br/>  <span class=\"kw3\">print</span> <span class=\"st0\">\"#{ary.inspect} -- How many digits to reverse? \"</span><br/>  num = <span class=\"kw3\">gets</span>.<span class=\"me1\">to_i</span>  <span class=\"co1\"># should validate input</span><br/>  ary<span class=\"br0\">[</span><span class=\"nu0\">0</span>, num<span class=\"br0\">]</span> = ary<span class=\"br0\">[</span><span class=\"nu0\">0</span>, num<span class=\"br0\">]</span>.<span class=\"me1\">reverse</span><br/>  score <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">p</span> ary<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"Your score: #{score}\"</span></pre>"}, {"lang": "Run BASIC", "loc": 40, "block": "<pre class=\"text highlighted_source\">for i = 1 to 9  ' get numbers 1 to 9<br/> n(i) = i<br/>next i<br/>numShuffles = 3<br/>' ----------------------------------<br/>' shuffle numbers<br/>' ----------------------------------<br/>for \ti \t= 1 to 9 * numShuffles<br/>\ti1\t= int(rnd(1)*9) + 1<br/>\ti2\t= int(rnd(1)*9) + 1<br/>\th2\t= n(i1)<br/>\tn(i1)\t= n(i2)<br/>\tn(i2)\t= h2<br/>next i<br/>\u00a0<br/>for i = 1 to 9<br/> a$ = a$ + str$(n(i)) + \" \"<br/>next i<br/>count = 0<br/>\u00a0<br/>[loop]<br/>  count = count + 1<br/>  print count;\"\u00a0: \";a$<br/>    for i = 1 to 9                ' check if in sequence<br/>      j = i * 2<br/>      if mid$(a$,j-1,1) &gt; mid$(a$,j,1) then goto [notOrdered]<br/>    next i<br/>  print \"It took \";count;\" tries\"<br/>end<br/>\u00a0<br/>[notOrdered]<br/>input \"How many numbers to flip:\";i<br/>i  = ((i-1) * 2) + 1 <br/>b$ = \"\"<br/>for j = i to 1 step -2<br/>   b$ = b$ + mid$(a$,j,2)<br/>next j<br/>a$  = b$ + mid$(a$,i + 2)<br/>goto [loop]<br/>end</pre>"}, {"lang": "Scala", "loc": 29, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> NumberReversalGame <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> play<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, cur<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span>, goal<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    readLine<span class=\"br0\">(</span>s<span class=\"st0\">\"\"</span><span class=\"st0\">\"$n. ${cur mkString \"</span> <span class=\"st0\">\"}  How many to flip? \"</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a> <span class=\"sy0\">=&gt;</span> println<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> s <span class=\"sy0\">=&gt;</span> scala.<span class=\"me1\">util</span>.<span class=\"me1\">Try</span><span class=\"br0\">(</span>s.<span class=\"me1\">toInt</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> scala.<span class=\"me1\">util</span>.<span class=\"me1\">Success</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> i <span class=\"sy0\">&lt;=</span> cur.<span class=\"me1\">length</span> <span class=\"sy0\">=&gt;</span><br/>          <span class=\"br0\">(</span>cur.<span class=\"me1\">take</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>.<span class=\"me1\">reverse</span> ++ cur.<span class=\"me1\">drop</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> done <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> done <span class=\"sy0\">==</span> goal <span class=\"sy0\">=&gt;</span><br/>              println<span class=\"br0\">(</span>s<span class=\"st0\">\"Congratulations! You solved \"</span>+goal.<span class=\"me1\">mkString</span><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>              println<span class=\"br0\">(</span>s<span class=\"st0\">\"Your score is $n (lower is better)\"</span><span class=\"br0\">)</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> next <span class=\"sy0\">=&gt;</span> play<span class=\"br0\">(</span>n + <span class=\"nu0\">1</span>, next, goal<span class=\"br0\">)</span><br/>          <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>s<span class=\"st0\">\"Choose a number between 1 and ${cur.length}\"</span><span class=\"br0\">)</span><br/>          play<span class=\"br0\">(</span>n + <span class=\"nu0\">1</span>, cur, goal<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> play<span class=\"br0\">(</span>size<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> goal <span class=\"sy0\">=</span> List.<span class=\"me1\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, size + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> init<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span> <span class=\"sy0\">=</span> scala.<span class=\"me1\">util</span>.<span class=\"me1\">Random</span>.<span class=\"me1\">shuffle</span><span class=\"br0\">(</span>goal<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> repeat <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> repeat <span class=\"sy0\">==</span> goal <span class=\"sy0\">=&gt;</span> init<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> done <span class=\"sy0\">=&gt;</span> done<br/>    <span class=\"br0\">}</span><br/>    play<span class=\"br0\">(</span><span class=\"nu0\">1</span>, init, goal<span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  play<span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 38, "block": "<pre class=\"scheme highlighted_source\">\u00a0<br/><span class=\"br0\">(</span>import <span class=\"br0\">(</span>scheme base<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">read</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>scheme <span class=\"kw1\">write</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span>srfi <span class=\"nu0\">1</span><span class=\"br0\">)</span>   <span class=\"co1\">; list functions</span><br/>        <span class=\"br0\">(</span>srfi <span class=\"nu0\">27</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; random numbers</span><br/>\u00a0<br/><span class=\"br0\">(</span>random<span class=\"sy0\">-</span>source<span class=\"sy0\">-</span>randomize<span class=\"sy0\">!</span> default<span class=\"sy0\">-</span>random<span class=\"sy0\">-</span>source<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>randomised<span class=\"sy0\">-</span><span class=\"kw1\">list</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>vec <span class=\"br0\">(</span>apply <span class=\"kw1\">vector</span> <span class=\"br0\">(</span>iota <span class=\"nu0\">9</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">do</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>c <span class=\"nu0\">0</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> c<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> c <span class=\"nu0\">20</span><span class=\"br0\">)</span>                            <span class=\"co1\">; at least 20 tries</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span>apply <span class=\"sy0\">&lt;</span> <span class=\"br0\">(</span>vector<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> vec<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; ensures list not in order</span><br/>       <span class=\"br0\">(</span>vector<span class=\"sy0\">-&gt;</span><span class=\"kw1\">list</span> vec<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">let*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>integer <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">; swap two randomly chosen elements</span><br/>             <span class=\"br0\">(</span>j <span class=\"br0\">(</span>random<span class=\"sy0\">-</span>integer <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span>tmp <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> vec i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> vec i <span class=\"br0\">(</span><span class=\"kw1\">vector-ref</span> vec j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">vector-set!</span> vec j tmp<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>play<span class=\"sy0\">-</span>game lst plays<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>reverse<span class=\"sy0\">-</span>first n lst<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>let<span class=\"sy0\">-</span>values <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">(</span>start tail<span class=\"br0\">)</span> <span class=\"br0\">(</span>split<span class=\"sy0\">-</span>at lst n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"br0\">(</span><span class=\"kw1\">reverse</span> start<span class=\"br0\">)</span> tail<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"List: \"</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">display</span> lst<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">newline</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"st0\">\"How many numbers should be flipped? \"</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let*</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>flip <span class=\"br0\">(</span>string<span class=\"sy0\">-&gt;</span>number <span class=\"br0\">(</span>read<span class=\"sy0\">-</span>line<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>new<span class=\"sy0\">-</span>lst <span class=\"br0\">(</span>reverse<span class=\"sy0\">-</span>first flip lst<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>apply <span class=\"sy0\">&lt;</span> new<span class=\"sy0\">-</span>lst<span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span><span class=\"kw1\">display</span> <span class=\"br0\">(</span><span class=\"kw1\">string-append</span> <span class=\"st0\">\"Finished in \"</span><br/>                              <span class=\"br0\">(</span>number<span class=\"sy0\">-&gt;</span><span class=\"kw1\">string</span> plays<span class=\"br0\">)</span><br/>                              <span class=\"st0\">\" attempts<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">(</span>play<span class=\"sy0\">-</span>game new<span class=\"sy0\">-</span>lst <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"nu0\">1</span> plays<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>play<span class=\"sy0\">-</span>game <span class=\"br0\">(</span>make<span class=\"sy0\">-</span>randomised<span class=\"sy0\">-</span><span class=\"kw1\">list</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "Seed7", "loc": 37, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    const array integer: sortedList is [] ( 1, 2, 3, 4, 5, 6, 7, 8, 9);<br/>    var array integer: list is 0 times 0;<br/>    var array integer: reversedList is 0 times 0;<br/>    var integer: score is 0;<br/>    var integer: index is 0;<br/>    var integer: number is 0;<br/>    var integer: reverse is 0;<br/>  begin<br/>    for number range sortedList do<br/>      index\u00a0:= rand(1, succ(length(list)));<br/>      list\u00a0:= list[.. pred(index)] &amp; [] (number) &amp; list[index ..];<br/>    end for;<br/>    repeat<br/>      write(\"Current list: \");<br/>      for number range list do<br/>        write(number &lt;&amp; \" \");<br/>      end for;<br/>      repeat<br/>        write(\" Digits to reverse? \");<br/>        readln(reverse);<br/>        if reverse &lt; 2 or reverse &gt; 9 then<br/>          write(\"Please enter a value between 2 and 9.\");<br/>        end if;<br/>      until reverse &gt;= 2 and reverse &lt;= 9;<br/>      incr(score);<br/>      reversedList\u00a0:= 0 times 0;<br/>      for index range reverse downto 1 do<br/>        reversedList &amp;:= list[index];<br/>      end for;<br/>      list\u00a0:= reversedList &amp; list[succ(reverse) ..];<br/>    until list = sortedList;<br/>    writeln(\"Congratulations, you sorted the list in \" &lt;&amp; score &lt;&amp; \" reversals.\");<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 11, "block": "<pre class=\"ruby highlighted_source\">var turn = <span class=\"nu0\">0</span>;<br/>var jumble = @<span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">9</span><span class=\"br0\">)</span>.<span class=\"me1\">bshuffle</span>;        <span class=\"co1\"># best-shuffle</span><br/>\u00a0<br/><span class=\"kw1\">for</span> <span class=\"br0\">(</span>turn; jumble\u00a0!= <span class=\"nu0\">1</span>..<span class=\"nu0\">9</span>; <span class=\"sy0\">++</span>turn<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2d:\u00a0%s - Flip how many digits\u00a0? \"</span>, turn, jumble.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    var d = read<span class=\"br0\">(</span>Number<span class=\"br0\">)</span> \\\\ <span class=\"kw1\">break</span>;<br/>    jumble<span class=\"br0\">[</span><span class=\"nu0\">0</span> .. <span class=\"me1\">d</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = <span class=\"br0\">[</span>jumble<span class=\"br0\">[</span><span class=\"nu0\">0</span> .. <span class=\"me1\">d</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span>.<span class=\"me1\">reverse</span>...;<br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"st0\">\"    #{jumble.join(' ')}<span class=\"es0\">\\n</span>\"</span>;<br/><span class=\"kw3\">print</span> <span class=\"st0\">\"You won in #{turn} turns.<span class=\"es0\">\\n</span>\"</span>;</pre>"}, {"lang": "Tcl", "loc": 43, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"co1\"># Simple shuffler, not very efficient but good enough for here</span><br/><span class=\"kw1\">proc</span> shuffle <span class=\"kw2\">list</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> result <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$list</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> i <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>int<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"kw2\">llength</span> <span class=\"re0\">$list</span><span class=\"br0\">]</span> <span class=\"sy0\">*</span> rand<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">lappend</span> result <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$list</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>\t<span class=\"kw1\">set</span> <span class=\"kw2\">list</span> <span class=\"br0\">[</span><span class=\"kw2\">lreplace</span> <span class=\"re0\">$list</span> <span class=\"re0\">$i</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$result</span><br/><span class=\"br0\">}</span><br/><span class=\"co1\"># Returns the list with the prefix of it reversed</span><br/><span class=\"kw1\">proc</span> flipfirst <span class=\"br0\">{</span><span class=\"kw2\">list</span> n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">concat</span> <span class=\"br0\">[</span>lreverse <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$list</span> <span class=\"nu0\">0</span> <span class=\"re0\">$n</span>-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"br0\">[</span><span class=\"kw2\">lrange</span> <span class=\"re0\">$list</span> <span class=\"re0\">$n</span> end<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Core game engine; list to play with is optional argument</span><br/><span class=\"kw1\">proc</span> nrgame <span class=\"br0\">{</span><span class=\"br0\">{</span>target <span class=\"st0\">\"1 2 3 4 5 6 7 8 9\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> nums <span class=\"re0\">$target</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$nums</span> eq <span class=\"re0\">$target</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> nums <span class=\"br0\">[</span>shuffle <span class=\"re0\">$nums</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> goes <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> <span class=\"br0\">{</span><span class=\"re0\">$nums</span> ne <span class=\"re0\">$target</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">incr</span> goes<br/>\t<span class=\"kw2\">puts</span> -nonewline <span class=\"st0\">\"#${goes}: List is '[join $nums {, }]', how many to reverse? \"</span><br/>\t<span class=\"kw2\">flush</span> stdout<br/>\t<span class=\"kw2\">gets</span> stdin n<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> eq <span class=\"st0\">\"q\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> quit<span class=\"br0\">}</span><br/>\t<span class=\"co1\"># Input validation would go here</span><br/>\t<span class=\"kw1\">set</span> nums <span class=\"br0\">[</span>flipfirst <span class=\"re0\">$nums</span> <span class=\"re0\">$n</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$goes</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Print some instructions and wait for the user to win</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"Welcome to the Number Reversal Game!\"</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"------------------------------------\"</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"I'll show you a list of numbers, you need to reverse prefixes of them\"</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"to get the whole list in ascending order. A 'q' will quit early.<span class=\"es0\">\\n</span>\"</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><br/><span class=\"kw1\">set</span> outcome <span class=\"br0\">[</span>nrgame<span class=\"br0\">]</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$outcome</span> ne <span class=\"st0\">\"quit\"</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>You took $outcome attempts to put the digits in order.\"</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "TUSCRIPT", "loc": 39, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>$$ MODE TUSCRIPT<br/>numbers=RANDOM_NUMBERS (1,9,9),nr=0<br/>\u00a0<br/>SECTION check<br/>LOOP o,n=numbers<br/> IF (n!=o) THEN<br/>  DO PRINT<br/>  EXIT<br/> ELSEIF (n==9&amp;&amp;o==9) THEN<br/>  DO PRINT<br/>  PRINT \" You made it ... in round \",r<br/>  STOP<br/> ELSE<br/>  CYCLE<br/> ENDIF<br/>ENDLOOP<br/>ENDSECTION<br/>\u00a0<br/>SECTION print<br/>  PRINT numbers<br/>ENDSECTION<br/>\u00a0<br/>\u00a0<br/>DO PRINT<br/>LOOP r=1,14<br/>IF (nr&gt;=0&amp;&amp;nr&lt;10) THEN<br/>  ASK \"Reverse - how many?\": nr=\"\"<br/>  i=\"\"<br/>  LOOP n=1,nr<br/>   i=APPEND(i,n)<br/>  ENDLOOP<br/>  numbers   =SPLIT (numbers)<br/>  reverse_nr=SELECT (numbers,#i,keep_nr), reverse_nr=REVERSE(reverse_nr)<br/>  numbers   =APPEND (reverse_nr,keep_nr), numbers   =JOIN   (numbers)<br/>  DO check<br/>ENDIF<br/>ENDLOOP<br/>\u00a0</pre>"}, {"lang": "UNIX Shell", "loc": 100, "block": "<pre class=\"bash highlighted_source\">print <span class=\"st0\">\"<span class=\"es1\">\\n</span>Welcome to the number reversal game!<span class=\"es1\">\\n</span>\"</span><br/>\u00a0<br/>print <span class=\"st0\">\"You must put the numbers in order from 1 to 9.\"</span><br/>print <span class=\"st0\">\"Your only moves are to reverse groups of numbers\"</span><br/>print <span class=\"st0\">\"on the left side of the list.\"</span><br/>\u00a0<br/>integer list score<br/>\u00a0<br/><span class=\"co0\"># start a new game</span><br/><span class=\"kw1\">function</span> newgame <span class=\"br0\">{</span><br/>\tinteger i j t<br/>\u00a0<br/>\t<span class=\"co0\"># score = number of moves</span><br/>\t<span class=\"br0\">(</span><span class=\"br0\">(</span>score = <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t<span class=\"co0\"># list = array of numbers</span><br/>\t<span class=\"kw1\">set</span> <span class=\"re5\">-A</span> list <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span> <span class=\"nu0\">6</span> <span class=\"nu0\">7</span> <span class=\"nu0\">8</span> <span class=\"nu0\">9</span><br/>\t<span class=\"kw1\">while</span> <span class=\"kw2\">true</span>; <span class=\"kw1\">do</span><br/>\t\t<span class=\"co0\"># Knuth shuffle</span><br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>i = <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>\t\t\t<span class=\"co0\"># get random j from 0 to i - 1</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>j = RANDOM<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>j <span class=\"sy0\">&lt;</span> <span class=\"nu0\">32768</span> <span class=\"sy0\">%</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">continue</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>j <span class=\"sy0\">%</span>= i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\t\t<span class=\"co0\"># decrement i, swap list[i] with list[j]</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>i -= <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>t = list<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span> = list<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>list<span class=\"br0\">[</span>j<span class=\"br0\">]</span> = t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">done</span><br/>\t\twin <span class=\"sy0\">||</span> <span class=\"kw3\">break</span><br/>\t<span class=\"kw1\">done</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co0\"># numbers in order?</span><br/><span class=\"kw1\">function</span> win <span class=\"br0\">{</span><br/>\tinteger i<br/>\u00a0<br/>\t<span class=\"co0\"># check if list[0] == 1, list[1] == 2, ...</span><br/>\t<span class=\"br0\">(</span><span class=\"br0\">(</span>i = <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>list<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!</span>= i + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">return</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>i += <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">done</span><br/>\t<span class=\"kw3\">return</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co0\"># reverse first $1 elements of list</span><br/><span class=\"kw1\">function</span> reverse <span class=\"br0\">{</span><br/>\tinteger left right t<br/>\u00a0<br/>\t<span class=\"br0\">(</span><span class=\"br0\">(</span>left = <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"br0\">(</span>right = <span class=\"re4\">$1</span> - <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>right <span class=\"sy0\">&gt;</span> left<span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>t = list<span class=\"br0\">[</span>left<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>list<span class=\"br0\">[</span>left<span class=\"br0\">]</span> = list<span class=\"br0\">[</span>right<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>list<span class=\"br0\">[</span>right<span class=\"br0\">]</span> = t<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>left += <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>right -= <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">done</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>integer i<br/>\u00a0<br/>newgame<br/><span class=\"kw1\">while</span> <span class=\"kw2\">true</span>; <span class=\"kw1\">do</span><br/>\tprint <span class=\"re5\">-n</span> <span class=\"st0\">\"<span class=\"es1\">\\n</span>Your list: \"</span><br/>\t<span class=\"br0\">(</span><span class=\"br0\">(</span>i = <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>\t\t<span class=\"kw3\">printf</span> <span class=\"st0\">\"%d, \"</span> <span class=\"co1\">${list[i]}</span><br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>i += <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">done</span><br/>\t<span class=\"kw3\">printf</span> <span class=\"st0\">\"%d<span class=\"es1\">\\n</span>\"</span> <span class=\"co1\">${list[8]}</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> win; <span class=\"kw1\">then</span><br/>\t\tprint <span class=\"st0\">\"YOU WIN!\"</span><br/>\t\t<span class=\"kw3\">printf</span> <span class=\"st0\">\"Your score is\u00a0%d moves.<span class=\"es1\">\\n</span>\"</span> <span class=\"re1\">$score</span><br/>\t\tprint <span class=\"re5\">-n</span> <span class=\"st0\">\"Would you like to play again (y/n)? \"</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"kw2\">read</span> again <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span> <span class=\"re1\">$again</span> = <span class=\"sy0\">@</span><span class=\"br0\">(</span>y<span class=\"sy0\">|</span>Y<span class=\"br0\">)</span><span class=\"sy0\">*</span> <span class=\"br0\">]</span><span class=\"br0\">]</span>; <span class=\"kw1\">then</span><br/>\t\t\tnewgame<br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\tprint <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Bye!\"</span><br/>\t\t\t<span class=\"kw3\">exit</span><br/>\t\t<span class=\"kw1\">fi</span><br/>\t<span class=\"kw1\">else</span><br/>\t\tprint <span class=\"re5\">-n</span> <span class=\"st0\">\"How many numbers to reverse? \"</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"kw2\">read</span> i; <span class=\"kw1\">then</span><br/>\t\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span>score += <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\treverse <span class=\"re1\">$i</span><br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\tprint <span class=\"st0\">\"<span class=\"es1\">\\n</span><span class=\"es1\">\\n</span>Bye!\"</span><br/>\t\t\t<span class=\"kw3\">exit</span><br/>\t\t<span class=\"kw1\">fi</span><br/>\t<span class=\"kw1\">fi</span><br/><span class=\"kw1\">done</span></pre>"}, {"lang": "XPL0", "loc": 24, "block": "<pre class=\"text highlighted_source\">int  Taken, I, Digit, Num, Score, Rev, Temp;<br/>char List(9);<br/>include c:\\cxpl\\codes;<br/>                        \\make jumbled list of digits 1 to 9<br/>[loop   [Taken:= 0;     \\bit array indicates which digits are taken<br/>        for I:= 0 to 9-1 do<br/>                [repeat Digit:= Ran(9)+1 until (Taken &amp; 1&lt;&lt;Digit) = 0;<br/>                Taken:= Taken + 1&lt;&lt;Digit;       \\mark digit as taken<br/>                List(I):= Digit;                \\add digit to the list<br/>                ];<br/>for I:= 0 to 9-2 do if List(I) &gt; List(I+1) then quit;<br/>];                      \\quit loop when digits are not in ascending order<br/>Score:= 0;<br/>loop    [for I:= 0 to 9-1 do [IntOut(0, List(I));  ChOut(0, ^ )];<br/>        Num:= 0;  for I:= 0 to 9-1 do Num:= Num*10 + List(I);<br/>        if Num = 123456789 then quit;<br/>        Text(0, \"^M^JReverse how many digits? \");  Rev:= IntIn(0);<br/>        for I:= 0 to Rev/2-1 do<br/>            [Temp:= List(I);  List(I):= List(Rev-1-I);  List(Rev-1-I):= Temp];<br/>        Score:= Score+1;<br/>        ];<br/>Text(0, \"^M^JCongrats! You did it in \"); IntOut(0, Score);<br/>Text(0, \" moves!!^M^J\");<br/>]</pre>"}, {"lang": "zkl", "loc": 13, "block": "<pre class=\"text highlighted_source\">correctList,scrambledList,N:=[1..9].walk(), correctList.shuffle(),correctList.len();<br/>correctList,scrambledList=correctList.concat(\"\"), scrambledList.concat(\"\"); // list to string<br/>attempts:=0;<br/>while(scrambledList!=correctList){ // Repeat until the sequence is correct<br/>   n:=ask((\"[%d]\u00a0%s How many numbers (from the left) should be flipped? \")<br/>\t      .fmt(attempts,scrambledList));<br/>   try{ n=n.toInt() }catch{ println(\"Not a number\"); continue; }<br/>   if(not (0&lt;=n&lt;N)){ println(\"Out of range\"); continue; }<br/>   attempts+=1;<br/>   // Reverse the first part of the string and add the second part<br/>   scrambledList=scrambledList[0,n].reverse() + scrambledList[n,*];<br/>}<br/>println(\"You took\u00a0%d attempts to get the correct sequence.\".fmt(attempts));</pre>"}]}