{"task": "Primality_by_trial_division", "blocks": [{"lang": "360 Assembly", "loc": 63, "block": "<pre class=\"text highlighted_source\">*        Primality by trial division  26/03/2017<br/>PRIMEDIV CSECT<br/>         USING  PRIMEDIV,R13       base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    save previous context<br/>         ST     R13,4(R15)         link backward<br/>         ST     R15,8(R13)         link forward<br/>         LR     R13,R15            set addressability<br/>         LA     R10,PG             pgi=0<br/>         LA     R6,1               i=1<br/>       DO WHILE=(C,R6,LE,=F'50')   do i=1 to 50<br/>         LR     R1,R6                i<br/>         BAL    R14,ISPRIME          call isprime(i)<br/>       IF C,R0,EQ,=F'1' THEN         if isprime(i) then<br/>         XDECO  R6,XDEC                edit i<br/>         MVC    0(4,R10),XDEC+8        output i<br/>         LA     R10,4(R10)             pgi+=4<br/>       ENDIF    ,                    endif<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         XPRNT  PG,L'PG            print buffer<br/>         L      R13,4(0,R13)       restore previous savearea pointer<br/>         LM     R14,R12,12(R13)    restore previous context<br/>         XR     R15,R15            rc=0<br/>         BR     R14                exit<br/>*------- ----   ----------------------------------------<br/>ISPRIME  EQU    *                  function isprime(n)<br/>       IF C,R1,LE,=F'1' THEN       if n&lt;=1 then<br/>         LA     R0,0                 return(0)<br/>         BR     R14                  return<br/>       ENDIF    ,                  endif<br/>       IF C,R1,EQ,=F'2' THEN       if n=2 then<br/>         LA     R0,1                 return(1)<br/>         BR     R14                  return<br/>       ENDIF    ,                  endif<br/>         LR     R4,R1              n<br/>         N      R4,=X'00000001'    n and 1<br/>       IF LTR,R4,Z,R4 THEN         if mod(n,2)=0 then<br/>         LA     R0,0                 return(0)<br/>         BR     R14                  return<br/>       ENDIF    ,                  endif<br/>         LA     R7,3               j=3<br/>         LA     R5,9               r5=j*j<br/>       DO WHILE=(CR,R5,LE,R1)      do j=3 by 2 while j*j&lt;=n<br/>         LR     R4,R1                n<br/>         SRDA   R4,32                ~<br/>         DR     R4,R7                /j<br/>       IF LTR,R4,Z,R4 THEN           if mod(n,j)=0 then<br/>         LA     R0,0                   return(0)<br/>         BR     R14                    return<br/>       ENDIF    ,                    endif<br/>         LA     R7,2(R7)             j+=2<br/>         LR     R5,R7                j<br/>         MR     R4,R7                r5=j*j<br/>       ENDDO    ,                  enddo j<br/>         LA     R0,1               return(1)<br/>         BR     R14                return<br/>*------- ----   ----------------------------------------<br/>PG       DC     CL80' '            buffer<br/>XDEC     DS     CL12               temp for xdeco<br/>         YREGS<br/>         END    PRIMEDIV</pre>"}, {"lang": "ABAP", "loc": 103, "block": "<pre class=\"abap highlighted_source\"><a href=\"http://help.sap.com/abapdocu/en/ABAPCLASS.htm\"><span class=\"kw3\">class</span></a> ZMLA_ROSETTA <span class=\"kw4\">definition</span><br/>  <span class=\"kw4\">public</span><br/>  <span class=\"kw9\">create public</span> <span class=\"sy0\">.</span><br/>\u00a0<br/><span class=\"kw8\"><span class=\"kw4\">public</span> section</span><span class=\"sy0\">.</span><br/>\u00a0<br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPTYPES.htm\"><span class=\"kw2\">types</span></a><span class=\"sy0\">:</span><br/>    enumber         <span class=\"kw4\">TYPE</span>          N  <span class=\"kw4\">LENGTH</span> <span class=\"nu0\">60</span> <span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPTYPES.htm\"><span class=\"kw2\">types</span></a><span class=\"sy0\">:</span><br/>    listof_enumber  <span class=\"kw4\">TYPE</span> <span class=\"kw9\"><span class=\"kw4\">TABLE</span> OF</span> enumber <span class=\"sy0\">.</span><br/>\u00a0<br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPCLASS-METHODS.htm\"><span class=\"kw3\">class-methods</span></a> IS_PRIME<br/>    <span class=\"kw4\">importing</span><br/>      <span class=\"kw4\">value</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"kw4\">type</span> ENUMBER<br/>    <span class=\"kw4\">returning</span><br/>      <span class=\"kw4\">value</span><span class=\"br0\">(</span>OFLAG<span class=\"br0\">)</span> <span class=\"kw4\">type</span> ABAP_BOOL <span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPCLASS-METHODS.htm\"><span class=\"kw3\">class-methods</span></a> IS_PRIME_I<br/>    <span class=\"kw4\">importing</span><br/>      <span class=\"kw4\">value</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"kw4\">type</span> I<br/>    <span class=\"kw4\">returning</span><br/>      <span class=\"kw4\">value</span><span class=\"br0\">(</span>OFLAG<span class=\"br0\">)</span> <span class=\"kw4\">type</span> ABAP_BOOL <span class=\"sy0\">.</span><br/>  <span class=\"kw8\">protected section</span><span class=\"sy0\">.</span><br/>  <span class=\"kw8\">private section</span><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDCLASS.htm\"><span class=\"kw3\">ENDCLASS</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPCLASS.htm\"><span class=\"kw3\">CLASS</span></a> ZMLA_ROSETTA <span class=\"kw4\">IMPLEMENTATION</span><span class=\"sy0\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co2\">* &lt;SIGNATURE&gt;---------------------------------------------------------------------------------------+</span><br/><span class=\"co2\">* | Static Public Method ZMLA_ROSETTA=&gt;IS_PRIME</span><br/><span class=\"co2\">* +-------------------------------------------------------------------------------------------------+</span><br/><span class=\"co2\">* | [---&gt;] N                              TYPE        ENUMBER</span><br/><span class=\"co2\">* | [&lt;-()] OFLAG                          TYPE        ABAP_BOOL</span><br/><span class=\"co2\">* +--------------------------------------------------------------------------------------&lt;/SIGNATURE&gt;</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPMETHOD.htm\"><span class=\"kw3\">method</span></a> IS_PRIME<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">IF</span></a> n <span class=\"sy1\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">.</span><br/>      oflag <span class=\"sy1\">=</span> abap_false<span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPRETURN.htm\"><span class=\"kw1\">RETURN</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">ENDIF</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">IF</span></a> n <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"kw4\">or</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">.</span><br/>      oflag <span class=\"sy1\">=</span> abap_true<span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPRETURN.htm\"><span class=\"kw1\">RETURN</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">ENDIF</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">IF</span></a> n <span class=\"kw4\">mod</span> <span class=\"nu0\">2</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw4\">or</span> n <span class=\"kw4\">mod</span> <span class=\"nu0\">3</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>      oflag <span class=\"sy1\">=</span> abap_false<span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPRETURN.htm\"><span class=\"kw1\">RETURN</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">ENDIF</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">DATA</span></a><span class=\"sy0\">:</span> lim <span class=\"kw4\">type</span> enumber<span class=\"sy0\">,</span><br/>          d   <span class=\"kw4\">type</span> enumber<span class=\"sy0\">,</span><br/>          i   <span class=\"kw4\">TYPE</span> i        <span class=\"kw4\">VALUE</span> <span class=\"nu0\">2</span><span class=\"sy0\">.</span><br/>    lim <span class=\"sy1\">=</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span> n <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    d   <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPWHILE.htm\"><span class=\"kw1\">WHILE</span></a> d <span class=\"sy1\">&lt;=</span> lim<span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">IF</span></a> n <span class=\"kw4\">mod</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>        oflag <span class=\"sy1\">=</span> abap_false<span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPRETURN.htm\"><span class=\"kw1\">RETURN</span></a><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">ENDIF</span></a><span class=\"sy0\">.</span><br/>      d <span class=\"sy1\">=</span> d <span class=\"sy0\">+</span> i<span class=\"sy0\">.</span><br/>      i <span class=\"sy1\">=</span> <span class=\"nu0\">6</span> <span class=\"sy0\">-</span> i<span class=\"sy0\">.</span>  <span class=\"co1\">\" this modifies 2 into 4 and viceversa</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDWHILE.htm\"><span class=\"kw1\">ENDWHILE</span></a><span class=\"sy0\">.</span><br/>    oflag <span class=\"sy1\">=</span> abap_true<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPRETURN.htm\"><span class=\"kw1\">RETURN</span></a><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDMETHOD.htm\"><span class=\"kw3\">endmethod</span></a><span class=\"sy0\">.</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co2\">* &lt;SIGNATURE&gt;---------------------------------------------------------------------------------------+</span><br/><span class=\"co2\">* | Static Public Method ZMLA_ROSETTA=&gt;IS_PRIME_I</span><br/><span class=\"co2\">* +-------------------------------------------------------------------------------------------------+</span><br/><span class=\"co2\">* | [---&gt;] N                              TYPE        I</span><br/><span class=\"co2\">* | [&lt;-()] OFLAG                          TYPE        ABAP_BOOL</span><br/><span class=\"co2\">* +--------------------------------------------------------------------------------------&lt;/SIGNATURE&gt;</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPMETHOD.htm\"><span class=\"kw3\">method</span></a> IS_PRIME_I<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">IF</span></a> n <span class=\"sy1\">&lt;</span> <span class=\"nu0\">2</span><span class=\"sy0\">.</span><br/>      oflag <span class=\"sy1\">=</span> abap_false<span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPRETURN.htm\"><span class=\"kw1\">RETURN</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">ENDIF</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">IF</span></a> n <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"kw4\">or</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">.</span><br/>      oflag <span class=\"sy1\">=</span> abap_true<span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPRETURN.htm\"><span class=\"kw1\">RETURN</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">ENDIF</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">IF</span></a> n <span class=\"kw4\">mod</span> <span class=\"nu0\">2</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"kw4\">or</span> n <span class=\"kw4\">mod</span> <span class=\"nu0\">3</span> <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>      oflag <span class=\"sy1\">=</span> abap_false<span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPRETURN.htm\"><span class=\"kw1\">RETURN</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">ENDIF</span></a><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">DATA</span></a><span class=\"sy0\">:</span> lim <span class=\"kw4\">type</span> i<span class=\"sy0\">,</span><br/>          d   <span class=\"kw4\">type</span> i<span class=\"sy0\">,</span><br/>          i   <span class=\"kw4\">TYPE</span> i        <span class=\"kw4\">VALUE</span> <span class=\"nu0\">2</span><span class=\"sy0\">.</span><br/>    lim <span class=\"sy1\">=</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span> n <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>    d   <span class=\"sy1\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPWHILE.htm\"><span class=\"kw1\">WHILE</span></a> d <span class=\"sy1\">&lt;=</span> lim<span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPIF.htm\"><span class=\"kw1\">IF</span></a> n <span class=\"kw4\">mod</span> d <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>        oflag <span class=\"sy1\">=</span> abap_false<span class=\"sy0\">.</span><br/>        <a href=\"http://help.sap.com/abapdocu/en/ABAPRETURN.htm\"><span class=\"kw1\">RETURN</span></a><span class=\"sy0\">.</span><br/>      <a href=\"http://help.sap.com/abapdocu/en/ABAPENDIF.htm\"><span class=\"kw1\">ENDIF</span></a><span class=\"sy0\">.</span><br/>      d <span class=\"sy1\">=</span> d <span class=\"sy0\">+</span> i<span class=\"sy0\">.</span><br/>      i <span class=\"sy1\">=</span> <span class=\"nu0\">6</span> <span class=\"sy0\">-</span> i<span class=\"sy0\">.</span>  <span class=\"co1\">\" this modifies 2 into 4 and viceversa</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPENDWHILE.htm\"><span class=\"kw1\">ENDWHILE</span></a><span class=\"sy0\">.</span><br/>    oflag <span class=\"sy1\">=</span> abap_true<span class=\"sy0\">.</span><br/>    <a href=\"http://help.sap.com/abapdocu/en/ABAPRETURN.htm\"><span class=\"kw1\">RETURN</span></a><span class=\"sy0\">.</span><br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPENDMETHOD.htm\"><span class=\"kw3\">endmethod</span></a><span class=\"sy0\">.</span><br/><a href=\"http://help.sap.com/abapdocu/en/ABAPENDCLASS.htm\"><span class=\"kw3\">ENDCLASS</span></a><span class=\"sy0\">.</span></pre>"}, {"lang": "ACL2", "loc": 10, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> is-prime-r <span class=\"br0\">(</span>x i<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>declare <span class=\"br0\">(</span>xargs <span class=\"sy0\">:</span><span class=\"me1\">measure</span> <span class=\"br0\">(</span>nfix <span class=\"br0\">(</span>- x i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>zp <span class=\"br0\">(</span>- <span class=\"br0\">(</span>- x i<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       t<br/>       <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span>/<span class=\"sy0\">=</span> <span class=\"br0\">(</span>mod x i<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>is-prime-r x <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> is-prime <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> x <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>is-prime-r x <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "ActionScript", "loc": 9, "block": "<pre class=\"actionscript highlighted_source\"><span class=\"kw2\">function</span> isPrime<span class=\"br0\">(</span>n:<span class=\"kw3\">int</span><span class=\"br0\">)</span>:<span class=\"kw3\">Boolean</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span>;<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>n == <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span>;<br/>\t<span class=\"kw1\">if</span><span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> == <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span>;<br/>\t<span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw2\">var</span> i:<span class=\"kw3\">int</span> = <span class=\"nu0\">3</span>; i <span class=\"sy0\">&lt;</span>= <span class=\"kw3\">Math</span>.<span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>; i+= <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i == <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span>;<br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span>;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ada", "loc": 18, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">function</span> Is_Prime<span class=\"br0\">(</span>Item\u00a0: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>   Result\u00a0: Boolean\u00a0:= True;<br/>   Test\u00a0: Natural;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">if</span> Item /= <span class=\"nu0\">2</span> <span class=\"kw2\">and</span> Item <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>      Result\u00a0:= False;<br/>   <span class=\"kw1\">else</span><br/>      Test\u00a0:= <span class=\"nu0\">3</span>;<br/>      <span class=\"kw1\">while</span> Test &lt; Integer<span class=\"br0\">(</span>Sqrt<span class=\"br0\">(</span>Float<span class=\"br0\">(</span>Item<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">loop</span><br/>         <span class=\"kw1\">if</span> Item <span class=\"kw2\">mod</span> Test = <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>            Result\u00a0:= False;<br/>            <span class=\"kw3\">exit</span>;<br/>         <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>         Test\u00a0:= Test + <span class=\"nu0\">2</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>  <span class=\"kw1\">return</span> Result;<br/><span class=\"kw1\">end</span> Is_Prime;</pre>"}, {"lang": "ALGOL 68", "loc": 1, "block": "<pre>COMMENT\n  This routine is used in more than one place, and is essentially a\n  template that can by used for many different types, eg INT, LONG INT...\nUSAGE\n  MODE ISPRIMEINT = INT, LONG INT, etc\n  PR READ \"prelude/is_prime.a68\" PR\nEND COMMENT\n</pre>"}, {"lang": "ALGOL W", "loc": 17, "block": "<pre class=\"text highlighted_source\">% returns true if n is prime, false otherwise\u00a0%<br/>% uses trial division                        \u00a0%<br/>logical procedure isPrime ( integer value n )\u00a0;<br/>    if n &lt; 3 or not odd( n ) then n = 2<br/>    else begin<br/>       \u00a0% odd number &gt; 2\u00a0%<br/>        integer f, rootN;<br/>        logical havePrime;<br/>        f        \u00a0:= 3;<br/>        rootN    \u00a0:= entier( sqrt( n ) );<br/>        havePrime\u00a0:= true;<br/>        while f &lt;= rootN and havePrime do begin<br/>            havePrime\u00a0:= ( n rem f ) not = 0;<br/>            f        \u00a0:= f + 2<br/>        end;<br/>        havePrime<br/>    end isPrime\u00a0;</pre>"}, {"lang": "ATS", "loc": 32, "block": "<pre class=\"text highlighted_source\">(* ****** ****** *)<br/>//<br/>#include<br/>\"share/atspre_staload.hats\"<br/>#include<br/>\"share/HATS/atspre_staload_libats_ML.hats\"<br/>//<br/>#staload M = \"libats/libc/SATS/math.sats\"<br/>//<br/>(* ****** ****** *)<br/>//<br/>fun<br/>isqrt(n: intGte(0)): intGte(0) =<br/>  $UNSAFE.cast($M.sqrt_double(g0i2f(n)))<br/>//<br/>fun<br/>is_prime<br/>(<br/>n\u00a0: intGte(2)<br/>)\u00a0: bool =<br/>(<br/>if<br/>(n = 2)<br/>then true<br/>else (<br/>  if n\u00a0% 2 = 0<br/>    then false<br/>    else (1, (isqrt(n)+1)/2).forall()(lam i =&gt; n\u00a0% (2*i+1)\u00a0!= 0)<br/>) (* else *)<br/>) (* end of [is_prime] *)<br/>//<br/>(* ****** ****** *)</pre>"}, {"lang": "AutoHotkey", "loc": 8, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% IsPrime<span class=\"br0\">(</span><span class=\"nu0\">1995937</span><span class=\"br0\">)</span> <br/><a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a> <br/>   <a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a>\u00a0% <span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span> <span class=\"sy0\">.</span> <span class=\"st0\">\" is \"</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span>IsPrime<span class=\"br0\">(</span><span class=\"re3\">A_Index</span><span class=\"sy0\">-</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>\u00a0? <span class=\"st0\">\"\"</span>\u00a0: <span class=\"st0\">\"not \"</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"st0\">\"prime.\"</span> <br/>\u00a0<br/>IsPrime<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>k<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\">; testing primality with trial divisors not multiple of 2,3,5, up to sqrt(n) </span><br/>   d <span class=\"sy0\">:=</span> k<span class=\"sy0\">+</span><span class=\"br0\">(</span>k<span class=\"sy0\">&lt;</span><span class=\"nu0\">7</span>\u00a0? <span class=\"nu0\">1</span><span class=\"sy0\">+</span><span class=\"br0\">(</span>k<span class=\"sy0\">&gt;</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>\u00a0: <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span><span class=\"st0\">\"6-----4---2-4---2-4---6-----2\"</span><span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>k<span class=\"sy0\">,</span><span class=\"nu0\">30</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>   <span class=\"kw1\">Return</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">3</span>\u00a0? n<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>\u00a0: <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Mod</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>k<span class=\"br0\">)</span>\u00a0? <span class=\"br0\">(</span>d<span class=\"sy0\">*</span>d <span class=\"sy0\">&lt;=</span> n\u00a0? IsPrime<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>d<span class=\"br0\">)</span>\u00a0: <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0: <span class=\"nu0\">0</span> <br/><span class=\"br0\">}</span></pre>"}, {"lang": "AutoIt", "loc": 34, "block": "<pre class=\"autoit highlighted_source\"><span class=\"coMULTI\">#cs ----------------------------------------------------------------------------<br/>\u00a0<br/> AutoIt Version: 3.3.8.1<br/> Author:         Alexander Alvonellos<br/>\u00a0<br/>\u00a0<br/> Script Function:<br/>\tPerform primality test on a given integer $number.<br/>\tRETURNS: TRUE/FALSE<br/>\u00a0<br/>#ce</span> <span class=\"sy0\">----------------------------------------------------------------------------</span><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"st0\">\"The primes up to 100 are: \"</span> <span class=\"sy0\">&amp;</span> <a href=\"http://www.autoitscript.com/autoit3/docs/macros.htm\"><span class=\"kw2\"><span class=\"re0\">@LF</span></span></a><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">100</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Step</span></a> <span class=\"nu0\">1</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a><span class=\"br0\">(</span>isPrime<span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">97</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a><br/>\t\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\", \"</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Else</span></a><br/>\t\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm\"><span class=\"kw3\">ConsoleWrite</span></a><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndIf</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a><br/>\u00a0<br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Func</span></a> isPrime<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">False</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">True</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/BitAND.htm\"><span class=\"kw3\">BitAnd</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">False</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">For</span></a> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">To</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/functions/Sqrt.htm\"><span class=\"kw3\">Sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Step</span></a> <span class=\"nu0\">2</span><br/>\t\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">If</span></a><span class=\"br0\">(</span><a href=\"http://www.autoitscript.com/autoit3/docs/functions/Mod.htm\"><span class=\"kw3\">Mod</span></a><span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Then</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">False</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Next</span></a><br/>\t<a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">Return</span></a> <a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">True</span></a><br/><a href=\"http://www.autoitscript.com/autoit3/docs/keywords.htm\"><span class=\"kw1\">EndFunc</span></a><br/>main<span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "AWK", "loc": 1, "block": "<pre>$ awk 'func prime(n){for(d=2;d&lt;=sqrt(n);d++)if(!(n%d)){return 0};return 1}{print prime($1)}'\n</pre>"}, {"lang": "BASIC", "loc": 22, "block": "<pre class=\"qbasic highlighted_source\"><span class=\"kw1\">FUNCTION</span> prime% <span class=\"br0\">(</span>n!<span class=\"br0\">)</span><br/>  <a href=\"http://www.qbasicnews.com/qboho/qckstatic.shtml\"><span class=\"kw3\">STATIC</span></a> i <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>  <span class=\"kw1\">IF</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">THEN</span><br/>    prime <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">ELSEIF</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <a href=\"http://www.qbasicnews.com/qboho/qckor.shtml\"><span class=\"kw3\">OR</span></a> n <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>    prime <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">ELSE</span><br/>    prime <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">FOR</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">TO</span> <a href=\"http://www.qbasicnews.com/qboho/qckint.shtml\"><span class=\"kw3\">INT</span></a><span class=\"br0\">(</span><a href=\"http://www.qbasicnews.com/qboho/qcksqr.shtml\"><span class=\"kw3\">SQR</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">STEP</span> <span class=\"nu0\">2</span><br/>      <span class=\"kw1\">IF</span> n <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>        prime <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckexit.shtml\"><span class=\"kw3\">EXIT</span></a> <span class=\"kw1\">FUNCTION</span><br/>      <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>    <span class=\"kw1\">NEXT</span> i<br/>  <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"co1\">' Test and display primes 1 .. 50</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdeclare.shtml\"><span class=\"kw3\">DECLARE</span></a> <span class=\"kw1\">FUNCTION</span> prime% <span class=\"br0\">(</span>n!<span class=\"br0\">)</span><br/><span class=\"kw1\">FOR</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">50</span><br/>  <span class=\"kw1\">IF</span> prime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> n;<br/><span class=\"kw1\">NEXT</span> n</pre>"}, {"lang": "BBC BASIC", "loc": 14, "block": "<pre class=\"text highlighted_source\">      FOR i% = -1 TO 100<br/>        IF FNisprime(i%) PRINT\u00a0; i% \" is prime\"<br/>      NEXT<br/>      END<br/>\u00a0<br/>      DEF FNisprime(n%)<br/>      IF n% &lt;= 1 THEN = FALSE<br/>      IF n% &lt;= 3 THEN = TRUE<br/>      IF (n% AND 1) = 0 THEN = FALSE<br/>      LOCAL t%<br/>      FOR t% = 3 TO SQR(n%) STEP 2<br/>        IF n% MOD t% = 0 THEN = FALSE<br/>      NEXT<br/>      = TRUE</pre>"}, {"lang": "bc", "loc": 12, "block": "<pre class=\"text highlighted_source\">/* Return 1 if n is prime, 0 otherwise */<br/>define p(n) {<br/>    auto i<br/>\u00a0<br/>    if (n &lt; 2) return(0)<br/>    if (n == 2) return(1)<br/>    if (n\u00a0% 2 == 0) return(0)<br/>    for (i = 3; i * i &lt;= n; i += 2) {<br/>        if (n\u00a0% i == 0) return(0)<br/>    }<br/>    return(1)<br/>}</pre>"}, {"lang": "Befunge", "loc": 4, "block": "<pre class=\"text highlighted_source\">&amp;&gt;:48*:**       \\1`!#^_2v<br/>v_v#`\\*:%*:*84\\/*:*84::+&lt;<br/>v &gt;::48*:*/\\48*:*%%!#v_1^<br/>&gt;0\"seY\" &gt;:#,<a class=\"__cf_email__\" data-cfemail=\"6d322d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#: \"No\"&gt;#0&lt;</pre>"}, {"lang": "Bracmat", "loc": 22, "block": "<pre class=\"text highlighted_source\">  ( prime<br/>  =   incs n I inc<br/>    .   4 2 4 2 4 6 2 6:?incs<br/>      &amp; 2:?n<br/>      &amp; 1 2 2\u00a0!incs:?I<br/>      &amp;   whl<br/>        ' (\u00a0!n*!n:~&gt;!arg<br/>          &amp; div$(!arg.!n)*!n:~!arg<br/>          &amp; (!I:%?inc\u00a0?I|!incs:%?inc\u00a0?I)<br/>          &amp;\u00a0!n+!inc:?n<br/>          )<br/>      &amp;\u00a0!n*!n:&gt;!arg<br/>  )<br/>&amp; 100000000000:?p<br/>&amp;   whl<br/>  ' (\u00a0!p+1:&lt;100000000100:?p<br/>    &amp; (   prime$!p<br/>        &amp; out$!p<br/>      | <br/>      )<br/>    )<br/>&amp;\u00a0;</pre>"}, {"lang": "Burlesque", "loc": 1, "block": "<pre class=\"text highlighted_source\">fcL[2==</pre>"}, {"lang": "C", "loc": 10, "block": "<pre class=\"c highlighted_source\"><span class=\"kw4\">int</span> is_prime<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> p<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"coMULTI\">/* comparing p*p &lt;= n can overflow */</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>p <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> p <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">/</span>p<span class=\"sy0\">;</span> p <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 13, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;cmath&gt;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> is_prime<span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy1\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy2\">%</span> i <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 7, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">static</span> <span class=\"kw4\">bool</span> isPrime<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">*</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span>            <br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw1\">false</span><span class=\"sy0\">;</span>            <br/>            <span class=\"kw1\">return</span> <span class=\"kw1\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span></pre>"}, {"lang": "Chapel", "loc": 11, "block": "<pre class=\"text highlighted_source\">proc is_prime(n)<br/>{<br/>    if n == 2 then<br/>        return true;<br/>    if n &lt;= 1 || n\u00a0% 2 == 0 then<br/>        return false;<br/>    for i in 3..floor(sqrt(n)):int by 2 do<br/>        if n\u00a0% i == 0 then<br/>            return false;<br/>    return true;<br/>}</pre>"}, {"lang": "Clojure", "loc": 1, "block": "<pre class=\"clojure highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defn</span> divides? <span class=\"br0\">[</span>k n<span class=\"br0\">]</span> <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span>mod k n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "CMake", "loc": 31, "block": "<pre class=\"cmake highlighted_source\"><span class=\"co1\"># Prime predicate: does n be a prime number? Sets var to true or false.</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:function\"><span class=\"kw1\">function</span></a><span class=\"sy0\">(</span>primep var n<span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:if\"><span class=\"kw1\">if</span></a><span class=\"sy0\">(</span>n <span class=\"kw3\">GREATER</span> 2<span class=\"sy0\">)</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:math\"><span class=\"kw1\">math</span></a><span class=\"sy0\">(</span>EXPR odd <span class=\"st0\">\"<span class=\"es1\">${n}</span>\u00a0% 2\"</span><span class=\"sy0\">)</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:if\"><span class=\"kw1\">if</span></a><span class=\"sy0\">(</span>odd<span class=\"sy0\">)</span><br/>      <span class=\"co1\"># n &gt; 2 and n is odd.</span><br/>      <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span>factor 3<span class=\"sy0\">)</span><br/>      <span class=\"co1\"># Loop for odd factors from 3, while factor &lt;= n / factor.</span><br/>      <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:math\"><span class=\"kw1\">math</span></a><span class=\"sy0\">(</span>EXPR quot <span class=\"st0\">\"<span class=\"es1\">${n}</span> / <span class=\"es1\">${factor}</span>\"</span><span class=\"sy0\">)</span><br/>      <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:while\"><span class=\"kw1\">while</span></a><span class=\"sy0\">(</span><span class=\"kw3\">NOT</span> factor <span class=\"kw3\">GREATER</span> quot<span class=\"sy0\">)</span><br/>        <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:math\"><span class=\"kw1\">math</span></a><span class=\"sy0\">(</span>EXPR rp <span class=\"st0\">\"<span class=\"es1\">${n}</span>\u00a0% <span class=\"es1\">${factor}</span>\"</span><span class=\"sy0\">)</span>        <span class=\"co1\"># Trial division</span><br/>        <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:if\"><span class=\"kw1\">if</span></a><span class=\"sy0\">(</span><span class=\"kw3\">NOT</span> rp<span class=\"sy0\">)</span><br/>          <span class=\"co1\"># factor divides n, so n is not prime.</span><br/>          <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span><span class=\"re0\">${var}</span> false <span class=\"kw3\">PARENT_SCOPE</span><span class=\"sy0\">)</span><br/>          <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:return\"><span class=\"kw1\">return</span></a><span class=\"sy0\">()</span><br/>        <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endif\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">()</span><br/>        <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:math\"><span class=\"kw1\">math</span></a><span class=\"sy0\">(</span>EXPR factor <span class=\"st0\">\"<span class=\"es1\">${factor}</span> + 2\"</span><span class=\"sy0\">)</span>       <span class=\"co1\"># Next odd factor</span><br/>        <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:math\"><span class=\"kw1\">math</span></a><span class=\"sy0\">(</span>EXPR quot <span class=\"st0\">\"<span class=\"es1\">${n}</span> / <span class=\"es1\">${factor}</span>\"</span><span class=\"sy0\">)</span><br/>      <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endwhile\"><span class=\"kw1\">endwhile</span></a><span class=\"sy0\">(</span><span class=\"kw3\">NOT</span> factor <span class=\"kw3\">GREATER</span> quot<span class=\"sy0\">)</span><br/>      <span class=\"co1\"># Loop found no factor, so n is prime.</span><br/>      <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span><span class=\"re0\">${var}</span> true <span class=\"kw3\">PARENT_SCOPE</span><span class=\"sy0\">)</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:else\"><span class=\"kw1\">else</span></a><span class=\"sy0\">()</span><br/>      <span class=\"co1\"># n &gt; 2 and n is even, so n is not prime.</span><br/>      <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span><span class=\"re0\">${var}</span> false <span class=\"kw3\">PARENT_SCOPE</span><span class=\"sy0\">)</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endif\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">(</span>odd<span class=\"sy0\">)</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:elseif\"><span class=\"kw1\">elseif</span></a><span class=\"sy0\">(</span>n <span class=\"kw3\">EQUAL</span> 2<span class=\"sy0\">)</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span><span class=\"re0\">${var}</span> true <span class=\"kw3\">PARENT_SCOPE</span><span class=\"sy0\">)</span>       <span class=\"co1\"># 2 is prime.</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:else\"><span class=\"kw1\">else</span></a><span class=\"sy0\">()</span><br/>    <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:set\"><span class=\"kw1\">set</span></a><span class=\"sy0\">(</span><span class=\"re0\">${var}</span> false <span class=\"kw3\">PARENT_SCOPE</span><span class=\"sy0\">)</span>      <span class=\"co1\"># n &lt; 2 is not prime.</span><br/>  <a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endif\"><span class=\"kw1\">endif</span></a><span class=\"sy0\">()</span><br/><a href=\"http://www.cmake.org/cmake/help/cmake2.6docs.html#command:endfunction\"><span class=\"kw1\">endfunction</span></a><span class=\"sy0\">(</span>primep<span class=\"sy0\">)</span></pre>"}, {"lang": "COBOL", "loc": 38, "block": "<pre class=\"cobol highlighted_source\">       <span class=\"kw3\">Identification</span> <span class=\"kw3\">Division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">Program-Id</span><span class=\"sy0\">.</span> Primality-By-Subdiv<span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">Data</span> <span class=\"kw3\">Division</span><span class=\"sy0\">.</span><br/>       <span class=\"kw3\">Working-Storage</span> <span class=\"kw1\">Section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">78</span>  True-Val  <span class=\"kw3\">Value</span> <span class=\"nu0\">0</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">78</span>  False-Val <span class=\"kw3\">Value</span> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       Local-Storage <span class=\"kw1\">Section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  lim <span class=\"kw3\">Pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  i   <span class=\"kw3\">Pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">Linkage</span> <span class=\"kw1\">Section</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  num    <span class=\"kw3\">Pic</span> <span class=\"nu0\">9</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>       <span class=\"nu0\">01</span>  result <span class=\"kw3\">Pic</span> <span class=\"nu0\">9</span><span class=\"sy0\">.</span><br/>\u00a0<br/>       <span class=\"kw3\">Procedure</span> <span class=\"kw3\">Division</span> <span class=\"kw3\">Using</span> num result<span class=\"sy0\">.</span><br/>       <span class=\"kw1\">Main</span><span class=\"sy0\">.</span><br/>           <span class=\"kw1\">If</span> num &lt;<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>               <span class=\"kw2\">Move</span> False-Val <span class=\"kw2\">To</span> result<br/>               Goback<br/>           <span class=\"kw3\">Else</span> <span class=\"kw1\">If</span> num <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>               <span class=\"kw2\">Move</span> True-Val <span class=\"kw2\">To</span> result<br/>               Goback<br/>           End-<span class=\"kw1\">If</span><br/>\u00a0<br/>           <span class=\"kw2\">Compute</span> lim <span class=\"sy0\">=</span> <span class=\"kw3\">Function</span> <span class=\"kw4\">Sqrt</span><span class=\"br0\">(</span>num<span class=\"br0\">)</span><span class=\"sy0\"> + </span><span class=\"nu0\">1</span><br/>           <span class=\"kw2\">Perform</span> <span class=\"kw2\">Varying</span> i <span class=\"kw3\">From</span> <span class=\"nu0\">3</span> <span class=\"kw3\">By</span> <span class=\"nu0\">1</span> <span class=\"kw2\">Until</span> lim &lt; i<br/>               <span class=\"kw1\">If</span> <span class=\"kw3\">Function</span> <span class=\"kw4\">Mod</span><span class=\"br0\">(</span>num<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>                   <span class=\"kw2\">Move</span> False-Val <span class=\"kw2\">To</span> result<br/>                   Goback<br/>               End-<span class=\"kw1\">If</span><br/>           End-<span class=\"kw2\">Perform</span><br/>\u00a0<br/>           <span class=\"kw2\">Move</span> True-Val <span class=\"kw2\">To</span> Result<br/>\u00a0<br/>           Goback<br/>           <span class=\"sy0\">.</span></pre>"}, {"lang": "CoffeeScript", "loc": 12, "block": "<pre class=\"coffeescript highlighted_source\">is_prime = <span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>  <span class=\"co1\"># simple prime detection using trial division, works</span><br/>  <span class=\"co1\"># for all integers</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1</span> <span class=\"co1\"># by definition</span><br/>  p = <span class=\"nu0\">2</span><br/>  <span class=\"kw1\">while</span> p <span class=\"sy0\">*</span> p <span class=\"sy0\">&lt;</span>= n<br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">false</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">%</span> p == <span class=\"nu0\">0</span><br/>    p <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>  <span class=\"kw4\">true</span><br/>\u00a0<br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span>..<span class=\"nu0\">100</span><span class=\"br0\">]</span><br/>  console.<span class=\"me1\">log</span> i <span class=\"kw1\">if</span> is_prime i</pre>"}, {"lang": "Common Lisp", "loc": 6, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> primep <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"st0\">\"Is N prime?\"</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <br/>       <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">oddp</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span>loop for i from <span class=\"nu0\">3</span> to <span class=\"br0\">(</span>isqrt n<span class=\"br0\">)</span> by <span class=\"nu0\">2</span><br/>\t  never <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"kw1\">rem</span> n i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 17, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isPrime1<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"kw4\">real</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>.<span class=\"me1\">sqrt</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    iota<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"nu0\">40</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span>isPrime1.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 18, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">function</span> IsPrime<span class=\"br0\">(</span>aNumber<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">Boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  I<span class=\"sy1\">:</span> <span class=\"kw4\">Integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  Result<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">True</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>aNumber <span class=\"sy3\">=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> Exit<span class=\"sy1\">;</span><br/>\u00a0<br/>  Result<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>aNumber <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span>  <span class=\"kw1\">or</span><br/>                <span class=\"br0\">(</span>aNumber &lt;<span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"kw1\">not</span> Result <span class=\"kw1\">then</span> Exit<span class=\"sy1\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span> I<span class=\"sy1\">:</span><span class=\"sy3\">=</span><span class=\"nu0\">3</span> <span class=\"kw1\">to</span> <span class=\"kw3\">Trunc</span><span class=\"br0\">(</span><span class=\"kw3\">Sqrt</span><span class=\"br0\">(</span>aNumber<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>aNumber <span class=\"kw1\">mod</span> I <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">begin</span><br/>    Result<span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">False</span><span class=\"sy1\">;</span><br/>    Break<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span></pre>"}, {"lang": "E", "loc": 16, "block": "<pre class=\"e highlighted_source\"><a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> isPrime<span class=\"br0\">(</span>n <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/int\"><span class=\"kw6\">int</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        return <a href=\"http://wiki.erights.org/wiki/true\"><span class=\"kw6\">true</span></a><br/>    <span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">%%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        return <a href=\"http://wiki.erights.org/wiki/false\"><span class=\"kw6\">false</span></a><br/>    <span class=\"br0\">}</span> <a href=\"http://wiki.erights.org/wiki/else\"><span class=\"kw2\">else</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://wiki.erights.org/wiki/def\"><span class=\"kw4\">def</span></a> limit <span class=\"sy0\">:=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">:</span><a href=\"http://wiki.erights.org/wiki/float64\"><span class=\"kw6\">float64</span></a><span class=\"br0\">)</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span><span class=\"br0\">)</span>.<span class=\"me1\">ceil</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://wiki.erights.org/wiki/var\"><span class=\"kw4\">var</span></a> divisor <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>        <a href=\"http://wiki.erights.org/wiki/while\"><span class=\"kw1\">while</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>divisor <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;=</span> limit<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://wiki.erights.org/wiki/if\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%%</span> divisor <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                return <a href=\"http://wiki.erights.org/wiki/false\"><span class=\"kw6\">false</span></a><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        return <a href=\"http://wiki.erights.org/wiki/true\"><span class=\"kw6\">true</span></a><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "EchoLisp", "loc": 28, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span>lib 'sequences<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Try divisors iff n = 2k + 1</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>is<span class=\"sy0\">-</span>prime? p<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>\t<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> p <span class=\"nu0\">2</span><span class=\"br0\">)</span> #f<span class=\"br0\">]</span><br/>\t<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> p <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> p <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">[</span><span class=\"kw1\">else</span> <br/>\t<span class=\"br0\">(</span>for<span class=\"sy0\">/</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">d</span> <span class=\"br0\">[</span><span class=\"nu0\">3</span> <span class=\"nu0\">5</span> .. <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>  <span class=\"br0\">(</span><span class=\"sy0\">!</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> p <span class=\"kw1\">d</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>filter is<span class=\"sy0\">-</span>prime? <span class=\"br0\">(</span>range <span class=\"nu0\">1</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">11</span> <span class=\"nu0\">13</span> <span class=\"nu0\">17</span> <span class=\"nu0\">19</span> <span class=\"nu0\">23</span> <span class=\"nu0\">29</span> <span class=\"nu0\">31</span> <span class=\"nu0\">37</span> <span class=\"nu0\">41</span> <span class=\"nu0\">43</span> <span class=\"nu0\">47</span> <span class=\"nu0\">53</span> <span class=\"nu0\">59</span> <span class=\"nu0\">61</span> <span class=\"nu0\">67</span> <span class=\"nu0\">71</span> <span class=\"nu0\">73</span> <span class=\"nu0\">79</span> <span class=\"nu0\">83</span> <span class=\"nu0\">89</span> <span class=\"nu0\">97</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;; Improve performance , try divisors iff  n = 6k+1 or n = 6k+5</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>is<span class=\"sy0\">-</span>prime? p<span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">cond</span><br/>\t<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> p <span class=\"nu0\">2</span><span class=\"br0\">)</span> #f<span class=\"br0\">]</span><br/>\t<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> p <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> p <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> p <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> p <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">[</span><span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> p <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> p <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\t<span class=\"br0\">[</span><span class=\"kw1\">else</span>  <span class=\"co1\">;; step 6\u00a0: try divisors 6n+1 or 6n+5</span><br/>\t\t<span class=\"br0\">(</span>for <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">d</span> <span class=\"br0\">[</span><span class=\"nu0\">7</span> <span class=\"nu0\">13</span> .. <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>\t\t\t#:break <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> p <span class=\"kw1\">d</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> #f<br/>\t\t\t#:break <span class=\"br0\">(</span><span class=\"kw1\">zero?</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> p <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"kw1\">d</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> #f<br/>\t\t\t#t <span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>filter is<span class=\"sy0\">-</span>prime? <span class=\"br0\">(</span>range <span class=\"nu0\">1</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    \u2192 <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">5</span> <span class=\"nu0\">7</span> <span class=\"nu0\">11</span> <span class=\"nu0\">13</span> <span class=\"nu0\">17</span> <span class=\"nu0\">19</span> <span class=\"nu0\">23</span> <span class=\"nu0\">29</span> <span class=\"nu0\">31</span> <span class=\"nu0\">37</span> <span class=\"nu0\">41</span> <span class=\"nu0\">43</span> <span class=\"nu0\">47</span> <span class=\"nu0\">53</span> <span class=\"nu0\">59</span> <span class=\"nu0\">61</span> <span class=\"nu0\">67</span> <span class=\"nu0\">71</span> <span class=\"nu0\">73</span> <span class=\"nu0\">79</span> <span class=\"nu0\">83</span> <span class=\"nu0\">89</span> <span class=\"nu0\">97</span><span class=\"br0\">)</span></pre>"}, {"lang": "Eiffel", "loc": 56, "block": "<pre class=\"eiffel highlighted_source\"><span class=\"kw1\">class</span><br/>\tAPPLICATION<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tmake<br/>                <span class=\"co1\">-- Tests the feature is_prime.</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\tio.<span class=\"me1\">put_boolean</span> <span class=\"br0\">(</span>is_prime <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\tio.<span class=\"me1\">put_boolean</span> <span class=\"br0\">(</span>is_prime <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\tio.<span class=\"me1\">put_boolean</span> <span class=\"br0\">(</span>is_prime <span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\tio.<span class=\"me1\">put_boolean</span> <span class=\"br0\">(</span>is_prime <span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\tio.<span class=\"me1\">put_boolean</span> <span class=\"br0\">(</span>is_prime <span class=\"br0\">(</span><span class=\"nu0\">97</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t\tio.<span class=\"me1\">put_boolean</span> <span class=\"br0\">(</span>is_prime <span class=\"br0\">(</span><span class=\"nu0\">15589</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\tio.<span class=\"me1\">new_line</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tis_prime <span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+boolean&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">BOOLEAN</span></a><br/>                <span class=\"co1\">-- Is 'n' a prime number?</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tpositiv_input<span class=\"sy0\">:</span> n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ti<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\tmax<span class=\"sy0\">:</span> REAL_64<br/>\t\t\tmath<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+double_math&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">DOUBLE_MATH</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> math<br/>\t\t\t<span class=\"kw2\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw2\">then</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">True</span><br/>\t\t\t<span class=\"kw2\">elseif</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">or</span> n \\\\ <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">False</span><br/>\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">True</span><br/>\t\t\t\tmax <span class=\"sy0\">:=</span> math.<span class=\"me1\">sqrt</span> <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">3</span><br/>\t\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\t\ti <span class=\"sy0\">&gt;</span> max<br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\t<span class=\"kw2\">if</span> n \\\\ i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw2\">then</span><br/>\t\t\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"sy0\">:=</span> <span class=\"kw3\">False</span><br/>\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">2</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span></pre>"}, {"lang": "Elixir", "loc": 11, "block": "<pre class=\"text highlighted_source\">defmodule RC do<br/>  def is_prime(2), do: true<br/>  def is_prime(n) when n&lt;2 or rem(n,2)==0, do: false<br/>  def is_prime(n), do: is_prime(n,3)<br/>\u00a0<br/>  def is_prime(n,k) when n&lt;k*k, do: true<br/>  def is_prime(n,k) when rem(n,k)==0, do: false<br/>  def is_prime(n,k), do: is_prime(n,k+2)<br/>end<br/>\u00a0<br/>IO.inspect for n &lt;- 1..50, RC.is_prime(n), do: n</pre>"}, {"lang": "Emacs Lisp", "loc": 5, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> prime <span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> a <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span>loop for x from <span class=\"nu0\">2</span> to <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> a<span class=\"br0\">)</span><br/>                 <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"kw1\">zerop</span> <span class=\"br0\">(</span><span class=\"sy0\">%</span> a x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                 <span class=\"kw1\">return</span> t<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Erlang", "loc": 7, "block": "<pre class=\"erlang highlighted_source\"><span class=\"re3\">is_prime</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">==</span> <span class=\"nu0\">2</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_prime</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">orelse</span> <span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">2</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_prime</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">is_prime</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">is_prime</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">K</span><span class=\"sy3\">*</span><span class=\"re5\">K</span> <span class=\"sy3\">&gt;</span> <span class=\"re5\">N</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_prime</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"re5\">K</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span><br/><span class=\"re3\">is_prime</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"re3\">is_prime</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><span class=\"re5\">K</span><span class=\"sy3\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">.</span></pre>"}, {"lang": "ERRE", "loc": 21, "block": "<pre class=\"text highlighted_source\">PROGRAM PRIME_TRIAL<br/>\u00a0<br/>PROCEDURE ISPRIME(N%-&gt;OK%)<br/>      LOCAL T%<br/>      IF N%&lt;=1 THEN OK%=FALSE  EXIT PROCEDURE END IF<br/>      IF N%&lt;=3 THEN OK%=TRUE EXIT PROCEDURE END IF<br/>      IF (N% AND 1)=0 THEN OK%=FALSE EXIT PROCEDURE END IF<br/>      FOR T%=3 TO SQR(N%) STEP 2 DO<br/>        IF N% MOD T%=0 THEN OK%=FALSE EXIT PROCEDURE END IF<br/>      END FOR<br/>      OK%=TRUE<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>\u00a0<br/>      FOR I%=1 TO 100 DO<br/>         ISPRIME(I%-&gt;OK%)<br/>         IF OK% THEN PRINT(i%;\"is prime\") END IF<br/>      END FOR<br/>\u00a0<br/>END PROGRAM</pre>"}, {"lang": "Euphoria", "loc": 12, "block": "<pre class=\"euphoria highlighted_source\"><span class=\"kw1\">function</span> is_prime<span class=\"br0\">(</span><span class=\"kw2\">integer</span> n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> n&lt;<span class=\"sy1\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">or</span> <span class=\"kw2\">remainder</span><span class=\"br0\">(</span>n<span class=\"sy2\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy1\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">else</span><br/>        <span class=\"kw1\">for</span> i<span class=\"sy1\">=</span><span class=\"nu0\">3</span> <span class=\"kw1\">to</span> <span class=\"kw2\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">by</span> <span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">if</span> <span class=\"kw2\">remainder</span><span class=\"br0\">(</span>n<span class=\"sy2\">,</span>i<span class=\"br0\">)</span><span class=\"sy1\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>                <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">for</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "Factor", "loc": 8, "block": "<pre class=\"text highlighted_source\">USING: combinators kernel math math.functions math.ranges sequences\u00a0;<br/>\u00a0<br/>: prime? ( n --\u00a0? )<br/>    {<br/>        { [ dup 2 &lt; ] [ drop f ] }<br/>        { [ dup even? ] [ 2 = ] }<br/>        [ 3 over sqrt 2 &lt;range&gt; [ mod 0 &gt; ] with all? ]<br/>    } cond\u00a0;</pre>"}, {"lang": "FALSE", "loc": 3, "block": "<pre class=\"text highlighted_source\">[0\\$2=$[@<a class=\"__cf_email__\" data-cfemail=\"c8b688\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>@]?~[$$2&gt;\\1&amp;&amp;[\\~\\<br/>   3[\\<a class=\"__cf_email__\" data-cfemail=\"f9ddb9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"b094f081\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>+\\$*&gt;][\\<a class=\"__cf_email__\" data-cfemail=\"e0c4a0\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"416501\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"032743\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><a class=\"__cf_email__\" data-cfemail=\"ddf99d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\\/*=[%\\~\\$]?2+]#%<br/>]?]?%]p:</pre>"}, {"lang": "FBSL", "loc": 39, "block": "<pre class=\"qbasic highlighted_source\">#APPTYPE CONSOLE<br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> ISPRIME<span class=\"br0\">(</span>n <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>    <span class=\"kw1\">IF</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">RETURN</span> TRUE<br/>    <span class=\"kw1\">ELSEIF</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> ORELSE n <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">RETURN</span> FALSE<br/>    <span class=\"kw1\">ELSE</span><br/>        <span class=\"kw1\">FOR</span> <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">TO</span> <a href=\"http://www.qbasicnews.com/qboho/qcksqr.shtml\"><span class=\"kw3\">SQR</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">STEP</span> <span class=\"nu0\">2</span><br/>            <span class=\"kw1\">IF</span> n <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>                <span class=\"kw1\">RETURN</span> FALSE<br/>            <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>        <span class=\"kw1\">NEXT</span><br/>        <span class=\"kw1\">RETURN</span> TRUE<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> ISPRIME2<span class=\"br0\">(</span>N <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>    <span class=\"kw1\">IF</span> N <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> FALSE<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> I <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">WHILE</span> I <span class=\"sy0\">*</span> I <span class=\"sy0\">&lt;=</span> N<br/>        <span class=\"kw1\">IF</span> N <a href=\"http://www.qbasicnews.com/qboho/qckmod.shtml\"><span class=\"kw3\">MOD</span></a> I <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span><br/>            <span class=\"kw1\">RETURN</span> FALSE<br/>        <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/>        I <span class=\"sy0\">=</span> I <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">WEND</span><br/>    <span class=\"kw1\">RETURN</span> TRUE<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0<br/><span class=\"co1\">' Test and display primes 1 .. 50</span><br/><a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> n <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckinteger.shtml\"><span class=\"kw3\">INTEGER</span></a><br/>\u00a0<br/><span class=\"kw1\">FOR</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">50</span><br/>    <span class=\"kw1\">IF</span> ISPRIME<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>        <a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> n<span class=\"sy0\">,</span> <span class=\"st0\">\" \"</span>;<br/>    <a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">IF</span><br/><span class=\"kw1\">NEXT</span><br/>\u00a0<br/>PAUSE</pre>"}, {"lang": "Forth", "loc": 11, "block": "<pre class=\"text highlighted_source\">: prime? ( n -- f )<br/>        dup 2 &lt; if      drop false<br/>    else dup 2 = if      drop true<br/>    else dup 1 and 0= if drop false<br/>    else 3<br/>        begin 2dup dup * &gt;=<br/>        while 2dup mod 0=<br/>              if       2drop false exit<br/>              then 2 +<br/>        repeat         2drop true<br/>    then then then\u00a0;</pre>"}, {"lang": "Fortran", "loc": 19, "block": "<pre class=\"fortran highlighted_source\"> <span class=\"kw1\">FUNCTION</span> isPrime<span class=\"br0\">(</span><span class=\"kw1\">number</span><span class=\"br0\">)</span><br/>   <span class=\"kw3\">LOGICAL</span> <span class=\"sy0\">::</span> <span class=\"me2\">isPrime</span><br/>   <span class=\"kw3\">INTEGER</span>, <span class=\"kw3\">INTENT</span><span class=\"br0\">(</span><span class=\"kw3\">IN</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"kw1\">number</span><br/>   <span class=\"kw3\">INTEGER</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span><br/>\u00a0<br/>   <span class=\"kw1\">IF</span><span class=\"br0\">(</span><span class=\"kw1\">number</span><span class=\"sy0\">==</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>      isPrime <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span><br/>   <span class=\"kw1\">ELSE</span> <span class=\"kw1\">IF</span><span class=\"br0\">(</span><span class=\"kw1\">number</span> &lt; <span class=\"nu0\">2</span> <span class=\"kw2\">.<span class=\"me1\">OR</span>.</span> <span class=\"kw4\">MOD</span><span class=\"br0\">(</span><span class=\"kw1\">number</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>      isPRIME <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span><br/>   <span class=\"kw1\">ELSE</span><br/>      isPrime <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">TRUE</span>.</span><br/>      <span class=\"kw1\">DO</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span>, <span class=\"kw4\">INT</span><span class=\"br0\">(</span><span class=\"kw4\">SQRT</span><span class=\"br0\">(</span><span class=\"kw3\">REAL</span><span class=\"br0\">(</span><span class=\"kw1\">number</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"nu0\">2</span><br/>         <span class=\"kw1\">IF</span><span class=\"br0\">(</span><span class=\"kw4\">MOD</span><span class=\"br0\">(</span><span class=\"kw1\">number</span>,i<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>            isPrime <span class=\"sy0\">=</span> <span class=\"kw2\">.<span class=\"me1\">FALSE</span>.</span><br/>            <span class=\"kw1\">EXIT</span><br/>         <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/>      <span class=\"kw1\">END</span> <span class=\"kw1\">DO</span><br/>   <span class=\"kw1\">END</span> <span class=\"kw1\">IF</span><br/> <span class=\"kw1\">END</span> <span class=\"kw1\">FUNCTION</span></pre>"}, {"lang": "FreeBASIC", "loc": 23, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' FB 1.05.0 Win64</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> isPrime<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> Boolean<br/>  <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>  <span class=\"kw1\">If</span> n = <span class=\"nu0\">2</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span><br/>  <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> <span class=\"nu0\">2</span>  = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>  <span class=\"kw1\">Dim</span> limit <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">3</span> <span class=\"kw1\">To</span> limit <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">If</span> n <span class=\"kw1\">Mod</span> i = <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">False</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">True</span><br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' To test this works, print all primes under 100</span><br/><span class=\"kw1\">For</span> i <span class=\"kw1\">As</span> <span class=\"kw1\">Integer</span> = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">99</span><br/>  <span class=\"kw1\">If</span> isPrime<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> <br/>    <span class=\"kw1\">Print</span> <span class=\"kw1\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>; <span class=\"st0\">\" \"</span>; <br/>  <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Press any key to quit\"</span><br/><span class=\"kw1\">Sleep</span></pre>"}, {"lang": "F#", "loc": 26, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> NUnit.<span class=\"me1\">Framework</span><br/><span class=\"kw1\">open</span> FsUnit<br/><span class=\"kw1\">let</span> <span class=\"kw1\">inline</span> isPrime n <span class=\"sy0\">=</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"kw4\">uint64</span> <span class=\"nu0\">2</span>..<span class=\"kw4\">uint64</span> <span class=\"br0\">(</span><span class=\"kw3\">sqrt</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"sy0\">|&gt;</span> <a href=\"http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html\"><span class=\"kw2\">Seq</span></a>.<span class=\"me1\">exists</span> <span class=\"br0\">(</span><span class=\"kw1\">fun</span> <span class=\"br0\">(</span>i:<span class=\"kw4\">uint64</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw4\">uint64</span> n <span class=\"sy0\">%</span> i <span class=\"sy0\">=</span> <span class=\"kw4\">uint64</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>Test<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> ``Validate that <span class=\"nu0\">2</span> is prime`` <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  isPrime <span class=\"nu0\">2</span> <span class=\"sy0\">|&gt;</span> should equal <span class=\"kw1\">true</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>Test<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> ``Validate that <span class=\"nu0\">4</span> is <span class=\"kw1\">not</span> prime`` <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  isPrime <span class=\"nu0\">4</span> <span class=\"sy0\">|&gt;</span> should equal <span class=\"kw1\">false</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>Test<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> ``Validate that <span class=\"nu0\">3</span> is prime`` <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  isPrime <span class=\"nu0\">3</span> <span class=\"sy0\">|&gt;</span> should equal <span class=\"kw1\">true</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>Test<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> ``Validate that <span class=\"nu0\">9</span> is <span class=\"kw1\">not</span> prime`` <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  isPrime <span class=\"nu0\">9</span> <span class=\"sy0\">|&gt;</span> should equal <span class=\"kw1\">false</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>Test<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> ``Validate that <span class=\"nu0\">5</span> is prime`` <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  isPrime <span class=\"nu0\">5</span> <span class=\"sy0\">|&gt;</span> should equal <span class=\"kw1\">true</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>Test<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> ``Validate that <span class=\"nu0\">277</span> is prime`` <span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  isPrime <span class=\"nu0\">277</span> <span class=\"sy0\">|&gt;</span> should equal <span class=\"kw1\">true</span></pre>"}, {"lang": "FunL", "loc": 9, "block": "<pre class=\"text highlighted_source\">import math.sqrt<br/>\u00a0<br/>def<br/>  isPrime( 2 )      =  true<br/>  isPrime( n )<br/>    | n &lt; 3 or 2|n  =  false<br/>    | otherwise     =  (3..int(sqrt(n)) by 2).forall( (/|n) )<br/>\u00a0<br/>(10^10..10^10+50).filter( isPrime ).foreach( println )</pre>"}, {"lang": "FutureBasic", "loc": 26, "block": "<pre class=\"text highlighted_source\">include \"ConsoleWindow\"<br/>\u00a0<br/>def tab 6<br/>\u00a0<br/>local fn isPrime( n as long ) as Boolean<br/>dim as long i<br/>dim as Boolean result<br/>\u00a0<br/>if n &lt; 2 then result = _false\u00a0: exit fn<br/>if n = 2 then result = _true \u00a0: exit fn<br/>if n mod 2 == 0  then result = _false\u00a0: exit fn<br/>result = _true<br/>for i = 3 to int( n^.5 ) step 2<br/>  if n mod i == 0 then result = _false\u00a0: exit fn<br/>next i<br/>end fn = result<br/>\u00a0<br/>dim as long i, j<br/>\u00a0<br/>print \"Prime numbers between 0 and 1000:\"<br/>for i = 0 to 1000<br/>  if ( fn isPrime(i)\u00a0!= _false )<br/>    print i,\u00a0: j++<br/>    if j mod 10 == 0 then print<br/>  end if<br/>next</pre>"}, {"lang": "Gambas", "loc": 26, "block": "<pre class=\"gambas highlighted_source\"><span class=\"co1\">'Reworked from the BBC Basic example</span><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> Main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> iNum <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> iNum <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> <span class=\"nu0\">100</span><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> FNisprime<span class=\"br0\">(</span>iNum<span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> <a href=\"http://gambasdoc.org/help/lang/print\"><span class=\"kw1\">Print</span></a> iNum <span class=\"sy0\">&amp;</span> <span class=\"st0\">\" is prime\"</span><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a><br/><span class=\"co1\">'___________________________________________________</span><br/><a href=\"http://gambasdoc.org/help/lang/public\"><span class=\"kw1\">Public</span></a> <a href=\"http://gambasdoc.org/help/lang/sub\"><span class=\"kw1\">Sub</span></a> FNisprime<span class=\"br0\">(</span>iNum <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/boolean\"><span class=\"kw4\">Boolean</span></a><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> iLoop <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/integer\"><span class=\"kw4\">Integer</span></a><br/><a href=\"http://gambasdoc.org/help/lang/dim\"><span class=\"kw1\">Dim</span></a> bReturn <a href=\"http://gambasdoc.org/help/lang/as\"><span class=\"kw1\">As</span></a> <a href=\"http://gambasdoc.org/help/lang/type/boolean\"><span class=\"kw4\">Boolean</span></a> <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/true\"><span class=\"kw1\">True</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> iNum <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> bReturn <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/false\"><span class=\"kw1\">False</span></a><br/><a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> iNum <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">3</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> bReturn <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/true\"><span class=\"kw1\">True</span></a><br/><a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> <span class=\"br0\">(</span>iNum <a href=\"http://gambasdoc.org/help/lang/and\"><span class=\"kw5\">And</span></a> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> bReturn <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/false\"><span class=\"kw1\">False</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/for\"><span class=\"kw1\">For</span></a> iLoop <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <a href=\"http://gambasdoc.org/help/lang/to\"><span class=\"kw1\">To</span></a> <a href=\"http://gambasdoc.org/help/lang/sqr\"><span class=\"kw2\">Sqr</span></a><span class=\"br0\">(</span>iNum<span class=\"br0\">)</span> <a href=\"http://gambasdoc.org/help/lang/step\"><span class=\"kw1\">Step</span></a> <span class=\"nu0\">2</span><br/>  <a href=\"http://gambasdoc.org/help/lang/if\"><span class=\"kw1\">If</span></a> iNum <a href=\"http://gambasdoc.org/help/lang/mod\"><span class=\"kw5\">Mod</span></a> iLoop <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <a href=\"http://gambasdoc.org/help/lang/then\"><span class=\"kw1\">Then</span></a> bReturn <span class=\"sy0\">=</span> <a href=\"http://gambasdoc.org/help/lang/false\"><span class=\"kw1\">False</span></a><br/><a href=\"http://gambasdoc.org/help/lang/next\"><span class=\"kw1\">Next</span></a><br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/return\"><span class=\"kw1\">Return</span></a> bReturn<br/>\u00a0<br/><a href=\"http://gambasdoc.org/help/lang/end\"><span class=\"kw1\">End</span></a></pre>"}, {"lang": "GAP", "loc": 21, "block": "<pre class=\"text highlighted_source\">IsPrimeTrial\u00a0:= function(n)<br/>   local k, m;<br/>   if n &lt; 5 then<br/>      return (n = 2) or (n = 3);<br/>   fi;<br/>   if RemInt(n, 2) = 0 then<br/>      return false;<br/>   fi;<br/>   m\u00a0:= RootInt(n);<br/>   k\u00a0:= 3;<br/>   while k &lt;= m do<br/>      if RemInt(n, k) = 0 then<br/>         return false;<br/>      fi;<br/>      k\u00a0:= k + 2;<br/>   od;<br/>   return true;<br/>end;<br/>\u00a0<br/>Filtered([1 .. 100], IsPrimeTrial);                              <br/># [ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 ]</pre>"}, {"lang": "Go", "loc": 15, "block": "<pre class=\"go highlighted_source\"><span class=\"kw4\">func</span> IsPrime<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">bool</span> <span class=\"sy1\">{</span><br/>\t<span class=\"kw1\">if</span> n &lt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span> n <span class=\"sy2\">=</span> <span class=\"sy3\">-</span>n <span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">switch</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">case</span> n <span class=\"sy3\">==</span> <span class=\"nu0\">2</span><span class=\"sy1\">:</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>\t<span class=\"kw1\">case</span> n &lt; <span class=\"nu0\">2</span> <span class=\"sy3\">||</span> n <span class=\"sy3\">%</span> <span class=\"nu0\">2</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span><span class=\"sy1\">:</span><br/>\t\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>\u00a0<br/>\t<span class=\"kw1\">default</span><span class=\"sy1\">:</span><br/>\t\t<span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">=</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy3\">*</span><span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span> <span class=\"sy2\">+=</span> <span class=\"nu0\">2</span> <span class=\"sy1\">{</span><br/>\t\t\t<span class=\"kw1\">if</span> n <span class=\"sy3\">%</span> <span class=\"nu2\">i</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span> <span class=\"sy1\">}</span><br/>\t\t<span class=\"sy1\">}</span><br/>\t<span class=\"sy1\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 7, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> isPrime <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    it <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> <br/>    it <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">2</span>..<a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20max\"><span class=\"kw5\">max</span></a><span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"br0\">(</span><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int\"><span class=\"kw4\">int</span></a><span class=\"br0\">)</span> <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>it<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">every</span><span class=\"br0\">{</span> k <span class=\"sy0\">-&gt;</span> it <span class=\"sy0\">%</span> k <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"nu0\">0</span>..<span class=\"nu0\">20</span><span class=\"br0\">)</span>.<a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20grep\"><span class=\"kw5\">grep</span></a><span class=\"br0\">(</span>isPrime<span class=\"br0\">)</span></pre>"}, {"lang": "Haskell", "loc": 1, "block": "<pre class=\"haskell highlighted_source\">isPrime n <span class=\"sy0\">=</span> n<span class=\"sy0\">==</span><span class=\"nu0\">2</span> <span class=\"sy0\">||</span> n<span class=\"sy0\">&gt;</span><span class=\"nu0\">2</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all\"><span class=\"kw3\">all</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:rem\"><span class=\"kw3\">rem</span></a> n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span>:<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"sy0\">,</span><span class=\"nu0\">5</span><span class=\"sy0\">..</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:floor\"><span class=\"kw3\">floor</span></a><span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a><span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral\"><span class=\"kw3\">fromIntegral</span></a> <span class=\"sy0\">$</span> n<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span></pre>"}, {"lang": "HicEst", "loc": 18, "block": "<pre class=\"hicest highlighted_source\">   <span class=\"kw1\">DO</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">,</span> 1E6<br/>     Euler <span class=\"sy1\">=</span> n<span class=\"sy1\">^</span><span class=\"nu0\">2</span> <span class=\"sy1\">+</span> n <span class=\"sy1\">+</span> <span class=\"nu0\">41</span><br/>     <span class=\"kw1\">IF</span><span class=\"br0\">(</span> Prime<span class=\"br0\">(</span>Euler<span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">WRITE</span><span class=\"br0\">(</span>Messagebox<span class=\"br0\">)</span> Euler<span class=\"sy1\">,</span> <span class=\"st0\">' is NOT prime for n ='</span><span class=\"sy1\">,</span> n<br/>   <span class=\"kw1\">ENDDO</span>                            <span class=\"co1\">! e.g.    1681 = 40^2 + 40 + 41 is NOT prime</span><br/><span class=\"kw1\">END</span><br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> Prime<span class=\"br0\">(</span>number<span class=\"br0\">)</span><br/>   Prime <span class=\"sy1\">=</span> number <span class=\"sy1\">==</span> <span class=\"nu0\">2</span><br/>   <span class=\"kw1\">IF</span><span class=\"br0\">(</span> <span class=\"br0\">(</span>number <span class=\"sy1\">&gt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">*</span> <span class=\"kw1\">MOD</span><span class=\"br0\">(</span>number<span class=\"sy1\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>     <span class=\"kw1\">DO</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">3</span><span class=\"sy1\">,</span> number<span class=\"sy1\">^</span><span class=\"nu0\">0.5</span><span class=\"sy1\">,</span> <span class=\"nu0\">2</span><br/>       <span class=\"kw1\">IF</span><span class=\"br0\">(</span><span class=\"kw1\">MOD</span><span class=\"br0\">(</span>number<span class=\"sy1\">,</span>i<span class=\"br0\">)</span> <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>         Prime <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><br/>         <span class=\"kw1\">RETURN</span><br/>       <span class=\"kw1\">ENDIF</span><br/>     <span class=\"kw1\">ENDDO</span><br/>     Prime <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><br/>   <span class=\"kw1\">ENDIF</span><br/><span class=\"kw1\">END</span></pre>"}, {"lang": "Icon and Unicon", "loc": 5, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> isprime<span class=\"br0\">(</span>n<span class=\"br0\">)</span>                            <span class=\"co1\">#: return n if prime (using trial division) or fail</span><br/><span class=\"kw1\">if</span> <span class=\"kw1\">not</span> n <span class=\"sy1\">=</span> <span class=\"kw4\">integer</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy1\">|</span> n <span class=\"sy1\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span>         <span class=\"co1\"># ensure n is an integer greater than 1</span><br/><span class=\"kw1\">every</span> <span class=\"kw1\">if</span> <span class=\"nu0\">0</span> <span class=\"sy1\">=</span> <span class=\"br0\">(</span>n <span class=\"sy1\">%</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"kw1\">to</span> <span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">fail</span><br/><span class=\"kw1\">return</span> n<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">isprime=: <span class=\"nu0\">3</span>\u00a0: <span class=\"st_h\">'if. 3&gt;:y do. 1&lt;y else. 0 *./@:&lt; y|~2+i.&lt;.%:y end.'</span></pre>"}, {"lang": "Java", "loc": 12, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">boolean</span> prime<span class=\"br0\">(</span><span class=\"kw4\">long</span> a<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>   <span class=\"kw1\">if</span><span class=\"br0\">(</span>a <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><span class=\"kw1\">else</span> <span class=\"kw1\">if</span><span class=\"br0\">(</span>a <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> a <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw4\">long</span> max <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">long</span><span class=\"br0\">)</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">long</span> n<span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;=</span> max<span class=\"sy0\">;</span> n<span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>a <span class=\"sy0\">%</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 13, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> isPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">3</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">5</span> <span class=\"sy0\">||</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">7</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Joy", "loc": 6, "block": "<pre class=\"text highlighted_source\">DEFINE prime ==<br/>        2<br/>        [ [dup * &gt;] nullary  [rem 0 &gt;] dip  and ]<br/>        [ succ ]<br/>        while<br/>        dup * &lt; .</pre>"}, {"lang": "jq", "loc": 1, "block": "<pre>  if . == 2 then true\n  else 2 &lt; . and .\u00a0% 2 == 1 and\n       . as $in\n       | (($in + 1) | sqrt) as $m\n       | (((($m - 1) / 2) | floor) + 1) as $max\n       | all( range(1; $max)\u00a0; $in\u00a0% ((2 * .) + 1) &gt; 0 )\n  end;\n</pre>"}, {"lang": "Julia", "loc": 18, "block": "<pre class=\"text highlighted_source\">function isprime_trialdivision{T&lt;:Integer}(n::T)<br/>    1 &lt; n || return false<br/>    n\u00a0!= 2 || return true<br/>    isodd(n) || return false<br/>    for i in 3:isqrt(n)<br/>        n%i\u00a0!= 0 || return false<br/>    end<br/>    return true<br/>end<br/>\u00a0<br/>n = 100<br/>a = filter(isprime_trialdivision, [1:n])<br/>\u00a0<br/>if all(a .== primes(n))<br/>    println(\"The primes &lt;= \", n, \" are:\\n    \", a)<br/>else<br/>    println(\"The function does not accurately calculate primes.\")<br/>end</pre>"}, {"lang": "K", "loc": 3, "block": "<pre class=\"text highlighted_source\">   isprime:{(x&gt;1)&amp;&amp;/x!'2_!1+_sqrt x}<br/>   &amp;isprime'!100<br/>2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97</pre>"}, {"lang": "Kotlin", "loc": 12, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>fun isPrime<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Boolean <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">false</span></a><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> n <span class=\"sy0\">==</span> <span class=\"nu0\">2</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> limit <span class=\"sy0\">=</span> Math.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>n.<span class=\"me1\">toDouble</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"br0\">(</span><span class=\"nu0\">3</span>..<span class=\"me1\">limit</span> step <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">none</span> <span class=\"br0\">{</span> n <span class=\"sy0\">%</span> it <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"co1\">// test by printing all primes below 100 say</span><br/>    <span class=\"br0\">(</span><span class=\"nu0\">2</span>..<span class=\"nu0\">99</span><span class=\"br0\">)</span>.<span class=\"me1\">filter</span> <span class=\"br0\">{</span> isPrime<span class=\"br0\">(</span>it<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">forEach</span> <span class=\"br0\">{</span> print<span class=\"br0\">(</span><span class=\"st0\">\"$it \"</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 17, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">print</span> <span class=\"st0\">\"Rosetta Code - Primality by trial division\"</span><br/><span class=\"kw1\">print</span><br/><span class=\"br0\">[</span>start<span class=\"br0\">]</span><br/><span class=\"kw1\">input</span> <span class=\"st0\">\"Enter an integer: \"</span>; x<br/><span class=\"kw1\">if</span> x<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">print</span> <span class=\"st0\">\"Program complete.\"</span><span class=\"sy0\">:</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">if</span> isPrime<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw1\">print</span> x; <span class=\"st0\">\" is prime\"</span> <span class=\"kw1\">else</span> <span class=\"kw1\">print</span> x; <span class=\"st0\">\" is not prime\"</span><br/><span class=\"kw1\">goto</span> <span class=\"br0\">[</span>start<span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">function</span> isPrime<span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/>    p<span class=\"sy0\">=</span><span class=\"kw2\">int</span><span class=\"br0\">(</span><span class=\"kw2\">abs</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> p<span class=\"sy0\">=</span><span class=\"nu0\">2</span> <span class=\"kw1\">or</span> <span class=\"kw1\">then</span> isPrime<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span> <span class=\"co1\">'prime</span><br/>    <span class=\"kw1\">if</span> p<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">or</span> p<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>p <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span> <span class=\"co1\">'not prime</span><br/>    <span class=\"kw1\">for</span> i<span class=\"sy0\">=</span><span class=\"nu0\">3</span> <span class=\"kw1\">to</span> <span class=\"kw2\">sqr</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span> step <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>p <span class=\"kw1\">mod</span> i<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">exit</span> <span class=\"kw1\">function</span> <span class=\"co1\">'not prime</span><br/>    <span class=\"kw1\">next</span> i<br/>    isPrime<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "Lingo", "loc": 8, "block": "<pre class=\"text highlighted_source\">on isPrime (n)<br/>    if n&lt;=1 or (n&gt;2 and n mod 2=0) then return FALSE<br/>    sq = sqrt(n)<br/>    repeat with i = 3 to sq<br/>        if n mod i = 0 then return FALSE<br/>    end repeat<br/>    return TRUE<br/>end</pre>"}, {"lang": "Logo", "loc": 7, "block": "<pre class=\"text highlighted_source\">to prime?\u00a0:n<br/>   if\u00a0:n &lt; 2 [output \"false]<br/>   if\u00a0:n = 2 [output \"true]<br/>   if equal? 0 modulo\u00a0:n 2 [output \"false]<br/>   for [i 3 [sqrt\u00a0:n] 2] [if equal? 0 modulo\u00a0:n\u00a0:i [output \"false]]<br/>   output \"true<br/>end</pre>"}, {"lang": "LSE64", "loc": 15, "block": "<pre class=\"text highlighted_source\">over\u00a0: 2 pick<br/> 2dup\u00a0: over over<br/> even?\u00a0: 1 &amp; 0 =<br/>\u00a0<br/> # trial n d yields \"n d 0/1 false\" or \"n d+2 true\"<br/> trial\u00a0: 2 +                 true<br/> trial\u00a0: 2dup\u00a0% 0 =   then 0 false<br/> trial\u00a0: 2dup dup * &lt; then 1 false<br/> trial-loop\u00a0: trial &amp;repeat<br/>\u00a0<br/> # prime? n yields flag<br/> prime?\u00a0: 3 trial-loop &gt;flag drop drop<br/> prime?\u00a0: dup even? then drop false<br/> prime?\u00a0: dup 2 =   then drop true<br/> prime?\u00a0: dup 2 &lt;   then drop false</pre>"}, {"lang": "Lua", "loc": 13, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> IsPrime<span class=\"br0\">(</span> n <span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"kw2\">or</span> <span class=\"br0\">(</span> n <span class=\"sy0\">~=</span> <span class=\"nu0\">2</span> <span class=\"kw2\">and</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">3</span><span class=\"sy0\">,</span> <span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"kw1\">do</span><br/>\t<span class=\"kw1\">if</span> n <span class=\"sy0\">%</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span><br/>  \t    <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/>\t<span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "M4", "loc": 15, "block": "<pre class=\"text highlighted_source\">define(`testnext',<br/>   `ifelse(eval($2*$2&gt;$1),1,<br/>      1,<br/>      `ifelse(eval($1%$2==0),1,<br/>         0,<br/>         `testnext($1,eval($2+2))')')')<br/>define(`isprime',<br/>   `ifelse($1,2,<br/>      1,<br/>      `ifelse(eval($1&lt;=1 || $1%2==0),1,<br/>         0,<br/>         `testnext($1,3)')')')<br/>\u00a0<br/>isprime(9)<br/>isprime(11)</pre>"}, {"lang": "Maple", "loc": 16, "block": "<pre class=\"text highlighted_source\">TrialDivision\u00a0:= proc( n\u00a0:: integer )<br/>        if n &lt;= 1 then<br/>                false<br/>        elif n = 2 then<br/>                true<br/>        elif type( n, 'even' ) then<br/>                false<br/>        else<br/>                for local i from 3 by 2 while i * i &lt;= n do<br/>                        if irem( n, i ) = 0 then<br/>                                return false<br/>                        end if<br/>                end do;<br/>                true<br/>        end if<br/>end proc:</pre>"}, {"lang": "Mathematica", "loc": 5, "block": "<pre class=\"text highlighted_source\">IsPrime[n_Integer]\u00a0:= Block[{},<br/>  If[n &lt;= 1, Return[False]];<br/>  If[n == 2, Return[True]]; If[Mod[n, 2] == 0, Return[False]];<br/>  For[k = 3, k &lt;= Sqrt[n], k += 2, If[Mod[n, k] == 0, Return[False]]];<br/>  Return[True]]</pre>"}, {"lang": "MATLAB", "loc": 19, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> isPrime = primalityByTrialDivision<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"kw1\">if</span> n == <span class=\"nu0\">2</span><br/>        isPrime = true;<br/>        <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">elseif</span> <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>n,<span class=\"nu0\">2</span><span class=\"br0\">)</span> == <span class=\"nu0\">0</span><span class=\"br0\">)</span> || <span class=\"br0\">(</span>n &lt;= <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        isPrime = false;<br/>        <span class=\"kw1\">return</span><br/>    <span class=\"kw1\">end</span><br/>\u00a0<br/>    <span class=\"co1\">%First n mod (3 to sqrt(n)) is taken. This will be a vector where the</span><br/>    <span class=\"co1\">%first element is equal to n mod 3 and the last element is equal to n</span><br/>    <span class=\"co1\">%mod sqrt(n). Then the all function is applied to that vector. If all</span><br/>    <span class=\"co1\">%of the elements of this vector are non-zero (meaning n is prime) then</span><br/>    <span class=\"co1\">%all() returns true. Otherwise, n is composite, so it returns false.</span><br/>    <span class=\"co1\">%This return value is then assigned to the variable isPrime.</span><br/>    isPrime = <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/all.html\"><span class=\"kw2\">all</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html\"><span class=\"kw2\">mod</span></a><span class=\"br0\">(</span>n, <span class=\"br0\">(</span><span class=\"nu0\">3</span>:<a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/round.html\"><span class=\"kw2\">round</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sqrt.html\"><span class=\"kw2\">sqrt</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maxima", "loc": 6, "block": "<pre class=\"text highlighted_source\">isprme(n):= catch(<br/>  for k: 2 thru sqrt(n) do if mod(n, k)=0 then throw(false),<br/>  true);<br/>\u00a0<br/>map(isprme, [2, 3, 4, 65, 100, 181, 901]);<br/>/* [true, true, false, false, false, true, false] */</pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 4, "block": "<pre class=\"text highlighted_source\">\u041f0\t1\t-\tx#0\t34\t2\t-\t/-/\tx&lt;0\t32<br/>\u0418\u041f0\t2\t/\t{x}\tx#0\t34<br/>3\t\u041f4\t\u0418\u041f0\t\u0418\u041f4\t/\t{x}\tx#0\t34\t\u041a\u0418\u041f4\t\u041a\u0418\u041f4<br/>\u0418\u041f0\t\u041a\u0432\u041a\u043e\u0440\t\u0418\u041f4\t-\tx&lt;0\t16\t1\t\u0421/\u041f\t0\t\u0421/\u041f</pre>"}, {"lang": "MUMPS", "loc": 7, "block": "<pre class=\"text highlighted_source\">ISPRIME(N)<br/> QUIT:(N=2) 1<br/> NEW I,R<br/> SET R=N#2<br/> IF R FOR I=3:2:(N**.5) SET R=N#I Q:'R<br/> KILL I<br/> QUIT R</pre>"}, {"lang": "NetRexx", "loc": 66, "block": "<pre class=\"netrexx highlighted_source\"><span class=\"coMULTI\">/* NetRexx */</span><br/>\u00a0<br/>options replace format comments java crossref savelog symbols nobinary<br/>\u00a0<br/><span class=\"kw1\">parse</span> arg nbr rangeBegin rangeEnd .<br/>\u00a0<br/><span class=\"kw1\">if</span> nbr = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> nbr = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">if</span> rangeBegin = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> rangeBegin = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> rangeBegin = <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">if</span> rangeEnd   = <span class=\"st0\">''</span> <span class=\"sy0\">|</span> rangeEnd   = <span class=\"st0\">'.'</span> <span class=\"kw3\">then</span> rangeEnd   = <span class=\"nu0\">100</span><br/>  <span class=\"kw1\">if</span> rangeEnd <span class=\"sy0\">&gt;</span> rangeBegin <span class=\"kw3\">then</span> direction = <span class=\"nu0\">1</span><br/>                           <span class=\"kw3\">else</span> direction = -<span class=\"nu0\">1</span><br/>\u00a0<br/>  <span class=\"kw1\">say</span> <span class=\"st0\">'List of prime numbers from'</span> rangeBegin <span class=\"st0\">'to'</span> rangeEnd<span class=\"st0\">':'</span><br/>  primes = <span class=\"st0\">''</span><br/>  <span class=\"kw1\">loop</span> nn = rangeBegin to rangeEnd by direction<br/>    <span class=\"kw1\">if</span> isPrime<span class=\"br0\">(</span>nn<span class=\"br0\">)</span> <span class=\"kw3\">then</span> primes = primes nn<br/>    <span class=\"kw3\">end</span> nn<br/>    primes = primes.<span class=\"kw6\">strip</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'  '</span>primes.<span class=\"kw6\">changestr</span><span class=\"br0\">(</span><span class=\"st0\">' '</span>, <span class=\"st0\">','</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'  Total number of primes:'</span> primes.<span class=\"kw6\">words</span><br/>  <span class=\"kw3\">end</span><br/><span class=\"kw3\">else</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">if</span> isPrime<span class=\"br0\">(</span>nbr<span class=\"br0\">)</span> <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> nbr.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"st0\">'is prime'</span><br/>                  <span class=\"kw3\">else</span> <span class=\"kw1\">say</span> nbr.<span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"st0\">'is not prime'</span><br/>  <span class=\"kw3\">end</span><br/>\u00a0<br/><span class=\"kw1\">return</span><br/>\u00a0<br/>method isPrime<span class=\"br0\">(</span>nbr = long<span class=\"br0\">)</span> <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">binary</span> <span class=\"kw2\">returns</span> boolean<br/>\u00a0<br/>  ip = boolean<br/>\u00a0<br/>  <span class=\"kw1\">select</span><br/>    <span class=\"kw3\">when</span> nbr <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      ip = isFalse<br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">when</span> <span class=\"st0\">'2 3 5 7'</span>.<span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>Rexx<span class=\"br0\">(</span>nbr<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">\\</span>= <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      <span class=\"co1\">-- crude shortcut ripped from the Rexx example</span><br/>      ip = isTrue<br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">when</span>  nbr <span class=\"sy0\">//</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span> <span class=\"sy0\">|</span> nbr <span class=\"sy0\">//</span> <span class=\"nu0\">3</span> == <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>      <span class=\"co1\">-- another shortcut permitted by the one above</span><br/>      ip = isFalse<br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">otherwise</span> <span class=\"kw1\">do</span><br/>      nn = long<br/>      nnStartTerm = long <span class=\"nu0\">3</span> <span class=\"co1\">-- a reasonable start term - nn &lt;= 2 is never prime</span><br/>      nnEndTerm = long Math.<span class=\"me0\">ceil</span><span class=\"br0\">(</span>Math.<span class=\"me0\">sqrt</span><span class=\"br0\">(</span>nbr<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"co1\">-- a reasonable end term</span><br/>      ip = isTrue <span class=\"co1\">-- prime the pump (pun intended)</span><br/>      <span class=\"kw1\">loop</span> nn = nnStartTerm to nnEndTerm by <span class=\"nu0\">2</span><br/>         <span class=\"co1\">-- Note: in Rexx and NetRexx \"//\" is the 'remainder of division operator' (which is not the same as modulo)</span><br/>        <span class=\"kw1\">if</span> nbr <span class=\"sy0\">//</span> nn = <span class=\"nu0\">0</span> <span class=\"kw3\">then</span> <span class=\"kw1\">do</span><br/>          ip = isFalse<br/>          <span class=\"kw1\">leave</span> nn<br/>          <span class=\"kw3\">end</span><br/>        <span class=\"kw3\">end</span> nn<br/>      <span class=\"kw3\">end</span><br/>    <span class=\"kw3\">end</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> ip<br/>\u00a0<br/>method isTrue <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> boolean<br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> == <span class=\"nu0\">1</span><br/>\u00a0<br/>method isFalse <span class=\"kw2\">public</span> <span class=\"kw2\">static</span> <span class=\"kw2\">returns</span> boolean<br/>  <span class=\"kw1\">return</span> <span class=\"sy0\">\\</span>isTrue</pre>"}, {"lang": "Nim", "loc": 29, "block": "<pre class=\"text highlighted_source\">import sequtils, math<br/>\u00a0<br/>proc prime(a: int): bool =<br/>  if a == 2: return true<br/>  if a &lt; 2 or a mod 2 == 0: return false<br/>  for i in countup(3, sqrt(a.float).int, 2):<br/>    if a mod i == 0:<br/>      return false<br/>  return true<br/>\u00a0<br/>template any(sequence, operation: expr): expr =<br/>  var result {.gensym.}: bool = false<br/>  for i in 0 .. &lt;sequence.len:<br/>    let it {.inject.} = sequence[i]<br/>    result = operation<br/>    if result:<br/>      break<br/>  result<br/>\u00a0<br/>proc prime2(a: int): bool =<br/>  result = not (a &lt; 2 or any(toSeq(2 .. sqrt(a.float).int), a mod it == 0))<br/>\u00a0<br/>proc prime3(a: int): bool =<br/>  if a == 2: return true<br/>  if a &lt; 2 or a mod 2 == 0: return false<br/>  return not any(toSeq countup(3, sqrt(a.float).int, 2), a mod it == 0)<br/>\u00a0<br/>for i in 2..30:<br/>  echo i, \" \", prime(i)</pre>"}, {"lang": "Objeck", "loc": 13, "block": "<pre class=\"objeck highlighted_source\"><span class=\"kw1\">function</span> <span class=\"sy0\">:</span> IsPrime<span class=\"br0\">(</span>n <span class=\"sy0\">:</span> <span class=\"kw2\">Int</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Bool</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">false</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">*</span> i <span class=\"sy0\">&lt;=</span> n<span class=\"sy0\">;</span> i <span class=\"sy0\">+=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span>           <br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">%</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw3\">false</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> <span class=\"kw3\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 9, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"kw1\">let</span> is_prime n <span class=\"sy0\">=</span><br/>  <span class=\"kw1\">if</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span> <span class=\"kw1\">true</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"sy0\">||</span> n <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">false</span><br/>  <span class=\"kw1\">else</span><br/>    <span class=\"kw1\">let</span> <span class=\"kw1\">rec</span> loop k <span class=\"sy0\">=</span><br/>      <span class=\"kw1\">if</span> k <span class=\"sy0\">*</span> k <span class=\"sy0\">&gt;</span> n <span class=\"kw1\">then</span> <span class=\"kw1\">true</span><br/>      <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> n <span class=\"kw1\">mod</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">false</span><br/>      <span class=\"kw1\">else</span> loop <span class=\"br0\">(</span>k<span class=\"sy0\">+</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">in</span> loop <span class=\"nu0\">3</span></pre>"}, {"lang": "Octave", "loc": 25, "block": "<pre class=\"octave highlighted_source\"><span class=\"kw4\">function</span> b <span class=\"sy3\">=</span> isthisprime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"kw4\">for</span> r <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span><a href=\"http://octave.sourceforge.net/octave/function/rows.html\"><span class=\"kw5\">rows</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw4\">for</span> c <span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">:</span><a href=\"http://octave.sourceforge.net/octave/function/columns.html\"><span class=\"kw5\">columns</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>      b<span class=\"br0\">(</span>r<span class=\"sy5\">,</span>c<span class=\"br0\">)</span> <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/false.html\"><span class=\"kw10\">false</span></a><span class=\"sy5\">;</span><br/>      <span class=\"kw4\">if</span> <span class=\"br0\">(</span> n<span class=\"br0\">(</span>r<span class=\"sy5\">,</span>c<span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/>\tb<span class=\"br0\">(</span>r<span class=\"sy5\">,</span>c<span class=\"br0\">)</span> <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/true.html\"><span class=\"kw10\">true</span></a><span class=\"sy5\">;</span><br/>      <span class=\"kw4\">elseif</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>n<span class=\"br0\">(</span>r<span class=\"sy5\">,</span>c<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span><a href=\"http://octave.sourceforge.net/octave/function/mod.html\"><span class=\"kw5\">mod</span></a><span class=\"br0\">(</span>n<span class=\"br0\">(</span>r<span class=\"sy5\">,</span>c<span class=\"br0\">)</span><span class=\"sy5\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\tb<span class=\"br0\">(</span>r<span class=\"sy5\">,</span>c<span class=\"br0\">)</span> <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/false.html\"><span class=\"kw10\">false</span></a><span class=\"sy5\">;</span><br/>      <span class=\"kw4\">else</span><br/>\tb<span class=\"br0\">(</span>r<span class=\"sy5\">,</span>c<span class=\"br0\">)</span> <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/true.html\"><span class=\"kw10\">true</span></a><span class=\"sy5\">;</span><br/>\t<span class=\"kw4\">for</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a> <span class=\"sy3\">=</span> <span class=\"nu0\">3</span><span class=\"sy4\">:</span><span class=\"nu0\">2</span><span class=\"sy4\">:</span><a href=\"http://octave.sourceforge.net/octave/function/sqrt.html\"><span class=\"kw5\">sqrt</span></a><span class=\"br0\">(</span>n<span class=\"br0\">(</span>r<span class=\"sy5\">,</span>c<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t  <span class=\"kw4\">if</span> <span class=\"br0\">(</span> <a href=\"http://octave.sourceforge.net/octave/function/mod.html\"><span class=\"kw5\">mod</span></a><span class=\"br0\">(</span>n<span class=\"br0\">(</span>r<span class=\"sy5\">,</span>c<span class=\"br0\">)</span><span class=\"sy5\">,</span> <a href=\"http://octave.sourceforge.net/octave/function/i.html\"><span class=\"kw10\">i</span></a><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><br/>\t    b<span class=\"br0\">(</span>r<span class=\"sy5\">,</span>c<span class=\"br0\">)</span> <span class=\"sy3\">=</span> <a href=\"http://octave.sourceforge.net/octave/function/false.html\"><span class=\"kw10\">false</span></a><span class=\"sy5\">;</span><br/>\t    <span class=\"kw4\">break</span><span class=\"sy5\">;</span><br/>\t  <span class=\"kw4\">endif</span><br/>\t<span class=\"kw4\">endfor</span><br/>      <span class=\"kw4\">endif</span><br/>    <span class=\"kw4\">endfor</span><br/>  <span class=\"kw4\">endfor</span><br/><span class=\"kw4\">endfunction</span><br/>\u00a0<br/><span class=\"co2\">% as test, print prime numbers from 1 to 100</span><br/>p <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy4\">:</span><span class=\"nu0\">100</span><span class=\"br0\">]</span><span class=\"sy5\">;</span><br/>pv <span class=\"sy3\">=</span> isthisprime<span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"sy5\">;</span><br/><a href=\"http://octave.sourceforge.net/octave/function/disp.html\"><span class=\"kw5\">disp</span></a><span class=\"br0\">(</span>p<span class=\"br0\">(</span> pv <span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy5\">;</span></pre>"}, {"lang": "Oforth", "loc": 7, "block": "<pre class=\"text highlighted_source\">Integer method: isPrime<br/>| i |<br/>   self 1 &lt;= ifTrue: [ false return ]<br/>   self 3 &lt;= ifTrue: [ true return ]<br/>   self isEven ifTrue: [ false return ]<br/>   3 self sqrt asInteger for: i [ self i mod ifzero: [ false return ] ]<br/>   true\u00a0;</pre>"}, {"lang": "Oz", "loc": 12, "block": "<pre class=\"oz highlighted_source\">   <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">Prime</span> N<span class=\"br0\">}</span><br/>      <span class=\"kw1\">local</span> IPrime <span class=\"kw1\">in</span><br/>\t <span class=\"kw1\">fun</span> <span class=\"br0\">{</span><span class=\"re1\">IPrime</span> N Acc<span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">if</span> N <span class=\"sy0\">&lt;</span> Acc<span class=\"sy0\">*</span>Acc <span class=\"kw1\">then</span> <span class=\"kw1\">true</span><br/>\t    <span class=\"kw1\">elseif</span> <span class=\"br0\">(</span>N <span class=\"kw1\">mod</span> Acc<span class=\"br0\">)</span> <span class=\"sy0\">==</span> 0 <span class=\"kw1\">then</span> <span class=\"kw1\">false</span><br/>\t    <span class=\"kw1\">else</span> <span class=\"br0\">{</span>IPrime N Acc<span class=\"sy0\">+</span>1<span class=\"br0\">}</span><br/>\t    <span class=\"kw1\">end</span><br/>\t <span class=\"kw1\">end</span><br/>\t <span class=\"kw1\">if</span> N <span class=\"sy0\">&lt;</span> 2 <span class=\"kw1\">then</span> <span class=\"kw1\">false</span><br/>\t <span class=\"kw1\">else</span> <span class=\"br0\">{</span>IPrime N 2<span class=\"br0\">}</span> <span class=\"kw1\">end</span><br/>      <span class=\"kw1\">end</span><br/>   <span class=\"kw1\">end</span></pre>"}, {"lang": "PARI/GP", "loc": 7, "block": "<pre class=\"parigp highlighted_source\">trial<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span><span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> <span class=\"nu1\">4</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"coMULTI\">/* Handle negatives */</span><br/>  <span class=\"kw1\">forprime</span><span class=\"br0\">(</span>p<span class=\"sy0\">=</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span><span class=\"kw1\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">,</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>n<span class=\"sy0\">%</span>p <span class=\"sy0\">==</span> <span class=\"nu1\">0</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"nu1\">1</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Panda", "loc": 4, "block": "<pre class=\"text highlighted_source\">fun prime(p) type integer-&gt;integer<br/>  p.gt(1) where q=p.sqrt NO(p.mod(2..q)==0)<br/>\u00a0<br/>1..100.prime</pre>"}, {"lang": "Pascal", "loc": 29, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> primes<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> prime<span class=\"br0\">(</span>n<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"br0\">)</span><span class=\"sy1\">:</span> <span class=\"kw4\">boolean</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span><br/>  i<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span> max<span class=\"sy1\">:</span> <span class=\"kw4\">real</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">if</span> n <span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"kw1\">then</span><br/>    prime <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">true</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n &lt;<span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>n <span class=\"kw1\">mod</span> <span class=\"nu0\">2</span> <span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    prime <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><br/>  <span class=\"kw1\">else</span> <span class=\"kw1\">begin</span><br/>    prime <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">true</span><span class=\"sy1\">;</span> i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">3</span><span class=\"sy1\">;</span> max <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">while</span> i &lt;<span class=\"sy3\">=</span> max <span class=\"kw1\">do</span> <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> n <span class=\"kw1\">mod</span> i <span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw1\">begin</span><br/>        prime <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw2\">false</span><span class=\"sy1\">;</span> exit<br/>      <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>      i <span class=\"sy1\">:</span><span class=\"sy3\">=</span> i <span class=\"sy3\">+</span> <span class=\"nu0\">2</span><br/>    <span class=\"kw1\">end</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"coMULTI\">{ Test and display primes 0 .. 50 }</span><br/><span class=\"kw1\">var</span> <br/>  n<span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw1\">for</span> n <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">to</span> <span class=\"nu0\">50</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>prime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>      <span class=\"kw3\">write</span><span class=\"br0\">(</span>n<span class=\"sy1\">,</span> <span class=\"st0\">' '</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 6, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> prime <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"sy0\">||</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"co5\">$_</span> <span class=\"kw1\">or</span> <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">for</span> <span class=\"nu0\">2</span> <span class=\"sy0\">..</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$n</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st_h\">', '</span> <span class=\"sy0\">=&gt;</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> prime<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 3, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> prime <span class=\"br0\">(</span>Int <span class=\"re0\">$i</span> <span class=\"sy0\">--&gt;</span> Bool<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$i</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">and</span> so <span class=\"re0\">$i</span> <span class=\"sy0\">%%</span> <span class=\"kw3\">none</span> <span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"re0\">$i</span><span class=\"sy0\">.</span><span class=\"kw3\">sqrt</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 11, "block": "<pre class=\"text highlighted_source\">function is_prime(integer n)<br/>    if n&lt;2 then return 0 end if<br/>    if n=2 then return 1 end if<br/>    if remainder(n,2)=0 then return 0 end if<br/>    for i=3 to floor(sqrt(n)) by 2 do<br/>        if remainder(n,i)=0 then<br/>            return 0<br/>        end if<br/>    end for<br/>    return 1<br/>end function</pre>"}, {"lang": "PHP", "loc": 15, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">&lt;?php</span><br/><span class=\"kw2\">function</span> prime<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$a</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"re0\">$a</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$limit</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/sqrt\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$limit</span><span class=\"sy0\">;</span> <span class=\"re0\">$i</span><span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">%</span> <span class=\"re0\">$i</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><a href=\"http://www.php.net/range\"><span class=\"kw3\">range</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">100</span><span class=\"br0\">)</span> <span class=\"kw1\">as</span> <span class=\"re0\">$x</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>prime<span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">echo</span> <span class=\"st0\">\"<span class=\"es4\">$x</span><span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"sy1\">?&gt;</span></pre>"}, {"lang": "PicoLisp", "loc": 10, "block": "<pre class=\"text highlighted_source\">(de prime? (N)<br/>   (or<br/>      (= N 2)<br/>      (and<br/>         (&gt; N 1)<br/>         (bit? 1 N)<br/>         (let S (sqrt N)<br/>            (for (D 3  T  (+ D 2))<br/>               (T (&gt; D S) T)<br/>               (T (=0 (% N D)) NIL) ) ) ) ) )</pre>"}, {"lang": "PL/I", "loc": 13, "block": "<pre class=\"text highlighted_source\">is_prime: procedure (n) returns (bit(1));<br/>   declare n fixed (15);<br/>   declare i fixed (10);<br/>\u00a0<br/>   if n &lt; 2 then return ('0'b);<br/>   if n = 2 then return ('1'b);<br/>   if mod(n, 2) = 0 then return ('0'b);<br/>\u00a0<br/>   do i = 3 to sqrt(n) by 2;<br/>      if mod(n, i) = 0 then return ('0'b);<br/>   end;<br/>   return ('1'b);<br/>end is_prime;</pre>"}, {"lang": "PowerShell", "loc": 11, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> isPrime <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$false</span><span class=\"br0\">}</span> <br/>    <span class=\"kw3\">elseif</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$true</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">elseif</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"re0\">$true</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><span class=\"br0\">{</span><br/>        <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Floor<span class=\"br0\">(</span><span class=\"br0\">[</span>Math<span class=\"br0\">]</span>::Sqrt<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"sy0\">@</span><span class=\"br0\">(</span><span class=\"nu0\">2</span>..<span class=\"re0\">$m</span> <span class=\"sy0\">|</span> <span class=\"kw3\">where</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"kw4\">-lt</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span>  <span class=\"kw4\">-and</span> <span class=\"br0\">(</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <a href=\"about:blank\"><span class=\"kw6\">$_</span></a> <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"br0\">)</span>.Count <span class=\"kw4\">-eq</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"nu0\">1</span>..<span class=\"nu0\">15</span> <span class=\"sy0\">|</span> <span class=\"kw3\">foreach</span><span class=\"br0\">{</span><span class=\"st0\">\"isPrime $_\u00a0: $(isPrime $_)\"</span><span class=\"br0\">}</span></pre>"}, {"lang": "Prolog", "loc": 7, "block": "<pre class=\"prolog highlighted_source\">prime<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>prime<span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"sy1\">:-</span> <br/>  between<span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"sy4\">,</span> inf<span class=\"sy4\">,</span> N<span class=\"br0\">)</span><span class=\"sy4\">,</span><br/>  <span class=\"nu0\">1</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"nu0\">2</span><span class=\"sy4\">,</span>             <span class=\"co1\">% odd</span><br/>  M <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">floor</span></a><span class=\"br0\">(</span><a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">sqrt</span></a><span class=\"br0\">(</span>N<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">,</span>    <span class=\"co1\">% round-off paranoia </span><br/>  Max <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> <span class=\"br0\">(</span>M<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">//</span> <span class=\"nu0\">2</span><span class=\"sy4\">,</span>        <span class=\"co1\">% integer division</span><br/>  forall<span class=\"br0\">(</span> between<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy4\">,</span> Max<span class=\"sy4\">,</span> I<span class=\"br0\">)</span><span class=\"sy4\">,</span> N <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy3\">*</span>I<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy6\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span><span class=\"sy4\">.</span></pre>"}, {"lang": "PureBasic", "loc": 19, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span>.i IsPrime<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>   <span class=\"kw1\">Protected</span> k<br/>\u00a0<br/>   <span class=\"kw1\">If</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><br/>      <span class=\"kw1\">ProcedureReturn</span> #True<br/>   <span class=\"kw1\">EndIf</span>   <br/>\u00a0<br/>   <span class=\"kw1\">If</span> n <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Or</span> n <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>      <span class=\"kw1\">ProcedureReturn</span> #False<br/>   <span class=\"kw1\">EndIf</span><br/>\u00a0<br/>   <span class=\"kw1\">For</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">3</span> <span class=\"kw1\">To</span> <span class=\"kw2\">Int</span><span class=\"br0\">(</span><span class=\"kw2\">Sqr</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">Step</span> <span class=\"nu0\">2</span><br/>      <span class=\"kw1\">If</span> n <span class=\"sy0\">%</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>         <span class=\"kw1\">ProcedureReturn</span> #False<br/>      <span class=\"kw1\">EndIf</span><br/>   <span class=\"kw1\">Next</span><br/>\u00a0<br/>   <span class=\"kw1\">ProcedureReturn</span> #True<br/><span class=\"kw1\">EndProcedure</span></pre>"}, {"lang": "Python", "loc": 2, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">def</span> prime<span class=\"br0\">(</span>a<span class=\"br0\">)</span>:<br/>    <span class=\"kw1\">return</span> <span class=\"kw1\">not</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span> <span class=\"nu0\">2</span> <span class=\"kw1\">or</span> <span class=\"kw2\">any</span><span class=\"br0\">(</span>a\u00a0% x <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">xrange</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>a**<span class=\"nu0\">0.5</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Qi", "loc": 10, "block": "<pre class=\"text highlighted_source\">(define prime?-0<br/>  K N -&gt; true where (&gt; (* K K) N)<br/>  K N -&gt; false where (= 0 (MOD N K))<br/>  K N -&gt; (prime?-0 (+ K 2) N))<br/>\u00a0<br/>(define prime?<br/>  1 -&gt; false<br/>  2 -&gt; true<br/>  N -&gt; false where (= 0 (MOD N 2))<br/>  N -&gt; (prime?-0 3 N))</pre>"}, {"lang": "R", "loc": 8, "block": "<pre class=\"text highlighted_source\">isPrime &lt;- function(n) {<br/>  if (n == 2) return(TRUE)<br/>  if ( (n &lt;= 1) || ( n\u00a0%% 2 == 0 ) ) return(FALSE)<br/>  for( i in 3:sqrt(n) ) {<br/>    if ( n\u00a0%% i == 0 ) return(FALSE)<br/>  }<br/>  TRUE<br/>}</pre>"}, {"lang": "Racket", "loc": 8, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>\u00a0<br/>(define (prime? number)<br/>  (cond ((not (positive? number)) #f)<br/>        ((= 1 number) #f)<br/>        ((even? number) (= 2 number))<br/>        (else (for/and ((i (in-range 3 (ceiling (sqrt number)))))<br/>                (not (zero? (remainder number i)))))))</pre>"}, {"lang": "REBOL", "loc": 12, "block": "<pre class=\"rebol highlighted_source\">prime?: <span class=\"kw2\">func</span> <span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"br0\">[</span><br/>    case <span class=\"br0\">[</span><br/>        n = <span class=\"nu0\">2</span> <span class=\"br0\">[</span> true  <span class=\"br0\">]</span><br/>        n <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1</span> <span class=\"kw3\">or</span> <span class=\"br0\">(</span>n <span class=\"sy0\">//</span> <span class=\"nu0\">2</span> = <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">[</span> false <span class=\"br0\">]</span><br/>        true <span class=\"br0\">[</span><br/>            <span class=\"kw2\">for</span> i <span class=\"nu0\">3</span> round <span class=\"kw3\">square-root</span> n <span class=\"nu0\">2</span> <span class=\"br0\">[</span><br/>                <span class=\"kw2\">if</span> n <span class=\"sy0\">//</span> i = <span class=\"nu0\">0</span> <span class=\"br0\">[</span> <span class=\"kw2\">return</span> false <span class=\"br0\">]</span><br/>            <span class=\"br0\">]</span><br/>            true<br/>        <span class=\"br0\">]</span><br/>    <span class=\"br0\">]</span><br/><span class=\"br0\">]</span></pre>"}, {"lang": "REXX", "loc": 21, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program tests for  primality by using  (kinda smartish)  trial division.         */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> n <span class=\"sy0\">.</span>;  <span class=\"kw1\">if</span> n==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> n=<span class=\"nu0\">10000</span>           <span class=\"coMULTI\">/*let the user choose the upper limit. */</span><br/>tell=<span class=\"br0\">(</span>n<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>;     n=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span>                         <span class=\"coMULTI\">/*display the primes  only if   N &gt; 0. */</span><br/>p=<span class=\"nu0\">0</span>                                              <span class=\"coMULTI\">/*a count of the primes found (so far).*/</span><br/>      <span class=\"kw1\">do</span> j=-<span class=\"nu0\">57</span>  <span class=\"kw2\">to</span> n                             <span class=\"coMULTI\">/*start in the cellar and work up.     */</span><br/>      <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span>isPrime<span class=\"br0\">(</span>j<span class=\"br0\">)</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span>               <span class=\"coMULTI\">/*if not prime,  then keep looking.    */</span><br/>      p=p+<span class=\"nu0\">1</span>                                      <span class=\"coMULTI\">/*bump the jelly bean counter.         */</span><br/>      <span class=\"kw1\">if</span> tell  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span>j,<span class=\"nu0\">20</span><span class=\"br0\">)</span> <span class=\"st0\">'is prime.'</span>  <span class=\"coMULTI\">/*maybe display prime to the terminal. */</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/><span class=\"kw1\">say</span><br/><span class=\"kw1\">say</span>  <span class=\"st0\">\"There are \"</span>      p       <span class=\"st0\">\" primes up to \"</span>        n        <span class=\"st0\">' (inclusive).'</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>isPrime: <span class=\"kw1\">procedure</span>;    <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x                       <span class=\"coMULTI\">/*get the number to be tested. */</span><br/>         <span class=\"kw1\">if</span> <span class=\"kw6\">wordpos</span><span class=\"br0\">(</span>x, <span class=\"st0\">'2 3 5 7'</span><span class=\"br0\">)</span><span class=\"sy0\">\\</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>     <span class=\"coMULTI\">/*is number a teacher's pet?   */</span><br/>         <span class=\"kw1\">if</span> x<span class=\"sy0\">&lt;</span><span class=\"nu0\">2</span> <span class=\"sy0\">|</span> x<span class=\"sy0\">//</span><span class=\"nu0\">2</span>==<span class=\"nu0\">0</span> <span class=\"sy0\">|</span> x<span class=\"sy0\">//</span><span class=\"nu0\">3</span>==<span class=\"nu0\">0</span>    <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>     <span class=\"coMULTI\">/*weed out the riff-raff.      */</span><br/>            <span class=\"kw1\">do</span> k=<span class=\"nu0\">5</span>  <span class=\"kw2\">by</span>  <span class=\"nu0\">6</span>  <span class=\"kw2\">until</span> k<span class=\"sy0\">*</span>k<span class=\"sy0\">&gt;</span>x                   <span class=\"coMULTI\">/*skips odd multiples of  3.   */</span><br/>            <span class=\"kw1\">if</span> x<span class=\"sy0\">//</span>k==<span class=\"nu0\">0</span> <span class=\"sy0\">|</span> x<span class=\"sy0\">//</span><span class=\"br0\">(</span>k+<span class=\"nu0\">2</span><span class=\"br0\">)</span>==<span class=\"nu0\">0</span>   <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>     <span class=\"coMULTI\">/*a pair of divides.      ___  */</span><br/>            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span>                                  <span class=\"coMULTI\">/*divide up through the  \u221a x   */</span><br/>                                                         <span class=\"coMULTI\">/*Note:  //   is  \u00f7  remainder.*/</span><br/>         <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>                                        <span class=\"coMULTI\">/*done dividing, it's prime.   */</span></pre>"}, {"lang": "Ring", "loc": 12, "block": "<pre class=\"text highlighted_source\">give n <br/>flag = isPrime(n)<br/>if flag = 1 see n + \" is a prime number\" <br/>else see n + \" is not a prime number\" ok<br/>\u00a0<br/>func isPrime num<br/>     if (num &lt;= 1) return 0 ok<br/>     if (num\u00a0% 2 = 0 and num\u00a0!= 2) return 0 ok<br/>     for i = 3 to floor(num / 2) -1 step 2<br/>         if (num\u00a0% i = 0) return 0 ok<br/>     next<br/>     return 1</pre>"}, {"lang": "Ruby", "loc": 11, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> prime<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> a == <span class=\"nu0\">2</span><br/>    <span class=\"kw2\">true</span><br/>  <span class=\"kw1\">elsif</span> a <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> a <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span><br/>    <span class=\"kw2\">false</span><br/>  <span class=\"kw1\">else</span><br/>    divisors = <span class=\"br0\">(</span><span class=\"nu0\">3</span>..<span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">step</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    divisors.<span class=\"me1\">none</span>? <span class=\"br0\">{</span> <span class=\"sy0\">|</span>d<span class=\"sy0\">|</span> a <span class=\"sy0\">%</span> d == <span class=\"nu0\">0</span> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">p</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">50</span><span class=\"br0\">)</span>.<span class=\"kw3\">select</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> prime<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">}</span></pre>"}, {"lang": "Run BASIC", "loc": 15, "block": "<pre class=\"text highlighted_source\">' Test and display primes 1 .. 50<br/>for i = 1 TO 50<br/>  if prime(i) &lt;&gt; 0 then print i;\" \";<br/>next i<br/>\u00a0<br/>FUNCTION prime(n)<br/>if n &lt; 2         then prime = 0\u00a0: goto [exit]<br/>if n = 2         then prime = 1\u00a0: goto [exit]<br/>if n mod 2 = 0   then prime = 0\u00a0: goto [exit]<br/>prime = 1<br/>for i = 3 to int(n^.5) step 2<br/> if n mod i = 0 then  prime = 0\u00a0: goto [exit]<br/>next i<br/>[exit]<br/>END FUNCTION</pre>"}, {"lang": "Rust", "loc": 14, "block": "<pre class=\"text highlighted_source\">fn is_prime(n: u64) -&gt; bool {<br/>    if n == 2 { return true; }<br/>    if n &lt; 3 { return false; }<br/>    let sqrt_limit = (n as f64).sqrt() as u64;<br/>    (3..sqrt_limit+1).step_by(2).find(|i| n\u00a0% i == 0).is_none()<br/>}<br/>\u00a0<br/>fn main() {<br/>    for i in 1..30 {<br/>        if is_prime(i) {<br/>            println!(\"{} is prime!\", i);<br/>        }<br/>    }<br/>}</pre>"}, {"lang": "S-lang", "loc": 25, "block": "<pre class=\"text highlighted_source\">define is_prime(n)<br/>{<br/>   if (n == 2) return(1);<br/>   if (n &lt;= 1) return(0);<br/>   if ((n &amp; 1) == 0) return(0);<br/>\u00a0<br/>   variable mx = int(sqrt(n)), i;<br/>\u00a0<br/>   _for i (3, mx, 1) {<br/>     if ((n mod i) == 0)<br/>       return(0);<br/>   }<br/>   return(1);<br/>}<br/>\u00a0<br/>define ptest() <br/>{<br/>   variable lst = {};<br/>\u00a0<br/>   _for $1 (1, 64, 1)<br/>     if (is_prime($1))<br/>       list_append(lst, string($1));<br/>   print(strjoin(list_to_array(lst), \", \"));<br/>}<br/>ptest();</pre>"}, {"lang": "SAS", "loc": 21, "block": "<pre class=\"sas highlighted_source\"><span class=\"kw6\">data</span> primes;<br/><span class=\"kw5\">do</span> <span class=\"kw3\">n</span>=<span class=\"nu0\">1</span> to <span class=\"nu0\">1000</span>;<br/>  <span class=\"kw4\">link</span> primep;<br/>  <span class=\"kw5\">if</span> primep <span class=\"kw5\">then</span> <span class=\"kw4\">output</span>;<br/><span class=\"kw5\">end</span>;<br/><span class=\"kw4\">stop</span>;<br/>\u00a0<br/>primep:<br/><span class=\"kw5\">if</span> <span class=\"kw3\">n</span> &lt; <span class=\"nu0\">4</span> <span class=\"kw5\">then</span> <span class=\"kw5\">do</span>;<br/>  primep=<span class=\"kw3\">n</span>=<span class=\"nu0\">2</span> <span class=\"kw4\">or</span> <span class=\"kw3\">n</span>=<span class=\"nu0\">3</span>;<br/>  <span class=\"kw4\">return</span>;<br/><span class=\"kw5\">end</span>;<br/>primep=<span class=\"nu0\">0</span>;<br/><span class=\"kw5\">if</span> <span class=\"kw3\">mod</span><span class=\"br0\">(</span><span class=\"kw3\">n</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span>=<span class=\"nu0\">0</span> <span class=\"kw5\">then</span> <span class=\"kw4\">return</span>;<br/><span class=\"kw5\">do</span> k=<span class=\"nu0\">3</span> to <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"kw3\">n</span><span class=\"br0\">)</span> <span class=\"kw4\">by</span> <span class=\"nu0\">2</span>;<br/>  <span class=\"kw5\">if</span> <span class=\"kw3\">mod</span><span class=\"br0\">(</span><span class=\"kw3\">n</span>,k<span class=\"br0\">)</span>=<span class=\"nu0\">0</span> <span class=\"kw5\">then</span> <span class=\"kw4\">return</span>;<br/><span class=\"kw5\">end</span>;<br/>primep=<span class=\"nu0\">1</span>;<br/><span class=\"kw4\">return</span>;<br/><span class=\"kw4\">keep</span> <span class=\"kw3\">n</span>;<br/><span class=\"kw6\">run</span>;</pre>"}, {"lang": "Scala", "loc": 2, "block": "<pre class=\"scala highlighted_source\">  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isPrime<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>Iterator.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> takeWhile <span class=\"br0\">(</span>d <span class=\"sy0\">=&gt;</span> d <span class=\"sy0\">*</span> d <span class=\"sy0\">&lt;=</span> n<span class=\"br0\">)</span> forall <span class=\"br0\">(</span>n <span class=\"sy0\">%</span> <span class=\"sy0\">_</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Scheme", "loc": 7, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>prime? number<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span>prime? divisor<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> divisor divisor<span class=\"br0\">)</span> number<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> <span class=\"br0\">(</span><span class=\"kw1\">modulo</span> number divisor<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"sy0\">*</span>prime? <span class=\"br0\">(</span><span class=\"sy0\">+</span> divisor <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> number <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>       <span class=\"br0\">(</span><span class=\"sy0\">*</span>prime? <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Seed7", "loc": 17, "block": "<pre class=\"text highlighted_source\">const func boolean: isPrime (in integer: number) is func<br/>  result<br/>    var boolean: prime is FALSE;<br/>  local<br/>    var integer: upTo is 0;<br/>    var integer: testNum is 3;<br/>  begin<br/>    if number = 2 then<br/>      prime\u00a0:= TRUE;<br/>    elsif odd(number) and number &gt; 2 then<br/>      upTo\u00a0:= sqrt(number);<br/>      while number rem testNum &lt;&gt; 0 and testNum &lt;= upTo do<br/>        testNum +:= 2;<br/>      end while;<br/>      prime\u00a0:= testNum &gt; upTo;<br/>    end if;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 7, "block": "<pre class=\"ruby highlighted_source\">func is_prime<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  given <span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>                   <span class=\"br0\">{</span> <span class=\"kw2\">true</span>  <span class=\"br0\">}</span><br/>    <span class=\"kw1\">case</span> <span class=\"br0\">(</span>a <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1</span> <span class=\"sy0\">||</span> a.<span class=\"me1\">is_even</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw2\">false</span> <span class=\"br0\">}</span><br/>    default                    <span class=\"br0\">{</span> <span class=\"nu0\">3</span> .. <span class=\"me1\">a</span>.<span class=\"me1\">isqrt</span> <span class=\"sy0\">-&gt;</span> any <span class=\"br0\">{</span> .<span class=\"me1\">divides</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">not</span> <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Smalltalk", "loc": 10, "block": "<pre class=\"smalltalk highlighted_source\">|<span class=\"re3\"> isPrime </span>|<br/><span class=\"re6\">isPrime</span> <span class=\"sy0\">:=</span> <span class=\"br0\">[</span>:<span class=\"re5\">n</span> |<br/>    n even ifTrue: <span class=\"br0\">[</span> ^n<span class=\"sy0\">=</span><span class=\"re5\">2</span> <span class=\"br0\">]</span><br/>    ifFalse: <span class=\"br0\">[</span><br/>        <span class=\"re5\">3</span> to: <span class=\"re5\">n</span> sqrt do: <span class=\"br0\">[</span>:<span class=\"re5\">i</span> |<br/>            <span class=\"br0\">(</span><span class=\"re5\">n</span> \\\\ i <span class=\"sy0\">=</span> <span class=\"re5\">0</span><span class=\"br0\">)</span> ifTrue: <span class=\"br0\">[</span> ^false <span class=\"br0\">]</span><br/>        <span class=\"br0\">]</span>.<br/>        ^true<br/>    <span class=\"br0\">]</span><br/><span class=\"br0\">]</span></pre>"}, {"lang": "SNOBOL4", "loc": 9, "block": "<pre class=\"text highlighted_source\">define('isprime(n)i,max')\u00a0:(isprime_end)<br/>isprime isprime = n<br/>        le(n,1)\u00a0:s(freturn)<br/>        eq(n,2)\u00a0:s(return)<br/>        eq(remdr(n,2),0)\u00a0:s(freturn)<br/>        max = sqrt(n); i = 1<br/>isp1    i = le(i + 2,max) i + 2\u00a0:f(return)<br/>        eq(remdr(n,i),0)\u00a0:s(freturn)f(isp1)<br/>isprime_end</pre>"}, {"lang": "SQL", "loc": 29, "block": "<pre class=\"tsql highlighted_source\"><span class=\"kw1\">declare</span> @number <span class=\"kw1\">int</span><br/><span class=\"kw1\">set</span> @number <span class=\"sy0\">=</span> <span class=\"nu0\">514229</span> <span class=\"co1\">-- number to check</span><br/>\u00a0<br/>;<span class=\"kw1\">with</span> cte<span class=\"br0\">(</span>number<span class=\"br0\">)</span> <span class=\"kw1\">as</span> <br/><span class=\"br0\">(</span><br/> <span class=\"kw1\">select</span> <span class=\"nu0\">2</span><br/> <span class=\"kw1\">union</span> all<br/> <span class=\"kw1\">select</span> number<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/> <span class=\"kw1\">from</span> cte<br/> <span class=\"kw1\">where</span> number<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"sy0\">&lt;</span> @number<br/><span class=\"br0\">)</span><br/><span class=\"kw1\">select</span><br/>      <span class=\"kw1\">cast</span><span class=\"br0\">(</span>@number <span class=\"kw1\">as</span> <span class=\"kw1\">varchar</span><span class=\"br0\">(</span><span class=\"nu0\">100</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>      <span class=\"kw1\">case</span> <br/>          <span class=\"kw1\">when</span> exists<br/>\t\t\t\t  <span class=\"br0\">(</span><br/>\t\t\t\t\t<span class=\"kw1\">select</span> <span class=\"sy0\">*</span> <br/>\t\t\t\t\t<span class=\"kw1\">from</span> <br/>\t\t\t\t\t<span class=\"br0\">(</span><br/>\t\t\t\t\t\t<span class=\"kw1\">select</span> number, @number <span class=\"sy0\">%</span> number modNumber<br/>\t\t\t\t\t\t<span class=\"kw1\">from</span> cte<br/>\t\t\t\t\t<span class=\"br0\">)</span> tmp<br/>\t\t\t\t\t<span class=\"kw1\">where</span> tmp.<span class=\"me1\">modNumber</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <br/>\t\t\t\t  <span class=\"br0\">)</span> <br/>\t\t\t\t          <span class=\"kw1\">then</span> <span class=\"st0\">' is composite'</span><br/>\t\t  <span class=\"kw1\">else</span><br/>\t\t\t\t\t\t <span class=\"st0\">' is prime'</span><br/>\t  <span class=\"kw1\">end</span> primalityTest<br/><span class=\"kw1\">option</span> <span class=\"br0\">(</span>maxrecursion <span class=\"nu0\">0</span><span class=\"br0\">)</span></pre>"}, {"lang": "Standard ML", "loc": 10, "block": "<pre class=\"text highlighted_source\">fun is_prime n =<br/>  if n = 2 then true<br/>  else if n &lt; 2 orelse n mod 2 = 0 then false<br/>  else let<br/>    fun loop k =<br/>      if k * k &gt; n then true<br/>      else if n mod k = 0 then false<br/>      else loop (k+2)<br/>    in loop 3<br/>  end</pre>"}, {"lang": "Swift", "loc": 17, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>extension Int {<br/>  func isPrime() -&gt; Bool {<br/>\u00a0<br/>    switch self {<br/>    case let x where x &lt; 2:<br/>      return false<br/>    case 2:<br/>      return true<br/>    default:<br/>      return<br/>        self\u00a0% 2\u00a0!= 0 &amp;&amp;<br/>       \u00a0!stride(from: 3, through: Int(sqrt(Double(self))), by: 2).contains {self\u00a0% $0 == 0}<br/>    }<br/>  }<br/>}</pre>"}, {"lang": "Tcl", "loc": 9, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw1\">proc</span> is_prime n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">&lt;</span>= <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> false<span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> == <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> true<span class=\"br0\">}</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"nu0\">2</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> false<span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">3</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= sqrt<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i <span class=\"nu0\">2</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">%</span> <span class=\"re0\">$i</span> == <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> false<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> true<br/><span class=\"br0\">}</span></pre>"}, {"lang": "TI-83 BASIC", "loc": 1, "block": "<pre>Prompt A\nIf A=2:Then\nDisp \"PRIME\"\nStop\nEnd\n\nIf (fPart(A/2)=0 and A&gt;0) or A&lt;2:Then\nDisp \"NOT PRIME\"\nStop\nEnd\n\n1\u2192P\nFor(B,3,int(\u221a(A)))\nIf FPart(A/B)=0:Then\n0\u2192P\n\u221a(A)\u2192B\nEnd\nB+1\u2192B\nEnd\n\nIf P=1:Then\nDisp \"PRIME\"\nElse\nDisp \"NOT PRIME\"\nEnd\n</pre>"}, {"lang": "uBasic/4tH", "loc": 21, "block": "<pre class=\"text highlighted_source\">10 LET n=0: LET p=0<br/>20 INPUT \"Enter number: \";n<br/>30 LET p=0\u00a0: IF n&gt;1 THEN GOSUB 1000<br/>40 IF p=0 THEN PRINT n;\" is not prime!\"<br/>50 IF p#0 THEN PRINT n;\" is prime!\"<br/>60 GOTO 10<br/>1000 REM ***************<br/>1001 REM * PRIME CHECK *<br/>1002 REM ***************<br/>1010 LET p=0<br/>1020 IF (n%2)=0 THEN RETURN<br/>1030 LET p=1\u00a0: PUSH n,0\u00a0: GOSUB 9030<br/>1040 FOR i=3 TO POP() STEP 2<br/>1050 IF (n%i)=0 THEN LET p=0: PUSH n,0\u00a0: GOSUB 9030\u00a0: LET i=POP()<br/>1060 NEXT i<br/>1070 RETURN<br/>9030 Push ((10^(Pop()*2))*Pop())\u00a0: @(255)=Tos()<br/>9040 Push (@(255) + (Tos()/@(255)))/2<br/>     If Abs(@(255)-Tos())&lt;2 Then @(255)=Pop()\u00a0: If Pop() Then Push @(255)\u00a0: Return<br/>     @(255) = Pop()\u00a0: Goto 9040<br/>     REM ** This is an integer SQR subroutine. Output is scaled by 10^(TOS()).</pre>"}, {"lang": "UNIX Shell", "loc": 15, "block": "<pre class=\"bash highlighted_source\"><span class=\"kw1\">function</span> primep <span class=\"br0\">{</span><br/>\t<span class=\"kw3\">typeset</span> <span class=\"re2\">n</span>=<span class=\"re4\">$1</span> <span class=\"re2\">p</span>=<span class=\"nu0\">3</span><br/>\t<span class=\"br0\">(</span><span class=\"br0\">(</span> n == <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"kw3\">return</span> <span class=\"nu0\">0</span>\t<span class=\"co0\"># 2 is prime.</span><br/>\t<span class=\"br0\">(</span><span class=\"br0\">(</span> n <span class=\"sy0\">&amp;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw3\">return</span> <span class=\"nu0\">1</span>\t\t<span class=\"co0\"># Other evens are not prime.</span><br/>\t<span class=\"br0\">(</span><span class=\"br0\">(</span> n <span class=\"sy0\">&gt;</span>= <span class=\"nu0\">3</span> <span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw3\">return</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>\t<span class=\"co0\"># Loop for odd p from 3 to sqrt(n).</span><br/>\t<span class=\"co0\"># Comparing p * p &lt;= n can overflow.</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span> p <span class=\"sy0\">&lt;</span>= n <span class=\"sy0\">/</span> p <span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"kw1\">do</span><br/>\t\t<span class=\"co0\"># If p divides n, then n is not prime.</span><br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span> n <span class=\"sy0\">%</span> p <span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw3\">return</span> <span class=\"nu0\">1</span><br/>\t\t<span class=\"br0\">(</span><span class=\"br0\">(</span> p += <span class=\"nu0\">2</span> <span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">done</span><br/>\t<span class=\"kw3\">return</span> <span class=\"nu0\">0</span>\t<span class=\"co0\"># Yes, n is prime.</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Ursala", "loc": 4, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>\u00a0<br/>prime = ~&lt;{0,1}&amp;&amp; -={2,3}!| ~&amp;h&amp;&amp; (all remainder)^Dtt/~&amp; <a class=\"__cf_email__\" data-cfemail=\"6c0503180d2c275f5d\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a></pre>"}, {"lang": "V", "loc": 6, "block": "<pre class=\"text highlighted_source\">[prime?<br/>     2<br/>     [[dup * &gt;] [true] [false] ifte [% 0 &gt;] dip and]<br/>       [succ]<br/>     while<br/>     dup * &lt;].</pre>"}, {"lang": "VBA", "loc": 27, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Option</span> <span class=\"kw2\">Explicit</span><br/>\u00a0<br/><span class=\"kw2\">Sub</span> FirstTwentyPrimes()<br/><span class=\"kw4\">Dim</span> count <span class=\"kw4\">As</span> <span class=\"kw1\">Integer</span>, i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>, t(19) <span class=\"kw4\">As</span> <span class=\"kw1\">String</span><br/>   <span class=\"kw3\">Do</span><br/>      i = i + 1<br/>      <span class=\"kw3\">If</span> IsPrime(i) <span class=\"kw3\">Then</span><br/>         t(count) = i<br/>         count = count + 1<br/>      <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>   <span class=\"kw3\">Loop</span> <span class=\"kw3\">While</span> count &lt;= <span class=\"kw4\">UBound</span>(t)<br/>   Debug.<span class=\"kw4\">Print</span> Join(t, <span class=\"st0\">\", \"</span>)<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Sub</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> IsPrime(Nb <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span>) <span class=\"kw4\">As</span> <span class=\"kw1\">Boolean</span><br/>   <span class=\"kw3\">If</span> Nb = 2 <span class=\"kw3\">Then</span><br/>      IsPrime = <span class=\"kw5\">True</span><br/>   <span class=\"kw3\">ElseIf</span> Nb &lt; 2 <span class=\"kw3\">Or</span> Nb <span class=\"kw4\">Mod</span> 2 = 0 <span class=\"kw3\">Then</span><br/>      <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>   <span class=\"kw3\">Else</span><br/>      <span class=\"kw4\">Dim</span> i <span class=\"kw4\">As</span> <span class=\"kw1\">Long</span><br/>      <span class=\"kw3\">For</span> i = 3 <span class=\"kw3\">To</span> Sqr(Nb) <span class=\"kw3\">Step</span> 2<br/>         <span class=\"kw3\">If</span> Nb <span class=\"kw4\">Mod</span> i = 0 <span class=\"kw3\">Then</span> <span class=\"kw2\">Exit</span> <span class=\"kw2\">Function</span><br/>      <span class=\"kw3\">Next</span><br/>      IsPrime = <span class=\"kw5\">True</span><br/>   <span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span></pre>"}, {"lang": "VBScript", "loc": 21, "block": "<pre class=\"vb highlighted_source\"><span class=\"kw2\">Function</span> IsPrime(n)<br/>\t<span class=\"kw3\">If</span> n = 2 <span class=\"kw3\">Then</span><br/>\t\tIsPrime = <span class=\"kw5\">True</span><br/>\t<span class=\"kw3\">ElseIf</span> n &lt;= 1 <span class=\"kw3\">Or</span> n <span class=\"kw4\">Mod</span> 2 = 0 <span class=\"kw3\">Then</span><br/>\t\tIsPrime = <span class=\"kw5\">False</span><br/>\t<span class=\"kw3\">Else</span><br/>\t\tIsPrime = <span class=\"kw5\">True</span><br/>\t\t<span class=\"kw3\">For</span> i = 3 <span class=\"kw3\">To</span> Int(Sqr(n)) <span class=\"kw3\">Step</span> 2<br/>\t\t\t<span class=\"kw3\">If</span> n <span class=\"kw4\">Mod</span> i = 0 <span class=\"kw3\">Then</span><br/>\t\t\t\tIsPrime = <span class=\"kw5\">False</span><br/>\t\t\t\t<span class=\"kw2\">Exit</span> <span class=\"kw3\">For</span><br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw3\">For</span> n = 1 <span class=\"kw3\">To</span> 50<br/>\t<span class=\"kw3\">If</span> IsPrime(n) <span class=\"kw3\">Then</span><br/>\t\tWScript.StdOut.Write n &amp; <span class=\"st0\">\" \"</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">Next</span></pre>"}, {"lang": "XPL0", "loc": 16, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;  \\intrinsic 'code' declarations<br/>\u00a0<br/>func Prime(N);          \\Return 'true' if N is a prime number<br/>int  N;<br/>int  I;<br/>[if N &lt;= 1 then return false;<br/>for I:= 3 to sqrt(N) do<br/>        if rem(N/I) = 0 then return false;<br/>return true;<br/>]; \\Prime<br/>\u00a0<br/>int  Num;<br/>repeat  Num:= IntIn(0);<br/>        Text(0, if Prime(Num) then \"is \" else \"not \");<br/>        Text(0, \"prime^M^J\");<br/>until   Num = 0</pre>"}, {"lang": "zkl", "loc": 4, "block": "<pre class=\"text highlighted_source\">fcn isPrime(n){<br/>   if(n.isEven or n&lt;2) return(n==2); <br/>   (not [3..n.toFloat().sqrt().toInt(),2].filter1('wrap(m){n%m==0}))<br/>}</pre>"}]}