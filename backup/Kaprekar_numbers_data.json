{"task": "Kaprekar_numbers", "blocks": [{"lang": "360 Assembly", "loc": 95, "block": "<pre class=\"text highlighted_source\">*        Kaprekar numbers          22/03/2017<br/>KAPREKAR CSECT<br/>         USING  KAPREKAR,R13       base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    save previous context<br/>         ST     R13,4(R15)         link backward<br/>         ST     R15,8(R13)         link forward<br/>         LR     R13,R15            set addressability<br/>         LA     R10,0              n=0<br/>         LA     R6,1               i=1<br/>       DO WHILE=(C,R6,LE,=F'1000000')  do i=1 to 1000000<br/>         CVD    R6,PI                pi=i<br/>         ZAP    PS,PI                ps=pi<br/>         MP     PS,PI                ps=pi*pi<br/>         ZAP    PX,PS                ps<br/>         OI     PX+7,X'0F'           zap sign<br/>         UNPK   SW,PX                packed PL8 to zoned CL16<br/>         MVC    SS(16),SW            s=pic(ps,16)<br/>         MVI    OK,X'00'             ok=false<br/>         LA     R7,1                 j=1<br/>       DO WHILE=(C,R7,LE,=F'15')     do j=1 to 15<br/>         LA     R2,16                  16<br/>         SR     R2,R7                  -j<br/>         ST     R2,LL                  l=16-j<br/>         LA     R2,S1                  @s1<br/>         LA     R3,20                  20<br/>         LA     R4,SS                  @s<br/>         LR     R5,R7                  j<br/>         ICM    R5,B'1000',=C' '       pad<br/>         MVCL   R2,R4                  s1=substr(s,1,j)        <br/>         LA     R2,S2                  @s2<br/>         LA     R3,20                  20<br/>         LA     R4,SS                  @s<br/>         AR     R4,R7                  +j<br/>         L      R5,LL                  l<br/>         ICM    R5,B'1000',=C' '       pad<br/>         MVCL   R2,R4                  s2=substr(s,j+1,l)<br/>         MVC    ZZ,=20C'0'             zw=(20)'0'<br/>         LA     R2,S1                  @s1<br/>         LR     R3,R7                  j<br/>         LA     R4,ZZ                  @zz<br/>         LR     R5,R7                  j<br/>         CLCL   R2,R4                  if substr(s1,1,j)=substr(zz,1,j)<br/>         BE     ITERJ                  then iterate j<br/>         LA     R2,S2                  @s2<br/>         L      R3,LL                  l<br/>         LA     R4,ZZ                  @zz<br/>         L      R5,LL                  l<br/>         CLCL   R2,R4                  if substr(s2,1,l)=substr(zz,1,l)<br/>         BE     EXITJ                  then leave j<br/>         XDECI  R2,S1                  unedit s1<br/>         ST     R2,M1                  m1=s1<br/>         XDECI  R2,S2                  unedit s2<br/>         ST     R2,M2                  m2=s2<br/>         L      R2,M1                  m1<br/>         A      R2,M2                  +m2<br/>         ST     R2,MM                  m=m1+m2<br/>       IF C,R6,EQ,MM THEN              if i=m then<br/>         MVI    OK,X'01'                 ok=true<br/>         B      EXITJ                    leave j<br/>       ENDIF    ,                      end if<br/>ITERJ    LA     R7,1(R7)               j++<br/>       ENDDO    ,                    enddo j<br/>EXITJ    EQU    *                    exitj:<br/>       IF CLI,OK,EQ,X'01',OR,C,R6,EQ,=F'1' THEN  if ok or i=1 then<br/>         LA     R10,1(R10)               n=n+1<br/>         XDECO  R10,PG                   edit n<br/>         XDECO  R6,PG+12                 edit i<br/>         XPRNT  PG,L'PG                  print buffer<br/>       ENDIF    ,                      end if<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         L      R13,4(0,R13)       restore previous savearea pointer<br/>         LM     R14,R12,12(R13)    restore previous context<br/>         XR     R15,R15            rc=0<br/>         BR     R14                exit<br/>OK       DS     X                  ok logical<br/>LL       DS     F                  l  binary<br/>MM       DS     F                  m  \"<br/>M1       DS     F                  m1 \"<br/>M2       DS     F                  m2 \"<br/>         DS     0D                 -- alignment for cvd<br/>PI       DS     PL8                pi fixed decimal(15)<br/>PM       DS     PL8                pm \"<br/>PS       DS     PL8                ps \"<br/>PX       DS     PL8                px \"<br/>SS       DC     CL20' '            s  character(20)<br/>S1       DS     CL20               s1 \"<br/>S2       DS     CL20               s2 \"<br/>ZZ       DS     CL20               z  \"<br/>SW       DS     CL16               sw character(16)<br/>PG       DC     CL80' '            buffer<br/>         YREGS<br/>         END    KAPREKAR</pre>"}, {"lang": "Ada", "loc": 131, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Kaprekar2 <span class=\"kw1\">is</span><br/>   <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Strings</span>.<span class=\"me1\">Fixed</span>;<br/>\u00a0<br/>   To_Digit\u00a0: <span class=\"kw3\">constant</span> String\u00a0:= <span class=\"st0\">\"0123456789abcdefghijklmnopqrstuvwxyz\"</span>;<br/>\u00a0<br/>   <span class=\"kw3\">type</span> Int <span class=\"kw1\">is</span> <span class=\"kw2\">mod</span> <span class=\"nu0\">2</span> ** <span class=\"nu0\">64</span>;<br/>   <span class=\"kw3\">subtype</span> Base_Number <span class=\"kw1\">is</span> Int <span class=\"kw3\">range</span> <span class=\"nu0\">2</span> .. <span class=\"nu0\">36</span>;<br/>\u00a0<br/>   From_Digit\u00a0: <span class=\"kw3\">constant</span> <span class=\"kw3\">array</span> <span class=\"br0\">(</span>Character<span class=\"br0\">)</span> <span class=\"kw3\">of</span> Int\u00a0:=<br/>     <span class=\"br0\">(</span>'<span class=\"nu0\">0</span>'    =&gt; <span class=\"nu0\">0</span>,<br/>      '<span class=\"nu0\">1</span>'    =&gt; <span class=\"nu0\">1</span>,<br/>      '<span class=\"nu0\">2</span>'    =&gt; <span class=\"nu0\">2</span>,<br/>      '<span class=\"nu0\">3</span>'    =&gt; <span class=\"nu0\">3</span>,<br/>      '<span class=\"nu0\">4</span>'    =&gt; <span class=\"nu0\">4</span>,<br/>      '<span class=\"nu0\">5</span>'    =&gt; <span class=\"nu0\">5</span>,<br/>      '<span class=\"nu0\">6</span>'    =&gt; <span class=\"nu0\">6</span>,<br/>      '<span class=\"nu0\">7</span>'    =&gt; <span class=\"nu0\">7</span>,<br/>      '<span class=\"nu0\">8</span>'    =&gt; <span class=\"nu0\">8</span>,<br/>      '<span class=\"nu0\">9</span>'    =&gt; <span class=\"nu0\">9</span>,<br/>      'a'    =&gt; <span class=\"nu0\">10</span>,<br/>      'b'    =&gt; <span class=\"nu0\">11</span>,<br/>      'c'    =&gt; <span class=\"nu0\">12</span>,<br/>      'd'    =&gt; <span class=\"nu0\">13</span>,<br/>      'e'    =&gt; <span class=\"nu0\">14</span>,<br/>      'f'    =&gt; <span class=\"nu0\">15</span>,<br/>      'g'    =&gt; <span class=\"nu0\">16</span>,<br/>      'h'    =&gt; <span class=\"nu0\">17</span>,<br/>      'i'    =&gt; <span class=\"nu0\">18</span>,<br/>      'j'    =&gt; <span class=\"nu0\">19</span>,<br/>      'k'    =&gt; <span class=\"nu0\">20</span>,<br/>      'l'    =&gt; <span class=\"nu0\">21</span>,<br/>      'm'    =&gt; <span class=\"nu0\">22</span>,<br/>      'n'    =&gt; <span class=\"nu0\">23</span>,<br/>      'o'    =&gt; <span class=\"nu0\">24</span>,<br/>      'p'    =&gt; <span class=\"nu0\">25</span>,<br/>      'q'    =&gt; <span class=\"nu0\">26</span>,<br/>      'r'    =&gt; <span class=\"nu0\">27</span>,<br/>      's'    =&gt; <span class=\"nu0\">28</span>,<br/>      't'    =&gt; <span class=\"nu0\">29</span>,<br/>      'u'    =&gt; <span class=\"nu0\">30</span>,<br/>      'v'    =&gt; <span class=\"nu0\">31</span>,<br/>      'w'    =&gt; <span class=\"nu0\">32</span>,<br/>      'x'    =&gt; <span class=\"nu0\">33</span>,<br/>      'y'    =&gt; <span class=\"nu0\">34</span>,<br/>      'z'    =&gt; <span class=\"nu0\">35</span>,<br/>      <span class=\"kw3\">others</span> =&gt; <span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> To_String <span class=\"br0\">(</span>Item\u00a0: Int; Base\u00a0: Base_Number\u00a0:= <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> String <span class=\"kw1\">is</span><br/>      Value      \u00a0: Int\u00a0:= Item;<br/>      Digit_Index\u00a0: Natural;<br/>      Result     \u00a0: String <span class=\"br0\">(</span><span class=\"nu0\">1</span> .. <span class=\"nu0\">64</span><span class=\"br0\">)</span>;<br/>      First      \u00a0: Natural\u00a0:= Result'Last;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">while</span> Value &gt; <span class=\"nu0\">0</span> <span class=\"kw1\">loop</span><br/>         Digit_Index\u00a0:= Natural <span class=\"br0\">(</span>Value <span class=\"kw2\">mod</span> Base<span class=\"br0\">)</span>;<br/>         Result <span class=\"br0\">(</span>First<span class=\"br0\">)</span>\u00a0:= To_Digit <span class=\"br0\">(</span>Digit_Index + <span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>         Value\u00a0:= Value / Base;<br/>         First\u00a0:= First - <span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Result <span class=\"br0\">(</span>First + <span class=\"nu0\">1</span> .. <span class=\"me1\">Result</span>'Last<span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> To_String;<br/>\u00a0<br/>   <span class=\"kw3\">procedure</span> Get <span class=\"br0\">(</span>From\u00a0: String; Item\u00a0: <span class=\"kw3\">out</span> Int; Base\u00a0: Base_Number\u00a0:= <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">is</span><br/>   <span class=\"kw1\">begin</span><br/>      Item\u00a0:= <span class=\"nu0\">0</span>;<br/>      <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> From'<span class=\"kw3\">Range</span> <span class=\"kw1\">loop</span><br/>         Item\u00a0:= Item * Base;<br/>         Item\u00a0:= Item + From_Digit <span class=\"br0\">(</span>From <span class=\"br0\">(</span>I<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   <span class=\"kw1\">end</span> Get;<br/>\u00a0<br/>   <span class=\"kw3\">function</span> Is_Kaprekar <span class=\"br0\">(</span>N\u00a0: Int; Base\u00a0: Base_Number\u00a0:= <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> Boolean <span class=\"kw1\">is</span><br/>      Square\u00a0: Int;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">if</span> N = <span class=\"nu0\">1</span> <span class=\"kw1\">then</span><br/>         <span class=\"kw1\">return</span> True;<br/>      <span class=\"kw1\">else</span><br/>         Square\u00a0:= N ** <span class=\"nu0\">2</span>;<br/>         <span class=\"kw1\">declare</span><br/>            Image\u00a0: String\u00a0:= To_String <span class=\"br0\">(</span>Square, Base<span class=\"br0\">)</span>;<br/>            A, B \u00a0: Int;<br/>         <span class=\"kw1\">begin</span><br/>            <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Image'First .. <span class=\"me1\">Image</span>'Last - <span class=\"nu0\">1</span> <span class=\"kw1\">loop</span><br/>               <span class=\"kw3\">exit</span> <span class=\"kw3\">when</span> Count <span class=\"br0\">(</span>Image <span class=\"br0\">(</span>I + <span class=\"nu0\">1</span> .. <span class=\"me1\">Image</span>'Last<span class=\"br0\">)</span>, <span class=\"st0\">\"0\"</span><span class=\"br0\">)</span><br/>                 = Image'Last - I;<br/>               Get <span class=\"br0\">(</span>From =&gt; Image <span class=\"br0\">(</span>Image'First .. <span class=\"me1\">I</span><span class=\"br0\">)</span>,<br/>                    Item =&gt; A,<br/>                    Base =&gt; Base<span class=\"br0\">)</span>;<br/>               Get <span class=\"br0\">(</span>From =&gt; Image <span class=\"br0\">(</span>I + <span class=\"nu0\">1</span> .. <span class=\"me1\">Image</span>'Last<span class=\"br0\">)</span>,<br/>                    Item =&gt; B,<br/>                    Base =&gt; Base<span class=\"br0\">)</span>;<br/>               <span class=\"kw1\">if</span> A + B = N <span class=\"kw1\">then</span><br/>                  <span class=\"kw1\">return</span> True;<br/>               <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>         <span class=\"kw1\">end</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">return</span> False;<br/>   <span class=\"kw1\">end</span> Is_Kaprekar;<br/>\u00a0<br/>   Count\u00a0: Natural\u00a0:= <span class=\"nu0\">0</span>;<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Int <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">10</span>_000 <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">if</span> Is_Kaprekar <span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         Count\u00a0:= Count + <span class=\"nu0\">1</span>;<br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>To_String <span class=\"br0\">(</span>I<span class=\"br0\">)</span> &amp; <span class=\"st0\">\",\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\" Total:\"</span> &amp; Integer'Image <span class=\"br0\">(</span>Count<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Int <span class=\"kw3\">range</span> <span class=\"nu0\">10</span>_001 .. <span class=\"nu0\">1</span>_000_000 <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">if</span> Is_Kaprekar <span class=\"br0\">(</span>I<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         Count\u00a0:= Count + <span class=\"nu0\">1</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"Kaprekar Numbers below 1000000:\"</span> &amp;<br/>                         Integer'Image <span class=\"br0\">(</span>Count<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>   Count\u00a0:= <span class=\"nu0\">0</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\"Kaprekar Numbers below 1000000 in base 17:\"</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> Int <span class=\"kw3\">range</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">17</span> ** <span class=\"nu0\">6</span> <span class=\"kw1\">loop</span><br/>      <span class=\"kw1\">if</span> Is_Kaprekar <span class=\"br0\">(</span>I, <span class=\"nu0\">17</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>         Count\u00a0:= Count + <span class=\"nu0\">1</span>;<br/>         Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put</span> <span class=\"br0\">(</span>To_String <span class=\"br0\">(</span>I, <span class=\"nu0\">17</span><span class=\"br0\">)</span> &amp; <span class=\"st0\">\",\"</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>   Ada.<span class=\"me1\">Text_IO</span>.<span class=\"me1\">Put_Line</span> <span class=\"br0\">(</span><span class=\"st0\">\" Total:\"</span> &amp; Integer'Image <span class=\"br0\">(</span>Count<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Kaprekar2;</pre>"}, {"lang": "ALGOL 68", "loc": 44, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\"># find some Kaprekar numbers                              #</span><br/>\u00a0<br/><span class=\"coMULTI\"># returns TRUE if n is a Kaprekar number, FALSE otherwise #</span><br/><span class=\"kw4\">PROC</span> is kaprekar <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"kw3\">BOOL</span><span class=\"sy1\">:</span><br/>     <span class=\"kw2\">IF</span> n <span class=\"sy1\">&lt;</span> 1 <span class=\"kw2\">THEN</span><br/>         <span class=\"coMULTI\"># 0 and -ve numbers are not Kaprekar numbers     #</span><br/>         <span class=\"kw7\">FALSE</span><br/>     <span class=\"kw2\">ELIF</span> n <span class=\"sy1\">=</span> 1 <span class=\"kw2\">THEN</span><br/>         <span class=\"coMULTI\"># 1 is defined to be a Kaprekar number           #</span><br/>         <span class=\"kw7\">TRUE</span><br/>     <span class=\"kw2\">ELSE</span><br/>         <span class=\"coMULTI\"># n is a Kaprekar number if the digits of its    #</span><br/>         <span class=\"coMULTI\"># square can be partitioned into two numbers     #</span><br/>         <span class=\"coMULTI\"># that sum to n                                  #</span><br/>         <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span>  n squared     <span class=\"sy1\">=</span> <span class=\"kw8\">LENG</span> n <span class=\"sy1\">*</span> n<span class=\"sy1\">;</span><br/>         <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span>  power of ten <span class=\"sy1\">:=</span> 10<span class=\"sy1\">;</span><br/>         <span class=\"kw3\">BOOL</span> result            <span class=\"sy1\">:=</span> <span class=\"kw7\">FALSE</span><span class=\"sy1\">;</span><br/>         <span class=\"kw2\">WHILE</span> n squared <span class=\"sy1\">&gt;</span> power of ten <span class=\"kw16\">AND</span> <span class=\"kw8\">NOT</span> result <span class=\"kw2\">DO</span><br/>             <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> left  <span class=\"sy1\">=</span> n squared <span class=\"kw12\">OVER</span> power of ten<span class=\"sy1\">;</span><br/>             <span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> right <span class=\"sy1\">=</span> n squared  <span class=\"kw12\">MOD</span> power of ten<span class=\"sy1\">;</span><br/>             result <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span> left <span class=\"sy1\">+</span> right <span class=\"br0\">)</span> <span class=\"sy1\">=</span> n <span class=\"kw16\">AND</span> right <span class=\"sy1\">/=</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>             power of ten <span class=\"sy1\">*:=</span> 10<br/>         <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>         result<br/>     <span class=\"kw2\">FI</span> <span class=\"coMULTI\"># is kaprekar #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"coMULTI\"># count the number of Kaprekar numbers up to 1 000 000    #</span><br/><span class=\"coMULTI\"># printing all those below 10 000                         #</span><br/><span class=\"kw3\">INT</span> max number           <span class=\"sy1\">=</span> 1 000 000<span class=\"sy1\">;</span><br/><span class=\"kw3\">INT</span> k count             <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/><span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> 2 <span class=\"br0\">]</span><span class=\"kw4\">LONG</span> <span class=\"kw3\">INT</span> split <span class=\"sy1\">:=</span> <span class=\"br0\">(</span> 0<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"Kaprekar numbers below 10 000: \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw2\">FOR</span> n <span class=\"kw2\">TO</span> max number <span class=\"kw2\">DO</span><br/>    <span class=\"kw2\">IF</span> is kaprekar<span class=\"br0\">(</span> n <span class=\"br0\">)</span> <span class=\"kw2\">THEN</span><br/>        k count <span class=\"sy1\">+:=</span> 1<span class=\"sy1\">;</span><br/>        <span class=\"kw2\">IF</span> n <span class=\"sy1\">&lt;</span> 10 000 <span class=\"kw2\">THEN</span><br/>            <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> n<span class=\"sy1\">,</span> <span class=\"sy1\">-</span>4 <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>        <span class=\"kw2\">FI</span><br/>    <span class=\"kw2\">FI</span><br/><span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"There are \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> k count<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"st0\">\" Kaprekar numbers below \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> max number<span class=\"sy1\">,</span> 0 <span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 15, "block": "<pre class=\"autohotkey highlighted_source\">Kaprekar<span class=\"br0\">(</span>L<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span>\u00a0% L <span class=\"sy0\">+</span> <span class=\"br0\">(</span> C <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        S <span class=\"sy0\">:=</span> <span class=\"br0\">(</span> N <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a> <span class=\"br0\">)</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><br/>        <a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a>\u00a0% <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">StrLen</span></a><span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            B <span class=\"sy0\">:=</span> <span class=\"br0\">(</span> B <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>S<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span> <span class=\"br0\">)</span>\u00a0? B\u00a0: <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">If</span>\u00a0!B <span class=\"sy0\">&amp;</span> <span class=\"br0\">(</span> <span class=\"br0\">(</span>A <span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>S<span class=\"sy0\">,</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;&gt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span><br/>                <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a><br/>            <span class=\"kw1\">If</span> <span class=\"br0\">(</span> N <span class=\"sy0\">==</span> A<span class=\"sy0\">+</span>B <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                R <span class=\"sy0\">.=</span> <span class=\"st0\">\", \"</span> N <span class=\"sy0\">,</span> C<span class=\"sy0\">++</span><br/>                <a href=\"http://www.autohotkey.com/docs/commands/Break.htm\"><span class=\"kw3\">Break</span></a><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">Return</span> C <span class=\"st0\">\" Kaprekar numbers in [1-\"</span> L <span class=\"st0\">\"]:`n\"</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">SubStr</span></a><span class=\"br0\">(</span>R<span class=\"sy0\">,</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 27, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f KAPREKAR_NUMBERS.AWK</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    limit = <span class=\"nu0\">1000000</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es0\">\\n</span>\"</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    n = <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i=<span class=\"nu0\">2</span>; i<span class=\"sy2\">&lt;</span>limit; i<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      squared = <span class=\"kw4\">sprintf</span><span class=\"br0\">(</span><span class=\"st0\">\"%.0f\"</span>,i<span class=\"sy3\">*</span>i<span class=\"br0\">)</span><br/>      <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j=<span class=\"nu0\">1</span>; j<span class=\"sy2\">&lt;=</span><span class=\"kw4\">length</span><span class=\"br0\">(</span>squared<span class=\"br0\">)</span>; j<span class=\"sy3\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        L = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>squared,<span class=\"nu0\">1</span>,j<span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">0</span><br/>        R = <span class=\"kw4\">substr</span><span class=\"br0\">(</span>squared,j<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>R <span class=\"sy2\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          <span class=\"kw1\">continue</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>L <span class=\"sy3\">+</span> R <span class=\"sy2\">==</span> i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>          n<span class=\"sy3\">++</span><br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy2\">&lt;=</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d<span class=\"es0\">\\n</span>\"</span>,i<span class=\"br0\">)</span><br/>          <span class=\"br0\">}</span><br/>          <span class=\"kw1\">break</span><br/>        <span class=\"br0\">}</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%d Kaprekar numbers &lt;\u00a0%s<span class=\"es0\">\\n</span>\"</span>,n,limit<span class=\"br0\">)</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Batch File", "loc": 60, "block": "<pre class=\"dos highlighted_source\">\u00a0<br/><span class=\"sy0\">@</span><a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> off<br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /l <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>1,1,9999<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/title.html\"><span class=\"kw3\">title</span></a> Processing - <span class=\"sy0\">%%</span><span class=\"re3\">i</span><br/>  <a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:kaprekar <span class=\"sy0\">%%</span><span class=\"re3\">i</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/>pause<span class=\"sy0\">&gt;</span><a href=\"http://www.ss64.com/nt/nul.html\"><span class=\"kw4\">nul</span></a><br/><a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>\u00a0<br/>:<span class=\"re0\">kaprekar</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> num=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">num</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/leq.html\"><span class=\"kw2\">leq</span></a> 0 <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a num2=<span class=\"sy0\">%</span><span class=\"re3\">num</span><span class=\"sy0\">%</span>*<span class=\"sy0\">%</span><span class=\"re3\">num</span><span class=\"sy0\">%</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">num2</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/leq.html\"><span class=\"kw2\">leq</span></a> 9 <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">num2</span><span class=\"sy0\">%</span>==<span class=\"sy0\">%</span><span class=\"re3\">num</span><span class=\"sy0\">%</span> <span class=\"sy0\">(</span><br/>    <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">num</span><span class=\"sy0\">%</span><br/>    <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>  <span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/else.html\"><span class=\"kw1\">else</span></a> <span class=\"sy0\">(</span><br/>    <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/>  <span class=\"sy0\">)</span><br/><span class=\"sy0\">)</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/call.html\"><span class=\"kw1\">call</span></a>:strlength <span class=\"sy0\">%</span><span class=\"re3\">num2</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> len=<span class=\"sy0\">%</span><span class=\"re3\">errorlevel</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a offset=<span class=\"sy0\">%</span><span class=\"re3\">len</span><span class=\"sy0\">%</span>-1<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> tempcount=1<br/>\u00a0<br/>:<span class=\"re0\">loop</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a offset2=<span class=\"sy0\">%</span><span class=\"re3\">len</span><span class=\"sy0\">%</span>-<span class=\"sy0\">%</span><span class=\"re3\">tempcount</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> numleft=<span class=\"sy0\">!</span><span class=\"re2\">num2:~0,%<span class=\"re3\">tempcount</span>%</span><span class=\"sy0\">!</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> numright=<span class=\"sy0\">!</span><span class=\"re2\">num2:~%<span class=\"re3\">tempcount</span><span class=\"sy0\">%</span>,<span class=\"sy0\">%</span><span class=\"re3\">offset2</span>%</span><span class=\"sy0\">!</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/for.html\"><span class=\"kw1\">for</span></a> /f \"tokens=* delims=0\" <span class=\"sy0\">%%</span><span class=\"re3\">i</span> <a href=\"http://www.ss64.com/nt/in.html\"><span class=\"kw1\">in</span></a> <span class=\"sy0\">(</span>\"<span class=\"sy0\">%</span><span class=\"re3\">numright</span><span class=\"sy0\">%</span>\"<span class=\"sy0\">)</span> <a href=\"http://www.ss64.com/nt/do.html\"><span class=\"kw1\">do</span></a> <a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> \"numright=<span class=\"sy0\">%%</span><span class=\"re3\">i</span>\"<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <a href=\"http://www.ss64.com/nt/not.html\"><span class=\"kw2\">not</span></a> <a href=\"http://www.ss64.com/nt/defined.html\"><span class=\"kw2\">defined</span></a> numright <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a sum=<span class=\"sy0\">%</span><span class=\"re3\">numleft</span><span class=\"sy0\">%</span>+<span class=\"sy0\">%</span><span class=\"re3\">numright</span><span class=\"sy0\">%</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">sum</span><span class=\"sy0\">%</span>==<span class=\"sy0\">%</span><span class=\"re3\">num</span><span class=\"sy0\">%</span> <span class=\"sy0\">(</span><br/>  <a href=\"http://www.ss64.com/nt/echo.html\"><span class=\"kw3\">echo</span></a> <span class=\"sy0\">%</span><span class=\"re3\">num</span><span class=\"sy0\">%</span><br/>  <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><span class=\"sy0\">)</span><br/>\u00a0<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> <span class=\"sy0\">%</span><span class=\"re3\">tempcount</span><span class=\"sy0\">%</span>==<span class=\"sy0\">%</span><span class=\"re3\">len</span><span class=\"sy0\">%</span> <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a tempcount+=1<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> loop<br/>\u00a0<br/>:<span class=\"re0\">strlength</span><br/><a href=\"http://www.ss64.com/nt/setlocal.html\"><span class=\"kw3\">setlocal</span></a> enabledelayedexpansion<br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> str=<span class=\"sy0\">%</span><span class=\"re3\">1</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> tempcount=1<br/>:<span class=\"re0\">lengthloop</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a length=<span class=\"sy0\">%</span><span class=\"re3\">tempcount</span><span class=\"sy0\">%</span>-1<br/><a href=\"http://www.ss64.com/nt/if.html\"><span class=\"kw1\">if</span></a> \"<span class=\"sy0\">!</span><span class=\"re2\">str:~%<span class=\"re3\">tempcount</span>%,1</span><span class=\"sy0\">!</span>\"==\"\" <a href=\"http://www.ss64.com/nt/exit.html\"><span class=\"kw1\">exit</span></a> /b <span class=\"sy0\">%</span><span class=\"re3\">tempcount</span><span class=\"sy0\">%</span><br/><a href=\"http://www.ss64.com/nt/set.html\"><span class=\"kw3\">set</span></a> /a tempcount+=1<br/><a href=\"http://www.ss64.com/nt/goto.html\"><span class=\"kw1\">goto</span></a> lengthloop<br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 21, "block": "<pre class=\"text highlighted_source\">      *FLOAT 64<br/>      n% = 0<br/>      FOR i% = 1 TO 999999<br/>        IF FNkaprekar(i%) THEN<br/>          n% += 1<br/>          IF i% &lt; 100001PRINT\u00a0; n% \":\", i%<br/>        ENDIF<br/>      NEXT<br/>      PRINT \"Total Kaprekar numbers under 1,000,000 = \"; n%<br/>      END<br/>\u00a0<br/>      DEF FNkaprekar(n)<br/>      LOCAL s, t<br/>      s = n^2<br/>      t = 10^(INT(LOG(s)) + 1)<br/>      REPEAT<br/>        t /= 10<br/>        IF t&lt;=n EXIT REPEAT<br/>        IF s-n = INT(s/t)*(t-1) THEN = TRUE<br/>      UNTIL FALSE<br/>      = (n=1)</pre>"}, {"lang": "Bracmat", "loc": 18, "block": "<pre class=\"text highlighted_source\">( 0:?n<br/>&amp; 1:?count<br/>&amp; out$(!count 1)<br/>&amp;   whl<br/>  ' ( 1+!n:&lt;1000000:?n<br/>    &amp; ( @(\u00a0!n^2<br/>        \u00a0:   #?a<br/>             (\u00a0? (#&gt;0:?b)<br/>             &amp;\u00a0!a+!b:!n<br/>             &amp; 1+!count:?count<br/>             &amp; (!n:&lt;10000&amp;out$!n|)<br/>             )<br/>         )<br/>      |<br/>      )<br/>    )<br/>&amp; out$(str$(\"There are \"\u00a0!count \" kaprekar numbers less than 1000000\"))<br/>);</pre>"}, {"lang": "Brat", "loc": 27, "block": "<pre class=\"text highlighted_source\">kaprekar = { limit |<br/>  results = []<br/>\u00a0<br/>  1.to limit, { num |<br/>    true? num == 1<br/>    { results &lt;&lt; 1 }<br/>    {<br/>      sqr = (num ^ 2).to_s<br/>\u00a0<br/>      0.to (sqr.length - 1) { i |<br/>        lhs = sqr[0,i].to_i<br/>        rhs = sqr[i + 1,-1].to_i<br/>\u00a0<br/>        true? (rhs &gt; 0) &amp;&amp; { lhs + rhs == num }<br/>        { results &lt;&lt; num }<br/>      }<br/>    }<br/>  }<br/>\u00a0<br/>  results<br/>}<br/>\u00a0<br/>p \"Kaprekar numbers below 10,000:\"<br/>p kaprekar 10000<br/>\u00a0<br/>p \"Number of Kaprekar numbers below 1,000,000:\"<br/>p kaprekar(1000000).length</pre>"}, {"lang": "C", "loc": 59, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdint.h&gt;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">uint64_t</span> ulong<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> kaprekar<span class=\"br0\">(</span>ulong n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> base<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tulong nn <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<span class=\"sy0\">,</span> r<span class=\"sy0\">,</span> tens <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>nn <span class=\"sy0\">-</span> n<span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>base <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>tens <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> tens <span class=\"sy0\">*=</span> base<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> tens<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"sy0\">==</span> n<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>r <span class=\"sy0\">=</span> nn <span class=\"sy0\">%</span> tens<span class=\"br0\">)</span> <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>nn <span class=\"sy0\">/</span> tens <span class=\"sy0\">+</span> r <span class=\"sy0\">==</span> n<span class=\"br0\">)</span> <span class=\"kw1\">return</span> tens<span class=\"sy0\">;</span><br/>\t\ttens <span class=\"sy0\">*=</span> base<span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> print_num<span class=\"br0\">(</span>ulong n<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> base<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tulong q<span class=\"sy0\">,</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/div.html\"><span class=\"kw3\">div</span></a> <span class=\"sy0\">=</span> base<span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/div.html\"><span class=\"kw3\">div</span></a> <span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/div.html\"><span class=\"kw3\">div</span></a> <span class=\"sy0\">*=</span> base<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/div.html\"><span class=\"kw3\">div</span></a> <span class=\"sy0\">/=</span> base<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\tq <span class=\"sy0\">=</span> n <span class=\"sy0\">/</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/div.html\"><span class=\"kw3\">div</span></a><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>q <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span>     <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span>q <span class=\"sy0\">+</span> <span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">else</span>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/putchar.html\"><span class=\"kw3\">putchar</span></a><span class=\"br0\">(</span>q <span class=\"sy0\">+</span> <span class=\"st0\">'a'</span> <span class=\"sy0\">-</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\tn <span class=\"sy0\">-=</span> q <span class=\"sy0\">*</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/div.html\"><span class=\"kw3\">div</span></a><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tulong i<span class=\"sy0\">,</span> tens<span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> cnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw4\">int</span> base <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"base 10:<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>kaprekar<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> base<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%3d:\u00a0%llu<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">++</span>cnt<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\tbase <span class=\"sy0\">=</span> <span class=\"nu0\">17</span><span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>base\u00a0%d:<span class=\"es1\">\\n</span>  1: 1<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> cnt <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>tens <span class=\"sy0\">=</span> kaprekar<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> base<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%3d:\u00a0%llu\"</span><span class=\"sy0\">,</span> <span class=\"sy0\">++</span>cnt<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\" <span class=\"es1\">\\t</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> print_num<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  print_num<span class=\"br0\">(</span>i <span class=\"sy0\">*</span> i<span class=\"sy0\">,</span> base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>  print_num<span class=\"br0\">(</span>i <span class=\"sy0\">*</span> i <span class=\"sy0\">/</span> tens<span class=\"sy0\">,</span> base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\" + \"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> print_num<span class=\"br0\">(</span>i <span class=\"sy0\">*</span> i <span class=\"sy0\">%</span> tens<span class=\"sy0\">,</span> base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 54, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;string&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;sstream&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/><span class=\"co2\">#include &lt;iterator&gt;</span><br/><span class=\"co2\">#include &lt;utility&gt;</span><br/>\u00a0<br/><span class=\"kw4\">long</span> string2long<span class=\"br0\">(</span> <span class=\"kw4\">const</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span> <span class=\"sy3\">&amp;</span> s <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw4\">long</span> result <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">istringstream</span><span class=\"br0\">(</span> s <span class=\"br0\">)</span> <span class=\"sy1\">&gt;&gt;</span> result <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> result <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isKaprekar<span class=\"br0\">(</span> <span class=\"kw4\">long</span> number <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   <span class=\"kw4\">long</span> <span class=\"kw4\">long</span> squarenumber <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw4\">long</span> <span class=\"kw4\">long</span><span class=\"br0\">)</span>number<span class=\"br0\">)</span> <span class=\"sy2\">*</span> number <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">ostringstream</span> numberbuf <span class=\"sy4\">;</span><br/>   numberbuf <span class=\"sy1\">&lt;&lt;</span> squarenumber <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">string</span> numberstring <span class=\"sy1\">=</span> numberbuf.<span class=\"me1\">str</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> numberstring.<span class=\"me1\">length</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"me2\">string</span> firstpart <span class=\"sy1\">=</span> numberstring.<span class=\"me1\">substr</span><span class=\"br0\">(</span> <span class=\"nu0\">0</span> , i <span class=\"br0\">)</span> ,<br/>                  secondpart <span class=\"sy1\">=</span> numberstring.<span class=\"me1\">substr</span><span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>      <span class=\"co1\">//we do not accept figures ending in a sequence of zeroes</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> secondpart.<span class=\"me1\">find_first_not_of</span><span class=\"br0\">(</span> <span class=\"st0\">\"0\"</span> <span class=\"br0\">)</span> <span class=\"sy1\">==</span> std<span class=\"sy4\">::</span><span class=\"me2\">string</span><span class=\"sy4\">::</span><span class=\"me2\">npos</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t <span class=\"kw1\">return</span> <span class=\"kw2\">false</span> <span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> string2long<span class=\"br0\">(</span> firstpart <span class=\"br0\">)</span> <span class=\"sy2\">+</span> string2long<span class=\"br0\">(</span> secondpart <span class=\"br0\">)</span> <span class=\"sy1\">==</span> number <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t <span class=\"kw1\">return</span> <span class=\"kw2\">true</span> <span class=\"sy4\">;</span><br/>      <span class=\"br0\">}</span><br/>   <span class=\"br0\">}</span><br/>   <span class=\"kw1\">return</span> <span class=\"kw2\">false</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">long</span><span class=\"sy1\">&gt;</span> kaprekarnumbers <span class=\"sy4\">;</span><br/>   kaprekarnumbers.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> <span class=\"nu0\">1000001</span> <span class=\"sy4\">;</span> i<span class=\"sy2\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span> isKaprekar<span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"br0\">)</span> <br/>\t kaprekarnumbers.<span class=\"me1\">push_back</span><span class=\"br0\">(</span> i <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">long</span><span class=\"sy1\">&gt;</span><span class=\"sy4\">::</span><span class=\"me2\">const_iterator</span> svi <span class=\"sy1\">=</span> kaprekarnumbers.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Kaprekar numbers up to 10000: <span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">while</span> <span class=\"br0\">(</span> <span class=\"sy2\">*</span>svi <span class=\"sy1\">&lt;</span> <span class=\"nu0\">10000</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"sy2\">*</span>svi <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy4\">;</span><br/>      svi<span class=\"sy2\">++</span> <span class=\"sy4\">;</span><br/>   <span class=\"br0\">}</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"All the Kaprekar numbers up to 1000000\u00a0:<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"me2\">copy</span><span class=\"br0\">(</span> kaprekarnumbers.<span class=\"me1\">begin</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> , kaprekarnumbers.<span class=\"me1\">end</span><span class=\"br0\">(</span> <span class=\"br0\">)</span> ,<br/>\t std<span class=\"sy4\">::</span><span class=\"me2\">ostream_iterator</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">long</span><span class=\"sy1\">&gt;</span><span class=\"br0\">(</span> std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> , <span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"sy4\">;</span><br/>   std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"There are \"</span> <span class=\"sy1\">&lt;&lt;</span> kaprekarnumbers.<span class=\"me1\">size</span><span class=\"br0\">(</span> <span class=\"br0\">)</span><br/>      <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" Kaprekar numbers less than one million!<span class=\"es1\">\\n</span>\"</span> <span class=\"sy4\">;</span><br/>   <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C#", "loc": 63, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">using</span> <span class=\"co3\">System</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">using</span> <span class=\"co3\">System.Collections.Generic</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw4\">class</span> KaprekarNumbers <span class=\"br0\">{</span><br/>\u00a0<br/>    <span class=\"co1\">/// &lt;summary&gt;</span><br/>    <span class=\"co1\">/// The entry point of the program, where the program control starts and ends.</span><br/>    <span class=\"co1\">/// &lt;/summary&gt;</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span> <span class=\"kw4\">ulong</span> i <span class=\"kw1\">in</span> _kaprekarGenerator<span class=\"br0\">(</span><span class=\"nu0\">999999</span><span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            count<span class=\"sy0\">++;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"st0\">\"There are {0} Kaprekar numbers less than 1000000.\"</span>, count<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"co1\">/// &lt;summary&gt;</span><br/>    <span class=\"co1\">/// Generator function which generates the Kaprekar numbers.</span><br/>    <span class=\"co1\">/// &lt;/summary&gt;</span><br/>    <span class=\"co1\">/// &lt;returns&gt;The generator.&lt;/returns&gt;</span><br/>    <span class=\"co1\">/// &lt;param name=\"max\"&gt;The maximum value of the numbers generated.&lt;/param&gt;</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> IEnumerable<span class=\"sy0\">&lt;</span><span class=\"kw4\">ulong</span><span class=\"sy0\">&gt;</span> _kaprekarGenerator<span class=\"br0\">(</span><span class=\"kw4\">ulong</span> max<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>        <span class=\"kw4\">ulong</span> next <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\">// 1 is always a Kaprekar number.</span><br/>        <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> next<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span> next <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> next <span class=\"sy0\">&lt;=</span> max<span class=\"sy0\">;</span> next<span class=\"sy0\">++</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>            <span class=\"kw4\">ulong</span> square <span class=\"sy0\">=</span> next <span class=\"sy0\">*</span> next<span class=\"sy0\">;</span><br/>\u00a0<br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span> <span class=\"kw4\">ulong</span> check <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span> check <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">10000000000000000000</span><span class=\"sy0\">;</span> check <span class=\"sy0\">*=</span> <span class=\"nu0\">10</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"co1\">// Check the square against each power of 10 from 10^1 to 10^19 (highest which can be</span><br/>                <span class=\"co1\">// represented by a ulong)</span><br/>\u00a0<br/>                <span class=\"co1\">// If the power of 10 to be checked against is greater than or equal to the square, stop checking</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span> square <span class=\"sy0\">&lt;=</span> check <span class=\"br0\">)</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"co1\">// Given a power of 10 as 10^n, the remainder when dividing the square number by that power</span><br/>                <span class=\"co1\">// of 10 is equal to the last n digits of the number (starting from the right) and the</span><br/>                <span class=\"co1\">// quotient gives the remaining digits.</span><br/>                <span class=\"co1\">// If the last n digits are all zeroes, then the remainder will be zero, which is not</span><br/>                <span class=\"co1\">// accepted.</span><br/>\u00a0<br/>                <span class=\"kw4\">ulong</span> r <span class=\"sy0\">=</span> square <span class=\"sy0\">%</span> check<span class=\"sy0\">;</span><br/>                <span class=\"kw4\">ulong</span> q <span class=\"sy0\">=</span> <span class=\"br0\">(</span>square <span class=\"sy0\">-</span> r<span class=\"br0\">)</span> <span class=\"sy0\">/</span> check<span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span> r <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> q <span class=\"sy0\">+</span> r <span class=\"sy0\">==</span> next <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                    <span class=\"kw1\">yield</span> <span class=\"kw1\">return</span> next<span class=\"sy0\">;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "CoffeeScript", "loc": 29, "block": "<pre class=\"coffeescript highlighted_source\">splitAt = <span class=\"br0\">(</span>str<span class=\"sy0\">,</span> idx<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    ans = <span class=\"br0\">[</span> str.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> idx<span class=\"br0\">)</span><span class=\"sy0\">,</span> str.<span class=\"me1\">substring</span><span class=\"br0\">(</span>idx<span class=\"br0\">)</span> <span class=\"br0\">]</span><br/>    <span class=\"kw1\">if</span> ans<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> == <span class=\"st0\">\"\"</span><br/>        ans<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = <span class=\"st0\">\"0\"</span><br/>    ans<br/>\u00a0<br/>getKaprekarParts = <span class=\"br0\">(</span>longValue<span class=\"sy0\">,</span> sqrStr<span class=\"sy0\">,</span> base<span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span><br/>    <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"br0\">[</span> <span class=\"nu0\">0</span> .. <span class=\"me1\">sqrStr</span>.<span class=\"me1\">length</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"br0\">]</span><br/>        parts = splitAt<span class=\"br0\">(</span>sqrStr<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><br/>        nums = <span class=\"br0\">(</span>parseInt<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> base<span class=\"br0\">)</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> parts<span class=\"br0\">)</span><br/>\u00a0<br/>        <span class=\"co1\"># if the right part is all zeroes, then it will be forever, so break</span><br/>        <span class=\"kw1\">if</span> nums<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> == <span class=\"nu0\">0</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">null</span><br/>        <span class=\"kw1\">if</span> nums<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> nums<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> == longValue<br/>            <span class=\"kw1\">return</span> parts<br/>    <span class=\"kw4\">null</span><br/>\u00a0<br/>base = <span class=\"nu0\">10</span><br/>count = <span class=\"nu0\">0</span><br/>max = <span class=\"nu0\">1000000</span><br/><span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>..<span class=\"me1\">max</span><span class=\"br0\">]</span><br/>    i2 = i <span class=\"sy0\">*</span> i<br/>    s = i2.<span class=\"me1\">toString</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span><br/>    p = getKaprekarParts i<span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> base<br/>    <span class=\"kw1\">if</span> p<br/>        console.<span class=\"me1\">log</span> i<span class=\"sy0\">,</span> i.<span class=\"me1\">toString</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span><span class=\"sy0\">,</span> s<span class=\"sy0\">,</span> p.<span class=\"me1\">join</span> <span class=\"st0\">'+'</span><br/>        count<span class=\"sy0\">++</span><br/>console.<span class=\"me1\">log</span> <span class=\"st0\">\"#{count} Kaprekar numbers &lt; #{max} (base 10) in base #{base}\"</span></pre>"}, {"lang": "Common Lisp", "loc": 42, "block": "<pre class=\"lisp highlighted_source\"><span class=\"co1\">;; make an infinite list whose accumulated sums give all</span><br/><span class=\"co1\">;; numbers n where n mod (base - 1) == n^2 mod (base - 1)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> res-<span class=\"kw1\">list</span> <span class=\"br0\">(</span>base<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>b <span class=\"br0\">(</span>- base <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>           <span class=\"br0\">(</span><span class=\"kw1\">l</span> <span class=\"br0\">(</span>remove-if-<span class=\"kw1\">not</span><br/>\t\t    <span class=\"br0\">(</span><span class=\"kw1\">lambda</span> <span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw1\">rem</span> x b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">rem</span> <span class=\"br0\">(</span>* x x<span class=\"br0\">)</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t    <span class=\"br0\">(</span>loop for x from <span class=\"nu0\">0</span> below b collect x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t   <span class=\"br0\">(</span>ret <span class=\"br0\">(</span><span class=\"kw1\">append</span> <span class=\"kw1\">l</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t   <span class=\"br0\">(</span>cycle <span class=\"br0\">(</span><span class=\"kw1\">mapcar</span> #'- <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> ret<span class=\"br0\">)</span> ret<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> <span class=\"br0\">(</span><span class=\"kw1\">last</span> cycle<span class=\"br0\">)</span><span class=\"br0\">)</span> cycle<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> kaprekar-p <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>base <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"st0\">\"tests if n is kaprekar in base; if so, return left and right half\"</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>nn <span class=\"br0\">(</span>* n n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>tens <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"co1\">; Find a start value for base power.  nn/tens + (nn mod tens) == n</span><br/>\t<span class=\"co1\">; can't be sastified if tens &lt;= n: nn/tens = n * n / tens &gt; n</span><br/>\t<span class=\"br0\">(</span>loop while <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> tens n<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t      <span class=\"br0\">(</span><span class=\"kw1\">setf</span> tens <span class=\"br0\">(</span>* tens base<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t<span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> tens n<span class=\"br0\">)</span>  <span class=\"co1\">; n a power of base, can't be a solution except 1</span><br/>\t    <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>values T <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t    <span class=\"br0\">(</span>loop<br/>\t       <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>left <span class=\"br0\">(</span><span class=\"kw1\">truncate</span> nn tens<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>right <span class=\"br0\">(</span>mod nn tens<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t    <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;=</span> right n<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"kw1\">nil</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t  <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"br0\">(</span>+ left right<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">return</span> <span class=\"br0\">(</span>values T left right<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t    <span class=\"br0\">(</span><span class=\"kw1\">setf</span> tens <span class=\"br0\">(</span>* base tens<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> ktest <span class=\"br0\">(</span>top <span class=\"sy0\">&amp;</span>optional <span class=\"br0\">(</span>base <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span>format t <span class=\"st0\">\"   #    Value     Left    Right       Squared (base ~D)~%\"</span> base<span class=\"br0\">)</span><br/>   <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>fmt <span class=\"br0\">(</span>format <span class=\"kw1\">nil</span> <span class=\"st0\">\"~~4D ~~~D,8R ~~~D,8R ~~~D,8R ~~~D,13R~~%\"</span><br/>                      base base base base base<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span>res <span class=\"br0\">(</span>res-<span class=\"kw1\">list</span> base<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t <span class=\"br0\">(</span>n <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>   \t <span class=\"br0\">(</span>loop with cnt <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> while <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> n top<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>\t \t<span class=\"br0\">(</span><span class=\"kw1\">setf</span> n <span class=\"br0\">(</span>+ n <span class=\"br0\">(</span><span class=\"kw1\">car</span> res<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">(</span><span class=\"kw1\">setf</span> res <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> res<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t \t<span class=\"br0\">(</span>multiple-value-bind <span class=\"br0\">(</span>k <span class=\"kw1\">l</span> r<span class=\"br0\">)</span> <span class=\"br0\">(</span>kaprekar-p n base<span class=\"br0\">)</span><br/>\t\t   <span class=\"br0\">(</span><span class=\"kw1\">when</span> k <span class=\"br0\">(</span>format t fmt <span class=\"br0\">(</span>incf cnt<span class=\"br0\">)</span> n <span class=\"kw1\">l</span> r <span class=\"br0\">(</span>* n n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>ktest <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span>terpri<span class=\"br0\">)</span><br/><span class=\"br0\">(</span>ktest <span class=\"nu0\">1000000</span> <span class=\"nu0\">17</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "D", "loc": 24, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">conv</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">bool</span> isKaprekar<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">long</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"coMULTI\">/*nothrow*/</span> @<span class=\"kw4\">safe</span><br/><span class=\"kw2\">in</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">assert</span><span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"st0\">\"isKaprekar(n) is defined for n &gt; 0.\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span> <span class=\"kw2\">body</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">immutable</span> sn <span class=\"sy0\">=</span> text<span class=\"br0\">(</span>n <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">sn</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">immutable</span> a <span class=\"sy0\">=</span> sn<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">i</span><span class=\"br0\">]</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"kw4\">long</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">immutable</span> b <span class=\"sy0\">=</span> sn<span class=\"br0\">[</span>i <span class=\"sy0\">..</span> $<span class=\"br0\">]</span>.<span class=\"me1\">to</span><span class=\"sy0\">!</span><span class=\"kw4\">long</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&amp;&amp;</span> a <span class=\"sy0\">+</span> b <span class=\"sy0\">==</span> n<span class=\"br0\">)</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span>_000<span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"sy0\">!</span>isKaprekar.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/>    iota<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span>_000_000<span class=\"br0\">)</span>.<span class=\"me1\">count</span><span class=\"sy0\">!</span>isKaprekar.<span class=\"me1\">writeln</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Dart", "loc": 53, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>import 'dart:math';<br/>  void main()<br/>{<br/>\u00a0<br/>  int x1;<br/>  for(x1=1;x1&lt;1000000;x1++){<br/>  int x;<br/>  int i,y,y1,l1,z,l;<br/>  double o,o1,o2,o3;<br/>   x=pow(x1,2);<br/>  for(i=0;;i++)<br/>  {z=pow(10,i);<br/>  if(x%z==x)break;}<br/>if(i.isEven)<br/>{<br/>  y=pow(10,i/2);<br/>  l=x%y;<br/>  o=x/y;<br/>  o=o-l/y;<br/>  o3=o;<br/> for(int j=0;j&lt;4;j++)<br/> {<br/>   if(o%10==0)<br/>     o=o/10;<br/>   if(o%10!=0)<br/>     break;<br/> }<br/>  if(o+l==x1 ||o3+l==x1 )<br/>     print('$x1');<br/>\u00a0<br/>}<br/>  else<br/>\u00a0<br/>  {  y1=pow(10,i/2+0.5);<br/>  l1=x%y1;<br/>  o1=x/y1;<br/>  o1=o1-l1/y1;<br/>   o2=o1;<br/>   for(int j=0;j&lt;4;j++)<br/> {<br/>   if(o1%10==0)<br/>     o1=o1/10;<br/>   else break;<br/> }<br/>  if(o1+l1==x1 ||o2+l1==x1 )<br/>    print('$x1');<br/>  }<br/>}<br/>}<br/>\u00a0<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 44, "block": "<pre class=\"text highlighted_source\">defmodule KaprekarNumber do<br/>  def check(n), do: check(n, 10)<br/>\u00a0<br/>  def check(1,_base), do: {\"1\", \"\"}<br/>  def check(n, base) when rem(n*(n-1), (base-1))\u00a0!= 0, do: false      # casting out nine<br/>  def check(n, base) do<br/>    square = Integer.to_string(n*n, base)<br/>    check(n, base, square, 1, String.length(square)-1)<br/>  end<br/>\u00a0<br/>  defp check(_, _, _, _, 0), do: false<br/>  defp check(n, base, square, i, remainder) do<br/>    {a, b} = String.split_at(square, i)<br/>    if String.to_integer(b, base) == 0 do<br/>      false<br/>    else<br/>      sum = String.to_integer(a, base) + String.to_integer(b, base)<br/>      if n == sum, do: {a, b}, else: check(n, base, square, i+1, remainder-1)<br/>    end<br/>  end<br/>end<br/>\u00a0<br/>Enum.each(1..9_999, fn n -&gt;<br/>  if result = KaprekarNumber.check(n) do<br/>    {a, b} = result<br/>   \u00a0:io.fwrite \"~6w  ~8s  ~s + ~s~n\", [n, a&lt;&gt;b, a, b]<br/>  end<br/>end)<br/>\u00a0<br/># Extra credit<br/>count = Enum.reduce(1..999_999, 0, fn n,acc -&gt;<br/>  if KaprekarNumber.check(n), do: acc + 1, else: acc<br/>end)<br/>IO.puts \"\\n#{count} kaprekar numbers under 1,000,000\"<br/>\u00a0<br/># Extra extra credit<br/>base = 17<br/>IO.puts \"\\nbase #{base} kaprekar numbers under 1,000,000(base10)\"<br/>Enum.each(1..999_999, fn n -&gt;<br/>  if result = KaprekarNumber.check(n, base) do<br/>    {a, b} = result<br/>   \u00a0:io.fwrite \"~7w  ~5s  ~9s  ~s + ~s~n\", [n, Integer.to_string(n,base), a&lt;&gt;b, a, b]<br/>  end<br/>end)</pre>"}, {"lang": "Erlang", "loc": 29, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">mode</span><span class=\"br0\">(</span>compile<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">import</span><span class=\"br0\">(</span>lists<span class=\"sy1\">,</span> <span class=\"br0\">[</span>seq<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">kaprekar</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/><span class=\"re3\">kaprekar</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span><br/><span class=\"re3\">kaprekar</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Sq</span> <span class=\"sy3\">=</span> <span class=\"re5\">N</span><span class=\"sy3\">*</span><span class=\"re5\">N</span><span class=\"sy1\">,</span><br/>    <span class=\"kw1\">if</span><br/>        <span class=\"br0\">(</span><span class=\"re5\">N</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy3\">=/=</span> <span class=\"br0\">(</span><span class=\"re5\">Sq</span> <span class=\"kw2\">rem</span> <span class=\"nu0\">9</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span><br/>        true <span class=\"sy1\">-&gt;</span> <span class=\"re3\">kaprekar</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Sq</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">kaprekar</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"sy1\">,</span> <span class=\"re5\">Sq</span><span class=\"sy1\">,</span>  <span class=\"re5\">M</span><span class=\"br0\">)</span> <span class=\"kw1\">when</span> <span class=\"br0\">(</span><span class=\"re5\">Sq</span> <span class=\"kw2\">div</span> <span class=\"re5\">M</span><span class=\"br0\">)</span> <span class=\"sy3\">=:=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">false</span><span class=\"sy1\">;</span><br/><span class=\"re3\">kaprekar</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Sq</span><span class=\"sy1\">,</span> <span class=\"re5\">M</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">L</span> <span class=\"sy3\">=</span> <span class=\"re5\">Sq</span> <span class=\"kw2\">div</span> <span class=\"re5\">M</span><span class=\"sy1\">,</span><br/>    <span class=\"re5\">R</span> <span class=\"sy3\">=</span> <span class=\"re5\">Sq</span> <span class=\"kw2\">rem</span> <span class=\"re5\">M</span><span class=\"sy1\">,</span><br/>    <span class=\"kw1\">if</span><br/>        <span class=\"re5\">R</span> <span class=\"sy3\">=/=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">andalso</span> <span class=\"br0\">(</span><span class=\"re5\">L</span> <span class=\"sy3\">+</span> <span class=\"re5\">R</span><span class=\"br0\">)</span> <span class=\"sy3\">=:=</span> <span class=\"re5\">N</span> <span class=\"sy1\">-&gt;</span> <span class=\"me1\">true</span><span class=\"sy1\">;</span><br/>        true <span class=\"sy1\">-&gt;</span> <span class=\"re3\">kaprekar</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Sq</span><span class=\"sy1\">,</span> <span class=\"re5\">M</span> <span class=\"sy3\">*</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"re5\">_</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>    <span class=\"re5\">Numbers</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"re5\">N</span> <span class=\"sy3\">||</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">9999</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">kaprekar</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"The Kaprekar numbers &lt; 10,000 are ~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">Numbers</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\u00a0<br/>    <span class=\"re5\">CountTo1e6</span> <span class=\"sy3\">=</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"re5\">Numbers</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"kw3\">length</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re5\">N</span> <span class=\"sy3\">||</span> <span class=\"re5\">N</span> <span class=\"sy3\">&lt;-</span> <span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">10001</span><span class=\"sy1\">,</span> <span class=\"nu0\">999999</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> <span class=\"re3\">kaprekar</span><span class=\"br0\">(</span><span class=\"re5\">N</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>    <a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">format</span><span class=\"br0\">(</span><span class=\"st0\">\"There are ~p Kaprekar numbers &lt; 1,000,000\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">CountTo1e6</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Euler Math Toolbox", "loc": 18, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>&gt;function map kaprekarp (n) ...<br/>$  m=n*n;<br/>$  p=10;<br/>$  repeat<br/>$    i=floor(m/p);<br/>$    j=mod(m,p);<br/>$    if j==0 then return 0; endif;<br/>$    if i+j==n then return 1; endif;<br/>$    p=p*10;<br/>$    until p&gt;m;<br/>$  end;<br/>$  return 0;<br/>$endfunction<br/>&gt;nonzeros(kaprekarp(1:100000))<br/> [ 1  9  45  55  99  297  703  999  2223  2728  4879  5292  7272  7777<br/> 9999  17344  22222  38962  77778  82656  95121  99999 ]<br/>\u00a0</pre>"}, {"lang": "F#", "loc": 37, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>// Count digits in number<br/>let digits x =<br/>    let rec digits' p x =<br/>        if 10.**p &gt; x then p else digits' (p + 1.) x<br/>    digits' 1. x<br/>\u00a0<br/>\u00a0<br/>// Is n a Kaprekar number?<br/>let isKaprekar n =<br/>    // Reference: http://oeis.org/A006886<br/>    // Positive numbers n such that n=q+r<br/>    // And n^2=q*10^m+r,<br/>    //  for some m &gt;= 1,<br/>    //  q&gt;=0 and 0&lt;=r&lt;10^m,<br/>    //  with n\u00a0!= 10^a, a&gt;=1.<br/>    let nSquared = n * n<br/>    let a = float((digits n) - 1.)<br/>\u00a0<br/>    // Create a list of tuples from the nSquared digit splits<br/>    [1. .. float (digits nSquared)]<br/>    |&gt; List.map (fun e -&gt;<br/>        // Splits the nSquared digits into 2 parts<br/>        let x = 10.**e<br/>        let q = float(int(Math.Floor (nSquared / x)))<br/>        let r = nSquared - (q * x)<br/>        (q, r))<br/>    // Filter results based on rules<br/>    |&gt; List.exists (fun (q, r) -&gt;<br/>        q + r = n &amp;&amp;<br/>        if a &gt;= 1. then n\u00a0% 10.**a &lt;&gt; 0. else true)<br/>\u00a0<br/>\u00a0<br/>// List Kaprekar numbers from 1 to 10,000<br/>[1 .. 10000]<br/>|&gt; List.filter (float &gt;&gt; isKaprekar)<br/>\u00a0</pre>"}, {"lang": "Factor", "loc": 29, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>USING: grouping.extras kernel math math.parser math.ranges<br/>math.text.utils prettyprint sequences sequences.extras<br/>splitting\u00a0;<br/>IN: rosetta-code.kaprekar<br/>\u00a0<br/>: digits ( n -- digits )<br/>    1 digit-groups reverse\u00a0;<br/>\u00a0<br/>: digit-pairs ( digits -- seq1 seq2 )<br/>    [ tail-clump ] [ head-clump ] bi [ 1 rotate ] dip\u00a0;<br/>\u00a0<br/>: digit-pairs&gt;number-pairs ( seq1 seq2 -- seq1' seq2' )<br/>    [ [ 10 digits&gt;integer ] map but-last ] <a class=\"__cf_email__\" data-cfemail=\"f3919ab3\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0;<br/>\u00a0<br/>: remove-zeros ( seq1 seq2 -- seq1' seq2' )<br/>    [ [ 0 = ] split1-when drop ] <a class=\"__cf_email__\" data-cfemail=\"b7d5def7\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>\u00a0;<br/>\u00a0<br/>: kaprekar-pairs ( n -- seq1 seq2 )<br/>    digits digit-pairs digit-pairs&gt;number-pairs remove-zeros\u00a0;<br/>\u00a0<br/>: kaprekar? ( n --\u00a0? )<br/>    dup sq kaprekar-pairs [ + ] 2map member?\u00a0;<br/>\u00a0<br/>: main ( -- )<br/>    10000 [1,b) [ kaprekar? ] filter { 1 } prepend .\u00a0;<br/>\u00a0<br/>MAIN: main<br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 19, "block": "<pre class=\"text highlighted_source\">: square ( n - n^2)   dup *\u00a0; <br/>\u00a0<br/>\\ Return nonzero if n is a Kaprekar number for tens, where tens is a <br/>\\ nonzero power of base. <br/>: is-kaprekar? ( tens n n^2 - t)   rot /mod  over &gt;r  + =  r&gt; and\u00a0; <br/>\u00a0<br/>\\ If n is a Kaprekar number, return is the power of base for which it <br/>\\ is Kaprekar.  If n is not a Kaprekar number, return zero. <br/>: kaprekar ( +n - +n1) <br/>    dup square &gt;r <br/>    base @ swap <br/>    begin ( tens n) ( R: n^2) <br/>        over <a class=\"__cf_email__\" data-cfemail=\"a9dbe9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> &lt; while <br/>            2dup <a class=\"__cf_email__\" data-cfemail=\"8dffcd\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> is-kaprekar? if <br/>                drop  r&gt; drop  exit  then <br/>            swap  base @ *  swap <br/>    repeat <br/>    r&gt; drop  1 = and\u00a0;<br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 38, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">program</span> Karpekar_Numbers<br/>  <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">i64</span> <span class=\"sy0\">=</span> <span class=\"kw4\">selected_int_kind</span><span class=\"br0\">(</span><span class=\"nu0\">18</span><span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"kw4\">count</span> <br/>\u00a0<br/>  <span class=\"kw1\">call</span> karpekar<span class=\"br0\">(</span><span class=\"nu0\">10000</span>_i64, <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><span class=\"br0\">)</span><br/>  write<span class=\"br0\">(</span><span class=\"sy0\">*</span>,<span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">call</span> karpekar<span class=\"br0\">(</span><span class=\"nu0\">1000000</span>_i64, <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/><span class=\"kw1\">subroutine</span> karpekar<span class=\"br0\">(</span>n, printnums<span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw3\">integer</span><span class=\"br0\">(</span>i64<span class=\"br0\">)</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>  <span class=\"kw3\">logical</span>, <span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">printnums</span><br/>  <span class=\"kw3\">integer</span><span class=\"br0\">(</span>i64<span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">c</span>, i, j, n1, n2<br/>  <span class=\"kw3\">character</span><span class=\"br0\">(</span><span class=\"nu0\">19</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">str</span>, s1, s2<br/>\u00a0<br/>  c <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<br/>    write<span class=\"br0\">(</span>str, <span class=\"st0\">\"(i0)\"</span><span class=\"br0\">)</span> i<span class=\"sy0\">*</span>i<br/>    <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span>, <span class=\"kw4\">len_trim</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>      s1 <span class=\"sy0\">=</span> str<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>j<span class=\"br0\">)</span><br/>      s2 <span class=\"sy0\">=</span> str<span class=\"br0\">(</span>j<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"kw4\">len_trim</span><span class=\"br0\">(</span>str<span class=\"br0\">)</span><span class=\"br0\">)</span> <br/>      read<span class=\"br0\">(</span>s1, <span class=\"st0\">\"(i19)\"</span><span class=\"br0\">)</span> n1<br/>      read<span class=\"br0\">(</span>s2, <span class=\"st0\">\"(i19)\"</span><span class=\"br0\">)</span> n2<br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>n2 <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">cycle</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>n1 <span class=\"sy0\">+</span> n2 <span class=\"sy0\">==</span> i<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>        c <span class=\"sy0\">=</span> c <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>printnums <span class=\"kw2\">.<span class=\"me1\">eqv</span>.</span> <span class=\"kw2\">.<span class=\"me1\">true</span>.</span><span class=\"br0\">)</span> write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(i0)\"</span><span class=\"br0\">)</span> i<br/>        <span class=\"kw1\">exit</span><br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">do</span>    <br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>printnums <span class=\"kw2\">.<span class=\"me1\">eqv</span>.</span> <span class=\"kw2\">.<span class=\"me1\">false</span>.</span><span class=\"br0\">)</span> write<span class=\"br0\">(</span><span class=\"sy0\">*</span>, <span class=\"st0\">\"(i0)\"</span><span class=\"br0\">)</span> c<br/><span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "FreeBASIC", "loc": 65, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 04-12-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co1\">' define true and false for older versions</span><br/><span class=\"co2\">#Ifndef TRUE</span><br/><span class=\"co2\">#Define FALSE 0</span><br/><span class=\"co2\">#Define TRUE Not FALSE</span><br/><span class=\"co2\">#EndIf</span><br/>\u00a0<br/><span class=\"co2\">#Define max 1000000   ' maximum for number to be tested</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> kaprekar<span class=\"br0\">(</span>n <span class=\"kw1\">As</span> ULong<span class=\"br0\">)</span> <span class=\"kw1\">As</span> ULong<br/>\u00a0<br/>    <span class=\"kw1\">If</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">TRUE</span><br/>\u00a0<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong x, p1, p2<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">ULongInt</span> sq = <span class=\"kw1\">CLngInt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span> * n<br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">String</span> sq_str = <span class=\"kw1\">Str</span><span class=\"br0\">(</span>sq<span class=\"br0\">)</span><br/>    <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong l = <span class=\"kw1\">Len</span><span class=\"br0\">(</span>sq_str<span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"co1\">' decrease the lenght l for every \"0\"</span><br/>    <span class=\"co1\">' at the end of the string</span><br/>    <span class=\"kw1\">For</span> x = l -<span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Step</span> -<span class=\"nu0\">1</span><br/>        <span class=\"kw1\">If</span> sq_str<span class=\"br0\">[</span>x<span class=\"br0\">]</span> = <span class=\"kw1\">Asc</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span> <span class=\"kw1\">Then</span><br/>            l = l -<span class=\"nu0\">1</span><br/>        <span class=\"kw1\">Else</span><br/>            <span class=\"kw1\">Exit</span> <span class=\"kw1\">For</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/>    <span class=\"kw1\">For</span> x = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> l -<span class=\"nu0\">1</span><br/>        p2 = <span class=\"kw1\">Val</span><span class=\"br0\">(</span><span class=\"kw1\">Mid</span><span class=\"br0\">(</span>sq_str, x +<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> p2 &gt; n <span class=\"kw1\">Then</span><br/>            <span class=\"kw1\">Continue</span> <span class=\"kw1\">For</span><br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>        p1 = <span class=\"kw1\">Val</span><span class=\"br0\">(</span><span class=\"kw1\">Left</span><span class=\"br0\">(</span>sq_str, x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> p1 &gt; n <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">FALSE</span>  <span class=\"co1\">' p1 &gt; n leave</span><br/>        <span class=\"kw1\">If</span> <span class=\"br0\">(</span>p1 + p2<span class=\"br0\">)</span> = n <span class=\"kw1\">Then</span> <span class=\"kw1\">Return</span> <span class=\"kw1\">TRUE</span> <br/>    <span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"co1\">' ------=&lt; MAIN &gt;=------</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> ULong n, count<br/>\u00a0<br/><span class=\"kw1\">Print</span> <span class=\"st0\">\"Kaprekar numbers below 10000\"</span><br/>\u00a0<br/><span class=\"kw1\">For</span> n = <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> max -<span class=\"nu0\">1</span><br/>    <span class=\"kw1\">If</span> kaprekar<span class=\"br0\">(</span>n<span class=\"br0\">)</span> = <span class=\"kw1\">TRUE</span> <span class=\"kw1\">Then</span><br/>        count = count + <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">If</span> n &lt; <span class=\"nu0\">10000</span> <span class=\"kw1\">Then</span><br/>            <span class=\"kw1\">Print</span> count, n<br/>        <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/>    <span class=\"kw1\">End</span> <span class=\"kw1\">If</span><br/><span class=\"kw1\">Next</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> count;<span class=\"st0\">\" numbers below \"</span>; <span class=\"kw1\">Str</span><span class=\"br0\">(</span>max<span class=\"br0\">)</span>;<span class=\"st0\">\" are Kaprekar numbers\"</span><br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "GAP", "loc": 111, "block": "<pre class=\"text highlighted_source\">IsKaprekar\u00a0:= function(n)<br/>\tlocal a, b, p, q;<br/>\tif n = 1 then<br/>\t\treturn true;<br/>\tfi;<br/>\tq\u00a0:= n*n;<br/>\tp\u00a0:= 10;<br/>\twhile p &lt; q do<br/>\t\ta\u00a0:= RemInt(q, p);<br/>\t\tb\u00a0:= QuoInt(q, p);<br/>\t\tif a &gt; 0 and a + b = n then<br/>\t\t\treturn true;<br/>\t\tfi;<br/>\t\tp\u00a0:= p*10;<br/>\tod;<br/>\treturn false;<br/>end;<br/>\u00a0<br/>Filtered([1 .. 10000], IsKaprekar);<br/># [ 1, 9, 45, 55, 99, 297, 703, 999, 2223, 2728, 4879, 4950, 5050, 5292, 7272, <br/>#   7777, 9999 ]<br/>\u00a0<br/>Size(last);<br/># 17<br/>\u00a0<br/>Filtered([1 .. 1000000], IsKaprekar);<br/># [ 1, 9, 45, 55, 99, 297, 703, 999, 2223, 2728, 4879, 4950, 5050, 5292, 7272, <br/>#   7777, 9999, 17344, 22222, 38962, 77778, 82656, 95121, 99999, 142857, <br/>#   148149, 181819, 187110, 208495, 318682, 329967, 351352, 356643, 390313, <br/>#   461539, 466830, 499500, 500500, 533170, 538461, 609687, 627615, 643357, <br/>#   648648, 670033, 681318, 791505, 812890, 818181, 851851, 857143, 961038, <br/>#   994708, 999999 ]<br/>\u00a0<br/>Size(last);<br/># 54<br/>\u00a0<br/>\u00a0<br/>IsKaprekarAndHow\u00a0:= function(n, base)<br/>\tlocal a, b, p, q;<br/>\tif n = 1 then<br/>\t\treturn true;<br/>\tfi;<br/>\tq\u00a0:= n*n;<br/>\tp\u00a0:= base;<br/>\twhile p &lt; q do<br/>\t\ta\u00a0:= RemInt(q, p);<br/>\t\tb\u00a0:= QuoInt(q, p);<br/>\t\tif a &gt; 0 and a + b = n then<br/>\t\t\treturn [a, b];<br/>\t\tfi;<br/>\t\tp\u00a0:= p*base;<br/>\tod;<br/>\treturn false;<br/>end;<br/>\u00a0<br/>IntegerToBaseRep\u00a0:= function(n, base)<br/>\tlocal s, digit;<br/>\tif base &gt; 36 then<br/>\t\treturn fail;<br/>\telif n = 0 then<br/>\t\treturn \"0\";<br/>\telse<br/>\t\ts\u00a0:= \"\";<br/>\t\tdigit\u00a0:= \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";<br/>\t\twhile n &lt;&gt; 0 do<br/>\t\t\tAdd(s, digit[RemInt(n, base) + 1]);<br/>\t\t\tn\u00a0:= QuoInt(n, base);<br/>\t\tod;<br/>\t\treturn Reversed(s);<br/>\tfi;<br/>end;<br/>\u00a0<br/>PrintIfKaprekar\u00a0:= function(n, base)<br/>\tlocal v;<br/>\tv\u00a0:= IsKaprekarAndHow(n, base);<br/>\tif IsList(v) then<br/>\t\tPrint(n, \"(10) or in base \", base, \", \",<br/>\t\t\tIntegerToBaseRep(n, base), \"^2 = \",<br/>\t\t\tIntegerToBaseRep(n^2, base), \" and \",<br/>\t\t\tIntegerToBaseRep(v[2], base), \" + \",<br/>\t\t\tIntegerToBaseRep(v[1], base), \" = \",<br/>\t\t\tIntegerToBaseRep(n, base), \"\\n\");<br/>\tfi;<br/>\treturn fail;<br/>end;<br/>\u00a0<br/># In base 17...<br/>Perform([1 .. 1000000], n -&gt; PrintIfKaprekar(n, 17));<br/># 16(10) or in base 17, G^2 = F1 and F + 1 = G<br/># 64(10) or in base 17, 3D^2 = E2G and E + 2G = 3D<br/># 225(10) or in base 17, D4^2 = A52G and A5 + 2G = D4<br/># 288(10) or in base 17, GG^2 = GF01 and GF + 1 = GG<br/># 1536(10) or in base 17, 556^2 = 1B43B2 and 1B4 + 3B2 = 556<br/># 3377(10) or in base 17, BBB^2 = 8093B2 and 809 + 3B2 = BBB<br/># 4912(10) or in base 17, GGG^2 = GGF001 and GGF + 1 = GGG<br/># 7425(10) or in base 17, 18BD^2 = 24E166G and 24E + 166G = 18BD<br/># 9280(10) or in base 17, 1F1F^2 = 39B1B94 and 39B + 1B94 = 1F1F<br/># 16705(10) or in base 17, 36DB^2 = B992C42 and B99 + 2C42 = 36DB<br/># 20736(10) or in base 17, 43CD^2 = 10DE32FG and 10DE + 32FG = 43CD<br/># 30016(10) or in base 17, 61EB^2 = 23593F92 and 2359 + 3F92 = 61EB<br/># 36801(10) or in base 17, 785D^2 = 351E433G and 351E + 433G = 785D<br/># 37440(10) or in base 17, 7A96^2 = 37144382 and 3714 + 4382 = 7A96<br/># 46081(10) or in base 17, 967B^2 = 52G94382 and 52G9 + 4382 = 967B<br/># 46720(10) or in base 17, 98B4^2 = 5575433G and 5575 + 433G = 98B4<br/># 53505(10) or in base 17, AF26^2 = 6GA43F92 and 6GA4 + 3F92 = AF26<br/># 62785(10) or in base 17, CD44^2 = 9A5532FG and 9A55 + 32FG = CD44<br/># 66816(10) or in base 17, DA36^2 = AEG42C42 and AEG4 + 2C42 = DA36<br/># 74241(10) or in base 17, F1F2^2 = D75F1B94 and D75F + 1B94 = F1F2<br/># 76096(10) or in base 17, F854^2 = E1F5166G and E1F5 + 166G = F854<br/># 83520(10) or in base 17, GGGG^2 = GGGF0001 and GGGF + 1 = GGGG<br/># 266224(10) or in base 17, 33334^2 = A2C52A07G and A2C5 + 2A07G = 33334</pre>"}, {"lang": "Go", "loc": 74, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strconv\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> kaprekar<span class=\"sy1\">(</span>n <span class=\"kw4\">uint64</span><span class=\"sy1\">,</span> base <span class=\"kw4\">uint64</span><span class=\"sy1\">)</span> <span class=\"sy1\">(</span><span class=\"kw4\">bool</span><span class=\"sy1\">,</span> <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    order <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy3\">==</span> <span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    nn<span class=\"sy1\">,</span> power <span class=\"sy2\">:=</span> n<span class=\"sy3\">*</span>n<span class=\"sy1\">,</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> power &lt;<span class=\"sy2\">=</span> nn <span class=\"sy1\">{</span><br/>        power <span class=\"sy2\">*=</span> base<br/>        order<span class=\"sy2\">++</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    power <span class=\"sy2\">/=</span> base<br/>    order<span class=\"sy2\">--</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy1\">;</span> power &gt; <span class=\"nu0\">1</span><span class=\"sy1\">;</span> power <span class=\"sy2\">/=</span> base <span class=\"sy1\">{</span><br/>        q<span class=\"sy1\">,</span> r <span class=\"sy2\">:=</span> nn<span class=\"sy3\">/</span>power<span class=\"sy1\">,</span> nn<span class=\"sy3\">%</span>power<br/>        <span class=\"kw1\">if</span> q &gt;<span class=\"sy2\">=</span> n <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/>        <span class=\"sy1\">}</span><br/>\u00a0<br/>        <span class=\"kw1\">if</span> q<span class=\"sy3\">+</span>r <span class=\"sy3\">==</span> n <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><span class=\"sy1\">,</span> order<br/>        <span class=\"sy1\">}</span><br/>\u00a0<br/>        order<span class=\"sy2\">--</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    max <span class=\"sy2\">:=</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span><span class=\"nu0\">10000</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"Kaprekar numbers &lt;\u00a0%d:<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> max<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> m <span class=\"sy2\">:=</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">);</span> m &lt; max<span class=\"sy1\">;</span> m<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> is<span class=\"sy1\">,</span> _ <span class=\"sy2\">:=</span> kaprekar<span class=\"sy1\">(</span>m<span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">);</span> is <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"  \"</span><span class=\"sy1\">,</span> m<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>\u00a0<br/>    <span class=\"co1\">// extra credit</span><br/>    max <span class=\"sy2\">=</span> <span class=\"nu1\">1e6</span><br/>    <span class=\"kw1\">var</span> count <span class=\"kw4\">int</span><br/>    <span class=\"kw1\">for</span> m <span class=\"sy2\">:=</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span><span class=\"nu0\">0</span><span class=\"sy1\">);</span> m &lt; max<span class=\"sy1\">;</span> m<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> is<span class=\"sy1\">,</span> _ <span class=\"sy2\">:=</span> kaprekar<span class=\"sy1\">(</span>m<span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"sy1\">);</span> is <span class=\"sy1\">{</span><br/>            count<span class=\"sy2\">++</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>There are\u00a0%d Kaprekar numbers &lt;\u00a0%d.<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> count<span class=\"sy1\">,</span> max<span class=\"sy1\">)</span><br/>\u00a0<br/>    <span class=\"co1\">// extra extra credit</span><br/>    <span class=\"kw1\">const</span> base <span class=\"sy2\">=</span> <span class=\"nu0\">17</span><br/>    maxB <span class=\"sy2\">:=</span> <span class=\"st0\">\"1000000\"</span><br/>    fmt<span class=\"sy3\">.</span><span class=\"me1\">Printf</span><span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Kaprekar numbers between 1 and\u00a0%s(base\u00a0%d):<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> maxB<span class=\"sy1\">,</span> base<span class=\"sy1\">)</span><br/>    max<span class=\"sy1\">,</span> _ <span class=\"sy2\">=</span> strconv<span class=\"sy3\">.</span>ParseUint<span class=\"sy1\">(</span>maxB<span class=\"sy1\">,</span> base<span class=\"sy1\">,</span> <span class=\"nu0\">64</span><span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span> Base 10  Base\u00a0%d        Square       Split<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> base<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> m <span class=\"sy2\">:=</span> <span class=\"kw4\">uint64</span><span class=\"sy1\">(</span><span class=\"nu0\">2</span><span class=\"sy1\">);</span> m &lt; max<span class=\"sy1\">;</span> m<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        is<span class=\"sy1\">,</span> pos <span class=\"sy2\">:=</span> kaprekar<span class=\"sy1\">(</span>m<span class=\"sy1\">,</span> base<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"sy3\">!</span>is <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"sy1\">}</span><br/>        sq <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>FormatUint<span class=\"sy1\">(</span>m<span class=\"sy3\">*</span>m<span class=\"sy1\">,</span> base<span class=\"sy1\">)</span><br/>        str <span class=\"sy2\">:=</span> strconv<span class=\"sy3\">.</span>FormatUint<span class=\"sy1\">(</span>m<span class=\"sy1\">,</span> base<span class=\"sy1\">)</span><br/>        split <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>sq<span class=\"sy1\">)</span><span class=\"sy3\">-</span>pos<br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%8d \u00a0%7s \u00a0%12s \u00a0%6s +\u00a0%s<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> m<span class=\"sy1\">,</span><br/>            str<span class=\"sy1\">,</span> sq<span class=\"sy1\">,</span> sq<span class=\"sy1\">[:</span>split<span class=\"sy1\">],</span> sq<span class=\"sy1\">[</span>split<span class=\"sy1\">:])</span> <span class=\"co1\">// optional extra extra credit</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 42, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Printf <span class=\"br0\">(</span>printf<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe\"><span class=\"kw4\">Maybe</span></a> <span class=\"br0\">(</span>mapMaybe<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Numeric.html\"><span class=\"kw2\">Numeric</span></a> <span class=\"br0\">(</span>showIntAtBase<span class=\"br0\">)</span><br/>\u00a0<br/>kaprekars <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>kaprekars base top <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0: mapMaybe kap <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter\"><span class=\"kw3\">filter</span></a> res <span class=\"br0\">[</span><span class=\"nu0\">2</span> <span class=\"sy0\">..</span> top<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    res x <span class=\"sy0\">=</span> x <span class=\"sy0\">*</span> <span class=\"br0\">(</span>x <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod\"><span class=\"kw3\">mod</span></a>` <span class=\"br0\">(</span>base <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>    kap n <span class=\"sy0\">=</span><br/>      getSplit <span class=\"sy0\">$</span><br/>      takeWhile <span class=\"br0\">(</span><span class=\"sy0\">&lt;=</span> nn<span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:dropWhile\"><span class=\"kw3\">dropWhile</span></a> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> n<span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:toInteger\"><span class=\"kw3\">toInteger</span></a> base<span class=\"br0\">)</span> <span class=\"nu0\">1</span><br/>      <span class=\"kw1\">where</span><br/>        nn <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<br/>        getSplit <span class=\"br0\">[</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> Nothing<br/>        getSplit <span class=\"br0\">(</span>p:ps<span class=\"br0\">)</span><br/>          <span class=\"sy0\">|</span> p <span class=\"sy0\">==</span> n <span class=\"sy0\">=</span> Nothing<br/>          <span class=\"sy0\">|</span> q <span class=\"sy0\">+</span> r <span class=\"sy0\">==</span> n <span class=\"sy0\">=</span> Just <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> q<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><br/>          <span class=\"sy0\">|</span> r <span class=\"sy0\">&gt;</span> n <span class=\"sy0\">=</span> Nothing<br/>          <span class=\"sy0\">|</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:otherwise\"><span class=\"kw3\">otherwise</span></a> <span class=\"sy0\">=</span> getSplit ps<br/>          <span class=\"kw1\">where</span><br/>            <span class=\"br0\">(</span>q<span class=\"sy0\">,</span> r<span class=\"br0\">)</span> <span class=\"sy0\">=</span> nn `<a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:divMod\"><span class=\"kw3\">divMod</span></a>` p<br/>\u00a0<br/>heading <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>heading <span class=\"sy0\">=</span> printf <span class=\"br0\">(</span>h <span class=\"sy0\">++</span> d<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    h <span class=\"sy0\">=</span> <span class=\"st0\">\" #    Value (base 10)         Sum (base\u00a0%d)             Square<span class=\"es0\">\\n</span>\"</span><br/>    d <span class=\"sy0\">=</span> <span class=\"st0\">\" -    ---------------         -------------             ------\"</span><br/>\u00a0<br/>printKap <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"sy0\">,</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Integer\"><span class=\"kw4\">Integer</span></a><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a><br/>printKap b <span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> l<span class=\"sy0\">,</span> r<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>  printf <span class=\"st0\">\"%2d\u00a0%13s\u00a0%26s\u00a0%16s\"</span> i <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> n<span class=\"br0\">)</span> ss <span class=\"br0\">(</span>base b <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    ss <span class=\"sy0\">=</span> base b n <span class=\"sy0\">++</span> <span class=\"st0\">\" = \"</span> <span class=\"sy0\">++</span> base b l <span class=\"sy0\">++</span> <span class=\"st0\">\" + \"</span> <span class=\"sy0\">++</span> base b r<br/>    base b n <span class=\"sy0\">=</span> showIntAtBase b <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"st0\">\"0123456789\"</span> <span class=\"sy0\">++</span> <span class=\"br0\">[</span><span class=\"st0\">'a'</span> <span class=\"sy0\">..</span> <span class=\"st0\">'z'</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">!!</span><span class=\"br0\">)</span> n <span class=\"st0\">\"\"</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> heading <span class=\"nu0\">10</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> printKap <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>kaprekars <span class=\"nu0\">10</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> heading <span class=\"nu0\">17</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> printKap <span class=\"nu0\">17</span><span class=\"br0\">)</span> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip\"><span class=\"kw3\">zip</span></a> <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span><span class=\"br0\">]</span> <span class=\"br0\">(</span>kaprekars <span class=\"nu0\">17</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 11, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">procedure</span> is_kaprekar<span class=\"br0\">(</span>n<span class=\"br0\">)</span>  <span class=\"co1\">#: return n if n is a kaprekar number</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span> n <span class=\"sy1\">=</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"sy1\">|</span><br/>   <span class=\"br0\">(</span> n<span class=\"sy1\">^</span><span class=\"nu0\">2</span> <span class=\"sy1\">?</span> <span class=\"br0\">(</span> n <span class=\"sy1\">=</span> <span class=\"kw4\">move</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy1\">*&amp;</span>subject<span class=\"sy1\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy1\">~=</span> <span class=\"kw4\">tab</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy1\">|</span> <span class=\"kw1\">fail</span> <span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>   <span class=\"kw1\">return</span> n <br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">every</span> <span class=\"kw4\">write</span><span class=\"br0\">(</span>is_kaprekar<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"br0\">)</span>                        <span class=\"co1\"># primary goal</span><br/><span class=\"kw1\">every</span> <span class=\"br0\">(</span>count <span class=\"sy1\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">,</span> is_kaprekar<span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">999999</span><span class=\"br0\">)</span><span class=\"sy1\">,</span> count <span class=\"sy1\">+:=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span>   <span class=\"co1\"># stretch goal</span><br/><span class=\"kw4\">write</span> <span class=\"br0\">(</span><span class=\"st0\">\"Number of Kaprekar numbers less than 1000000 is \"</span><span class=\"sy1\">,</span> count<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 2, "block": "<pre class=\"j highlighted_source\">kapbase=: <span class=\"nu0\">0</span>,. [ ^ <span class=\"nu0\">1</span> + [: i. <span class=\"nu0\">1</span> + [ &lt;<a class=\"__cf_email__\" data-cfemail=\"a688e6\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>^.  &gt;.&amp;<span class=\"nu0\">1</span><br/>isKap=: <span class=\"nu0\">1</span> e. ] <span class=\"sy0\">((</span><span class=\"nu0\">0</span> &lt; {:\"<span class=\"nu0\">1</span>@]<span class=\"sy0\">)</span> *. [ = +/\"<span class=\"nu0\">1</span>@]<span class=\"sy0\">)</span> kapbase #: *:@]</pre>"}, {"lang": "Java", "loc": 31, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Kaprekar <span class=\"br0\">{</span><br/>    <span class=\"kw1\">private</span> <span class=\"kw1\">static</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> splitAt<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> str, <span class=\"kw4\">int</span> idx<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> ans <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        ans<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> str.<span class=\"me1\">substring</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>, idx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span><span class=\"br0\">(</span>ans<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">equals</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> ans<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span><span class=\"sy0\">;</span> <span class=\"co1\">//parsing \"\" throws an exception</span><br/>        ans<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> str.<span class=\"me1\">substring</span><span class=\"br0\">(</span>idx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> ans<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span> base <span class=\"sy0\">=</span> <span class=\"br0\">(</span>args.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>.<span class=\"me1\">parseInt</span><span class=\"br0\">(</span>args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">long</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1000000</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> sqrStr <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>i <span class=\"sy0\">*</span> i, base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> sqrStr.<span class=\"me1\">length</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> parts <span class=\"sy0\">=</span> splitAt<span class=\"br0\">(</span>sqrStr, j<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">long</span> firstNum <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>.<span class=\"me1\">parseLong</span><span class=\"br0\">(</span>parts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw4\">long</span> secNum <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>.<span class=\"me1\">parseLong</span><span class=\"br0\">(</span>parts<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"co1\">//if the right part is all zeroes, then it will be forever, so break</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span>secNum <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">if</span><span class=\"br0\">(</span>firstNum <span class=\"sy0\">+</span> secNum <span class=\"sy0\">==</span> i<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>                    <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">+</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Along+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Long</span></a>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>i, base<span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>                            <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">+</span> sqrStr <span class=\"sy0\">+</span> <span class=\"st0\">\"<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">+</span> parts<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"st0\">\" + \"</span> <span class=\"sy0\">+</span> parts<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                    count<span class=\"sy0\">++;</span><br/>                    <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>                <span class=\"br0\">}</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>count <span class=\"sy0\">+</span> <span class=\"st0\">\" Kaprekar numbers &lt; 1000000 (base 10) in base \"</span><span class=\"sy0\">+</span>base<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 12, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> isKaprekar<span class=\"br0\">(</span> n<span class=\"sy0\">,</span> bs <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>\tbs <span class=\"sy0\">=</span> bs <span class=\"sy0\">||</span> <span class=\"nu0\">10</span><br/>\t<span class=\"kw1\">var</span> s <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n <span class=\"sy0\">*</span> n<span class=\"br0\">)</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>bs<span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw1\">var</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> e<span class=\"sy0\">=</span>s.<span class=\"me1\">length</span><span class=\"sy0\">;</span> i<span class=\"sy0\">&lt;</span>e<span class=\"sy0\">;</span> i<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> parseInt<span class=\"br0\">(</span>s.<span class=\"me1\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"sy0\">,</span> bs<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">var</span> b <span class=\"sy0\">=</span> parseInt<span class=\"br0\">(</span>s.<span class=\"me1\">substr</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span> bs<span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>b <span class=\"sy0\">&amp;&amp;</span> a <span class=\"sy0\">+</span> b <span class=\"sy0\">==</span> n<span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"kw2\">true</span><br/>\t<span class=\"br0\">}</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">false</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 32, "block": "<pre class=\"text highlighted_source\"># Is the input integer a Kaprekar integer?<br/>def is_kaprekar:<br/>    # The helper function acts like a loop:<br/>    # input is [n, number, str]<br/>    # where n is the position to be considered next,<br/>    # number is the integer under consideration,<br/>    # and str is the string representing number*number<br/>    def _try:  <br/>      .[0] as $n | .[1] as $number | .[2] as $str<br/>      | if $n &gt;= ($str|length) then null<br/>        else   ($str[0:$n] | tonumber) as $left<br/>             | ($str[$n:]  | tonumber) as $right<br/>             | if $left &gt; $number then null<br/>               elif $right == 0 then null<br/>               elif ($left + $right) == $number then $n<br/>               else [($n + 1), $number, $str] | _try<br/>               end<br/>        end;<br/>    . as $in<br/>    | if . == 1 then true<br/>      elif . &lt; 1 then false<br/>      else null\u00a0!= ([1, $in, ($in*$in|tostring)] | _try)<br/>      end\u00a0;<br/>\u00a0<br/># Useful for counting how many times the condition is satisfied:<br/>def count(generator; condition):<br/>  reduce generator as $i (0; if ($i|condition ) then .+1 else . end);<br/>\u00a0<br/>def task:<br/>  [ range(1;10000) | select( is_kaprekar ) ],<br/>  count( range(1;1000000); is_kaprekar )<br/>;</pre>"}, {"lang": "Julia", "loc": 11, "block": "<pre class=\"text highlighted_source\">function iskaprekar(n::Integer)<br/>    str = dec(n ^ 2)<br/>    if n == 1 return true<br/>    else<br/>        return any(n == parse(Int, str[1:i]) + parse(Int, str[i+1:end]) &amp;&amp; parse(Int, str[i+1:end])\u00a0!= 0<br/>            for i = 1:length(str)-1)<br/>    end<br/>end<br/>\u00a0<br/>@show filter(iskaprekar, 1:10000)<br/>@show count(iskaprekar, 1:10000)</pre>"}, {"lang": "Kotlin", "loc": 35, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">lang</span>.<span class=\"me1\">Long</span>.<span class=\"me1\">parseLong</span><br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">lang</span>.<span class=\"me1\">Long</span>.<span class=\"me1\">toString</span><br/>\u00a0<br/>fun String.<span class=\"me1\">splitAt</span><span class=\"br0\">(</span>idx<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> ans <span class=\"sy0\">=</span> arrayOf<span class=\"br0\">(</span>substring<span class=\"br0\">(</span><span class=\"nu0\">0</span>, idx<span class=\"br0\">)</span>, substring<span class=\"br0\">(</span>idx<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>ans.<span class=\"me1\">first</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">==</span> <span class=\"st0\">\"\"</span><span class=\"br0\">)</span> ans<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"st0\">\"0\"</span> <span class=\"co1\">// parsing \"\" throws an exception</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> ans<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun Long.<span class=\"me1\">getKaprekarParts</span><span class=\"br0\">(</span>sqrStr<span class=\"sy0\">:</span>  String, base<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;?</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in <span class=\"nu0\">0</span>..<span class=\"me1\">sqrStr</span>.<span class=\"me1\">length</span> / <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> parts <span class=\"sy0\">=</span> sqrStr.<span class=\"me1\">splitAt</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>first, second<span class=\"br0\">)</span> <span class=\"sy0\">=</span> parts.<span class=\"me1\">map</span> <span class=\"br0\">{</span> parseLong<span class=\"br0\">(</span>it, base<span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"co1\">// if the right part is all zeroes, then it will be forever, so break</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>second <span class=\"sy0\">==</span> 0L<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>first + second <span class=\"sy0\">==</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">this</span></a><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> parts<br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> base <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>args.<span class=\"me1\">isNotEmpty</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> args<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">toInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"nu0\">10</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> max <span class=\"sy0\">=</span> 1000000L<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"me1\">max</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> s <span class=\"sy0\">=</span> toString<span class=\"br0\">(</span>i <span class=\"sy0\">*</span> i, base<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> p <span class=\"sy0\">=</span> i.<span class=\"me1\">getKaprekarParts</span><span class=\"br0\">(</span>s, base<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>p <span class=\"sy0\">!=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">null</span></a><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            println<span class=\"br0\">(</span><span class=\"st0\">\"%6d<span class=\"es1\">\\t</span>%6s<span class=\"es1\">\\t</span>%12s<span class=\"es1\">\\t</span>%7s +\u00a0%7s\"</span>.<span class=\"me1\">format</span><span class=\"br0\">(</span>i, toString<span class=\"br0\">(</span>i, base<span class=\"br0\">)</span>, s, p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, p<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            count++<br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    println<span class=\"br0\">(</span><span class=\"st0\">\"$count Kaprekar numbers &lt; $max (base 10) in base $base\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Liberty BASIC", "loc": 20, "block": "<pre class=\"lb highlighted_source\">\u00a0<br/>\u00a0<br/> <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">10000</span>  <span class=\"co1\">'1000000 - Changing to one million takes a long time to complete!!!!</span><br/>    Kaprekar <span class=\"sy0\">=</span> isKaprekar<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> Kaprekar <span class=\"kw1\">Then</span> numKaprekar <span class=\"sy0\">=</span> <span class=\"br0\">(</span>numKaprekar <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw1\">Print</span> Kaprekar<br/><span class=\"kw1\">Next</span> i<br/>\u00a0<br/><span class=\"kw1\">Print</span> numKaprekar<br/><span class=\"kw1\">End</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> isKaprekar<span class=\"br0\">(</span>num<span class=\"br0\">)</span><br/>    <span class=\"kw1\">If</span> num <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> isKaprekar <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Function</span><br/>    <span class=\"kw1\">If</span> num <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">Then</span> isKaprekar <span class=\"sy0\">=</span> num <span class=\"sy0\">:</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Function</span><br/>    squarenum$ <span class=\"sy0\">=</span> <span class=\"kw2\">str$</span><span class=\"br0\">(</span>num ^ <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">For</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw2\">Len</span><span class=\"br0\">(</span>squarenum$<span class=\"br0\">)</span><br/>        <span class=\"kw1\">If</span> <span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Mid$</span><span class=\"br0\">(</span>squarenum$<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">Then</span> isKaprekar <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"sy0\">:</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Function</span><br/>        <span class=\"kw1\">If</span> <span class=\"br0\">(</span><span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Left$</span><span class=\"br0\">(</span>squarenum$<span class=\"sy0\">,</span> <span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw2\">Val</span><span class=\"br0\">(</span><span class=\"kw2\">Mid$</span><span class=\"br0\">(</span>squarenum$<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> num<span class=\"br0\">)</span> <span class=\"kw1\">Then</span> isKaprekar <span class=\"sy0\">=</span> num <span class=\"sy0\">:</span> <span class=\"kw1\">Exit</span> <span class=\"kw1\">Function</span><br/>    <span class=\"kw1\">Next</span> i<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span> <br/>\u00a0</pre>"}, {"lang": "Lua", "loc": 33, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Return length of an integer without string conversion</span><br/><span class=\"kw1\">function</span> numLength <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> length <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">repeat</span><br/>        n <span class=\"sy0\">=</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>        length <span class=\"sy0\">=</span> length <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">until</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">return</span> length<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Return a boolean indicating whether n is a Kaprekar number</span><br/><span class=\"kw1\">function</span> isKaprekar <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">true</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">local</span> nSquared<span class=\"sy0\">,</span> a<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> n <span class=\"sy0\">*</span> n<br/>    <span class=\"kw1\">for</span> splitPoint <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> numLength<span class=\"br0\">(</span>nSquared<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>        a <span class=\"sy0\">=</span> <span class=\"kw3\">math.floor</span><span class=\"br0\">(</span>nSquared <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"sy0\">^</span>splitPoint<span class=\"br0\">)</span><br/>        b <span class=\"sy0\">=</span> nSquared <span class=\"sy0\">%</span> <span class=\"nu0\">10</span><span class=\"sy0\">^</span>splitPoint<br/>        <span class=\"kw1\">if</span> a <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> b <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> a <span class=\"sy0\">+</span> b <span class=\"sy0\">==</span> n <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"kw4\">true</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Main task</span><br/><span class=\"kw1\">for</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">^</span><span class=\"nu0\">4</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> isKaprekar<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span> <span class=\"kw3\">io.write</span><span class=\"br0\">(</span>n <span class=\"sy0\">..</span> <span class=\"st0\">\" \"</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Extra credit</span><br/><span class=\"kw1\">local</span> count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/><span class=\"kw1\">for</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"sy0\">^</span><span class=\"nu0\">6</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">if</span> isKaprekar<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw1\">then</span> count <span class=\"sy0\">=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span> <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>There are \"</span> <span class=\"sy0\">..</span> count <span class=\"sy0\">..</span> <span class=\"st0\">\" Kaprekar numbers under one million.\"</span><span class=\"br0\">)</span></pre>"}, {"lang": "Mathematica", "loc": 9, "block": "<pre class=\"text highlighted_source\">KaprekaQ[1] = True;<br/>KaprekaQ[n_Integer]\u00a0:=  Block[{data = IntegerDigits[n^2], last = False, i = 1},<br/>  While[i &lt; Length[data] &amp;&amp; FromDigits[data[[i + 1\u00a0;;]]] =!= 0 &amp;&amp;  Not[last],<br/>   last = FromDigits[data[[;; i]]] + FromDigits[data[[i + 1\u00a0;;]]] == n;<br/>   i++]; last];<br/>\u00a0<br/>Select[Range[10000], KaprekaQ]<br/>\u00a0<br/>Length[Select[Range[1000000], KaprekaQ]]</pre>"}, {"lang": "Maxima", "loc": 25, "block": "<pre class=\"text highlighted_source\">kaprekarp(n)\u00a0:= block(<br/>   [p, q, a, b],<br/>   if n = 1 then true else (<br/>      q: n * n,<br/>      p: 10,<br/>      catch(<br/>         while p &lt; q do (<br/>            [a, b]: divide(q, p),<br/>            if b &gt; 0 and a + b = n then throw(true),<br/>            p: 10 * p<br/>         ),<br/>         false<br/>      )<br/>   )<br/>)$<br/>\u00a0<br/>sublist(makelist(i, i, 1, 10^6), kaprekarp);<br/>[1, 9, 45, 55, 99, 297, 703, 999, 2223, 2728, 4879, 4950, 5050, 5292, 7272, 7777, 9999,<br/>17344, 22222, 38962, 77778, 82656, 95121, 99999, 142857, 148149, 181819, 187110, 208495,<br/>318682, 329967, 351352, 356643, 390313, 461539, 466830, 499500, 500500, 533170, 538461,<br/>609687, 627615, 643357, 648648, 670033, 681318, 791505, 812890, 818181, 851851, 857143,<br/>961038, 994708, 999999]<br/>\u00a0<br/>length(%);<br/>54</pre>"}, {"lang": "ML", "loc": 35, "block": "<pre class=\"ocaml highlighted_source\">local <br/>  <span class=\"kw1\">val</span> base <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">fun</span> kaprekar<br/>        <span class=\"br0\">(</span>num, numSquared, numDiv, numRem, power<span class=\"br0\">)</span> where <span class=\"br0\">(</span>base <span class=\"sy0\">^</span> power <span class=\"sy0\">&gt;=</span> numSquared<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"sy0\">|</span>   <span class=\"br0\">(</span>num, numSquared, numDiv, numRem, power<span class=\"br0\">)</span> where <span class=\"br0\">(</span><span class=\"br0\">(</span>numDiv <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"kw1\">or</span> <span class=\"br0\">(</span>numRem <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">=</span> <br/>          kaprekar <span class=\"br0\">(</span>num, numSquared, numSquared div <span class=\"br0\">(</span>base <span class=\"sy0\">^</span> power <span class=\"br0\">)</span>, numSquared rem <span class=\"br0\">(</span>base <span class=\"sy0\">^</span> power<span class=\"br0\">)</span>, power <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"sy0\">|</span>   <span class=\"br0\">(</span>num, numSquared, numDiv, numRem, power<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>numDiv <span class=\"sy0\">+</span> numRem<span class=\"br0\">)</span> <span class=\"sy0\">=</span> num<span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            num<br/>          <span class=\"kw1\">else</span><br/>            kaprekar <span class=\"br0\">(</span>num, numSquared, numSquared div <span class=\"br0\">(</span>base <span class=\"sy0\">^</span> power <span class=\"br0\">)</span>, numSquared rem <span class=\"br0\">(</span>base <span class=\"sy0\">^</span> power<span class=\"br0\">)</span>, power <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/>    <span class=\"sy0\">|</span>   num <span class=\"sy0\">=</span> <br/>          <span class=\"kw1\">if</span> <span class=\"br0\">(</span>num <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>            num<br/>          <span class=\"kw1\">else</span><br/>            kaprekar <span class=\"br0\">(</span>num, num <span class=\"sy0\">*</span> num, <span class=\"br0\">(</span>num <span class=\"sy0\">*</span> num<span class=\"br0\">)</span> div base, <span class=\"br0\">(</span>num <span class=\"sy0\">*</span> num<span class=\"br0\">)</span> rem base, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">in</span><br/>  <span class=\"kw1\">fun</span> kaprekar_list<br/>       <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span>, collector<span class=\"br0\">)</span> <span class=\"sy0\">=</span> rev collector<br/>    <span class=\"sy0\">|</span>  <span class=\"br0\">(</span>num <span class=\"sy0\">::</span> nums, collector <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <br/>         <span class=\"kw1\">let</span><br/>           <span class=\"kw1\">val</span> k <span class=\"sy0\">=</span> kaprekar num<br/>         <span class=\"kw1\">in</span> <br/>           <span class=\"kw1\">if</span> <span class=\"br0\">(</span>k <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>             kaprekar_list <span class=\"br0\">(</span>nums, collector<span class=\"br0\">)</span><br/>           <span class=\"kw1\">else</span><br/>             kaprekar_list <span class=\"br0\">(</span>nums, num <span class=\"sy0\">::</span> collector<span class=\"br0\">)</span><br/>         <span class=\"kw1\">end</span><br/>    <span class=\"sy0\">|</span>  <span class=\"br0\">(</span>num <span class=\"sy0\">::</span> nums<span class=\"br0\">)</span> <span class=\"sy0\">=</span> kaprekar_list <span class=\"br0\">(</span>num <span class=\"sy0\">::</span> nums, <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <br/><span class=\"kw1\">end</span><br/><span class=\"sy0\">;</span></pre>"}, {"lang": "Modula-2", "loc": 63, "block": "<pre class=\"modula2 highlighted_source\"><span class=\"kw1\">MODULE</span> Kaprekar;<br/><span class=\"kw1\">FROM</span> FormatString <span class=\"kw1\">IMPORT</span> FormatString;<br/><span class=\"kw1\">FROM</span> Terminal <span class=\"kw1\">IMPORT</span> Write<span class=\"sy0\">,</span>WriteString<span class=\"sy0\">,</span>WriteLn<span class=\"sy0\">,</span>ReadChar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> kaprekar<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>base <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span><span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"kw4\">BOOLEAN</span>;<br/><span class=\"kw1\">VAR</span><br/>    nn<span class=\"sy0\">,</span>r<span class=\"sy0\">,</span>tens <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    nn <span class=\"sy0\">:=</span> n<span class=\"sy0\">*</span>n;<br/>    tens <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span>;<br/>    <span class=\"kw1\">IF</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>nn <span class=\"sy0\">-</span> n<span class=\"br0\">)</span> <span class=\"kw1\">MOD</span> <span class=\"br0\">(</span>base <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">#</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> <span class=\"kw2\">FALSE</span> <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    <span class=\"kw1\">WHILE</span> tens &lt; n <span class=\"kw1\">DO</span> tens <span class=\"sy0\">:=</span> tens <span class=\"sy0\">*</span> base <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">IF</span> n <span class=\"sy0\">=</span> tens <span class=\"kw1\">THEN</span><br/>        <span class=\"kw1\">IF</span> <span class=\"nu0\">1</span> <span class=\"sy0\">=</span> n <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> <span class=\"kw2\">TRUE</span> <span class=\"kw1\">END</span>;<br/>        <span class=\"kw1\">RETURN</span> <span class=\"kw2\">FALSE</span><br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    <span class=\"kw1\">LOOP</span><br/>        r <span class=\"sy0\">:=</span> nn <span class=\"kw1\">MOD</span> tens;<br/>        <span class=\"kw1\">IF</span> r &gt;<span class=\"sy0\">=</span> n <span class=\"kw1\">THEN</span> BREAK <span class=\"kw1\">END</span>;<br/>        <span class=\"kw1\">IF</span> nn <span class=\"kw1\">DIV</span> tens <span class=\"sy0\">+</span> r <span class=\"sy0\">=</span> n <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> tens<span class=\"sy0\">#</span><span class=\"nu0\">0</span> <span class=\"kw1\">END</span>;<br/>        tens <span class=\"sy0\">:=</span> tens <span class=\"sy0\">*</span> base;<br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    <span class=\"kw1\">RETURN</span> <span class=\"kw2\">FALSE</span><br/><span class=\"kw1\">END</span> kaprekar;<br/>\u00a0<br/><span class=\"kw1\">PROCEDURE</span> print_num<span class=\"br0\">(</span>n<span class=\"sy0\">,</span>base <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">VAR</span> q<span class=\"sy0\">,</span>d <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    d <span class=\"sy0\">:=</span> base;<br/>\u00a0<br/>    <span class=\"kw1\">WHILE</span> d&lt;n <span class=\"kw1\">DO</span> d <span class=\"sy0\">:=</span> d <span class=\"sy0\">*</span> base <span class=\"kw1\">END</span>;<br/>    <span class=\"kw1\">LOOP</span><br/>        d <span class=\"sy0\">:=</span> d <span class=\"kw1\">DIV</span> base;<br/>        <span class=\"kw1\">IF</span> n BAND d <span class=\"sy0\">=</span> <span class=\"nu0\">0</span> <span class=\"kw1\">THEN</span> <span class=\"kw1\">RETURN</span> <span class=\"kw1\">END</span>;<br/>        q <span class=\"sy0\">:=</span> n <span class=\"kw1\">DIV</span> d;<br/>        <span class=\"kw1\">IF</span> q&lt;<span class=\"nu0\">10</span> <span class=\"kw1\">THEN</span><br/>            Write<span class=\"br0\">(</span><span class=\"kw3\">CHR</span><span class=\"br0\">(</span>INT<span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"sy0\">+</span> INT<span class=\"br0\">(</span><span class=\"kw3\">ORD</span><span class=\"br0\">(</span><span class=\"st_h\">'0'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">ELSE</span><br/>            Write<span class=\"br0\">(</span><span class=\"kw3\">CHR</span><span class=\"br0\">(</span>INT<span class=\"br0\">(</span>q<span class=\"br0\">)</span> <span class=\"sy0\">+</span> INT<span class=\"br0\">(</span><span class=\"kw3\">ORD</span><span class=\"br0\">(</span><span class=\"st_h\">'a'</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">END</span>;<br/>        n <span class=\"sy0\">:=</span> n <span class=\"sy0\">-</span> q <span class=\"sy0\">*</span> d<br/>    <span class=\"kw1\">END</span><br/><span class=\"kw1\">END</span> print_num;<br/>\u00a0<br/><span class=\"kw1\">VAR</span><br/>    buf <span class=\"sy0\">:</span> <span class=\"kw1\">ARRAY</span><span class=\"br0\">[</span><span class=\"nu0\">0</span>..<span class=\"nu0\">63</span><span class=\"br0\">]</span> <span class=\"kw1\">OF</span> <span class=\"kw4\">CHAR</span>;<br/>    i<span class=\"sy0\">,</span>tens<span class=\"sy0\">,</span>cnt<span class=\"sy0\">,</span>base <span class=\"sy0\">:</span> <span class=\"kw4\">LONGCARD</span>;<br/><span class=\"kw1\">BEGIN</span><br/>    cnt <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span>;<br/>    base <span class=\"sy0\">:=</span> <span class=\"nu0\">10</span>;<br/>    <span class=\"kw1\">FOR</span> i<span class=\"sy0\">:=</span><span class=\"nu0\">1</span> <span class=\"kw1\">TO</span> <span class=\"nu0\">1000000</span> <span class=\"kw1\">DO</span><br/>        <span class=\"kw1\">IF</span> kaprekar<span class=\"br0\">(</span>i<span class=\"sy0\">,</span>base<span class=\"br0\">)</span> <span class=\"kw1\">THEN</span><br/>            <span class=\"kw3\">INC</span><span class=\"br0\">(</span>cnt<span class=\"br0\">)</span>;<br/>            FormatString<span class=\"br0\">(</span><span class=\"st0\">\"%3u:\u00a0%u<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> buf<span class=\"sy0\">,</span> cnt<span class=\"sy0\">,</span> i<span class=\"br0\">)</span>;<br/>            WriteString<span class=\"br0\">(</span>buf<span class=\"br0\">)</span><br/>        <span class=\"kw1\">END</span><br/>    <span class=\"kw1\">END</span>;<br/>\u00a0<br/>    ReadChar<br/><span class=\"kw1\">END</span> Kaprekar.</pre>"}, {"lang": "Nim", "loc": 12, "block": "<pre class=\"text highlighted_source\">import strutils, sequtils<br/>\u00a0<br/>proc k(n): bool =<br/>  let n2 = $(n.in64 * n)<br/>  for i in 0 .. &lt;n2.len:<br/>    let a = if i &gt; 0: parseBiggestInt n2[0 .. &lt;i] else: 0<br/>    let b = parseBiggestInt n2[i .. n2.high]<br/>    if b &gt; 0 and a + b == n:<br/>      return true<br/>\u00a0<br/>echo toSeq(1..10_000).filter(k)<br/>echo len toSeq(1..1_000_000).filter(k)</pre>"}, {"lang": "PARI/GP", "loc": 22, "block": "<pre class=\"parigp highlighted_source\">K<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>D<span class=\"sy0\">=</span><span class=\"nu1\">10</span><span class=\"sy0\">^</span>d<span class=\"sy0\">,</span>DD<span class=\"sy0\">,</span>t<span class=\"sy0\">,</span>v<span class=\"sy0\">=</span><span class=\"kw1\">List</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span>D<span class=\"sy0\">/</span><span class=\"nu1\">10</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>D<span class=\"sy0\">-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><br/>    t<span class=\"sy0\">=</span><span class=\"kw1\">divrem</span><span class=\"br0\">(</span>n<span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>D<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span>t<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">&amp;</span>t<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>t<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">==</span>n<span class=\"sy0\">,</span><span class=\"kw1\">listput</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">next</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    DD<span class=\"sy0\">=</span>D<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>t<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">&lt;</span>n<span class=\"sy0\">,</span><br/>      t<span class=\"sy0\">=</span><span class=\"kw1\">divrem</span><span class=\"br0\">(</span>n<span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>DD<span class=\"sy0\">*=</span><span class=\"nu1\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>t<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">&amp;</span>t<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>t<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">==</span>n<span class=\"sy0\">,</span><span class=\"kw1\">listput</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">next</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    DD<span class=\"sy0\">=</span>D<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">while</span><span class=\"br0\">(</span>t<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">&lt;</span>n<span class=\"sy0\">,</span><br/>      t<span class=\"sy0\">=</span><span class=\"kw1\">divrem</span><span class=\"br0\">(</span>n<span class=\"sy0\">^</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span>DD<span class=\"sy0\">/=</span><span class=\"nu1\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      <span class=\"kw1\">if</span><span class=\"br0\">(</span>t<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">&amp;</span>t<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>t<span class=\"br0\">[</span><span class=\"nu1\">2</span><span class=\"br0\">]</span><span class=\"sy0\">==</span>n<span class=\"sy0\">,</span><span class=\"kw1\">listput</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">next</span><span class=\"br0\">(</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">Vec</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>upTo<span class=\"br0\">(</span>d<span class=\"br0\">)</span><span class=\"sy0\">=</span>my<span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><span class=\"kw1\">for</span><span class=\"br0\">(</span>n<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>d<span class=\"sy0\">,</span>v<span class=\"sy0\">=</span><span class=\"kw1\">concat</span><span class=\"br0\">(</span>v<span class=\"sy0\">,</span>K<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>v<span class=\"sy0\">;</span><br/>upTo<span class=\"br0\">(</span><span class=\"nu1\">4</span><span class=\"br0\">)</span><br/>v<span class=\"sy0\">=</span>upTo<span class=\"br0\">(</span><span class=\"nu1\">6</span><span class=\"br0\">)</span><span class=\"sy0\">;</span>v<br/>#v</pre>"}, {"lang": "Perl", "loc": 17, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">sub</span> isKap <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$k</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"kw1\">if</span> <span class=\"re0\">$k</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"re0\">$k</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"nu0\">9</span><span class=\"sy0\">;</span>  <span class=\"co1\"># Fast return \"casting out nines\"</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$k2</span><span class=\"sy0\">,</span> <span class=\"re0\">$p</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$k</span><span class=\"re0\">*$k</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$i</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/int.html\"><span class=\"kw3\">int</span></a><span class=\"br0\">(</span><span class=\"re0\">$k2</span><span class=\"sy0\">/</span><span class=\"re0\">$p</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$j</span> <span class=\"sy0\">=</span> <span class=\"re0\">$k2</span> <span class=\"sy0\">%</span> <span class=\"re0\">$p</span><span class=\"sy0\">;</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> <span class=\"re0\">$j</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$i</span><span class=\"sy0\">+</span><span class=\"re0\">$j</span> <span class=\"sy0\">==</span> <span class=\"re0\">$k</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">$p</span> <span class=\"sy0\">*=</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"re0\">$p</span> <span class=\"sy0\">&lt;=</span> <span class=\"re0\">$k2</span><span class=\"sy0\">;</span><br/>  <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"[\"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a><span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/grep.html\"><span class=\"kw3\">grep</span></a> <span class=\"br0\">{</span> isKap<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">9999</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"]<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> <span class=\"re0\">@kaprekar</span><span class=\"sy0\">;</span><br/>isKap<span class=\"br0\">(</span><span class=\"co5\">$_</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;&amp;</span> <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@kaprekar</span><span class=\"sy0\">,</span><span class=\"co5\">$_</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">1</span>_000_000<span class=\"sy0\">;</span><br/><a href=\"http://perldoc.perl.org/functions/print.html\"><span class=\"kw3\">print</span></a> <span class=\"st0\">\"Kaprekar Numbers below 1000000: \"</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/scalar.html\"><span class=\"kw3\">scalar</span></a><span class=\"br0\">(</span><span class=\"re0\">@kaprekar</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 13, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> kaprekar<span class=\"br0\">(</span> Int <span class=\"re0\">$n</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$sq</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu0\">0</span> <span class=\"sy0\">^..^</span> <span class=\"re0\">$sq</span><span class=\"sy0\">.</span><span class=\"kw3\">chars</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$i</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">$sq</span><span class=\"sy0\">.</span><span class=\"kw3\">substr</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$i</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"sy0\">=</span> <span class=\"sy0\">+</span><span class=\"re0\">$sq</span><span class=\"sy0\">.</span><span class=\"kw3\">substr</span><span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"kw1\">True</span> <span class=\"kw1\">if</span> <span class=\"re0\">$x</span> <span class=\"sy0\">+</span> <span class=\"re0\">$y</span> <span class=\"sy0\">==</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">False</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">print</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">print</span> <span class=\"st0\">\" $_\"</span> <span class=\"kw1\">if</span> <span class=\"sy0\">.</span><span class=\"re0\">&amp;kaprekar</span> <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"nu0\">10000</span><span class=\"sy0\">;</span><br/><span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 54, "block": "<pre class=\"text highlighted_source\">atom r, l<br/>function Kaprekar(integer n, base=10)<br/>atom sq=n*n, basen = base<br/>    if n=1 then return true end if<br/>    r=0<br/>    while r&lt;n do<br/>        r = mod(sq,basen)<br/>        l = floor(sq/basen)<br/>        if r and l and l+r=n then return true end if<br/>        basen *= base<br/>    end while<br/>    return false<br/>end function<br/>\u00a0<br/>sequence s = {}<br/>for i=1 to 10000 do<br/>    if Kaprekar(i) then<br/>        s &amp;= i<br/>    end if<br/>end for<br/>printf(1,\"There are\u00a0%d Kaprekar numbers between 1 and 10,000:\\n\",length(s))<br/>?s<br/>integer c = 0<br/>for i=1 to 1000000 do<br/>    c += Kaprekar(i)<br/>end for<br/>printf(1,\"There are\u00a0%d Kaprekar numbers between 1 and 1,000,000\\n\",c)<br/>\u00a0<br/>function base17(sequence s)<br/>    for i=1 to length(s) do<br/>        atom si = s[i]<br/>        string num = \"\"<br/>        while si do<br/>            integer digit = mod(si,17)<br/>            si = floor(si/17)<br/>            num = digit+iff(digit&lt;=9?'0':87)&amp;num<br/>        end while<br/>        s[i] = num<br/>    end for<br/>    return s<br/>end function<br/>\u00a0<br/>s = {} r = 1 l = 1<br/>for i=1 to 1000000 do<br/>    if Kaprekar(i,17) then<br/>        s = append(s,{i,i*i,l,r})<br/>    end if<br/>end for<br/>printf(1,\"There are\u00a0%d Kaprekar base 17 numbers between 1 and 1,000,000 (decimal):\\n\",length(s))<br/>s[5..-5] = {}<br/>for i=1 to length(s) do<br/>    printf(1,\"%s squared\u00a0%s, split\u00a0%s+%s\\n\",base17(s[i]))<br/>    if i=4 then printf(1,\" ...\\n\") end if<br/>end for</pre>"}, {"lang": "PHP", "loc": 18, "block": "<pre class=\"php highlighted_source\"><a href=\"http://www.php.net/set_time_limit\"><span class=\"kw3\">set_time_limit</span></a><span class=\"br0\">(</span><span class=\"nu0\">300</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><a href=\"http://www.php.net/print_r\"><span class=\"kw3\">print_r</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/array_filter\"><span class=\"kw3\">array_filter</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/range\"><span class=\"kw3\">range</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st_h\">'isKaprekar'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">echo</span> <a href=\"http://www.php.net/count\"><span class=\"kw3\">count</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/array_filter\"><span class=\"kw3\">array_filter</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/range\"><span class=\"kw3\">range</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1000000</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st_h\">'isKaprekar'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">function</span> isKaprekar<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"re0\">$n</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span> <br/>    <span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/bcmod\"><span class=\"kw3\">bcmod</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es4\">$a</span>\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"10\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"re0\">$d</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$a</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"re0\">$d</span> <span class=\"sy0\">*=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$b</span> <span class=\"sy0\">+=</span> <span class=\"re0\">$t</span> <span class=\"sy0\">*</span> <span class=\"re0\">$d</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/floor\"><span class=\"kw3\">floor</span></a><span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">/</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$a</span> <span class=\"sy0\">+</span> <span class=\"re0\">$b</span> <span class=\"sy0\">==</span> <span class=\"re0\">$n</span><span class=\"br0\">)</span> <br/>            <span class=\"kw1\">return</span> <span class=\"kw4\">true</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$t</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/bcmod\"><span class=\"kw3\">bcmod</span></a><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es4\">$a</span>\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"10\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw4\">false</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 5, "block": "<pre class=\"text highlighted_source\">(de kaprekar (N)<br/>   (let L (cons 0 (chop (* N N)))<br/>      (for ((I . R) (cdr L) R (cdr R))<br/>         (NIL (gt0 (format R)))<br/>         (T (= N (+ @ (format (head I L)))) N) ) ) )</pre>"}, {"lang": "PL/I", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>kaprekar: procedure options (main);  /* 22 January 2012 */<br/>   declare i fixed decimal (9), j fixed binary;<br/>   declare s character (20) character varying;<br/>   declare m fixed decimal (9);<br/>   declare (z, zeros) character (20) varying;<br/>\u00a0<br/>   zeros = '00000000000000000000';<br/>\u00a0<br/>   put skip list (1);<br/>   do i = 2 to 100000;<br/>      s = i*i;<br/>      s = trim(s);<br/>      z = substr(zeros, 1, length(s));<br/>      do j = 1 to length(s)-1;<br/>         if substr(s, j+1) = substr(z, j+1) then leave;<br/>         m = substr(s, 1, j) + substr(s, j+1);<br/>         if i = m then put skip list (i);<br/>      end;<br/>   end;<br/>\u00a0<br/>end kaprekar;<br/>\u00a0</pre>"}, {"lang": "PowerShell", "loc": 27, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/><span class=\"kw3\">function</span> Test<span class=\"sy0\">-</span>Kaprekar <span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"re3\">int</span><span class=\"br0\">]</span><span class=\"re0\">$Number</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>    <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$Number</span> <span class=\"kw4\">-eq</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"kw3\">return</span> <span class=\"re0\">$true</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"br0\">[</span>int64<span class=\"br0\">]</span><span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <span class=\"re0\">$Number</span> <span class=\"sy0\">*</span> <span class=\"re0\">$Number</span><br/>    <span class=\"br0\">[</span>int64<span class=\"br0\">]</span><span class=\"re0\">$b</span> <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><br/>\u00a0<br/>    <span class=\"kw3\">while</span> <span class=\"br0\">(</span><span class=\"re0\">$b</span> <span class=\"kw4\">-lt</span> <span class=\"re0\">$a</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><br/>        <span class=\"br0\">[</span>int64<span class=\"br0\">]</span><span class=\"re0\">$remainder</span> <span class=\"sy0\">=</span> <span class=\"re0\">$a</span> <span class=\"sy0\">%</span> <span class=\"re0\">$b</span><br/>        <span class=\"br0\">[</span>int64<span class=\"br0\">]</span><span class=\"re0\">$quotient</span>  <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$a</span> <span class=\"sy0\">-</span> <span class=\"re0\">$remainder</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"re0\">$b</span><br/>\u00a0<br/>        <span class=\"kw3\">if</span> <span class=\"br0\">(</span><span class=\"re0\">$remainder</span> <span class=\"kw4\">-gt</span> <span class=\"nu0\">0</span> <span class=\"kw4\">-and</span> <span class=\"re0\">$remainder</span> <span class=\"sy0\">+</span> <span class=\"re0\">$quotient</span> <span class=\"kw4\">-eq</span> <span class=\"re0\">$Number</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">{</span><br/>            <span class=\"kw3\">return</span> <span class=\"re0\">$true</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"re0\">$b</span> <span class=\"sy0\">*=</span> <span class=\"nu0\">10</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw3\">return</span> <span class=\"re0\">$false</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Prolog", "loc": 13, "block": "<pre class=\"prolog highlighted_source\">kaprekar_<span class=\"br0\">(</span>Z<span class=\"sy4\">,</span> X<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tsplit_number<span class=\"br0\">(</span>Z<span class=\"sy4\">,</span> <span class=\"nu0\">10</span><span class=\"sy4\">,</span> X<span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>\u00a0<br/>split_number<span class=\"br0\">(</span>Z<span class=\"sy4\">,</span> N<span class=\"sy4\">,</span> X<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tN <span class=\"sy6\">&lt;</span> Z<span class=\"sy4\">,</span><br/>\tA <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Z <span class=\"sy3\">//</span> N<span class=\"sy4\">,</span><br/>\tB <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> Z <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">mod</span></a> N<span class=\"sy4\">,</span><br/>\t<span class=\"br0\">(</span>   <span class=\"br0\">(</span>X <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> A<span class=\"sy3\">+</span>B<span class=\"sy4\">,</span>  B\\<span class=\"sy6\">=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy3\">-</span><span class=\"sy6\">&gt;</span> <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">true</span></a><span class=\"sy4\">;</span> N1 <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> N<span class=\"sy3\">*</span><span class=\"nu0\">10</span><span class=\"sy4\">,</span> split_number<span class=\"br0\">(</span>Z<span class=\"sy4\">,</span> N1<span class=\"sy4\">,</span> X<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">.</span><br/>\u00a0<br/>kaprekar<span class=\"br0\">(</span>N<span class=\"sy4\">,</span> V<span class=\"br0\">)</span> <span class=\"sy1\">:-</span><br/>\tV <span class=\"sy6\">&lt;</span><span class=\"sy3\">-</span> <span class=\"br0\">{</span>X <span class=\"sy5\">&amp;</span> X <span class=\"sy6\">&lt;</span><span class=\"sy3\">-</span> <span class=\"nu0\">1</span> <span class=\"sy4\">..</span> N <span class=\"sy5\">&amp;</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>Z <a href=\"http://pauillac.inria.fr/~deransar/prolog/bips.html\"><span class=\"kw1\">is</span></a> X <span class=\"sy3\">*</span> X<span class=\"sy4\">,</span> kaprekar_<span class=\"br0\">(</span>Z<span class=\"sy4\">,</span> X<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span> X <span class=\"sy6\">=</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><span class=\"sy4\">.</span><br/>\u00a0</pre>"}, {"lang": "PureBasic", "loc": 27, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">Procedure</span> Kaprekar<span class=\"br0\">(</span>n.i<span class=\"br0\">)</span><br/>  nn.q  <span class=\"sy0\">=</span> n<span class=\"sy0\">*</span>n<br/>  tens.q<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">While</span> tens<span class=\"sy0\">&lt;</span>nn: tens<span class=\"sy0\">*</span><span class=\"nu0\">10</span>: <span class=\"kw1\">Wend</span>  <br/>  <span class=\"kw1\">Repeat</span><br/>    tens<span class=\"sy0\">/</span><span class=\"nu0\">10</span><br/>    <span class=\"kw1\">If</span> tens<span class=\"sy0\">&lt;=</span>n: <span class=\"kw1\">Break</span>: <span class=\"kw1\">EndIf</span><br/>    <span class=\"kw1\">If</span> nn<span class=\"sy0\">-</span>n <span class=\"sy0\">=</span> <span class=\"br0\">(</span>nn<span class=\"sy0\">/</span>tens<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>tens<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>      <span class=\"kw1\">ProcedureReturn</span> #True<br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">ForEver</span><br/>  <span class=\"kw1\">If</span> n<span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>    <span class=\"kw1\">ProcedureReturn</span> #True<br/>  <span class=\"kw1\">EndIf</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">If</span> <span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">1000000</span><br/>    <span class=\"kw1\">If</span> Kaprekar<span class=\"br0\">(</span>i<span class=\"br0\">)</span>  <br/>      cnt<span class=\"sy0\">+</span><span class=\"nu0\">1</span><br/>      <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>cnt<span class=\"br0\">)</span>,<span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\":\"</span><span class=\"sy0\">+</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>,<span class=\"nu0\">8</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">EndIf</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"co1\">;</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Press ENTER to exit\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">EndIf</span></pre>"}, {"lang": "Python", "loc": 14, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> k<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>\tn2 <span class=\"sy0\">=</span> <span class=\"kw2\">str</span><span class=\"br0\">(</span>n**<span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"kw2\">len</span><span class=\"br0\">(</span>n2<span class=\"br0\">)</span><span class=\"br0\">)</span>:<br/>\t\ta<span class=\"sy0\">,</span> b <span class=\"sy0\">=</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>n2<span class=\"br0\">[</span>:i<span class=\"br0\">]</span> <span class=\"kw1\">or</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"kw2\">int</span><span class=\"br0\">(</span>n2<span class=\"br0\">[</span>i:<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t\t<span class=\"kw1\">if</span> b <span class=\"kw1\">and</span> a + b <span class=\"sy0\">==</span> n:<br/>\t\t\t<span class=\"kw1\">return</span> n<br/>\t\t\t<span class=\"co1\">#return (n, (n2[:i], n2[i:]))</span><br/>\u00a0<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"br0\">[</span>x <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> k<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">9</span><span class=\"sy0\">,</span> <span class=\"nu0\">45</span><span class=\"sy0\">,</span> <span class=\"nu0\">55</span><span class=\"sy0\">,</span> <span class=\"nu0\">99</span><span class=\"sy0\">,</span> <span class=\"nu0\">297</span><span class=\"sy0\">,</span> <span class=\"nu0\">703</span><span class=\"sy0\">,</span> <span class=\"nu0\">999</span><span class=\"sy0\">,</span> <span class=\"nu0\">2223</span><span class=\"sy0\">,</span> <span class=\"nu0\">2728</span><span class=\"sy0\">,</span> <span class=\"nu0\">4879</span><span class=\"sy0\">,</span> <span class=\"nu0\">4950</span><span class=\"sy0\">,</span> <span class=\"nu0\">5050</span><span class=\"sy0\">,</span> <span class=\"nu0\">5292</span><span class=\"sy0\">,</span> <span class=\"nu0\">7272</span><span class=\"sy0\">,</span> <span class=\"nu0\">7777</span><span class=\"sy0\">,</span> <span class=\"nu0\">9999</span><span class=\"br0\">]</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw2\">len</span><span class=\"br0\">(</span><span class=\"br0\">[</span>x <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span> <span class=\"kw1\">if</span> k<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"nu0\">54</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "REXX", "loc": 27, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm generates &amp; counts (+ maybe shows) some Kaprekar #s using the cast\u2500out\u25009 test*/</span><br/>               <span class=\"coMULTI\">/* \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557<br/>                  \u2551 Kaprekar numbers were thought of by the mathematician from India, \u2551<br/>                  \u2551 Shri Dattathreya Ramachardra Kaprekar  (1905 \u2500\u2500\u2500\u25ba 1986).          \u2551<br/>                  \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> A B <span class=\"sy0\">.</span>                                  <span class=\"coMULTI\">/*obtain optional arguments from the CL*/</span><br/><span class=\"kw1\">if</span> A==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> A=<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> A=    <span class=\"nu0\">10000</span>               <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/><span class=\"kw1\">if</span> B==<span class=\"st0\">''</span> <span class=\"sy0\">|</span> B=<span class=\"st0\">\",\"</span>  <span class=\"kw3\">then</span> B= -<span class=\"nu0\">1000000</span>               <span class=\"coMULTI\">/* \"      \"         \"   \"   \"     \"    */</span><br/><span class=\"kw1\">call</span> Kaprekar          A                         <span class=\"coMULTI\">/*gen Kaprekar numbers,        show 'em*/</span><br/><span class=\"kw1\">call</span> Kaprekar          B                         <span class=\"coMULTI\">/* \"     \"        \"      don't show 'em*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Kaprekar: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N; #=<span class=\"nu0\">0</span>; aN=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"coMULTI\">/*set counter to zero; use  \u2502N\u2502  value.*/</span><br/>          <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"kw6\">max</span><span class=\"br0\">(</span><span class=\"nu0\">9</span>, <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw6\">length</span><span class=\"br0\">(</span>N<span class=\"br0\">)</span> <span class=\"br0\">)</span>    <span class=\"coMULTI\">/*use enough decimal digits for square.*/</span><br/>          <span class=\"kw1\">if</span> aN<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">call</span> tell <span class=\"nu0\">1</span>              <span class=\"coMULTI\">/*unity is defined to be a Kaprekar #. */</span><br/>                                                 <span class=\"coMULTI\">/* [\u2191]  handle case of  N  being unity.*/</span><br/>          <span class=\"kw1\">if</span> aN<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">for</span> aN-<span class=\"nu0\">2</span>;  s=j<span class=\"sy0\">*</span>j <span class=\"coMULTI\">/*calculate the  square  of  J   (S).  */</span><br/>                        <span class=\"kw1\">if</span> j<span class=\"sy0\">//</span><span class=\"nu0\">9</span>==s<span class=\"sy0\">//</span><span class=\"nu0\">9</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>s<span class=\"br0\">)</span>%2  <span class=\"coMULTI\">/*\u2261 casted out 9's?*/</span><br/>                                            <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span>    s      L   +<span class=\"br0\">(</span>k<span class=\"br0\">)</span>   R<br/>                                            <span class=\"kw1\">if</span> j==L+R  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <span class=\"kw1\">call</span> tell j;  <span class=\"kw1\">leave</span>;  <span class=\"kw3\">end</span><br/>                                            <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*k*/</span><br/>                        <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*j*/</span><br/>          <span class=\"kw1\">say</span><br/>          <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"st0\">\" There're \"</span>    #    <span class=\"st0\">' Kaprekar numbers below '</span>     aN <span class=\"sy0\">||</span> <span class=\"sy0\">.</span>, <span class=\"nu0\">79</span>, <span class=\"st0\">\"\u2550\"</span><span class=\"br0\">)</span><br/>          <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>tell:     #=#+<span class=\"nu0\">1</span>;  <span class=\"kw1\">if</span> N<span class=\"sy0\">&gt;</span><span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">say</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;   <span class=\"kw1\">return</span>  <span class=\"coMULTI\">/*maybe display it*/</span></pre>"}, {"lang": "Racket", "loc": 13, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(define (kaprekar? n)<br/>  (or (= n 1)<br/>      (let ([q (sqr n)])<br/>        (let loop ((p 10))<br/>          (and (&lt;= p q)<br/>               (or (let-values  ([(b a) (quotient/remainder q p)])<br/>                     (and (&gt; a 0) (= n (+ a b))))<br/>                   (loop (* p 10))))))))<br/>\u00a0<br/>(filter kaprekar? (range 1 10000))<br/>\u00a0</pre>"}, {"lang": "Ring", "loc": 20, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>nr = 0<br/>for i = 1 to 200<br/>    if kaprekar(i)<br/>       nr += 1<br/>       if i &lt; 201 see \"\" + nr + \"\u00a0: \" + i + nl ok ok<br/>next<br/>see \"total kaprekar numbers under 200 = \" + nr + nl<br/>\u00a0<br/>func kaprekar n<br/>     s = pow(n,2)<br/>     x = floor(log(s)) + 1<br/>     t = pow(10,x) <br/>     while true<br/>           t /= 10<br/>           if t&lt;=n exit ok<br/>           if s-n = floor(s/t)*(t-1) n = true ok<br/>     end<br/>     return (n = 1)<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 32, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> kaprekar<span class=\"br0\">(</span>n, base = <span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>  <span class=\"kw2\">return</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, <span class=\"st0\">\"\"</span><span class=\"br0\">]</span> <span class=\"kw1\">if</span> n == <span class=\"nu0\">1</span> <br/>  <span class=\"kw2\">return</span> <span class=\"kw1\">if</span> n<span class=\"sy0\">*</span><span class=\"br0\">(</span>n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">%</span> <span class=\"br0\">(</span>base<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0!= <span class=\"nu0\">0</span>     <span class=\"co1\"># casting out nine</span><br/>  sqr = <span class=\"br0\">(</span>n <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">to_s</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"nu0\">1</span>...<span class=\"me1\">sqr</span>.<span class=\"me1\">length</span><span class=\"br0\">)</span>.<span class=\"me1\">each</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span><br/>    a = sqr<span class=\"br0\">[</span><span class=\"nu0\">0</span> ... <span class=\"me1\">i</span><span class=\"br0\">]</span><br/>    b = sqr<span class=\"br0\">[</span>i .. <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">break</span> <span class=\"kw1\">if</span> b.<span class=\"me1\">delete</span><span class=\"br0\">(</span><span class=\"st0\">\"0\"</span><span class=\"br0\">)</span>.<span class=\"me1\">empty</span>?<br/>    sum = a.<span class=\"me1\">to_i</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span> <span class=\"sy0\">+</span> b.<span class=\"me1\">to_i</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span><br/>    <span class=\"kw2\">return</span> n.<span class=\"me1\">to_s</span><span class=\"br0\">(</span>base<span class=\"br0\">)</span>, sqr, a, b <span class=\"kw1\">if</span> sum == n<br/>  <span class=\"kw1\">end</span><br/>  <span class=\"kw2\">nil</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>count = <span class=\"nu0\">0</span><br/><span class=\"nu0\">1</span>.<span class=\"me1\">upto</span><span class=\"br0\">(</span><span class=\"nu0\">10</span>_000 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> <br/>  <span class=\"kw1\">if</span> result = kaprekar<span class=\"br0\">(</span>i<span class=\"br0\">)</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"%4d \u00a0%8d \u00a0%s +\u00a0%s\"</span> <span class=\"sy0\">%</span> result<br/>    count <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"nu0\">10</span>_000.<span class=\"me1\">upto</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>_000_000 <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> count <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span> <span class=\"kw1\">if</span> kaprekar<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">}</span><br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"#{count} kaprekar numbers under 1,000,000\"</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>base17 kaprekar numbers under (base10)1,000,000\"</span><br/>base = <span class=\"nu0\">17</span><br/><span class=\"nu0\">1</span>.<span class=\"me1\">upto</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>_000_000<span class=\"br0\">)</span> <span class=\"kw1\">do</span> <span class=\"sy0\">|</span>decimal<span class=\"sy0\">|</span><br/>  <span class=\"kw1\">if</span> result = kaprekar<span class=\"br0\">(</span>decimal, base<span class=\"br0\">)</span><br/>    <span class=\"kw3\">puts</span> <span class=\"st0\">\"%7s \u00a0%5s \u00a0%9s \u00a0%s +\u00a0%s\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>decimal, <span class=\"sy0\">*</span>result<span class=\"br0\">]</span><br/>  <span class=\"kw1\">end</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Run BASIC", "loc": 7, "block": "<pre class=\"text highlighted_source\">for i   = 1 to 5000<br/>  x$    = str$(i * i)<br/>  if i  = 1 then x$ = \"10\"<br/>  for j = 1 to len(x$) - 1<br/>   if (val(left$(x$,j)) + val(mid$(x$,j+1)) = i and val(mid$(x$,j+1)) &lt;&gt; 0) or i = 1  then print \"Kaprekar\u00a0:\";left$(x$,j);\" + \";mid$(x$,j+1);\" = \";i<br/>  next j<br/>next i</pre>"}, {"lang": "Scala", "loc": 39, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Kaprekar <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> isKaprekar<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, base<span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>Option<span class=\"br0\">[</span>Triple<span class=\"br0\">[</span>String,String,String<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> check<span class=\"sy0\">:</span> Long <span class=\"sy0\">=&gt;</span> Option<span class=\"br0\">[</span>Triple<span class=\"br0\">[</span>String,String,String<span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> n <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> split<span class=\"sy0\">:</span> Pair<span class=\"br0\">[</span>String, Int<span class=\"br0\">]</span> <span class=\"sy0\">=&gt;</span> Pair<span class=\"br0\">[</span>String, String<span class=\"br0\">]</span> <span class=\"sy0\">=</span> p <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>p.<span class=\"sy0\">_</span>1.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span>,p.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span>,p.<span class=\"sy0\">_</span>1.<span class=\"me1\">slice</span><span class=\"br0\">(</span>p.<span class=\"sy0\">_</span>2,p.<span class=\"sy0\">_</span>1.<span class=\"me1\">size</span><span class=\"br0\">)</span>.<span class=\"me1\">padTo</span><span class=\"br0\">[</span>Char,String<span class=\"br0\">]</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"st0\">'0'</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> pwr <span class=\"sy0\">=</span> n<span class=\"sy0\">*</span>n<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sN <span class=\"sy0\">=</span> java.<span class=\"me1\">lang</span>.<span class=\"me1\">Long</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>n, base<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> sPwr <span class=\"sy0\">=</span> java.<span class=\"me1\">lang</span>.<span class=\"me1\">Long</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>pwr, base<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">1</span> to sPwr.<span class=\"me1\">size</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> <span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"sy0\">=</span> split<span class=\"br0\">(</span>sPwr,i<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> la <span class=\"sy0\">=</span> java.<span class=\"me1\">lang</span>.<span class=\"me1\">Long</span>.<span class=\"me1\">parseLong</span><span class=\"br0\">(</span>a, base<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> lb <span class=\"sy0\">=</span> java.<span class=\"me1\">lang</span>.<span class=\"me1\">Long</span>.<span class=\"me1\">parseLong</span><span class=\"br0\">(</span>b, base<span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>lb<span class=\"sy0\">==</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> None<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>la+lb<span class=\"sy0\">==</span>n<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> Some<span class=\"br0\">(</span>Triple<span class=\"br0\">(</span>sPwr,a,b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>      None    <br/>    <span class=\"br0\">}</span><br/>    n <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">=&gt;</span> Some<span class=\"br0\">(</span>Triple<span class=\"br0\">(</span><span class=\"st0\">\"1\"</span>,<span class=\"st0\">\"0\"</span>,<span class=\"st0\">\"1\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> n <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n<span class=\"sy0\">&gt;</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> check<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> None<br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> kaprekars<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int,base<span class=\"sy0\">:</span> Int<span class=\"sy0\">=</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> to n<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>isKaprekar<span class=\"br0\">(</span><span class=\"sy0\">_</span>,base<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">zip</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> to n<span class=\"br0\">)</span>.<span class=\"me1\">filter</span><span class=\"br0\">(</span><span class=\"sy0\">_</span>.<span class=\"sy0\">_</span>1<span class=\"sy0\">!=</span>None<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>p<span class=\"sy0\">=&gt;</span>Triple<span class=\"br0\">(</span>base,p.<span class=\"sy0\">_</span>2,p.<span class=\"sy0\">_</span>1 <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Some<span class=\"br0\">(</span>t<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> t<span class=\"sy0\">;</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"sy0\">_</span> <span class=\"sy0\">=&gt;</span> Nil<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> k1 <span class=\"sy0\">=</span> kaprekars<span class=\"br0\">(</span><span class=\"nu0\">10000</span><span class=\"br0\">)</span><br/>  k1 foreach <span class=\"br0\">{</span>p<span class=\"sy0\">=&gt;</span>println<span class=\"br0\">(</span>p.<span class=\"sy0\">_</span>2<span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  println<span class=\"br0\">(</span>k1.<span class=\"me1\">size</span> + <span class=\"st0\">\" Kaprekar numbers &lt; 10000 (b:10) for base 10\"</span>+<span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> k2 <span class=\"sy0\">=</span> kaprekars<span class=\"br0\">(</span><span class=\"nu0\">1000000</span><span class=\"br0\">)</span><br/>  k2 foreach <span class=\"br0\">{</span>p <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>p.<span class=\"sy0\">_</span>2+<span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span>+java.<span class=\"me1\">lang</span>.<span class=\"me1\">Long</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>p.<span class=\"sy0\">_</span>2,p.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span>+<span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span>+p.<span class=\"sy0\">_</span>3.<span class=\"me1\">productElement</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>+<span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span>+p.<span class=\"sy0\">_</span>3.<span class=\"me1\">productElement</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>+<span class=\"st0\">\" + \"</span>+p.<span class=\"sy0\">_</span>3.<span class=\"me1\">productElement</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  println<span class=\"br0\">(</span>k2.<span class=\"me1\">size</span> + <span class=\"st0\">\" Kaprekar numbers &lt; 1000000 (b:10) for base 10\"</span>+<span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> k3 <span class=\"sy0\">=</span> kaprekars<span class=\"br0\">(</span><span class=\"nu0\">1000000</span>,<span class=\"nu0\">17</span><span class=\"br0\">)</span><br/>  k3 foreach <span class=\"br0\">{</span>p <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>p.<span class=\"sy0\">_</span>2+<span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span>+java.<span class=\"me1\">lang</span>.<span class=\"me1\">Long</span>.<span class=\"me1\">toString</span><span class=\"br0\">(</span>p.<span class=\"sy0\">_</span>2,p.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span>+<span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span>+p.<span class=\"sy0\">_</span>3.<span class=\"me1\">productElement</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span>+<span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span>+p.<span class=\"sy0\">_</span>3.<span class=\"me1\">productElement</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>+<span class=\"st0\">\" + \"</span>+p.<span class=\"sy0\">_</span>3.<span class=\"me1\">productElement</span><span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><br/>  println<span class=\"br0\">(</span>k3.<span class=\"me1\">size</span> + <span class=\"st0\">\" Kaprekar numbers &lt; 1000000 (b:10) for base 17\"</span>+<span class=\"st0\">\"<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">*</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 27, "block": "<pre class=\"scheme highlighted_source\"><span class=\"co1\">; auxiliary functions\u00a0: range, filter</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>range a b<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>v '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>i b<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">&lt;</span> i a<span class=\"br0\">)</span><br/>    v<br/>    <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"kw1\">cons</span> i v<span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span><span class=\"sy0\">-</span> i <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>filter p u<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"kw1\">equal?</span> u '<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    '<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>x <span class=\"br0\">(</span><span class=\"kw1\">car</span> u<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>v <span class=\"br0\">(</span>filter p <span class=\"br0\">(</span><span class=\"kw1\">cdr</span> u<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">if</span> <span class=\"br0\">(</span>p x<span class=\"br0\">)</span><br/>             <span class=\"br0\">(</span><span class=\"kw1\">cons</span> x v<span class=\"br0\">)</span><br/>             v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>kaprekar? n<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">or</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>q <span class=\"br0\">(</span><span class=\"sy0\">*</span> n n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> loop <span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span><span class=\"kw1\">cond</span> <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> p q<span class=\"br0\">)</span> #f<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"br0\">(</span><span class=\"kw1\">remainder</span> q p<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>b <span class=\"br0\">(</span><span class=\"kw1\">quotient</span> q p<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                     <span class=\"br0\">(</span><span class=\"kw1\">and</span> <span class=\"br0\">(</span><span class=\"sy0\">&gt;</span> a <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">=</span> n <span class=\"br0\">(</span><span class=\"sy0\">+</span> a b<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> #t<span class=\"br0\">)</span><br/>               <span class=\"br0\">(</span><span class=\"kw1\">else</span> <span class=\"br0\">(</span>loop <span class=\"br0\">(</span><span class=\"sy0\">*</span> p <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>filter kaprekar? <span class=\"br0\">(</span>range <span class=\"nu0\">1</span> <span class=\"nu0\">10000</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">; (1 9 45 55 99 297 703 999 2223 2728 4879 4950 5050 5292 7272 7777 9999)</span></pre>"}, {"lang": "Seed7", "loc": 62, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"bigint.s7i\";<br/>\u00a0<br/>const func bigInteger: kaprekar (in bigInteger: n, in bigInteger: base) is func<br/>  result<br/>    var bigInteger: kaprekar is 0_;<br/>  local<br/>    var bigInteger: nn is 0_;<br/>    var bigInteger: r is 0_;<br/>    var bigInteger: powerOfBase is 1_;<br/>  begin<br/>    nn\u00a0:= n ** 2;<br/>    while powerOfBase &lt; n do<br/>      powerOfBase *:= base;<br/>    end while;<br/>    if n = powerOfBase then<br/>      kaprekar\u00a0:= bigInteger conv ord(n = 1_);<br/>    else<br/>      r\u00a0:= nn rem powerOfBase;<br/>      while r &lt; n do<br/>        if nn div powerOfBase + r = n then<br/>          kaprekar\u00a0:= powerOfBase;<br/>          r\u00a0:= n;<br/>        else<br/>\t  powerOfBase *:= base;<br/>          r\u00a0:= nn rem powerOfBase;<br/>        end if;<br/>      end while;<br/>    end if;<br/>  end func;<br/>\u00a0<br/>const proc: main is func<br/>  local<br/>    var bigInteger: aNumber is 0_;<br/>    var integer: count is 0;<br/>    var bigInteger: powerOfBase is 1_;<br/>    const integer: base is 17;<br/>  begin<br/>    writeln(\"base 10:\");<br/>    for aNumber range 1_ to 1000000_ do<br/>      if kaprekar(aNumber, 10_) &lt;&gt; 0_ then<br/>        incr(count);<br/>        writeln(count lpad 3 &lt;&amp; \": \" &lt;&amp; aNumber);<br/>      end if;<br/>    end for;<br/>    writeln;<br/>    writeln(\"base \" &lt;&amp; base &lt;&amp; \":\");<br/>    writeln(\"  1: 1\");<br/>    count\u00a0:= 1;<br/>    for aNumber range 2_ to 1000000_ do<br/>      powerOfBase\u00a0:= kaprekar(aNumber, bigInteger conv base);<br/>      if powerOfBase &lt;&gt; 0_ then<br/>        incr(count);<br/>        write(count lpad 3 &lt;&amp; \": \" &lt;&amp; aNumber);<br/>        write(\" \\t\" &lt;&amp; aNumber radix base);<br/>        write(\"\\t\"  &lt;&amp; aNumber ** 2 radix base);<br/>        write(\"\\t\"  &lt;&amp; aNumber ** 2 mdiv powerOfBase radix base);<br/>        write(\" + \" &lt;&amp; aNumber ** 2 mod powerOfBase radix base);<br/>        writeln;<br/>      end if;<br/>    end for;<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 18, "block": "<pre class=\"ruby highlighted_source\">var kap = <span class=\"kw4\">Hash</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>..<span class=\"nu0\">15</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var np = <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">**</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    np.<span class=\"me1\">divisors</span>.<span class=\"me1\">each</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>d<span class=\"sy0\">|</span><br/>        var dp = np<span class=\"sy0\">/</span>d<br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>is_coprime<span class=\"br0\">(</span>dp, d<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            kap<span class=\"br0\">{</span> dp == <span class=\"nu0\">1</span>\u00a0? d\u00a0: d<span class=\"sy0\">*</span>invmod<span class=\"br0\">(</span>d, dp<span class=\"br0\">)</span> <span class=\"br0\">}</span>\u00a0:= <span class=\"nu0\">0</span> <span class=\"sy0\">++</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var nums = kap.<span class=\"me1\">keys</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span> Num<span class=\"br0\">(</span>_<span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">sort</span><br/>\u00a0<br/><span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"br0\">(</span><span class=\"nu0\">6</span> .. <span class=\"nu0\">14</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var np = <span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">**</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"Kaprekar numbers &lt;= 10^%2d: \u00a0%5d<span class=\"es0\">\\n</span>\"</span>, n, nums.<span class=\"me1\">count_by</span> <span class=\"br0\">{</span> .<span class=\"sy0\">&lt;</span>= np <span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "SPL", "loc": 20, "block": "<pre class=\"text highlighted_source\">kap,n = getkap(1000000)<br/>&gt; i, 1..n<br/>  &lt;&lt; kap[i]!&lt;10000<br/>  #.output(kap[i])<br/>&lt;<br/>#.output(n,\" Kaprekar numbers &lt; 1000000\")<br/>\u00a0<br/>getkap(x)=<br/>  &gt; k, 1..x<br/>    n = #.lower(#.log10(k^2))+1<br/>    &gt; i, 1..n<br/>      r = k^2%10^i<br/>      &lt;&lt; r&gt;k<br/>      &gt;&gt; r=0<br/>      l = #.lower(k^2/10^i)<br/>     \u00a0? r+l=k, kap[#.size(kap,1)+1] = k<br/>    &lt;<br/>  &lt;<br/>  &lt;= kap,#.size(kap,1)<br/>.</pre>"}, {"lang": "Tcl", "loc": 25, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><span class=\"sy0\">;</span>   <span class=\"co1\"># Arbitrary precision arithmetic, for stretch goal only</span><br/><span class=\"kw1\">proc</span> kaprekar n <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> == <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw1\">return</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">set</span> s <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span> <span class=\"sy0\">*</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"br0\">[</span><span class=\"kw2\">string</span> length <span class=\"re0\">$s</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">scan</span> <span class=\"re0\">$s</span> <span class=\"st0\">\"%${i}d%d\"</span> a b<br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"re0\">$b</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"re0\">$n</span> == <span class=\"re0\">$a</span> + <span class=\"re0\">$b</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>\t    <span class=\"co1\">#return [list 1 $a $b]</span><br/>\t<span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Base goal</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">10000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">if</span> <span class=\"br0\">{</span><span class=\"br0\">[</span>kaprekar <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">lappend</span> klist <span class=\"re0\">$i</span><span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">join</span> <span class=\"re0\">$klist</span> <span class=\"st0\">\", \"</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\"># Stretch goal</span><br/><span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1000000</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">incr</span> kcount <span class=\"br0\">[</span>kaprekar <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/><span class=\"kw2\">puts</span> <span class=\"st0\">\"$kcount Kaprekar numbers less than 1000000\"</span></pre>"}, {"lang": "Ursala", "loc": 8, "block": "<pre class=\"text highlighted_source\">#import std<br/>#import nat<br/>\u00a0<br/>kd(\"p\",\"r\") = ~&amp;ihB+ (~&amp;rr&amp;&amp; ^|E/~&amp; sum)~|^/~&amp; \"r\"~~*hNCtXS+ cuts\\1+ \"p\"+ <a class=\"__cf_email__\" data-cfemail=\"fd8d8f9299889e89bd9494a5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>\u00a0<br/>#cast\u00a0%nLnX<br/>\u00a0<br/>t = ^|(~&amp;,length) (iota;\u00a0:/1+ ~&amp;rFlS+ * ^/~&amp; kd\\%np ~&amp;h+\u00a0%nP)~~/10000 1000000</pre>"}, {"lang": "Wortel", "loc": 19, "block": "<pre class=\"text highlighted_source\">@let {<br/>  isKap &amp;n [<br/>    @var s +'' *n n<br/>    @for i til +1/#s 2 [<br/>      @vars {<br/>        fn @+!!s.slice 0 i <br/>        sn @+!s.slice i<br/>      }<br/>      @if =0 sn @break<br/>      @if =n +fn sn @return [fn sn]<br/>    ]<br/>    false<br/>  ]<br/>\u00a0<br/>  ~[<br/>   \u00a0!console.log \"Kaprekar numbers below 10000: {!-isKap @to 1TK}\"<br/>   \u00a0!console.log \"Number of Kaprekar numbers below 1000000: {#!-isKap @to 1M}\"<br/>  ]<br/>}</pre>"}, {"lang": "XPL0", "loc": 33, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;  \\intrinsic 'code' declarations<br/>\u00a0<br/>func Kaprekar(N, B);    \\Returns 'true' if N is a Kaprekar number in base B<br/>int  N, B;<br/>real N2, D; int Q, R;<br/>[N2:= sq(float(N));                     \\N squared<br/>D:= float(B);                           \\(divider)<br/>loop    [Q:= fix(N2/D - Mod(N2,1.));    \\get left part (quotient)<br/>        R:= fix(Mod(N2,D));             \\get right part (remainder)<br/>        if Q=0 then return false;<br/>        if Q+R=N &amp; R#0 then return true;<br/>        D:= D * float(B);<br/>        ];<br/>];<br/>\u00a0<br/>int N, C;<br/>[Format(1,0);           \\show one place before decimal point and none after it<br/>RlOut(0, 1.);           \\show Kaprekar numbers less than ten thousand<br/>for N:= 2 to 10_000-1 do<br/>        if Kaprekar(N, 10) then<br/>                [Text(0, \" \");  IntOut(0, N)];<br/>CrLf(0);<br/>C:= 1;                  \\show count of Kaprekar numbers less than one million<br/>for N:= 2 to 1_000_000-1 do<br/>        if Kaprekar(N, 10) then C:= C+1;<br/>IntOut(0, C);<br/>CrLf(0);<br/>RlOut(0, 1.);           \\show Kaprekar numbers less than one million in base 17<br/>for N:= 2 to 1_000_000-1 do<br/>        if Kaprekar(N, 17) then<br/>                [Text(0, \" \");  IntOut(0, N)];<br/>CrLf(0);<br/>]</pre>"}, {"lang": "Yabasic", "loc": 23, "block": "<pre class=\"text highlighted_source\">clear screen<br/>n = 0<br/>FOR i = 1 TO 999999<br/>    IF FNkaprekar(i) THEN<br/>\tn = n + 1<br/>\tIF i &lt; 100001 PRINT n, \": \", i<br/>    ENDIF<br/>NEXT i<br/>PRINT \"Total Kaprekar numbers under 1,000,000 = \", n<br/>END<br/>\u00a0<br/>sub FNkaprekar(n)<br/>    LOCAL s, t<br/>\u00a0<br/>    s = n^2<br/>    t = 10^(INT(LOG(s)) + 1)<br/>    do<br/>\tt=t/10<br/>\tIF t&lt;=n break<br/>\tIF s-n = INT(s/t)*(t-1) return TRUE<br/>    loop<br/>    return (n=1)<br/>end sub</pre>"}, {"lang": "zkl", "loc": 11, "block": "<pre class=\"text highlighted_source\">fcn isKaprekarB(n,b=10){<br/>   powr:=n*n;<br/>   r:=l:=0; tens:=b;<br/>   while(r&lt;n){<br/>      r = powr\u00a0% tens;<br/>      l = powr / tens;<br/>      if (r and (l + r == n)) return(True);<br/>      tens *= b;<br/>   }<br/>   return(False);<br/>}</pre>"}]}