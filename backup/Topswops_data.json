{"task": "Topswops", "blocks": [{"lang": "360 Assembly", "loc": 121, "block": "<pre class=\"text highlighted_source\">*        Topswops optimized        12/07/2016<br/>TOPSWOPS CSECT<br/>         USING  TOPSWOPS,R13       base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         STM    R14,R12,12(R13)    prolog<br/>         ST     R13,4(R15)         \" &lt;-<br/>         ST     R15,8(R13)         \" -&gt;<br/>         LR     R13,R15            \" addressability<br/>         MVC    N,=F'1'            n=1<br/>LOOPN    L      R4,N               n; do n=1 to 10  ===-------------==*<br/>         C      R4,=F'10'          \"                                  *<br/>         BH     ELOOPN             .                                  *<br/>         MVC    P(40),PINIT        p=pinit<br/>         MVC    COUNTM,=F'0'       countm=0<br/>REPEAT   MVC    CARDS(40),P        cards=p  -------------------------+<br/>         SR     R11,R11            count=0                           |<br/>WHILE    CLC    CARDS,=F'1'        do while cards(1)^=1  ---------+<br/>         BE     EWHILE             .                              |<br/>         MVC    M,CARDS            m=cards(1)<br/>         L      R2,M               m<br/>         SRA    R2,1               m/2<br/>         ST     R2,MD2             md2=m/2<br/>         L      R3,M               @card(mm)=m<br/>         SLA    R3,2               *4<br/>         LA     R3,CARDS-4(R3)     @card(mm)<br/>         LA     R2,CARDS           @card(i)=0<br/>         LA     R6,1               i=1<br/>LOOPI    C      R6,MD2             do i=1 to m/2  -------------+<br/>         BH     ELOOPI             .                           |<br/>         L      R0,0(R2)           swap r0=cards(i)<br/>         MVC    0(4,R2),0(R3)      swap cards(i)=cards(mm)<br/>         ST     R0,0(R3)           swap cards(mm)=r0<br/>         AH     R2,=H'4'           @card(i)<a class=\"__cf_email__\" data-cfemail=\"55681536342731\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(i)+4<br/>         SH     R3,=H'4'           @card(mm)<a class=\"__cf_email__\" data-cfemail=\"ecd1ac8f8d9e88\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(mm)-4<br/>         LA     R6,1(R6)           i=i+1                       |<br/>         B      LOOPI              ----------------------------+<br/>ELOOPI   LA     R11,1(R11)         count=count+1                  |<br/>         B      WHILE              -------------------------------+<br/>EWHILE   C      R11,COUNTM         if count&gt;countm<br/>         BNH    NOTGT              then<br/>         ST     R11,COUNTM           countm=count<br/>NOTGT    BAL    R14,NEXTPERM       call nextperm<br/>         LTR    R0,R0              until nextperm=0                 |<br/>         BNZ    REPEAT             ---------------------------------+<br/>         L      R1,N               n<br/>         XDECO  R1,XDEC            edit n<br/>         MVC    PG(2),XDEC+10      output n<br/>         MVI    PG+2,C':'          output ':'<br/>         L      R1,COUNTM          countm<br/>         XDECO  R1,XDEC            edit countm<br/>         MVC    PG+3(4),XDEC+8     output countm<br/>         XPRNT  PG,L'PG            print buffer<br/>         L      R1,N               n                                  *<br/>         LA     R1,1(R1)           +1                                 *<br/>         ST     R1,N               n=n+1                              *<br/>         B      LOOPN              ===------------------------------==*<br/>ELOOPN   L      R13,4(0,R13)       epilog <br/>         LM     R14,R12,12(R13)    \" restore<br/>         XR     R15,R15            \" rc=0<br/>         BR     R14                exit<br/>PINIT    DC     F'1',F'2',F'3',F'4',F'5',F'6',F'7',F'8',F'9',F'10'<br/>CARDS    DS     10F                cards<br/>P        DS     10F                p<br/>COUNTM   DS     F                  countm<br/>M        DS     F                  m<br/>N        DS     F                  n<br/>MD2      DS     F                  m/2<br/>PG       DC     CL20' '            buffer<br/>XDEC     DS     CL12               temp<br/>*------- ----   nextperm ----------{-----------------------------------<br/>NEXTPERM L      R9,N               nn=n<br/>         SR     R8,R8              jj=0<br/>         LR     R7,R9              nn<br/>         BCTR   R7,0               j=nn-1<br/>         LTR    R7,R7              if j=0<br/>         BZ     ELOOPJ1            then skip do loop<br/>LOOPJ1   LR     R1,R7              do j=nn-1 to 1 by -1; j ----+<br/>         SLA    R1,2               .                           |<br/>         L      R2,P-4(R1)         p(j)<br/>         C      R2,P(R1)           if p(j)&lt;p(j+1)<br/>         BNL    PJGEPJP            then<br/>         LR     R8,R7                jj=j<br/>         B      ELOOPJ1              leave j                   |<br/>PJGEPJP  BCT    R7,LOOPJ1          j=j-1  ---------------------+<br/>ELOOPJ1  LA     R7,1(R8)           j=jj+1<br/>LOOPJ2   CR     R7,R9              do j=jj+1 while j&lt;nn  ------+<br/>         BNL    ELOOPJ2            .                           |<br/>         LR     R2,R7              j<br/>         SLA    R2,2               .<br/>         LR     R3,R9              nn<br/>         SLA    R3,2               .<br/>         L      R0,P-4(R2)         swap p(j),p(nn)<br/>         L      R1,P-4(R3)         \"<br/>         ST     R0,P-4(R3)         \"<br/>         ST     R1,P-4(R2)         \"<br/>         BCTR   R9,0               nn=nn-1<br/>         LA     R7,1(R7)           j=j+1                       |<br/>         B      LOOPJ2             ----------------------------+<br/>ELOOPJ2  LTR    R8,R8              if jj=0<br/>         BNZ    JJNE0              then<br/>         LA     R0,0                 return(0)<br/>         BR     R14                  \"<br/>JJNE0    LA     R7,1(R8)           j=jj+1<br/>         LR     R2,R7              j<br/>         SLA    R2,2               <a class=\"__cf_email__\" data-cfemail=\"fb89bb8b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(j)<br/>         LR     R3,R8              jj<br/>         SLA    R3,2               <a class=\"__cf_email__\" data-cfemail=\"50221020\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(jj)<br/>LOOPJ3   L      R0,P-4(R2)         p(j)  ----------------------+                     <br/>         C      R0,P-4(R3)         do j=jj+1 while p(j)&lt;p(jj)  |<br/>         BNL    ELOOPJ3<br/>         LA     R2,4(R2)           <a class=\"__cf_email__\" data-cfemail=\"e391a393\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(j)<a class=\"__cf_email__\" data-cfemail=\"b588c7f5c5\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>(j)+4<br/>         LA     R7,1(R7)           j=j+1                       |<br/>         B      LOOPJ3             ----------------------------+<br/>ELOOPJ3  L      R1,P-4(R3)         swap p(j),p(jj)<br/>         ST     R0,P-4(R3)         \"<br/>         ST     R1,P-4(R2)         \"<br/>         LA     R0,1               return(1)<br/>         BR     R14 ---------------}-----------------------------------<br/>         YREGS<br/>         END    TOPSWOPS</pre>"}, {"lang": "Ada", "loc": 39, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Integer_Text_IO</span>, Generic_Perm;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Topswaps <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">function</span> Topswaps<span class=\"br0\">(</span>Size: Positive<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span><br/>      <span class=\"kw3\">package</span> Perms <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Generic_Perm<span class=\"br0\">(</span>Size<span class=\"br0\">)</span>;<br/>      P: Perms.<span class=\"me1\">Permutation</span>;<br/>      Done: Boolean;<br/>      Max: Natural;<br/>\u00a0<br/>      <span class=\"kw3\">function</span> Swapper_Calls<span class=\"br0\">(</span>P: Perms.<span class=\"me1\">Permutation</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> Natural <span class=\"kw1\">is</span><br/>\t Q: Perms.<span class=\"me1\">Permutation</span>\u00a0:= P;<br/>\t I: Perms.<span class=\"me1\">Element</span>\u00a0:= P<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">begin</span><br/>\t <span class=\"kw1\">if</span> I = <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <br/>\t    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;<br/>\t <span class=\"kw1\">else</span><br/>\t    <span class=\"kw1\">for</span> Idx <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"me1\">I</span> <span class=\"kw1\">loop</span><br/>\t       Q<span class=\"br0\">(</span>Idx<span class=\"br0\">)</span>\u00a0:= P<span class=\"br0\">(</span>I-Idx+<span class=\"nu0\">1</span><span class=\"br0\">)</span>;<br/>\t    <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>\t    <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> + Swapper_Calls<span class=\"br0\">(</span>Q<span class=\"br0\">)</span>;<br/>\t <span class=\"kw1\">end</span> <span class=\"kw1\">if</span>;<br/>      <span class=\"kw1\">end</span> Swapper_Calls;<br/>\u00a0<br/>   <span class=\"kw1\">begin</span><br/>      Perms.<span class=\"me1\">Set_To_First</span><span class=\"br0\">(</span>P, Done<span class=\"br0\">)</span>;<br/>      Max:= Swapper_Calls<span class=\"br0\">(</span>P<span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">while</span> <span class=\"kw2\">not</span> Done <span class=\"kw1\">loop</span><br/>\t Perms.<span class=\"me1\">Go_To_Next</span><span class=\"br0\">(</span>P, Done<span class=\"br0\">)</span>;<br/>\t Max\u00a0:= natural'Max<span class=\"br0\">(</span>Max, Swapper_Calls<span class=\"br0\">(</span>P<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/>      <span class=\"kw1\">return</span> Max;<br/>   <span class=\"kw1\">end</span> Topswaps;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   <span class=\"kw1\">for</span> I <span class=\"kw3\">in</span> <span class=\"nu0\">1</span> .. <span class=\"nu0\">10</span> <span class=\"kw1\">loop</span><br/>      Ada.<span class=\"me1\">Integer_Text_IO</span>.<span class=\"me1\">Put</span><span class=\"br0\">(</span>Item =&gt; Topswaps<span class=\"br0\">(</span>I<span class=\"br0\">)</span>, Width =&gt; <span class=\"nu0\">3</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> <span class=\"kw1\">loop</span>;<br/><span class=\"kw1\">end</span> Topswaps;</pre>"}, {"lang": "AutoHotkey", "loc": 12, "block": "<pre class=\"autohotkey highlighted_source\">Topswops<span class=\"br0\">(</span>Obj<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\tR <span class=\"sy0\">:=</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>\tfor i<span class=\"sy0\">,</span> val in obj<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;=</span>n<span class=\"br0\">)</span><br/>\t\t\tres <span class=\"sy0\">:=</span> val <span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"sy0\">=</span><span class=\"nu0\">1</span>?<span class=\"st0\">\"\"</span>:<span class=\"st0\">\",\"</span><span class=\"br0\">)</span> res<br/>\t\t<span class=\"kw1\">else</span><br/>\t\t\tres <span class=\"sy0\">.=</span> <span class=\"st0\">\",\"</span> val <br/>\t<span class=\"br0\">}</span><br/>\t<a href=\"http://www.autohotkey.com/docs/commands/Loop.htm\"><span class=\"kw3\">Loop</span></a><span class=\"sy0\">,</span> Parse<span class=\"sy0\">,</span> res<span class=\"sy0\">,</span> `<span class=\"sy0\">,</span><br/>\t\tR<span class=\"br0\">[</span><a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Index\"><span class=\"kw2\">A_Index</span></a><span class=\"br0\">]</span><span class=\"sy0\">:=</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_LoopField\"><span class=\"kw2\">A_LoopField</span></a><br/>\t<span class=\"kw1\">return</span> R<br/><span class=\"br0\">}</span></pre>"}, {"lang": "C", "loc": 45, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;string.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">struct</span> <span class=\"br0\">{</span> <span class=\"kw4\">char</span> v<span class=\"br0\">[</span><span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span> deck<span class=\"sy0\">;</span><br/><span class=\"kw4\">typedef</span> <span class=\"kw4\">unsigned</span> <span class=\"kw4\">int</span> uint<span class=\"sy0\">;</span><br/>\u00a0<br/>uint n<span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> best<span class=\"br0\">[</span><span class=\"nu0\">16</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> tryswaps<span class=\"br0\">(</span>deck <span class=\"sy0\">*</span>a<span class=\"sy0\">,</span> uint f<span class=\"sy0\">,</span> uint s<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"co2\">#\tdefine A a-&gt;v</span><br/><span class=\"co2\">#\tdefine B b.v</span><br/>\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">&gt;</span> best<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> best<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> d<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">while</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"sy0\">==</span> s <span class=\"sy0\">||</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">&amp;&amp;</span> <span class=\"sy0\">!</span><span class=\"br0\">(</span>f <span class=\"sy0\">&amp;</span> 1U <span class=\"sy0\">&lt;&lt;</span> s<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>d <span class=\"sy0\">+</span> best<span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"sy0\">&gt;=</span> best<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">||</span> A<span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">break</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">+</span> best<span class=\"br0\">[</span>s<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> best<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!--</span>s<span class=\"br0\">)</span> <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\td<span class=\"sy0\">++;</span><br/>\tdeck b <span class=\"sy0\">=</span> <span class=\"sy0\">*</span>a<span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>uint i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> s<span class=\"sy0\">;</span> k <span class=\"sy0\">&lt;&lt;=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">if</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> i <span class=\"sy0\">&amp;&amp;</span> <span class=\"br0\">(</span>A<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">||</span> <span class=\"br0\">(</span>f <span class=\"sy0\">&amp;</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>uint j <span class=\"sy0\">=</span> B<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span> j<span class=\"sy0\">--;</span><span class=\"br0\">)</span> B<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> A<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\t\ttryswaps<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>b<span class=\"sy0\">,</span> f <span class=\"sy0\">|</span> k<span class=\"sy0\">,</span> s<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\td<span class=\"sy0\">--;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">void</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\tdeck x<span class=\"sy0\">;</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/memset.html\"><span class=\"kw3\">memset</span></a><span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>x<span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tx.<span class=\"me1\">v</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">for</span> <span class=\"br0\">(</span>n <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">13</span><span class=\"sy0\">;</span> n<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t\ttryswaps<span class=\"br0\">(</span><span class=\"sy0\">&amp;</span>x<span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%2d:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> n<span class=\"sy0\">,</span> best<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 26, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/><span class=\"co2\">#include &lt;numeric&gt;</span><br/><span class=\"co2\">#include &lt;algorithm&gt;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> topswops<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> list<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  std<span class=\"sy4\">::</span><span class=\"me2\">iota</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw4\">int</span> max_steps <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">auto</span> temp_list <span class=\"sy1\">=</span> list<span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> steps <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> temp_list<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy3\">!</span><span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>steps<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      std<span class=\"sy4\">::</span><span class=\"me2\">reverse</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>temp_list<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>temp_list<span class=\"br0\">)</span> <span class=\"sy2\">+</span> temp_list<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>      <span class=\"kw1\">if</span> <span class=\"br0\">(</span>steps <span class=\"sy1\">&gt;</span> max_steps<span class=\"br0\">)</span> max_steps <span class=\"sy1\">=</span> steps<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span> <span class=\"kw1\">while</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">next_permutation</span><span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">begin</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span>, std<span class=\"sy4\">::</span><span class=\"me2\">end</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>  <span class=\"kw1\">return</span> max_steps<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">1</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;=</span> <span class=\"nu0\">10</span><span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> i <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\": \"</span> <span class=\"sy1\">&lt;&lt;</span> topswops<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "D", "loc": 15, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> permutations2<span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">int</span> topswops<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> @<span class=\"kw4\">safe</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">static</span> <span class=\"kw4\">int</span> flip<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> xa<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @<span class=\"kw4\">safe</span> @nogc <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"sy0\">!</span>xa<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        xa<span class=\"br0\">[</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"me1\">xa</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span>.<span class=\"me1\">reverse</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> flip<span class=\"br0\">(</span>xa<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> n.<span class=\"me1\">iota</span>.<span class=\"me1\">array</span>.<span class=\"me1\">permutations</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span>flip.<span class=\"me1\">reduce</span><span class=\"sy0\">!</span>max<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span><br/>        writeln<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> <span class=\"st0\">\": \"</span><span class=\"sy0\">,</span> i.<span class=\"me1\">topswops</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Eiffel", "loc": 113, "block": "<pre class=\"eiffel highlighted_source\">\u00a0<br/><span class=\"kw1\">class</span><br/>\tTOPSWOPS<br/>\u00a0<br/><span class=\"kw2\">create</span><br/>\tmake<br/>\u00a0<br/><span class=\"kw1\">feature</span><br/>\u00a0<br/>\tmake <span class=\"br0\">(</span>n<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><br/>\t\t\t<span class=\"co1\">-- Topswop game.</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\tperm, ar<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\t\ttcount, count<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> perm_sol.<span class=\"me1\">make_empty</span><br/>\t\t\t<span class=\"kw2\">create</span> solution.<span class=\"me1\">make_empty</span><br/>\t\t\tacross<br/>\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> n <span class=\"kw2\">as</span> c<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw2\">create</span> ar.<span class=\"me1\">make_filled</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span>, <span class=\"nu0\">1</span>, c.<span class=\"me1\">item</span><span class=\"br0\">)</span><br/>\t\t\t\tacross<br/>\t\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> c.<span class=\"me1\">item</span> <span class=\"kw2\">as</span> d<br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\tar <span class=\"br0\">[</span>d.<span class=\"me1\">item</span><span class=\"br0\">]</span> <span class=\"sy0\">:=</span> d.<span class=\"me1\">item</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\tpermute <span class=\"br0\">(</span>ar, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\tacross<br/>\t\t\t\t\t<span class=\"nu0\">1</span> <span class=\"sy0\">|</span>..<span class=\"sy0\">|</span> perm_sol.<span class=\"me1\">count</span> <span class=\"kw2\">as</span> e<br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\ttcount <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>\t\t\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\t\t\tperm_sol.<span class=\"me1\">at</span> <span class=\"br0\">(</span>e.<span class=\"me1\">item</span><span class=\"br0\">)</span>.<span class=\"me1\">at</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\t\tperm_sol.<span class=\"me1\">at</span> <span class=\"br0\">(</span>e.<span class=\"me1\">item</span><span class=\"br0\">)</span> <span class=\"sy0\">:=</span> reverse_array <span class=\"br0\">(</span>perm_sol.<span class=\"me1\">at</span> <span class=\"br0\">(</span>e.<span class=\"me1\">item</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\t\t\t\t\t\ttcount <span class=\"sy0\">:=</span> tcount <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t\t<span class=\"kw2\">if</span> tcount <span class=\"sy0\">&gt;</span> count <span class=\"kw2\">then</span><br/>\t\t\t\t\t\tcount <span class=\"sy0\">:=</span> tcount<br/>\t\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\tsolution.<span class=\"me1\">force</span> <span class=\"br0\">(</span>count, c.<span class=\"me1\">item</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tsolution<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">feature</span> <span class=\"br0\">{</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+none&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">NONE</span></a><span class=\"br0\">}</span><br/>\u00a0<br/>\tperm_sol<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>\u00a0<br/>\treverse_array <span class=\"br0\">(</span>ar<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\t\t<span class=\"co1\">-- Array with 'ar[1]' elements reversed.</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tar_not_void<span class=\"sy0\">:</span> ar <span class=\"sy0\">/=</span> <span class=\"kw3\">Void</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ti, j<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">make_empty</span><br/>\t\t\t<span class=\"kw3\">Result</span>.<span class=\"me1\">deep_copy</span> <span class=\"br0\">(</span>ar<span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span><br/>\t\t\t\tj <span class=\"sy0\">:=</span> ar <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\ti <span class=\"sy0\">&gt;</span> j<br/>\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> ar <span class=\"br0\">[</span>j<span class=\"br0\">]</span><br/>\t\t\t\t<span class=\"kw3\">Result</span> <span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> ar <span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\tj <span class=\"sy0\">:=</span> j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">ensure</span><br/>\t\t\tsame_elements<span class=\"sy0\">:</span> across ar <span class=\"kw2\">as</span> a <span class=\"kw5\">all</span> <span class=\"kw3\">Result</span>.<span class=\"me1\">has</span> <span class=\"br0\">(</span>a.<span class=\"me1\">item</span><span class=\"br0\">)</span> <span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/>\tpermute <span class=\"br0\">(</span>a<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span>; k<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">)</span><br/>\t\t\t<span class=\"co1\">-- All permutations of array 'a' stored in perm_sol.</span><br/>\t\t<span class=\"kw2\">require</span><br/>\t\t\tar_not_void<span class=\"sy0\">:</span> a.<span class=\"me1\">count</span> <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">1</span><br/>\t\t\tk_valid_index<span class=\"sy0\">:</span> k <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><br/>\t\t<span class=\"kw2\">local</span><br/>\t\t\ti, t<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><br/>\t\t\ttemp<span class=\"sy0\">:</span> <a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+array&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">ARRAY</span></a> <span class=\"br0\">[</span><a href=\"http://www.google.com/search?q=site%3Ahttp%3A%2F%2Fdocs.eiffel.com%2Feiffelstudio%2Flibraries+integer&amp;btnI=I%27m+Feeling+Lucky\"><span class=\"kw4\">INTEGER</span></a><span class=\"br0\">]</span><br/>\t\t<span class=\"kw2\">do</span><br/>\t\t\t<span class=\"kw2\">create</span> temp.<span class=\"me1\">make_empty</span><br/>\t\t\t<span class=\"kw2\">if</span> k <span class=\"sy0\">=</span> a.<span class=\"me1\">count</span> <span class=\"kw2\">then</span><br/>\t\t\t\tacross<br/>\t\t\t\t\ta <span class=\"kw2\">as</span> ar<br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\ttemp.<span class=\"me1\">force</span> <span class=\"br0\">(</span>ar.<span class=\"me1\">item</span>, temp.<span class=\"me1\">count</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t\tperm_sol.<span class=\"me1\">force</span> <span class=\"br0\">(</span>temp, perm_sol.<span class=\"me1\">count</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t<span class=\"kw2\">else</span><br/>\t\t\t\t<span class=\"kw2\">from</span><br/>\t\t\t\t\ti <span class=\"sy0\">:=</span> k<br/>\t\t\t\t<span class=\"kw2\">until</span><br/>\t\t\t\t\ti <span class=\"sy0\">&gt;</span> a.<span class=\"me1\">count</span><br/>\t\t\t\t<span class=\"kw2\">loop</span><br/>\t\t\t\t\tt <span class=\"sy0\">:=</span> a <span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>\t\t\t\t\ta <span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> a <span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>\t\t\t\t\ta <span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> t<br/>\t\t\t\t\tpermute <span class=\"br0\">(</span>a, k <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>\t\t\t\t\tt <span class=\"sy0\">:=</span> a <span class=\"br0\">[</span>k<span class=\"br0\">]</span><br/>\t\t\t\t\ta <span class=\"br0\">[</span>k<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> a <span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>\t\t\t\t\ta <span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">:=</span> t<br/>\t\t\t\t\ti <span class=\"sy0\">:=</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>\t\t\t\t<span class=\"kw2\">end</span><br/>\t\t\t<span class=\"kw2\">end</span><br/>\t\t<span class=\"kw2\">end</span><br/>\u00a0<br/><span class=\"kw2\">end</span><br/>\u00a0</pre>"}, {"lang": "Elixir", "loc": 24, "block": "<pre class=\"text highlighted_source\">defmodule Topswops do<br/>  def get_1_first( [1 | _t] ), do: 0<br/>  def get_1_first( list ), do: 1 + get_1_first( swap(list) )<br/>\u00a0<br/>  defp swap( [n | _t]=list ) do<br/>    {swaps, remains} = Enum.split( list, n )<br/>    Enum.reverse( swaps, remains )<br/>  end<br/>\u00a0<br/>  def task do<br/>    IO.puts \"N\\ttopswaps\"<br/>    Enum.map(1..10, fn n -&gt; {n, permute(Enum.to_list(1..n))} end)<br/>    |&gt; Enum.map(fn {n, n_permutations} -&gt; {n, get_1_first_many(n_permutations)} end)<br/>    |&gt; Enum.map(fn {n, n_swops} -&gt; {n, Enum.max(n_swops)} end)<br/>    |&gt; Enum.each(fn {n, max} -&gt; IO.puts \"#{n}\\t#{max}\" end)<br/>  end<br/>\u00a0<br/>  def get_1_first_many( n_permutations ), do: (for x &lt;- n_permutations, do: get_1_first(x))<br/>\u00a0<br/>  defp permute([]), do: [[]]<br/>  defp permute(list), do: for x &lt;- list, y &lt;- permute(list -- [x]), do: [x|y]<br/>end<br/>\u00a0<br/>Topswops.task</pre>"}, {"lang": "Erlang", "loc": 23, "block": "<pre class=\"erlang highlighted_source\">\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span> topswops <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"kw3\">get</span>_1_first<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> swap<span class=\"sy3\">/</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> task<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"kw3\">get</span>_1_<span class=\"re3\">first</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span> | <span class=\"re5\">_T</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/><span class=\"kw3\">get</span>_1_<span class=\"re3\">first</span><span class=\"br0\">(</span> <span class=\"re5\">List</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy3\">+</span> <span class=\"kw3\">get</span>_1_<span class=\"re3\">first</span><span class=\"br0\">(</span> <span class=\"re3\">swap</span><span class=\"br0\">(</span><span class=\"re5\">List</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">swap</span><span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"re5\">N</span> | <span class=\"re5\">_T</span><span class=\"br0\">]</span><span class=\"sy3\">=</span><span class=\"re5\">List</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"br0\">{</span><span class=\"re5\">Swaps</span><span class=\"sy1\">,</span> <span class=\"re5\">Remains</span><span class=\"br0\">}</span> <span class=\"sy3\">=</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">split</span><span class=\"br0\">(</span> <span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">List</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">reverse</span><span class=\"br0\">(</span> <span class=\"re5\">Swaps</span> <span class=\"br0\">)</span> <span class=\"sy3\">++</span> <span class=\"re5\">Remains</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">task</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">Permutations</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">X</span><span class=\"sy1\">,</span> permute:<span class=\"re3\">permute</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"re5\">X</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">seq</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Swops</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"kw3\">get</span>_1_<span class=\"re3\">first_many</span><span class=\"br0\">(</span><span class=\"re5\">N_permutations</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">N_permutations</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Permutations</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">Topswops</span> <span class=\"sy3\">=</span> <span class=\"br0\">[</span><span class=\"br0\">{</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <a href=\"http://erlang.org/doc/man/lists.html\"><span class=\"kw5\">lists</span></a>:<span class=\"re3\">max</span><span class=\"br0\">(</span><span class=\"re5\">N_swops</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">N_swops</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Swops</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><br/>\t<a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span> <span class=\"st0\">\"N\ttopswaps~n\"</span> <span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"br0\">[</span><a href=\"http://erlang.org/doc/man/io.html\"><span class=\"kw5\">io</span></a>:<span class=\"re3\">fwrite</span><span class=\"br0\">(</span><span class=\"st0\">\"~p\t~p~n\"</span><span class=\"sy1\">,</span> <span class=\"br0\">[</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Max</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span> <span class=\"br0\">{</span><span class=\"re5\">N</span><span class=\"sy1\">,</span> <span class=\"re5\">Max</span><span class=\"br0\">}</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">Topswops</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0<br/>\u00a0<br/>\u00a0<br/><span class=\"kw3\">get</span>_1_<span class=\"re3\">first_many</span><span class=\"br0\">(</span> <span class=\"re5\">N_permutations</span> <span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span> <span class=\"br0\">[</span><span class=\"kw3\">get</span>_1_<span class=\"re3\">first</span><span class=\"br0\">(</span><span class=\"re5\">X</span><span class=\"br0\">)</span> <span class=\"sy3\">||</span>  <span class=\"re5\">X</span> <span class=\"sy3\">&lt;-</span> <span class=\"re5\">N_permutations</span><span class=\"br0\">]</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "Fortran", "loc": 57, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> top<br/><span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/><span class=\"co1\">contains </span><br/><span class=\"kw1\">recursive</span> <span class=\"kw1\">function</span> f<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>m<span class=\"br0\">)</span><br/>  <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span>, m, x<span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>,y<span class=\"br0\">(</span><span class=\"kw4\">size</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span>, fst<br/>  fst <span class=\"sy0\">=</span> x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>fst <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>    m <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">else</span><br/>    y<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>fst<span class=\"br0\">)</span> <span class=\"sy0\">=</span> x<span class=\"br0\">(</span>fst<span class=\"sy0\">:</span><span class=\"nu0\">1</span><span class=\"sy0\">:-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    y<span class=\"br0\">(</span>fst<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x<span class=\"br0\">(</span>fst<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>    m <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> f<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/><span class=\"kw1\">recursive</span> <span class=\"kw1\">function</span> perms<span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><br/><span class=\"kw3\">integer</span>, <span class=\"kw3\">pointer</span>     <span class=\"sy0\">::</span> <span class=\"me2\">p</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span>, q<span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span><br/><span class=\"kw3\">integer</span>              <span class=\"sy0\">::</span> <span class=\"me2\">x</span><span class=\"br0\">(</span><span class=\"sy0\">:</span><span class=\"br0\">)</span>, n, k, i<br/>n <span class=\"sy0\">=</span> <span class=\"kw4\">size</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/><span class=\"kw1\">if</span> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">then</span><br/>  <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>p<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  p<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> x<br/><span class=\"kw1\">else</span><br/>  q <span class=\"sy0\">=</span>&gt; perms<span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">:</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  k <span class=\"sy0\">=</span> <span class=\"kw4\">ubound</span><span class=\"br0\">(</span>q,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>p<span class=\"br0\">(</span>k<span class=\"sy0\">*</span>n,n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  p <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,n<br/>    p<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>k<span class=\"sy0\">*</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>k<span class=\"sy0\">*</span>i,<span class=\"nu0\">1</span><span class=\"sy0\">:</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> q<span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"nu0\">1</span><span class=\"sy0\">:</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    p<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>k<span class=\"sy0\">*</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>k<span class=\"sy0\">*</span>i,i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    p<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">+</span>k<span class=\"sy0\">*</span><span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>k<span class=\"sy0\">*</span>i,i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> q<span class=\"br0\">(</span><span class=\"sy0\">:</span>,i<span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">if</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span><br/>\u00a0<br/><span class=\"kw1\">program</span> topswort<br/><span class=\"kw3\">use</span> top<br/><span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/><span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">x</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/><span class=\"kw3\">integer</span>, <span class=\"kw3\">pointer</span>  <span class=\"sy0\">::</span> <span class=\"me2\">p</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>,<span class=\"sy0\">:</span><span class=\"br0\">)</span><br/><span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">i</span>, j, m<br/>\u00a0<br/>forall<span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span><span class=\"nu0\">10</span><span class=\"br0\">)</span><br/>  x<span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> i<br/><span class=\"kw1\">end</span> forall<br/>\u00a0<br/><span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>,<span class=\"nu0\">10</span><br/>  p<span class=\"sy0\">=</span>&gt;perms<span class=\"br0\">(</span>x<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">:</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  m <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, <span class=\"kw4\">ubound</span><span class=\"br0\">(</span>p,<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    m <span class=\"sy0\">=</span> <span class=\"kw4\">max</span><span class=\"br0\">(</span>m, f<span class=\"br0\">(</span>p<span class=\"br0\">(</span>j,<span class=\"sy0\">:</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>  print <span class=\"st0\">\"(i3,a,i3)\"</span>, i,<span class=\"st0\">\": \"</span>,m<br/><span class=\"kw1\">end</span> <span class=\"kw1\">do</span>  <br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span><br/>\u00a0</pre>"}, {"lang": "Go", "loc": 55, "block": "<pre class=\"go highlighted_source\"><span class=\"co1\">// Adapted from http://www-cs-faculty.stanford.edu/~uno/programs/topswops.w</span><br/><span class=\"co1\">// at Donald Knuth's web site.  Algorithm credited there to Pepperdine</span><br/><span class=\"co1\">// and referenced to Mathematical Gazette 73 (1989), 131-133.</span><br/><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"st0\">\"fmt\"</span><br/>\u00a0<br/><span class=\"kw1\">const</span> <span class=\"sy1\">(</span> <span class=\"co1\">// array sizes</span><br/>    maxn <span class=\"sy2\">=</span> <span class=\"nu0\">10</span> <span class=\"co1\">// max number of cards</span><br/>    maxl <span class=\"sy2\">=</span> <span class=\"nu0\">50</span> <span class=\"co1\">// upper bound for number of steps</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> maxn<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        fmt<span class=\"sy3\">.</span>Printf<span class=\"sy1\">(</span><span class=\"st0\">\"%d:\u00a0%d<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">,</span> steps<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">))</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> steps<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">var</span> a<span class=\"sy1\">,</span> b <span class=\"sy1\">[</span>maxl<span class=\"sy1\">][</span>maxn <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">]</span><span class=\"kw4\">int</span><br/>    <span class=\"kw1\">var</span> x <span class=\"sy1\">[</span>maxl<span class=\"sy1\">]</span><span class=\"kw4\">int</span><br/>    a<span class=\"sy1\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">][</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">var</span> m <span class=\"kw4\">int</span><br/>    <span class=\"kw1\">for</span> l <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"sy1\">;</span> <span class=\"sy1\">{</span><br/>        x<span class=\"sy1\">[</span>l<span class=\"sy1\">]</span><span class=\"sy2\">++</span><br/>        k <span class=\"sy2\">:=</span> <span class=\"kw4\">int</span><span class=\"sy1\">(</span>x<span class=\"sy1\">[</span>l<span class=\"sy1\">])</span><br/>        <span class=\"kw1\">if</span> k &gt;<span class=\"sy2\">=</span> n <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> l &lt;<span class=\"sy2\">=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">break</span><br/>            <span class=\"sy1\">}</span><br/>            l<span class=\"sy2\">--</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"sy1\">}</span><br/>        <span class=\"kw1\">if</span> a<span class=\"sy1\">[</span>l<span class=\"sy1\">][</span>k<span class=\"sy1\">]</span> <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">if</span> b<span class=\"sy1\">[</span>l<span class=\"sy1\">][</span>k<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>                <span class=\"kw1\">continue</span><br/>            <span class=\"sy1\">}</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> a<span class=\"sy1\">[</span>l<span class=\"sy1\">][</span>k<span class=\"sy1\">]</span> <span class=\"sy2\">!=</span> k<span class=\"sy3\">+</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            <span class=\"kw1\">continue</span><br/>        <span class=\"sy1\">}</span><br/>        a<span class=\"sy1\">[</span>l<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> a<span class=\"sy1\">[</span>l<span class=\"sy1\">]</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> j &lt;<span class=\"sy2\">=</span> k<span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            a<span class=\"sy1\">[</span>l<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> a<span class=\"sy1\">[</span>l<span class=\"sy1\">][</span>k<span class=\"sy3\">-</span>j<span class=\"sy1\">]</span><br/>        <span class=\"sy1\">}</span><br/>        b<span class=\"sy1\">[</span>l<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> b<span class=\"sy1\">[</span>l<span class=\"sy1\">]</span><br/>        a<span class=\"sy1\">[</span>l<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span><span class=\"nu0\">0</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> k <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>        b<span class=\"sy1\">[</span>l<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">][</span>k<span class=\"sy3\">+</span><span class=\"nu0\">1</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">if</span> l &gt; m<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            m <span class=\"sy2\">=</span> l <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"sy1\">}</span><br/>        l<span class=\"sy2\">++</span><br/>        x<span class=\"sy1\">[</span>l<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"nu0\">0</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> m<br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 13, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>permutations<span class=\"br0\">)</span><br/>\u00a0<br/>topswops <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><br/>topswops n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:maximum\"><span class=\"kw3\">maximum</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> tops <span class=\"sy0\">$</span> permutations <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> n<span class=\"br0\">]</span><br/>    <span class=\"kw1\">where</span><br/>        tops    <span class=\"br0\">(</span><span class=\"nu0\">1</span>\u00a0: <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        tops xa<span class=\"sy0\">@</span><span class=\"br0\">(</span>x\u00a0: <span class=\"sy0\">_</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">+</span> tops reordered<br/>            <span class=\"kw1\">where</span><br/>                reordered <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse\"><span class=\"kw3\">reverse</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> x xa<span class=\"br0\">)</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:drop\"><span class=\"kw3\">drop</span></a> x xa<br/>\u00a0<br/>main <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a><br/>        <span class=\"br0\">(</span>\\x <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> x <span class=\"sy0\">++</span> <span class=\"st0\">\":<span class=\"es0\">\\t</span>\"</span> <span class=\"sy0\">++</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show\"><span class=\"kw3\">show</span></a> <span class=\"br0\">(</span>topswops x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">[</span><span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"br0\">]</span></pre>"}, {"lang": "Icon and Unicon", "loc": 21, "block": "<pre class=\"unicon highlighted_source\"><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">every</span> n <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        ts <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">every</span> <span class=\"br0\">(</span>ts <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"sy0\">&lt;:=</span> swop<span class=\"br0\">(</span>permute<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"sy0\">:</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> n <span class=\"sy0\">:</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw4\">write</span><span class=\"br0\">(</span><span class=\"kw4\">right</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"st0\">\": \"</span><span class=\"sy0\">,</span><span class=\"kw4\">right</span><span class=\"br0\">(</span>ts<span class=\"sy0\">,</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">}</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> swop<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    count <span class=\"sy0\">:=</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">while</span> A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">~=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span> <span class=\"br0\">{</span><br/>        A <span class=\"sy0\">:=</span> <span class=\"kw4\">reverse</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">+:</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">|||</span> A<span class=\"br0\">[</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>        count <span class=\"sy0\">+:=</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> count<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> permute<span class=\"br0\">(</span>A<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> <span class=\"sy0\">*</span>A <span class=\"sy0\">&lt;=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> A<br/>    <span class=\"kw1\">suspend</span> <span class=\"br0\">[</span><span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">&lt;-&gt;</span>A<span class=\"br0\">[</span>i <span class=\"sy0\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"sy0\">*</span>A<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">]</span> <span class=\"sy0\">|||</span> permute<span class=\"br0\">(</span>A<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"sy0\">:</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "J", "loc": 1, "block": "<pre class=\"j highlighted_source\">   swops =:  <span class=\"sy0\">((</span>|<a class=\"__cf_email__\" data-cfemail=\"7a543a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>:{. , }.<span class=\"sy0\">)</span>~ {.<span class=\"sy0\">)</span>^:a:</pre>"}, {"lang": "Java", "loc": 47, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Topswops <span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> maxBest <span class=\"sy0\">=</span> <span class=\"nu0\">32</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> best<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw1\">private</span> <span class=\"kw4\">void</span> trySwaps<span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> deck, <span class=\"kw4\">int</span> f, <span class=\"kw4\">int</span> d, <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">&gt;</span> best<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>            best<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> d<span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i<span class=\"sy0\">--</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>deck<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"sy0\">||</span> deck<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> i<span class=\"br0\">)</span><br/>                <span class=\"kw1\">break</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>d <span class=\"sy0\">+</span> best<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> best<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>                <span class=\"kw1\">return</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> deck2 <span class=\"sy0\">=</span> deck.<span class=\"me1\">clone</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">final</span> <span class=\"kw4\">int</span> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> <span class=\"sy0\">&lt;&lt;</span> i<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>deck2<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>f <span class=\"sy0\">&amp;</span> k<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                    <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>            <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>deck2<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> i<span class=\"br0\">)</span><br/>                <span class=\"kw1\">continue</span><span class=\"sy0\">;</span><br/>\u00a0<br/>            deck2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<span class=\"sy0\">;</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy0\">=</span> i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&gt;=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j<span class=\"sy0\">--</span><span class=\"br0\">)</span><br/>                deck2<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> deck<span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span> <span class=\"co1\">// Reverse copy.</span><br/>            trySwaps<span class=\"br0\">(</span>deck2, f <span class=\"sy0\">|</span> k, d <span class=\"sy0\">+</span> <span class=\"nu0\">1</span>, n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> topswops<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">assert</span><span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> n <span class=\"sy0\">&lt;</span> maxBest<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        best<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">int</span><span class=\"br0\">[</span><span class=\"br0\">]</span> deck0 <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            deck0<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        trySwaps<span class=\"br0\">(</span>deck0, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> best<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        best <span class=\"sy0\">=</span> <span class=\"kw1\">new</span> <span class=\"kw4\">int</span><span class=\"br0\">[</span>maxBest<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> <span class=\"nu0\">11</span><span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>i <span class=\"sy0\">+</span> <span class=\"st0\">\": \"</span> <span class=\"sy0\">+</span> topswops<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "jq", "loc": 20, "block": "<pre class=\"text highlighted_source\"># \"while\" as defined here is included in recent versions (&gt;1.4) of jq:<br/>def until(cond; next):<br/>  def _until:<br/>    if cond then . else (next|_until) end;<br/>  _until;<br/>\u00a0<br/># Generate a stream of permutations of [1, ... n].<br/># This implementation uses arity-0 filters for speed.<br/>def permutations:<br/>  # Given a single array, insert generates a stream by inserting (length+1) at different positions<br/>  def insert: # state: [m, array]<br/>     .[0] as $m | (1+(.[1]|length)) as $n<br/>     | .[1]<br/>     | if $m &gt;= 0 then (.[0:$m] + [$n] + .[$m:]), ([$m-1, .] | insert) else empty end;<br/>\u00a0<br/>  if .==0 then []<br/>  elif . == 1 then [1]<br/>  else<br/>    . as $n | ($n-1) | permutations | [$n-1, .] | insert<br/>  end;</pre>"}, {"lang": "Julia", "loc": 65, "block": "<pre class=\"text highlighted_source\">function fannkuch(n)<br/>\tn == 1 &amp;&amp; return 0<br/>\tn == 2 &amp;&amp; return 1<br/>\tp = [1:n]<br/>\tq = copy(p)<br/>\ts = copy(p)<br/>\tsign = 1; maxflips = sum = 0<br/>\twhile true<br/>\t\tq0 = p[1]<br/>\t\tif q0\u00a0!= 1<br/>\t\t\tfor i = 2:n<br/>\t\t\t\tq[i] = p[i]<br/>\t\t\tend<br/>\t\t\tflips = 1<br/>\t\t\twhile true<br/>\t\t\t\tqq = q[q0] #??<br/>\t\t\t\tif qq == 1<br/>\t\t\t\t\tsum += sign*flips<br/>\t\t\t\t\tflips &gt; maxflips &amp;&amp; (maxflips = flips)<br/>\t\t\t\t\tbreak<br/>\t\t\t\tend<br/>\t\t\t\tq[q0] = q0<br/>\t\t\t\tif q0 &gt;= 4<br/>\t\t\t\t\ti = 2; j = q0-1<br/>\t\t\t\t\twhile true<br/>\t\t\t\t\t\tt = q[i]<br/>\t\t\t\t\t\tq[i] = q[j]<br/>\t\t\t\t\t\tq[j] = t<br/>\t\t\t\t\t\ti += 1<br/>\t\t\t\t\t\tj -= 1<br/>\t\t\t\t\t\ti &gt;= j &amp;&amp; break<br/>\t\t\t\t\tend<br/>\t\t\t\tend<br/>\t\t\t\tq0 = qq<br/>\t\t\t\tflips += 1<br/>\t\t\tend<br/>\t\tend<br/>\t\t#permute<br/>\t\tif sign == 1<br/>\t\t\tt = p[2]<br/>\t\t\tp[2] = p[1]<br/>\t\t\tp[1] = t<br/>\t\t\tsign = -1<br/>\t\telse<br/>\t\t\tt = p[2]<br/>\t\t\tp[2] = p[3]<br/>\t\t\tp[3] = t<br/>\t\t\tsign = 1<br/>\t\t\tfor i = 3:n<br/>\t\t\t\tsx = s[i]<br/>\t\t\t\tif sx\u00a0!= 1<br/>\t\t\t\t\ts[i] = sx-1<br/>\t\t\t\t\tbreak<br/>\t\t\t\tend<br/>\t\t\t\ti == n &amp;&amp; return maxflips<br/>\t\t\t\ts[i] = i<br/>\t\t\t\tt = p[1]<br/>\t\t\t\tfor j = 1:i<br/>\t\t\t\t\tp[j] = p[j+1]<br/>\t\t\t\tend<br/>\t\t\t\tp[i+1] = t<br/>\t\t\tend<br/>\t\tend<br/>\tend<br/>end</pre>"}, {"lang": "Kotlin", "loc": 35, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.2</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> best <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span><span class=\"nu0\">32</span><span class=\"br0\">)</span><br/>\u00a0<br/>fun trySwaps<span class=\"br0\">(</span>deck<span class=\"sy0\">:</span> IntArray, f<span class=\"sy0\">:</span> Int, d<span class=\"sy0\">:</span> Int, n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>d <span class=\"sy0\">&gt;</span> best<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> best<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> d<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in n - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>deck<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> -<span class=\"nu0\">1</span> || deck<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> i<span class=\"br0\">)</span> break<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>d + best<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">&lt;=</span> best<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> deck2 <span class=\"sy0\">=</span> deck.<span class=\"me1\">copyOf</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span> until n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> k <span class=\"sy0\">=</span> <span class=\"nu0\">1</span> shl i<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>deck2<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">==</span> -<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span><span class=\"br0\">(</span>f and k<span class=\"br0\">)</span> <span class=\"sy0\">!=</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> continue<br/>        <span class=\"br0\">}</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>deck2<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">!=</span> i<span class=\"br0\">)</span> continue<br/>        deck2<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> i<br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>j in i - <span class=\"nu0\">1</span> downTo <span class=\"nu0\">0</span><span class=\"br0\">)</span> deck2<span class=\"br0\">[</span>i - j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> deck<span class=\"br0\">[</span>j<span class=\"br0\">]</span>  <br/>        trySwaps<span class=\"br0\">(</span>deck2, f or k, d + <span class=\"nu0\">1</span>, n<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun topswops<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    require<span class=\"br0\">(</span>n <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span> <span class=\"sy0\">&amp;&amp;</span> n <span class=\"sy0\">&lt;</span> best.<span class=\"me1\">size</span><span class=\"br0\">)</span><br/>    best<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> deck0 <span class=\"sy0\">=</span> IntArray<span class=\"br0\">(</span>n + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span> until n<span class=\"br0\">)</span> deck0<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> -<span class=\"nu0\">1</span><br/>    trySwaps<span class=\"br0\">(</span>deck0, <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, n<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> best<span class=\"br0\">[</span>n<span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\"${\"</span><span class=\"sy0\">%</span>2d<span class=\"st0\">\".format(i)}\u00a0: ${topswops(i)}\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 43, "block": "<pre class=\"lua highlighted_source\"><span class=\"co1\">-- Return an iterator to produce every permutation of list</span><br/><span class=\"kw1\">function</span> permute <span class=\"br0\">(</span>list<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> <span class=\"kw1\">function</span> perm <span class=\"br0\">(</span>list<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><br/>        <span class=\"kw1\">if</span> n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"kw1\">then</span> <span class=\"kw3\">coroutine.yield</span><span class=\"br0\">(</span>list<span class=\"br0\">)</span> <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"kw1\">do</span><br/>            list<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> list<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> list<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">,</span> list<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>            perm<span class=\"br0\">(</span>list<span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            list<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> list<span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">=</span> list<span class=\"br0\">[</span>n<span class=\"br0\">]</span><span class=\"sy0\">,</span> list<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> <span class=\"kw3\">coroutine.wrap</span><span class=\"br0\">(</span><span class=\"kw1\">function</span><span class=\"br0\">(</span><span class=\"br0\">)</span> perm<span class=\"br0\">(</span>list<span class=\"sy0\">,</span> <span class=\"sy0\">#</span>list<span class=\"br0\">)</span> <span class=\"kw1\">end</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Perform one topswop round on table t</span><br/><span class=\"kw1\">function</span> swap <span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> new<span class=\"sy0\">,</span> limit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> t<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>t <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">if</span> i <span class=\"sy0\">&lt;=</span> limit <span class=\"kw1\">then</span><br/>            new<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> t<span class=\"br0\">[</span>limit <span class=\"sy0\">-</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"kw1\">else</span><br/>            new<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> t<span class=\"br0\">[</span>i<span class=\"br0\">]</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> new<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Find the most swaps needed for any starting permutation of n cards</span><br/><span class=\"kw1\">function</span> topswops <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> numTab<span class=\"sy0\">,</span> highest<span class=\"sy0\">,</span> count <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"kw1\">do</span> numTab<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> i <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">for</span> numList <span class=\"kw2\">in</span> permute<span class=\"br0\">(</span>numTab<span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>        count <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">while</span> numList<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">~=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">do</span><br/>            numList <span class=\"sy0\">=</span> swap<span class=\"br0\">(</span>numList<span class=\"br0\">)</span><br/>            count <span class=\"sy0\">=</span> count <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">if</span> count <span class=\"sy0\">&gt;</span> highest <span class=\"kw1\">then</span> highest <span class=\"sy0\">=</span> count <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> highest<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">-- Main procedure</span><br/><span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">10</span> <span class=\"kw1\">do</span> <span class=\"kw3\">print</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> topswops<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 8, "block": "<pre class=\"text highlighted_source\">flip[a_]\u00a0:=<br/> Block[{a1 = <a class=\"__cf_email__\" data-cfemail=\"9ed8f7ecedeadeff\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>},<br/>  If[a1 == <a class=\"__cf_email__\" data-cfemail=\"3d7158535a49557d5c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>, Reverse[a], <br/>   Join[Reverse[a[[;; a1]]], a[[a1 + 1\u00a0;;]]]]]<br/>\u00a0<br/>swaps[a_]\u00a0:= <a class=\"__cf_email__\" data-cfemail=\"e4a8818a83908ca4a28d9c8180b48b8d8a90a88d9790\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[flip, a] - 2<br/>\u00a0<br/>Print[#, \": \", Max[swaps /@ Permutations[<a class=\"__cf_email__\" data-cfemail=\"d280b3bcb5b792\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>#]]] &amp; /@ Range[10];</pre>"}, {"lang": "PARI/GP", "loc": 14, "block": "<pre class=\"parigp highlighted_source\">flip<span class=\"br0\">(</span>v<span class=\"sy0\">:</span><span class=\"kw2\">vec</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>t<span class=\"sy0\">=</span>v<span class=\"br0\">[</span><span class=\"nu1\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span><span class=\"nu1\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">if</span> <span class=\"br0\">(</span>t<span class=\"sy0\">==</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span> <span class=\"kw1\">return</span><span class=\"br0\">(</span><span class=\"nu1\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span>t<span class=\"sy0\">\\</span><span class=\"nu1\">2</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>v<span class=\"br0\">[</span>t<span class=\"sy0\">-</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"sy0\">=</span><span class=\"br0\">[</span>v<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span>v<span class=\"br0\">[</span>t<span class=\"sy0\">-</span>i<span class=\"br0\">]</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"nu1\">1</span><span class=\"sy0\">+</span>flip<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>topswops<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>mx<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span>i<span class=\"sy0\">=</span><span class=\"nu1\">0</span><span class=\"sy0\">,</span>n<span class=\"sy0\">!-</span><span class=\"nu1\">1</span><span class=\"sy0\">,</span><br/>    mx<span class=\"sy0\">=</span><span class=\"kw1\">max</span><span class=\"br0\">(</span>flip<span class=\"br0\">(</span><span class=\"kw1\">Vecsmall</span><span class=\"br0\">(</span><span class=\"kw1\">numtoperm</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>mx<span class=\"br0\">)</span><br/>  <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  mx<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw1\">vector</span><span class=\"br0\">(</span><span class=\"nu1\">10</span><span class=\"sy0\">,</span>n<span class=\"sy0\">,</span>topswops<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Perl", "loc": 37, "block": "<pre class=\"perl highlighted_source\">\u00a0<br/><span class=\"kw2\">sub</span> next_swop <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span> <span class=\"re0\">$max</span><span class=\"sy0\">,</span> <span class=\"re0\">$level</span><span class=\"sy0\">,</span> <span class=\"re0\">$p</span><span class=\"sy0\">,</span> <span class=\"re0\">$d</span> <span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$swopped</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"re0\">@$p</span> <span class=\"br0\">)</span><span class=\"br0\">{</span> <span class=\"co1\"># find possibilities</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@now</span> <span class=\"sy0\">=</span> <span class=\"re0\">@$p</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"co5\">$_</span> <span class=\"sy0\">==</span> <span class=\"re0\">$now</span><span class=\"br0\">[</span><span class=\"co5\">$_</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <a href=\"http://perldoc.perl.org/functions/splice.html\"><span class=\"kw3\">splice</span></a> <span class=\"re0\">@now</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <a href=\"http://perldoc.perl.org/functions/splice.html\"><span class=\"kw3\">splice</span></a> <span class=\"re0\">@now</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$swopped</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      next_swop<span class=\"br0\">(</span> <span class=\"re0\">$max</span><span class=\"sy0\">,</span> <span class=\"re0\">$level</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">\\@now</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"re0\">@$d</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"kw1\">for</span><span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">@$d</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># create possibilities</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@now</span> <span class=\"sy0\">=</span> <span class=\"re0\">@$p</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$next</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a> <span class=\"re0\">@$d</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">if</span><span class=\"br0\">(</span> <span class=\"kw1\">not</span> <span class=\"re0\">$now</span><span class=\"br0\">[</span><span class=\"re0\">$next</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>      <span class=\"re0\">$now</span><span class=\"br0\">[</span><span class=\"re0\">$next</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$next</span><span class=\"sy0\">;</span><br/>      <a href=\"http://perldoc.perl.org/functions/splice.html\"><span class=\"kw3\">splice</span></a> <span class=\"re0\">@now</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/reverse.html\"><span class=\"kw3\">reverse</span></a> <a href=\"http://perldoc.perl.org/functions/splice.html\"><span class=\"kw3\">splice</span></a> <span class=\"re0\">@now</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">$next</span><span class=\"sy0\">;</span><br/>      <span class=\"re0\">$swopped</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>      next_swop<span class=\"br0\">(</span> <span class=\"re0\">$max</span><span class=\"sy0\">,</span> <span class=\"re0\">$level</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"re0\">\\@now</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span> <span class=\"re0\">@$d</span> <span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/push.html\"><span class=\"kw3\">push</span></a> <span class=\"re0\">@$d</span><span class=\"sy0\">,</span> <span class=\"re0\">$next</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>  <span class=\"re0\">$$max</span> <span class=\"sy0\">=</span> <span class=\"re0\">$level</span> <span class=\"kw1\">if</span> <span class=\"sy0\">!</span><span class=\"re0\">$swopped</span> <span class=\"kw1\">and</span> <span class=\"re0\">$level</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$$max</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> topswops <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">@d</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">..</span><span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">@p</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span> x <span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$max</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>  next_swop<span class=\"br0\">(</span> <span class=\"re0\">\\$max</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"re0\">\\@p</span><span class=\"sy0\">,</span> <span class=\"re0\">\\@d</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$max</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"Maximum swops for\u00a0%2d cards:\u00a0%2d<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> <span class=\"co5\">$_</span><span class=\"sy0\">,</span> topswops <span class=\"co5\">$_</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"nu0\">10</span><span class=\"sy0\">;</span><br/>\u00a0</pre>"}, {"lang": "Perl 6", "loc": 12, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">sub</span> swops<span class=\"br0\">(</span><span class=\"re0\">@a</span> <span class=\"kw1\">is</span> copy<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$count</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">until</span> <span class=\"re0\">@a</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">==</span> <span class=\"nu0\">1</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">@a</span><span class=\"br0\">[</span> <span class=\"sy0\">^</span><span class=\"re0\">@a</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"br0\">]</span> <span class=\"sy0\">.=</span> <span class=\"kw3\">reverse</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$count</span><span class=\"sy0\">++;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$count</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> topswops<span class=\"br0\">(</span><span class=\"re0\">$n</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"br0\">(</span><span class=\"kw3\">sort</span> <span class=\"kw3\">map</span> <span class=\"re0\">&amp;swops</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"re0\">$n</span><span class=\"br0\">)</span><span class=\"sy0\">.</span><span class=\"me1\">permutations</span><span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy0\">*-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"st0\">\"$_ {topswops $_}\"</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"nu0\">10</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Phix", "loc": 44, "block": "<pre class=\"text highlighted_source\">function fannkuch(integer n)<br/>sequence start = tagset(n),<br/>         perm,<br/>         perm1 = start,<br/>         count = start<br/>integer maxFlipsCount = 0, r = n+1<br/>integer perm0, flipsCount, k, k2, j, j2<br/>\u00a0<br/>    while 1 do<br/>        while r!=1 do count[r-1] = r r -= 1 end while<br/>        if not (perm1[1]=1 or perm1[n]=n) then<br/>            perm = perm1<br/>            flipsCount = 0<br/>            k = perm[1]<br/>            while k!=1 do<br/>                k2 = floor((k+1)/2)<br/>                perm = reverse(perm[1..k]) &amp; perm[k+1..n]<br/>                flipsCount += 1<br/>                k = perm[1]<br/>            end while<br/>            if flipsCount&gt;maxFlipsCount then<br/>                maxFlipsCount = flipsCount<br/>            end if<br/>        end if<br/>        -- Use incremental change to generate another permutation<br/>        while 1 do<br/>            if r&gt;n then return maxFlipsCount end if<br/>            perm0 = perm1[1]<br/>            j2 = 1<br/>            while j2&lt;r do<br/>                j = j2+1<br/>                perm1[j2] = perm1[j]<br/>                j2 = j<br/>            end while<br/>            perm1[r] = perm0<br/>            count[r] = count[r]-1<br/>            if count[r]&gt;1 then exit else r += 1 end if<br/>        end while<br/>    end while<br/>end function -- fannkuch<br/>\u00a0<br/>for i=1 to 10 do<br/>   \u00a0? fannkuch(i)<br/>end for</pre>"}, {"lang": "PicoLisp", "loc": 15, "block": "<pre class=\"text highlighted_source\">(de fannkuch (N)<br/>   (let (Lst (range 1 N)  L Lst  Max)<br/>      (recur (L)  # Permute<br/>         (if (cdr L)<br/>            (do (length L)<br/>               (recurse (cdr L))<br/>               (rot L) )<br/>            (zero N)  # For each permutation<br/>            (for (P (copy Lst)  (&gt; (car P) 1)  (flip P (car P)))<br/>               (inc 'N) )<br/>            (setq Max (max N Max)) ) )<br/>      Max ) )<br/>\u00a0<br/>(for I 10<br/>   (println I (fannkuch I)) )</pre>"}, {"lang": "PL/I", "loc": 34, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>(subscriptrange):<br/>topswap: procedure options (main); /* 12 November 2013 */<br/>   declare cards(*) fixed (2) controlled, t fixed (2);<br/>   declare dealt(*) bit(1) controlled;<br/>   declare (count, i, m, n, c1, c2) fixed binary;<br/>   declare random builtin;<br/>\u00a0<br/>   do n = 1 to 10;<br/>      allocate cards(n), dealt(n);<br/>      /* Take the n cards, in order ... */<br/>      do i = 1 to n; cards(i) = i; end;<br/>      /* ... and shuffle them. */<br/>      do i = 1 to n;<br/>         c1 = random*n+1; c2 = random*n+1;<br/>         t = cards(c1); cards(c1) = cards(c2); cards(c2) = t;<br/>      end;<br/>      /* If '1' is the first card, game is trivial; swap it with another. */<br/>      if cards(1) = 1 &amp; n &gt; 1 then<br/>         do; t = cards(1); cards(1) = cards(2); cards(2) = t; end;<br/>\u00a0<br/>      count = 0;<br/>      do until (cards(1) = 1);<br/>         /* take the value of the first card, M, and reverse the first M cards. */<br/>         m = cards(1);<br/>         do i = 1 to m/2;<br/>            t = cards(i); cards(i) = cards(m-i+1); cards(m-i+1) = t;<br/>         end;<br/>         count = count + 1;<br/>      end;<br/>      put skip edit (n, ':', count) (f(2), a, f(4));<br/>   end;<br/>end topswap;<br/>\u00a0</pre>"}, {"lang": "Potion", "loc": 55, "block": "<pre class=\"text highlighted_source\">range = (a, b):<br/>  i = 0, l = list(b-a+1)<br/>  while (a + i &lt;= b):<br/>    l (i) = a + i++.<br/>  l.<br/>\u00a0<br/>fannkuch = (n):<br/>  flips = 0, maxf = 0, k = 0, m = n - 1, r = n<br/>  perml = range(0, n), count = list(n), perm = list(n)<br/>\u00a0<br/>  loop:<br/>    while (r\u00a0!= 1):<br/>      count (r-1) = r<br/>      r--.<br/>\u00a0<br/>    if (perml (0)\u00a0!= 0 and perml (m)\u00a0!= m):<br/>      flips = 0, i = 1<br/>      while (i &lt; n):<br/>        perm (i) = perml (i)<br/>        i++.<br/>      k = perml (0)<br/>      loop:<br/>        i = 1, j = k - 1<br/>        while (i &lt; j):<br/>          t = perm (i), perm (i) = perm (j), perm (j) = t<br/>          i++, j--.<br/>        flips++<br/>        j = perm (k), perm (k) = k, k = j<br/>        if (k == 0): break.<br/>      .<br/>      if (flips &gt; maxf): maxf = flips.<br/>    .<br/>\u00a0<br/>    loop:<br/>      if (r == n):<br/>        (n, maxf) say<br/>        return (maxf).<br/>\u00a0<br/>      i = 0, j = perml (0)<br/>      while (i &lt; r):<br/>        k = i + 1<br/>        perml (i) = perml (k)<br/>        i = k.<br/>      perml (r) = j<br/>\u00a0<br/>      j = count (r) - 1<br/>      count (r) = j<br/>      if (j &gt; 0): break.<br/>      r++<br/>_ n<br/>\u00a0<br/>n = argv(1) number<br/>if (n&lt;1): n=10.<br/>fannkuch(n)<br/>\u00a0</pre>"}, {"lang": "Python", "loc": 26, "block": "<pre class=\"python highlighted_source\"><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">from</span> <span class=\"kw3\">itertools</span> <span class=\"kw1\">import</span> permutations<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> f1<span class=\"br0\">(</span>p<span class=\"br0\">)</span>:<br/>\ti <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>\t<span class=\"kw1\">while</span> <span class=\"kw2\">True</span>:<br/>\t\tp0  <span class=\"sy0\">=</span> p<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>\t\t<span class=\"kw1\">if</span> p0 <span class=\"sy0\">==</span> <span class=\"nu0\">1</span>: <span class=\"kw1\">break</span><br/>\t\tp<span class=\"br0\">[</span>:p0<span class=\"br0\">]</span> <span class=\"sy0\">=</span> p<span class=\"br0\">[</span>:p0<span class=\"br0\">]</span><span class=\"br0\">[</span>::-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\t\ti  +<span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\t<span class=\"kw1\">return</span> i<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">def</span> fannkuch<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>\t<span class=\"kw1\">return</span> <span class=\"kw2\">max</span><span class=\"br0\">(</span>f1<span class=\"br0\">(</span><span class=\"kw2\">list</span><span class=\"br0\">(</span>p<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> p <span class=\"kw1\">in</span> permutations<span class=\"br0\">(</span><span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n+<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> <span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">11</span><span class=\"br0\">)</span>: <span class=\"kw1\">print</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>fannkuch<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"nu0\">1</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">2</span> <span class=\"nu0\">1</span><br/><span class=\"nu0\">3</span> <span class=\"nu0\">2</span><br/><span class=\"nu0\">4</span> <span class=\"nu0\">4</span><br/><span class=\"nu0\">5</span> <span class=\"nu0\">7</span><br/><span class=\"nu0\">6</span> <span class=\"nu0\">10</span><br/><span class=\"nu0\">7</span> <span class=\"nu0\">16</span><br/><span class=\"nu0\">8</span> <span class=\"nu0\">22</span><br/><span class=\"nu0\">9</span> <span class=\"nu0\">30</span><br/><span class=\"nu0\">10</span> <span class=\"nu0\">38</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "Racket", "loc": 19, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>\u00a0<br/>(define (all-misplaced? l)<br/>  (for/and ([x (in-list l)] [n (in-naturals 1)]) (not (= x n))))<br/>\u00a0<br/>(define (topswops n)<br/>  (for/fold ([m 0]) ([p (in-permutations (range 1 (add1 n)))]<br/>                     #:when (all-misplaced? p))<br/>    (let loop ([p p] [n 0])<br/>      (if (= 1 (car p))<br/>        (max n m)<br/>        (loop (let loop ([l '()] [r p] [n (car p)])<br/>                (if (zero? n) (append l r)<br/>                    (loop (cons (car r) l) (cdr r) (sub1 n))))<br/>              (add1 n))))))<br/>\u00a0<br/>(for ([i (in-range 1 11)]) (printf \"~a\\t~a\\n\" i (topswops i)))<br/>\u00a0</pre>"}, {"lang": "REXX", "loc": 38, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program generates  N  decks of  numbered cards  and  finds the maximum  \"swops\". */</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> things <span class=\"sy0\">.</span>;          <span class=\"kw1\">if</span> things==<span class=\"st0\">''</span> <span class=\"kw3\">then</span> things=<span class=\"nu0\">10</span><br/>\u00a0<br/>      <span class=\"kw1\">do</span> n=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> things;          #=decks<span class=\"br0\">(</span>n, n<span class=\"br0\">)</span> <span class=\"coMULTI\">/*create a (things) number of \"decks\". */</span><br/>      mx= <span class=\"br0\">(</span>n<span class=\"sy0\">\\</span>==<span class=\"nu0\">1</span><span class=\"br0\">)</span>                                <span class=\"coMULTI\">/*handle the case of a  one-card  deck.*/</span><br/>                  <span class=\"kw1\">do</span> i=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> #;   p=swops<span class=\"br0\">(</span>!<span class=\"sy0\">.</span>i<span class=\"br0\">)</span>  <span class=\"coMULTI\">/*compute the SWOPS for this iteration.*/</span><br/>                  <span class=\"kw1\">if</span> p<span class=\"sy0\">&gt;</span>mx  <span class=\"kw3\">then</span> mx=p             <span class=\"coMULTI\">/*This a new maximum?   Use a new max. */</span><br/>                  <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*i*/</span><br/>      <span class=\"kw1\">say</span> <span class=\"st0\">'\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 maximum swops for a deck of'</span>   <span class=\"kw6\">right</span><span class=\"br0\">(</span>n,<span class=\"nu0\">2</span><span class=\"br0\">)</span>   <span class=\"st0\">' cards is'</span>    <span class=\"kw6\">right</span><span class=\"br0\">(</span>mx,<span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>      <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*n*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>decks:  <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span>\u00a0!<span class=\"sy0\">.</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,y,,$ @<span class=\"sy0\">.</span> <span class=\"coMULTI\">/*   X  things  taken   Y   at a time. */</span><br/>        #=<span class=\"nu0\">0</span>;                 <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>decks <span class=\"nu0\">1</span>       <span class=\"coMULTI\">/* [\u2191]  initialize  $  &amp;   @.  to null.*/</span><br/>        <span class=\"kw1\">return</span> #                                 <span class=\"coMULTI\">/*return number of permutations (decks)*/</span><br/><span class=\"sy0\">.</span>decks: <span class=\"kw1\">procedure</span> <span class=\"kw1\">expose</span>\u00a0!<span class=\"sy0\">.</span> @<span class=\"sy0\">.</span> x y $ #;          <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span>\u00a0?<br/>        <span class=\"kw1\">if</span>\u00a0?<span class=\"sy0\">&gt;</span>y  <span class=\"kw3\">then</span> <span class=\"kw1\">do</span>;  <a class=\"__cf_email__\" data-cfemail=\"f2adcfb2\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><span class=\"sy0\">.</span>1;  <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">for</span> y-<span class=\"nu0\">1</span>;  _=_ @<span class=\"sy0\">.</span>j;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span>;    #=#+<span class=\"nu0\">1</span>; \u00a0!<span class=\"sy0\">.</span>#=_<br/>                     <span class=\"kw3\">end</span><br/>                <span class=\"kw3\">else</span> <span class=\"kw1\">do</span>;           qm=? - <span class=\"nu0\">1</span><br/>                     <span class=\"kw1\">if</span>\u00a0?==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> qs=<span class=\"nu0\">2</span>          <span class=\"coMULTI\">/*don't use 1-swops that start with  1 */</span><br/>                              <span class=\"kw3\">else</span> <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>1==?  <span class=\"kw3\">then</span> qs=<span class=\"nu0\">2</span>  <span class=\"coMULTI\">/*skip the 1-swops: 3 x 1 x \u00b7\u00b7\u00b7*/</span><br/>                                              <span class=\"kw3\">else</span> qs=<span class=\"nu0\">1</span><br/>                       <span class=\"kw1\">do</span> q=qs  <span class=\"kw2\">to</span> x             <span class=\"coMULTI\">/*build the permutations recursively.  */</span><br/>                             <span class=\"kw1\">do</span> k=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> qm;  <span class=\"kw1\">if</span> @<span class=\"sy0\">.</span>k==q  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span> q<br/>                             <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span><br/>                       @<span class=\"sy0\">.</span>?=q;                 <span class=\"kw1\">call</span> <span class=\"sy0\">.</span>decks\u00a0? + <span class=\"nu0\">1</span><br/>                       <span class=\"kw3\">end</span>        <span class=\"coMULTI\">/*q*/</span><br/>                     <span class=\"kw3\">end</span><br/>        <span class=\"kw1\">return</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>\u00a0<br/>swops:  <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z;   <span class=\"kw1\">do</span> u=<span class=\"nu0\">1</span>;    <span class=\"kw1\">parse</span> <span class=\"kw2\">var</span> z t <span class=\"sy0\">.</span>;     <span class=\"kw1\">if</span> <span class=\"sy0\">\\</span><span class=\"kw6\">datatype</span><span class=\"br0\">(</span>t, <span class=\"st0\">'W'</span><span class=\"br0\">)</span>  <span class=\"kw3\">then</span> t=<span class=\"kw6\">x2d</span><span class=\"br0\">(</span>t<span class=\"br0\">)</span><br/>                       <span class=\"kw1\">if</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span>z, t<span class=\"br0\">)</span>==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> u            <span class=\"coMULTI\">/*found unity at  T. */</span><br/>                               <span class=\"kw1\">do</span> h=<span class=\"nu0\">10</span>  <span class=\"kw2\">to</span> things;     <span class=\"kw1\">if</span> <span class=\"kw6\">pos</span><span class=\"br0\">(</span>h, z<span class=\"br0\">)</span>==<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">iterate</span><br/>                               z=<span class=\"kw6\">changestr</span><span class=\"br0\">(</span>h, z, <span class=\"kw6\">d2x</span><span class=\"br0\">(</span>h<span class=\"br0\">)</span> <span class=\"br0\">)</span>         <span class=\"coMULTI\">/* [\u2191]  any H's in Z?*/</span><br/>                               <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*h*/</span><br/>                       z=<span class=\"kw6\">reverse</span><span class=\"br0\">(</span> <span class=\"kw6\">subword</span><span class=\"br0\">(</span>z, <span class=\"nu0\">1</span>, t<span class=\"br0\">)</span> <span class=\"br0\">)</span>      <span class=\"kw6\">subword</span><span class=\"br0\">(</span>z, t + <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>                       <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*u*/</span></pre>"}, {"lang": "Ruby", "loc": 16, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">def</span> f1<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>  i = <span class=\"nu0\">0</span><br/>  <span class=\"kw1\">while</span> <span class=\"br0\">(</span>a0 = a<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><br/>    a<span class=\"br0\">[</span><span class=\"nu0\">0</span>...<span class=\"me1\">a0</span><span class=\"br0\">]</span> = a<span class=\"br0\">[</span><span class=\"nu0\">0</span>...<span class=\"me1\">a0</span><span class=\"br0\">]</span>.<span class=\"me1\">reverse</span><br/>    i <span class=\"sy0\">+</span>= <span class=\"nu0\">1</span><br/>  <span class=\"kw1\">end</span><br/>  i<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> fannkuch<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>  <span class=\"br0\">[</span><span class=\"sy0\">*</span><span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">]</span>.<span class=\"me1\">permutation</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>a<span class=\"sy0\">|</span> f1<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">}</span>.<span class=\"me1\">max</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> n <span class=\"kw1\">in</span> <span class=\"nu0\">1</span>..<span class=\"nu0\">10</span><br/>  <span class=\"kw3\">puts</span> <span class=\"st0\">\"%2d\u00a0:\u00a0%d\"</span> <span class=\"sy0\">%</span> <span class=\"br0\">[</span>n, fannkuch<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Scala", "loc": 32, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Fannkuch <a href=\"http://scala-lang.org\"><span class=\"kw1\">extends</span></a> App <span class=\"br0\">{</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> fannkuchen<span class=\"br0\">(</span>l<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span>, n<span class=\"sy0\">:</span> Int, i<span class=\"sy0\">:</span> Int, acc<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> flips<span class=\"br0\">(</span>l<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">(</span>l<span class=\"sy0\">:</span> <span class=\"sy0\">@</span>unchecked<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"nu0\">1</span> <span class=\"sy0\">::</span> ls <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">0</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">::</span> ls<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> splitted <span class=\"sy0\">=</span> l.<span class=\"me1\">splitAt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        flips<span class=\"br0\">(</span>splitted.<span class=\"sy0\">_</span>2.<span class=\"me1\">reverse_</span><span class=\"sy0\">:::</span><span class=\"br0\">(</span>splitted.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span><span class=\"br0\">)</span> + <span class=\"nu0\">1</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> rotateLeft<span class=\"br0\">(</span>l<span class=\"sy0\">:</span> List<span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>      l <a href=\"http://scala-lang.org\"><span class=\"kw1\">match</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> Nil <span class=\"sy0\">=&gt;</span> List<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">case</span></a> x <span class=\"sy0\">::</span> xs <span class=\"sy0\">=&gt;</span> xs <span class=\"sy0\">:::</span> List<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>\u00a0<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;=</span> n<span class=\"br0\">)</span> acc<br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> acc.<span class=\"me1\">max</span><span class=\"br0\">(</span>flips<span class=\"br0\">(</span>l<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> split <span class=\"sy0\">=</span> l.<span class=\"me1\">splitAt</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>        fannkuchen<span class=\"br0\">(</span>rotateLeft<span class=\"br0\">(</span>split.<span class=\"sy0\">_</span>1<span class=\"br0\">)</span> <span class=\"sy0\">:::</span> split.<span class=\"sy0\">_</span>2, n, i + <span class=\"nu0\">1</span>, fannkuchen<span class=\"br0\">(</span>l, n - <span class=\"nu0\">1</span>, <span class=\"nu0\">0</span>, acc<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span> <span class=\"co1\">// def fannkuchen(</span><br/>\u00a0<br/>  <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> result <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> to <span class=\"nu0\">10</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> <span class=\"br0\">(</span>i, fannkuchen<span class=\"br0\">(</span>List.<span class=\"me1\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, i + <span class=\"nu0\">1</span><span class=\"br0\">)</span>, i, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span><span class=\"st0\">\"Computing results...\"</span><span class=\"br0\">)</span><br/>  result.<span class=\"me1\">foreach</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> println<span class=\"br0\">(</span>s<span class=\"st0\">\"Pfannkuchen(${x._1})<span class=\"es1\">\\t</span>= ${x._2}\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  assert<span class=\"br0\">(</span>result <span class=\"sy0\">==</span> Vector<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">2</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">3</span>, <span class=\"nu0\">2</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">4</span>, <span class=\"nu0\">4</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"nu0\">7</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"nu0\">10</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">7</span>, <span class=\"nu0\">16</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">8</span>, <span class=\"nu0\">22</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">9</span>, <span class=\"nu0\">30</span><span class=\"br0\">)</span>, <span class=\"br0\">(</span><span class=\"nu0\">10</span>, <span class=\"nu0\">38</span><span class=\"br0\">)</span><span class=\"br0\">)</span>, <span class=\"st0\">\"Bad results\"</span><span class=\"br0\">)</span><br/>  println<span class=\"br0\">(</span>s<span class=\"st0\">\"Successfully completed without errors. [total ${scala.compat.Platform.currentTime - executionStart} ms]\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Tcl", "loc": 34, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require struct::<span class=\"kw2\">list</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> swap <span class=\"br0\">{</span>listVar<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">upvar</span> <span class=\"nu0\">1</span> <span class=\"re0\">$listVar</span> <span class=\"kw2\">list</span><br/>    <span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$list</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"sy0\">;</span> <span class=\"kw1\">set</span> j <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$n</span>-<span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span><span class=\"sy0\">&lt;</span><span class=\"re0\">$j</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"sy0\">;</span><span class=\"kw2\">incr</span> j -<span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> tmp <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$list</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">lset</span> <span class=\"kw2\">list</span> <span class=\"re0\">$i</span> <span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$list</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><br/>\t<span class=\"kw2\">lset</span> <span class=\"kw2\">list</span> <span class=\"re0\">$j</span> <span class=\"re0\">$tmp</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> swaps <span class=\"br0\">{</span><span class=\"kw2\">list</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"kw2\">lindex</span> <span class=\"re0\">$list</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\tswap <span class=\"kw2\">list</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$i</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> topswops <span class=\"kw2\">list</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> n <span class=\"nu0\">0</span><br/>   \u00a0::<span class=\"me1\">struct</span>::<span class=\"kw2\">list</span> foreachperm p <span class=\"re0\">$list</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">set</span> n <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>max<span class=\"br0\">(</span><span class=\"re0\">$n</span>,<span class=\"br0\">[</span>swaps <span class=\"re0\">$p</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> <span class=\"re0\">$n</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">proc</span> topswopsTo n <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"n<span class=\"es0\">\\t</span>topswops(n)\"</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">1</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span>= <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw2\">puts</span> <span class=\"re0\">$i</span>\\t<span class=\"br0\">[</span>topswops <span class=\"br0\">[</span><span class=\"kw2\">lappend</span> <span class=\"kw2\">list</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>topswopsTo <span class=\"nu0\">10</span></pre>"}, {"lang": "XPL0", "loc": 37, "block": "<pre class=\"text highlighted_source\">code ChOut=8, CrLf=9, IntOut=11;<br/>int  N, Max, Card1(16), Card2(16);<br/>\u00a0<br/>proc Topswop(D);        \\Conway's card swopping game<br/>int  D;                 \\depth of recursion<br/>int  I, J, C, T;<br/>[if D # N then                  \\generate N! permutations of 1..N in Card1<br/>     [for I:= 0 to N-1 do<br/>        [for J:= 0 to D-1 do    \\check if object (letter) already used<br/>            if Card1(J) = I+1 then J:=100;<br/>        if J &lt; 100 then<br/>            [Card1(D):= I+1;    \\card number not used so append it<br/>            Topswop(D+1);       \\recurse next level deeper<br/>            ];<br/>        ];<br/>     ]<br/>else [\\determine number of topswops to get card 1 at beginning<br/>     for I:= 0 to N-1 do Card2(I):= Card1(I);   \\make working copy of deck<br/>        C:= 0;                  \\initialize swop counter<br/>        while Card2(0) # 1 do<br/>            [I:= 0;  J:= Card2(0)-1;<br/>            while I &lt; J do<br/>                [T:= Card2(I);  Card2(I):= Card2(J);  Card2(J):= T;<br/>                I:= I+1;  J:= J-1;<br/>                ];<br/>            C:= C+1;<br/>            ];  <br/>     if C&gt;Max then Max:= C;<br/>     ];<br/>];<br/>\u00a0<br/>[for N:= 1 to 10 do<br/>    [Max:= 0;<br/>    Topswop(0);<br/>    IntOut(0, N);  ChOut(0, ^ );  IntOut(0, Max);  CrLf(0);<br/>    ];<br/>]</pre>"}, {"lang": "zkl", "loc": 10, "block": "<pre class=\"text highlighted_source\">fcn topswops(n){<br/>   flip:=fcn(xa){<br/>      if (not xa[0]) return(0);<br/>      xa.reverse(0,xa[0]+1);  // inplace, ~4x faster than making new lists<br/>      return(1 + self.fcn(xa));<br/>   };<br/>   (0).pump(n,List):Utils.Helpers.permute(_).pump(List,\"copy\",flip).reduce(\"max\");<br/>}<br/>\u00a0<br/>foreach n in ([1 .. 10]){ println(n, \": \", topswops(n)) }</pre>"}]}