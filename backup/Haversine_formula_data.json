{"task": "Haversine_formula", "blocks": [{"lang": "ABAP", "loc": 24, "block": "<pre class=\"abap highlighted_source\">\u00a0<br/>  <a href=\"http://help.sap.com/abapdocu/en/ABAPDATA.htm\"><span class=\"kw2\">DATA</span></a><span class=\"sy0\">:</span> X1 <span class=\"kw4\">TYPE</span> F<span class=\"sy0\">,</span> Y1 <span class=\"kw4\">TYPE</span> F<span class=\"sy0\">,</span><br/>        X2 <span class=\"kw4\">TYPE</span> F<span class=\"sy0\">,</span> Y2 <span class=\"kw4\">TYPE</span> F<span class=\"sy0\">,</span> YD <span class=\"kw4\">TYPE</span> F<span class=\"sy0\">,</span><br/>        PI <span class=\"kw4\">TYPE</span> F<span class=\"sy0\">,</span><br/>        PI_180 <span class=\"kw4\">TYPE</span> F<span class=\"sy0\">,</span><br/>        MINUS_1 <span class=\"kw4\">TYPE</span> F <span class=\"kw4\">VALUE</span> <span class=\"st0\">'-1'</span><span class=\"sy0\">.</span><br/>\u00a0<br/>PI     <span class=\"sy1\">=</span> <span class=\"kw4\">ACOS</span><span class=\"br0\">(</span> MINUS_1 <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>PI_180 <span class=\"sy1\">=</span> PI <span class=\"sy0\">/</span> <span class=\"nu0\">180</span><span class=\"sy0\">.</span><br/>\u00a0<br/>LATITUDE1 <span class=\"sy1\">=</span> <span class=\"nu0\">36</span><span class=\"sy0\">,</span><span class=\"nu0\">12</span> <span class=\"sy0\">.</span> LONGITUDE1 <span class=\"sy1\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">86</span><span class=\"sy0\">,</span><span class=\"nu0\">67</span> <span class=\"sy0\">.</span><br/>LATITUDE2 <span class=\"sy1\">=</span> <span class=\"nu0\">33</span><span class=\"sy0\">,</span><span class=\"nu0\">94</span> <span class=\"sy0\">.</span> LONGITUDE2 <span class=\"sy1\">=</span> <span class=\"sy0\">-</span><span class=\"nu0\">118</span><span class=\"sy0\">,</span><span class=\"nu0\">4</span> <span class=\"sy0\">.</span><br/>\u00a0<br/>  X1 <span class=\"sy1\">=</span> LATITUDE1  <span class=\"sy0\">*</span> PI_180<span class=\"sy0\">.</span><br/>  Y1 <span class=\"sy1\">=</span> LONGITUDE1 <span class=\"sy0\">*</span> PI_180<span class=\"sy0\">.</span><br/>  X2 <span class=\"sy1\">=</span> LATITUDE2  <span class=\"sy0\">*</span> PI_180<span class=\"sy0\">.</span><br/>  Y2 <span class=\"sy1\">=</span> LONGITUDE2 <span class=\"sy0\">*</span> PI_180<span class=\"sy0\">.</span><br/>  YD <span class=\"sy1\">=</span> Y2 <span class=\"sy0\">-</span> Y1<span class=\"sy0\">.</span><br/>\u00a0<br/>  <span class=\"kw4\">DISTANCE</span> <span class=\"sy1\">=</span> <span class=\"nu0\">20000</span> <span class=\"sy0\">/</span> PI <span class=\"sy0\">*</span><br/>    <span class=\"kw4\">ACOS</span><span class=\"br0\">(</span> <span class=\"kw4\">SIN</span><span class=\"br0\">(</span> X1 <span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw4\">SIN</span><span class=\"br0\">(</span> X2 <span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw4\">COS</span><span class=\"br0\">(</span> X1 <span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw4\">COS</span><span class=\"br0\">(</span> X2 <span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw4\">COS</span><span class=\"br0\">(</span> YD <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">.</span><br/>\u00a0<br/><a href=\"http://help.sap.com/abapdocu/en/ABAPWRITE.htm\"><span class=\"kw3\">WRITE</span></a> <span class=\"sy0\">:</span> <span class=\"st0\">'Distance between given points = '</span> <span class=\"sy0\">,</span> <span class=\"kw4\">distance</span> <span class=\"sy0\">,</span> <span class=\"st0\">'km .'</span> <span class=\"sy0\">.</span><br/>\u00a0</pre>"}, {"lang": "Ada", "loc": 31, "block": "<pre class=\"ada highlighted_source\"><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Long_Float_Text_IO</span>; <span class=\"kw3\">use</span> Ada.<span class=\"me1\">Long_Float_Text_IO</span>;<br/><span class=\"kw3\">with</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Generic_Elementary_Functions</span>;<br/>\u00a0<br/><span class=\"kw3\">procedure</span> Haversine_Formula <span class=\"kw1\">is</span><br/>\u00a0<br/>   <span class=\"kw3\">package</span> Math <span class=\"kw1\">is</span> <span class=\"kw3\">new</span> Ada.<span class=\"me1\">Numerics</span>.<span class=\"me1\">Generic_Elementary_Functions</span> <span class=\"br0\">(</span>Long_Float<span class=\"br0\">)</span>; <span class=\"kw3\">use</span> Math;<br/>\u00a0<br/>   <span class=\"co1\">-- Compute great circle distance, given latitude and longitude of two points, in radians</span><br/>   <span class=\"kw3\">function</span> Great_Circle_Distance <span class=\"br0\">(</span>lat1, long1, lat2, long2\u00a0: Long_Float<span class=\"br0\">)</span> <span class=\"kw1\">return</span> Long_Float <span class=\"kw1\">is</span><br/>      Earth_Radius\u00a0: <span class=\"kw3\">constant</span>\u00a0:= <span class=\"nu0\">6371.0</span>; <span class=\"co1\">-- in kilometers</span><br/>      a\u00a0: Long_Float\u00a0:= Sin <span class=\"br0\">(</span><span class=\"nu0\">0.5</span> * <span class=\"br0\">(</span>lat2 - lat1<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>      b\u00a0: Long_Float\u00a0:= Sin <span class=\"br0\">(</span><span class=\"nu0\">0.5</span> * <span class=\"br0\">(</span>long2 - long1<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> <span class=\"nu0\">2.0</span> * Earth_Radius * ArcSin <span class=\"br0\">(</span>Sqrt <span class=\"br0\">(</span>a * a + Cos <span class=\"br0\">(</span>lat1<span class=\"br0\">)</span> * Cos <span class=\"br0\">(</span>lat2<span class=\"br0\">)</span> * b * b<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>   <span class=\"kw1\">end</span> Great_Circle_Distance;<br/>\u00a0<br/>   <span class=\"co1\">-- convert degrees, minutes and seconds to radians</span><br/>   <span class=\"kw3\">function</span> DMS_To_Radians <span class=\"br0\">(</span>Deg, Min, Sec\u00a0: Long_Float\u00a0:= <span class=\"nu0\">0.0</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> Long_Float <span class=\"kw1\">is</span><br/>      Pi_Over_180\u00a0: <span class=\"kw3\">constant</span>\u00a0:= <span class=\"nu0\">0.017453</span>_292519_943295_769236_907684_886127;<br/>   <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">return</span> <span class=\"br0\">(</span>Deg + Min/<span class=\"nu0\">60.0</span> + Sec/<span class=\"nu0\">3600.0</span><span class=\"br0\">)</span> * Pi_Over_180;<br/>   <span class=\"kw1\">end</span> DMS_To_Radians;<br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>   Put_Line<span class=\"br0\">(</span><span class=\"st0\">\"Distance in kilometers between BNA and LAX\"</span><span class=\"br0\">)</span>;<br/>   Put <span class=\"br0\">(</span>Great_Circle_Distance <span class=\"br0\">(</span><br/>         DMS_To_Radians <span class=\"br0\">(</span><span class=\"nu0\">36.0</span>, <span class=\"nu0\">7.2</span><span class=\"br0\">)</span>, DMS_To_Radians <span class=\"br0\">(</span><span class=\"nu0\">86.0</span>, <span class=\"nu0\">40.2</span><span class=\"br0\">)</span>,       <span class=\"co1\">-- Nashville International Airport (BNA)</span><br/>         DMS_To_Radians <span class=\"br0\">(</span><span class=\"nu0\">33.0</span>, <span class=\"nu0\">56.4</span><span class=\"br0\">)</span>, DMS_To_Radians <span class=\"br0\">(</span><span class=\"nu0\">118.0</span>, <span class=\"nu0\">24.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span>,    <span class=\"co1\">-- Los Angeles International Airport (LAX)</span><br/>      Aft=&gt;<span class=\"nu0\">3</span>, Exp=&gt;<span class=\"nu0\">0</span><span class=\"br0\">)</span>;<br/><span class=\"kw1\">end</span> Haversine_Formula;</pre>"}, {"lang": "ALGOL 68", "loc": 22, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"coMULTI\">#!/usr/local/bin/a68g --script #</span><br/>\u00a0<br/><span class=\"kw3\">REAL</span> r <span class=\"sy1\">=</span> 20 000<span class=\"sy1\">/</span><span class=\"kw23\">pi</span> <span class=\"re1\">+ 6.6</span> <span class=\"coMULTI\"># km #</span><span class=\"sy1\">,</span><br/>     to rad <span class=\"sy1\">=</span> <span class=\"kw23\">pi</span><span class=\"sy1\">/</span>180<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw4\">PROC</span> dist <span class=\"sy1\">=</span> <span class=\"br0\">(</span><span class=\"kw3\">REAL</span> th1 deg<span class=\"sy1\">,</span> ph1 deg<span class=\"sy1\">,</span> th2 deg<span class=\"sy1\">,</span> ph2 deg<span class=\"br0\">)</span><span class=\"kw3\">REAL</span><span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>        <span class=\"kw3\">REAL</span> ph1 <span class=\"sy1\">=</span> <span class=\"br0\">(</span>ph1 deg <span class=\"sy1\">-</span> ph2 deg<span class=\"br0\">)</span> <span class=\"sy1\">*</span> to rad<span class=\"sy1\">,</span><br/>             th1 <span class=\"sy1\">=</span> th1 deg <span class=\"sy1\">*</span> to rad<span class=\"sy1\">,</span> th2 <span class=\"sy1\">=</span> th2 deg <span class=\"sy1\">*</span> to rad<span class=\"sy1\">,</span><br/>\u00a0<br/>             dz <span class=\"sy1\">=</span> <span class=\"kw24\">sin</span><span class=\"br0\">(</span>th1<span class=\"br0\">)</span> <span class=\"sy1\">-</span> <span class=\"kw24\">sin</span><span class=\"br0\">(</span>th2<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>             dx <span class=\"sy1\">=</span> <span class=\"kw24\">cos</span><span class=\"br0\">(</span>ph1<span class=\"br0\">)</span> <span class=\"sy1\">*</span> <span class=\"kw24\">cos</span><span class=\"br0\">(</span>th1<span class=\"br0\">)</span> <span class=\"sy1\">-</span> <span class=\"kw24\">cos</span><span class=\"br0\">(</span>th2<span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>             dy <span class=\"sy1\">=</span> <span class=\"kw24\">sin</span><span class=\"br0\">(</span>ph1<span class=\"br0\">)</span> <span class=\"sy1\">*</span> <span class=\"kw24\">cos</span><span class=\"br0\">(</span>th1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"kw24\">arc sin</span><span class=\"br0\">(</span><span class=\"kw24\">sqrt</span><span class=\"br0\">(</span>dx <span class=\"sy1\">*</span> dx <span class=\"sy1\">+</span> dy <span class=\"sy1\">*</span> dy <span class=\"sy1\">+</span> dz <span class=\"sy1\">*</span> dz<span class=\"br0\">)</span> <span class=\"sy1\">/</span> 2<span class=\"br0\">)</span> <span class=\"sy1\">*</span> 2 <span class=\"sy1\">*</span> r<br/><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>main<span class=\"sy1\">:</span><br/><span class=\"br0\">(</span><br/>        <span class=\"kw3\">REAL</span> d <span class=\"sy1\">=</span> dist<span class=\"br0\">(</span><span class=\"re1\">36.12</span><span class=\"sy1\">,</span> <span class=\"re1\">-86.67</span><span class=\"sy1\">,</span> <span class=\"re1\">33.94</span><span class=\"sy1\">,</span> <span class=\"re1\">-118.4</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>        <span class=\"coMULTI\"># Americans don't know kilometers #</span><br/>        <span class=\"kw22\">printf</span><span class=\"br0\">(</span><span class=\"br0\">(</span>$<span class=\"st0\">\"dist: \"</span>g<span class=\"br0\">(</span>0<span class=\"sy1\">,</span>1<span class=\"br0\">)</span><span class=\"st0\">\" km (\"</span>g<span class=\"br0\">(</span>0<span class=\"sy1\">,</span>1<span class=\"br0\">)</span><span class=\"st0\">\" mi.)\"</span>l$<span class=\"sy1\">,</span> d<span class=\"sy1\">,</span> d <span class=\"sy1\">/</span> <span class=\"re1\">1.609344</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">)</span></pre>"}, {"lang": "AMPL", "loc": 23, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>set location;<br/>set geo;<br/>\u00a0<br/>param coord{i in location, j in geo};<br/>param dist{i in location, j in location};<br/>\u00a0<br/>data;<br/>\u00a0<br/>set location\u00a0:= BNA LAX;<br/>set geo\u00a0:= LAT LON;<br/>\u00a0<br/>param coord:<br/>               LAT      LON\u00a0:=<br/>      BNA    36.12   -86.67<br/>      LAX    33.94   -118.4<br/>;<br/>\u00a0<br/>let dist['BNA','LAX']\u00a0:= 2 * 6372.8 * asin (sqrt(sin(atan(1)/45*(coord['LAX','LAT']-coord['BNA','LAT'])/2)^2 + cos(atan(1)/45*coord['BNA','LAT']) * cos(atan(1)/45*coord['LAX','LAT']) * sin(atan(1)/45*(coord['LAX','LON'] - coord<br/>['BNA','LON'])/2)^2));<br/>\u00a0<br/>printf \"The distance between the two points is approximately\u00a0%f km.\\n\", dist['BNA','LAX'];<br/>\u00a0</pre>"}, {"lang": "APL", "loc": 3, "block": "<pre class=\"text highlighted_source\">r\u21906371<br/>hf\u2190{(p q)\u2190\u25cb\u237a \u2375\u00f7180 \u22c4 2\u00d7r\u00d7\u00af1\u25cb(+/(2*\u23681\u25cb(p-q)\u00f72)\u00d71(\u00d7/2\u25cb\u2283\u00a8p q))*\u00f72}<br/>36.12 \u00af86.67 hf 33.94 \u00af118.40</pre>"}, {"lang": "ATS", "loc": 38, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#include<br/>\"share/atspre_staload.hats\"<br/>\u00a0<br/>staload \"libc/SATS/math.sats\"<br/>staload _ = \"libc/DATS/math.dats\"<br/>staload \"libc/SATS/stdio.sats\"<br/>staload \"libc/SATS/stdlib.sats\"<br/>\u00a0<br/>#define R 6372.8<br/>#define TO_RAD (3.1415926536 / 180)<br/>\u00a0<br/>typedef d = double<br/>\u00a0<br/>fun<br/>dist<br/>(<br/>  th1: d, ph1: d, th2: d, ph2: d<br/>)\u00a0: d = let<br/>  val ph1 = ph1 - ph2<br/>  val ph1 = TO_RAD * ph1<br/>  val th1 = TO_RAD * th1<br/>  val th2 = TO_RAD * th2<br/>  val dz = sin(th1) - sin(th2)<br/>  val dx = cos(ph1) * cos(th1) - cos(th2)<br/>  val dy = sin(ph1) * cos(th1)<br/>in<br/>  asin(sqrt(dx*dx + dy*dy + dz*dz)/2)*2*R<br/>end // end of [dist]<br/>\u00a0<br/>implement<br/>main0((*void*)) = let<br/>  val d = dist(36.12, ~86.67, 33.94, ~118.4);<br/>  /* Americans don't know kilometers */<br/>in<br/>  $extfcall(void, \"printf\", \"dist:\u00a0%.1f km (%.1f mi.)\\n\", d, d / 1.609344)<br/>end // end of [main0]<br/>\u00a0</pre>"}, {"lang": "AutoHotkey", "loc": 13, "block": "<pre class=\"autohotkey highlighted_source\"><a href=\"http://www.autohotkey.com/docs/commands/MsgBox.htm\"><span class=\"kw3\">MsgBox</span></a><span class=\"sy0\">,</span>\u00a0% GreatCircleDist<span class=\"br0\">(</span><span class=\"nu0\">36.12</span><span class=\"sy0\">,</span> <span class=\"nu0\">33.94</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">86.67</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">118.40</span><span class=\"sy0\">,</span> <span class=\"nu0\">6372.8</span><span class=\"sy0\">,</span> <span class=\"st0\">\"km\"</span><span class=\"br0\">)</span><br/>\u00a0<br/>GreatCircleDist<span class=\"br0\">(</span>La1<span class=\"sy0\">,</span> La2<span class=\"sy0\">,</span> Lo1<span class=\"sy0\">,</span> Lo2<span class=\"sy0\">,</span> R<span class=\"sy0\">,</span> U<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> R <span class=\"sy0\">*</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">ASin</span></a><span class=\"br0\">(</span><a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Sqrt</span></a><span class=\"br0\">(</span>Hs<span class=\"br0\">(</span>Rad<span class=\"br0\">(</span>La2 <span class=\"sy0\">-</span> La1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Cos</span></a><span class=\"br0\">(</span>Rad<span class=\"br0\">(</span>La1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Cos</span></a><span class=\"br0\">(</span>Rad<span class=\"br0\">(</span>La2<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> Hs<span class=\"br0\">(</span>Rad<span class=\"br0\">(</span>Lo2 <span class=\"sy0\">-</span> Lo1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <a href=\"http://www.autohotkey.com/docs/Variables.htm#A_Space\"><span class=\"kw2\">A_Space</span></a> U<br/><span class=\"br0\">}</span><br/>\u00a0<br/>Hs<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"sy0\">-</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">Cos</span></a><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>Rad<span class=\"br0\">(</span>Deg<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span><span class=\"sy0\">,</span> Deg <span class=\"sy0\">*</span> <span class=\"nu0\">4</span> <span class=\"sy0\">*</span> <a href=\"http://www.autohotkey.com/docs/Functions.htm#BuiltIn\"><span class=\"kw4\">ATan</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">180</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "AWK", "loc": 20, "block": "<pre class=\"awk highlighted_source\">\u00a0<br/><span class=\"co1\"># syntax: GAWK -f HAVERSINE_FORMULA.AWK</span><br/><span class=\"co1\"># converted from Python</span><br/><span class=\"kw2\">BEGIN</span> <span class=\"br0\">{</span><br/>    distance<span class=\"br0\">(</span><span class=\"nu0\">36.12</span>,<span class=\"sy3\">-</span><span class=\"nu0\">86.67</span>,<span class=\"nu0\">33.94</span>,<span class=\"sy3\">-</span><span class=\"nu0\">118.40</span><span class=\"br0\">)</span> <span class=\"co1\"># BNA to LAX</span><br/>    exit<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> distance<span class=\"br0\">(</span>lat1,lon1,lat2,lon2,  a,c,dlat,dlon<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    dlat = radians<span class=\"br0\">(</span>lat2<span class=\"sy3\">-</span>lat1<span class=\"br0\">)</span><br/>    dlon = radians<span class=\"br0\">(</span>lon2<span class=\"sy3\">-</span>lon1<span class=\"br0\">)</span><br/>    lat1 = radians<span class=\"br0\">(</span>lat1<span class=\"br0\">)</span><br/>    lat2 = radians<span class=\"br0\">(</span>lat2<span class=\"br0\">)</span><br/>    a = <span class=\"br0\">(</span><span class=\"kw4\">sin</span><span class=\"br0\">(</span>dlat<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">^</span><span class=\"nu0\">2</span> <span class=\"sy3\">+</span> <span class=\"kw4\">cos</span><span class=\"br0\">(</span>lat1<span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"kw4\">cos</span><span class=\"br0\">(</span>lat2<span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"br0\">(</span><span class=\"kw4\">sin</span><span class=\"br0\">(</span>dlon<span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy3\">^</span><span class=\"nu0\">2</span><br/>    c = <span class=\"nu0\">2</span> <span class=\"sy3\">*</span> <span class=\"kw4\">atan2</span><span class=\"br0\">(</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span>,<span class=\"kw4\">sqrt</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy3\">-</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw5\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"distance:\u00a0%.4f km<span class=\"es0\">\\n</span>\"</span>,<span class=\"nu0\">6372.8</span> <span class=\"sy3\">*</span> c<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/><span class=\"kw6\">function</span> radians<span class=\"br0\">(</span>degree<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"co1\"># degrees to radians</span><br/>    <span class=\"kw6\">return</span> degree <span class=\"sy3\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">3.1415926</span> <span class=\"sy3\">/</span> <span class=\"nu0\">180</span>.<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "BBC BASIC", "loc": 9, "block": "<pre class=\"text highlighted_source\">      PRINT \"Distance = \"\u00a0; FNhaversine(36.12, -86.67, 33.94, -118.4) \" km\"<br/>      END<br/>\u00a0<br/>      DEF FNhaversine(n1, e1, n2, e2)<br/>      LOCAL d()\u00a0: DIM d(2)<br/>      d() = COSRAD(e1-e2) * COSRAD(n1) - COSRAD(n2), \\<br/>      \\     SINRAD(e1-e2) * COSRAD(n1), \\<br/>      \\     SINRAD(n1) - SINRAD(n2)<br/>      = ASN(MOD(d()) / 2) * 6372.8 * 2</pre>"}, {"lang": "C", "loc": 26, "block": "<pre class=\"c highlighted_source\"><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/>\u00a0<br/><span class=\"co2\">#define R 6371</span><br/><span class=\"co2\">#define TO_RAD (3.1415926536 / 180)</span><br/><span class=\"kw4\">double</span> dist<span class=\"br0\">(</span><span class=\"kw4\">double</span> th1<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> ph1<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> th2<span class=\"sy0\">,</span> <span class=\"kw4\">double</span> ph2<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> dx<span class=\"sy0\">,</span> dy<span class=\"sy0\">,</span> dz<span class=\"sy0\">;</span><br/>\tph1 <span class=\"sy0\">-=</span> ph2<span class=\"sy0\">;</span><br/>\tph1 <span class=\"sy0\">*=</span> TO_RAD<span class=\"sy0\">,</span> th1 <span class=\"sy0\">*=</span> TO_RAD<span class=\"sy0\">,</span> th2 <span class=\"sy0\">*=</span> TO_RAD<span class=\"sy0\">;</span><br/>\u00a0<br/>\tdz <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span>th1<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span>th2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tdx <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span>ph1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span>th1<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span>th2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\tdy <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span>ph1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span>th1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"kw1\">return</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/asin.html\"><span class=\"kw3\">asin</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span>dx <span class=\"sy0\">*</span> dx <span class=\"sy0\">+</span> dy <span class=\"sy0\">*</span> dy <span class=\"sy0\">+</span> dz <span class=\"sy0\">*</span> dz<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> R<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> d <span class=\"sy0\">=</span> dist<span class=\"br0\">(</span><span class=\"nu16\">36.12</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">86.67</span><span class=\"sy0\">,</span> <span class=\"nu16\">33.94</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">118.4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\t<span class=\"coMULTI\">/* Americans don't know kilometers */</span><br/>\t<a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"dist:\u00a0%.1f km (%.1f mi.)<span class=\"es1\">\\n</span>\"</span><span class=\"sy0\">,</span> d<span class=\"sy0\">,</span> d <span class=\"sy0\">/</span> <span class=\"nu16\">1.609344</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "C++", "loc": 58, "block": "<pre class=\"cpp highlighted_source\">\u00a0<br/><span class=\"co2\">#define _USE_MATH_DEFINES</span><br/>\u00a0<br/><span class=\"co2\">#include &lt;math.h&gt;</span><br/><span class=\"co2\">#include &lt;iostream&gt;</span><br/>\u00a0<br/><span class=\"kw4\">const</span> <span class=\"kw4\">static</span> <span class=\"kw4\">double</span> EarthRadiusKm <span class=\"sy1\">=</span> <span class=\"nu16\">6372.8</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw2\">inline</span> <span class=\"kw4\">double</span> DegreeToRadian<span class=\"br0\">(</span><span class=\"kw4\">double</span> angle<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw1\">return</span> M_PI <span class=\"sy2\">*</span> angle <span class=\"sy2\">/</span> <span class=\"nu16\">180.0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">class</span> Coordinate<br/><span class=\"br0\">{</span><br/><span class=\"kw2\">public</span><span class=\"sy4\">:</span><br/>\tCoordinate<span class=\"br0\">(</span><span class=\"kw4\">double</span> latitude ,<span class=\"kw4\">double</span> longitude<span class=\"br0\">)</span><span class=\"sy4\">:</span>myLatitude<span class=\"br0\">(</span>latitude<span class=\"br0\">)</span>, myLongitude<span class=\"br0\">(</span>longitude<span class=\"br0\">)</span><br/>\t<span class=\"br0\">{</span><span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">double</span> Latitude<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> myLatitude<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"kw4\">double</span> Longitude<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw4\">const</span><br/>\t<span class=\"br0\">{</span><br/>\t\t<span class=\"kw1\">return</span> myLongitude<span class=\"sy4\">;</span><br/>\t<span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">private</span><span class=\"sy4\">:</span><br/>\u00a0<br/>\t<span class=\"kw4\">double</span> myLatitude<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> myLongitude<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><span class=\"sy4\">;</span><br/>\u00a0<br/><span class=\"kw4\">double</span> HaversineDistance<span class=\"br0\">(</span><span class=\"kw4\">const</span> Coordinate<span class=\"sy3\">&amp;</span> p1, <span class=\"kw4\">const</span> Coordinate<span class=\"sy3\">&amp;</span> p2<span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\t<span class=\"kw4\">double</span> latRad1 <span class=\"sy1\">=</span> DegreeToRadian<span class=\"br0\">(</span>p1.<span class=\"me1\">Latitude</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> latRad2 <span class=\"sy1\">=</span> DegreeToRadian<span class=\"br0\">(</span>p2.<span class=\"me1\">Latitude</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> lonRad1 <span class=\"sy1\">=</span> DegreeToRadian<span class=\"br0\">(</span>p1.<span class=\"me1\">Longitude</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> lonRad2 <span class=\"sy1\">=</span> DegreeToRadian<span class=\"br0\">(</span>p2.<span class=\"me1\">Longitude</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">double</span> diffLa <span class=\"sy1\">=</span> latRad2 <span class=\"sy2\">-</span> latRad1<span class=\"sy4\">;</span><br/>\t<span class=\"kw4\">double</span> doffLo <span class=\"sy1\">=</span> lonRad2 <span class=\"sy2\">-</span> lonRad1<span class=\"sy4\">;</span><br/>\u00a0<br/>\t<span class=\"kw4\">double</span> computation <span class=\"sy1\">=</span> <span class=\"kw3\">asin</span><span class=\"br0\">(</span><span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"kw3\">sin</span><span class=\"br0\">(</span>diffLa <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sin</span><span class=\"br0\">(</span>diffLa <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy2\">+</span> <span class=\"kw3\">cos</span><span class=\"br0\">(</span>latRad1<span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"kw3\">cos</span><span class=\"br0\">(</span>latRad2<span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sin</span><span class=\"br0\">(</span>doffLo <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy2\">*</span> <span class=\"kw3\">sin</span><span class=\"br0\">(</span>doffLo <span class=\"sy2\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">2</span> <span class=\"sy2\">*</span> EarthRadiusKm <span class=\"sy2\">*</span> computation<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"br0\">{</span><br/>\tCoordinate c1<span class=\"br0\">(</span><span class=\"nu16\">36.12</span>, <span class=\"sy2\">-</span><span class=\"nu16\">86.67</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\tCoordinate c2<span class=\"br0\">(</span><span class=\"nu16\">33.94</span>, <span class=\"sy2\">-</span><span class=\"nu16\">118.4</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>\u00a0<br/>\tstd<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"Distance = \"</span> <span class=\"sy1\">&lt;&lt;</span> HaversineDistance<span class=\"br0\">(</span>c1, c2<span class=\"br0\">)</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>\t<span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C#", "loc": 24, "block": "<pre class=\"csharp highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">class</span> Haversine <span class=\"br0\">{</span><br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> calculate<span class=\"br0\">(</span><span class=\"kw4\">double</span> lat1, <span class=\"kw4\">double</span> lon1, <span class=\"kw4\">double</span> lat2, <span class=\"kw4\">double</span> lon2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">var</span> R <span class=\"sy0\">=</span> <span class=\"nu0\">6372.8</span><span class=\"sy0\">;</span> <span class=\"co1\">// In kilometers</span><br/>    <span class=\"kw1\">var</span> dLat <span class=\"sy0\">=</span> toRadians<span class=\"br0\">(</span>lat2 <span class=\"sy0\">-</span> lat1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> dLon <span class=\"sy0\">=</span> toRadians<span class=\"br0\">(</span>lon2 <span class=\"sy0\">-</span> lon1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    lat1 <span class=\"sy0\">=</span> toRadians<span class=\"br0\">(</span>lat1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    lat2 <span class=\"sy0\">=</span> toRadians<span class=\"br0\">(</span>lat2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sin</span><span class=\"br0\">(</span>dLat <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sin</span><span class=\"br0\">(</span>dLat <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sin</span><span class=\"br0\">(</span>dLon <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Sin</span><span class=\"br0\">(</span>dLon <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Cos</span><span class=\"br0\">(</span>lat1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Cos</span><span class=\"br0\">(</span>lat2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">var</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Asin</span><span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> R <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> Math<span class=\"sy0\">.</span><span class=\"me1\">Asin</span><span class=\"br0\">(</span>Math<span class=\"sy0\">.</span><span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> toRadians<span class=\"br0\">(</span><span class=\"kw4\">double</span> angle<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> Math<span class=\"sy0\">.</span><span class=\"me1\">PI</span> <span class=\"sy0\">*</span> angle <span class=\"sy0\">/</span> <span class=\"nu0\">180.0</span><span class=\"sy0\">;</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> Main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  Console<span class=\"sy0\">.</span><span class=\"me1\">WriteLine</span><span class=\"br0\">(</span><span class=\"kw4\">String</span><span class=\"sy0\">.</span><span class=\"me1\">Format</span><span class=\"br0\">(</span><span class=\"st0\">\"The distance between coordinates {0},{1} and {2},{3} is: {4}\"</span>, <span class=\"nu0\">36.12</span>, <span class=\"sy0\">-</span><span class=\"nu0\">86.67</span>, <span class=\"nu0\">33.94</span>, <span class=\"sy0\">-</span><span class=\"nu0\">118.40</span>, Haversine<span class=\"sy0\">.</span><span class=\"me1\">calculate</span><span class=\"br0\">(</span><span class=\"nu0\">36.12</span>, <span class=\"sy0\">-</span><span class=\"nu0\">86.67</span>, <span class=\"nu0\">33.94</span>, <span class=\"sy0\">-</span><span class=\"nu0\">118.40</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\">// Returns: The distance between coordinates 36.12,-86.67 and 33.94,-118.4 is: 2887.25995060711</span><br/>\u00a0</pre>"}, {"lang": "clojure", "loc": 14, "block": "<pre class=\"clojure highlighted_source\">\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defn</span> haversine<br/>  <span class=\"br0\">[</span><span class=\"br0\">{</span>lon1\u00a0:<span class=\"me1\">longitude</span> lat1\u00a0:<span class=\"me1\">latitude</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>lon2\u00a0:<span class=\"me1\">longitude</span> lat2\u00a0:<span class=\"me1\">latitude</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">[</span>R <span class=\"nu0\">6372.8</span> <span class=\"co1\">; kilometers</span><br/>        dlat <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>toRadians <span class=\"br0\">(</span><span class=\"sy0\">-</span> lat2 lat1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        dlon <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>toRadians <span class=\"br0\">(</span><span class=\"sy0\">-</span> lon2 lon1<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        lat1 <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>toRadians lat1<span class=\"br0\">)</span><br/>        lat2 <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>toRadians lat2<span class=\"br0\">)</span><br/>        a <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>sin <span class=\"br0\">(</span><span class=\"sy0\">/</span> dlat <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>sin <span class=\"br0\">(</span><span class=\"sy0\">/</span> dlat <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>sin <span class=\"br0\">(</span><span class=\"sy0\">/</span> dlon <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>sin <span class=\"br0\">(</span><span class=\"sy0\">/</span> dlon <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>cos lat1<span class=\"br0\">)</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>cos lat2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"br0\">(</span><span class=\"sy0\">*</span> R <span class=\"nu0\">2</span> <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>asin <span class=\"br0\">(</span>Math<span class=\"sy0\">/</span>sqrt a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>haversine <span class=\"br0\">{</span>:<span class=\"me1\">latitude</span> <span class=\"nu0\">36.12</span>\u00a0:<span class=\"me1\">longitude</span> <span class=\"sy0\">-</span><span class=\"nu0\">86.67</span><span class=\"br0\">}</span> <span class=\"br0\">{</span>:<span class=\"me1\">latitude</span> <span class=\"nu0\">33.94</span>\u00a0:<span class=\"me1\">longitude</span> <span class=\"sy0\">-</span><span class=\"nu0\">118.40</span><span class=\"br0\">}</span><span class=\"br0\">)</span><br/><span class=\"co1\">;=&gt; 2887.2599506071106</span><br/>\u00a0</pre>"}, {"lang": "CoffeeScript", "loc": 10, "block": "<pre class=\"text highlighted_source\">haversine = (args...) -&gt; <br/>  R = 6372.8; # km<br/>  radians = args.map (deg) -&gt; deg/180.0 * Math.PI<br/>  lat1 = radians[0]; lon1 = radians[1]; lat2 = radians[2]; lon2 = radians[3]<br/>  dLat = lat2 - lat1<br/>  dLon = lon2 - lon1<br/>  a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2)<br/>  R * 2 * Math.asin(Math.sqrt(a))<br/>\u00a0<br/>console.log haversine(36.12, -86.67, 33.94, -118.40)</pre>"}, {"lang": "Common Lisp", "loc": 21, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span>defparameter *earth-radius* <span class=\"nu0\">6372.8</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>defparameter *rad-conv* <span class=\"br0\">(</span>/ pi <span class=\"nu0\">180</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> deg-<span class=\"sy0\">&gt;</span>rad <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>* x *rad-conv*<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> haversine <span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"br0\">(</span><span class=\"kw1\">sin</span> <span class=\"br0\">(</span>/ x <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> dist-rad <span class=\"br0\">(</span>lat1 lng1 lat2 lng2<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span><span class=\"kw1\">let</span>* <span class=\"br0\">(</span><span class=\"br0\">(</span>hlat <span class=\"br0\">(</span>haversine <span class=\"br0\">(</span>- lat2 lat1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>hlng <span class=\"br0\">(</span>haversine <span class=\"br0\">(</span>- lng2 lng1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>         <span class=\"br0\">(</span>root <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"br0\">(</span>+ hlat <span class=\"br0\">(</span>* <span class=\"br0\">(</span><span class=\"kw1\">cos</span> lat1<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cos</span> lat2<span class=\"br0\">)</span> hlng<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span>* <span class=\"nu0\">2</span> *earth-radius* <span class=\"br0\">(</span>asin root<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> dist-deg <span class=\"br0\">(</span>lat1 lng1 lat2 lng2<span class=\"br0\">)</span><br/>  <span class=\"br0\">(</span>dist-rad <span class=\"br0\">(</span>deg-<span class=\"sy0\">&gt;</span>rad lat1<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>deg-<span class=\"sy0\">&gt;</span>rad lng1<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>deg-<span class=\"sy0\">&gt;</span>rad lat2<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>deg-<span class=\"sy0\">&gt;</span>rad lng2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "D", "loc": 24, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">math</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">real</span> haversineDistance<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">real</span> dth1<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">real</span> dph1<span class=\"sy0\">,</span><br/>                       <span class=\"kw2\">in</span> <span class=\"kw4\">real</span> dth2<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">real</span> dph2<span class=\"br0\">)</span><br/><span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> @nogc <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> <span class=\"kw4\">real</span> R <span class=\"sy0\">=</span> <span class=\"nu0\">6371</span><span class=\"sy0\">;</span><br/>    <span class=\"kw4\">enum</span> <span class=\"kw4\">real</span> TO_RAD <span class=\"sy0\">=</span> PI <span class=\"sy0\">/</span> <span class=\"nu0\">180</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw2\">alias</span> imr <span class=\"sy0\">=</span> <span class=\"kw4\">immutable</span> <span class=\"kw4\">real</span><span class=\"sy0\">;</span><br/>    imr ph1d <span class=\"sy0\">=</span> dph1 <span class=\"sy0\">-</span> dph2<span class=\"sy0\">;</span><br/>    imr ph1 <span class=\"sy0\">=</span> ph1d <span class=\"sy0\">*</span> TO_RAD<span class=\"sy0\">;</span><br/>    imr th1 <span class=\"sy0\">=</span> dth1 <span class=\"sy0\">*</span> TO_RAD<span class=\"sy0\">;</span><br/>    imr th2 <span class=\"sy0\">=</span> dth2 <span class=\"sy0\">*</span> TO_RAD<span class=\"sy0\">;</span><br/>\u00a0<br/>    imr dz <span class=\"sy0\">=</span> th1.<span class=\"me1\">sin</span> <span class=\"sy0\">-</span> th2.<span class=\"me1\">sin</span><span class=\"sy0\">;</span><br/>    imr dx <span class=\"sy0\">=</span> ph1.<span class=\"me1\">cos</span> <span class=\"sy0\">*</span> th1.<span class=\"me1\">cos</span> <span class=\"sy0\">-</span> th2.<span class=\"me1\">cos</span><span class=\"sy0\">;</span><br/>    imr dy <span class=\"sy0\">=</span> ph1.<span class=\"me1\">sin</span> <span class=\"sy0\">*</span> th1.<span class=\"me1\">cos</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> asin<span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span>dx <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> dy <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> dz <span class=\"sy0\">^^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> R<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"Haversine distance:\u00a0%.1f km\"</span><span class=\"sy0\">,</span><br/>             haversineDistance<span class=\"br0\">(</span><span class=\"nu16\">36.12</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">86.67</span><span class=\"sy0\">,</span> <span class=\"nu16\">33.94</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu16\">118.4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Delphi", "loc": 20, "block": "<pre class=\"delphi highlighted_source\"><span class=\"kw1\">program</span> HaversineDemo<span class=\"sy1\">;</span><br/><span class=\"kw1\">uses</span> Math<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> HaversineDist<span class=\"br0\">(</span>th1<span class=\"sy1\">,</span> ph1<span class=\"sy1\">,</span> th2<span class=\"sy1\">,</span> ph2<span class=\"sy1\">:</span><span class=\"kw4\">double</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"kw4\">double</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">const</span> diameter <span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"sy3\">*</span> <span class=\"nu0\">6372.8</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span>   dx<span class=\"sy1\">,</span> dy<span class=\"sy1\">,</span> dz<span class=\"sy1\">:</span><span class=\"kw4\">double</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">begin</span><br/>  ph1    <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">degtorad</span><span class=\"br0\">(</span>ph1 <span class=\"sy3\">-</span> ph2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  th1    <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">degtorad</span><span class=\"br0\">(</span>th1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  th2    <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">degtorad</span><span class=\"br0\">(</span>th2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>  dz     <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">sin</span><span class=\"br0\">(</span>th1<span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"kw3\">sin</span><span class=\"br0\">(</span>th2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  dx     <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">cos</span><span class=\"br0\">(</span>ph1<span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"kw3\">cos</span><span class=\"br0\">(</span>th1<span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"kw3\">cos</span><span class=\"br0\">(</span>th2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  dy     <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">sin</span><span class=\"br0\">(</span>ph1<span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"kw3\">cos</span><span class=\"br0\">(</span>th1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  Result <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">arcsin</span><span class=\"br0\">(</span><span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"kw3\">sqr</span><span class=\"br0\">(</span>dx<span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"kw3\">sqr</span><span class=\"br0\">(</span>dy<span class=\"br0\">)</span> <span class=\"sy3\">+</span> <span class=\"kw3\">sqr</span><span class=\"br0\">(</span>dz<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> diameter<span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">Writeln</span><span class=\"br0\">(</span><span class=\"st0\">'Haversine distance: '</span><span class=\"sy1\">,</span> HaversineDist<span class=\"br0\">(</span><span class=\"nu0\">36.12</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">86.67</span><span class=\"sy1\">,</span> <span class=\"nu0\">33.94</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">118.4</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">7</span><span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"st0\">' km.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Elena", "loc": 23, "block": "<pre class=\"text highlighted_source\">import extensions.<br/>import system'math.<br/>\u00a0<br/>Haversine = (:lat1:lon1:lat2:lon2)<br/>[<br/>    var R\u00a0:= 6372.8r.<br/>    var dLat\u00a0:= (lat2 - lat1) radian.<br/>    var dLon\u00a0:= (lon2 - lon1) radian.<br/>\u00a0<br/>    var dLat1\u00a0:= lat1 radian.<br/>    var dLat2\u00a0:= lat2 radian.<br/>\u00a0<br/>    var a\u00a0:= (dLat / 2) sin * (dLat / 2) sin + (dLon / 2) sin * (dLon / 2) sin * dLat1 cos * dLat2 cos.<br/>\u00a0<br/>    //var c\u00a0:= 2 * a sqrt; arcsin.<br/>    ^ R * 2 * a sqrt; arcsin.<br/>].<br/>\u00a0<br/>program =<br/>[<br/>    console printLineFormatted(\"The distance between coordinates {0},{1} and {2},{3} is: {4}\", 36.12r, -86.67r, 33.94r, -118.40r, <br/>        Haversine(36.12r, -86.67r, 33.94r, -118.40r)).<br/>].</pre>"}, {"lang": "Elixir", "loc": 14, "block": "<pre class=\"text highlighted_source\">defmodule Haversine do<br/>  @v \u00a0:math.pi / 180<br/>  @r  6372.8            # km for the earth radius<br/>  def distance({lat1, long1}, {lat2, long2}) do<br/>    dlat  =\u00a0:math.sin((lat2 - lat1) * @v / 2)<br/>    dlong =\u00a0:math.sin((long2 - long1) * @v / 2)<br/>    a = dlat * dlat + dlong * dlong *\u00a0:math.cos(lat1 * @v) *\u00a0:math.cos(lat2 * @v)<br/>    @r * 2 *\u00a0:math.asin(:math.sqrt(a))<br/>  end<br/>end<br/>\u00a0<br/>bna = {36.12,  -86.67}<br/>lax = {33.94, -118.40}<br/>IO.puts Haversine.distance(bna, lax)</pre>"}, {"lang": "Elm", "loc": 27, "block": "<pre class=\"text highlighted_source\">haversine\u00a0: ( Float, Float ) -&gt; ( Float, Float ) -&gt; Float<br/>haversine ( lat1, lon1 ) ( lat2, lon2 ) =<br/>    let<br/>        r =<br/>            6372.8<br/>\u00a0<br/>        dLat =<br/>            degrees (lat2 - lat1)<br/>\u00a0<br/>        dLon =<br/>            degrees (lon2 - lon1)<br/>\u00a0<br/>        a =<br/>            (sin (dLat / 2))<br/>                ^ 2<br/>                + (sin (dLon / 2))<br/>                ^ 2<br/>                * cos (degrees lat1)<br/>                * cos (degrees lat2)<br/>    in<br/>        r * 2 * asin (sqrt a)<br/>\u00a0<br/>view =<br/>    Html.div []<br/>      [ Html.text (toString (haversine ( 36.12, -86.67 ) ( 33.94, -118.4 )))<br/>      ]<br/>\u00a0</pre>"}, {"lang": "Erlang", "loc": 18, "block": "<pre class=\"erlang highlighted_source\"><span class=\"co1\">% Implementer by Arjun Sunel</span><br/><span class=\"sy3\">-</span><span class=\"re2\">module</span><span class=\"br0\">(</span>haversine<span class=\"br0\">)</span><span class=\"sy1\">.</span><br/><span class=\"sy3\">-</span><span class=\"re2\">export</span><span class=\"br0\">(</span><span class=\"br0\">[</span>main<span class=\"sy3\">/</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">main</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re3\">haversine</span><span class=\"br0\">(</span><span class=\"nu0\">36.12</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">86.67</span><span class=\"sy1\">,</span> <span class=\"nu0\">33.94</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">118.40</span><span class=\"br0\">)</span><span class=\"sy1\">.</span><br/>\u00a0<br/><span class=\"re3\">haversine</span><span class=\"br0\">(</span><span class=\"re5\">Lat1</span><span class=\"sy1\">,</span> <span class=\"re5\">Long1</span><span class=\"sy1\">,</span> <span class=\"re5\">Lat2</span><span class=\"sy1\">,</span> <span class=\"re5\">Long2</span><span class=\"br0\">)</span> <span class=\"sy1\">-&gt;</span><br/>\t<span class=\"re5\">V</span> \t         <span class=\"sy3\">=</span>   <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">pi</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy3\">/</span><span class=\"nu0\">180</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">R</span> \t\t <span class=\"sy3\">=</span>   <span class=\"nu0\">6372.8</span><span class=\"sy1\">,</span> \t<span class=\"co1\">% In kilometers</span><br/>\t<span class=\"re5\">Diff_Lat</span> \t <span class=\"sy3\">=</span>   <span class=\"br0\">(</span><span class=\"re5\">Lat2</span> <span class=\"sy3\">-</span> <span class=\"re5\">Lat1</span><span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"re5\">V</span> <span class=\"sy1\">,</span>\t<br/>\t<span class=\"re5\">Diff_Long</span>\t <span class=\"sy3\">=</span>   <span class=\"br0\">(</span><span class=\"re5\">Long2</span> <span class=\"sy3\">-</span> <span class=\"re5\">Long1</span><span class=\"br0\">)</span><span class=\"sy3\">*</span><span class=\"re5\">V</span><span class=\"sy1\">,</span>\t<br/>\t<span class=\"re5\">NLat</span> \t\t <span class=\"sy3\">=</span>   <span class=\"re5\">Lat1</span><span class=\"sy3\">*</span><span class=\"re5\">V</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">NLong</span> \t\t <span class=\"sy3\">=</span>   <span class=\"re5\">Lat2</span><span class=\"sy3\">*</span><span class=\"re5\">V</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">A</span> \t\t <span class=\"sy3\">=</span>   <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sin</span><span class=\"br0\">(</span><span class=\"re5\">Diff_Lat</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sin</span><span class=\"br0\">(</span><span class=\"re5\">Diff_Lat</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">+</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sin</span><span class=\"br0\">(</span><span class=\"re5\">Diff_Long</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sin</span><span class=\"br0\">(</span><span class=\"re5\">Diff_Long</span><span class=\"sy3\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">cos</span><span class=\"br0\">(</span><span class=\"re5\">NLat</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">cos</span><span class=\"br0\">(</span><span class=\"re5\">NLong</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">C</span> \t\t <span class=\"sy3\">=</span>   <span class=\"nu0\">2</span> <span class=\"sy3\">*</span> <a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">asin</span><span class=\"br0\">(</span><a href=\"http://erlang.org/doc/man/math.html\"><span class=\"kw5\">math</span></a>:<span class=\"re3\">sqrt</span><span class=\"br0\">(</span><span class=\"re5\">A</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy1\">,</span><br/>\t<span class=\"re5\">R</span><span class=\"sy3\">*</span><span class=\"re5\">C</span><span class=\"sy1\">.</span><br/>\u00a0</pre>"}, {"lang": "ERRE", "loc": 32, "block": "<pre class=\"text highlighted_source\">% Implemented by Claudio Larini<br/>\u00a0<br/>PROGRAM HAVERSINE_DEMO<br/>\u00a0<br/>!$DOUBLE<br/>\u00a0<br/>CONST DIAMETER=12745.6<br/>\u00a0<br/>FUNCTION DEG2RAD(X)<br/>    DEG2RAD=X*\u03c0/180<br/>END FUNCTION<br/>\u00a0<br/>FUNCTION RAD2DEG(X)<br/>    RAD2DEG=X*180/\u03c0<br/>END FUNCTION<br/>\u00a0<br/>PROCEDURE HAVERSINE_DIST(TH1,PH1,TH2,PH2-&gt;RES)<br/>    LOCAL DX,DY,DZ<br/>    PH1=DEG2RAD(PH1-PH2)<br/>    TH1=DEG2RAD(TH1)<br/>    TH2=DEG2RAD(TH2)<br/>    DZ=SIN(TH1)-SIN(TH2)<br/>    DX=COS(PH1)*COS(TH1)-COS(TH2)<br/>    DY=SIN(PH1)*COS(TH1)<br/>    RES=ASN(SQR(DX^2+DY^2+DZ^2)/2)*DIAMETER<br/>END PROCEDURE<br/>\u00a0<br/>BEGIN<br/>    HAVERSINE_DIST(36.12,-86.67,33.94,-118.4-&gt;RES)<br/>    PRINT(\"HAVERSINE DISTANCE: \";RES;\" KM.\")<br/>END PROGRAM<br/>\u00a0</pre>"}, {"lang": "Euler Math Toolbox", "loc": 1, "block": "<pre>&gt;load spherical\n Spherical functions for Euler. \n&gt;TNA=[rad(36,7.2),-rad(86,40.2)];\n&gt;LAX=[rad(33,56.4),-rad(118,24)];\n&gt;esdist(TNA,LAX)-&gt;km\n 2886.48817482\n&gt;type esdist\n function esdist (frompos: vector, topos: vector)\n     r1=rearth(frompos[1]); \n     r2=rearth(topos[1]);\n     xfrom=spoint(frompos)*r1; \n     xto=spoint(topos)*r2;\n     delta=xto-xfrom;\n     return asin(norm(delta)/(r1+r2))*(r1+r2);\n endfunction\n&gt;function overwrite rearth (x)\u00a0:= 6372.8*km$\n&gt;esdist(TNA,LAX)-&gt;km\n 2887.25995061\n</pre>"}, {"lang": "F#", "loc": 25, "block": "<pre class=\"fsharp highlighted_source\"><span class=\"kw1\">open</span> System<br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>Measure<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span> <span class=\"kw1\">type</span> deg<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>Measure<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span> <span class=\"kw1\">type</span> rad<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>Measure<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span> <span class=\"kw1\">type</span> km<br/>\u00a0<br/><span class=\"kw1\">let</span> haversine <span class=\"br0\">(</span>\u03b8: <span class=\"kw4\">float</span><span class=\"sy0\">&lt;</span>rad<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"nu0\">1.0</span> <span class=\"sy0\">-</span> Math.<span class=\"me1\">Cos</span><span class=\"br0\">(</span>\u03b8<span class=\"sy0\">/</span><span class=\"nu0\">1.0</span><span class=\"sy0\">&lt;</span>rad<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">let</span> radPerDeg <span class=\"sy0\">=</span>  <span class=\"br0\">(</span>Math.<span class=\"me1\">PI</span> <span class=\"sy0\">/</span> <span class=\"nu0\">180.0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">1.0</span><span class=\"sy0\">&lt;</span>rad<span class=\"sy0\">/</span>deg<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"kw1\">type</span> pos<span class=\"br0\">(</span>latitude: <span class=\"kw4\">float</span><span class=\"sy0\">&lt;</span>deg<span class=\"sy0\">&gt;</span>, longitude: <span class=\"kw4\">float</span><span class=\"sy0\">&lt;</span>deg<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">member</span> this.\u03c6 <span class=\"sy0\">=</span> latitude <span class=\"sy0\">*</span> radPerDeg<br/>    <span class=\"kw1\">member</span> this.\u03c8 <span class=\"sy0\">=</span> longitude <span class=\"sy0\">*</span> radPerDeg<br/>\u00a0<br/><span class=\"kw1\">let</span> rEarth <span class=\"sy0\">=</span> <span class=\"nu0\">6372.8</span><span class=\"sy0\">&lt;</span>km<span class=\"sy0\">&gt;</span><br/>\u00a0<br/><span class=\"kw1\">let</span> hsDist <span class=\"br0\">(</span>p1: pos<span class=\"br0\">)</span> <span class=\"br0\">(</span>p2: pos<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>    <span class=\"nu0\">2.0</span> <span class=\"sy0\">*</span> rEarth <span class=\"sy0\">*</span><br/>        Math.<span class=\"me1\">Asin</span><span class=\"br0\">(</span>Math.<span class=\"me1\">Sqrt</span><span class=\"br0\">(</span>haversine<span class=\"br0\">(</span>p2.\u03c6 <span class=\"sy0\">-</span> p1.\u03c6<span class=\"br0\">)</span><span class=\"sy0\">+</span><br/>                    Math.<span class=\"me1\">Cos</span><span class=\"br0\">(</span>p1.\u03c6<span class=\"sy0\">/</span><span class=\"nu0\">1.0</span><span class=\"sy0\">&lt;</span>rad<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>Math.<span class=\"me1\">Cos</span><span class=\"br0\">(</span>p2.\u03c6<span class=\"sy0\">/</span><span class=\"nu0\">1.0</span><span class=\"sy0\">&lt;</span>rad<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>haversine<span class=\"br0\">(</span>p2.\u03c8 <span class=\"sy0\">-</span> p1.\u03c8<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">[</span><span class=\"sy0\">&lt;</span>EntryPoint<span class=\"sy0\">&gt;</span><span class=\"br0\">]</span><br/><span class=\"kw1\">let</span> main argv <span class=\"sy0\">=</span><br/>    printfn <span class=\"st0\">\"%A\"</span> <span class=\"br0\">(</span>hsDist <span class=\"br0\">(</span>pos<span class=\"br0\">(</span><span class=\"nu0\">36.12</span><span class=\"sy0\">&lt;</span>deg<span class=\"sy0\">&gt;</span>, <span class=\"sy0\">-</span><span class=\"nu0\">86.67</span><span class=\"sy0\">&lt;</span>deg<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>pos<span class=\"br0\">(</span><span class=\"nu0\">33.94</span><span class=\"sy0\">&lt;</span>deg<span class=\"sy0\">&gt;</span>, <span class=\"sy0\">-</span><span class=\"nu0\">118.40</span><span class=\"sy0\">&lt;</span>deg<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"nu0\">0</span></pre>"}, {"lang": "Factor", "loc": 11, "block": "<pre class=\"text highlighted_source\">USING: arrays kernel math math.constants math.functions math.vectors sequences\u00a0;<br/>\u00a0<br/>: haversin ( x -- y ) cos 1 swap - 2 /\u00a0;<br/>: haversininv ( y -- x ) 2 * 1 swap - acos\u00a0;<br/>: haversineDist ( as bs -- d )<br/>[ [ 180 / pi * ] map ] <a class=\"__cf_email__\" data-cfemail=\"89ebe0c9\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>  [ [ swap - haversin ] 2map ]<br/>  [ [ first cos ] <a class=\"__cf_email__\" data-cfemail=\"dbb9b29b\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a> * 1 swap 2array ]<br/>  2bi<br/>v.<br/>haversininv R_earth *\u00a0;</pre>"}, {"lang": "FBSL", "loc": 16, "block": "<pre class=\"qbasic highlighted_source\">#APPTYPE CONSOLE<br/>\u00a0<br/><a href=\"http://www.qbasicnews.com/qboho/qckprint.shtml\"><span class=\"kw3\">PRINT</span></a> <span class=\"st0\">\"Distance = \"</span><span class=\"sy0\">,</span> Haversine<span class=\"br0\">(</span><span class=\"nu0\">36.12</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">86.67</span><span class=\"sy0\">,</span> <span class=\"nu0\">33.94</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">118.4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"st0\">\" km\"</span><br/>PAUSE<br/>\u00a0<br/><span class=\"kw1\">FUNCTION</span> Haversine<span class=\"br0\">(</span>DegLat1 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdouble.shtml\"><span class=\"kw3\">DOUBLE</span></a><span class=\"sy0\">,</span> DegLon1 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdouble.shtml\"><span class=\"kw3\">DOUBLE</span></a><span class=\"sy0\">,</span> DegLat2 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdouble.shtml\"><span class=\"kw3\">DOUBLE</span></a><span class=\"sy0\">,</span> DegLon2 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdouble.shtml\"><span class=\"kw3\">DOUBLE</span></a><span class=\"br0\">)</span> <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdouble.shtml\"><span class=\"kw3\">DOUBLE</span></a><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckconst.shtml\"><span class=\"kw3\">CONST</span></a> radius <span class=\"sy0\">=</span> <span class=\"nu0\">6372.8</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> dLat <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdouble.shtml\"><span class=\"kw3\">DOUBLE</span></a> <span class=\"sy0\">=</span> D2R<span class=\"br0\">(</span>DegLat2 <span class=\"sy0\">-</span> DegLat1<span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> dLon <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdouble.shtml\"><span class=\"kw3\">DOUBLE</span></a> <span class=\"sy0\">=</span> D2R<span class=\"br0\">(</span>DegLon2 <span class=\"sy0\">-</span> DegLon1<span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> lat1 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdouble.shtml\"><span class=\"kw3\">DOUBLE</span></a> <span class=\"sy0\">=</span> D2R<span class=\"br0\">(</span>DegLat1<span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> lat2 <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdouble.shtml\"><span class=\"kw3\">DOUBLE</span></a> <span class=\"sy0\">=</span> D2R<span class=\"br0\">(</span>DegLat2<span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> a <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdouble.shtml\"><span class=\"kw3\">DOUBLE</span></a> <span class=\"sy0\">=</span> <a href=\"http://www.qbasicnews.com/qboho/qcksin.shtml\"><span class=\"kw3\">SIN</span></a><span class=\"br0\">(</span>dLat <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.qbasicnews.com/qboho/qcksin.shtml\"><span class=\"kw3\">SIN</span></a><span class=\"br0\">(</span>dLat <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <a href=\"http://www.qbasicnews.com/qboho/qcksin.shtml\"><span class=\"kw3\">SIN</span></a><span class=\"br0\">(</span>dLon <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.qbasicnews.com/qboho/qcksin.shtml\"><span class=\"kw3\">SIN</span></a><span class=\"br0\">(</span>dLon <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.qbasicnews.com/qboho/qckcos.shtml\"><span class=\"kw3\">COS</span></a><span class=\"br0\">(</span>lat1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.qbasicnews.com/qboho/qckcos.shtml\"><span class=\"kw3\">COS</span></a><span class=\"br0\">(</span>lat2<span class=\"br0\">)</span><br/>    <a href=\"http://www.qbasicnews.com/qboho/qckdim.shtml\"><span class=\"kw3\">DIM</span></a> c <a href=\"http://www.qbasicnews.com/qboho/qckas.shtml\"><span class=\"kw3\">AS</span></a> <a href=\"http://www.qbasicnews.com/qboho/qckdouble.shtml\"><span class=\"kw3\">DOUBLE</span></a> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> ASIN<span class=\"br0\">(</span>SQRT<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">RETURN</span> radius <span class=\"sy0\">*</span> c<br/><a href=\"http://www.qbasicnews.com/qboho/qckend.shtml\"><span class=\"kw3\">END</span></a> <span class=\"kw1\">FUNCTION</span><br/>\u00a0</pre>"}, {"lang": "Forth", "loc": 15, "block": "<pre class=\"text highlighted_source\">: s&gt;f s&gt;d d&gt;f\u00a0;<br/>: deg&gt;rad 174532925199433e-16 f*\u00a0;<br/>: difference f- deg&gt;rad 2 s&gt;f f/ fsin fdup f*\u00a0;<br/>\u00a0<br/>: haversine                            ( lat1 lon1 lat2 lon2 -- haversine)<br/>  frot difference                      ( lat1 lat2 dLon^2)<br/>  frot frot fover fover                ( dLon^2 lat1 lat2 lat1 lat2)<br/>  fswap difference                     ( dLon^2 lat1 lat2 dLat^2)<br/>  fswap deg&gt;rad fcos                   ( dLon^2 lat1 dLat^2 lat2)<br/>  frot  deg&gt;rad fcos f*                ( dLon^2 dLat2 lat1*lat2)<br/>  frot  f* f+                          ( lat1*lat2*dLon^2+dLat^2)<br/>  fsqrt fasin 127456 s&gt;f f* 10 s&gt;f f/  ( haversine)<br/>;<br/>\u00a0<br/>36.12e -86.67e 33.94e -118.40e haversine cr f.</pre>"}, {"lang": "Fortran", "loc": 36, "block": "<pre class=\"fortran highlighted_source\">\u00a0<br/><span class=\"kw1\">program</span> example<br/><span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/><span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">d</span><br/>\u00a0<br/>d <span class=\"sy0\">=</span> haversine<span class=\"br0\">(</span><span class=\"nu0\">36.12</span>,<span class=\"sy0\">-</span><span class=\"nu0\">86.67</span>,<span class=\"nu0\">33.94</span>,<span class=\"sy0\">-</span><span class=\"nu0\">118.40</span><span class=\"br0\">)</span> <span class=\"co1\">! BNA to LAX</span><br/>print <span class=\"st0\">'(A,F9.4,A)'</span>, <span class=\"st0\">'distance: '</span>,d,<span class=\"st0\">' km'</span> <span class=\"co1\">! distance: 2887.2600 km</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>\u00a0<br/>      <span class=\"kw1\">function</span> to_radian<span class=\"br0\">(</span>degree<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>rad<span class=\"br0\">)</span><br/>          <span class=\"co1\">! degrees to radians</span><br/>          <span class=\"kw3\">real</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">degree</span><br/>          <span class=\"kw3\">real</span>, <span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">deg_to_rad</span> <span class=\"sy0\">=</span> <span class=\"kw4\">atan</span><span class=\"br0\">(</span><span class=\"nu0\">1.0</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">45</span> <span class=\"co1\">! exploit intrinsic atan to generate pi/180 runtime constant</span><br/>          <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">rad</span><br/>\u00a0<br/>          rad <span class=\"sy0\">=</span> degree<span class=\"sy0\">*</span>deg_to_rad<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> to_radian<br/>\u00a0<br/>      <span class=\"kw1\">function</span> haversine<span class=\"br0\">(</span>deglat1,deglon1,deglat2,deglon2<span class=\"br0\">)</span> <span class=\"kw3\">result</span> <span class=\"br0\">(</span>dist<span class=\"br0\">)</span><br/>          <span class=\"co1\">! great circle distance -- adapted from Matlab </span><br/>          <span class=\"kw3\">real</span>,<span class=\"kw3\">intent</span><span class=\"br0\">(</span><span class=\"kw3\">in</span><span class=\"br0\">)</span> <span class=\"sy0\">::</span> <span class=\"me2\">deglat1</span>,deglon1,deglat2,deglon2<br/>          <span class=\"kw3\">real</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span>,c,dist,dlat,dlon,lat1,lat2<br/>          <span class=\"kw3\">real</span>,<span class=\"kw3\">parameter</span> <span class=\"sy0\">::</span> <span class=\"me2\">radius</span> <span class=\"sy0\">=</span> <span class=\"nu0\">6372.8</span> <br/>\u00a0<br/>          dlat <span class=\"sy0\">=</span> to_radian<span class=\"br0\">(</span>deglat2<span class=\"sy0\">-</span>deglat1<span class=\"br0\">)</span><br/>          dlon <span class=\"sy0\">=</span> to_radian<span class=\"br0\">(</span>deglon2<span class=\"sy0\">-</span>deglon1<span class=\"br0\">)</span><br/>          lat1 <span class=\"sy0\">=</span> to_radian<span class=\"br0\">(</span>deglat1<span class=\"br0\">)</span><br/>          lat2 <span class=\"sy0\">=</span> to_radian<span class=\"br0\">(</span>deglat2<span class=\"br0\">)</span><br/>          a <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"kw4\">sin</span><span class=\"br0\">(</span>dlat<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <span class=\"kw4\">cos</span><span class=\"br0\">(</span>lat1<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"kw4\">cos</span><span class=\"br0\">(</span>lat2<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span><span class=\"kw4\">sin</span><span class=\"br0\">(</span>dlon<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><br/>          c <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"kw4\">asin</span><span class=\"br0\">(</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          dist <span class=\"sy0\">=</span> radius<span class=\"sy0\">*</span>c<br/>      <span class=\"kw1\">end</span> <span class=\"kw1\">function</span> haversine<br/>\u00a0<br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span> example<br/>\u00a0</pre>"}, {"lang": "FreeBASIC", "loc": 36, "block": "<pre class=\"freebasic highlighted_source\"><span class=\"co1\">' version 09-10-2016</span><br/><span class=\"co1\">' compile with: fbc -s console</span><br/>\u00a0<br/><span class=\"co1\">' Nashville International Airport (BNA) in Nashville, TN, USA,</span><br/><span class=\"co1\">' N 36\u00b007.2',  W  86\u00b040.2' (36.12,  -86.67)</span><br/><span class=\"co1\">' Los Angeles International Airport (LAX) in Los Angeles, CA, USA,</span><br/><span class=\"co1\">' N 33\u00b056.4', W 118\u00b024.0'  (33.94, -118.40).</span><br/><span class=\"co1\">' 6372.8 km is an approximation of the radius of the average circumference</span><br/>\u00a0<br/><span class=\"co2\">#Define Pi Atn(1) * 4        ' define Pi = 3.1415..</span><br/><span class=\"co2\">#Define deg2rad Pi / 180     ' define deg to rad 0.01745..</span><br/><span class=\"co2\">#Define earth_radius 6372.8  ' earth radius in km.</span><br/>\u00a0<br/><span class=\"kw1\">Function</span> Haversine<span class=\"br0\">(</span>lat1 <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, long1 <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, lat2 <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span>, _<br/>                                long2 <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> , radius <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><span class=\"br0\">)</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span><br/>\u00a0<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> d_long = deg2rad * <span class=\"br0\">(</span>long1 - long2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> theta1 = deg2rad * lat1<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> theta2 = deg2rad * lat2<br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> dx = <span class=\"kw1\">Cos</span><span class=\"br0\">(</span>d_long<span class=\"br0\">)</span> * <span class=\"kw1\">Cos</span><span class=\"br0\">(</span>theta1<span class=\"br0\">)</span> - <span class=\"kw1\">Cos</span><span class=\"br0\">(</span>theta2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> dy = <span class=\"kw1\">Sin</span><span class=\"br0\">(</span>d_long<span class=\"br0\">)</span> * <span class=\"kw1\">Cos</span><span class=\"br0\">(</span>theta1<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> <span class=\"kw1\">As</span> <span class=\"kw1\">Double</span> dz = <span class=\"kw1\">Sin</span><span class=\"br0\">(</span>theta1<span class=\"br0\">)</span> - <span class=\"kw1\">Sin</span><span class=\"br0\">(</span>theta2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Return</span> <span class=\"kw1\">Asin</span><span class=\"br0\">(</span><span class=\"kw1\">Sqr</span><span class=\"br0\">(</span>dx*dx + dy*dy + dz*dz<span class=\"br0\">)</span> / <span class=\"nu0\">2</span><span class=\"br0\">)</span> * radius * <span class=\"nu0\">2</span><br/>\u00a0<br/><span class=\"kw1\">End</span> <span class=\"kw1\">Function</span><br/>\u00a0<br/><span class=\"kw1\">Print</span><br/><span class=\"kw1\">Print</span> <span class=\"st0\">\" Haversine distance between BNA and LAX = \"</span>; _<br/>      Haversine<span class=\"br0\">(</span><span class=\"nu0\">36.12</span>, -<span class=\"nu0\">86.67</span>, <span class=\"nu0\">33.94</span>, -<span class=\"nu0\">118.4</span>, earth_radius<span class=\"br0\">)</span>; <span class=\"st0\">\" km.\"</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">' empty keyboard buffer</span><br/><span class=\"kw1\">While</span> <span class=\"kw1\">Inkey</span> &lt;&gt; <span class=\"st0\">\"\"</span>\u00a0: <span class=\"kw1\">Wend</span><br/><span class=\"kw1\">Print</span>\u00a0: <span class=\"kw1\">Print</span> <span class=\"st0\">\"hit any key to end program\"</span><br/><span class=\"kw1\">Sleep</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Frink", "loc": 8, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>haversine[theta]\u00a0:= (1-cos[theta])/2<br/>\u00a0<br/>dist[lat1, long1, lat2, long2]\u00a0:= 2 earthradius arcsin[sqrt[haversine[lat2-lat1] + cos[lat1] cos[lat2] haversine[long2-long1]]]<br/>\u00a0<br/>d = dist[36.12 deg, -86.67 deg, 33.94 deg, -118.40 deg]<br/>println[d-&gt; \"km\"]<br/>\u00a0</pre>"}, {"lang": "FunL", "loc": 12, "block": "<pre class=\"text highlighted_source\">import math.*<br/>\u00a0<br/>def haversin( theta ) = (1 - cos( theta ))/2<br/>\u00a0<br/>def radians( deg ) = deg Pi/180<br/>\u00a0<br/>def haversine( (lat1, lon1), (lat2, lon2) ) =<br/>  R = 6372.8<br/>  h = haversin( radians(lat2 - lat1) ) + cos( radians(lat1) ) cos( radians(lat2) ) haversin( radians(lon2 - lon1) )<br/>  2R asin( sqrt(h) )<br/>\u00a0<br/>println( haversine((36.12, -86.67), (33.94, -118.40)) )</pre>"}, {"lang": "FutureBasic", "loc": 26, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>include \"ConsoleWindow\"<br/>\u00a0<br/>local fn Haversine( lat1 as double, lon1 as double, lat2 as double, lon2 as double, miles as ^double, kilometers as ^double )<br/>dim as double deg2rad, dLat, dLon, a, c, earth_radius_miles, earth_radius_kilometers<br/>\u00a0<br/>earth_radius_miles = 3959.0 // Radius of the Earth in miles<br/>earth_radius_kilometers = 6372.8 // Radius of the Earth in kilometers<br/>deg2rad = Pi / 180 // Pi is predefined in FutureBasic<br/>\u00a0<br/>dLat = deg2rad * ( lat2  - lat1 )  <br/>dLon = deg2rad * ( lon2 - lon1 )  <br/>a = sin( dLat / 2 ) * sin( dLat / 2 ) + cos( deg2rad * lat1 ) * cos( deg2rad * lat2 ) * sin( dLon / 2 ) * sin( dLon / 2 )  <br/>c = 2 * asin( sqr(a) )  <br/>\u00a0<br/>miles.nil# =  earth_radius_miles * c<br/>kilometers.nil# = earth_radius_kilometers * c<br/>end fn<br/>\u00a0<br/>dim as double miles, kilometers<br/>fn Haversine( 36.12, -86.67, 33.94, -118.4, @miles, @kilometers )<br/>\u00a0<br/>print \"Distance in miles between BNA and LAX: \"; using \"####.####\"; miles; \" miles.\"<br/>print \"Distance in kilometers between BNA LAX: \"; using \"####.####\"; kilometers; \" km.\"<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "Go", "loc": 30, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"math\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> haversine<span class=\"sy1\">(</span>\u03b8 <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"sy3\">.</span><span class=\"nu0\">5</span> <span class=\"sy3\">*</span> <span class=\"sy1\">(</span><span class=\"nu0\">1</span> <span class=\"sy3\">-</span> math<span class=\"sy3\">.</span>Cos<span class=\"sy1\">(</span>\u03b8<span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">type</span> pos <span class=\"kw4\">struct</span> <span class=\"sy1\">{</span><br/>    \u03c6 <span class=\"kw4\">float64</span> <span class=\"co1\">// latitude, radians</span><br/>    \u03c8 <span class=\"kw4\">float64</span> <span class=\"co1\">// longitude, radians</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> degPos<span class=\"sy1\">(</span>lat<span class=\"sy1\">,</span> lon <span class=\"kw4\">float64</span><span class=\"sy1\">)</span> pos <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> pos<span class=\"sy1\">{</span>lat <span class=\"sy3\">*</span> math<span class=\"sy3\">.</span>Pi <span class=\"sy3\">/</span> <span class=\"nu0\">180</span><span class=\"sy1\">,</span> lon <span class=\"sy3\">*</span> math<span class=\"sy3\">.</span>Pi <span class=\"sy3\">/</span> <span class=\"nu0\">180</span><span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw1\">const</span> rEarth <span class=\"sy2\">=</span> <span class=\"nu0\">6372</span><span class=\"sy3\">.</span><span class=\"nu0\">8</span> <span class=\"co1\">// km</span><br/>\u00a0<br/><span class=\"kw4\">func</span> hsDist<span class=\"sy1\">(</span>p1<span class=\"sy1\">,</span> p2 pos<span class=\"sy1\">)</span> <span class=\"kw4\">float64</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">2</span> <span class=\"sy3\">*</span> rEarth <span class=\"sy3\">*</span> math<span class=\"sy3\">.</span>Asin<span class=\"sy1\">(</span>math<span class=\"sy3\">.</span>Sqrt<span class=\"sy1\">(</span>haversine<span class=\"sy1\">(</span>p2<span class=\"sy3\">.</span>\u03c6<span class=\"sy3\">-</span>p1<span class=\"sy3\">.</span>\u03c6<span class=\"sy1\">)</span><span class=\"sy3\">+</span><br/>        math<span class=\"sy3\">.</span>Cos<span class=\"sy1\">(</span>p1<span class=\"sy3\">.</span>\u03c6<span class=\"sy1\">)</span><span class=\"sy3\">*</span>math<span class=\"sy3\">.</span>Cos<span class=\"sy1\">(</span>p2<span class=\"sy3\">.</span>\u03c6<span class=\"sy1\">)</span><span class=\"sy3\">*</span>haversine<span class=\"sy1\">(</span>p2<span class=\"sy3\">.</span>\u03c8<span class=\"sy3\">-</span>p1<span class=\"sy3\">.</span>\u03c8<span class=\"sy1\">)))</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>hsDist<span class=\"sy1\">(</span>degPos<span class=\"sy1\">(</span><span class=\"nu0\">36</span><span class=\"sy3\">.</span><span class=\"nu0\">12</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">86</span><span class=\"sy3\">.</span><span class=\"nu0\">67</span><span class=\"sy1\">),</span> degPos<span class=\"sy1\">(</span><span class=\"nu0\">33</span><span class=\"sy3\">.</span><span class=\"nu0\">94</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">118</span><span class=\"sy3\">.</span><span class=\"nu0\">40</span><span class=\"sy1\">)))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Groovy", "loc": 16, "block": "<pre class=\"groovy highlighted_source\"><a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> haversine<span class=\"br0\">(</span>lat1, lon1, lat2, lon2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>  <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> R <span class=\"sy0\">=</span> <span class=\"nu0\">6372.8</span><br/>  <span class=\"co1\">// In kilometers</span><br/>  <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> dLat <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">toRadians</span><span class=\"br0\">(</span>lat2 <span class=\"sy0\">-</span> lat1<span class=\"br0\">)</span><br/>  <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> dLon <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">toRadians</span><span class=\"br0\">(</span>lon2 <span class=\"sy0\">-</span> lon1<span class=\"br0\">)</span><br/>  lat1 <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">toRadians</span><span class=\"br0\">(</span>lat1<span class=\"br0\">)</span><br/>  lat2 <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">toRadians</span><span class=\"br0\">(</span>lat2<span class=\"br0\">)</span><br/>\u00a0<br/>  <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> a <span class=\"sy0\">=</span> <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>dLat / <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>dLat / <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>dLon / <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>dLon / <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>lat1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>lat2<span class=\"br0\">)</span><br/>  <a href=\"http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def\"><span class=\"kw2\">def</span></a> c <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">asin</span><span class=\"br0\">(</span><a href=\"http://www.google.de/search?as_q=Math&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  R <span class=\"sy0\">*</span> c<br/><span class=\"br0\">}</span><br/>\u00a0<br/>haversine<span class=\"br0\">(</span><span class=\"nu0\">36.12</span>, <span class=\"sy0\">-</span><span class=\"nu0\">86.67</span>, <span class=\"nu0\">33.94</span>, <span class=\"sy0\">-</span><span class=\"nu0\">118.40</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"sy0\">&gt;</span> <span class=\"nu0\">2887.25995060711</span></pre>"}, {"lang": "Haskell", "loc": 33, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Printf<br/><span class=\"kw1\">import</span> Control<span class=\"sy0\">.</span>Arrow <span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"sy0\">***</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- The haversine of an angle.</span><br/>haversine <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><br/>haversine <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">^</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sin\"><span class=\"kw3\">sin</span></a> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- The approximate distance, in kilometers, between two points on Earth.</span><br/><span class=\"co1\">-- The latitude and longtitude are assumed to be in degrees.</span><br/>earthDist <span class=\"sy0\">::</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"sy0\">,</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><span class=\"br0\">)</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Float\"><span class=\"kw4\">Float</span></a><br/>earthDist <span class=\"sy0\">=</span> distDeg <span class=\"nu0\">6371</span><br/>  <span class=\"kw1\">where</span><br/>    distDeg radius p1 p2 <span class=\"sy0\">=</span> distRad radius <span class=\"br0\">(</span>deg2rad p1<span class=\"br0\">)</span> <span class=\"br0\">(</span>deg2rad p2<span class=\"br0\">)</span><br/>    distRad radius <span class=\"br0\">(</span>lat1<span class=\"sy0\">,</span> lng1<span class=\"br0\">)</span> <span class=\"br0\">(</span>lat2<span class=\"sy0\">,</span> lng2<span class=\"br0\">)</span> <span class=\"sy0\">=</span><br/>      <span class=\"br0\">(</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span> radius<span class=\"br0\">)</span> <span class=\"sy0\">*</span><br/>      <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:asin\"><span class=\"kw3\">asin</span></a><br/>        <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:min\"><span class=\"kw3\">min</span></a><br/>           <span class=\"nu0\">1.0</span><br/>           <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sqrt\"><span class=\"kw3\">sqrt</span></a> <span class=\"sy0\">$</span><br/>            haversine <span class=\"br0\">(</span>lat2 <span class=\"sy0\">-</span> lat1<span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>            <span class=\"br0\">(</span><span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:cos\"><span class=\"kw3\">cos</span></a> lat1 <span class=\"sy0\">*</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:cos\"><span class=\"kw3\">cos</span></a> lat2<span class=\"br0\">)</span> <span class=\"sy0\">*</span> haversine <span class=\"br0\">(</span>lng2 <span class=\"sy0\">-</span> lng1<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    deg2rad <span class=\"sy0\">=</span> d2r <span class=\"sy0\">***</span> d2r<br/>      <span class=\"kw1\">where</span><br/>        d2r <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"nu0\">180</span><span class=\"br0\">)</span> <span class=\"sy0\">.</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:pi\"><span class=\"kw3\">pi</span></a> <span class=\"sy0\">*</span><span class=\"br0\">)</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span><br/>  printf<br/>    <span class=\"st0\">\"The distance between BNA and LAX is about\u00a0%0.f km.<span class=\"es0\">\\n</span>\"</span><br/>    <span class=\"br0\">(</span>earthDist bna lax<span class=\"br0\">)</span><br/>  <span class=\"kw1\">where</span><br/>    bna <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">36.12</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">86.67</span><span class=\"br0\">)</span><br/>    lax <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">33.94</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">118.40</span><span class=\"br0\">)</span></pre>"}, {"lang": "Icon and Unicon", "loc": 15, "block": "<pre class=\"icon highlighted_source\"><span class=\"kw1\">link</span> printf<br/>\u00a0<br/><span class=\"kw1\">procedure</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"co1\">#: Haversine formula  </span><br/>   printf<span class=\"br0\">(</span><span class=\"st0\">\"BNA to LAX is\u00a0%d km (%d miles)<span class=\"es0\">\\n</span>\"</span><span class=\"sy1\">,</span><br/>      d <span class=\"sy1\">:=</span> gcdistance<span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"nu0\">36.12</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">86.67</span><span class=\"br0\">]</span><span class=\"sy1\">,</span><span class=\"br0\">[</span><span class=\"nu0\">33.94</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span><span class=\"nu0\">118.40</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy1\">,</span>d<span class=\"sy1\">*</span><span class=\"nu0\">3280</span><span class=\"sy1\">/</span><span class=\"nu0\">5280</span><span class=\"br0\">)</span>  <span class=\"co1\"># with cute km2mi conversion</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> gcdistance<span class=\"br0\">(</span>a<span class=\"sy1\">,</span>b<span class=\"br0\">)</span><br/>\ta<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">-:=</span> b<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><br/>   <span class=\"kw1\">every</span> <span class=\"br0\">(</span>x <span class=\"sy1\">:=</span> a<span class=\"sy1\">|</span>b<span class=\"br0\">)</span><span class=\"br0\">[</span>i <span class=\"sy1\">:=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> <span class=\"nu0\">2</span><span class=\"br0\">]</span> <span class=\"sy1\">:=</span> <span class=\"kw4\">dtor</span><span class=\"br0\">(</span>x<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\tdz <span class=\"sy1\">:=</span> sin<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-</span> sin<span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\tdx <span class=\"sy1\">:=</span> <span class=\"kw4\">cos</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">*</span> <span class=\"kw4\">cos</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">-</span> <span class=\"kw4\">cos</span><span class=\"br0\">(</span>b<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\tdy <span class=\"sy1\">:=</span> sin<span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy1\">*</span> <span class=\"kw4\">cos</span><span class=\"br0\">(</span>a<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><br/>\t<span class=\"kw1\">return</span> <span class=\"kw4\">asin</span><span class=\"br0\">(</span><span class=\"kw4\">sqrt</span><span class=\"br0\">(</span>dx <span class=\"sy1\">*</span> dx <span class=\"sy1\">+</span> dy <span class=\"sy1\">*</span> dy <span class=\"sy1\">+</span> dz <span class=\"sy1\">*</span> dz<span class=\"br0\">)</span> <span class=\"sy1\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">*</span> <span class=\"nu0\">2</span> <span class=\"sy1\">*</span> <span class=\"nu0\">6371</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Idris", "loc": 41, "block": "<pre class=\"text highlighted_source\">module Main<br/>\u00a0<br/>-- The haversine of an angle.<br/>hsin\u00a0: Double -&gt; Double<br/>hsin t = let u = sin (t/2) in u*u<br/>\u00a0<br/>-- The distance between two points, given by latitude and longtitude, on a<br/>-- circle.  The points are specified in radians.<br/>distRad\u00a0: Double -&gt; (Double, Double) -&gt; (Double, Double) -&gt; Double<br/>distRad radius (lat1, lng1) (lat2, lng2) =<br/>  let hlat = hsin (lat2 - lat1)<br/>      hlng = hsin (lng2 - lng1)<br/>      root = sqrt (hlat + cos lat1 * cos lat2 * hlng)<br/>  in 2 * radius * asin (min 1.0 root)<br/>\u00a0<br/>-- The distance between two points, given by latitude and longtitude, on a<br/>-- circle.  The points are specified in degrees.<br/>distDeg\u00a0: Double -&gt; (Double, Double) -&gt; (Double, Double) -&gt; Double <br/>distDeg radius p1 p2 = distRad radius (deg2rad p1) (deg2rad p2)<br/>  where <br/>        d2r\u00a0: Double -&gt; Double<br/>        d2r t = t * pi / 180 <br/>        deg2rad (t, u) = (d2r t, d2r u)<br/>\u00a0<br/>-- The approximate distance, in kilometers, between two points on Earth.  <br/>-- The latitude and longtitude are assumed to be in degrees.<br/>earthDist\u00a0: (Double, Double) -&gt; (Double, Double) -&gt; Double<br/>earthDist = distDeg 6372.8<br/>\u00a0<br/>main\u00a0: IO () <br/>main = putStrLn $ \"The distance between BNA and LAX is about \" ++ show (floor dst) ++ \" km.\"<br/> where <br/>      bna\u00a0: (Double, Double)<br/>      bna = (36.12,  -86.67)<br/>\u00a0<br/>      lax\u00a0: (Double, Double)<br/>      lax = (33.94, -118.40)<br/>\u00a0<br/>      dst\u00a0: Double<br/>      dst = earthDist bna lax<br/>\u00a0</pre>"}, {"lang": "J", "loc": 5, "block": "<pre class=\"j highlighted_source\">require <span class=\"st_h\">'trig'</span><br/>haversin=: <span class=\"nu0\">0.5</span> * <span class=\"nu0\">1</span> - cos<br/>Rearth=: <span class=\"nu0\">6372.8</span><br/>haversineDist=: Rearth * haversin^:<span class=\"nu0\">_1</span>@<span class=\"sy0\">((</span><span class=\"nu0\">1</span> , *&amp;<span class=\"sy0\">(</span><a class=\"__cf_email__\" data-cfemail=\"7c1f130f3c\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>{.<span class=\"sy0\">))</span> +/ .* [: haversin -<span class=\"sy0\">)</span>&amp;rfd<br/>\u00a0</pre>"}, {"lang": "Java", "loc": 16, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> Haversine <span class=\"br0\">{</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw1\">final</span> <span class=\"kw4\">double</span> R <span class=\"sy0\">=</span> <span class=\"nu0\">6372.8</span><span class=\"sy0\">;</span> <span class=\"co1\">// In kilometers</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">double</span> haversine<span class=\"br0\">(</span><span class=\"kw4\">double</span> lat1, <span class=\"kw4\">double</span> lon1, <span class=\"kw4\">double</span> lat2, <span class=\"kw4\">double</span> lon2<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">double</span> dLat <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">toRadians</span><span class=\"br0\">(</span>lat2 <span class=\"sy0\">-</span> lat1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> dLon <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">toRadians</span><span class=\"br0\">(</span>lon2 <span class=\"sy0\">-</span> lon1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        lat1 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">toRadians</span><span class=\"br0\">(</span>lat1<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        lat2 <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">toRadians</span><span class=\"br0\">(</span>lat2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"kw4\">double</span> a <span class=\"sy0\">=</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>dLat <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">pow</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>dLon <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>lat1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>lat2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw4\">double</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">asin</span><span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Math</span></a>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> R <span class=\"sy0\">*</span> c<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> args<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span>haversine<span class=\"br0\">(</span><span class=\"nu0\">36.12</span>, <span class=\"sy0\">-</span><span class=\"nu0\">86.67</span>, <span class=\"nu0\">33.94</span>, <span class=\"sy0\">-</span><span class=\"nu0\">118.40</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 11, "block": "<pre class=\"javascript highlighted_source\"><span class=\"kw1\">function</span> haversine<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       <span class=\"kw1\">var</span> radians <span class=\"sy0\">=</span> <span class=\"kw4\">Array</span>.<span class=\"kw1\">prototype</span>.<span class=\"me1\">map</span>.<span class=\"me1\">call</span><span class=\"br0\">(</span>arguments<span class=\"sy0\">,</span> <span class=\"kw1\">function</span><span class=\"br0\">(</span>deg<span class=\"br0\">)</span> <span class=\"br0\">{</span> <span class=\"kw1\">return</span> deg<span class=\"sy0\">/</span><span class=\"nu0\">180.0</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">PI</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">var</span> lat1 <span class=\"sy0\">=</span> radians<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> lon1 <span class=\"sy0\">=</span> radians<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> lat2 <span class=\"sy0\">=</span> radians<span class=\"br0\">[</span><span class=\"nu0\">2</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> lon2 <span class=\"sy0\">=</span> radians<span class=\"br0\">[</span><span class=\"nu0\">3</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">var</span> R <span class=\"sy0\">=</span> <span class=\"nu0\">6372.8</span><span class=\"sy0\">;</span> <span class=\"co1\">// km</span><br/>       <span class=\"kw1\">var</span> dLat <span class=\"sy0\">=</span> lat2 <span class=\"sy0\">-</span> lat1<span class=\"sy0\">;</span><br/>       <span class=\"kw1\">var</span> dLon <span class=\"sy0\">=</span> lon2 <span class=\"sy0\">-</span> lon1<span class=\"sy0\">;</span><br/>       <span class=\"kw1\">var</span> a <span class=\"sy0\">=</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>dLat <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>dLat <span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>dLon <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">sin</span><span class=\"br0\">(</span>dLon <span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>lat1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">cos</span><span class=\"br0\">(</span>lat2<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">var</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">asin</span><span class=\"br0\">(</span><span class=\"kw4\">Math</span>.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">return</span> R <span class=\"sy0\">*</span> c<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>console.<span class=\"me1\">log</span><span class=\"br0\">(</span>haversine<span class=\"br0\">(</span><span class=\"nu0\">36.12</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">86.67</span><span class=\"sy0\">,</span> <span class=\"nu0\">33.94</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">118.40</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "jq", "loc": 9, "block": "<pre class=\"text highlighted_source\">def haversine(lat1;lon1; lat2;lon2):<br/>  def radians: . * (1|atan)/45;<br/>  def sind: radians|sin;<br/>  def cosd: radians|cos;<br/>  def sq: . * .;<br/>\u00a0<br/>    (((lat2 - lat1)/2) | sind | sq) as $dlat<br/>  | (((lon2 - lon1)/2) | sind | sq) as $dlon<br/>  | 2 * 6372.8 * (( $dlat + (lat1|cosd) * (lat2|cosd) * $dlon ) | sqrt | asin)\u00a0;</pre>"}, {"lang": "Julia", "loc": 5, "block": "<pre class=\"text highlighted_source\">haversine(lat1, lon1, lat2, lon2) =<br/>    2 * 6372.8 * asin(sqrt(sind((lat2 - lat1) / 2) ^ 2 +<br/>    cosd(lat1) * cosd(lat2) * sind((lon2 - lon1) / 2) ^ 2))<br/>\u00a0<br/>@show haversine(36.12, -86.67, 33.94, -118.4)</pre>"}, {"lang": "Kotlin", "loc": 13, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> java.<span class=\"me1\">lang</span>.<span class=\"me1\">Math</span>.<span class=\"sy0\">*</span><br/>\u00a0<br/>const <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> R <span class=\"sy0\">=</span> <span class=\"nu0\">6372.8</span> <span class=\"co1\">// in kilometers</span><br/>\u00a0<br/>fun haversine<span class=\"br0\">(</span>lat1<span class=\"sy0\">:</span> Double, lon1<span class=\"sy0\">:</span> Double, lat2<span class=\"sy0\">:</span> Double, lon2<span class=\"sy0\">:</span> Double<span class=\"br0\">)</span><span class=\"sy0\">:</span> Double <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> \u03bb<span class=\"nu0\">1</span> <span class=\"sy0\">=</span> toRadians<span class=\"br0\">(</span>lat1<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> \u03bb<span class=\"nu0\">2</span> <span class=\"sy0\">=</span> toRadians<span class=\"br0\">(</span>lat2<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> \u0394\u03bb <span class=\"sy0\">=</span> toRadians<span class=\"br0\">(</span>lat2 - lat1<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> \u0394\u03c6 <span class=\"sy0\">=</span> toRadians<span class=\"br0\">(</span>lon2 - lon1<span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> R <span class=\"sy0\">*</span> asin<span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span>pow<span class=\"br0\">(</span>sin<span class=\"br0\">(</span>\u0394\u03bb / <span class=\"nu0\">2</span><span class=\"br0\">)</span>, <span class=\"nu0\">2.0</span><span class=\"br0\">)</span> + pow<span class=\"br0\">(</span>sin<span class=\"br0\">(</span>\u0394\u03c6 / <span class=\"nu0\">2</span><span class=\"br0\">)</span>, <span class=\"nu0\">2.0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span>\u03bb<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span>\u03bb<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> println<span class=\"br0\">(</span><span class=\"st0\">\"result: \"</span> + haversine<span class=\"br0\">(</span><span class=\"nu0\">36.12</span>, -<span class=\"nu0\">86.67</span>, <span class=\"nu0\">33.94</span>, -<span class=\"nu0\">118.40</span><span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "Liberty BASIC", "loc": 13, "block": "<pre class=\"lb highlighted_source\"><span class=\"kw1\">print</span> <span class=\"st0\">\"Haversine distance: \"</span>; <span class=\"kw2\">using</span><span class=\"br0\">(</span> <span class=\"st0\">\"####.###########\"</span><span class=\"sy0\">,</span> havDist<span class=\"br0\">(</span> <span class=\"nu0\">36.12</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">86.67</span><span class=\"sy0\">,</span> <span class=\"nu0\">33.94</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">118.4</span><span class=\"br0\">)</span><span class=\"br0\">)</span>; <span class=\"st0\">\" km.\"</span><br/><span class=\"kw1\">end</span><br/><span class=\"kw1\">function</span> havDist<span class=\"br0\">(</span> th1<span class=\"sy0\">,</span> ph1<span class=\"sy0\">,</span> th2<span class=\"sy0\">,</span> ph2<span class=\"br0\">)</span><br/>  degtorad   <span class=\"sy0\">=</span> <span class=\"kw2\">acs</span><span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">180</span><br/>  diameter   <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"nu0\">6372.8</span><br/>    LgD      <span class=\"sy0\">=</span> degtorad  <span class=\"sy0\">*</span> <span class=\"br0\">(</span>ph1 <span class=\"sy0\">-</span> ph2<span class=\"br0\">)</span><br/>    th1      <span class=\"sy0\">=</span> degtorad  <span class=\"sy0\">*</span> th1<br/>    th2      <span class=\"sy0\">=</span> degtorad  <span class=\"sy0\">*</span> th2<br/>    dz       <span class=\"sy0\">=</span> <span class=\"kw2\">sin</span><span class=\"br0\">(</span> th1<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"kw2\">sin</span><span class=\"br0\">(</span> th2<span class=\"br0\">)</span><br/>    dx       <span class=\"sy0\">=</span> <span class=\"kw2\">cos</span><span class=\"br0\">(</span> LgD<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw2\">cos</span><span class=\"br0\">(</span> th1<span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"kw2\">cos</span><span class=\"br0\">(</span> th2<span class=\"br0\">)</span><br/>    dy       <span class=\"sy0\">=</span> <span class=\"kw2\">sin</span><span class=\"br0\">(</span> LgD<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw2\">cos</span><span class=\"br0\">(</span> th1<span class=\"br0\">)</span><br/>    havDist  <span class=\"sy0\">=</span> <span class=\"kw2\">asn</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> dx^<span class=\"nu0\">2</span> <span class=\"sy0\">+</span>dy^<span class=\"nu0\">2</span> <span class=\"sy0\">+</span>dz^<span class=\"nu0\">2</span><span class=\"br0\">)</span>^<span class=\"nu0\">0.5</span> <span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span>diameter<br/><span class=\"kw1\">end</span> <span class=\"kw1\">function</span></pre>"}, {"lang": "LiveCode", "loc": 27, "block": "<pre class=\"text highlighted_source\">function radians n<br/>    return n * (3.1415926 / 180)<br/>end radians<br/>\u00a0<br/>function haversine lat1, lng1, lat2, lng2<br/>    local radiusEarth <br/>    local lat3, lng3<br/>    local lat1Rad, lat2Rad, lat3Rad<br/>    local lngRad1, lngRad2, lngRad3<br/>    local haver<br/>    put 6372.8 into radiusEarth<br/>    put (lat2 - lat1) into lat3<br/>    put (lng2 - lng1) into lng3<br/>    put radians(lat1) into lat1Rad<br/>    put radians(lat2) into lat2Rad<br/>    put radians(lat3) into lat3Rad<br/>    put radians(lng1) into lngRad1<br/>    put radians(lng2) into lngRad2<br/>    put radians(lng3) into lngRad3<br/>\u00a0<br/>    put\u00a0(sin(lat3Rad/2.0)^2)\u00a0+\u00a0(cos(lat1Rad))\u00a0\\<br/>          *\u00a0(cos(lat2Rad))\u00a0\\<br/>          *\u00a0(sin(lngRad3/2.0)^2)\u00a0\\<br/>          into haver\u00a0<br/>    return (radiusEarth * (2.0 * asin(sqrt(haver))))<br/>\u00a0<br/>end haversine</pre>"}, {"lang": "Lua", "loc": 6, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">local</span> <span class=\"kw1\">function</span> haversine<span class=\"br0\">(</span>x1<span class=\"sy0\">,</span> y1<span class=\"sy0\">,</span> x2<span class=\"sy0\">,</span> y2<span class=\"br0\">)</span><br/>r<span class=\"sy0\">=</span><span class=\"nu0\">0.017453292519943295769236907684886127</span><span class=\"sy0\">;</span><br/>x1<span class=\"sy0\">=</span> x1<span class=\"sy0\">*</span>r<span class=\"sy0\">;</span> x2<span class=\"sy0\">=</span> x2<span class=\"sy0\">*</span>r<span class=\"sy0\">;</span> y1<span class=\"sy0\">=</span> y1<span class=\"sy0\">*</span>r<span class=\"sy0\">;</span> y2<span class=\"sy0\">=</span> y2<span class=\"sy0\">*</span>r<span class=\"sy0\">;</span> dy <span class=\"sy0\">=</span> y2<span class=\"sy0\">-</span>y1<span class=\"sy0\">;</span> dx <span class=\"sy0\">=</span> x2<span class=\"sy0\">-</span>x1<span class=\"sy0\">;</span><br/>a <span class=\"sy0\">=</span> <span class=\"kw3\">math</span><span class=\"sy0\">.</span>pow<span class=\"br0\">(</span><span class=\"kw3\">math.sin</span><span class=\"br0\">(</span>dx<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"kw3\">math.cos</span><span class=\"br0\">(</span>x1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">math.cos</span><span class=\"br0\">(</span>x2<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"kw3\">math</span><span class=\"sy0\">.</span>pow<span class=\"br0\">(</span><span class=\"kw3\">math.sin</span><span class=\"br0\">(</span>dy<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"kw3\">math.asin</span><span class=\"br0\">(</span><span class=\"kw3\">math.sqrt</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> d <span class=\"sy0\">=</span> <span class=\"nu0\">6372.8</span> <span class=\"sy0\">*</span> c<span class=\"sy0\">;</span><br/><span class=\"kw1\">return</span> d<span class=\"sy0\">;</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Maple", "loc": 1, "block": "<pre class=\"text highlighted_source\">distance\u00a0:= (theta1, phi1, theta2, phi2)-&gt;2*6378.14*arcsin( sqrt((1-cos(theta2-theta1))/2 + cos(theta1)*cos(theta2)*(1-cos(phi2-phi1))/2) );</pre>"}, {"lang": "Mathematica / Wolfram Language", "loc": 6, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>distance[{theta1_, phi1_}, {theta2_, phi2_}]\u00a0:= <br/> 2*6378.14 <a class=\"__cf_email__\" data-cfemail=\"0a4b78695963644a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a><br/>   Sqrt[Haversine[(theta2 - theta1) Degree] + <br/>     Cos[theta1*Degree] Cos[theta2*Degree] Haversine[(phi2 - phi1) Degree]]<br/>\u00a0</pre>"}, {"lang": "MATLAB / Octave", "loc": 17, "block": "<pre class=\"matlab highlighted_source\"><span class=\"kw1\">function</span> rad = radians<span class=\"br0\">(</span>degree<span class=\"br0\">)</span> <br/><span class=\"co1\">% degrees to radians</span><br/>    rad = degree .* <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/pi.html\"><span class=\"kw2\">pi</span></a> / <span class=\"nu0\">180</span>;<br/><span class=\"kw1\">end</span>; <br/>\u00a0<br/><span class=\"kw1\">function</span> <span class=\"br0\">[</span>a,c,dlat,dlon<span class=\"br0\">]</span>=haversine<span class=\"br0\">(</span>lat1,lon1,lat2,lon2<span class=\"br0\">)</span><br/><span class=\"co1\">% HAVERSINE_FORMULA.AWK - converted from AWK </span><br/>    dlat = radians<span class=\"br0\">(</span>lat2-lat1<span class=\"br0\">)</span>;<br/>    dlon = radians<span class=\"br0\">(</span>lon2-lon1<span class=\"br0\">)</span>;<br/>    lat1 = radians<span class=\"br0\">(</span>lat1<span class=\"br0\">)</span>;<br/>    lat2 = radians<span class=\"br0\">(</span>lat2<span class=\"br0\">)</span>;<br/>    a = <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sin.html\"><span class=\"kw2\">sin</span></a><span class=\"br0\">(</span>dlat./<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.^<span class=\"nu0\">2</span> + <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/cos.html\"><span class=\"kw2\">cos</span></a><span class=\"br0\">(</span>lat1<span class=\"br0\">)</span> .* <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/cos.html\"><span class=\"kw2\">cos</span></a><span class=\"br0\">(</span>lat2<span class=\"br0\">)</span> .* <span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sin.html\"><span class=\"kw2\">sin</span></a><span class=\"br0\">(</span>dlon./<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>.^<span class=\"nu0\">2</span>;<br/>    c = <span class=\"nu0\">2</span> .* <a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/asin.html\"><span class=\"kw2\">asin</span></a><span class=\"br0\">(</span><a href=\"http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sqrt.html\"><span class=\"kw2\">sqrt</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    arrayfun<span class=\"br0\">(</span>@<span class=\"br0\">(</span>x<span class=\"br0\">)</span> printf<span class=\"br0\">(</span>\"distance: <span class=\"co1\">%.4f km\\n\",6372.8 * x), c);</span><br/><span class=\"kw1\">end</span>;<br/>\u00a0<br/><span class=\"br0\">[</span>a,c,dlat,dlon<span class=\"br0\">]</span> = haversine<span class=\"br0\">(</span><span class=\"nu0\">36.12</span>,-<span class=\"nu0\">86.67</span>,<span class=\"nu0\">33.94</span>,-<span class=\"nu0\">118.40</span><span class=\"br0\">)</span>; <span class=\"co1\">% BNA to LAX</span></pre>"}, {"lang": "Maxima", "loc": 12, "block": "<pre class=\"text highlighted_source\">dms(d, m, s)\u00a0:= (d + m/60 + s/3600)*%pi/180$<br/>\u00a0<br/>great_circle_distance(lat1, long1, lat2, long2)\u00a0:=<br/>   12742*asin(sqrt(sin((lat2 - lat1)/2)^2 + cos(lat1)*cos(lat2)*sin((long2 - long1)/2)^2))$<br/>\u00a0<br/>/* Coordinates are found here:<br/>      http://www.airport-data.com/airport/BNA/<br/>      http://www.airport-data.com/airport/LAX/   */<br/>\u00a0<br/>great_circle_distance(dms( 36,  7, 28.10), -dms( 86, 40, 41.50),<br/>                      dms( 33, 56, 32.98), -dms(118, 24, 29.05)), numer;<br/>/* 2886.326609413624 */</pre>"}, {"lang": "MySQL", "loc": 26, "block": "<pre class=\"mysql highlighted_source\">DELIMITER $$<br/>\u00a0<br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=CREATE\"><span class=\"kw1\">CREATE</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FUNCTION\"><span class=\"kw1\">FUNCTION</span></a> haversine <span class=\"br0\">(</span><br/>\t\tlat1 <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FLOAT\"><span class=\"kw4\">FLOAT</span></a><span class=\"sy2\">,</span> lon1 <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FLOAT\"><span class=\"kw4\">FLOAT</span></a><span class=\"sy2\">,</span><br/>\t\tlat2 <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FLOAT\"><span class=\"kw4\">FLOAT</span></a><span class=\"sy2\">,</span> lon2 <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FLOAT\"><span class=\"kw4\">FLOAT</span></a><br/>\t<span class=\"br0\">)</span> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=RETURNS\"><span class=\"kw1\">RETURNS</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FLOAT\"><span class=\"kw4\">FLOAT</span></a><br/>\t<a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=NO%20SQL\"><span class=\"kw1\">NO SQL</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DETERMINISTIC\"><span class=\"kw1\">DETERMINISTIC</span></a><br/><a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=BEGIN\"><span class=\"kw1\">BEGIN</span></a><br/>\t<a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DECLARE\"><span class=\"kw1\">DECLARE</span></a> r <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FLOAT\"><span class=\"kw4\">FLOAT</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=UNSIGNED\"><span class=\"kw6\">unsigned</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DEFAULT\"><span class=\"kw2\">DEFAULT</span></a> <span class=\"nu0\">6372.8</span><span class=\"sy2\">;</span><br/>\t<a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DECLARE\"><span class=\"kw1\">DECLARE</span></a> dLat <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FLOAT\"><span class=\"kw4\">FLOAT</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=UNSIGNED\"><span class=\"kw6\">unsigned</span></a><span class=\"sy2\">;</span><br/>\t<a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DECLARE\"><span class=\"kw1\">DECLARE</span></a> dLon <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FLOAT\"><span class=\"kw4\">FLOAT</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=UNSIGNED\"><span class=\"kw6\">unsigned</span></a><span class=\"sy2\">;</span><br/>\t<a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DECLARE\"><span class=\"kw1\">DECLARE</span></a> a <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FLOAT\"><span class=\"kw4\">FLOAT</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=UNSIGNED\"><span class=\"kw6\">unsigned</span></a><span class=\"sy2\">;</span><br/>\t<a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=DECLARE\"><span class=\"kw1\">DECLARE</span></a> c <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=FLOAT\"><span class=\"kw4\">FLOAT</span></a> <a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=UNSIGNED\"><span class=\"kw6\">unsigned</span></a><span class=\"sy2\">;</span><br/>\u00a0<br/>\t<a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> dLat <span class=\"sy1\">=</span> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">RADIANS</span></a><span class=\"br0\">(</span>lat2 <span class=\"sy1\">-</span> lat1<span class=\"br0\">)</span><span class=\"sy2\">;</span><br/>\t<a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> dLon <span class=\"sy1\">=</span> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">RADIANS</span></a><span class=\"br0\">(</span>lon2 <span class=\"sy1\">-</span> lon1<span class=\"br0\">)</span><span class=\"sy2\">;</span><br/>\t<a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> lat1 <span class=\"sy1\">=</span> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">RADIANS</span></a><span class=\"br0\">(</span>lat1<span class=\"br0\">)</span><span class=\"sy2\">;</span><br/>\t<a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> lat2 <span class=\"sy1\">=</span> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">RADIANS</span></a><span class=\"br0\">(</span>lat2<span class=\"br0\">)</span><span class=\"sy2\">;</span><br/>\u00a0<br/>\t<a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> a <span class=\"sy1\">=</span> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">POW</span></a><span class=\"br0\">(</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">SIN</span></a><span class=\"br0\">(</span>dLat <span class=\"sy1\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy2\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy1\">+</span> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">COS</span></a><span class=\"br0\">(</span>lat1<span class=\"br0\">)</span> <span class=\"sy1\">*</span> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">COS</span></a><span class=\"br0\">(</span>lat2<span class=\"br0\">)</span> <span class=\"sy1\">*</span> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">POW</span></a><span class=\"br0\">(</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">SIN</span></a><span class=\"br0\">(</span>dLon <span class=\"sy1\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy2\">,</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy2\">;</span><br/>\t<a href=\"http://search.mysql.com/search?site=refman-%35%31&amp;q=SET\"><span class=\"kw1\">SET</span></a> c <span class=\"sy1\">=</span> <span class=\"nu0\">2</span> <span class=\"sy1\">*</span> <a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">ASIN</span></a><span class=\"br0\">(</span><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/numeric-functions.html\"><span class=\"kw15\">SQRT</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy2\">;</span><br/>\u00a0<br/>\tRETURN <span class=\"br0\">(</span>r <span class=\"sy1\">*</span> c<span class=\"br0\">)</span><span class=\"sy2\">;</span><br/><a href=\"http://dev.mysql.com/doc/refman/%35%2E%31/en/control-flow-functions.html\"><span class=\"kw12\">END</span></a>$$<br/>\u00a0<br/>DELIMITER <span class=\"sy2\">;</span></pre>"}, {"lang": "\u041c\u041a-61/52", "loc": 7, "block": "<pre class=\"text highlighted_source\">\u041f3\t-&gt;\t\u041f2\t-&gt;\t\u041f1\t-&gt;\t\u041f0<br/>\u043f\u0438\t1\t8\t0\t/\t\u041f4<br/>\u0418\u041f1\t\u041c\u0413\t\u0418\u041f3\t\u041c\u0413\t-\t\u0418\u041f4\t*\t\u041f1\t\u0418\u041f0\t\u041c\u0413\t\u0418\u041f4\t*\t\u041f0\t\u0418\u041f2\t\u041c\u0413\t\u0418\u041f4\t*\t\u041f2<br/>\u0418\u041f0\tsin\t\u0418\u041f2\tsin\t-\t\u041f8<br/>\u0418\u041f1\tcos\t\u0418\u041f0\tcos\t*\t\u0418\u041f2\tcos\t-\t\u041f6<br/>\u0418\u041f1\tsin\t\u0418\u041f0\tcos\t*\t\u041f7<br/>\u0418\u041f6\tx^2\t\u0418\u041f7\tx^2\t\u0418\u041f8\tx^2\t+\t+\t\u041a\u0432\u041a\u043e\u0440\t2\t/\tarcsin\t2\t*\t\u0418\u041f5\t*\t\u0421/\u041f</pre>"}, {"lang": "Nim", "loc": 18, "block": "<pre class=\"text highlighted_source\">import math<br/>\u00a0<br/>proc radians(x): float = x * Pi / 180<br/>\u00a0<br/>proc haversine(lat1, lon1, lat2, lon2): float =<br/>  const r = 6372.8 # Earth radius in kilometers<br/>  let<br/>    dLat = radians(lat2 - lat1)<br/>    dLon = radians(lon2 - lon1)<br/>    lat1 = radians(lat1)<br/>    lat2 = radians(lat2)<br/>\u00a0<br/>    a = sin(dLat/2)*sin(dLat/2) + cos(lat1)*cos(lat2)*sin(dLon/2)*sin(dLon/2)<br/>    c = 2*arcsin(sqrt(a))<br/>\u00a0<br/>  result = r * c<br/>\u00a0<br/>echo haversine(36.12, -86.67, 33.94, -118.40)</pre>"}, {"lang": "Oberon-2", "loc": 29, "block": "<pre class=\"oberon2 highlighted_source\">\u00a0<br/><span class=\"kw1\">MODULE</span> Haversines;<br/><span class=\"kw1\">IMPORT</span> <br/>  LRealMath<span class=\"sy0\">,</span><br/>  Out;<br/>\u00a0<br/>  <span class=\"kw1\">PROCEDURE</span> Distance<span class=\"br0\">(</span>lat1<span class=\"sy0\">,</span>lon1<span class=\"sy0\">,</span>lat2<span class=\"sy0\">,</span>lon2<span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span>;<br/>  <span class=\"kw1\">CONST</span><br/>    r <span class=\"sy0\">=</span> 6372.8D0; <span class=\"coMULTI\">(* Earth radius as LONGREAL *)</span><br/>    to_radians <span class=\"sy0\">=</span> LRealMath.<span class=\"me1\">pi</span> <span class=\"sy0\">/</span> 180.0D0;<br/>  <span class=\"kw1\">VAR</span><br/>    d<span class=\"sy0\">,</span>ph1<span class=\"sy0\">,</span>th1<span class=\"sy0\">,</span>th2<span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span>;<br/>    dz<span class=\"sy0\">,</span>dx<span class=\"sy0\">,</span>dy<span class=\"sy0\">:</span> <span class=\"kw4\">LONGREAL</span>;<br/>  <span class=\"kw1\">BEGIN</span><br/>    d <span class=\"sy0\">:=</span> lon1 <span class=\"sy0\">-</span> lon2;<br/>    ph1 <span class=\"sy0\">:=</span> d <span class=\"sy0\">*</span> to_radians;<br/>    th1 <span class=\"sy0\">:=</span> lat1 <span class=\"sy0\">*</span> to_radians;<br/>    th2 <span class=\"sy0\">:=</span> lat2 <span class=\"sy0\">*</span> to_radians;<br/>\u00a0<br/>    dz <span class=\"sy0\">:=</span> LRealMath.<span class=\"me1\">sin</span><span class=\"br0\">(</span>th1<span class=\"br0\">)</span> <span class=\"sy0\">-</span> LRealMath.<span class=\"me1\">sin</span><span class=\"br0\">(</span>th2<span class=\"br0\">)</span>;<br/>    dx <span class=\"sy0\">:=</span> LRealMath.<span class=\"me1\">cos</span><span class=\"br0\">(</span>ph1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> LRealMath.<span class=\"me1\">cos</span><span class=\"br0\">(</span>th1<span class=\"br0\">)</span> <span class=\"sy0\">-</span> LRealMath.<span class=\"me1\">cos</span><span class=\"br0\">(</span>th2<span class=\"br0\">)</span>;<br/>    dy <span class=\"sy0\">:=</span> LRealMath.<span class=\"me1\">sin</span><span class=\"br0\">(</span>ph1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> LRealMath.<span class=\"me1\">cos</span><span class=\"br0\">(</span>th1<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"kw1\">RETURN</span> LRealMath.<span class=\"me1\">arcsin</span><span class=\"br0\">(</span>LRealMath.<span class=\"me1\">sqrt</span><span class=\"br0\">(</span>LRealMath.<span class=\"me1\">power</span><span class=\"br0\">(</span>dx<span class=\"sy0\">,</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> LRealMath.<span class=\"me1\">power</span><span class=\"br0\">(</span>dy<span class=\"sy0\">,</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> LRealMath.<span class=\"me1\">power</span><span class=\"br0\">(</span>dz<span class=\"sy0\">,</span><span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2.0</span> <span class=\"sy0\">*</span> r;<br/>  <span class=\"kw1\">END</span> Distance;<br/><span class=\"kw1\">BEGIN</span><br/>  Out.<span class=\"me1\">LongRealFix</span><span class=\"br0\">(</span>Distance<span class=\"br0\">(</span><span class=\"nu0\">36.12</span><span class=\"sy0\">,-</span><span class=\"nu0\">86.67</span><span class=\"sy0\">,</span><span class=\"nu0\">33.94</span><span class=\"sy0\">,-</span><span class=\"nu0\">118.4</span><span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"nu0\">6</span><span class=\"sy0\">,</span><span class=\"nu0\">10</span><span class=\"br0\">)</span>;Out.<span class=\"me1\">Ln</span><br/><span class=\"kw1\">END</span> Haversines.<br/>\u00a0</pre>"}, {"lang": "Objeck", "loc": 22, "block": "<pre class=\"objeck highlighted_source\">\u00a0<br/><span class=\"kw1\">bundle</span> Default <span class=\"br0\">{</span><br/>  <span class=\"kw1\">class</span> Haversine <span class=\"br0\">{</span><br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Dist<span class=\"br0\">(</span>th1 <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"sy0\">,</span> ph1 <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"sy0\">,</span> th2 <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"sy0\">,</span> ph2 <span class=\"sy0\">:</span> <span class=\"kw2\">Float</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Float</span> <span class=\"br0\">{</span><br/>      ph1 <span class=\"sy0\">-=</span> ph2<span class=\"sy0\">;</span><br/>      ph1 <span class=\"sy0\">:=</span> ph1<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToRadians</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      th1 <span class=\"sy0\">:=</span> th1<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToRadians</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      th2 <span class=\"sy0\">:=</span> th2<span class=\"sy0\">-&gt;</span><span class=\"me1\">ToRadians</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      dz <span class=\"sy0\">:=</span> th1<span class=\"sy0\">-&gt;</span><span class=\"me1\">Sin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">-</span> th2<span class=\"sy0\">-&gt;</span><span class=\"me1\">Sin</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      dx <span class=\"sy0\">:=</span> ph1<span class=\"sy0\">-&gt;</span><span class=\"me1\">Cos</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> th1<span class=\"sy0\">-&gt;</span><span class=\"me1\">Cos</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> th2<span class=\"sy0\">-&gt;</span><span class=\"me1\">Cos</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>      dy <span class=\"sy0\">:=</span> ph1<span class=\"sy0\">-&gt;</span><span class=\"me1\">Sin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> th1<span class=\"sy0\">-&gt;</span><span class=\"me1\">Cos</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>      <span class=\"kw1\">return</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>dx <span class=\"sy0\">*</span> dx <span class=\"sy0\">+</span> dy <span class=\"sy0\">*</span> dy <span class=\"sy0\">+</span> dz <span class=\"sy0\">*</span> dz<span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">SquareRoot</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2.0</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">ArcSin</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <span class=\"nu0\">6371.0</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> <span class=\"sy0\">:</span> Main<span class=\"br0\">(</span>args <span class=\"sy0\">:</span> <span class=\"kw2\">String</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> ~ <span class=\"kw2\">Nil</span> <span class=\"br0\">{</span><br/>      IO.Console<span class=\"sy0\">-&gt;</span><span class=\"me1\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"distance: \"</span><span class=\"br0\">)</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">PrintLine</span><span class=\"br0\">(</span>Dist<span class=\"br0\">(</span><span class=\"nu0\">36.12</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">86.67</span><span class=\"sy0\">,</span> <span class=\"nu0\">33.94</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">118.4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Objective-C", "loc": 17, "block": "<pre class=\"objc highlighted_source\"><span class=\"sy0\">+</span> <span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span> distanceBetweenLat1<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>lat1 lon1<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>lon1<br/>                          lat2<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>lat2 lon2<span class=\"sy0\">:</span><span class=\"br0\">(</span><span class=\"kw4\">double</span><span class=\"br0\">)</span>lon2 <span class=\"br0\">{</span><br/>    <span class=\"co2\">//degrees to radians</span><br/>    <span class=\"kw4\">double</span> lat1rad <span class=\"sy0\">=</span> lat1 <span class=\"sy0\">*</span> M_PI<span class=\"sy0\">/</span><span class=\"nu0\">180</span>; <br/>    <span class=\"kw4\">double</span> lon1rad <span class=\"sy0\">=</span> lon1 <span class=\"sy0\">*</span> M_PI<span class=\"sy0\">/</span><span class=\"nu0\">180</span>;<br/>    <span class=\"kw4\">double</span> lat2rad <span class=\"sy0\">=</span> lat2 <span class=\"sy0\">*</span> M_PI<span class=\"sy0\">/</span><span class=\"nu0\">180</span>;<br/>    <span class=\"kw4\">double</span> lon2rad <span class=\"sy0\">=</span> lon2 <span class=\"sy0\">*</span> M_PI<span class=\"sy0\">/</span><span class=\"nu0\">180</span>;<br/>\u00a0<br/>    <span class=\"co2\">//deltas</span><br/>    <span class=\"kw4\">double</span> dLat <span class=\"sy0\">=</span> lat2rad <span class=\"sy0\">-</span> lat1rad;<br/>    <span class=\"kw4\">double</span> dLon <span class=\"sy0\">=</span> lon2rad <span class=\"sy0\">-</span> lon1rad;<br/>\u00a0<br/>    <span class=\"kw4\">double</span> a <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span>dLat<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span>dLat<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span>dLon<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span>dLon<span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span>lat1rad<span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span>lat2rad<span class=\"br0\">)</span>;<br/>    <span class=\"kw4\">double</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/asin.html\"><span class=\"kw3\">asin</span></a><span class=\"br0\">(</span><a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw4\">double</span> R <span class=\"sy0\">=</span> <span class=\"nu0\">6372.8</span>;<br/>    <span class=\"kw1\">return</span> R <span class=\"sy0\">*</span> c;<br/><span class=\"br0\">}</span></pre>"}, {"lang": "OCaml", "loc": 32, "block": "<pre class=\"ocaml highlighted_source\"><span class=\"co1\">(* Preamble -- some math, and an \"angle\" type which might be part of a common library. *)</span><br/><span class=\"kw1\">let</span> pi <span class=\"sy0\">=</span> <span class=\"nu0\">4</span><span class=\"sy0\">.</span> <span class=\"sy0\">*.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALatan\"><span class=\"kw3\">atan</span></a> <span class=\"nu0\">1</span><span class=\"sy0\">.</span><br/><span class=\"kw1\">let</span> radians_of_degrees <span class=\"sy0\">=</span> <span class=\"br0\">(</span> <span class=\"sy0\">*.</span> <span class=\"br0\">)</span> <span class=\"br0\">(</span>pi <span class=\"sy0\">/.</span> <span class=\"nu0\">180</span><span class=\"sy0\">.</span><span class=\"br0\">)</span><br/><span class=\"kw1\">let</span> haversin theta <span class=\"sy0\">=</span> <span class=\"nu0\">0.5</span> <span class=\"sy0\">*.</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">.</span> <span class=\"sy0\">-.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcos\"><span class=\"kw3\">cos</span></a> theta<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">(* The angle type can track radians or degrees, which I'll use for automatic conversion. *)</span><br/><span class=\"kw1\">type</span> angle <span class=\"sy0\">=</span> Deg <span class=\"kw1\">of</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"sy0\">|</span> Rad <span class=\"kw1\">of</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a><br/><span class=\"kw1\">let</span> as_radians <span class=\"sy0\">=</span> <span class=\"kw1\">function</span><br/>  <span class=\"sy0\">|</span> Deg d <span class=\"sy0\">-&gt;</span> radians_of_degrees d<br/>  <span class=\"sy0\">|</span> Rad r <span class=\"sy0\">-&gt;</span> r<br/>\u00a0<br/><span class=\"co1\">(* Demonstrating use of a module, and record type. *)</span><br/><span class=\"kw1\">module</span> LatLong <span class=\"sy0\">=</span> <span class=\"kw1\">struct</span><br/>  <span class=\"kw1\">type</span> t <span class=\"sy0\">=</span> <span class=\"br0\">{</span> lat<span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a><span class=\"sy0\">;</span> lng<span class=\"sy0\">:</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat\"><span class=\"kw3\">float</span></a> <span class=\"br0\">}</span><br/>  <span class=\"kw1\">let</span> of_angles lat lng <span class=\"sy0\">=</span> <span class=\"br0\">{</span> lat <span class=\"sy0\">=</span> as_radians lat<span class=\"sy0\">;</span> lng <span class=\"sy0\">=</span> as_radians lng <span class=\"br0\">}</span><br/>  <span class=\"kw1\">let</span> sub a b <span class=\"sy0\">=</span> <span class=\"br0\">{</span> lat <span class=\"sy0\">=</span> a<span class=\"sy0\">.</span>lat<span class=\"sy0\">-.</span>b<span class=\"sy0\">.</span>lat<span class=\"sy0\">;</span> lng <span class=\"sy0\">=</span> a<span class=\"sy0\">.</span>lng<span class=\"sy0\">-.</span>b<span class=\"sy0\">.</span>lng <span class=\"br0\">}</span><br/>\u00a0<br/>  <span class=\"kw1\">let</span> dist radius a b <span class=\"sy0\">=</span><br/>    <span class=\"kw1\">let</span> d <span class=\"sy0\">=</span> sub b a <span class=\"kw1\">in</span><br/>    <span class=\"kw1\">let</span> h <span class=\"sy0\">=</span> haversin d<span class=\"sy0\">.</span>lat <span class=\"sy0\">+.</span> haversin d<span class=\"sy0\">.</span>lng <span class=\"sy0\">*.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcos\"><span class=\"kw3\">cos</span></a> a<span class=\"sy0\">.</span>lat <span class=\"sy0\">*.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcos\"><span class=\"kw3\">cos</span></a> b<span class=\"sy0\">.</span>lat <span class=\"kw1\">in</span><br/>    <span class=\"nu0\">2</span><span class=\"sy0\">.</span> <span class=\"sy0\">*.</span> radius <span class=\"sy0\">*.</span> <a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALasin\"><span class=\"kw3\">asin</span></a> <span class=\"br0\">(</span><a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALsqrt\"><span class=\"kw3\">sqrt</span></a> h<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"co1\">(* Now we can use the LatLong module to construct coordinates and calculate<br/> * great-circle distances.<br/> * NOTE radius and resulting distance are in the same measure, and units could<br/> * be tracked for this too... but who uses miles?\u00a0;) *)</span><br/><span class=\"kw1\">let</span> earth_dist <span class=\"sy0\">=</span> LatLong<span class=\"sy0\">.</span>dist <span class=\"nu0\">6372.8</span><br/><span class=\"kw1\">and</span> bna <span class=\"sy0\">=</span> LatLong<span class=\"sy0\">.</span>of_angles <span class=\"br0\">(</span>Deg <span class=\"nu0\">36.12</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Deg <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">86.67</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">and</span> lax <span class=\"sy0\">=</span> LatLong<span class=\"sy0\">.</span>of_angles <span class=\"br0\">(</span>Deg <span class=\"nu0\">33.94</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>Deg <span class=\"br0\">(</span><span class=\"sy0\">-</span><span class=\"nu0\">118.4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">in</span><br/>earth_dist bna lax<span class=\"sy0\">;;</span></pre>"}, {"lang": "Oforth", "loc": 12, "block": "<pre class=\"text highlighted_source\">import: math<br/>\u00a0<br/>: haversine(lat1, lon1, lat2, lon2)<br/>| lat lon |<br/>\u00a0<br/>   lat2 lat1 - asRadian -&gt;lat<br/>   lon2 lon1 - asRadian -&gt;lon<br/>\u00a0<br/>   lon 2 / sin sq lat1 asRadian cos * lat2 asRadian cos * <br/>   lat 2 / sin sq + sqrt asin 2 * 6372.8 *\u00a0;<br/>\u00a0<br/>haversine(36.12, -86.67, 33.94, -118.40) println</pre>"}, {"lang": "ooRexx", "loc": 26, "block": "<pre class=\"oorexx highlighted_source\"><span class=\"coMULTI\">/*REXX pgm calculates distance between Nashville &amp; Los Angles airports. */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\" Nashville:  north 36\u00ba  7.2', west  86\u00ba 40.2'   =   36.12\u00ba,  -86.67\u00ba\"</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"Los Angles:  north 33\u00ba 56.4', west 118\u00ba 24.0'   =   33.94\u00ba, -118.40\u00ba\"</span><br/><span class=\"kw1\">say</span><br/>dist=surfaceDistance<span class=\"br0\">(</span><span class=\"nu0\">36.12</span>,  -<span class=\"nu0\">86.67</span>,  <span class=\"nu0\">33.94</span>,  -<span class=\"nu0\">118.4</span><span class=\"br0\">)</span><br/>kdist=<span class=\"kw6\">format</span><span class=\"br0\">(</span>dist<span class=\"sy0\">/</span><span class=\"nu0\">1</span>       ,,<span class=\"nu0\">2</span><span class=\"br0\">)</span>         <span class=\"coMULTI\">/*show 2 digs past decimal point.*/</span><br/>mdist=<span class=\"kw6\">format</span><span class=\"br0\">(</span>dist<span class=\"sy0\">/</span><span class=\"nu0\">1.609344</span>,,<span class=\"nu0\">2</span><span class=\"br0\">)</span>         <span class=\"coMULTI\">/*  \"  \"   \"    \"     \"      \"   */</span><br/>ndist=<span class=\"kw6\">format</span><span class=\"br0\">(</span>mdist<span class=\"sy0\">*</span><span class=\"nu0\">5280</span><span class=\"sy0\">/</span><span class=\"nu0\">6076.1</span>,,<span class=\"nu0\">2</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/*  \"  \"   \"    \"     \"      \"   */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">' distance between=  '</span>  kdist  <span class=\"st0\">\" kilometers,\"</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'               or   '</span>  mdist  <span class=\"st0\">\" statute miles,\"</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">'               or   '</span>  ndist  <span class=\"st0\">\" nautical or air miles.\"</span><br/><span class=\"kw1\">exit</span>                                   <span class=\"coMULTI\">/*stick a fork in it, we're done.*/</span><br/><span class=\"coMULTI\">/*----------------------------------SURFACEDISTANCE subroutine----------*/</span><br/>surfaceDistance: <span class=\"kw1\">arg</span> th1,ph1,th2,ph2   <span class=\"coMULTI\">/*use haversine formula for dist.*/</span><br/>  radius = <span class=\"nu0\">6372.8</span>                      <span class=\"coMULTI\">/*earth's mean radius in km      */</span><br/>  ph1 = ph1-ph2<br/>  x = cos<span class=\"br0\">(</span>ph1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span>th1<span class=\"br0\">)</span> - cos<span class=\"br0\">(</span>th2<span class=\"br0\">)</span><br/>  y = sin<span class=\"br0\">(</span>ph1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span>th1<span class=\"br0\">)</span><br/>  z = sin<span class=\"br0\">(</span>th1<span class=\"br0\">)</span> - sin<span class=\"br0\">(</span>th2<span class=\"br0\">)</span><br/>  <span class=\"kw1\">return</span> radius <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> aSin<span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span>x<span class=\"sy0\">**</span><span class=\"nu0\">2</span>+y<span class=\"sy0\">**</span><span class=\"nu0\">2</span>+z<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span> <span class=\"br0\">)</span><br/>\u00a0<br/>cos: <span class=\"kw1\">Return</span> RxCalcCos<span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>sin: <span class=\"kw1\">Return</span> RxCalcSin<span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>asin: <span class=\"kw1\">Return</span> RxCalcArcSin<span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>,,<span class=\"st0\">'R'</span><span class=\"br0\">)</span><br/>sqrt: <span class=\"kw1\">Return</span> RxCalcSqrt<span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>::requires rxMath library</pre>"}, {"lang": "PARI/GP", "loc": 9, "block": "<pre class=\"parigp highlighted_source\">dist<span class=\"br0\">(</span>th1<span class=\"sy0\">,</span> th2<span class=\"sy0\">,</span> ph<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>v<span class=\"sy0\">=</span><span class=\"br0\">[</span><span class=\"kw1\">cos</span><span class=\"br0\">(</span>ph<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"kw1\">cos</span><span class=\"br0\">(</span>th1<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"kw1\">cos</span><span class=\"br0\">(</span>th2<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">sin</span><span class=\"br0\">(</span>ph<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"kw1\">cos</span><span class=\"br0\">(</span>th1<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"kw1\">sin</span><span class=\"br0\">(</span>th1<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"kw1\">sin</span><span class=\"br0\">(</span>th2<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">asin</span><span class=\"br0\">(</span><span class=\"kw1\">sqrt</span><span class=\"br0\">(</span><span class=\"kw1\">norml2</span><span class=\"br0\">(</span>v<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu1\">2</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>distEarth<span class=\"br0\">(</span>th1<span class=\"sy0\">,</span> ph1<span class=\"sy0\">,</span> th2<span class=\"sy0\">,</span> ph2<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>  my<span class=\"br0\">(</span>d<span class=\"sy0\">=</span><span class=\"nu1\">12742</span><span class=\"sy0\">,</span> deg<span class=\"sy0\">=</span><span class=\"kw1\">Pi</span><span class=\"sy0\">/</span><span class=\"nu1\">180</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\">\\\\ Authalic diameter of the Earth</span><br/>  d<span class=\"sy0\">*</span>dist<span class=\"br0\">(</span>th1<span class=\"sy0\">*</span>deg<span class=\"sy0\">,</span> th2<span class=\"sy0\">*</span>deg<span class=\"sy0\">,</span> <span class=\"br0\">(</span>ph1<span class=\"sy0\">-</span>ph2<span class=\"br0\">)</span><span class=\"sy0\">*</span>deg<span class=\"br0\">)</span><br/><span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>distEarth<span class=\"br0\">(</span><span class=\"nu2\">36.12</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu2\">86.67</span><span class=\"sy0\">,</span> <span class=\"nu2\">33.94</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu2\">118.4</span><span class=\"br0\">)</span></pre>"}, {"lang": "Pascal", "loc": 24, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">Program</span> HaversineDemo<span class=\"br0\">(</span>output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">uses</span><br/>  Math<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> haversineDist<span class=\"br0\">(</span>th1<span class=\"sy1\">,</span> ph1<span class=\"sy1\">,</span> th2<span class=\"sy1\">,</span> ph2<span class=\"sy1\">:</span> double<span class=\"br0\">)</span><span class=\"sy1\">:</span> double<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">const</span><br/>   diameter <span class=\"sy3\">=</span> <span class=\"nu0\">2</span> <span class=\"sy3\">*</span> <span class=\"nu0\">6372.8</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">var</span><br/>    dx<span class=\"sy1\">,</span> dy<span class=\"sy1\">,</span> dz<span class=\"sy1\">:</span> double<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    ph1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> degtorad<span class=\"br0\">(</span>ph1 <span class=\"sy3\">-</span> ph2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    th1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> degtorad<span class=\"br0\">(</span>th1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    th2 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> degtorad<span class=\"br0\">(</span>th2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/>    dz <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">sin</span><span class=\"br0\">(</span>th1<span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"kw3\">sin</span><span class=\"br0\">(</span>th2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    dx <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">cos</span><span class=\"br0\">(</span>ph1<span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"kw3\">cos</span><span class=\"br0\">(</span>th1<span class=\"br0\">)</span> <span class=\"sy3\">-</span> <span class=\"kw3\">cos</span><span class=\"br0\">(</span>th2<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    dy <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"kw3\">sin</span><span class=\"br0\">(</span>ph1<span class=\"br0\">)</span> <span class=\"sy3\">*</span> <span class=\"kw3\">cos</span><span class=\"br0\">(</span>th1<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    haversineDist <span class=\"sy1\">:</span><span class=\"sy3\">=</span> arcsin<span class=\"br0\">(</span><span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>dx<span class=\"sy3\">**</span><span class=\"nu0\">2</span> <span class=\"sy3\">+</span> dy<span class=\"sy3\">**</span><span class=\"nu0\">2</span> <span class=\"sy3\">+</span> dz<span class=\"sy3\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy3\">*</span> diameter<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  <span class=\"kw3\">writeln</span> <span class=\"br0\">(</span><span class=\"st0\">'Haversine distance: '</span><span class=\"sy1\">,</span> haversineDist<span class=\"br0\">(</span><span class=\"nu0\">36.12</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">86.67</span><span class=\"sy1\">,</span> <span class=\"nu0\">33.94</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">118.4</span><span class=\"br0\">)</span><span class=\"sy1\">:</span><span class=\"nu0\">7</span><span class=\"sy1\">:</span><span class=\"nu0\">2</span><span class=\"sy1\">,</span> <span class=\"st0\">' km.'</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 18, "block": "<pre class=\"perl highlighted_source\"><span class=\"kw2\">use</span> ntheory <span class=\"co2\">qw/Pi/</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> asin <span class=\"br0\">{</span> <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span> <a href=\"http://perldoc.perl.org/functions/atan2.html\"><span class=\"kw3\">atan2</span></a><span class=\"br0\">(</span><span class=\"re0\">$x</span><span class=\"sy0\">,</span> <a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">-</span><span class=\"re0\">$x</span><span class=\"re0\">*$x</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> surfacedist <span class=\"br0\">{</span><br/>  <span class=\"kw1\">my</span><span class=\"br0\">(</span><span class=\"re0\">$lat1</span><span class=\"sy0\">,</span> <span class=\"re0\">$lon1</span><span class=\"sy0\">,</span> <span class=\"re0\">$lat2</span><span class=\"sy0\">,</span> <span class=\"re0\">$lon2</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$radius</span> <span class=\"sy0\">=</span> <span class=\"nu0\">6372.8</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$radians</span> <span class=\"sy0\">=</span> Pi<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">180</span><span class=\"sy0\">;;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$dlat</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$lat2</span> <span class=\"sy0\">-</span> <span class=\"re0\">$lat1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$radians</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$dlon</span> <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"re0\">$lon2</span> <span class=\"sy0\">-</span> <span class=\"re0\">$lon1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$radians</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$lat1</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$radians</span><span class=\"sy0\">;</span><br/>  <span class=\"re0\">$lat2</span> <span class=\"sy0\">*=</span> <span class=\"re0\">$radians</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span><span class=\"re0\">$dlat</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> <a href=\"http://perldoc.perl.org/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span><span class=\"re0\">$lat1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/cos.html\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span><span class=\"re0\">$lat2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://perldoc.perl.org/functions/sin.html\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span><span class=\"re0\">$dlon</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/>  <span class=\"kw1\">my</span> <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> asin<span class=\"br0\">(</span><a href=\"http://perldoc.perl.org/functions/sqrt.html\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> <span class=\"re0\">$radius</span> <span class=\"sy0\">*</span> <span class=\"re0\">$c</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://perldoc.perl.org/functions/printf.html\"><span class=\"kw3\">printf</span></a> <span class=\"st0\">\"Distance:\u00a0%.3f km<span class=\"es0\">\\n</span>\"</span><span class=\"sy0\">,</span> surfacedist<span class=\"br0\">(</span><span class=\"nu0\">36.12</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">86.67</span><span class=\"sy0\">,</span> <span class=\"nu0\">33.94</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">118.4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 29, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"kw2\">class</span> EarthPoint <span class=\"br0\">{</span><br/>        <span class=\"kw1\">has</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">lat</span><span class=\"sy0\">;</span> <span class=\"co1\"># latitude</span><br/>        <span class=\"kw1\">has</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">lon</span><span class=\"sy0\">;</span> <span class=\"co1\"># longitude</span><br/>\u00a0<br/>        <span class=\"kw1\">has</span> <span class=\"re0\">$earth_radius</span> <span class=\"sy0\">=</span> <span class=\"nu0\">6371</span><span class=\"sy0\">;</span> <span class=\"co1\"># mean earth radius</span><br/>        <span class=\"kw1\">has</span> <span class=\"re0\">$radian_ratio</span> <span class=\"sy0\">=</span> pi <span class=\"sy0\">/</span> <span class=\"nu0\">180</span><span class=\"sy0\">;</span><br/>\u00a0<br/>        <span class=\"co1\"># accessors for radians</span><br/>        <span class=\"kw2\">method</span> latR <span class=\"br0\">{</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">lat</span> <span class=\"sy0\">*</span> <span class=\"re0\">$radian_ratio</span> <span class=\"br0\">}</span><br/>        <span class=\"kw2\">method</span> lonR <span class=\"br0\">{</span> <span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">lon</span> <span class=\"sy0\">*</span> <span class=\"re0\">$radian_ratio</span> <span class=\"br0\">}</span><br/>\u00a0<br/>        <span class=\"kw2\">method</span> haversine<span class=\"sy0\">-</span>dist<span class=\"br0\">(</span>EarthPoint <span class=\"re0\">$p</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>                <span class=\"kw1\">my</span> EarthPoint <span class=\"re0\">$arc</span> <span class=\"sy0\">.=</span> <span class=\"kw2\">new</span><span class=\"br0\">(</span><br/>                        lat <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$!lat</span> <span class=\"sy0\">-</span> <span class=\"re0\">$p</span><span class=\"sy0\">.</span><span class=\"me1\">lat</span><span class=\"sy0\">,</span><br/>                        lon <span class=\"sy0\">=&gt;</span> <span class=\"re0\">$!lon</span> <span class=\"sy0\">-</span> <span class=\"re0\">$p</span><span class=\"sy0\">.</span><span class=\"me1\">lon</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">my</span> <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> sin<span class=\"br0\">(</span><span class=\"re0\">$arc</span><span class=\"sy0\">.</span><span class=\"me1\">latR</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span> <span class=\"sy0\">+</span> sin<span class=\"br0\">(</span><span class=\"re0\">$arc</span><span class=\"sy0\">.</span><span class=\"me1\">lonR</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">**</span> <span class=\"nu0\">2</span><br/>                        <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span><span class=\"re0\">$</span><span class=\"sy0\">.</span><span class=\"me1\">latR</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span><span class=\"re0\">$p</span><span class=\"sy0\">.</span><span class=\"me1\">latR</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>                <span class=\"kw1\">my</span> <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> asin<span class=\"br0\">(</span> <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>                <span class=\"kw1\">return</span> <span class=\"re0\">$earth_radius</span> <span class=\"sy0\">*</span> <span class=\"re0\">$c</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">my</span> EarthPoint <span class=\"re0\">$BNA</span> <span class=\"sy0\">.=</span> <span class=\"kw2\">new</span><span class=\"br0\">(</span>lat <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">36.12</span><span class=\"sy0\">,</span> lon <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">86.67</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">my</span> EarthPoint <span class=\"re0\">$LAX</span> <span class=\"sy0\">.=</span> <span class=\"kw2\">new</span><span class=\"br0\">(</span>lat <span class=\"sy0\">=&gt;</span> <span class=\"nu0\">33.94</span><span class=\"sy0\">,</span> lon <span class=\"sy0\">=&gt;</span> <span class=\"sy0\">-</span><span class=\"nu0\">118.4</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw3\">say</span> <span class=\"re0\">$BNA</span><span class=\"sy0\">.</span><span class=\"me1\">haversine</span><span class=\"sy0\">-</span>dist<span class=\"br0\">(</span><span class=\"re0\">$LAX</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"co1\"># 2886.44444099822</span></pre>"}, {"lang": "Phix", "loc": 13, "block": "<pre class=\"text highlighted_source\">constant MER = 6371         -- mean earth radius(km)<br/>constant DEG_TO_RAD = PI/180<br/>\u00a0<br/>function haversine(atom lat1, long1, lat2, long2)<br/>    lat1 *= DEG_TO_RAD<br/>    lat2 *= DEG_TO_RAD<br/>    long1 *= DEG_TO_RAD<br/>    long2 *= DEG_TO_RAD<br/>    return MER*arccos(sin(lat1)*sin(lat2)+cos(lat1)*cos(lat2)*cos(long2-long1))<br/>end function<br/>\u00a0<br/>atom d = haversine(36.12,-86.67,33.94,-118.4)<br/>printf(1,\"Distance is\u00a0%f km (%f miles)\\n\",{d,d/1.609344})</pre>"}, {"lang": "PHP", "loc": 21, "block": "<pre class=\"php highlighted_source\"><span class=\"kw2\">class</span> POI <span class=\"br0\">{</span><br/>    <span class=\"kw2\">private</span> <span class=\"re0\">$latitude</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">private</span> <span class=\"re0\">$longitude</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> __construct<span class=\"br0\">(</span><span class=\"re0\">$latitude</span><span class=\"sy0\">,</span> <span class=\"re0\">$longitude</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">latitude</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/deg2rad\"><span class=\"kw3\">deg2rad</span></a><span class=\"br0\">(</span><span class=\"re0\">$latitude</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">longitude</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/deg2rad\"><span class=\"kw3\">deg2rad</span></a><span class=\"br0\">(</span><span class=\"re0\">$longitude</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> getLatitude<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">latitude</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> getLongitude<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"kw1\">return</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">longitude</span><span class=\"sy0\">;</span><br/>    <span class=\"kw2\">public</span> <span class=\"kw2\">function</span> getDistanceInMetersTo<span class=\"br0\">(</span>POI <span class=\"re0\">$other</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"re0\">$radiusOfEarth</span> <span class=\"sy0\">=</span> <span class=\"nu0\">6371000</span><span class=\"sy0\">;</span><span class=\"co1\">// Earth's radius in meters.</span><br/>        <span class=\"re0\">$diffLatitude</span> <span class=\"sy0\">=</span> <span class=\"re0\">$other</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getLatitude</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">latitude</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$diffLongitude</span> <span class=\"sy0\">=</span> <span class=\"re0\">$other</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getLongitude</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">longitude</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$a</span> <span class=\"sy0\">=</span> <a href=\"http://www.php.net/sin\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span><span class=\"re0\">$diffLatitude</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.php.net/sin\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span><span class=\"re0\">$diffLatitude</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span><br/>            <a href=\"http://www.php.net/cos\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span><span class=\"re0\">$this</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">latitude</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.php.net/cos\"><span class=\"kw3\">cos</span></a><span class=\"br0\">(</span><span class=\"re0\">$other</span><span class=\"sy0\">-&gt;</span><span class=\"me1\">getLatitude</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span><br/>            <a href=\"http://www.php.net/sin\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span><span class=\"re0\">$diffLongitude</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <a href=\"http://www.php.net/sin\"><span class=\"kw3\">sin</span></a><span class=\"br0\">(</span><span class=\"re0\">$diffLongitude</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$c</span> <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> <a href=\"http://www.php.net/asin\"><span class=\"kw3\">asin</span></a><span class=\"br0\">(</span><a href=\"http://www.php.net/sqrt\"><span class=\"kw3\">sqrt</span></a><span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"re0\">$distance</span> <span class=\"sy0\">=</span> <span class=\"re0\">$radiusOfEarth</span> <span class=\"sy0\">*</span> <span class=\"re0\">$c</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"re0\">$distance</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "PicoLisp", "loc": 17, "block": "<pre class=\"text highlighted_source\">(scl 12)<br/>(load \"@lib/math.l\")<br/>\u00a0<br/>(de haversine (Th1 Ph1 Th2 Ph2)<br/>   (setq<br/>      Ph1 (*/ (- Ph1 Ph2) pi 180.0)<br/>      Th1 (*/ Th1 pi 180.0)<br/>      Th2 (*/ Th2 pi 180.0) )<br/>   (let<br/>      (DX (- (*/ (cos Ph1) (cos Th1) 1.0) (cos Th2))<br/>         DY (*/ (sin Ph1) (cos Th1) 1.0)<br/>         DZ (- (sin Th1) (sin Th2)) )<br/>      (* `(* 2 6371)<br/>         (asin<br/>            (/<br/>               (sqrt (+ (* DX DX) (* DY DY) (* DZ DZ)))<br/>               2 ) ) ) ) )</pre>"}, {"lang": "PL/I", "loc": 29, "block": "<pre class=\"text highlighted_source\">test: procedure options (main); /* 12 January 2014.  Derived from Fortran version */<br/>   declare d float;<br/>\u00a0<br/>   d = haversine(36.12, -86.67, 33.94, -118.40);  /* BNA to LAX */<br/>   put edit ( 'distance: ', d, ' km') (A, F(10,3)); /* distance: 2887.2600 km */<br/>\u00a0<br/>\u00a0<br/>degrees_to_radians: procedure (degree) returns (float);<br/>   declare degree float nonassignable;<br/>   declare pi float (15) initial ( (4*atan(1.0d0)) );<br/>\u00a0<br/>   return ( degree*pi/180 );<br/>end degrees_to_radians;<br/>\u00a0<br/>haversine: procedure (deglat1, deglon1, deglat2, deglon2) returns (float);<br/>   declare (deglat1, deglon1, deglat2, deglon2) float nonassignable;<br/>   declare (a, c, dlat, dlon, lat1, lat2) float;<br/>   declare radius float value (6372.8);<br/>\u00a0<br/>   dlat = degrees_to_radians(deglat2-deglat1);<br/>   dlon = degrees_to_radians(deglon2-deglon1);<br/>   lat1 = degrees_to_radians(deglat1);<br/>   lat2 = degrees_to_radians(deglat2);<br/>   a = (sin(dlat/2))**2 + cos(lat1)*cos(lat2)*(sin(dlon/2))**2;<br/>   c = 2*asin(sqrt(a));<br/>   return ( radius*c );<br/>end haversine;<br/>\u00a0<br/>end test;</pre>"}, {"lang": "PowerShell", "loc": 8, "block": "<pre class=\"powershell highlighted_source\">\u00a0<br/>Add<span class=\"sy0\">-</span><span class=\"kw2\">Type</span> <span class=\"sy0\">-</span>AssemblyName System.Device<br/>\u00a0<br/><span class=\"re0\">$BNA</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> System.Device.Location.GeoCoordinate <span class=\"nu0\">36.12</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">86.67</span><br/><span class=\"re0\">$LAX</span> <span class=\"sy0\">=</span> <span class=\"kw1\">New-Object</span> System.Device.Location.GeoCoordinate <span class=\"nu0\">33.94</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">118.40</span><br/>\u00a0<br/><span class=\"re0\">$BNA</span>.GetDistanceTo<span class=\"br0\">(</span> <span class=\"re0\">$LAX</span> <span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"nu0\">1000</span><br/>\u00a0</pre>"}, {"lang": "Pure Data", "loc": 1, "block": "<pre>#N canvas 527 1078 450 686 10;\n#X obj 28 427 atan2;\n#X obj 28 406 sqrt;\n#X obj 62 405 sqrt;\n#X obj 28 447 * 2;\n#X obj 62 384 -;\n#X msg 62 362 1 \\$1;\n#X obj 28 339 t f f;\n#X obj 28 210 sin;\n#X obj 83 207 sin;\n#X obj 138 206 cos;\n#X obj 193 206 cos;\n#X obj 28 179 / 2;\n#X obj 83 182 / 2;\n#X obj 28 74 unpack f f;\n#X obj 28 98 t f f;\n#X obj 28 301 expr $f1 + ($f2 * $f3 * $f4);\n#X obj 28 148 deg2rad;\n#X obj 83 149 deg2rad;\n#X obj 138 148 deg2rad;\n#X obj 193 149 deg2rad;\n#X obj 28 232 t f f;\n#X obj 28 257 *;\n#X obj 83 232 t f f;\n#X obj 83 257 *;\n#X obj 83 98 t f b;\n#X obj 28 542 * 6372.8;\n#X obj 193 120 f 33.94;\n#X obj 28 125 - 33.94;\n#X msg 28 45 36.12 -86.67;\n#X obj 83 123 - -118.4;\n#X floatatom 28 577 8 0 0 0 - - -, f 8;\n#X connect 0 0 3 0;\n#X connect 1 0 0 0;\n#X connect 2 0 0 1;\n#X connect 3 0 25 0;\n#X connect 4 0 2 0;\n#X connect 5 0 4 0;\n#X connect 6 0 1 0;\n#X connect 6 1 5 0;\n#X connect 7 0 20 0;\n#X connect 8 0 22 0;\n#X connect 9 0 15 2;\n#X connect 10 0 15 3;\n#X connect 11 0 7 0;\n#X connect 12 0 8 0;\n#X connect 13 0 14 0;\n#X connect 13 1 24 0;\n#X connect 14 0 27 0;\n#X connect 14 1 18 0;\n#X connect 15 0 6 0;\n#X connect 16 0 11 0;\n#X connect 17 0 12 0;\n#X connect 18 0 9 0;\n#X connect 19 0 10 0;\n#X connect 20 0 21 0;\n#X connect 20 1 21 1;\n#X connect 21 0 15 0;\n#X connect 22 0 23 0;\n#X connect 22 1 23 1;\n#X connect 23 0 15 1;\n#X connect 24 0 29 0;\n#X connect 24 1 26 0;\n#X connect 25 0 30 0;\n#X connect 26 0 19 0;\n#X connect 27 0 16 0;\n#X connect 28 0 13 0;\n#X connect 29 0 17 0;\n</pre>"}, {"lang": "PureBasic", "loc": 21, "block": "<pre class=\"purebasic highlighted_source\">#DIA<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span><span class=\"nu0\">6372.8</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span>.d Haversine<span class=\"br0\">(</span>th1.d,ph1.d,th2.d,ph2.d<span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span> dx.d,<br/>         dy.d,<br/>         dz.d<br/>\u00a0<br/>  ph1<span class=\"sy0\">=</span>Radian<span class=\"br0\">(</span>ph1<span class=\"sy0\">-</span>ph2<span class=\"br0\">)</span><br/>  th1<span class=\"sy0\">=</span>Radian<span class=\"br0\">(</span>th1<span class=\"br0\">)</span><br/>  th2<span class=\"sy0\">=</span>Radian<span class=\"br0\">(</span>th2<span class=\"br0\">)</span><br/>\u00a0<br/>  dz<span class=\"sy0\">=</span><span class=\"kw2\">Sin</span><span class=\"br0\">(</span>th1<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"kw2\">Sin</span><span class=\"br0\">(</span>th2<span class=\"br0\">)</span><br/>  dx<span class=\"sy0\">=</span><span class=\"kw2\">Cos</span><span class=\"br0\">(</span>ph1<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"kw2\">Cos</span><span class=\"br0\">(</span>th1<span class=\"br0\">)</span><span class=\"sy0\">-</span><span class=\"kw2\">Cos</span><span class=\"br0\">(</span>th2<span class=\"br0\">)</span><br/>  dy<span class=\"sy0\">=</span><span class=\"kw2\">Sin</span><span class=\"br0\">(</span>ph1<span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"kw2\">Cos</span><span class=\"br0\">(</span>th1<span class=\"br0\">)</span><br/>  <span class=\"kw1\">ProcedureReturn</span> <span class=\"kw2\">ASin</span><span class=\"br0\">(</span><span class=\"kw2\">Sqr</span><span class=\"br0\">(</span><span class=\"kw2\">Pow</span><span class=\"br0\">(</span>dx,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">Pow</span><span class=\"br0\">(</span>dy,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">Pow</span><span class=\"br0\">(</span>dz,<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>#DIA<br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"st0\">\"Haversine distance\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"st0\">\"Haversine distance: \"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">StrD</span><span class=\"br0\">(</span>Haversine<span class=\"br0\">(</span><span class=\"nu0\">36.12</span>,<span class=\"sy0\">-</span><span class=\"nu0\">86.67</span>,<span class=\"nu0\">33.94</span>,<span class=\"sy0\">-</span><span class=\"nu0\">118.4</span><span class=\"br0\">)</span>,<span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"st0\">\" km.\"</span><span class=\"br0\">)</span><br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span></pre>"}, {"lang": "Python", "loc": 19, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">math</span> <span class=\"kw1\">import</span> radians<span class=\"sy0\">,</span> sin<span class=\"sy0\">,</span> cos<span class=\"sy0\">,</span> sqrt<span class=\"sy0\">,</span> asin<br/>\u00a0<br/><span class=\"kw1\">def</span> haversine<span class=\"br0\">(</span>lat1<span class=\"sy0\">,</span> lon1<span class=\"sy0\">,</span> lat2<span class=\"sy0\">,</span> lon2<span class=\"br0\">)</span>:<br/>\u00a0<br/>  R <span class=\"sy0\">=</span> <span class=\"nu0\">6372.8</span> <span class=\"co1\"># Earth radius in kilometers</span><br/>\u00a0<br/>  dLat <span class=\"sy0\">=</span> radians<span class=\"br0\">(</span>lat2 - lat1<span class=\"br0\">)</span><br/>  dLon <span class=\"sy0\">=</span> radians<span class=\"br0\">(</span>lon2 - lon1<span class=\"br0\">)</span><br/>  lat1 <span class=\"sy0\">=</span> radians<span class=\"br0\">(</span>lat1<span class=\"br0\">)</span><br/>  lat2 <span class=\"sy0\">=</span> radians<span class=\"br0\">(</span>lat2<span class=\"br0\">)</span><br/>\u00a0<br/>  a <span class=\"sy0\">=</span> sin<span class=\"br0\">(</span>dLat/<span class=\"nu0\">2</span><span class=\"br0\">)</span>**<span class=\"nu0\">2</span> + cos<span class=\"br0\">(</span>lat1<span class=\"br0\">)</span>*cos<span class=\"br0\">(</span>lat2<span class=\"br0\">)</span>*sin<span class=\"br0\">(</span>dLon/<span class=\"nu0\">2</span><span class=\"br0\">)</span>**<span class=\"nu0\">2</span><br/>  c <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>*asin<span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>  <span class=\"kw1\">return</span> R * c<br/>\u00a0<br/><span class=\"sy0\">&gt;&gt;&gt;</span> haversine<span class=\"br0\">(</span><span class=\"nu0\">36.12</span><span class=\"sy0\">,</span> -<span class=\"nu0\">86.67</span><span class=\"sy0\">,</span> <span class=\"nu0\">33.94</span><span class=\"sy0\">,</span> -<span class=\"nu0\">118.40</span><span class=\"br0\">)</span><br/><span class=\"nu0\">2887.2599506071106</span><br/><span class=\"sy0\">&gt;&gt;&gt;</span> </pre>"}, {"lang": "R", "loc": 20, "block": "<pre class=\"text highlighted_source\">dms_to_rad &lt;- function(d, m, s) (d + m / 60 + s / 3600) * pi / 180<br/>\u00a0<br/># Volumetric mean radius is 6371 km, see http://nssdc.gsfc.nasa.gov/planetary/factsheet/earthfact.html<br/># The diameter is thus 12742 km<br/>\u00a0<br/>great_circle_distance &lt;- function(lat1, long1, lat2, long2) {<br/>   a &lt;- sin(0.5 * (lat2 - lat1))<br/>   b &lt;- sin(0.5 * (long2 - long1))<br/>   12742 * asin(sqrt(a * a + cos(lat1) * cos(lat2) * b * b))<br/>}<br/>\u00a0<br/># Coordinates are found here:<br/>#     http://www.airport-data.com/airport/BNA/<br/>#     http://www.airport-data.com/airport/LAX/<br/>\u00a0<br/>great_circle_distance(<br/>   dms_to_rad(36,  7, 28.10), dms_to_rad( 86, 40, 41.50),   # Nashville International Airport (BNA)<br/>   dms_to_rad(33, 56, 32.98), dms_to_rad(118, 24, 29.05))  # Los Angeles International Airport (LAX)<br/>\u00a0<br/># Output:  2886.327</pre>"}, {"lang": "Racket", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>#lang racket<br/>(require math)<br/>(define earth-radius 6371)<br/>\u00a0<br/>(define (distance lat1 long1 lat2 long2)<br/>  (define (h a b) (sqr (sin (/ (- b a) 2))))<br/>  (* 2 earth-radius <br/>     (asin (sqrt (+ (h lat1 lat2) <br/>                    (* (cos lat1) (cos lat2) (h long1 long2)))))))<br/>\u00a0<br/>(define (deg-to-rad d m s) <br/>  (* (/ pi 180) (+ d (/ m 60) (/ s 3600))))<br/>\u00a0<br/>(distance (deg-to-rad 36  7.2 0) (deg-to-rad  86 40.2 0)<br/>          (deg-to-rad 33 56.4 0) (deg-to-rad 118 24.0 0))<br/>\u00a0</pre>"}, {"lang": "Raven", "loc": 25, "block": "<pre class=\"text highlighted_source\">define PI <br/>  -1 acos<br/>\u00a0<br/>define toRadians use $degree<br/>  $degree PI * 180 /<br/>\u00a0<br/>define haversine use $lat1, $lon1, $lat2, $lon2<br/>  6372.8 as $R<br/>  # In kilometers<br/>  $lat2 $lat1 - toRadians   as $dLat<br/>  $lon2 $lon1 - toRadians   as $dLon<br/>  $lat1 toRadians  as $lat1<br/>  $lat2 toRadians  as $lat2<br/>\u00a0<br/>  $dLat 2 /  sin <br/>  $dLat 2 /  sin *<br/>  $dLon 2 /  sin<br/>  $dLon 2 /  sin *<br/>  $lat1 cos * <br/>  $lat2 cos * +        as $a<br/>  $a sqrt  asin  2 *   as $c<br/>  $R $c *<br/>}<br/>\u00a0<br/>-118.40 33.94 -86.67 36.12 haversine \"haversine:\u00a0%.15g\\n\" print</pre>"}, {"lang": "REXX", "loc": 53, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  calculates  the  distance between  Nashville  and  Los Angles  airports.*/</span><br/><span class=\"kw1\">call</span> pi;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"kw6\">length</span><span class=\"br0\">(</span>pi<span class=\"br0\">)</span>%2            <span class=\"coMULTI\">/*use half of decimal digits  of  PI.  */</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"       Nashville:  north 36\u00ba  7.2', west  86\u00ba 40.2'   =   36.12\u00ba,  -86.67\u00ba\"</span><br/><span class=\"kw1\">say</span> <span class=\"st0\">\"      Los Angles:  north 33\u00ba 56.4', west 118\u00ba 24.0'   =   33.94\u00ba, -118.40\u00ba\"</span><br/>@using_radius= <span class=\"st0\">'using the mean radius of the earth as '</span>            <span class=\"coMULTI\">/*a literal for  SAY.*/</span><br/>radii<span class=\"sy0\">.</span>=<span class=\"sy0\">.</span>;    radii<span class=\"sy0\">.</span>1=<span class=\"nu0\">6372.8</span>;    radii<span class=\"sy0\">.</span>2=<span class=\"nu0\">6371</span>     <span class=\"coMULTI\">/*mean radii of the earth in kilometers*/</span><br/><span class=\"kw1\">say</span>;                         m=<span class=\"nu0\">1</span><span class=\"sy0\">/</span><span class=\"nu0\">0.621371192237</span>  <span class=\"coMULTI\">/*M:   one statute mile  in      \"     */</span><br/>    <span class=\"kw1\">do</span> radius=<span class=\"nu0\">1</span>  <span class=\"kw2\">while</span> radii<span class=\"sy0\">.</span>radius<span class=\"sy0\">\\</span>==<span class=\"sy0\">.</span>          <span class=\"coMULTI\">/*calc. distance using specific radii. */</span><br/>    d=surfaceDistance<span class=\"br0\">(</span> <span class=\"nu0\">36.12</span>,    -<span class=\"nu0\">86.67</span>,    <span class=\"nu0\">33.94</span>,   -<span class=\"nu0\">118.4</span>,    radii<span class=\"sy0\">.</span>radius<span class=\"br0\">)</span>;         <span class=\"kw1\">say</span><br/>    <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span>@using_radius     radii<span class=\"sy0\">.</span>radius         <span class=\"st0\">' kilometers'</span>, <span class=\"nu0\">75</span>, <span class=\"st0\">'\u2500'</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">' Distance between:  '</span>   <span class=\"kw6\">format</span><span class=\"br0\">(</span>d<span class=\"sy0\">/</span><span class=\"nu0\">1</span>            ,,<span class=\"nu0\">2</span><span class=\"br0\">)</span>    <span class=\"st0\">\" kilometers,\"</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'               or   '</span>   <span class=\"kw6\">format</span><span class=\"br0\">(</span>d<span class=\"sy0\">/</span>m            ,,<span class=\"nu0\">2</span><span class=\"br0\">)</span>    <span class=\"st0\">\" statute miles,\"</span><br/>    <span class=\"kw1\">say</span> <span class=\"st0\">'               or   '</span>   <span class=\"kw6\">format</span><span class=\"br0\">(</span>d<span class=\"sy0\">/</span>m<span class=\"sy0\">*</span><span class=\"nu0\">5280</span><span class=\"sy0\">/</span><span class=\"nu0\">6076.1</span>,,<span class=\"nu0\">2</span><span class=\"br0\">)</span>    <span class=\"st0\">\" nautical (or air miles).\"</span><br/>    <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*radius*/</span>                             <span class=\"coMULTI\">/*show\u2500\u2500\u2518   2 dec. digs past dec. point*/</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Acos: <span class=\"kw1\">return</span> pi<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"sy0\">*</span>  <span class=\"sy0\">.</span>5  - aSin<span class=\"br0\">(</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span>       <span class=\"coMULTI\">/*calculate the ArcCos of an argument. */</span><br/>d2d:  <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>               <span class=\"sy0\">//</span>  <span class=\"nu0\">360</span>        <span class=\"coMULTI\">/*normalize degrees to a  unit circle. */</span><br/>d2r:  <span class=\"kw1\">return</span> r2r<span class=\"br0\">(</span>  <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> pi<span class=\"br0\">(</span><span class=\"br0\">)</span>  <span class=\"sy0\">/</span>   <span class=\"nu0\">180</span><span class=\"br0\">)</span>       <span class=\"coMULTI\">/*normalize and convert deg \u2500\u2500\u25ba radians*/</span><br/>r2d:  <span class=\"kw1\">return</span> d2d<span class=\"br0\">(</span> <span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">180</span>   <span class=\"sy0\">/</span>   pi<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>     <span class=\"coMULTI\">/*normalize and convert rad \u2500\u2500\u25ba degrees*/</span><br/>r2r:  <span class=\"kw1\">return</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>               <span class=\"sy0\">//</span> <span class=\"br0\">(</span>pi<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>  <span class=\"coMULTI\">/*normalize radians to a  unit circle. */</span><br/>p:    <span class=\"kw1\">return</span> <span class=\"kw6\">word</span><span class=\"br0\">(</span> <span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>, <span class=\"nu0\">1</span><span class=\"br0\">)</span>                    <span class=\"coMULTI\">/*pick the first of two words (numbers)*/</span><br/>pi:   pi=<span class=\"nu0\">3.141592653589793238462643383279502884197169399375105820975</span>;            <span class=\"kw1\">return</span> pi<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>surfaceDistance: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> th1,ph1,th2,ph2,r     <span class=\"coMULTI\">/*use  haversine  formula for distance.*/</span><br/>          <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span>            <span class=\"coMULTI\">/*double the number of decimal digits. */</span><br/>             ph1= d2r<span class=\"br0\">(</span>ph1 - ph2<span class=\"br0\">)</span>                 <span class=\"coMULTI\">/*convert degrees \u2500\u2500\u25ba radians &amp; reduce.*/</span><br/>             th1= d2r<span class=\"br0\">(</span>th1<span class=\"br0\">)</span>;      th2 =  d2r<span class=\"br0\">(</span>th2<span class=\"br0\">)</span> <span class=\"coMULTI\">/*   \"       \"     \"     \"    \"    \"   */</span><br/>               x= cos<span class=\"br0\">(</span>ph1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span>th1<span class=\"br0\">)</span> - cos<span class=\"br0\">(</span>th2<span class=\"br0\">)</span><br/>               y= sin<span class=\"br0\">(</span>ph1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span>th1<span class=\"br0\">)</span><br/>               z= sin<span class=\"br0\">(</span>th1<span class=\"br0\">)</span> - sin<span class=\"br0\">(</span>th2<span class=\"br0\">)</span><br/>          <span class=\"kw1\">return</span> Asin<span class=\"br0\">(</span> sqrt<span class=\"br0\">(</span> x<span class=\"sy0\">**</span><span class=\"nu0\">2</span> + y<span class=\"sy0\">**</span><span class=\"nu0\">2</span> + z<span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span>  <span class=\"sy0\">/</span> <span class=\"nu0\">2</span> <span class=\"br0\">)</span>    <span class=\"sy0\">*</span>  r  <span class=\"sy0\">*</span>  <span class=\"nu0\">2</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>Asin: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x <span class=\"nu0\">1</span> z <span class=\"nu0\">1</span> o <span class=\"nu0\">1</span> p;    a=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;              aa=a <span class=\"sy0\">*</span> a<br/>          <span class=\"kw1\">if</span> a<span class=\"sy0\">&gt;</span>=sqrt<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"sy0\">.</span>5  <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span> <span class=\"kw6\">sign</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"sy0\">*</span> Acos<span class=\"br0\">(</span> sqrt<span class=\"br0\">(</span><span class=\"nu0\">1</span> - aa<span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                  <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>  <span class=\"kw2\">until</span> p=z; p=z; o=o<span class=\"sy0\">*</span>aa<span class=\"sy0\">*</span> <span class=\"br0\">(</span>j-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span>j; z=z + o<span class=\"sy0\">/</span><span class=\"br0\">(</span>j+<span class=\"nu0\">1</span><span class=\"br0\">)</span>; <span class=\"kw3\">end</span> <span class=\"coMULTI\">/*j*/</span><br/>          <span class=\"kw1\">return</span> z                               <span class=\"coMULTI\">/* [\u2191]  compute until no more noise.   */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>cos:  <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;        x=r2r<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;       a=<span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>;                 Hpi=pi <span class=\"sy0\">*</span> <span class=\"sy0\">.</span>5<br/>          <span class=\"kw1\">numeric</span> <span class=\"kw2\">fuzz</span> <span class=\"kw6\">min</span><span class=\"br0\">(</span><span class=\"nu0\">6</span>, <span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>  - <span class=\"nu0\">3</span><span class=\"br0\">)</span>\u00a0;    <span class=\"kw1\">if</span> a=pi    <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> -<span class=\"nu0\">1</span><br/>          <span class=\"kw1\">if</span> a=Hpi <span class=\"sy0\">|</span> a=Hpi<span class=\"sy0\">*</span><span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span>  <span class=\"nu0\">0</span>\u00a0;    <span class=\"kw1\">if</span> a=pi<span class=\"sy0\">/</span><span class=\"nu0\">3</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>5<br/>          <span class=\"kw1\">if</span> a=pi <span class=\"sy0\">*</span> <span class=\"nu0\">2</span> <span class=\"sy0\">/</span> <span class=\"nu0\">3</span>     <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> -<span class=\"sy0\">.</span>5;                    <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>sinCos<span class=\"br0\">(</span><span class=\"nu0\">1</span>, <span class=\"nu0\">1</span>, -<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sin:  <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x;  x=r2r<span class=\"br0\">(</span>x<span class=\"br0\">)</span>;   <span class=\"kw1\">numeric</span> <span class=\"kw2\">fuzz</span> <span class=\"kw6\">min</span><span class=\"br0\">(</span><span class=\"nu0\">5</span>, <span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span> - <span class=\"nu0\">3</span><span class=\"br0\">)</span><br/>         <span class=\"kw1\">if</span> <span class=\"kw6\">abs</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span>=pi  <span class=\"kw3\">then</span>  <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>;                            <span class=\"kw1\">return</span> <span class=\"sy0\">.</span>sinCos<span class=\"br0\">(</span>x, x, +<span class=\"nu0\">1</span><span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/><span class=\"sy0\">.</span>sinCos: <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> z <span class=\"nu0\">1</span> p,_,i;  q=x<span class=\"sy0\">*</span>x<br/>            <span class=\"kw1\">do</span> k=<span class=\"nu0\">2</span>  <span class=\"kw2\">by</span> <span class=\"nu0\">2</span>; _=-_<span class=\"sy0\">*</span>q<span class=\"sy0\">/</span><span class=\"br0\">(</span>k<span class=\"sy0\">*</span><span class=\"br0\">(</span>k+i<span class=\"br0\">)</span><span class=\"br0\">)</span>; z=z+_; <span class=\"kw1\">if</span> z=p  <span class=\"kw3\">then</span> <span class=\"kw1\">leave</span>; p=z; <span class=\"kw3\">end</span>;  <span class=\"kw1\">return</span> z<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sqrt: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x; <span class=\"kw1\">if</span> x=<span class=\"nu0\">0</span>  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>; d=<span class=\"kw2\">digits</span><span class=\"br0\">(</span><span class=\"br0\">)</span>; m<span class=\"sy0\">.</span>=<span class=\"nu0\">9</span>; <span class=\"kw1\">numeric</span> <span class=\"kw2\">form</span>; h=d+<span class=\"nu0\">6</span><br/>      <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span>;  <span class=\"kw1\">parse</span> <span class=\"kw2\">value</span> <span class=\"kw6\">format</span><span class=\"br0\">(</span>x,<span class=\"nu0\">2</span>,<span class=\"nu0\">1</span>,,<span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"st0\">'E0'</span> <span class=\"kw2\">with</span> g <span class=\"st0\">\"E\"</span> _ <span class=\"sy0\">.</span>;  g=g <span class=\"sy0\">*</span> <span class=\"sy0\">.</span>5<span class=\"st0\">'e'</span>_\u00a0% <span class=\"nu0\">2</span><br/>        <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">while</span> h<span class=\"sy0\">&gt;</span><span class=\"nu0\">9</span>;      m<span class=\"sy0\">.</span>j=h;               h=h%2+<span class=\"nu0\">1</span>;       <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*j*/</span><br/>        <span class=\"kw1\">do</span> k=j+<span class=\"nu0\">5</span>  <span class=\"kw2\">to</span> <span class=\"nu0\">0</span>  <span class=\"kw2\">by</span> -<span class=\"nu0\">1</span>;  <span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> m<span class=\"sy0\">.</span>k;  g=<span class=\"br0\">(</span>g+x<span class=\"sy0\">/</span>g<span class=\"br0\">)</span><span class=\"sy0\">*.</span>5;  <span class=\"kw3\">end</span>  <span class=\"coMULTI\">/*k*/</span>;   <span class=\"kw1\">return</span> g</pre>"}, {"lang": "Ring", "loc": 17, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>decimals(8)<br/>see haversine(36.12, -86.67, 33.94, -118.4) + nl<br/>\u00a0<br/>func haversine x1, y1, x2, y2<br/>     r=0.01745<br/>     x1= x1*r<br/>     x2= x2*r<br/>     y1= y1*r<br/>     y2= y2*r<br/>     dy = y2-y1<br/>     dx = x2-x1<br/>     a = pow(sin(dx/2),2) + cos(x1) * cos(x2) * pow(sin(dy/2),2)<br/>     c = 2 * asin(sqrt(a))<br/>     d = 6372.8 * c<br/>     return d<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 18, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">include</span> <span class=\"kw4\">Math</span><br/>\u00a0<br/>Radius = <span class=\"nu0\">6371</span>  <span class=\"co1\"># rough radius of the Earth, in kilometers</span><br/>\u00a0<br/><span class=\"kw1\">def</span> spherical_distance<span class=\"br0\">(</span>start_coords, end_coords<span class=\"br0\">)</span><br/>  lat1, long1 = deg2rad <span class=\"sy0\">*</span>start_coords<br/>  lat2, long2 = deg2rad <span class=\"sy0\">*</span>end_coords<br/>  <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> Radius <span class=\"sy0\">*</span> asin<span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span>sin<span class=\"br0\">(</span><span class=\"br0\">(</span>lat2<span class=\"sy0\">-</span>lat1<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">+</span> cos<span class=\"br0\">(</span>lat1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span>lat2<span class=\"br0\">)</span> <span class=\"sy0\">*</span> sin<span class=\"br0\">(</span><span class=\"br0\">(</span>long2 <span class=\"sy0\">-</span> long1<span class=\"br0\">)</span><span class=\"sy0\">/</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">def</span> deg2rad<span class=\"br0\">(</span>lat, long<span class=\"br0\">)</span><br/>  <span class=\"br0\">[</span>lat <span class=\"sy0\">*</span> PI <span class=\"sy0\">/</span> <span class=\"nu0\">180</span>, long <span class=\"sy0\">*</span> PI <span class=\"sy0\">/</span> <span class=\"nu0\">180</span><span class=\"br0\">]</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/>bna = <span class=\"br0\">[</span><span class=\"nu0\">36.12</span>, <span class=\"sy0\">-</span><span class=\"nu0\">86.67</span><span class=\"br0\">]</span><br/>lax = <span class=\"br0\">[</span><span class=\"nu0\">33.94</span>, <span class=\"sy0\">-</span><span class=\"nu0\">118.4</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw3\">puts</span> <span class=\"st0\">\"%.1f\"</span> <span class=\"sy0\">%</span> spherical_distance<span class=\"br0\">(</span>bna, lax<span class=\"br0\">)</span></pre>"}, {"lang": "Run BASIC", "loc": 20, "block": "<pre class=\"text highlighted_source\">    D2R = atn(1)/45<br/>    diam  = 2 * 6372.8<br/>Lg1m2  = ((-86.67)-(-118.4)) * D2R<br/>Lt1    = 36.12 * D2R ' degrees to rad<br/>Lt2    = 33.94 * D2R<br/>    dz    = sin(Lt1) - sin(Lt2)<br/>    dx    = cos(Lg1m2) * cos(Lt1) - cos(Lt2)<br/>    dy    = sin(Lg1m2) * cos(Lt1)<br/>    hDist = asn((dx^2 + dy^2 + dz^2)^0.5 /2) * diam<br/>print \"Haversine distance: \";using(\"####.#############\",hDist);\" km.\"<br/>\u00a0<br/> 'Tips: ( 36 deg 7 min 12 sec ) = print 36+(7/60)+(12/3600).  Produces: 36.12 deg.<br/> '<br/> '      http://maps.google.com<br/> '      Search   36.12,-86.67<br/> '      Earth.<br/> '      Center the pin, zoom airport.<br/> '      Directions (destination).<br/> '      36.12.-86.66999<br/> '      Distance is 35.37 inches.</pre>"}, {"lang": "Rust", "loc": 22, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>use std::f64;<br/>\u00a0<br/>static R: f64 = 6372.8;<br/>\u00a0<br/>fn haversine_dist(mut th1: f64, mut ph1: f64, mut th2: f64, ph2: f64) -&gt; f64 {<br/>    ph1 -= ph2;<br/>    ph1 = ph1.to_radians();<br/>    th1 = th1.to_radians();<br/>    th2 = th2.to_radians();<br/>    let dz: f64 = th1.sin() - th2.sin();<br/>    let dx: f64 = ph1.cos() * th1.cos() - th2.cos();<br/>    let dy: f64 = ph1.sin() * th1.cos();<br/>    ((dx * dx + dy * dy + dz * dz).sqrt() / 2.0).asin() * 2.0 * R<br/>}<br/>\u00a0<br/>fn main() {<br/>    let d: f64 = haversine_dist(36.12, -86.67, 33.94, -118.4);<br/>    println!(\"Distance: {} km ({} mi)\", d, d / 1.609344);<br/>}<br/>\u00a0<br/>\u00a0</pre>"}, {"lang": "SAS", "loc": 53, "block": "<pre class=\"sas highlighted_source\">\u00a0<br/><span class=\"kw4\">options</span> minoperator;<br/>\u00a0<br/><span class=\"kw2\">%macro</span> haver<span class=\"br0\">(</span>lat1, long1, lat2, long2, type=D, dist=K<span class=\"br0\">)</span>;<br/>\u00a0<br/>\t<span class=\"kw2\">%if</span> <span class=\"kw2\">%upcase</span><span class=\"br0\">(</span><span class=\"re0\">&amp;type</span><span class=\"br0\">)</span> <span class=\"kw4\">in</span> <span class=\"br0\">(</span>D DEG DEGREE DEGREES<span class=\"br0\">)</span> <span class=\"kw2\">%then</span> <span class=\"kw2\">%do</span>;<br/>\t\t<span class=\"kw2\">%let</span> convert = constant<span class=\"br0\">(</span><span class=\"st0\">'PI'</span><span class=\"br0\">)</span>/<span class=\"nu0\">180</span>;<br/>\t\t<span class=\"kw2\">%end</span>;<br/>\t<span class=\"kw2\">%else</span> <span class=\"kw2\">%if</span> <span class=\"kw2\">%upcase</span><span class=\"br0\">(</span><span class=\"re0\">&amp;type</span><span class=\"br0\">)</span> <span class=\"kw4\">in</span> <span class=\"br0\">(</span>R RAD RADIAN RADIANS<span class=\"br0\">)</span> <span class=\"kw2\">%then</span> <span class=\"kw2\">%do</span>;<br/>\t\t<span class=\"kw2\">%let</span> convert = <span class=\"nu0\">1</span>;<br/>\t\t<span class=\"kw2\">%end</span>;<br/>\t<span class=\"kw2\">%else</span> <span class=\"kw2\">%do</span>;<br/>\t\t<span class=\"kw2\">%put</span> <span class=\"kw7\">ERROR</span> - Enter RADIANS <span class=\"kw4\">or</span> DEGREES for type.;<br/>\t\t<span class=\"kw2\">%goto</span> exit;<br/>\t\t<span class=\"kw2\">%end</span>;<br/>\u00a0<br/>\t<span class=\"kw2\">%if</span> <span class=\"kw2\">%upcase</span><span class=\"br0\">(</span><span class=\"re0\">&amp;dist</span><span class=\"br0\">)</span> <span class=\"kw4\">in</span> <span class=\"br0\">(</span>M MILE MILES<span class=\"br0\">)</span> <span class=\"kw2\">%then</span> <span class=\"kw2\">%do</span>;<br/>\t\t<span class=\"kw2\">%let</span> distrat = <span class=\"nu0\">1.609344</span>;<br/>\t\t<span class=\"kw2\">%end</span>;<br/>\t<span class=\"kw2\">%else</span> <span class=\"kw2\">%if</span> <span class=\"kw2\">%upcase</span><span class=\"br0\">(</span><span class=\"re0\">&amp;dist</span><span class=\"br0\">)</span> <span class=\"kw4\">in</span> <span class=\"br0\">(</span>K KM KILOMETER KILOMETERS<span class=\"br0\">)</span> <span class=\"kw2\">%then</span> <span class=\"kw2\">%do</span>;<br/>\t\t<span class=\"kw2\">%let</span> distrat = <span class=\"nu0\">1</span>;<br/>\t\t<span class=\"kw2\">%end</span>;<br/>\t<span class=\"kw2\">%else</span> <span class=\"kw2\">%do</span>;<br/>\t\t<span class=\"kw2\">%put</span> <span class=\"kw7\">ERROR</span> - Enter M <span class=\"kw4\">on</span> KM for dist;<br/>\t\t<span class=\"kw2\">%goto</span> exit;<br/>\t\t<span class=\"kw2\">%end</span>;<br/>\u00a0<br/>\t\t<span class=\"kw6\">data</span> <span class=\"kw1\">_null_</span>;<br/>\t\t\tconvert = <span class=\"re0\">&amp;convert</span>;<br/>\t\t\tlat1 = <span class=\"re0\">&amp;lat1</span> <span class=\"coMULTI\">* convert;</span><br/>\t\t\tlat2 = <span class=\"re0\">&amp;lat2</span> <span class=\"coMULTI\">* convert;</span><br/>\t\t\tlong1 = <span class=\"re0\">&amp;long1</span> <span class=\"coMULTI\">* convert;</span><br/>\t\t\tlong2 = <span class=\"re0\">&amp;long2</span> <span class=\"coMULTI\">* convert;</span><br/>\u00a0<br/>\t\t\tdiff1 = lat2 - lat1;<br/>\t\t\tdiff2 = long2 - long1;<br/>\u00a0<br/>\t\t\tpart1 = <span class=\"kw3\">sin</span><span class=\"br0\">(</span>diff1/<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"coMULTI\">**2;</span><br/>\t\t\tpart2 = <span class=\"kw3\">cos</span><span class=\"br0\">(</span>lat1<span class=\"br0\">)</span><span class=\"coMULTI\">*cos(lat2);</span><br/>\t\t\tpart3 = <span class=\"kw3\">sin</span><span class=\"br0\">(</span>diff2/<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"coMULTI\">**2;</span><br/>\u00a0<br/>\t\t\troot = <span class=\"kw3\">sqrt</span><span class=\"br0\">(</span>part1 + part2<span class=\"coMULTI\">*part3);</span><br/>\u00a0<br/>\t\t\tdist = <span class=\"nu0\">2</span> <span class=\"coMULTI\">* 6372.8 / &amp;distrat * arsin(root);</span><br/>\u00a0<br/>\t\t\t<span class=\"kw3\">put</span> <span class=\"st0\">\"Distance is \"</span> dist <span class=\"st0\">\"%upcase(&amp;dist)\"</span>;<br/>\t\t<span class=\"kw6\">run</span>;<br/>\u00a0<br/>\t%exit:<br/><span class=\"kw2\">%mend</span>;<br/>\u00a0<br/>%haver<span class=\"br0\">(</span><span class=\"nu0\">36.12</span>, -<span class=\"nu0\">86.67</span>, <span class=\"nu0\">33.94</span>, -<span class=\"nu0\">118.40</span><span class=\"br0\">)</span>; <br/>\u00a0</pre>"}, {"lang": "Scala", "loc": 18, "block": "<pre class=\"scala highlighted_source\"><a href=\"http://scala-lang.org\"><span class=\"kw1\">import</span></a> math.<span class=\"sy0\">_</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> Haversine <span class=\"br0\">{</span><br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> R <span class=\"sy0\">=</span> <span class=\"nu0\">6372.8</span>  <span class=\"co1\">//radius in km</span><br/>\u00a0<br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> haversine<span class=\"br0\">(</span>lat1<span class=\"sy0\">:</span>Double, lon1<span class=\"sy0\">:</span>Double, lat2<span class=\"sy0\">:</span>Double, lon2<span class=\"sy0\">:</span>Double<span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"br0\">{</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dLat<span class=\"sy0\">=</span><span class=\"br0\">(</span>lat2 - lat1<span class=\"br0\">)</span>.<span class=\"me1\">toRadians</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> dLon<span class=\"sy0\">=</span><span class=\"br0\">(</span>lon2 - lon1<span class=\"br0\">)</span>.<span class=\"me1\">toRadians</span><br/>\u00a0<br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> a <span class=\"sy0\">=</span> pow<span class=\"br0\">(</span>sin<span class=\"br0\">(</span>dLat/<span class=\"nu0\">2</span><span class=\"br0\">)</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span> + pow<span class=\"br0\">(</span>sin<span class=\"br0\">(</span>dLon/<span class=\"nu0\">2</span><span class=\"br0\">)</span>,<span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span>lat1.<span class=\"me1\">toRadians</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> cos<span class=\"br0\">(</span>lat2.<span class=\"me1\">toRadians</span><span class=\"br0\">)</span><br/>      <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> c <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> asin<span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>      R <span class=\"sy0\">*</span> c<br/>   <span class=\"br0\">}</span><br/>\u00a0<br/>   <a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">:</span> Unit <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>      println<span class=\"br0\">(</span>haversine<span class=\"br0\">(</span><span class=\"nu0\">36.12</span>, -<span class=\"nu0\">86.67</span>, <span class=\"nu0\">33.94</span>, -<span class=\"nu0\">118.40</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Scheme", "loc": 12, "block": "<pre class=\"scheme highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">define</span> earth<span class=\"sy0\">-</span>radius <span class=\"nu0\">6371</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> pi <span class=\"br0\">(</span><span class=\"kw1\">acos</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>distance lat1 long1 lat2 long2<span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>h a b<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">expt</span> <span class=\"br0\">(</span><span class=\"kw1\">sin</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"br0\">(</span><span class=\"sy0\">-</span> b a<span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"nu0\">2</span> earth<span class=\"sy0\">-</span>radius <span class=\"br0\">(</span><span class=\"kw1\">asin</span> <span class=\"br0\">(</span><span class=\"kw1\">sqrt</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"br0\">(</span>h lat1 lat2<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"kw1\">cos</span> lat1<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"kw1\">cos</span> lat2<span class=\"br0\">)</span> <span class=\"br0\">(</span>h long1 long2<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">define</span> <span class=\"br0\">(</span>deg<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>rad <span class=\"kw1\">d</span> m <span class=\"kw1\">s</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">*</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> pi <span class=\"nu0\">180</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">+</span> <span class=\"kw1\">d</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> m <span class=\"nu0\">60</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"sy0\">/</span> <span class=\"kw1\">s</span> <span class=\"nu0\">3600</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span>distance <span class=\"br0\">(</span>deg<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>rad <span class=\"nu0\">36</span>  <span class=\"nu0\">7.2</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>deg<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>rad  <span class=\"nu0\">86</span> <span class=\"nu0\">40.2</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>deg<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>rad <span class=\"nu0\">33</span> <span class=\"nu0\">56.4</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span>deg<span class=\"sy0\">-</span>to<span class=\"sy0\">-</span>rad <span class=\"nu0\">118</span> <span class=\"nu0\">24.0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"co1\">; 2886.444442837984</span></pre>"}, {"lang": "Seed7", "loc": 26, "block": "<pre class=\"text highlighted_source\">$ include \"seed7_05.s7i\";<br/>  include \"float.s7i\";<br/>  include \"math.s7i\";<br/>\u00a0<br/>const func float: greatCircleDistance (in float: latitude1, in float: longitude1,<br/>    in float: latitude2, in float: longitude2) is func<br/>  result<br/>    var float: distance is 0.0;<br/>  local<br/>    const float: EarthRadius is 6372.8;  # Average great-elliptic or great-circle radius in kilometers<br/>  begin<br/>    distance\u00a0:= 2.0 * EarthRadius * asin(sqrt(sin(0.5 * (latitude2 - latitude1)) ** 2 +<br/>                                              cos(latitude1) * cos(latitude2) *<br/>                                              sin(0.5 * (longitude2 - longitude1)) ** 2));<br/>  end func;<br/>\u00a0<br/>const func float: degToRad (in float: degrees) is<br/>  return degrees * 0.017453292519943295769236907684886127;<br/>\u00a0<br/>const proc: main is func<br/>  begin<br/>    writeln(\"Distance in kilometers between BNA and LAX\");<br/>    writeln(greatCircleDistance(degToRad(36.12), degToRad(-86.67),  # Nashville International Airport (BNA)<br/>                                degToRad(33.94), degToRad(-118.4))  # Los Angeles International Airport (LAX)<br/>            digits 2);<br/>  end func;</pre>"}, {"lang": "Sidef", "loc": 29, "block": "<pre class=\"ruby highlighted_source\"><span class=\"kw1\">class</span> EarthPoint<span class=\"br0\">(</span>lat, lon<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>\u00a0<br/>    const earth_radius = <span class=\"nu0\">6371</span>       <span class=\"co1\"># mean earth radius</span><br/>    const radian_ratio = Num.<span class=\"me1\">pi</span><span class=\"sy0\">/</span><span class=\"nu0\">180</span><br/>\u00a0<br/>    <span class=\"co1\"># accessors for radians</span><br/>    method latR <span class=\"br0\">{</span> <span class=\"kw2\">self</span>.<span class=\"me1\">lat</span> <span class=\"sy0\">*</span> radian_ratio <span class=\"br0\">}</span><br/>    method lonR <span class=\"br0\">{</span> <span class=\"kw2\">self</span>.<span class=\"me1\">lon</span> <span class=\"sy0\">*</span> radian_ratio <span class=\"br0\">}</span><br/>\u00a0<br/>    method haversine_dist<span class=\"br0\">(</span>EarthPoint <span class=\"kw3\">p</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        var arc = EarthPoint<span class=\"br0\">(</span><br/>              <span class=\"kw2\">self</span>.<span class=\"me1\">lat</span> <span class=\"sy0\">-</span> <span class=\"kw3\">p</span>.<span class=\"me1\">lat</span>,<br/>              <span class=\"kw2\">self</span>.<span class=\"me1\">lon</span> <span class=\"sy0\">-</span> <span class=\"kw3\">p</span>.<span class=\"me1\">lon</span>,<br/>        <span class=\"br0\">)</span><br/>\u00a0<br/>        var a = <span class=\"kw4\">Math</span>.<span class=\"me1\">sum</span><span class=\"br0\">(</span><br/>                  <span class=\"br0\">(</span>arc.<span class=\"me1\">latR</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">sin</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span>,<br/>                  <span class=\"br0\">(</span>arc.<span class=\"me1\">lonR</span> <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span>.<span class=\"me1\">sin</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> <span class=\"sy0\">*</span><br/>                    <span class=\"kw2\">self</span>.<span class=\"me1\">latR</span>.<span class=\"me1\">cos</span> <span class=\"sy0\">*</span> <span class=\"kw3\">p</span>.<span class=\"me1\">latR</span>.<span class=\"me1\">cos</span><br/>                <span class=\"br0\">)</span><br/>\u00a0<br/>        earth_radius <span class=\"sy0\">*</span> a.<span class=\"me1\">sqrt</span>.<span class=\"me1\">asin</span> <span class=\"sy0\">*</span> <span class=\"nu0\">2</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>var BNA = EarthPoint.<span class=\"me1\">new</span><span class=\"br0\">(</span>lat: <span class=\"nu0\">36.12</span>, lon: <span class=\"sy0\">-</span><span class=\"nu0\">86.67</span><span class=\"br0\">)</span><br/>var LAX = EarthPoint.<span class=\"me1\">new</span><span class=\"br0\">(</span>lat: <span class=\"nu0\">33.94</span>, lon: <span class=\"sy0\">-</span><span class=\"nu0\">118.4</span><span class=\"br0\">)</span><br/>\u00a0<br/>say BNA.<span class=\"me1\">haversine_dist</span><span class=\"br0\">(</span>LAX<span class=\"br0\">)</span>   <span class=\"co1\">#=&gt; 2886.444442837983299747157823945746716...</span></pre>"}, {"lang": "Stata", "loc": 17, "block": "<pre class=\"text highlighted_source\">program spheredist<br/>\tversion 15.0<br/>\tsyntax varlist(min=4 max=4 numeric), GENerate(namelist max=1) ///<br/>\t\t[Radius(real 6371) ALTitude(real 0) LABel(string)]<br/>\tconfirm new variable `generate'<br/>\tlocal lat1\u00a0: word 1 of `varlist'<br/>\tlocal lon1\u00a0: word 2 of `varlist'<br/>\tlocal lat2\u00a0: word 3 of `varlist'<br/>\tlocal lon2\u00a0: word 4 of `varlist'<br/>\tlocal r=2*(`radius'+`altitude'/1000)<br/>\tlocal k=_pi/180<br/>\tgen `generate'=`r'*asin(sqrt(sin((`lat2'-`lat1')*`k'/2)^2+ ///<br/>\t\tcos(`lat1'*`k')*cos(`lat2'*`k')*sin((`lon2'-`lon1')*`k'/2)^2))<br/>\tif `\"`label'\"'\u00a0!= \"\" {<br/>\t\tlabel variable `generate' `\"`label'\"'<br/>\t}<br/>end</pre>"}, {"lang": "Swift", "loc": 18, "block": "<pre class=\"text highlighted_source\">import Foundation<br/>\u00a0<br/>func haversine(lat1:Double, lon1:Double, lat2:Double, lon2:Double) -&gt; Double {<br/>    let lat1rad = lat1 * Double.pi/180<br/>    let lon1rad = lon1 * Double.pi/180<br/>    let lat2rad = lat2 * Double.pi/180<br/>    let lon2rad = lon2 * Double.pi/180<br/>\u00a0<br/>    let dLat = lat2rad - lat1rad<br/>    let dLon = lon2rad - lon1rad<br/>    let a = sin(dLat/2) * sin(dLat/2) + sin(dLon/2) * sin(dLon/2) * cos(lat1rad) * cos(lat2rad)<br/>    let c = 2 * asin(sqrt(a))<br/>    let R = 6372.8<br/>\u00a0<br/>    return R * c<br/>}<br/>\u00a0<br/>print(haversine(lat1:36.12, lon1:-86.67, lat2:33.94, lon2:-118.40))</pre>"}, {"lang": "Tcl", "loc": 17, "block": "<pre class=\"tcl highlighted_source\"><span class=\"kw2\">package</span> require Tcl <span class=\"nu0\">8.5</span><br/><span class=\"kw1\">proc</span> haversineFormula <span class=\"br0\">{</span>lat1 lon1 lat2 lon2<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">set</span> rads <span class=\"br0\">[</span><span class=\"kw1\">expr</span> atan2<span class=\"br0\">(</span><span class=\"nu0\">0</span>,-<span class=\"nu0\">1</span><span class=\"br0\">)</span>/<span class=\"nu0\">180</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> R <span class=\"nu0\">6372.8</span>    <span class=\"sy0\">;</span><span class=\"co1\"># In kilometers</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> dLat <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$lat2</span>-<span class=\"re0\">$lat1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$rads</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> dLon <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"br0\">(</span><span class=\"re0\">$lon2</span>-<span class=\"re0\">$lon1</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> <span class=\"re0\">$rads</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> lat1 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$lat1</span> <span class=\"sy0\">*</span> <span class=\"re0\">$rads</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> lat2 <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$lat2</span> <span class=\"sy0\">*</span> <span class=\"re0\">$rads</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>\u00a0<br/>    <span class=\"kw1\">set</span> a <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span>sin<span class=\"br0\">(</span><span class=\"re0\">$dLat</span>/<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span> + sin<span class=\"br0\">(</span><span class=\"re0\">$dLon</span>/<span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"sy0\">**</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>cos<span class=\"br0\">(</span><span class=\"re0\">$lat1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>cos<span class=\"br0\">(</span><span class=\"re0\">$lat2</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">set</span> c <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"nu0\">2</span><span class=\"sy0\">*</span>asin<span class=\"br0\">(</span>sqrt<span class=\"br0\">(</span><span class=\"re0\">$a</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$R</span> <span class=\"sy0\">*</span> <span class=\"re0\">$c</span><span class=\"br0\">}</span><span class=\"br0\">]</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Don't bother with too much inappropriate accuracy!</span><br/><span class=\"kw2\">puts</span> <span class=\"br0\">[</span><span class=\"kw2\">format</span> <span class=\"st0\">\"distance=%.1f km\"</span> <span class=\"br0\">[</span>haversineFormula <span class=\"nu0\">36.12</span> -<span class=\"nu0\">86.67</span> <span class=\"nu0\">33.94</span> -<span class=\"nu0\">118.40</span><span class=\"br0\">]</span><span class=\"br0\">]</span></pre>"}, {"lang": "TechBASIC", "loc": 32, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>FUNCTION HAVERSINE<br/>!---------------------------------------------------------------<br/>!*** Haversine Formula - Calculate distances by LAT/LONG<br/>!<br/>\u00a0<br/>!*** LAT/LON of the two locations and Unit of measure are GLOBAL<br/>!*** as they are defined in the main logic of the program, so they<br/>!*** available for use in the Function.<br/>!*** Usage: X=HAVERSINE<br/>\u00a0<br/>\u00a0<br/>    Radius=6378.137<br/>    Lat1=(Lat1*MATH.PI/180)<br/>    Lon1=(Lon1*MATH.PI/180)<br/>    Lat2=(Lat2*MATH.PI/180)<br/>    Lon2=(Lon2*MATH.PI/180)<br/>    DLon=Lon1-Lon2<br/>    ANSWER=ACOS(SIN(Lat1)*SIN(Lat2)+COS(Lat1)*COS(Lat2)*COS(DLon))*Radius<br/>\u00a0<br/>    DISTANCE=\"kilometers\"<br/>    SELECT CASE UNIT<br/>           CASE \"M\"<br/>                HAVERSINE=ANSWER*0.621371192<br/>                Distance=\"miles\"<br/>           CASE \"N\"<br/>                HAVERSINE=ANSWER*0.539956803<br/>                Distance=\"nautical miles\"<br/>    END SELECT       <br/>\u00a0<br/>END FUNCTION<br/>\u00a0</pre>"}, {"lang": "Teradata Stored Procedure", "loc": 28, "block": "<pre class=\"sql highlighted_source\">\u00a0<br/># syntax: <span class=\"kw1\">CALL</span> SP_HAVERSINE<span class=\"br0\">(</span><span class=\"nu0\">36.12</span><span class=\"sy0\">,</span><span class=\"nu0\">33.94</span><span class=\"sy0\">,-</span><span class=\"nu0\">86.67</span><span class=\"sy0\">,-</span><span class=\"nu0\">118.40</span><span class=\"sy0\">,</span>x<span class=\"br0\">)</span>;<br/>\u00a0<br/><span class=\"kw1\">CREATE</span> <span class=\"kw1\">PROCEDURE</span> SP_HAVERSINE<br/><span class=\"br0\">(</span><br/><span class=\"kw1\">IN</span> lat1 <span class=\"kw1\">FLOAT</span><span class=\"sy0\">,</span><br/><span class=\"kw1\">IN</span> lat2 <span class=\"kw1\">FLOAT</span><span class=\"sy0\">,</span><br/><span class=\"kw1\">IN</span> lon1 <span class=\"kw1\">FLOAT</span><span class=\"sy0\">,</span><br/><span class=\"kw1\">IN</span> lon2 <span class=\"kw1\">FLOAT</span><span class=\"sy0\">,</span><br/><span class=\"kw1\">OUT</span> distance <span class=\"kw1\">FLOAT</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">BEGIN</span> <br/>    <span class=\"kw1\">DECLARE</span> dLat <span class=\"kw1\">FLOAT</span>;<br/>    <span class=\"kw1\">DECLARE</span> dLon <span class=\"kw1\">FLOAT</span>;<br/>    <span class=\"kw1\">DECLARE</span> c <span class=\"kw1\">FLOAT</span>;<br/>    <span class=\"kw1\">DECLARE</span> a <span class=\"kw1\">FLOAT</span>;    <br/>    <span class=\"kw1\">DECLARE</span> km <span class=\"kw1\">FLOAT</span>;<br/>\u00a0<br/>    <span class=\"kw1\">SET</span> dLat <span class=\"sy0\">=</span> RADIANS<span class=\"br0\">(</span>lat2<span class=\"sy0\">-</span>lat1<span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">SET</span> dLon <span class=\"sy0\">=</span> RADIANS<span class=\"br0\">(</span>lon2<span class=\"sy0\">-</span>lon1<span class=\"br0\">)</span>;<br/>\u00a0<br/>    <span class=\"kw1\">SET</span> a <span class=\"sy0\">=</span> SIN<span class=\"br0\">(</span>dLat <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> SIN<span class=\"br0\">(</span>dLat <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> SIN<span class=\"br0\">(</span>dLon <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> SIN<span class=\"br0\">(</span>dLon <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> COS<span class=\"br0\">(</span>RADIANS<span class=\"br0\">(</span>lat1<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> COS<span class=\"br0\">(</span>RADIANS<span class=\"br0\">(</span>lat2<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">SET</span> c <span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> ASIN<span class=\"br0\">(</span><span class=\"kw1\">SQRT</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>    <span class=\"kw1\">SET</span> km <span class=\"sy0\">=</span> <span class=\"nu0\">6372.8</span> <span class=\"sy0\">*</span> c;<br/>\u00a0<br/>    <span class=\"kw1\">SELECT</span> km <span class=\"kw1\">INTO</span> distance;<br/><span class=\"kw1\">END</span>;<br/>\u00a0</pre>"}, {"lang": "T-SQL", "loc": 24, "block": "<pre class=\"sql highlighted_source\"><span class=\"kw1\">CREATE</span> <span class=\"kw1\">FUNCTION</span> <span class=\"br0\">[</span>dbo<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"br0\">[</span>Haversine<span class=\"br0\">]</span><span class=\"br0\">(</span>@Lat1 <span class=\"kw1\">AS</span> <span class=\"kw1\">DECIMAL</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> @Lon1 <span class=\"kw1\">AS</span> <span class=\"kw1\">DECIMAL</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> @Lat2 <span class=\"kw1\">AS</span> <span class=\"kw1\">DECIMAL</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> @Lon2 <span class=\"kw1\">AS</span> <span class=\"kw1\">DECIMAL</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">RETURNS</span> <span class=\"kw1\">DECIMAL</span><span class=\"br0\">(</span><span class=\"nu0\">12</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span><br/><span class=\"kw1\">AS</span><br/><span class=\"kw1\">BEGIN</span><br/>\t<span class=\"kw1\">DECLARE</span> @R\t<span class=\"kw1\">DECIMAL</span><span class=\"br0\">(</span><span class=\"nu0\">11</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">DECLARE</span> @dLat\t<span class=\"kw1\">DECIMAL</span><span class=\"br0\">(</span><span class=\"nu0\">9</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">DECLARE</span> @dLon\t<span class=\"kw1\">DECIMAL</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">DECLARE</span> @a\t<span class=\"kw1\">DECIMAL</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">DECLARE</span> @c\t<span class=\"kw1\">DECIMAL</span><span class=\"br0\">(</span><span class=\"nu0\">10</span><span class=\"sy0\">,</span><span class=\"nu0\">7</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>\t<span class=\"kw1\">SET</span> @R\t\t<span class=\"sy0\">=</span> <span class=\"nu0\">6372.8</span>;<br/>\t<span class=\"kw1\">SET</span> @dLat\t<span class=\"sy0\">=</span> RADIANS<span class=\"br0\">(</span>@Lat2 <span class=\"sy0\">-</span> @Lat1<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">SET</span> @dLon\t<span class=\"sy0\">=</span> RADIANS<span class=\"br0\">(</span>@Lon2 <span class=\"sy0\">-</span> @Lon1<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">SET</span> @Lat1\t<span class=\"sy0\">=</span> RADIANS<span class=\"br0\">(</span>@Lat1<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">SET</span> @Lat2\t<span class=\"sy0\">=</span> RADIANS<span class=\"br0\">(</span>@Lat2<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">SET</span> @a\t\t<span class=\"sy0\">=</span> SIN<span class=\"br0\">(</span>@dLat <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> SIN<span class=\"br0\">(</span>@dLat <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> SIN<span class=\"br0\">(</span>@dLon <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> SIN<span class=\"br0\">(</span>@dLon <span class=\"sy0\">/</span> <span class=\"nu0\">2</span><span class=\"br0\">)</span> <span class=\"sy0\">*</span> COS<span class=\"br0\">(</span>@Lat1<span class=\"br0\">)</span> <span class=\"sy0\">*</span> COS<span class=\"br0\">(</span>@Lat2<span class=\"br0\">)</span>;<br/>\t<span class=\"kw1\">SET</span> @c\t\t<span class=\"sy0\">=</span> <span class=\"nu0\">2</span> <span class=\"sy0\">*</span> ASIN<span class=\"br0\">(</span><span class=\"kw1\">SQRT</span><span class=\"br0\">(</span>@a<span class=\"br0\">)</span><span class=\"br0\">)</span>;<br/>\u00a0<br/>\t<span class=\"kw1\">RETURN</span> @R <span class=\"sy0\">*</span> @c;<br/><span class=\"kw1\">END</span><br/><span class=\"kw1\">GO</span><br/>\u00a0<br/><span class=\"kw1\">SELECT</span> dbo<span class=\"sy0\">.</span>Haversine<span class=\"br0\">(</span><span class=\"nu0\">36.12</span><span class=\"sy0\">,-</span><span class=\"nu0\">86.67</span><span class=\"sy0\">,</span><span class=\"nu0\">33.94</span><span class=\"sy0\">,-</span><span class=\"nu0\">118.4</span><span class=\"br0\">)</span><br/>\u00a0</pre>"}, {"lang": "UBASIC", "loc": 15, "block": "<pre class=\"text highlighted_source\">\u00a0<br/>   10  Point 7    'Sets decimal display to 32 places (0+.1^56)<br/>   20  Rf=#pi/180 'Degree -&gt; Radian Conversion<br/>  100\u00a0?Using(,7),.DxH(36+7.2/60,-(86+40.2/60),33+56.4/60,-(118+24/60));\" km\"<br/>  999  End<br/> 1000 '*** Haversine Distance Function ***<br/> 1010 .DxH(Lat_s,Long_s,Lat_f,Long_f)<br/> 1020  L_s=Lat_s*rf:L_f=Lat_f*rf:LD=L_f-L_s:MD=(Long_f-Long_s)*rf<br/> 1030  Return(12745.6*asin( (sin(.5*LD)^2+cos(L_s)*cos(L_f)*sin(.5*MD)^2)^.5))<br/> '' ''<br/>\u00a0<br/> Run<br/>  2887.2599506 km<br/> OK<br/>\u00a0</pre>"}, {"lang": "X86 Assembly", "loc": 86, "block": "<pre class=\"asm highlighted_source\"><span class=\"co2\">0000</span>                                 <span class=\"sy1\">.</span>model  tiny<br/><span class=\"co2\">0000</span>                                 <span class=\"sy1\">.</span><span class=\"kw5\">code</span><br/>                                     <span class=\"nu0\">.486</span><br/>                                     org     <span class=\"nu0\">100h</span>            <span class=\"co1\">;.com files start here</span><br/><span class=\"co2\">0100</span>  9B <span class=\"kw5\">DB</span> E3               <span class=\"kw5\">start</span><span class=\"sy1\">:</span>  <span class=\"kw2\">finit</span>                   <span class=\"co1\">;initialize floating-point unit (FPU)</span><br/>                             <span class=\"co1\">;Great circle distance =</span><br/>                             <span class=\"co1\">; 2.0*Radius * ASin( sqrt( Haversine(Lat2-Lat1) +</span><br/>                             <span class=\"co1\">;                          Haversine(Lon2-Lon1)*Cos(Lat1)*Cos(Lat2) ) )</span><br/><span class=\"co2\">0103</span>  D9 <span class=\"nu0\">06</span> 0191r                    <span class=\"kw2\">fld</span>     Lat2            <span class=\"co1\">;push real onto FPU stack</span><br/><span class=\"co2\">0107</span>  D8 <span class=\"nu0\">26</span> 018Dr                    <span class=\"kw2\">fsub</span>    Lat1            <span class=\"co1\">;subtract real from top of stack (st(0) = st)</span><br/><span class=\"co2\">010B</span>  E8 <span class=\"nu0\">0070</span>                        <span class=\"kw1\">call</span>    Haversine       <span class=\"co1\">;(1.0-cos(st)) / 2.0</span><br/><span class=\"co2\">010E</span>  D9 <span class=\"nu0\">06</span> 0199r                    <span class=\"kw2\">fld</span>     Lon2            <span class=\"co1\">;repeat for longitudes</span><br/><span class=\"co2\">0112</span>  D8 <span class=\"nu0\">26</span> 0195r                    <span class=\"kw2\">fsub</span>    Lon1<br/><span class=\"co2\">0116</span>  E8 <span class=\"nu0\">0065</span>                        <span class=\"kw1\">call</span>    Haversine       <span class=\"co1\">;st(1)=Lats; st=Lons</span><br/><span class=\"co2\">0119</span>  D9 <span class=\"nu0\">06</span> 018Dr                    <span class=\"kw2\">fld</span>     Lat1<br/><span class=\"co2\">011D</span>  D9 FF                          <span class=\"kw2\">fcos</span>                    <span class=\"co1\">;replace st with its cosine</span><br/><span class=\"co2\">011F</span>  D9 <span class=\"nu0\">06</span> 0191r                    <span class=\"kw2\">fld</span>     Lat2<br/><span class=\"co2\">0123</span>  D9 FF                          <span class=\"kw2\">fcos</span>            <span class=\"co1\">;st=cos(Lat2); st(1)=cos(Lat1); st(2)=Lats; st(3)=Lons</span><br/><span class=\"co2\">0125</span>  DE C9                          <span class=\"kw2\">fmul</span>            <span class=\"co1\">;st=cos(Lat2)*cos(Lat1); st(1)=Lats; st(2)=Lons</span><br/><span class=\"co2\">0127</span>  DE C9                          <span class=\"kw2\">fmul</span>            <span class=\"co1\">;st=cos(Lat2)*cos(Lat1)*Lats; st(1)=Lons</span><br/><span class=\"co2\">0129</span>  DE C1                          <span class=\"kw2\">fadd</span>            <span class=\"co1\">;st=cos(Lat2)*cos(Lat1)*Lats + Lons</span><br/><span class=\"co2\">012B</span>  D9 FA                          <span class=\"kw2\">fsqrt</span>                   <span class=\"co1\">;replace st with its square root</span><br/>                             <span class=\"co1\">;asin(x) = atan(x/sqrt(1-x^2))</span><br/><span class=\"co2\">012D</span>  D9 C0                          <span class=\"kw2\">fld</span>     <span class=\"kw4\">st</span>              <span class=\"co1\">;duplicate tos</span><br/><span class=\"co2\">012F</span>  D8 C8                          <span class=\"kw2\">fmul</span>    <span class=\"kw4\">st</span><span class=\"sy1\">,</span> <span class=\"kw4\">st</span>          <span class=\"co1\">;x^2</span><br/><span class=\"co2\">0131</span>  D9 E8                          <span class=\"kw2\">fld1</span>                    <span class=\"co1\">;get 1.0</span><br/><span class=\"co2\">0133</span>  DE E1                          <span class=\"kw2\">fsubr</span>                   <span class=\"co1\">;1 - x^2</span><br/><span class=\"co2\">0135</span>  D9 FA                          <span class=\"kw2\">fsqrt</span>                   <span class=\"co1\">;sqrt(1-x^2)</span><br/><span class=\"co2\">0137</span>  D9 F3                          <span class=\"kw2\">fpatan</span>                  <span class=\"co1\">;take atan(st(1)/st)</span><br/><span class=\"co2\">0139</span>  D8 0E 019Dr                    <span class=\"kw2\">fmul</span>    Radius2         <span class=\"co1\">;*2.0*Radius</span><br/>\u00a0<br/>                             <span class=\"co1\">;Display value in FPU's top of stack (st)</span><br/>      =<span class=\"nu0\">0004</span>                  before  <span class=\"kw5\">equ</span>     <span class=\"nu0\">4</span>               <span class=\"co1\">;places before</span><br/>      =<span class=\"nu0\">0002</span>                  after   <span class=\"kw5\">equ</span>     <span class=\"nu0\">2</span>               <span class=\"co1\">; and after decimal point</span><br/>      =<span class=\"nu0\">0001</span>                  scaler  =       <span class=\"nu0\">1</span>               <span class=\"co1\">;\"=\" allows scaler to be redefined, unlike equ</span><br/>                                     rept    after           <span class=\"co1\">;repeat block \"after\" times</span><br/>                             scaler  =       scaler<span class=\"sy1\">*</span><span class=\"nu0\">10</span><br/>                                     endm                    <span class=\"co1\">;scaler now = 10^after</span><br/>\u00a0<br/><span class=\"co2\">013D</span>  <span class=\"nu0\">66</span>| 6A <span class=\"nu0\">64</span>                      <span class=\"kw1\">push</span>    <span class=\"kw6\">dword</span> ptr scaler<span class=\"co1\">;use stack for convenient memory location</span><br/><span class=\"co2\">0140</span>  <span class=\"nu0\">67</span>| DA 0C <span class=\"nu0\">24</span>                   <span class=\"kw2\">fimul</span>   <span class=\"kw6\">dword</span> ptr <span class=\"br0\">[</span><span class=\"kw4\">esp</span><span class=\"br0\">]</span> <span class=\"co1\">;st:= st*scaler</span><br/><span class=\"co2\">0144</span>  <span class=\"nu0\">67</span>| <span class=\"kw5\">DB</span> 1C <span class=\"nu0\">24</span>                   <span class=\"kw2\">fistp</span>   <span class=\"kw6\">dword</span> ptr <span class=\"br0\">[</span><span class=\"kw4\">esp</span><span class=\"br0\">]</span> <span class=\"co1\">;round st to nearest integer</span><br/><span class=\"co2\">0148</span>  <span class=\"nu0\">66</span>| <span class=\"nu0\">58</span>                         <span class=\"kw1\">pop</span>     <span class=\"kw4\">eax</span>             <span class=\"co1\">; and put it into eax</span><br/>\u00a0<br/><span class=\"co2\">014A</span>  <span class=\"nu0\">66</span>| BB 0000000A                <span class=\"kw1\">mov</span>     <span class=\"kw4\">ebx</span><span class=\"sy1\">,</span> <span class=\"nu0\">10</span>         <span class=\"co1\">;set up for idiv instruction</span><br/><span class=\"co2\">0150</span>  B9 <span class=\"nu0\">0006</span>                        <span class=\"kw1\">mov</span>     <span class=\"kw4\">cx</span><span class=\"sy1\">,</span> before<span class=\"sy1\">+</span>after<span class=\"co1\">;set up loop counter</span><br/><span class=\"co2\">0153</span>  <span class=\"nu0\">66</span>| <span class=\"nu0\">99</span>                 ro10<span class=\"sy1\">:</span>   <span class=\"kw1\">cdq</span>                     <span class=\"co1\">;convert double to quad; i.e: edx:= 0</span><br/><span class=\"co2\">0155</span>  <span class=\"nu0\">66</span>| F7 FB                      <span class=\"kw1\">idiv</span>    <span class=\"kw4\">ebx</span>             <span class=\"co1\">;eax:= edx:eax/ebx; remainder in edx</span><br/><span class=\"co2\">0158</span>  <span class=\"nu0\">52</span>                             <span class=\"kw1\">push</span>    <span class=\"kw4\">dx</span>              <span class=\"co1\">;save least significant digit on stack</span><br/><span class=\"co2\">0159</span>  E2 F8                          <span class=\"kw1\">loop</span>    ro10            <span class=\"co1\">;cx--; loop back if not zero</span><br/>\u00a0<br/><span class=\"co2\">015B</span>  B1 <span class=\"nu0\">06</span>                          <span class=\"kw1\">mov</span>     <span class=\"kw4\">cl</span><span class=\"sy1\">,</span> before<span class=\"sy1\">+</span>after<span class=\"co1\">;(ch=0)</span><br/><span class=\"co2\">015D</span>  B3 <span class=\"nu0\">00</span>                          <span class=\"kw1\">mov</span>     <span class=\"kw4\">bl</span><span class=\"sy1\">,</span> <span class=\"nu0\">0</span>           <span class=\"co1\">;used to suppress leading zeros</span><br/><span class=\"co2\">015F</span>  <span class=\"nu0\">58</span>                     ro20<span class=\"sy1\">:</span>   <span class=\"kw1\">pop</span>     <span class=\"kw4\">ax</span>              <span class=\"co1\">;get digit</span><br/><span class=\"co2\">0160</span>  0A D8                          <span class=\"kw1\">or</span>      <span class=\"kw4\">bl</span><span class=\"sy1\">,</span> <span class=\"kw4\">al</span>          <span class=\"co1\">;turn off suppression if not a zero</span><br/><span class=\"co2\">0162</span>  <span class=\"nu0\">80</span> F9 <span class=\"nu0\">03</span>                       <span class=\"kw1\">cmp</span>     <span class=\"kw4\">cl</span><span class=\"sy1\">,</span> after<span class=\"sy1\">+</span><span class=\"nu0\">1</span>     <span class=\"co1\">;is digit immediately to left of decimal point?</span><br/><span class=\"co2\">0165</span>  <span class=\"nu0\">75</span> <span class=\"nu0\">01</span>                          <span class=\"kw1\">jne</span>     ro30            <span class=\"co1\">;skip if not</span><br/><span class=\"co2\">0167</span>  <span class=\"nu0\">43</span>                              <span class=\"kw1\">inc</span>    <span class=\"kw4\">bx</span>              <span class=\"co1\">;turn off leading zero suppression</span><br/><span class=\"co2\">0168</span>  <span class=\"nu0\">04</span> <span class=\"nu0\">30</span>                  ro30<span class=\"sy1\">:</span>   <span class=\"kw1\">add</span>     <span class=\"kw4\">al</span><span class=\"sy1\">,</span> <span class=\"st0\">'0'</span>         <span class=\"co1\">;if leading zero then ' ' else add 0</span><br/><span class=\"co2\">016A</span>  <span class=\"nu0\">84</span> <span class=\"kw5\">DB</span>                          <span class=\"kw1\">test</span>    <span class=\"kw4\">bl</span><span class=\"sy1\">,</span> <span class=\"kw4\">bl</span><br/><span class=\"co2\">016C</span>  <span class=\"nu0\">75</span> <span class=\"nu0\">02</span>                          <span class=\"kw1\">jne</span>     ro40<br/><span class=\"co2\">016E</span>  B0 <span class=\"nu0\">20</span>                           <span class=\"kw1\">mov</span>    <span class=\"kw4\">al</span><span class=\"sy1\">,</span> <span class=\"st0\">' '</span><br/><span class=\"co2\">0170</span>  CD <span class=\"nu0\">29</span>                  ro40<span class=\"sy1\">:</span>   <span class=\"kw1\">int</span>     <span class=\"nu0\">29h</span>             <span class=\"co1\">;display character in al register</span><br/><span class=\"co2\">0172</span>  <span class=\"nu0\">80</span> F9 <span class=\"nu0\">03</span>                       <span class=\"kw1\">cmp</span>     <span class=\"kw4\">cl</span><span class=\"sy1\">,</span> after<span class=\"sy1\">+</span><span class=\"nu0\">1</span>     <span class=\"co1\">;is digit immediately to left of decimal point?</span><br/><span class=\"co2\">0175</span>  <span class=\"nu0\">75</span> <span class=\"nu0\">04</span>                          <span class=\"kw1\">jne</span>     ro50            <span class=\"co1\">;skip if not</span><br/><span class=\"co2\">0177</span>  B0 2E                           <span class=\"kw1\">mov</span>    <span class=\"kw4\">al</span><span class=\"sy1\">,</span> <span class=\"st0\">'.'</span>         <span class=\"co1\">;display decimal point</span><br/><span class=\"co2\">0179</span>  CD <span class=\"nu0\">29</span>                           <span class=\"kw1\">int</span>    <span class=\"nu0\">29h</span><br/><span class=\"co2\">017B</span>  E2 E2                  ro50<span class=\"sy1\">:</span>   <span class=\"kw1\">loop</span>    ro20            <span class=\"co1\">;loop until all digits displayed</span><br/><span class=\"co2\">017D</span>  C3                             <span class=\"kw1\">ret</span>                     <span class=\"co1\">;return to OS</span><br/>\u00a0<br/><span class=\"co2\">017E</span>                         Haversine<span class=\"sy1\">:</span>                      <span class=\"co1\">;return (1.0-Cos(Ang)) / 2.0 in st</span><br/><span class=\"co2\">017E</span>  D9 FF                          <span class=\"kw2\">fcos</span><br/><span class=\"co2\">0180</span>  D9 E8                          <span class=\"kw2\">fld1</span><br/><span class=\"co2\">0182</span>  DE E1                          <span class=\"kw2\">fsubr</span><br/><span class=\"co2\">0184</span>  D8 <span class=\"nu0\">36</span> 0189r                    <span class=\"kw2\">fdiv</span>    N2<br/><span class=\"co2\">0188</span>  C3                             <span class=\"kw1\">ret</span><br/>\u00a0<br/><span class=\"co2\">0189</span>  <span class=\"nu0\">40000000</span>               N2      <span class=\"kw5\">dd</span>       <span class=\"nu0\">2.0</span><br/><span class=\"co2\">018D</span>  3F21628D               Lat1    <span class=\"kw5\">dd</span>       <span class=\"nu0\">0.63041</span>        <span class=\"co1\">;36.12*pi/180</span><br/><span class=\"co2\">0191</span>  3F17A4E8               Lat2    <span class=\"kw5\">dd</span>       <span class=\"nu0\">0.59236</span>        <span class=\"co1\">;33.94*pi/180</span><br/><span class=\"co2\">0195</span>  BFC19F80               Lon1    <span class=\"kw5\">dd</span>      <span class=\"sy1\">-</span><span class=\"nu0\">1.51268</span>        <span class=\"co1\">;-86.67*pi/180</span><br/><span class=\"co2\">0199</span>  C004410B               Lon2    <span class=\"kw5\">dd</span>      <span class=\"sy1\">-</span><span class=\"nu0\">2.06647</span>        <span class=\"co1\">;-118.40*pi/180</span><br/><span class=\"co2\">019D</span>  <span class=\"nu0\">46472666</span>               Radius2 <span class=\"kw5\">dd</span>      <span class=\"nu0\">12745.6</span>         <span class=\"co1\">;6372.8 average radius of Earth (km) times 2</span><br/>                             <span class=\"co1\">;(TASM isn't smart enough to do floating point constant calculations)</span><br/>                                     end     <span class=\"kw5\">start</span><br/>\u00a0</pre>"}, {"lang": "XPL0", "loc": 14, "block": "<pre class=\"text highlighted_source\">include c:\\cxpl\\codes;                  \\intrinsic 'code' declarations<br/>\u00a0<br/>func real Haversine(Ang);<br/>real Ang;<br/>return (1.0-Cos(Ang)) / 2.0;<br/>\u00a0<br/>func real Dist(Lat1, Lat2, Lon1, Lon2); \\Great circle distance<br/>real Lat1, Lat2, Lon1, Lon2;<br/>def R = 6372.8;                         \\average radius of Earth (km)<br/>return 2.0*R * ASin( sqrt( Haversine(Lat2-Lat1) +<br/>       Cos(Lat1)*Cos(Lat2)*Haversine(Lon2-Lon1) ));<br/>\u00a0<br/>def D2R = 3.141592654/180.0;            \\degrees to radians<br/>RlOut(0, Dist(36.12*D2R, 33.94*D2R, -86.67*D2R, -118.40*D2R ));</pre>"}, {"lang": "XQuery", "loc": 16, "block": "<pre class=\"text highlighted_source\">declare namespace xsd = \"http://www.w3.org/2001/XMLSchema\";<br/>declare namespace math = \"http://www.w3.org/2005/xpath-functions/math\";<br/>\u00a0<br/>declare function local:haversine($lat1 as xsd:float, $lon1 as xsd:float, $lat2 as xsd:float, $lon2 as xsd:float)<br/>    as xsd:float<br/>{<br/>    let $dlat \u00a0:= ($lat2 - $lat1) * math:pi() div 180<br/>    let $dlon \u00a0:= ($lon2 - $lon1) * math:pi() div 180<br/>    let $rlat1\u00a0:= $lat1 * math:pi() div 180<br/>    let $rlat2\u00a0:= $lat2 * math:pi() div 180<br/>    let $a    \u00a0:= math:sin($dlat div 2) * math:sin($dlat div 2) + math:sin($dlon div 2) * math:sin($dlon div 2) * math:cos($rlat1) * math:cos($rlat2)<br/>    let $c    \u00a0:= 2 * math:atan2(math:sqrt($a), math:sqrt(1-$a))<br/>    return xsd:float($c * 6371.0)<br/>};<br/>\u00a0<br/>local:haversine(36.12, -86.67, 33.94, -118.4)</pre>"}, {"lang": "zkl", "loc": 14, "block": "<pre class=\"text highlighted_source\">haversine(36.12, -86.67, 33.94, -118.40).println();<br/>\u00a0<br/>fcn haversine(Lat1, Long1, Lat2, Long2){<br/>   const R = 6372.8; \t// In kilometers;<br/>   Diff_Lat \u00a0:= (Lat2  - Lat1) .toRad();<br/>   Diff_Long\u00a0:= (Long2 - Long1).toRad();<br/>   NLat     \u00a0:= Lat1.toRad();<br/>   NLong    \u00a0:= Lat2.toRad();<br/>   A \t    \u00a0:= (Diff_Lat/2) .sin().pow(2) + <br/>                (Diff_Long/2).sin().pow(2) * <br/>\t\tNLat.cos() * NLong.cos();<br/>   C \t    \u00a0:= 2.0 * A.sqrt().asin();<br/>   R*C;<br/>}</pre>"}, {"lang": "ZX Spectrum Basic", "loc": 11, "block": "<pre class=\"zxbasic highlighted_source\"><span class=\"nu0\">10</span> <span class=\"kw1\">LET</span> diam=<span class=\"nu0\">2</span>*<span class=\"nu0\">6372.8</span><br/><span class=\"nu0\">20</span> <span class=\"kw1\">LET</span> Lg1m2=FN r<span class=\"br0\">(</span><span class=\"br0\">(</span>-<span class=\"nu0\">86.67</span><span class=\"br0\">)</span>-<span class=\"br0\">(</span>-<span class=\"nu0\">118.4</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">30</span> <span class=\"kw1\">LET</span> Lt1=FN r<span class=\"br0\">(</span><span class=\"nu0\">36.12</span><span class=\"br0\">)</span><br/><span class=\"nu0\">40</span> <span class=\"kw1\">LET</span> Lt2=FN r<span class=\"br0\">(</span><span class=\"nu0\">33.94</span><span class=\"br0\">)</span><br/><span class=\"nu0\">50</span> <span class=\"kw1\">LET</span> dz=<span class=\"kw3\">SIN</span> <span class=\"br0\">(</span>Lt1<span class=\"br0\">)</span>-<span class=\"kw3\">SIN</span> <span class=\"br0\">(</span>Lt2<span class=\"br0\">)</span><br/><span class=\"nu0\">60</span> <span class=\"kw1\">LET</span> dx=<span class=\"kw3\">COS</span> <span class=\"br0\">(</span>Lg1m2<span class=\"br0\">)</span>*<span class=\"kw3\">COS</span> <span class=\"br0\">(</span>Lt1<span class=\"br0\">)</span>-<span class=\"kw3\">COS</span> <span class=\"br0\">(</span>Lt2<span class=\"br0\">)</span><br/><span class=\"nu0\">70</span> <span class=\"kw1\">LET</span> dy=<span class=\"kw3\">SIN</span> <span class=\"br0\">(</span>Lg1m2<span class=\"br0\">)</span>*<span class=\"kw3\">COS</span> <span class=\"br0\">(</span>Lt1<span class=\"br0\">)</span><br/><span class=\"nu0\">80</span> <span class=\"kw1\">LET</span> hDist=<span class=\"kw3\">ASN</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>dx*dx+dy*dy+dz*dz<span class=\"br0\">)</span>^<span class=\"nu0\">0.5</span>/<span class=\"nu0\">2</span><span class=\"br0\">)</span>*diam<br/><span class=\"nu0\">90</span> <span class=\"kw1\">PRINT</span> <span class=\"st0\">\"Haversine distance: \"</span>;hDist;<span class=\"st0\">\" km.\"</span><br/><span class=\"nu0\">100</span> STOP <br/><span class=\"nu0\">1000</span> DEF FN r<span class=\"br0\">(</span>a<span class=\"br0\">)</span>=a*<span class=\"nu0\">0.017453293</span>: <span class=\"co3\">REM convert degree to radians</span></pre>"}]}