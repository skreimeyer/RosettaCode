{"task": "Pascal_matrix_generation", "blocks": [{"lang": "360 Assembly", "loc": 134, "block": "<pre class=\"text highlighted_source\">*        Pascal matrix generation - 10/06/2018<br/>PASCMATR CSECT<br/>         USING  PASCMATR,R13       base register<br/>         B      72(R15)            skip savearea<br/>         DC     17F'0'             savearea<br/>         SAVE   (14,12)            save previous context<br/>         ST     R13,4(R15)         link backward<br/>         ST     R15,8(R13)         link forward<br/>         LR     R13,R15            set addressability<br/>         MVC    MAT,=F'1'          mat(1,1)=1<br/>         LA     R6,1               i=1<br/>       DO WHILE=(C,R6,LE,N)        do i=1 to n;<br/>         LA     R7,1                 j=1<br/>       DO WHILE=(C,R7,LE,N)          do j=1 to n;       <br/>         LR     R2,R6                  i<br/>         LA     R3,1(R7)               r3=j+1<br/>         LR     R1,R6                  i<br/>         BCTR   R1,0                   -1<br/>         MH     R1,NN                  *nn<br/>         AR     R1,R7                  ~(i,j)<br/>         SLA    R1,2                   *4<br/>         L      R4,MAT-4(R1)           r4=mat(i,j)<br/>         LR     R5,R6                  i<br/>         MH     R5,NN                  *nn<br/>         AR     R5,R7                  ~(i+1,j)<br/>         SLA    R5,2                   *4<br/>         L      R5,MAT-4(R5)           r5=mat(i+1,j)<br/>         AR     R4,R5                  r4=mat(i,j)+mat(i+1,j)<br/>         MH     R2,NN                  *nn<br/>         AR     R2,R3                  ~(i+1,j+1)<br/>         SLA    R2,2                   *4<br/>         ST     R4,MAT-4(R2)           mat(i+1,j+1)=mat(i,j)+mat(i+1,j)<br/>         LA     R7,1(R7)               j++<br/>       ENDDO    ,                    enddo j<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         MVC    TITLE,=CL20'Upper:'<br/>         BAL    R14,PRINTMAT       call printmat<br/>         MVC    MAT,=F'1'          mat(1,1)=1<br/>         LA     R6,1               i=1<br/>       DO WHILE=(C,R6,LE,N)        do i=1 to n;<br/>         LA     R7,1                 j=1<br/>       DO WHILE=(C,R7,LE,N)          do j=1 to n;       <br/>         LR     R2,R6                  i<br/>         LA     R3,1(R7)               r3=j+1<br/>         LR     R1,R6                  i<br/>         BCTR   R1,0                   -1<br/>         MH     R1,NN                  *nn<br/>         LR     R0,R7                  j<br/>         AR     R1,R0                  ~(i,j)<br/>         SLA    R1,2                   *4<br/>         L      R4,MAT-4(R1)           r4=mat(i,j)<br/>         LA     R5,1(R7)               j+1<br/>         LR     R1,R6                  i<br/>         BCTR   R1,0                   -1<br/>         MH     R1,NN                  *nn<br/>         AR     R1,R5                  ~(i,j+1)<br/>         SLA    R1,2                   *4<br/>         L      R5,MAT-4(R1)           r5=mat(i,j+1)<br/>         AR     R4,R5                  mat(i,j)+mat(i,j+1)<br/>         MH     R2,NN                  *nn<br/>         AR     R2,R3                  ~(i+1,j+1)<br/>         SLA    R2,2                   *4<br/>         ST     R4,MAT-4(R2)           mat(i+1,j+1)=mat(i,j)+mat(i,j+1)<br/>         LA     R7,1(R7)               j++<br/>       ENDDO    ,                    enddo j<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         MVC    TITLE,=CL20'Lower:'<br/>         BAL    R14,PRINTMAT       call printmat<br/>         MVC    MAT+24,=F'1'       mat(2,1)=1<br/>         LA     R6,1               i=1<br/>       DO WHILE=(C,R6,LE,N)        do i=1 to n;<br/>         LA     R7,1                 j=1<br/>       DO WHILE=(C,R7,LE,N)          do j=1 to n;       <br/>         LR     R2,R6                  i<br/>         LA     R3,1(R7)               r3=j+1                 j<br/>         LR     R1,R6                  i<br/>         BCTR   R1,0                   -1<br/>         MH     R1,NN                  *nn<br/>         AR     R1,R3                  ~(i,j+1)<br/>         SLA    R1,2                   *4<br/>         L      R4,MAT-4(R1)           r4=mat(i,j+1)<br/>         LR     R5,R6                  i<br/>         MH     R5,NN                  *nn<br/>         AR     R5,R7                  j<br/>         SLA    R5,2                   *4<br/>         L      R5,MAT-4(R5)           r5=mat(i+1,j)<br/>         AR     R4,R5                  mat(i,j+1)+mat(i+1,j)<br/>         MH     R2,NN                  *nn<br/>         AR     R2,R3                  ~(i+1,j+1)<br/>         SLA    R2,2                   *4<br/>         ST     R4,MAT-4(R2)         mat(i+1,j+1)=mat(i,j+1)+mat(i+1,j)<br/>         LA     R7,1(R7)               j++<br/>       ENDDO    ,                    enddo j<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         MVC    TITLE,=CL20'Symmetric:'<br/>         BAL    R14,PRINTMAT       call printmat<br/>         L      R13,4(0,R13)       restore previous savearea pointer<br/>         RETURN (14,12),RC=0       restore registers from calling sav<br/>PRINTMAT XPRNT  TITLE,L'TITLE      print title  -----------------------<br/>         LA     R10,PG             pgi=0<br/>         LA     R6,1               i=1<br/>       DO WHILE=(C,R6,LE,N)        do i=1 to n;<br/>         LA     R7,1                 j=1<br/>       DO WHILE=(C,R7,LE,N)          do j=1 to n;       <br/>         LR     R2,R6                  i<br/>         LR     R3,R7                  j<br/>         LA     R3,1(R3)               j+1<br/>         MH     R2,NN                  *nn<br/>         AR     R2,R3                  ~(i+1,j+1)<br/>         SLA    R2,2                   *4<br/>         L      R2,MAT-4(R2)           mat(i+1,j+1)<br/>         XDECO  R2,XDEC                edit mat(i+1,j+1)<br/>         MVC    0(5,R10),XDEC+7        output mat(i+1,j+1)<br/>         LA     R10,5(R10)             pgi+=5<br/>         LA     R7,1(R7)               j++<br/>       ENDDO    ,                    enddo j<br/>         XPRNT  PG,L'PG              print<br/>         LA     R10,PG               pgi=0<br/>         LA     R6,1(R6)             i++<br/>       ENDDO    ,                  enddo i<br/>         BR     R14                return to caller -------------------<br/>X        EQU    5                  matrix size<br/>N        DC     A(X)               n=x<br/>NN       DC     AL2(X+1)           nn=x+1<br/>MAT      DC     ((X+1)*(X+1))F'0'  mat(x+1,x+1)<br/>TITLE    DC     CL20' '            title<br/>PG       DC     CL80' '            buffer<br/>PGI      DC     H'0'               buffer index<br/>XDEC     DS     CL12               temp<br/>         YREGS<br/>         END    PASCMATR</pre>"}, {"lang": "ALGOL 68", "loc": 61, "block": "<pre class=\"algol68 highlighted_source\"><span class=\"kw2\">BEGIN</span><br/>    <span class=\"coMULTI\"># returns an upper Pascal matrix of size n #</span><br/>    <span class=\"kw4\">PROC</span> upper pascal matrix <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>         <span class=\"kw2\">BEGIN</span><br/>            <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> n<span class=\"sy1\">,</span> 1 <span class=\"sy1\">:</span> n <span class=\"br0\">]</span><span class=\"kw3\">INT</span> result<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">FOR</span> j        <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span> result<span class=\"br0\">[</span> 1<span class=\"sy1\">,</span> j <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 1 <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>            <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span><br/>                result<span class=\"br0\">[</span> i<span class=\"sy1\">,</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>                <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span><br/>                    result<span class=\"br0\">[</span> i<span class=\"sy1\">,</span> j <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> result<span class=\"br0\">[</span> i <span class=\"sy1\">-</span> 1<span class=\"sy1\">,</span> j <span class=\"sy1\">-</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">+</span> result<span class=\"br0\">[</span> i<span class=\"sy1\">,</span> j <span class=\"sy1\">-</span> 1 <span class=\"br0\">]</span><br/>                <span class=\"kw2\">OD</span><br/>            <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>            result<br/>         <span class=\"kw2\">END</span> <span class=\"coMULTI\"># upper pascal matrix #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># returns a lower Pascal matrix of size n #</span><br/>    <span class=\"kw4\">PROC</span> lower pascal matrix <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>         <span class=\"kw2\">BEGIN</span><br/>            <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> n<span class=\"sy1\">,</span> 1 <span class=\"sy1\">:</span> n <span class=\"br0\">]</span><span class=\"kw3\">INT</span> result<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">FOR</span> i        <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span> result<span class=\"br0\">[</span> i<span class=\"sy1\">,</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 1 <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>            <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span><br/>                result<span class=\"br0\">[</span> 1<span class=\"sy1\">,</span> j <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 0<span class=\"sy1\">;</span><br/>                <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span><br/>                    result<span class=\"br0\">[</span> i<span class=\"sy1\">,</span> j <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> result<span class=\"br0\">[</span> i <span class=\"sy1\">-</span> 1<span class=\"sy1\">,</span> j <span class=\"sy1\">-</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">+</span> result<span class=\"br0\">[</span> i <span class=\"sy1\">-</span> 1<span class=\"sy1\">,</span> j <span class=\"br0\">]</span><br/>                <span class=\"kw2\">OD</span><br/>            <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>            result<br/>         <span class=\"kw2\">END</span> <span class=\"coMULTI\"># lower pascal matrix #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># returns a symmetric Pascal matrix of size n #</span><br/>    <span class=\"kw4\">PROC</span> symmetric pascal matrix <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"kw3\">INT</span> n <span class=\"br0\">)</span><span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span><span class=\"sy1\">:</span><br/>         <span class=\"kw2\">BEGIN</span><br/>            <span class=\"br0\">[</span> 1 <span class=\"sy1\">:</span> n<span class=\"sy1\">,</span> 1 <span class=\"sy1\">:</span> n <span class=\"br0\">]</span><span class=\"kw3\">INT</span> result<span class=\"sy1\">;</span><br/>            <span class=\"kw2\">FOR</span> i <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span><br/>                result<span class=\"br0\">[</span> i<span class=\"sy1\">,</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 1<span class=\"sy1\">;</span><br/>                result<span class=\"br0\">[</span> 1<span class=\"sy1\">,</span> i <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> 1<br/>            <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>            <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span><br/>                <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 2 <span class=\"kw2\">TO</span> n <span class=\"kw2\">DO</span><br/>                    result<span class=\"br0\">[</span> i<span class=\"sy1\">,</span> j <span class=\"br0\">]</span> <span class=\"sy1\">:=</span> result<span class=\"br0\">[</span> i<span class=\"sy1\">,</span> j <span class=\"sy1\">-</span> 1 <span class=\"br0\">]</span> <span class=\"sy1\">+</span> result<span class=\"br0\">[</span> i <span class=\"sy1\">-</span> 1<span class=\"sy1\">,</span> j <span class=\"br0\">]</span><br/>                <span class=\"kw2\">OD</span><br/>            <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>            result<br/>         <span class=\"kw2\">END</span> <span class=\"coMULTI\"># symmetric pascal matrix #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\"># print the matrix m with the specified field width #</span><br/>    <span class=\"kw4\">PROC</span> <span class=\"kw22\">print</span> matrix <span class=\"sy1\">=</span> <span class=\"br0\">(</span> <span class=\"br0\">[</span><span class=\"sy1\">,</span><span class=\"br0\">]</span><span class=\"kw3\">INT</span> m<span class=\"sy1\">,</span> <span class=\"kw3\">INT</span> field width <span class=\"br0\">)</span><span class=\"kw3\">VOID</span><span class=\"sy1\">:</span><br/>         <span class=\"kw2\">BEGIN</span><br/>             <span class=\"kw2\">FOR</span> i <span class=\"kw2\">FROM</span> 1 <span class=\"kw8\">LWB</span> m <span class=\"kw2\">TO</span> 1 <span class=\"kw8\">UPB</span> m <span class=\"kw2\">DO</span><br/>                 <span class=\"kw2\">FOR</span> j <span class=\"kw2\">FROM</span> 2 <span class=\"kw8\">LWB</span> m <span class=\"kw2\">TO</span> 2 <span class=\"kw8\">UPB</span> m <span class=\"kw2\">DO</span><br/>                     <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"kw22\">whole</span><span class=\"br0\">(</span> m<span class=\"br0\">[</span> i<span class=\"sy1\">,</span> j <span class=\"br0\">]</span><span class=\"sy1\">,</span> <span class=\"sy1\">-</span> field width <span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>                 <span class=\"kw2\">OD</span><span class=\"sy1\">;</span><br/>                 <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>             <span class=\"kw2\">OD</span><br/>         <span class=\"kw2\">END</span> <span class=\"coMULTI\"># print matrix #</span> <span class=\"sy1\">;</span><br/>\u00a0<br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"upper:\"</span><span class=\"sy1\">,</span>     <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw22\">print</span> matrix<span class=\"br0\">(</span> upper pascal matrix<span class=\"br0\">(</span>     5 <span class=\"br0\">)</span><span class=\"sy1\">,</span> 2 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"lower:\"</span><span class=\"sy1\">,</span>     <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw22\">print</span> matrix<span class=\"br0\">(</span> lower pascal matrix<span class=\"br0\">(</span>     5 <span class=\"br0\">)</span><span class=\"sy1\">,</span> 2 <span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw22\">print</span><span class=\"br0\">(</span> <span class=\"br0\">(</span> <span class=\"st0\">\"symmetric:\"</span><span class=\"sy1\">,</span> <span class=\"kw22\">newline</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy1\">;</span> <span class=\"kw22\">print</span> matrix<span class=\"br0\">(</span> symmetric pascal matrix<span class=\"br0\">(</span> 5 <span class=\"br0\">)</span><span class=\"sy1\">,</span> 2 <span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">END</span></pre>"}, {"lang": "ALGOL W", "loc": 66, "block": "<pre class=\"text highlighted_source\">begin<br/>   \u00a0% initialises m to an upper Pascal matrix of size n\u00a0%<br/>   \u00a0% the bounds of m must be at least 1\u00a0:: n, 1\u00a0:: n  \u00a0%<br/>    procedure upperPascalMatrix ( integer array m( *, * )<br/>                               \u00a0; integer value n<br/>                                )\u00a0;<br/>    begin<br/>        for j\u00a0:= 1 until n do m( 1, j )\u00a0:= 1;<br/>        for i\u00a0:= 2 until n do begin<br/>            m( i, 1 )\u00a0:= 0;<br/>            for j\u00a0:= 2 until n do m( i, j )\u00a0:= m( i - 1, j - 1 ) + m( i, j - 1 )<br/>        end for_i<br/>    end upperPascalMatrix\u00a0;<br/>\u00a0<br/>   \u00a0% initialises m to a lower Pascal matrix of size n \u00a0%<br/>   \u00a0% the bounds of m must be at least 1\u00a0:: n, 1\u00a0:: n  \u00a0%<br/>    procedure lowerPascalMatrix ( integer array m( *, * )<br/>                              \u00a0; integer value n<br/>                               )\u00a0;<br/>    begin<br/>        for i\u00a0:= 1 until n do m( i, 1 )\u00a0:= 1;<br/>        for j\u00a0:= 2 until n do begin<br/>            m( 1, j )\u00a0:= 0;<br/>            for i\u00a0:= 2 until n do m( i, j )\u00a0:= m( i - 1, j - 1 ) + m( i - 1, j )<br/>        end for_j<br/>    end lowerPascalMatrix\u00a0;<br/>\u00a0<br/>   \u00a0% initialises m to a symmetric Pascal matrix of size n\u00a0%<br/>   \u00a0% the bounds of m must be at least 1\u00a0:: n, 1\u00a0:: n  \u00a0%<br/>    procedure symmetricPascalMatrix ( integer array m( *, * )<br/>                                   \u00a0; integer value n<br/>                                    )\u00a0;<br/>    begin<br/>        for i\u00a0:= 1 until n do begin<br/>            m( i, 1 )\u00a0:= 1;<br/>            m( 1, i )\u00a0:= 1<br/>        end for_i;<br/>        for j\u00a0:= 2 until n do for i\u00a0:= 2 until n do m( i, j )\u00a0:= m( i, j - 1 ) + m( i - 1, j )<br/>    end symmetricPascalMatrix\u00a0;<br/>\u00a0<br/>    begin\u00a0% test the pascal matrix procedures\u00a0%<br/>\u00a0<br/>       \u00a0% print the matrix m with the specified field width\u00a0%<br/>       \u00a0% the bounds of m must be at least 1\u00a0:: n, 1\u00a0:: n  \u00a0%<br/>        procedure printMatrix ( integer array m( *, * )<br/>                             \u00a0; integer value n<br/>                             \u00a0; integer value fieldWidth<br/>                              )\u00a0;<br/>        begin<br/>            for i\u00a0:= 1 until n do begin<br/>                write(                         i_w\u00a0:= fieldWidth, s_w\u00a0:= 0, \" \", m( i, 1 ) );<br/>                for j\u00a0:= 2 until n do writeon( i_w\u00a0:= fieldWidth, s_w\u00a0:= 0, \" \", m( i, j ) )<br/>            end for_i<br/>        end printMatrix\u00a0;<br/>\u00a0<br/>        integer array m( 1\u00a0:: 10, 1\u00a0:: 10 );<br/>        integer n, w;<br/>\u00a0<br/>        n\u00a0:= 5; w\u00a0:= 2;<br/>        upperPascalMatrix(     m, n ); write( \"upper:\"     ); printMatrix( m, n, w );<br/>        lowerPascalMatrix(     m, n ); write( \"lower:\"     ); printMatrix( m, n, w );<br/>        symmetricPascalMatrix( m, n ); write( \"symmetric:\" ); printMatrix( m, n, w )<br/>\u00a0<br/>    end<br/>\u00a0<br/>end.</pre>"}, {"lang": "AppleScript", "loc": 336, "block": "<pre class=\"applescript highlighted_source\"><span class=\"co1\">-- PASCAL MATRIX -------------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- pascalMatrix\u00a0:: ((Int, Int) -&gt; (Int, Int)) -&gt; Int -&gt; [[Int]]</span><br/><span class=\"kw3\">on</span> pascalMatrix<span class=\"br0\">(</span>f, n<span class=\"br0\">)</span><br/>    chunksOf<span class=\"br0\">(</span>n, map<span class=\"br0\">(</span>compose<span class=\"br0\">(</span><span class=\"kw3\">my</span> bc, f<span class=\"br0\">)</span>, range<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">}</span>, <span class=\"br0\">{</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> pascalMatrix<br/>\u00a0<br/><span class=\"co1\">-- Binomial coefficient</span><br/><span class=\"co1\">-- bc\u00a0:: (Int, Int) -&gt; Int</span><br/><span class=\"kw3\">on</span> bc<span class=\"br0\">(</span>nk<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>n, k<span class=\"br0\">}</span> <span class=\"kw3\">to</span> nk<br/>    <span class=\"kw3\">script</span> bc_<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a, x<span class=\"br0\">)</span><br/>            floor<span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> x<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    foldl<span class=\"br0\">(</span>bc_, <span class=\"nu0\">1</span>, enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span>, k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> bc<br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- TEST ----------------------------------------------------------------------</span><br/><span class=\"kw3\">on</span> <span class=\"kw1\">run</span><br/>    <span class=\"kw3\">set</span> matrixSize <span class=\"kw3\">to</span> <span class=\"nu0\">5</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> symm<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>ab<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> <span class=\"br0\">{</span>a, b<span class=\"br0\">}</span> <span class=\"kw3\">to</span> ab<br/>            <span class=\"br0\">{</span>a <span class=\"sy0\">+</span> b, a<span class=\"br0\">}</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    <span class=\"kw3\">script</span> format<br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>s, xs<span class=\"br0\">)</span><br/>            unlines<span class=\"br0\">(</span>concat<span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"br0\">{</span>s<span class=\"br0\">}</span>, map<span class=\"br0\">(</span><span class=\"kw3\">my</span> show, xs<span class=\"br0\">)</span>, <span class=\"br0\">{</span><span class=\"st0\">\"\"</span><span class=\"br0\">}</span><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>    unlines<span class=\"br0\">(</span>zipWith<span class=\"br0\">(</span>format, \u00ac<br/>        <span class=\"br0\">{</span><span class=\"st0\">\"Lower\"</span>, <span class=\"st0\">\"Upper\"</span>, <span class=\"st0\">\"Symmetric\"</span><span class=\"br0\">}</span>, \u00ac<br/>        |<span class=\"sy0\">&lt;*</span>&gt;|<span class=\"br0\">(</span>map<span class=\"br0\">(</span>curry<span class=\"br0\">(</span>pascalMatrix<span class=\"br0\">)</span>, <span class=\"br0\">[</span>|<span class=\"kw1\">id</span>|, swap, symm<span class=\"br0\">]</span><span class=\"br0\">)</span>, <span class=\"br0\">{</span>matrixSize<span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> <span class=\"kw1\">run</span><br/>\u00a0<br/>\u00a0<br/><span class=\"co1\">-- GENERIC FUNCTIONS ---------------------------------------------------------</span><br/>\u00a0<br/><span class=\"co1\">-- A list of functions applied to a list of arguments</span><br/><span class=\"co1\">-- (&lt;*&gt; | ap)\u00a0:: [(a -&gt; b)] -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> |<span class=\"sy0\">&lt;*</span>&gt;|<span class=\"br0\">(</span>fs, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>nf, nx<span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span>length <span class=\"kw3\">of</span> fs, length <span class=\"kw3\">of</span> xs<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> nf<br/>        <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> fs<span class=\"br0\">)</span><br/>            <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> j <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> nx<br/>                <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> acc <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">contents</span> <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> j <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> acc<br/><span class=\"kw3\">end</span> |<span class=\"sy0\">&lt;*</span>&gt;|<br/>\u00a0<br/><span class=\"co1\">-- chunksOf\u00a0:: Int -&gt; [a] -&gt; [[a]]</span><br/><span class=\"kw3\">on</span> chunksOf<span class=\"br0\">(</span>k, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> go<span class=\"br0\">(</span>ys<span class=\"br0\">)</span><br/>            <span class=\"kw3\">set</span> <span class=\"br0\">{</span>a, b<span class=\"br0\">}</span> <span class=\"kw3\">to</span> splitAt<span class=\"br0\">(</span>k, ys<span class=\"br0\">)</span><br/>            <span class=\"kw3\">if</span> isNull<span class=\"br0\">(</span>a<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>                <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>            <span class=\"kw3\">else</span><br/>                <span class=\"br0\">{</span>a<span class=\"br0\">}</span> <span class=\"sy0\">&amp;</span> go<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>        <span class=\"kw3\">end</span> go<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw1\">result</span><span class=\"co2\">'</span>s go<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> chunksOf<br/>\u00a0<br/><span class=\"co1\">-- compose\u00a0:: (b -&gt; c) -&gt; (a -&gt; b) -&gt; (a -&gt; c)</span><br/><span class=\"kw3\">on</span> compose<span class=\"br0\">(</span>f, g<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"co3\">'s |\u03bb|(mReturn(g)'</span>s |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> compose<br/>\u00a0<br/><span class=\"co1\">-- concat\u00a0:: [[a]] -&gt; [a] | [String] -&gt; String</span><br/><span class=\"kw3\">on</span> concat<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> length <span class=\"kw3\">of</span> xs &gt; <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> class <span class=\"kw3\">of</span> <span class=\"br0\">(</span><span class=\"kw1\">item</span> <span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<span class=\"br0\">)</span> <span class=\"kw3\">is</span> <span class=\"kw1\">string</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> acc <span class=\"kw3\">to</span> acc <span class=\"sy0\">&amp;</span> <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    acc<br/><span class=\"kw3\">end</span> concat<br/>\u00a0<br/><span class=\"co1\">-- cons\u00a0:: a -&gt; [a] -&gt; [a]</span><br/><span class=\"kw3\">on</span> cons<span class=\"br0\">(</span>x, xs<span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span>x<span class=\"br0\">}</span> <span class=\"sy0\">&amp;</span> xs<br/><span class=\"kw3\">end</span> cons<br/>\u00a0<br/><span class=\"co1\">-- curry\u00a0:: (Script|Handler) -&gt; Script</span><br/><span class=\"kw3\">on</span> curry<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>b<span class=\"br0\">)</span><br/>                    |\u03bb|<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span> <span class=\"kw3\">of</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/><span class=\"kw3\">end</span> curry<br/>\u00a0<br/><span class=\"co1\">-- enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/><span class=\"kw3\">on</span> enumFromTo<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> m <span class=\"kw3\">to</span> n<br/>        <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> i<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>    <span class=\"kw3\">return</span> lst<br/><span class=\"kw3\">end</span> enumFromTo<br/>\u00a0<br/><span class=\"co1\">-- floor\u00a0:: Num -&gt; Int</span><br/><span class=\"kw3\">on</span> floor<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> x <span class=\"sy0\">&lt;</span> <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> x <span class=\"kw2\">mod</span> <span class=\"nu0\">1</span> <span class=\"kw3\">is</span> <span class=\"kw2\">not</span> <span class=\"nu0\">0</span> <span class=\"kw3\">then</span><br/>        <span class=\"br0\">(</span>x <span class=\"kw2\">div</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"br0\">(</span>x <span class=\"kw2\">div</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> floor<br/>\u00a0<br/><span class=\"co1\">-- foldl\u00a0:: (a -&gt; b -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldl<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span>v, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldl<br/>\u00a0<br/><span class=\"co1\">-- foldr\u00a0:: (b -&gt; a -&gt; a) -&gt; a -&gt; [b] -&gt; a</span><br/><span class=\"kw3\">on</span> foldr<span class=\"br0\">(</span>f, startValue, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> startValue<br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> lng <span class=\"kw3\">to</span> <span class=\"nu0\">1</span> <span class=\"kw1\">by</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><br/>            <span class=\"kw3\">set</span> v <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, v, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> v<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> foldr<br/>\u00a0<br/><span class=\"co1\">-- id\u00a0:: a -&gt; a</span><br/><span class=\"kw3\">on</span> |<span class=\"kw1\">id</span>|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>    x<br/><span class=\"kw3\">end</span> |<span class=\"kw1\">id</span>|<br/>\u00a0<br/><span class=\"co1\">-- intercalate\u00a0:: Text -&gt; [Text] -&gt; Text</span><br/><span class=\"kw3\">on</span> intercalate<span class=\"br0\">(</span>strText, lstText<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>dlm, <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span><span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span>, strText<span class=\"br0\">}</span><br/>    <span class=\"kw3\">set</span> strJoined <span class=\"kw3\">to</span> lstText <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">set</span> <span class=\"kw3\">my</span> <span class=\"kw1\">text</span> <span class=\"kw1\">item</span> <span class=\"kw1\">delimiters</span> <span class=\"kw3\">to</span> dlm<br/>    <span class=\"kw3\">return</span> strJoined<br/><span class=\"kw3\">end</span> intercalate<br/>\u00a0<br/><span class=\"co1\">-- isNull\u00a0:: [a] -&gt; Bool</span><br/><span class=\"kw3\">on</span> isNull<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> xs <span class=\"kw3\">is</span> <span class=\"kw1\">string</span> <span class=\"kw3\">then</span><br/>        xs <span class=\"sy0\">=</span> <span class=\"st0\">\"\"</span><br/>    <span class=\"kw3\">else</span><br/>        xs <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> isNull<br/>\u00a0<br/><span class=\"co1\">-- map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/><span class=\"kw3\">on</span> map<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>        <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, i, xs<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> map<br/>\u00a0<br/><span class=\"co1\">-- min\u00a0:: Ord a =&gt; a -&gt; a -&gt; a</span><br/><span class=\"kw3\">on</span> min<span class=\"br0\">(</span>x, y<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> y <span class=\"sy0\">&lt;</span> x <span class=\"kw3\">then</span><br/>        y<br/>    <span class=\"kw3\">else</span><br/>        x<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> min<br/>\u00a0<br/><span class=\"co1\">-- Lift 2nd class handler function into 1st class script wrapper </span><br/><span class=\"co1\">-- mReturn\u00a0:: Handler -&gt; Script</span><br/><span class=\"kw3\">on</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> f <span class=\"kw3\">is</span> <span class=\"kw3\">script</span> <span class=\"kw3\">then</span><br/>        f<br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">script</span><br/>            <span class=\"kw3\">property</span> |\u03bb|\u00a0: f<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> mReturn<br/>\u00a0<br/><span class=\"co1\">-- quot\u00a0:: Int -&gt; Int -&gt; Int</span><br/><span class=\"kw3\">on</span> quot<span class=\"br0\">(</span>m, n<span class=\"br0\">)</span><br/>    m <span class=\"kw2\">div</span> n<br/><span class=\"kw3\">end</span> quot<br/>\u00a0<br/><span class=\"co1\">-- range\u00a0:: Ix a =&gt; (a, a) -&gt; [a]</span><br/><span class=\"kw3\">on</span> range<span class=\"br0\">(</span><span class=\"br0\">{</span>a, b<span class=\"br0\">}</span><span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> a <span class=\"kw3\">is</span> <span class=\"kw1\">list</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">set</span> <span class=\"br0\">{</span>xs, ys<span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span>a, b<span class=\"br0\">}</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">set</span> <span class=\"br0\">{</span>xs, ys<span class=\"br0\">}</span> <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">{</span>a<span class=\"br0\">}</span>, <span class=\"br0\">{</span>b<span class=\"br0\">}</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> length <span class=\"kw3\">of</span> xs<br/>\u00a0<br/>    <span class=\"kw3\">if</span> lng <span class=\"sy0\">=</span> length <span class=\"kw3\">of</span> ys <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">if</span> lng &gt; <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>            <span class=\"kw3\">script</span><br/>                <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>_, i<span class=\"br0\">)</span><br/>                    enumFromTo<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> ys<span class=\"br0\">)</span><br/>                <span class=\"kw3\">end</span> |\u03bb|<br/>            <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>            sequence<span class=\"br0\">(</span>map<span class=\"br0\">(</span><span class=\"kw1\">result</span>, xs<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">else</span><br/>            enumFromTo<span class=\"br0\">(</span>a, b<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> range<br/>\u00a0<br/><span class=\"co1\">-- sequence\u00a0:: Monad m =&gt; [m a] -&gt; m [a]</span><br/><span class=\"co1\">-- sequence\u00a0:: [a] -&gt; [[a]]</span><br/><span class=\"kw3\">on</span> sequence<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    traverse<span class=\"br0\">(</span>|<span class=\"kw1\">id</span>|, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> sequence<br/>\u00a0<br/><span class=\"co1\">-- show\u00a0:: a -&gt; String</span><br/><span class=\"kw3\">on</span> show<span class=\"br0\">(</span>e<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> c <span class=\"kw3\">to</span> class <span class=\"kw3\">of</span> e<br/>    <span class=\"kw3\">if</span> c <span class=\"sy0\">=</span> <span class=\"kw1\">list</span> <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">script</span> serialized<br/>            <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>                show<span class=\"br0\">(</span>v<span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> |\u03bb|<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>        <span class=\"st0\">\"[\"</span> <span class=\"sy0\">&amp;</span> intercalate<span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, map<span class=\"br0\">(</span>serialized, e<span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"]\"</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> c <span class=\"sy0\">=</span> record <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">script</span> showField<br/>            <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>kv<span class=\"br0\">)</span><br/>                <span class=\"kw3\">set</span> <span class=\"br0\">{</span>k, ev<span class=\"br0\">}</span> <span class=\"kw3\">to</span> kv<br/>                <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span> <span class=\"sy0\">&amp;</span> k <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<span class=\"es0\">\\\"</span>:\"</span> <span class=\"sy0\">&amp;</span> show<span class=\"br0\">(</span>ev<span class=\"br0\">)</span><br/>            <span class=\"kw3\">end</span> |\u03bb|<br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>\u00a0<br/>        <span class=\"st0\">\"{\"</span> <span class=\"sy0\">&amp;</span> intercalate<span class=\"br0\">(</span><span class=\"st0\">\", \"</span>, \u00ac<br/>            map<span class=\"br0\">(</span>showField, zip<span class=\"br0\">(</span>allKeys<span class=\"br0\">(</span>e<span class=\"br0\">)</span>, allValues<span class=\"br0\">(</span>e<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"}\"</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> c <span class=\"sy0\">=</span> date <span class=\"kw3\">then</span><br/>        <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span> <span class=\"sy0\">&amp;</span> iso8601Z<span class=\"br0\">(</span>e<span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> c <span class=\"sy0\">=</span> <span class=\"kw1\">text</span> <span class=\"kw3\">then</span><br/>        <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span> <span class=\"sy0\">&amp;</span> e <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"<span class=\"es0\">\\\"</span>\"</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> <span class=\"br0\">(</span>c <span class=\"sy0\">=</span> <span class=\"kw1\">integer</span> <span class=\"kw2\">or</span> c <span class=\"sy0\">=</span> real<span class=\"br0\">)</span> <span class=\"kw3\">then</span><br/>        e <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>    <span class=\"kw3\">else</span> <span class=\"kw3\">if</span> c <span class=\"sy0\">=</span> class <span class=\"kw3\">then</span><br/>        <span class=\"st0\">\"null\"</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">try</span><br/>            e <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><br/>        <span class=\"kw3\">on</span> <span class=\"kw3\">error</span><br/>            <span class=\"br0\">(</span><span class=\"st0\">\"\u00ab\"</span> <span class=\"sy0\">&amp;</span> c <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><span class=\"br0\">)</span> <span class=\"sy0\">&amp;</span> <span class=\"st0\">\"\u00bb\"</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">try</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> show<br/>\u00a0<br/><span class=\"co1\">-- splitAt\u00a0:: Int -&gt; [a] -&gt; ([a],[a])</span><br/><span class=\"kw3\">on</span> splitAt<span class=\"br0\">(</span>n, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">if</span> n &gt; <span class=\"nu0\">0</span> <span class=\"kw2\">and</span> n <span class=\"sy0\">&lt;</span> length <span class=\"kw3\">of</span> xs <span class=\"kw3\">then</span><br/>        <span class=\"kw3\">if</span> class <span class=\"kw3\">of</span> xs <span class=\"kw3\">is</span> <span class=\"kw1\">text</span> <span class=\"kw3\">then</span><br/>            <span class=\"br0\">{</span><span class=\"kw1\">items</span> <span class=\"nu0\">1</span> <span class=\"kw2\">thru</span> n <span class=\"kw3\">of</span> xs <span class=\"kw2\">as</span> <span class=\"kw1\">text</span>, <span class=\"kw1\">items</span> <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs <span class=\"kw2\">as</span> <span class=\"kw1\">text</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">else</span><br/>            <span class=\"br0\">{</span><span class=\"kw1\">items</span> <span class=\"nu0\">1</span> <span class=\"kw2\">thru</span> n <span class=\"kw3\">of</span> xs, <span class=\"kw1\">items</span> <span class=\"br0\">(</span>n <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw2\">thru</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span> <span class=\"kw3\">of</span> xs<span class=\"br0\">}</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">else</span><br/>        <span class=\"kw3\">if</span> n <span class=\"sy0\">&lt;</span> <span class=\"nu0\">1</span> <span class=\"kw3\">then</span><br/>            <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span>, xs<span class=\"br0\">}</span><br/>        <span class=\"kw3\">else</span><br/>            <span class=\"br0\">{</span>xs, <span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">if</span><br/><span class=\"kw3\">end</span> splitAt<br/>\u00a0<br/><span class=\"co1\">-- swap\u00a0:: (a, b) -&gt; (b, a)</span><br/><span class=\"kw3\">on</span> swap<span class=\"br0\">(</span>ab<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> <span class=\"br0\">{</span>a, b<span class=\"br0\">}</span> <span class=\"kw3\">to</span> ab<br/>    <span class=\"br0\">{</span>b, a<span class=\"br0\">}</span><br/><span class=\"kw3\">end</span> swap<br/>\u00a0<br/><span class=\"co1\">-- traverse\u00a0:: (a -&gt; [b]) -&gt; [a] -&gt; [[b]]</span><br/><span class=\"kw3\">on</span> traverse<span class=\"br0\">(</span>f, xs<span class=\"br0\">)</span><br/>    <span class=\"kw3\">script</span><br/>        <span class=\"kw3\">property</span> mf\u00a0: mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">on</span> |\u03bb|<span class=\"br0\">(</span>x, a<span class=\"br0\">)</span><br/>            |<span class=\"sy0\">&lt;*</span>&gt;|<span class=\"br0\">(</span>map<span class=\"br0\">(</span>curry<span class=\"br0\">(</span>cons<span class=\"br0\">)</span>, mf<span class=\"co2\">'</span>s |\u03bb|<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span>, a<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> |\u03bb|<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">script</span><br/>    foldr<span class=\"br0\">(</span><span class=\"kw1\">result</span>, <span class=\"br0\">{</span><span class=\"br0\">{</span><span class=\"br0\">}</span><span class=\"br0\">}</span>, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> traverse<br/>\u00a0<br/><span class=\"co1\">-- unlines\u00a0:: [String] -&gt; String</span><br/><span class=\"kw3\">on</span> unlines<span class=\"br0\">(</span>xs<span class=\"br0\">)</span><br/>    intercalate<span class=\"br0\">(</span>linefeed, xs<span class=\"br0\">)</span><br/><span class=\"kw3\">end</span> unlines<br/>\u00a0<br/><span class=\"co1\">-- zipWith\u00a0:: (a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]</span><br/><span class=\"kw3\">on</span> zipWith<span class=\"br0\">(</span>f, xs, ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lng <span class=\"kw3\">to</span> min<span class=\"br0\">(</span>length <span class=\"kw3\">of</span> xs, length <span class=\"kw3\">of</span> ys<span class=\"br0\">)</span><br/>    <span class=\"kw3\">set</span> lst <span class=\"kw3\">to</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw3\">tell</span> mReturn<span class=\"br0\">(</span>f<span class=\"br0\">)</span><br/>        <span class=\"kw3\">repeat</span> <span class=\"kw3\">with</span> i <span class=\"kw3\">from</span> <span class=\"nu0\">1</span> <span class=\"kw3\">to</span> lng<br/>            <span class=\"kw3\">set</span> <span class=\"kw3\">end</span> <span class=\"kw3\">of</span> lst <span class=\"kw3\">to</span> |\u03bb|<span class=\"br0\">(</span><span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> xs, <span class=\"kw1\">item</span> i <span class=\"kw3\">of</span> ys<span class=\"br0\">)</span><br/>        <span class=\"kw3\">end</span> <span class=\"kw3\">repeat</span><br/>        <span class=\"kw3\">return</span> lst<br/>    <span class=\"kw3\">end</span> <span class=\"kw3\">tell</span><br/><span class=\"kw3\">end</span> zipWith</pre>"}, {"lang": "C", "loc": 75, "block": "<pre class=\"c highlighted_source\">\u00a0<br/><span class=\"co2\">#include &lt;stdio.h&gt;</span><br/><span class=\"co2\">#include &lt;stdlib.h&gt;</span><br/>\u00a0<br/><span class=\"kw4\">void</span> pascal_low<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">**</span>mat<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>j<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> j<span class=\"br0\">)</span><br/>                mat<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> j <span class=\"sy0\">||</span> j <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                mat<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                mat<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> mat<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> mat<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> pascal_upp<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">**</span>mat<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>j<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> j<span class=\"br0\">)</span><br/>                mat<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> j <span class=\"sy0\">||</span> i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                mat<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                mat<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> mat<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> mat<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> pascal_sym<span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">**</span>mat<span class=\"sy0\">,</span> <span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>j<span class=\"br0\">)</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> <span class=\"sy0\">||</span> j <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>                mat<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">else</span><br/>                mat<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> mat<span class=\"br0\">[</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">+</span> mat<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"kw4\">int</span> argc<span class=\"sy0\">,</span> <span class=\"kw4\">char</span> <span class=\"sy0\">*</span> argv<span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">int</span> <span class=\"sy0\">**</span>mat<span class=\"sy0\">;</span><br/>    <span class=\"kw4\">int</span> i<span class=\"sy0\">,</span> j<span class=\"sy0\">,</span> n<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Input size of the matrix */</span><br/>    n <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Matrix allocation */</span><br/>    mat <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span> <span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> <span class=\"sy0\">++</span>i<span class=\"br0\">)</span><br/>        mat<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/calloc.html\"><span class=\"kw3\">calloc</span></a><span class=\"br0\">(</span>n<span class=\"sy0\">,</span> <span class=\"kw4\">sizeof</span><span class=\"br0\">(</span><span class=\"kw4\">int</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"coMULTI\">/* Matrix computation */</span><br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"=== Pascal upper matrix ===<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    pascal_upp<span class=\"br0\">(</span>mat<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%4d%c\"</span><span class=\"sy0\">,</span> mat<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> j <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">' '</span> <span class=\"sy0\">:</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"=== Pascal lower matrix ===<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    pascal_low<span class=\"br0\">(</span>mat<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%4d%c\"</span><span class=\"sy0\">,</span> mat<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> j <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">' '</span> <span class=\"sy0\">:</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"=== Pascal symmetric matrix ===<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    pascal_sym<span class=\"br0\">(</span>mat<span class=\"sy0\">,</span> n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>i <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>j <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span> n<span class=\"sy0\">;</span> j<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            <a href=\"http://www.opengroup.org/onlinepubs/009695399/functions/printf.html\"><span class=\"kw3\">printf</span></a><span class=\"br0\">(</span><span class=\"st0\">\"%4d%c\"</span><span class=\"sy0\">,</span> mat<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"sy0\">,</span> j <span class=\"sy0\">&lt;</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"st0\">' '</span> <span class=\"sy0\">:</span> <span class=\"st0\">'<span class=\"es1\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "C++", "loc": 58, "block": "<pre class=\"cpp highlighted_source\"><span class=\"co2\">#include &lt;iostream&gt;</span><br/><span class=\"co2\">#include &lt;vector&gt;</span><br/>\u00a0<br/><span class=\"kw4\">typedef</span> std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;&gt;</span> vv<span class=\"sy4\">;</span><br/>\u00a0<br/>vv pascal_upper<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    vv matrix<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy1\">&gt;</span> j<span class=\"br0\">)</span> matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy1\">==</span> j <span class=\"sy3\">||</span> i <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>                <span class=\"kw1\">else</span> matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>matrix<span class=\"br0\">[</span>i <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy2\">+</span> matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"br0\">}</span><br/>        <span class=\"br0\">}</span><br/>        <span class=\"kw1\">return</span> matrix<span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>vv pascal_lower<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    vv matrix<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy1\">&lt;</span> j<span class=\"br0\">)</span> matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">else</span> <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy1\">==</span> j <span class=\"sy3\">||</span> j <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">else</span> matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>matrix<span class=\"br0\">[</span>i <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy2\">+</span> matrix<span class=\"br0\">[</span>i <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> matrix<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>vv pascal_symmetric<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    vv matrix<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> i <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>i<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> j <span class=\"sy1\">=</span> <span class=\"nu0\">0</span><span class=\"sy4\">;</span> j <span class=\"sy1\">&lt;</span> n<span class=\"sy4\">;</span> <span class=\"sy2\">++</span>j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">if</span> <span class=\"br0\">(</span>i <span class=\"sy1\">==</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> j <span class=\"sy1\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>            <span class=\"kw1\">else</span> matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">push_back</span><span class=\"br0\">(</span>matrix<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy2\">+</span> matrix<span class=\"br0\">[</span>i <span class=\"sy2\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">return</span> matrix<span class=\"sy4\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw4\">void</span> print_matrix<span class=\"br0\">(</span>vv matrix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">for</span> <span class=\"br0\">(</span>std<span class=\"sy4\">::</span><span class=\"me2\">vector</span><span class=\"sy1\">&lt;</span><span class=\"kw4\">int</span><span class=\"sy1\">&gt;</span> v<span class=\"sy4\">:</span> matrix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i<span class=\"sy4\">:</span> v<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\" \"</span> <span class=\"sy1\">&lt;&lt;</span> i<span class=\"sy4\">;</span><br/>        <span class=\"br0\">}</span><br/>        std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">int</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"PASCAL UPPER MATRIX\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    print_matrix<span class=\"br0\">(</span>pascal_upper<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"PASCAL LOWER MATRIX\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    print_matrix<span class=\"br0\">(</span>pascal_lower<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/>    std<span class=\"sy4\">::</span><span class=\"kw3\">cout</span> <span class=\"sy1\">&lt;&lt;</span> <span class=\"st0\">\"PASCAL SYMMETRIC MATRIX\"</span> <span class=\"sy1\">&lt;&lt;</span> std<span class=\"sy4\">::</span><span class=\"me2\">endl</span><span class=\"sy4\">;</span><br/>    print_matrix<span class=\"br0\">(</span>pascal_symmetric<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy4\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Common Lisp", "loc": 65, "block": "<pre class=\"lisp highlighted_source\"><span class=\"br0\">(</span><span class=\"kw1\">defun</span> pascal-lower <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span>a <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> n n<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i n<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> a i <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span> a<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>j <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> a <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">aref</span> a i j<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">aref</span> a i <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> pascal-upper <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span>a <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> n n<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i n<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> a <span class=\"nu0\">0</span> i<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span> a<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>j <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> a <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ j<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">aref</span> a j i<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">aref</span> a <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ j<span class=\"br0\">)</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> pascal-symmetric <span class=\"br0\">(</span>n <span class=\"sy0\">&amp;</span>aux <span class=\"br0\">(</span>a <span class=\"br0\">(</span>make-<span class=\"kw1\">array</span> <span class=\"br0\">(</span><span class=\"kw1\">list</span> n n<span class=\"br0\">)</span> <span class=\"sy0\">:</span><span class=\"me1\">initial-element</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i n<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> a i <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"nu0\">1</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> a <span class=\"nu0\">0</span> i<span class=\"br0\">)</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span> a<span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>j <span class=\"br0\">(</span><span class=\"nu0\">1</span>- n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">setf</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> a <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span>+ <span class=\"br0\">(</span><span class=\"kw1\">aref</span> a <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ i<span class=\"br0\">)</span> j<span class=\"br0\">)</span><br/>                   <span class=\"br0\">(</span><span class=\"kw1\">aref</span> a i <span class=\"br0\">(</span><span class=\"nu0\">1</span>+ j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>? <span class=\"br0\">(</span>pascal-lower <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>#2A<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">3</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>? <span class=\"br0\">(</span>pascal-upper <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>#2A<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>? <span class=\"br0\">(</span>pascal-symmetric <span class=\"nu0\">4</span><span class=\"br0\">)</span><br/>#2A<span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">6</span> <span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">10</span> <span class=\"nu0\">20</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">;In case one really insists in printing the array row by row:</span><br/>\u00a0<br/><span class=\"br0\">(</span><span class=\"kw1\">defun</span> print-matrix <span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    <span class=\"br0\">(</span><span class=\"kw1\">let</span> <span class=\"br0\">(</span><span class=\"br0\">(</span>p <span class=\"br0\">(</span>array-dimension a <span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>          <span class=\"br0\">(</span>q <span class=\"br0\">(</span>array-dimension a <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>i p<span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span><span class=\"kw1\">dotimes</span> <span class=\"br0\">(</span>j q<span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">princ</span> <span class=\"br0\">(</span><span class=\"kw1\">aref</span> a i j<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>                <span class=\"br0\">(</span><span class=\"kw1\">princ</span> #\\Space<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">(</span>terpri<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>\u00a0<br/>? <span class=\"br0\">(</span>print-matrix <span class=\"br0\">(</span>pascal-lower <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">3</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">6</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>? <span class=\"br0\">(</span>print-matrix <span class=\"br0\">(</span>pascal-upper <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">6</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">4</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>? <span class=\"br0\">(</span>print-matrix <span class=\"br0\">(</span>pascal-symmetric <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span> <span class=\"nu0\">5</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">6</span> <span class=\"nu0\">10</span> <span class=\"nu0\">15</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">10</span> <span class=\"nu0\">20</span> <span class=\"nu0\">35</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">15</span> <span class=\"nu0\">35</span> <span class=\"nu0\">70</span></pre>"}, {"lang": "D", "loc": 27, "block": "<pre class=\"d highlighted_source\"><span class=\"kw2\">import</span> std.<span class=\"me1\">stdio</span><span class=\"sy0\">,</span> std.<span class=\"me1\">bigint</span><span class=\"sy0\">,</span> std.<span class=\"me1\">range</span><span class=\"sy0\">,</span> std.<span class=\"me1\">algorithm</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> binomialCoeff<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"sy0\">,</span> <span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> k<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    BigInt result <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">foreach</span> <span class=\"br0\">(</span><span class=\"kw4\">immutable</span> i<span class=\"sy0\">;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span> <span class=\"me1\">k</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        result <span class=\"sy0\">=</span> result <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> i<span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> pascalUpp<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> n.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> n.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>j <span class=\"sy0\">=&gt;</span> binomialCoeff<span class=\"br0\">(</span>j<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> pascalLow<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> n.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> n.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>j <span class=\"sy0\">=&gt;</span> binomialCoeff<span class=\"br0\">(</span>i<span class=\"sy0\">,</span> j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">auto</span> pascalSym<span class=\"br0\">(</span><span class=\"kw2\">in</span> <span class=\"kw4\">uint</span> n<span class=\"br0\">)</span> <span class=\"kw4\">pure</span> <span class=\"kw4\">nothrow</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">return</span> n.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>i <span class=\"sy0\">=&gt;</span> n.<span class=\"me1\">iota</span>.<span class=\"me1\">map</span><span class=\"sy0\">!</span><span class=\"br0\">(</span>j <span class=\"sy0\">=&gt;</span> binomialCoeff<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> j<span class=\"sy0\">,</span> i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw4\">void</span> main<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw4\">enum</span> n <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"Upper:<span class=\"es1\">\\n</span>%(%(%2d\u00a0%)<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> pascalUpp<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Lower:<span class=\"es1\">\\n</span>%(%(%2d\u00a0%)<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> pascalLow<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    writefln<span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es1\">\\n</span>Symmetric:<span class=\"es1\">\\n</span>%(%(%2d\u00a0%)<span class=\"es1\">\\n</span>%)\"</span><span class=\"sy0\">,</span> pascalSym<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Elixir", "loc": 46, "block": "<pre class=\"text highlighted_source\">defmodule Pascal do<br/>  defp ij(n), do: for i &lt;- 1..n, j &lt;- 1..n, do: {i,j}<br/>\u00a0<br/>  def upper_triangle(n) do<br/>    Enum.reduce(ij(n), Map.new, fn {i,j},acc -&gt;<br/>      val = cond do<br/>              i==1 -&gt; 1<br/>              j&lt;i  -&gt; 0<br/>              true -&gt; Map.get(acc, {i-1, j-1}) + Map.get(acc, {i, j-1})<br/>            end<br/>      Map.put(acc, {i,j}, val)<br/>    end) |&gt; print(1..n)<br/>  end<br/>\u00a0<br/>  def lower_triangle(n) do<br/>    Enum.reduce(ij(n), Map.new, fn {i,j},acc -&gt;<br/>      val = cond do<br/>              j==1 -&gt; 1<br/>              i&lt;j  -&gt; 0<br/>              true -&gt; Map.get(acc, {i-1, j-1}) + Map.get(acc, {i-1, j})<br/>            end<br/>      Map.put(acc, {i,j}, val)<br/>    end) |&gt; print(1..n)<br/>  end<br/>\u00a0<br/>  def symmetic_triangle(n) do<br/>    Enum.reduce(ij(n), Map.new, fn {i,j},acc -&gt;<br/>      val = if i==1 or j==1, do: 1,<br/>                           else: Map.get(acc, {i-1, j}) + Map.get(acc, {i, j-1})<br/>      Map.put(acc, {i,j}, val)<br/>    end) |&gt; print(1..n)<br/>  end<br/>\u00a0<br/>  def print(matrix, range) do<br/>    Enum.each(range, fn i -&gt;<br/>      Enum.map(range, fn j -&gt; Map.get(matrix, {i,j}) end) |&gt; IO.inspect<br/>    end)<br/>  end<br/>end<br/>\u00a0<br/>IO.puts \"Pascal upper-triangular matrix:\"<br/>Pascal.upper_triangle(5)<br/>IO.puts \"Pascal lower-triangular matrix:\"<br/>Pascal.lower_triangle(5)<br/>IO.puts \"Pascal symmetric matrix:\"<br/>Pascal.symmetic_triangle(5)</pre>"}, {"lang": "Fortran", "loc": 78, "block": "<pre class=\"fortran highlighted_source\"><span class=\"kw1\">module</span> pascal<br/>\u00a0<br/><span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>\u00a0<br/><span class=\"co1\">contains</span><br/>    <span class=\"kw1\">function</span> pascal_lower<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>        <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span>, i, j<br/>        <span class=\"kw3\">integer</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>, <span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>n, n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<br/>            a<span class=\"br0\">(</span>i, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, n<br/>            <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, i<br/>                a<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, j<span class=\"br0\">)</span> <span class=\"sy0\">+</span> a<span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> pascal_upper<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>        <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span>, i, j<br/>        <span class=\"kw3\">integer</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>, <span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>n, n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<br/>            a<span class=\"br0\">(</span><span class=\"nu0\">1</span>, i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, n<br/>            <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, i<br/>                a<span class=\"br0\">(</span>j, i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>j, i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">+</span> a<span class=\"br0\">(</span>j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>    <span class=\"kw1\">function</span> pascal_symmetric<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"kw3\">result</span><span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>        <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span>, i, j<br/>        <span class=\"kw3\">integer</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>, <span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">allocate</span><span class=\"br0\">(</span>a<span class=\"br0\">(</span>n, n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        a <span class=\"sy0\">=</span> <span class=\"nu0\">0</span><br/>        <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<br/>            a<span class=\"br0\">(</span>i, <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>            a<span class=\"br0\">(</span><span class=\"nu0\">1</span>, i<span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, n<br/>            <span class=\"kw1\">do</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">2</span>, n<br/>                a<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> a<span class=\"br0\">(</span>i <span class=\"sy0\">-</span> <span class=\"nu0\">1</span>, j<span class=\"br0\">)</span> <span class=\"sy0\">+</span> a<span class=\"br0\">(</span>i, j <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">function</span><br/>\u00a0<br/>    <span class=\"kw1\">subroutine</span> print_matrix<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>        <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>, <span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>        <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span>, i<br/>        n <span class=\"sy0\">=</span> <span class=\"kw4\">ubound</span><span class=\"br0\">(</span>a, <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">do</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span>, n<br/>            print <span class=\"sy0\">*</span>, a<span class=\"br0\">(</span>i, <span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span> <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">end</span> <span class=\"kw1\">subroutine</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">module</span><br/>\u00a0<br/><span class=\"kw1\">program</span> ex_pascal<br/>    <span class=\"kw3\">use</span> pascal<br/>    <span class=\"kw3\">implicit</span> <span class=\"kw3\">none</span><br/>    <span class=\"kw3\">integer</span> <span class=\"sy0\">::</span> <span class=\"me2\">n</span><br/>    <span class=\"kw3\">integer</span>, <span class=\"kw3\">allocatable</span> <span class=\"sy0\">::</span> <span class=\"me2\">a</span><span class=\"br0\">(</span><span class=\"sy0\">:</span>, <span class=\"sy0\">:</span><span class=\"br0\">)</span><br/>    print <span class=\"sy0\">*</span>, <span class=\"st0\">\"Size?\"</span><br/>    read <span class=\"sy0\">*</span>, n<br/>    print <span class=\"sy0\">*</span>, <span class=\"st0\">\"Lower Pascal Matrix\"</span><br/>    a <span class=\"sy0\">=</span> pascal_lower<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> print_matrix<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    print <span class=\"sy0\">*</span>, <span class=\"st0\">\"Upper Pascal Matrix\"</span><br/>    a <span class=\"sy0\">=</span> pascal_upper<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> print_matrix<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/>    print <span class=\"sy0\">*</span>, <span class=\"st0\">\"Symmetric Pascal Matrix\"</span><br/>    a <span class=\"sy0\">=</span> pascal_symmetric<span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">call</span> print_matrix<span class=\"br0\">(</span>a<span class=\"br0\">)</span><br/><span class=\"kw1\">end</span> <span class=\"kw1\">program</span></pre>"}, {"lang": "Go", "loc": 81, "block": "<pre class=\"go highlighted_source\"><span class=\"kw1\">package</span> main<br/>\u00a0<br/><span class=\"kw1\">import</span> <span class=\"sy1\">(</span><br/>    <span class=\"st0\">\"fmt\"</span><br/>    <span class=\"st0\">\"strings\"</span><br/><span class=\"sy1\">)</span><br/>\u00a0<br/><span class=\"kw4\">func</span> binomial<span class=\"sy1\">(</span>n<span class=\"sy1\">,</span> k <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    <span class=\"kw1\">if</span> n &lt; k <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">0</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">if</span> n <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy3\">||</span> k <span class=\"sy3\">==</span> <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">return</span> <span class=\"nu0\">1</span><br/>    <span class=\"sy1\">}</span><br/>    num <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> k <span class=\"sy3\">+</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        num <span class=\"sy2\">*=</span> <span class=\"nu2\">i</span><br/>    <span class=\"sy1\">}</span><br/>    den <span class=\"sy2\">:=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">2</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt;<span class=\"sy2\">=</span> n<span class=\"sy3\">-</span>k<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        den <span class=\"sy2\">*=</span> <span class=\"nu2\">i</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> num <span class=\"sy3\">/</span> den<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> pascalUpperTriangular<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    m <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        m<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> j &lt; n<span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            m<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> binomial<span class=\"sy1\">(</span>j<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> m<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> pascalLowerTriangular<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    m <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        m<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> j &lt; n<span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            m<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> binomial<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy1\">,</span> j<span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> m<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> pascalSymmetric<span class=\"sy1\">(</span>n <span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span> <span class=\"sy1\">{</span><br/>    m <span class=\"sy2\">:=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([][]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        m<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">]</span> <span class=\"sy2\">=</span> <span class=\"kw3\">make</span><span class=\"sy1\">([]</span><span class=\"kw4\">int</span><span class=\"sy1\">,</span> n<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> j &lt; n<span class=\"sy1\">;</span> j<span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>            m<span class=\"sy1\">[</span><span class=\"nu2\">i</span><span class=\"sy1\">][</span>j<span class=\"sy1\">]</span> <span class=\"sy2\">=</span> binomial<span class=\"sy1\">(</span><span class=\"nu2\">i</span><span class=\"sy3\">+</span>j<span class=\"sy1\">,</span> <span class=\"nu2\">i</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/>    <span class=\"kw1\">return</span> m<br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> printMatrix<span class=\"sy1\">(</span>title <span class=\"kw4\">string</span><span class=\"sy1\">,</span> m <span class=\"sy1\">[][]</span><span class=\"kw4\">int</span><span class=\"sy1\">)</span> <span class=\"sy1\">{</span><br/>    n <span class=\"sy2\">:=</span> <span class=\"kw3\">len</span><span class=\"sy1\">(</span>m<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span>title<span class=\"sy1\">)</span><br/>    fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\"[\"</span><span class=\"sy1\">)</span><br/>    <span class=\"kw1\">for</span> <span class=\"nu2\">i</span> <span class=\"sy2\">:=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span> <span class=\"nu2\">i</span> &lt; n<span class=\"sy1\">;</span> <span class=\"nu2\">i</span><span class=\"sy2\">++</span> <span class=\"sy1\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> &gt; <span class=\"nu0\">0</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span><span class=\"st0\">\" \"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>        mi <span class=\"sy2\">:=</span> strings<span class=\"sy3\">.</span><span class=\"me1\">Replace</span><span class=\"sy1\">(</span>fmt<span class=\"sy3\">.</span><span class=\"me1\">Sprint</span><span class=\"sy1\">(</span>m<span class=\"sy1\">[</span>i<span class=\"sy1\">]),</span> <span class=\"st0\">\" \"</span><span class=\"sy1\">,</span> <span class=\"st0\">\", \"</span><span class=\"sy1\">,</span> <span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">)</span><br/>        fmt<span class=\"sy3\">.</span>Print<span class=\"sy1\">(</span>mi<span class=\"sy1\">)</span><br/>        <span class=\"kw1\">if</span> <span class=\"nu2\">i</span> &lt; n<span class=\"sy3\">-</span><span class=\"nu0\">1</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\",\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span> <span class=\"kw1\">else</span> <span class=\"sy1\">{</span><br/>            fmt<span class=\"sy3\">.</span>Println<span class=\"sy1\">(</span><span class=\"st0\">\"]<span class=\"es1\">\\n</span>\"</span><span class=\"sy1\">)</span><br/>        <span class=\"sy1\">}</span><br/>    <span class=\"sy1\">}</span><br/><span class=\"sy1\">}</span><br/>\u00a0<br/><span class=\"kw4\">func</span> main<span class=\"sy1\">()</span> <span class=\"sy1\">{</span><br/>    printMatrix<span class=\"sy1\">(</span><span class=\"st0\">\"Pascal upper-triangular matrix\"</span><span class=\"sy1\">,</span> pascalUpperTriangular<span class=\"sy1\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">))</span><br/>    printMatrix<span class=\"sy1\">(</span><span class=\"st0\">\"Pascal lower-triangular matrix\"</span><span class=\"sy1\">,</span> pascalLowerTriangular<span class=\"sy1\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">))</span><br/>    printMatrix<span class=\"sy1\">(</span><span class=\"st0\">\"Pascal symmetric matrix\"</span><span class=\"sy1\">,</span> pascalSymmetric<span class=\"sy1\">(</span><span class=\"nu0\">5</span><span class=\"sy1\">))</span><br/><span class=\"sy1\">}</span></pre>"}, {"lang": "Haskell", "loc": 35, "block": "<pre class=\"haskell highlighted_source\"><span class=\"kw1\">import</span> Data<span class=\"sy0\">.</span>List <span class=\"br0\">(</span>transpose<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> System<span class=\"sy0\">.</span>Environment <span class=\"br0\">(</span>getArgs<span class=\"br0\">)</span><br/><span class=\"kw1\">import</span> Text<span class=\"sy0\">.</span>Printf <span class=\"br0\">(</span>printf<span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"co1\">-- Pascal's triangle.</span><br/>pascal <span class=\"sy0\">::</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>pascal <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:iterate\"><span class=\"kw3\">iterate</span></a> <span class=\"br0\">(</span>\\row <span class=\"sy0\">-&gt;</span> <span class=\"nu0\">1</span>\u00a0: <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span><span class=\"sy0\">+</span><span class=\"br0\">)</span> row <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:tail\"><span class=\"kw3\">tail</span></a> row<span class=\"br0\">)</span> <span class=\"sy0\">++</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- The n by n Pascal lower triangular matrix.</span><br/>pascLow <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>pascLow n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith\"><span class=\"kw3\">zipWith</span></a> <span class=\"br0\">(</span>\\row i <span class=\"sy0\">-&gt;</span> row <span class=\"sy0\">++</span> replicate <span class=\"br0\">(</span>n<span class=\"sy0\">-</span>i<span class=\"br0\">)</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> n pascal<span class=\"br0\">)</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy0\">..</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"co1\">-- The n by n Pascal upper triangular matrix.</span><br/>pascUp <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>pascUp <span class=\"sy0\">=</span> transpose <span class=\"sy0\">.</span> pascLow<br/>\u00a0<br/><span class=\"co1\">-- The n by n Pascal symmetric matrix.</span><br/>pascSym <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>pascSym n <span class=\"sy0\">=</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> n <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take\"><span class=\"kw3\">take</span></a> n<span class=\"br0\">)</span> <span class=\"sy0\">.</span> transpose <span class=\"sy0\">$</span> pascal<br/>\u00a0<br/><span class=\"co1\">-- Format and print a matrix.</span><br/>printMat <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String\"><span class=\"kw4\">String</span></a> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int\"><span class=\"kw4\">Int</span></a><span class=\"br0\">]</span><span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>printMat title mat <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">$</span> title <span class=\"sy0\">++</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_\"><span class=\"kw3\">mapM_</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"sy0\">.</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:concatMap\"><span class=\"kw3\">concatMap</span></a> <span class=\"br0\">(</span>printf <span class=\"st0\">\"\u00a0%2d\"</span><span class=\"br0\">)</span><span class=\"br0\">)</span> mat<br/>  <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn\"><span class=\"kw3\">putStrLn</span></a> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><br/>\u00a0<br/>main <span class=\"sy0\">::</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO\"><span class=\"kw4\">IO</span></a> <span class=\"br0\">(</span><span class=\"br0\">)</span><br/>main <span class=\"sy0\">=</span> <span class=\"kw1\">do</span><br/>  ns <span class=\"sy0\">&lt;-</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap\"><span class=\"kw3\">fmap</span></a> <span class=\"br0\">(</span><a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map\"><span class=\"kw3\">map</span></a> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read\"><span class=\"kw3\">read</span></a><span class=\"br0\">)</span> getArgs<br/>  <span class=\"kw1\">case</span> ns <span class=\"kw1\">of</span><br/>    <span class=\"br0\">[</span>n<span class=\"br0\">]</span> <span class=\"sy0\">-&gt;</span> <span class=\"kw1\">do</span> printMat <span class=\"st0\">\"Lower triangular\"</span> <span class=\"sy0\">$</span> pascLow n<br/>              printMat <span class=\"st0\">\"Upper triangular\"</span> <span class=\"sy0\">$</span> pascUp  n<br/>              printMat <span class=\"st0\">\"Symmetric\"</span>        <span class=\"sy0\">$</span> pascSym n<br/>    <span class=\"sy0\">_</span>   <span class=\"sy0\">-&gt;</span> <a href=\"http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:error\"><span class=\"kw3\">error</span></a> <span class=\"st0\">\"Usage: pascmat &lt;number&gt;\"</span></pre>"}, {"lang": "J", "loc": 18, "block": "<pre class=\"j highlighted_source\">  \u00a0!/~ i. <span class=\"nu0\">5</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">1</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">3</span> <span class=\"nu0\">4</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">6</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span> <span class=\"nu0\">4</span><br/><span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">1</span><br/>  \u00a0!~/~ i. <span class=\"nu0\">5</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">2</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">3</span> <span class=\"nu0\">3</span> <span class=\"nu0\">1</span> <span class=\"nu0\">0</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">6</span> <span class=\"nu0\">4</span> <span class=\"nu0\">1</span><br/>   <span class=\"sy0\">(</span>[\"<span class=\"nu0\">0</span>/\u00a0! +/<span class=\"sy0\">)</span>~ i. <span class=\"nu0\">5</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">1</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">1</span>  <span class=\"nu0\">1</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">2</span>  <span class=\"nu0\">3</span>  <span class=\"nu0\">4</span>  <span class=\"nu0\">5</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">3</span>  <span class=\"nu0\">6</span> <span class=\"nu0\">10</span> <span class=\"nu0\">15</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">4</span> <span class=\"nu0\">10</span> <span class=\"nu0\">20</span> <span class=\"nu0\">35</span><br/><span class=\"nu0\">1</span> <span class=\"nu0\">5</span> <span class=\"nu0\">15</span> <span class=\"nu0\">35</span> <span class=\"nu0\">70</span></pre>"}, {"lang": "Java", "loc": 45, "block": "<pre class=\"java highlighted_source\"><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">lang</span>.<a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.List</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.function.Function</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">java.util.stream.*</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">util</span>.<span class=\"me1\">stream</span>.<span class=\"me1\">Collectors</span>.<span class=\"me1\">toList</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">import</span> <span class=\"co2\">static</span> java.<span class=\"me1\">util</span>.<span class=\"me1\">stream</span>.<span class=\"me1\">IntStream</span>.<span class=\"me1\">range</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw1\">public</span> <span class=\"kw1\">class</span> PascalMatrix <span class=\"br0\">{</span><br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">int</span> binomialCoef<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, <span class=\"kw4\">int</span> k<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw4\">int</span> result <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span><span class=\"kw4\">int</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">;</span> i <span class=\"sy0\">&lt;=</span> k<span class=\"sy0\">;</span> i<span class=\"sy0\">++</span><span class=\"br0\">)</span><br/>            result <span class=\"sy0\">=</span> result <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> i <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> i<span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> result<span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>IntStream<span class=\"sy0\">&gt;</span> pascal<span class=\"br0\">(</span><span class=\"kw4\">int</span> n, Function<span class=\"sy0\">&lt;</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Ainteger+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">Integer</span></a>, IntStream<span class=\"sy0\">&gt;</span> f<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> range<span class=\"br0\">(</span><span class=\"nu0\">0</span>, n<span class=\"br0\">)</span>.<span class=\"me1\">mapToObj</span><span class=\"br0\">(</span>i <span class=\"sy0\">-&gt;</span> f.<span class=\"me1\">apply</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span>.<span class=\"me1\">collect</span><span class=\"br0\">(</span>toList<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>IntStream<span class=\"sy0\">&gt;</span> pascalUpp<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> pascal<span class=\"br0\">(</span>n, i <span class=\"sy0\">-&gt;</span> range<span class=\"br0\">(</span><span class=\"nu0\">0</span>, n<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>j <span class=\"sy0\">-&gt;</span> binomialCoef<span class=\"br0\">(</span>j, i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>IntStream<span class=\"sy0\">&gt;</span> pascalLow<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> pascal<span class=\"br0\">(</span>n, i <span class=\"sy0\">-&gt;</span> range<span class=\"br0\">(</span><span class=\"nu0\">0</span>, n<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>j <span class=\"sy0\">-&gt;</span> binomialCoef<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> List<span class=\"sy0\">&lt;</span>IntStream<span class=\"sy0\">&gt;</span> pascalSym<span class=\"br0\">(</span><span class=\"kw4\">int</span> n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> pascal<span class=\"br0\">(</span>n, i <span class=\"sy0\">-&gt;</span> range<span class=\"br0\">(</span><span class=\"nu0\">0</span>, n<span class=\"br0\">)</span>.<span class=\"me1\">map</span><span class=\"br0\">(</span>j <span class=\"sy0\">-&gt;</span> binomialCoef<span class=\"br0\">(</span>i <span class=\"sy0\">+</span> j, i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> print<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a> label, List<span class=\"sy0\">&lt;</span>IntStream<span class=\"sy0\">&gt;</span> result<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        out.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"sy0\">+</span> label<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">(</span>IntStream row <span class=\"sy0\">:</span> result<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            row.<span class=\"kw1\">forEach</span><span class=\"br0\">(</span>i <span class=\"sy0\">-&gt;</span> out.<span class=\"me1\">printf</span><span class=\"br0\">(</span><span class=\"st0\">\"%2d \"</span>, i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>            <a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">System</span></a>.<span class=\"me1\">out</span>.<span class=\"me1\">println</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>\u00a0<br/>    <span class=\"kw1\">public</span> <span class=\"kw1\">static</span> <span class=\"kw4\">void</span> main<span class=\"br0\">(</span><a href=\"http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky\"><span class=\"kw3\">String</span></a><span class=\"br0\">[</span><span class=\"br0\">]</span> a<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"Upper: \"</span>, pascalUpp<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"Lower: \"</span>, pascalLow<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        print<span class=\"br0\">(</span><span class=\"st0\">\"Symmetric:\"</span>, pascalSym<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "JavaScript", "loc": 137, "block": "<pre class=\"javascript highlighted_source\"><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>    <span class=\"st0\">'use strict'</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// PASCAL MATRIX ---------------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// (Function on a coordinate pair) -&gt; Matrix size -&gt; Matrix rows</span><br/>    <span class=\"co1\">// pascalMatrix\u00a0:: ((Int, Int) -&gt; (Int, Int)) -&gt; Int -&gt; [[Int]]</span><br/>    <span class=\"kw1\">const</span> pascalMatrix <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        chunksOf<span class=\"br0\">(</span>n<span class=\"sy0\">,</span> map<span class=\"br0\">(</span>compose<span class=\"br0\">(</span>bc<span class=\"sy0\">,</span> f<span class=\"br0\">)</span><span class=\"sy0\">,</span> range<span class=\"br0\">(</span><span class=\"br0\">[</span><br/>            <span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            <span class=\"br0\">[</span>n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> n <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Binomial coefficient</span><br/>    <span class=\"co1\">// bc\u00a0:: (Int, Int) -&gt; Int</span><br/>    <span class=\"kw1\">const</span> bc <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>n<span class=\"sy0\">,</span> k<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">return</span> enumFromTo<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> k<span class=\"br0\">)</span><br/>            .<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>                <span class=\"kw1\">return</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a <span class=\"sy0\">*</span> <span class=\"br0\">(</span>n <span class=\"sy0\">-</span> x <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"br0\">)</span> <span class=\"sy0\">/</span> x<span class=\"br0\">)</span><br/>            <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// GENERIC FUNCTIONS -----------------------------------------------------</span><br/>\u00a0<br/>    <span class=\"co1\">// A list of functions applied to a list of arguments</span><br/>    <span class=\"co1\">// &lt;*&gt;\u00a0:: [(a -&gt; b)] -&gt; [a] -&gt; [b]</span><br/>    <span class=\"kw1\">const</span> ap <span class=\"sy0\">=</span> <span class=\"br0\">(</span>fs<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"co1\">//</span><br/>        <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> fs.<span class=\"me1\">map</span><span class=\"br0\">(</span>f <span class=\"sy0\">=&gt;</span> <span class=\"co1\">//</span><br/>            <span class=\"br0\">[</span><span class=\"br0\">]</span>.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>x <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// chunksOf\u00a0:: Int -&gt; [a] -&gt; [[a]]</span><br/>    <span class=\"kw1\">const</span> chunksOf <span class=\"sy0\">=</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        xs.<span class=\"me1\">reduce</span><span class=\"br0\">(</span><span class=\"br0\">(</span>a<span class=\"sy0\">,</span> _<span class=\"sy0\">,</span> i<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>            i <span class=\"sy0\">%</span> n <span class=\"sy0\">?</span> a <span class=\"sy0\">:</span> a.<span class=\"me1\">concat</span><span class=\"br0\">(</span><span class=\"br0\">[</span>xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> i <span class=\"sy0\">+</span> n<span class=\"br0\">)</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// compose\u00a0:: (b -&gt; c) -&gt; (a -&gt; b) -&gt; (a -&gt; c)</span><br/>    <span class=\"kw1\">const</span> compose <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> g<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> x <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span>g<span class=\"br0\">(</span>x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// concat\u00a0:: [[a]] -&gt; [a] | [String] -&gt; String</span><br/>    <span class=\"kw1\">const</span> concat <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">if</span> <span class=\"br0\">(</span>xs.<span class=\"me1\">length</span> <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">const</span> unit <span class=\"sy0\">=</span> <span class=\"kw1\">typeof</span> xs<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">===</span> <span class=\"st0\">'string'</span> <span class=\"sy0\">?</span> <span class=\"st0\">''</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>            <span class=\"kw1\">return</span> unit.<span class=\"me1\">concat</span>.<span class=\"me1\">apply</span><span class=\"br0\">(</span>unit<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span> <span class=\"kw1\">else</span> <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// cons\u00a0:: a -&gt; [a] -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> cons <span class=\"sy0\">=</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>x<span class=\"br0\">]</span>.<span class=\"me1\">concat</span><span class=\"br0\">(</span>xs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// curry\u00a0:: ((a, b) -&gt; c) -&gt; a -&gt; b -&gt; c</span><br/>    <span class=\"kw1\">const</span> curry <span class=\"sy0\">=</span> f <span class=\"sy0\">=&gt;</span> a <span class=\"sy0\">=&gt;</span> b <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// enumFromTo\u00a0:: Int -&gt; Int -&gt; [Int]</span><br/>    <span class=\"kw1\">const</span> enumFromTo <span class=\"sy0\">=</span> <span class=\"br0\">(</span>m<span class=\"sy0\">,</span> n<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        <span class=\"kw4\">Array</span>.<span class=\"me1\">from</span><span class=\"br0\">(</span><span class=\"br0\">{</span><br/>            length<span class=\"sy0\">:</span> <span class=\"kw4\">Math</span>.<span class=\"me1\">floor</span><span class=\"br0\">(</span>n <span class=\"sy0\">-</span> m<span class=\"br0\">)</span> <span class=\"sy0\">+</span> <span class=\"nu0\">1</span><br/>        <span class=\"br0\">}</span><span class=\"sy0\">,</span> <span class=\"br0\">(</span>_<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> m <span class=\"sy0\">+</span> i<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// id\u00a0:: a -&gt; a</span><br/>    <span class=\"kw1\">const</span> id <span class=\"sy0\">=</span> x <span class=\"sy0\">=&gt;</span> x<span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// log\u00a0:: a -&gt; IO ()</span><br/>    <span class=\"kw1\">const</span> log <span class=\"sy0\">=</span> <span class=\"br0\">(</span>...<span class=\"me1\">args</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span><br/>        console.<span class=\"me1\">log</span><span class=\"br0\">(</span><br/>            args<br/>            .<span class=\"me1\">map</span><span class=\"br0\">(</span>JSON.<span class=\"me1\">stringify</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' -&gt; '</span><span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// map\u00a0:: (a -&gt; b) -&gt; [a] -&gt; [b]</span><br/>    <span class=\"kw1\">const</span> map <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// range\u00a0:: Ix a =&gt; (a, a) -&gt; [a]</span><br/>    <span class=\"kw1\">const</span> range <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> <span class=\"br0\">[</span>as<span class=\"sy0\">,</span> bs<span class=\"br0\">]</span> <span class=\"sy0\">=</span> a <span class=\"kw1\">instanceof</span> <span class=\"kw4\">Array</span> <span class=\"sy0\">?</span> <span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">]</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><br/>                <span class=\"br0\">[</span>a<span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>                <span class=\"br0\">[</span>b<span class=\"br0\">]</span><br/>            <span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            an <span class=\"sy0\">=</span> as.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>an <span class=\"sy0\">===</span> bs.<span class=\"me1\">length</span><span class=\"br0\">)</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>            an <span class=\"sy0\">&gt;</span> <span class=\"nu0\">1</span> <span class=\"sy0\">?</span> <span class=\"br0\">(</span><br/>                sequence<span class=\"br0\">(</span>as.<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">(</span>_<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> enumFromTo<span class=\"br0\">(</span>as<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"sy0\">,</span> bs<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            <span class=\"br0\">)</span> <span class=\"sy0\">:</span> enumFromTo<span class=\"br0\">(</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span> <span class=\"sy0\">:</span> <span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Evaluate left to right, and collect the results</span><br/>    <span class=\"co1\">// sequence\u00a0:: Monad m =&gt; [m a] -&gt; m [a]</span><br/>    <span class=\"kw1\">const</span> sequence <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> traverse<span class=\"br0\">(</span>id<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// show\u00a0::</span><br/>    <span class=\"co1\">// (a -&gt; String) f,  Num n =&gt;</span><br/>    <span class=\"co1\">// a -&gt; maybe f -&gt; maybe n -&gt; String</span><br/>    <span class=\"kw1\">const</span> show <span class=\"sy0\">=</span> JSON.<span class=\"me1\">stringify</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// swap\u00a0:: (a, b) -&gt; (b, a)</span><br/>    <span class=\"kw1\">const</span> swap <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>b<span class=\"sy0\">,</span> a<span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// Map each element of a structure to an action,</span><br/>    <span class=\"co1\">// evaluate these actions from left to right,</span><br/>    <span class=\"co1\">// and collect the results.</span><br/>    <span class=\"co1\">// traverse\u00a0:: (a -&gt; [b]) -&gt; [a] -&gt; [[b]]</span><br/>    <span class=\"kw1\">const</span> traverse <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> cons_f <span class=\"sy0\">=</span> <span class=\"br0\">(</span>a<span class=\"sy0\">,</span> x<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> ap<span class=\"br0\">(</span>f<span class=\"br0\">(</span>x<span class=\"br0\">)</span><br/>            .<span class=\"me1\">map</span><span class=\"br0\">(</span>curry<span class=\"br0\">(</span>cons<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> xs.<span class=\"me1\">reduceRight</span><span class=\"br0\">(</span>cons_f<span class=\"sy0\">,</span> <span class=\"br0\">[</span><br/>            <span class=\"br0\">[</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// unlines\u00a0:: [String] -&gt; String</span><br/>    <span class=\"kw1\">const</span> unlines <span class=\"sy0\">=</span> xs <span class=\"sy0\">=&gt;</span> xs.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">'<span class=\"es0\">\\n</span>'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// zipWith\u00a0:: (a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]</span><br/>    <span class=\"kw1\">const</span> zipWith <span class=\"sy0\">=</span> <span class=\"br0\">(</span>f<span class=\"sy0\">,</span> xs<span class=\"sy0\">,</span> ys<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">const</span> ny <span class=\"sy0\">=</span> ys.<span class=\"me1\">length</span><span class=\"sy0\">;</span><br/>        <span class=\"kw1\">return</span> <span class=\"br0\">(</span>xs.<span class=\"me1\">length</span> <span class=\"sy0\">&lt;=</span> ny <span class=\"sy0\">?</span> xs <span class=\"sy0\">:</span> xs.<span class=\"me1\">slice</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">,</span> ny<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>            .<span class=\"me1\">map</span><span class=\"br0\">(</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span> i<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> f<span class=\"br0\">(</span>x<span class=\"sy0\">,</span> ys<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>    <span class=\"co1\">// TEST ------------------------------------------------------------------</span><br/>    <span class=\"kw1\">const</span> matrixSize <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">return</span> unlines<span class=\"br0\">(</span><br/>        zipWith<span class=\"br0\">(</span><br/>            <span class=\"br0\">(</span>s<span class=\"sy0\">,</span> xs<span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> unlines<span class=\"br0\">(</span>concat<span class=\"br0\">(</span><span class=\"br0\">[</span><br/>                <span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"sy0\">,</span> xs.<span class=\"me1\">map</span><span class=\"br0\">(</span>show<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">''</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><span class=\"st0\">\"Lower\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Upper\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"Symmetric\"</span><span class=\"br0\">]</span><span class=\"sy0\">,</span><br/>            ap<span class=\"br0\">(</span><br/>                map<span class=\"br0\">(</span>curry<span class=\"br0\">(</span>pascalMatrix<span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span><br/>                    id<span class=\"sy0\">,</span>                    <span class=\"co1\">// Lower</span><br/>                    swap<span class=\"sy0\">,</span>                  <span class=\"co1\">// Upper</span><br/>                    <span class=\"br0\">(</span><span class=\"br0\">[</span>a<span class=\"sy0\">,</span> b<span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"sy0\">=&gt;</span> <span class=\"br0\">[</span>a <span class=\"sy0\">+</span> b<span class=\"sy0\">,</span> a<span class=\"br0\">]</span> <span class=\"co1\">// Symmetric</span><br/>                <span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"sy0\">,</span> <span class=\"br0\">[</span>matrixSize<span class=\"br0\">]</span><br/>            <span class=\"br0\">)</span><br/>        <span class=\"br0\">)</span><br/>    <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Julia", "loc": 24, "block": "<pre class=\"text highlighted_source\">julia&gt; [binomial(j,i) for i in 0:4, j in 0:4]<br/>5\u00d75 Array{Int64,2}:<br/> 1  1  1  1  1<br/> 0  1  2  3  4<br/> 0  0  1  3  6<br/> 0  0  0  1  4<br/> 0  0  0  0  1<br/>\u00a0<br/>julia&gt; [binomial(i,j) for i in 0:4, j in 0:4]<br/>5\u00d75 Array{Int64,2}:<br/> 1  0  0  0  0<br/> 1  1  0  0  0<br/> 1  2  1  0  0<br/> 1  3  3  1  0<br/> 1  4  6  4  1<br/>\u00a0<br/>julia&gt; [binomial(j+i,i) for i in 0:4, j in 0:4]<br/>5\u00d75 Array{Int64,2}:<br/> 1  1   1   1   1<br/> 1  2   3   4   5<br/> 1  3   6  10  15<br/> 1  4  10  20  35<br/> 1  5  15  35  70<br/>\u00a0</pre>"}, {"lang": "jq", "loc": 23, "block": "<pre class=\"text highlighted_source\"># Generic functions<br/>\u00a0<br/># Note: 'transpose' is defined in recent versions of jq <br/>def transpose:<br/>  if (.[0] | length) == 0 then []<br/>  else [map(.[0])] + (map(.[1:]) | transpose)<br/>  end\u00a0;<br/>\u00a0<br/># Create an m x n matrix with init as the initial value<br/>def matrix(m; n; init):<br/>  if m == 0 then []<br/>  elif m == 1 then [range(0;n) | init]<br/>  elif m &gt; 0 then<br/>    matrix(1;n;init) as $row<br/>    | [range(0;m) | $row ]<br/>  else error(\"matrix\\(m);_;_) invalid\")<br/>  end\u00a0;<br/>\u00a0<br/># A simple pretty-printer for a 2-d matrix<br/>def pp:<br/>  def pad(n): tostring | (n - length) * \" \" + .;<br/>  def row: reduce .[] as $x (\"\"; . + ($x|pad(4)));<br/>  reduce .[] as $row (\"\"; . + \"\\n\\($row|row)\");</pre>"}, {"lang": "Kotlin", "loc": 32, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">// version 1.1.3</span><br/>\u00a0<br/>fun binomial<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int, k<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">&lt;</span> k<span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">0</span> <br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>n <span class=\"sy0\">==</span> <span class=\"nu0\">0</span> || k <span class=\"sy0\">==</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> <span class=\"nu0\">1</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> num <span class=\"sy0\">=</span> <span class=\"br0\">(</span>k + <span class=\"nu0\">1</span>..<span class=\"me1\">n</span><span class=\"br0\">)</span>.<span class=\"me1\">fold</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> acc, i -<span class=\"sy0\">&gt;</span> acc <span class=\"sy0\">*</span> i <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> den <span class=\"sy0\">=</span> <span class=\"br0\">(</span><span class=\"nu0\">2</span>..<span class=\"me1\">n</span> - k<span class=\"br0\">)</span>.<span class=\"me1\">fold</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> acc, i -<span class=\"sy0\">&gt;</span> acc <span class=\"sy0\">*</span> i <span class=\"br0\">}</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> num / den<br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun pascalUpperTriangular<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> i -<span class=\"sy0\">&gt;</span> IntArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> j -<span class=\"sy0\">&gt;</span> binomial<span class=\"br0\">(</span>j, i<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>fun pascalLowerTriangular<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span> <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> i -<span class=\"sy0\">&gt;</span> IntArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> j -<span class=\"sy0\">&gt;</span> binomial<span class=\"br0\">(</span>i, j<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>fun pascalSymmetric<span class=\"br0\">(</span>n<span class=\"sy0\">:</span> Int<span class=\"br0\">)</span>       <span class=\"sy0\">=</span> List<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> i -<span class=\"sy0\">&gt;</span> IntArray<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span> j -<span class=\"sy0\">&gt;</span> binomial<span class=\"br0\">(</span>i + j, i<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/>fun printMatrix<span class=\"br0\">(</span>title<span class=\"sy0\">:</span> String, m<span class=\"sy0\">:</span> List<span class=\"sy0\">&lt;</span>IntArray<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> m.<span class=\"me1\">size</span><br/>    println<span class=\"br0\">(</span>title<span class=\"br0\">)</span><br/>    print<span class=\"br0\">(</span><span class=\"st0\">\"[\"</span><span class=\"br0\">)</span><br/>    <a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a> <span class=\"br0\">(</span>i in <span class=\"nu0\">0</span> until n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&gt;</span> <span class=\"nu0\">0</span><span class=\"br0\">)</span> print<span class=\"br0\">(</span><span class=\"st0\">\" \"</span><span class=\"br0\">)</span><br/>        print<span class=\"br0\">(</span>m<span class=\"br0\">[</span>i<span class=\"br0\">]</span>.<span class=\"me1\">contentToString</span><span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>        <a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a> <span class=\"br0\">(</span>i <span class=\"sy0\">&lt;</span> n - <span class=\"nu0\">1</span><span class=\"br0\">)</span> println<span class=\"br0\">(</span><span class=\"st0\">\",\"</span><span class=\"br0\">)</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">else</span></a> println<span class=\"br0\">(</span><span class=\"st0\">\"]<span class=\"es1\">\\n</span>\"</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>fun main<span class=\"br0\">(</span>args<span class=\"sy0\">:</span> Array<span class=\"sy0\">&lt;</span>String<span class=\"sy0\">&gt;</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    printMatrix<span class=\"br0\">(</span><span class=\"st0\">\"Pascal upper-triangular matrix\"</span>, pascalUpperTriangular<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    printMatrix<span class=\"br0\">(</span><span class=\"st0\">\"Pascal lower-triangular matrix\"</span>, pascalLowerTriangular<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    printMatrix<span class=\"br0\">(</span><span class=\"st0\">\"Pascal symmetric matrix\"</span>, pascalSymmetric<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Lua", "loc": 47, "block": "<pre class=\"lua highlighted_source\"><span class=\"kw1\">function</span> factorial <span class=\"br0\">(</span>n<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> f <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> n <span class=\"kw1\">do</span><br/>        f <span class=\"sy0\">=</span> f <span class=\"sy0\">*</span> i<br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> f<br/><span class=\"kw1\">end</span> <br/>\u00a0<br/><span class=\"kw1\">function</span> binomial <span class=\"br0\">(</span>n<span class=\"sy0\">,</span> k<span class=\"br0\">)</span><br/>    <span class=\"kw1\">if</span> k <span class=\"sy0\">&gt;</span> n <span class=\"kw1\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span> <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">return</span> factorial<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"sy0\">/</span> <span class=\"br0\">(</span>factorial<span class=\"br0\">(</span>k<span class=\"br0\">)</span> <span class=\"sy0\">*</span> factorial<span class=\"br0\">(</span>n <span class=\"sy0\">-</span> k<span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> pascalMatrix <span class=\"br0\">(</span>form<span class=\"sy0\">,</span> size<span class=\"br0\">)</span><br/>    <span class=\"kw1\">local</span> matrix <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>    <span class=\"kw1\">for</span> row <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> size <span class=\"kw1\">do</span><br/>        matrix<span class=\"br0\">[</span>row<span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">{</span><span class=\"br0\">}</span><br/>        <span class=\"kw1\">for</span> col <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> size <span class=\"kw1\">do</span><br/>            <span class=\"kw1\">if</span> form <span class=\"sy0\">==</span> <span class=\"st0\">\"upper\"</span> <span class=\"kw1\">then</span><br/>                matrix<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> binomial<span class=\"br0\">(</span>col <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> row <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">end</span><br/>            <span class=\"kw1\">if</span> form <span class=\"sy0\">==</span> <span class=\"st0\">\"lower\"</span> <span class=\"kw1\">then</span><br/>                matrix<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> binomial<span class=\"br0\">(</span>row <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> col <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">end</span><br/>            <span class=\"kw1\">if</span> form <span class=\"sy0\">==</span> <span class=\"st0\">\"symmetric\"</span> <span class=\"kw1\">then</span><br/>                matrix<span class=\"br0\">[</span>row<span class=\"br0\">]</span><span class=\"br0\">[</span>col<span class=\"br0\">]</span> <span class=\"sy0\">=</span> binomial<span class=\"br0\">(</span>row <span class=\"sy0\">+</span> col <span class=\"sy0\">-</span> <span class=\"nu0\">2</span><span class=\"sy0\">,</span> col <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>            <span class=\"kw1\">end</span><br/>        <span class=\"kw1\">end</span><br/>    <span class=\"kw1\">end</span><br/>    matrix<span class=\"sy0\">.</span>form <span class=\"sy0\">=</span> form<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">:</span>upper<span class=\"br0\">(</span><span class=\"br0\">)</span> <span class=\"sy0\">..</span> form<span class=\"sy0\">:</span>sub<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"sy0\">,</span> <span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">return</span> matrix<br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">function</span> show <span class=\"br0\">(</span>mat<span class=\"br0\">)</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span>mat<span class=\"sy0\">.</span>form <span class=\"sy0\">..</span> <span class=\"st0\">\":\"</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">for</span> i <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>mat <span class=\"kw1\">do</span><br/>        <span class=\"kw1\">for</span> j <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><span class=\"sy0\">,</span> <span class=\"sy0\">#</span>mat<span class=\"br0\">[</span>i<span class=\"br0\">]</span> <span class=\"kw1\">do</span><br/>            <span class=\"kw3\">io.write</span><span class=\"br0\">(</span>mat<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">..</span> <span class=\"st0\">\"<span class=\"es1\">\\t</span>\"</span><span class=\"br0\">)</span><br/>        <span class=\"kw1\">end</span><br/>        <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">end</span><br/>    <span class=\"kw3\">print</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span><br/>\u00a0<br/><span class=\"kw1\">for</span> _<span class=\"sy0\">,</span> form <span class=\"kw2\">in</span> <span class=\"kw3\">pairs</span><span class=\"br0\">(</span><span class=\"br0\">{</span><span class=\"st0\">\"upper\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"lower\"</span><span class=\"sy0\">,</span> <span class=\"st0\">\"symmetric\"</span><span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"kw1\">do</span><br/>    show<span class=\"br0\">(</span>pascalMatrix<span class=\"br0\">(</span>form<span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/><span class=\"kw1\">end</span></pre>"}, {"lang": "Mathematica", "loc": 9, "block": "<pre class=\"text highlighted_source\">symPascal[size_]\u00a0:= NestList[Accumulate, Table[1, {k, size}], size - 1]<br/>\u00a0<br/>upperPascal[size_]\u00a0:= CholeskyDecomposition[<a class=\"__cf_email__\" data-cfemail=\"66151f0b36071505070a26150f1c03\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]<br/>\u00a0<br/>lowerPascal[size_]\u00a0:= <a class=\"__cf_email__\" data-cfemail=\"6632140708151609150326250e090a03150d1f220305090b1609150f120f0908\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>[<a class=\"__cf_email__\" data-cfemail=\"8af9f3e7daebf9e9ebe6caf9e3f0ef\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>]<br/>\u00a0<br/>Column[MapThread[<br/>  Labeled[Grid[#<a class=\"__cf_email__\" data-cfemail=\"3f0e7f0a\" href=\"/cdn-cgi/l/email-protection\">[email\u00a0protected]</a>], #2, Top] &amp;, {{upperPascal, lowerPascal, <br/>    symPascal}, {\"Upper\", \"Lower\", \"Symmetric\"}}]]</pre>"}, {"lang": "Pascal", "loc": 70, "block": "<pre class=\"pascal highlighted_source\"><span class=\"kw1\">program</span> Pascal_matrix<span class=\"br0\">(</span>Output<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">const</span> N <span class=\"sy3\">=</span> <span class=\"nu0\">5</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">type</span> NxN_Matrix <span class=\"sy3\">=</span> <span class=\"kw4\">array</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">N</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"sy1\">..</span><span class=\"me1\">N</span><span class=\"br0\">]</span> <span class=\"kw1\">of</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">var</span> PM<span class=\"sy1\">,</span>PX <span class=\"sy1\">:</span> NxN_Matrix<span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Pascal_sym<span class=\"br0\">(</span>x <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span> p <span class=\"sy1\">:</span> NxN_Matrix<span class=\"br0\">)</span> <span class=\"sy1\">:</span> NxN_Matrix<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span> I<span class=\"sy1\">,</span>J <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> I <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> x <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> J <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> x <span class=\"kw1\">do</span> p<span class=\"br0\">[</span>I<span class=\"sy1\">,</span>J<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> p<span class=\"br0\">[</span>I<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>J<span class=\"br0\">]</span><span class=\"sy3\">+</span>p<span class=\"br0\">[</span>I<span class=\"sy1\">,</span>J<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    Pascal_sym <span class=\"sy1\">:</span><span class=\"sy3\">=</span> p<span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Pascal_upp<span class=\"br0\">(</span>x <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span> p <span class=\"sy1\">:</span> NxN_Matrix<span class=\"br0\">)</span> <span class=\"sy1\">:</span> NxN_Matrix<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span> I<span class=\"sy1\">,</span>J <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw1\">for</span> I <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> x <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> J <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> x <span class=\"kw1\">do</span> p<span class=\"br0\">[</span>I<span class=\"sy1\">,</span>J<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> p<span class=\"br0\">[</span>I<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span>J<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy3\">+</span>p<span class=\"br0\">[</span>I<span class=\"sy1\">,</span>J<span class=\"sy3\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    Pascal_upp <span class=\"sy1\">:</span><span class=\"sy3\">=</span> p<br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">function</span> Pascal_low<span class=\"br0\">(</span>x <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span> p <span class=\"sy1\">:</span> NxN_Matrix<span class=\"br0\">)</span> <span class=\"sy1\">:</span> NxN_Matrix<span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span> p1<span class=\"sy1\">,</span>p2 <span class=\"sy1\">:</span> NxN_Matrix<span class=\"sy1\">;</span><br/>  I<span class=\"sy1\">,</span>J <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    p1 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Pascal_upp<span class=\"br0\">(</span>x<span class=\"sy1\">,</span>p<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    p2 <span class=\"sy1\">:</span><span class=\"sy3\">=</span> p1<span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> I <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> x <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> J <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> x <span class=\"kw1\">do</span> p1<span class=\"br0\">[</span>J<span class=\"sy1\">,</span>I<span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> p2<span class=\"br0\">[</span>I<span class=\"sy1\">,</span>J<span class=\"br0\">]</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>    Pascal_low <span class=\"sy1\">:</span><span class=\"sy3\">=</span> p1<br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">procedure</span> PrintMatrix<span class=\"br0\">(</span>titel <span class=\"sy1\">:</span> <span class=\"kw4\">ansistring</span><span class=\"sy1\">;</span> x <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span> p <span class=\"sy1\">:</span> NxN_Matrix<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">var</span> I<span class=\"sy1\">,</span>J <span class=\"sy1\">:</span> <span class=\"kw4\">integer</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">begin</span><br/>    <span class=\"kw3\">writeln</span><span class=\"br0\">(</span>titel<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">for</span> I <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> x <span class=\"kw1\">do</span><br/>    <span class=\"kw1\">begin</span><br/>      <span class=\"kw1\">for</span> J <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span> <span class=\"kw1\">to</span> x <span class=\"kw1\">do</span> <span class=\"kw3\">write</span><span class=\"br0\">(</span>p<span class=\"br0\">[</span>I<span class=\"sy1\">,</span>J<span class=\"br0\">]</span><span class=\"sy1\">:</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>      <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>    <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>  <span class=\"kw1\">end</span><span class=\"sy1\">;</span><br/>\u00a0<br/><span class=\"kw1\">begin</span><br/>  PX<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">0</span><span class=\"sy1\">;</span><br/>  PM<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  PM <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Pascal_upp<span class=\"br0\">(</span>N<span class=\"sy1\">,</span> PM<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  PrintMatrix<span class=\"br0\">(</span><span class=\"st0\">'Upper:'</span><span class=\"sy1\">,</span> N<span class=\"sy1\">,</span> PM<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  PM <span class=\"sy1\">:</span><span class=\"sy3\">=</span> PX<span class=\"sy1\">;</span><br/>  PM<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  PM <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Pascal_low<span class=\"br0\">(</span>N<span class=\"sy1\">,</span> PM<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  PrintMatrix<span class=\"br0\">(</span><span class=\"st0\">'Lower:'</span><span class=\"sy1\">,</span> N<span class=\"sy1\">,</span> PM<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  PM <span class=\"sy1\">:</span><span class=\"sy3\">=</span> PX<span class=\"sy1\">;</span><br/>  PM<span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"sy1\">,</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy1\">:</span><span class=\"sy3\">=</span> <span class=\"nu0\">1</span><span class=\"sy1\">;</span><br/>  PM <span class=\"sy1\">:</span><span class=\"sy3\">=</span> Pascal_sym<span class=\"br0\">(</span>N<span class=\"sy1\">,</span> PM<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  PrintMatrix<span class=\"br0\">(</span><span class=\"st0\">'Symmetric'</span><span class=\"sy1\">,</span> N<span class=\"sy1\">,</span> PM<span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">writeln</span><span class=\"br0\">(</span><span class=\"st0\">''</span><span class=\"br0\">)</span><span class=\"sy1\">;</span><br/>  <span class=\"kw3\">readln</span><span class=\"sy1\">;</span><br/><span class=\"kw1\">end</span><span class=\"sy1\">.</span></pre>"}, {"lang": "Perl", "loc": 60, "block": "<pre class=\"perl highlighted_source\"><span class=\"co1\">#!/usr/bin/perl</span><br/><span class=\"kw2\">use</span> warnings<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> strict<span class=\"sy0\">;</span><br/><span class=\"kw2\">use</span> feature <a href=\"http://perldoc.perl.org/functions/qw.html\"><span class=\"kw3\">qw</span></a><span class=\"br0\">{</span> say <span class=\"br0\">}</span><span class=\"sy0\">;</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">sub</span> upper <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$j</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/m.html\"><span class=\"kw3\">m</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$i</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$j</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$m</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&gt;</span> <span class=\"re0\">$y</span>          <span class=\"sy0\">?</span> <span class=\"nu0\">0</span><br/>                       <span class=\"sy0\">:</span> <span class=\"sy0\">!</span> <span class=\"re0\">$x</span> <span class=\"sy0\">||</span> <span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"re0\">$y</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span><br/>                                          <span class=\"sy0\">:</span> <span class=\"re0\">$m</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$m</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> \\<span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/m.html\"><span class=\"kw3\">m</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">sub</span> lower <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$j</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/m.html\"><span class=\"kw3\">m</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$i</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$j</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$m</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">$x</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$y</span>          <span class=\"sy0\">?</span> <span class=\"nu0\">0</span><br/>                       <span class=\"sy0\">:</span> <span class=\"sy0\">!</span> <span class=\"re0\">$x</span> <span class=\"sy0\">||</span> <span class=\"re0\">$x</span> <span class=\"sy0\">==</span> <span class=\"re0\">$y</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span><br/>                                          <span class=\"sy0\">:</span> <span class=\"re0\">$m</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$m</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> \\<span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/m.html\"><span class=\"kw3\">m</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">sub</span> symmetric <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$j</span><span class=\"br0\">)</span> <span class=\"sy0\">=</span> <span class=\"co5\">@_</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/m.html\"><span class=\"kw3\">m</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$x</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$i</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$y</span> <span class=\"br0\">(</span><span class=\"nu0\">0</span> <span class=\"sy0\">..</span> <span class=\"re0\">$j</span> <span class=\"sy0\">-</span> <span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>            <span class=\"re0\">$m</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"sy0\">!</span> <span class=\"re0\">$x</span> <span class=\"sy0\">||</span> <span class=\"sy0\">!</span> <span class=\"re0\">$y</span> <span class=\"sy0\">?</span> <span class=\"nu0\">1</span><br/>                                      <span class=\"sy0\">:</span> <span class=\"re0\">$m</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"br0\">]</span> <span class=\"sy0\">+</span> <span class=\"re0\">$m</span><span class=\"br0\">[</span><span class=\"re0\">$x</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"re0\">$y</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <a href=\"http://perldoc.perl.org/functions/return.html\"><span class=\"kw3\">return</span></a> \\<span class=\"sy0\">@</span><a href=\"http://perldoc.perl.org/functions/m.html\"><span class=\"kw3\">m</span></a><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/><span class=\"kw2\">sub</span> pretty <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$m</span> <span class=\"sy0\">=</span> <a href=\"http://perldoc.perl.org/functions/shift.html\"><span class=\"kw3\">shift</span></a><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"kw1\">my</span> <span class=\"re0\">$row</span> <span class=\"br0\">(</span><span class=\"re0\">@$m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        say <a href=\"http://perldoc.perl.org/functions/join.html\"><span class=\"kw3\">join</span></a> <span class=\"st_h\">', '</span><span class=\"sy0\">,</span> <span class=\"re0\">@$row</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>\u00a0<br/>pretty<span class=\"br0\">(</span>upper<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>say <span class=\"st_h\">'-'</span> x <span class=\"nu0\">14</span><span class=\"sy0\">;</span><br/>pretty<span class=\"br0\">(</span>lower<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>say <span class=\"st_h\">'-'</span> x <span class=\"nu0\">14</span><span class=\"sy0\">;</span><br/>pretty<span class=\"br0\">(</span>symmetric<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"sy0\">,</span> <span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span></pre>"}, {"lang": "Perl 6", "loc": 37, "block": "<pre class=\"perl6 highlighted_source\"><span class=\"co1\"># Extend a matrix in 2 dimensions based on 3 neighbors.</span><br/><span class=\"kw2\">sub</span> grow<span class=\"sy0\">-</span>matrix<span class=\"br0\">(</span><span class=\"re0\">@matrix</span><span class=\"sy0\">,</span> <span class=\"re0\">&amp;func</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">$n</span> <span class=\"sy0\">=</span> <span class=\"re0\">@matrix</span><span class=\"sy0\">.</span><span class=\"kw3\">shape</span> <span class=\"kw1\">eq</span> <span class=\"st_h\">'*'</span> <span class=\"sy0\">??</span> <span class=\"nu0\">1</span> <span class=\"sy0\">!!</span> <span class=\"re0\">@matrix</span><span class=\"sy0\">.</span><span class=\"kw3\">shape</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">my</span> <span class=\"re0\">@m</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"re0\">$n</span><span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"kw1\">for</span> <span class=\"sy0\">^</span><span class=\"re0\">$n</span> <span class=\"kw1\">X</span> <span class=\"sy0\">^</span><span class=\"re0\">$n</span> <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span><span class=\"re0\">$i</span><span class=\"sy0\">,</span> <span class=\"re0\">$j</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>       <span class=\"re0\">@m</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"re0\">@matrix</span><span class=\"br0\">[</span><span class=\"re0\">$i</span><span class=\"sy0\">;</span><span class=\"re0\">$j</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>    <span class=\"br0\">}</span><br/><span class=\"co1\">#                     West         North        NorthWest</span><br/>    <span class=\"re0\">@m</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"sy0\">;</span> <span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> func<span class=\"br0\">(</span> <span class=\"nu0\">0</span><span class=\"sy0\">,</span>           <span class=\"re0\">@m</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span>            <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@m</span><span class=\"br0\">[</span> <span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> func<span class=\"br0\">(</span> <span class=\"re0\">@m</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span>  <span class=\"nu0\">0</span><span class=\"sy0\">,</span>           <span class=\"nu0\">0</span>            <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@m</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"sy0\">;</span><span class=\"re0\">$n</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> func<span class=\"br0\">(</span> <span class=\"re0\">@m</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"sy0\">;</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">@m</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"re0\">$n</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">@m</span><span class=\"br0\">[</span><span class=\"re0\">$_</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..^</span> <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@m</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"sy0\">;</span><span class=\"re0\">$_</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> func<span class=\"br0\">(</span> <span class=\"re0\">@m</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"sy0\">;</span><span class=\"re0\">$_</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">@m</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"re0\">$_</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">@m</span><span class=\"br0\">[</span><span class=\"re0\">$n</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><span class=\"re0\">$_</span><span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span> <span class=\"kw1\">for</span> <span class=\"nu0\">1</span> <span class=\"sy0\">..</span>  <span class=\"re0\">$n</span><span class=\"sy0\">;</span><br/>    <span class=\"re0\">@m</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># I am but mad north-northwest...</span><br/><span class=\"kw2\">sub</span> madd<span class=\"sy0\">-</span>n<span class=\"sy0\">-</span>nw<span class=\"br0\">(</span><span class=\"re0\">@m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> grow<span class=\"sy0\">-</span>matrix <span class=\"re0\">@m</span><span class=\"sy0\">,</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$w</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$nw</span> <span class=\"br0\">{</span>  <span class=\"re0\">$n</span> <span class=\"sy0\">+</span> <span class=\"re0\">$nw</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> madd<span class=\"sy0\">-</span>w<span class=\"sy0\">-</span>nw<span class=\"br0\">(</span><span class=\"re0\">@m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> grow<span class=\"sy0\">-</span>matrix <span class=\"re0\">@m</span><span class=\"sy0\">,</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$w</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$nw</span> <span class=\"br0\">{</span>  <span class=\"re0\">$w</span> <span class=\"sy0\">+</span> <span class=\"re0\">$nw</span> <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"kw2\">sub</span> madd<span class=\"sy0\">-</span>w<span class=\"sy0\">-</span>n <span class=\"br0\">(</span><span class=\"re0\">@m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span> grow<span class=\"sy0\">-</span>matrix <span class=\"re0\">@m</span><span class=\"sy0\">,</span> <span class=\"sy0\">-&gt;</span> <span class=\"re0\">$w</span><span class=\"sy0\">,</span> <span class=\"re0\">$n</span><span class=\"sy0\">,</span> <span class=\"re0\">$nw</span> <span class=\"br0\">{</span>  <span class=\"re0\">$w</span> <span class=\"sy0\">+</span> <span class=\"re0\">$n</span>  <span class=\"br0\">}</span> <span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"co1\"># Define 3 infinite sequences of Pascal matrices.</span><br/><span class=\"kw1\">constant</span> upper<span class=\"sy0\">-</span>tri <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">&amp;madd</span><span class=\"sy0\">-</span>w<span class=\"sy0\">-</span>nw <span class=\"sy0\">...</span> <span class=\"sy0\">*;</span><br/><span class=\"kw1\">constant</span> lower<span class=\"sy0\">-</span>tri <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">&amp;madd</span><span class=\"sy0\">-</span>n<span class=\"sy0\">-</span>nw <span class=\"sy0\">...</span> <span class=\"sy0\">*;</span><br/><span class=\"kw1\">constant</span> symmetric <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">,</span> <span class=\"re0\">&amp;madd</span><span class=\"sy0\">-</span>w<span class=\"sy0\">-</span>n  <span class=\"sy0\">...</span> <span class=\"sy0\">*;</span><br/>\u00a0<br/>show_m upper<span class=\"sy0\">-</span>tri<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>show_m lower<span class=\"sy0\">-</span>tri<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>show_m symmetric<span class=\"br0\">[</span><span class=\"nu0\">4</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/>\u00a0<br/><span class=\"kw2\">sub</span> show_m <span class=\"br0\">(</span><span class=\"re0\">@m</span><span class=\"br0\">)</span> <span class=\"br0\">{</span><br/><span class=\"kw1\">my</span> \\n <span class=\"sy0\">=</span> <span class=\"re0\">@m</span><span class=\"sy0\">.</span><span class=\"kw3\">shape</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"sy0\">;</span><br/><span class=\"kw1\">for</span> <span class=\"sy0\">^</span>n <span class=\"kw1\">X</span> <span class=\"sy0\">^</span>n <span class=\"sy0\">-&gt;</span> <span class=\"br0\">(</span>\\<span class=\"kw3\">i</span><span class=\"sy0\">,</span> \\j<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    <span class=\"kw3\">print</span> <span class=\"re0\">@m</span><span class=\"br0\">[</span><span class=\"kw3\">i</span><span class=\"sy0\">;</span>j<span class=\"br0\">]</span><span class=\"sy0\">.</span><span class=\"kw3\">fmt</span><span class=\"br0\">(</span><span class=\"st0\">\"%{1+max(@m).chars}d\"</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> <br/>    <span class=\"kw3\">print</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span> <span class=\"kw1\">if</span> j<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">eq</span> n<span class=\"sy0\">;</span><br/><span class=\"br0\">}</span><br/><span class=\"kw3\">say</span> <span class=\"st_h\">''</span><span class=\"sy0\">;</span><br/><span class=\"br0\">}</span></pre>"}, {"lang": "Phix", "loc": 45, "block": "<pre class=\"text highlighted_source\">function pascal_upper(integer n)<br/>    sequence res = repeat(repeat(0,n),n)<br/>    res[1] = repeat(1,n)<br/>    for i=2 to n do<br/>        for j=2 to i do<br/>            res[j,i] = res[j,i-1]+res[j-1,i-1]<br/>        end for<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>function pascal_lower(integer n)<br/>    sequence res = repeat(repeat(0,n),n)<br/>    for i=1 to n do<br/>        res[i,1] = 1<br/>    end for<br/>    for i=2 to n do<br/>        for j=2 to i do<br/>            res[i,j] = res[i-1,j]+res[i-1,j-1]<br/>        end for<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>function pascal_symmetric(integer n)<br/>    sequence res = repeat(repeat(0,n),n)<br/>    for i=1 to n do<br/>        res[i,1] = 1<br/>        res[1,i] = 1<br/>    end for<br/>    for i=2 to n do<br/>        for j = 2 to n do<br/>            res[i,j] = res[i-1,j]+res[i,j-1]<br/>        end for<br/>    end for<br/>    return res<br/>end function<br/>\u00a0<br/>ppOpt({pp_Nest,1,pp_StrFmt,-2,pp_IntFmt,\"%2d\"})<br/>puts(1,\"=== Pascal upper matrix ===\\n\")<br/>pp(pascal_upper(5))<br/>puts(1,\"=== Pascal lower matrix ===\\n\")<br/>pp(pascal_lower(5))<br/>puts(1,\"=== Pascal symmetrical matrix ===\\n\")<br/>pp(pascal_symmetric(5))</pre>"}, {"lang": "PicoLisp", "loc": 30, "block": "<pre class=\"text highlighted_source\">(setq<br/>   Low '(A B)<br/>   Upp '(B A)<br/>   Sym '((+ A B) A) )<br/>\u00a0<br/>(de binomial (N K)<br/>   (let f<br/>      '((N)<br/>         (if (=0 N) 1 (apply * (range 1 N))) )<br/>      (if (&gt; K N)<br/>         0<br/>         (/<br/>            (f N)<br/>            (* (f (- N K)) (f K)) ) ) ) )<br/>(de pascal (N Z)<br/>   (for Lst<br/>      (mapcar<br/>         '((A)<br/>            (mapcar<br/>               '((B) (apply binomial (mapcar eval Z)))<br/>               (range 0 N) ) )<br/>         (range 0 N) )<br/>      (for L Lst<br/>         (prin (align 2 L) \" \") )<br/>      (prinl) )<br/>   (prinl) )<br/>\u00a0<br/>(pascal 4 Low)<br/>(pascal 4 Upp)<br/>(pascal 4 Sym)</pre>"}, {"lang": "PL/I", "loc": 87, "block": "<pre class=\"pli highlighted_source\"><span class=\"sy0\">*</span>process source attributes xref or<span class=\"br0\">(</span>!<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> pat<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span> <span class=\"kw1\">Options</span><span class=\"br0\">(</span><span class=\"kw1\">main</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span><span class=\"kw1\">HBOUND</span><span class=\"sy0\">,</span><span class=\"kw1\">MAX</span><span class=\"sy0\">,</span><span class=\"kw1\">RIGHT</span><span class=\"br0\">)</span> <span class=\"kw1\">Builtin</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"kw1\">SYSPRINT</span> <span class=\"kw1\">Print</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> N <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> pd <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">500</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> fact<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">10</span><span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> pt<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">500</span><span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> mk_fact<span class=\"br0\">(</span>fact<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">Call</span> Pascal<span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"st0\">'U'</span><span class=\"sy0\">,</span>pt<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">Call</span> show<span class=\"br0\">(</span><span class=\"st0\">'Pascal upper triangular matrix'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> Pascal<span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"st0\">'L'</span><span class=\"sy0\">,</span>pt<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">Call</span> show<span class=\"br0\">(</span><span class=\"st0\">'Pascal lower triangular matrix'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Call</span> Pascal<span class=\"br0\">(</span>n<span class=\"sy0\">,</span><span class=\"st0\">'S'</span><span class=\"sy0\">,</span>pt<span class=\"br0\">)</span><span class=\"sy0\">;</span> <span class=\"kw1\">Call</span> show<span class=\"br0\">(</span><span class=\"st0\">'Pascal symmetric matrix'</span>       <span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>\u00a0<br/> Pascal<span class=\"sy0\">:</span> <span class=\"kw1\">proc</span><span class=\"br0\">(</span>n<span class=\"sy0\">,</span>which<span class=\"sy0\">,</span>dd<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> n <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> which <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>i<span class=\"sy0\">,</span>j<span class=\"sy0\">,</span>k<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> dd<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:</span><span class=\"nu0\">500</span><span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> k<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/> dd<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Do</span> j<span class=\"sy0\">=</span><span class=\"nu0\">0</span> <span class=\"kw1\">To</span> n<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>     k<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">Select</span><span class=\"br0\">(</span>which<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'U'</span><span class=\"br0\">)</span> dd<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">=</span>comb<span class=\"br0\">(</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"sy0\">,</span>  <span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'L'</span><span class=\"br0\">)</span> dd<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">=</span>comb<span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">,</span>  <span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">When</span><span class=\"br0\">(</span><span class=\"st0\">'S'</span><span class=\"br0\">)</span> dd<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"sy0\">=</span>comb<span class=\"br0\">(</span><span class=\"br0\">(</span>i<span class=\"sy0\">+</span>j<span class=\"br0\">)</span><span class=\"sy0\">,</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">Otherwise</span><span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     dd<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"kw1\">max</span><span class=\"br0\">(</span>dd<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">,</span>dd<span class=\"br0\">(</span>k<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> mk_fact<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> f<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"sy0\">:*</span><span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> i <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> f<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Do</span> i<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"kw1\">hbound</span><span class=\"br0\">(</span>f<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>  f<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"sy0\">=</span>f<span class=\"br0\">(</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">*</span>i<span class=\"sy0\">;</span><br/>  <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> comb<span class=\"sy0\">:</span> <span class=\"kw1\">proc</span><span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"kw1\">Returns</span><span class=\"br0\">(</span><span class=\"kw1\">pic</span><span class=\"st0\">'z9'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>x<span class=\"sy0\">,</span>y<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>j<span class=\"sy0\">,</span>z<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> res <span class=\"kw1\">Pic</span><span class=\"st0\">'Z9'</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Select</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">When</span><span class=\"br0\">(</span>x<span class=\"sy0\">=</span>y<span class=\"br0\">)</span> res<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">When</span><span class=\"br0\">(</span>y<span class=\"sy0\">&gt;</span>x<span class=\"br0\">)</span> res<span class=\"sy0\">=</span><span class=\"nu0\">0</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Otherwise</span> <span class=\"kw1\">Do</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">If</span> x<span class=\"sy0\">-</span>y<span class=\"sy0\">&lt;</span>y <span class=\"kw1\">then</span><br/>       y<span class=\"sy0\">=</span>x<span class=\"sy0\">-</span>y<span class=\"sy0\">;</span><br/>     z<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">do</span> j<span class=\"sy0\">=</span>x<span class=\"sy0\">-</span>y<span class=\"sy0\">+</span><span class=\"nu0\">1</span> <span class=\"kw1\">to</span> x<span class=\"sy0\">;</span><br/>       z<span class=\"sy0\">=</span>z<span class=\"sy0\">*</span>j<span class=\"sy0\">;</span><br/>       <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>     res<span class=\"sy0\">=</span>z<span class=\"sy0\">/</span>fact<span class=\"br0\">(</span>y<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Return</span><span class=\"br0\">(</span>res<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> show<span class=\"sy0\">:</span> <span class=\"kw1\">Proc</span><span class=\"br0\">(</span>head<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> head <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"sy0\">*</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> <span class=\"br0\">(</span>n<span class=\"sy0\">,</span>r<span class=\"sy0\">,</span>c<span class=\"sy0\">,</span>pl<span class=\"br0\">)</span> <span class=\"kw1\">Bin</span> <span class=\"kw1\">Fixed</span><span class=\"br0\">(</span><span class=\"nu0\">31</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> row <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">50</span><span class=\"br0\">)</span> <span class=\"kw1\">Var</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> p <span class=\"kw1\">Pic</span><span class=\"st0\">'z9'</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">If</span> pt<span class=\"br0\">(</span><span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">&lt;</span><span class=\"nu0\">10</span> <span class=\"kw1\">Then</span> pl<span class=\"sy0\">=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>             <span class=\"kw1\">Else</span> pl<span class=\"sy0\">=</span><span class=\"nu0\">2</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Dcl</span> sep<span class=\"br0\">(</span><span class=\"nu0\">5</span><span class=\"br0\">)</span> <span class=\"kw1\">Char</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"kw1\">Init</span><span class=\"br0\">(</span><span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"st0\">','</span><span class=\"sy0\">,</span><span class=\"st0\">']'</span><span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"sy0\">,</span>head<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">do</span> r<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">if</span> r<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">then</span> row<span class=\"sy0\">=</span><span class=\"st0\">'[['</span><span class=\"sy0\">;</span><br/>          <span class=\"kw1\">else</span> row<span class=\"sy0\">=</span><span class=\"st0\">' ['</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">do</span> c<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> <span class=\"nu0\">5</span><span class=\"sy0\">;</span><br/>     n<span class=\"sy0\">+=</span><span class=\"nu0\">1</span><span class=\"sy0\">;</span><br/>     p<span class=\"sy0\">=</span>pt<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     row<span class=\"sy0\">=</span>row!!<span class=\"kw1\">right</span><span class=\"br0\">(</span>p<span class=\"sy0\">,</span>pl<span class=\"br0\">)</span>!!sep<span class=\"br0\">(</span>c<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>     <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span>row<span class=\"br0\">)</span><span class=\"br0\">(</span><span class=\"kw1\">Skip</span><span class=\"sy0\">,</span>a<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/>   <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">Put</span> <span class=\"kw1\">Edit</span><span class=\"br0\">(</span><span class=\"st0\">']'</span><span class=\"br0\">)</span><span class=\"br0\">(</span>A<span class=\"br0\">)</span><span class=\"sy0\">;</span><br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span><br/>\u00a0<br/> <span class=\"kw1\">End</span><span class=\"sy0\">;</span></pre>"}, {"lang": "PureBasic", "loc": 54, "block": "<pre class=\"purebasic highlighted_source\"><span class=\"kw1\">EnableExplicit</span><br/><span class=\"kw1\">Define</span>.i x<span class=\"sy0\">=</span><span class=\"nu0\">5</span>, I, J<br/>\u00a0<br/><span class=\"kw1\">Macro</span> Print_Pascal_matrix<span class=\"br0\">(</span>typ<span class=\"br0\">)</span><br/>  <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span>typ<span class=\"br0\">)</span><br/>  <span class=\"kw1\">For</span> I<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> x<br/>    <span class=\"kw1\">For</span> J<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> x\u00a0: <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"kw2\">RSet</span><span class=\"br0\">(</span><span class=\"kw2\">Str</span><span class=\"br0\">(</span>p<span class=\"br0\">(</span>I,J<span class=\"br0\">)</span><span class=\"br0\">)</span>,<span class=\"nu0\">3</span>,<span class=\"st0\">\" \"</span><span class=\"br0\">)</span><span class=\"sy0\">+</span><span class=\"kw2\">Space</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span>  <br/>    <span class=\"kw2\">PrintN</span><span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Next</span><br/>  <span class=\"kw2\">Print</span><span class=\"br0\">(</span><span class=\"sy0\">~</span><span class=\"st0\">\"\\n\\n\"</span><span class=\"br0\">)</span>  <br/><span class=\"kw1\">EndMacro</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Pascal_sym<span class=\"br0\">(</span>n.i,Array p.i<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>  <span class=\"kw1\">Define</span>.i I,J  <br/>  p<span class=\"br0\">(</span><span class=\"nu0\">1</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">For</span> I<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>    <span class=\"kw1\">For</span> J<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n\u00a0: p<span class=\"br0\">(</span>I,J<span class=\"br0\">)</span><span class=\"sy0\">=</span>p<span class=\"br0\">(</span>I<span class=\"sy0\">-</span><span class=\"nu0\">1</span>,J<span class=\"br0\">)</span><span class=\"sy0\">+</span>p<span class=\"br0\">(</span>I,J<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span><br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Pascal_upp<span class=\"br0\">(</span>n.i,Array p.i<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>  <span class=\"kw1\">Define</span>.i I,J  <br/>  p<span class=\"br0\">(</span><span class=\"nu0\">0</span>,<span class=\"nu0\">0</span><span class=\"br0\">)</span><span class=\"sy0\">=</span><span class=\"nu0\">1</span><br/>  <span class=\"kw1\">For</span> I<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>    <span class=\"kw1\">For</span> J<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n\u00a0: p<span class=\"br0\">(</span>I,J<span class=\"br0\">)</span><span class=\"sy0\">=</span>p<span class=\"br0\">(</span>I<span class=\"sy0\">-</span><span class=\"nu0\">1</span>,J<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">+</span>p<span class=\"br0\">(</span>I,J<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span>  <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw1\">Procedure</span> Pascal_low<span class=\"br0\">(</span>n.i,Array p.i<span class=\"br0\">(</span><span class=\"nu0\">2</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Define</span>.i I,J<br/>  Pascal_upp<span class=\"br0\">(</span>n,p<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>  <span class=\"kw1\">Dim</span> p2.i<span class=\"br0\">(</span>n,n<span class=\"br0\">)</span><br/>  CopyArray<span class=\"br0\">(</span>p<span class=\"br0\">(</span><span class=\"br0\">)</span>,p2<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span>  <br/>  <span class=\"kw1\">For</span> I<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n<br/>    <span class=\"kw1\">For</span> J<span class=\"sy0\">=</span><span class=\"nu0\">1</span> <span class=\"kw1\">To</span> n\u00a0: <span class=\"kw1\">Swap</span> p<span class=\"br0\">(</span>J,I<span class=\"br0\">)</span>,p2<span class=\"br0\">(</span>I,J<span class=\"br0\">)</span>\u00a0: <span class=\"kw1\">Next</span><br/>  <span class=\"kw1\">Next</span>  <br/><span class=\"kw1\">EndProcedure</span><br/>\u00a0<br/><span class=\"kw2\">OpenConsole</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> p.i<span class=\"br0\">(</span>x,x<span class=\"br0\">)</span><br/>Pascal_upp<span class=\"br0\">(</span>x,p<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>Print_Pascal_matrix<span class=\"br0\">(</span><span class=\"st0\">\"Upper:\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> p.i<span class=\"br0\">(</span>x,x<span class=\"br0\">)</span><br/>Pascal_low<span class=\"br0\">(</span>x,p<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>Print_Pascal_matrix<span class=\"br0\">(</span><span class=\"st0\">\"Lower:\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw1\">Dim</span> p.i<span class=\"br0\">(</span>x,x<span class=\"br0\">)</span><br/>Pascal_sym<span class=\"br0\">(</span>x,p<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">)</span><br/>Print_Pascal_matrix<span class=\"br0\">(</span><span class=\"st0\">\"Symmetric:\"</span><span class=\"br0\">)</span><br/>\u00a0<br/><span class=\"kw2\">Input</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/><span class=\"kw1\">End</span></pre>"}, {"lang": "Python", "loc": 30, "block": "<pre class=\"python highlighted_source\"><span class=\"kw1\">from</span> <span class=\"kw3\">pprint</span> <span class=\"kw1\">import</span> <span class=\"kw3\">pprint</span> <span class=\"kw1\">as</span> pp<br/>\u00a0<br/><span class=\"kw1\">def</span> pascal_upp<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    s <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> * n <span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    s<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> * n<br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>i<span class=\"sy0\">,</span> n<span class=\"br0\">)</span>:<br/>            s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> s<span class=\"br0\">[</span>i-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j-<span class=\"nu0\">1</span><span class=\"br0\">]</span> + s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> s<br/>\u00a0<br/><span class=\"kw1\">def</span> pascal_low<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    <span class=\"co1\"># transpose of pascal_upp(n)</span><br/>    <span class=\"kw1\">return</span> <span class=\"br0\">[</span><span class=\"kw2\">list</span><span class=\"br0\">(</span>x<span class=\"br0\">)</span> <span class=\"kw1\">for</span> x <span class=\"kw1\">in</span> <span class=\"kw2\">zip</span><span class=\"br0\">(</span>*pascal_upp<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">]</span><br/>\u00a0<br/><span class=\"kw1\">def</span> pascal_sym<span class=\"br0\">(</span>n<span class=\"br0\">)</span>:<br/>    s <span class=\"sy0\">=</span> <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> * n <span class=\"kw1\">for</span> _ <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">for</span> i <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span>:<br/>        <span class=\"kw1\">for</span> j <span class=\"kw1\">in</span> <span class=\"kw2\">range</span><span class=\"br0\">(</span><span class=\"nu0\">1</span><span class=\"sy0\">,</span> n<span class=\"br0\">)</span>:<br/>            s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> <span class=\"sy0\">=</span> s<span class=\"br0\">[</span>i-<span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> + s<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j-<span class=\"nu0\">1</span><span class=\"br0\">]</span><br/>    <span class=\"kw1\">return</span> s<br/>\u00a0<br/>\u00a0<br/><span class=\"kw1\">if</span> __name__ <span class=\"sy0\">==</span> <span class=\"st0\">\"__main__\"</span>:<br/>    n <span class=\"sy0\">=</span> <span class=\"nu0\">5</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Upper:\"</span><span class=\"br0\">)</span><br/>    pp<span class=\"br0\">(</span>pascal_upp<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Lower:\"</span><span class=\"br0\">)</span><br/>    pp<span class=\"br0\">(</span>pascal_low<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span><br/>    <span class=\"kw1\">print</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>Symmetric:\"</span><span class=\"br0\">)</span><br/>    pp<span class=\"br0\">(</span>pascal_sym<span class=\"br0\">(</span>n<span class=\"br0\">)</span><span class=\"br0\">)</span></pre>"}, {"lang": "R", "loc": 37, "block": "<pre class=\"text highlighted_source\">lower.pascal &lt;- function(n) {<br/>  a &lt;- matrix(0, n, n)<br/>  a[, 1] &lt;- 1<br/>  if (n &gt; 1) {<br/>    for (i in 2:n) {<br/>      j &lt;- 2:i<br/>      a[i, j] &lt;- a[i - 1, j - 1] + a[i - 1, j]<br/>    }<br/>  }<br/>  a<br/>}<br/>\u00a0<br/># Alternate version<br/>lower.pascal.alt &lt;- function(n) {<br/>  a &lt;- matrix(0, n, n)<br/>  a[, 1] &lt;- 1<br/>  if (n &gt; 1) {<br/>    for (j in 2:n) {<br/>      i &lt;- j:n<br/>      a[i, j] &lt;- cumsum(a[i - 1, j - 1])<br/>    }<br/>  }<br/>  a<br/>}<br/>\u00a0<br/># While it's possible to modify lower.pascal to get the upper matrix,<br/># here we simply transpose the lower one.<br/>upper.pascal &lt;- function(n) t(lower.pascal(n))<br/>\u00a0<br/>symm.pascal &lt;- function(n) {<br/>  a &lt;- matrix(0, n, n)<br/>  a[, 1] &lt;- 1<br/>  for (i in 2:n) {<br/>    a[, i] &lt;- cumsum(a[, i - 1])<br/>  }<br/>  a<br/>}</pre>"}, {"lang": "Racket", "loc": 25, "block": "<pre class=\"text highlighted_source\">#lang racket<br/>(require math/number-theory)<br/>\u00a0<br/>(define (pascal-upper-matrix n)<br/>  (for/list ((i n)) (for/list ((j n)) (j . binomial . i))))<br/>\u00a0<br/>(define (pascal-lower-matrix n)<br/>  (for/list ((i n)) (for/list ((j n)) (i . binomial . j))))<br/>\u00a0<br/>(define (pascal-symmetric-matrix n)<br/>  (for/list ((i n)) (for/list ((j n)) ((+ i j) . binomial . j))))<br/>\u00a0<br/>(define (matrix-&gt;string m)<br/>  (define col-width<br/>    (for*/fold ((rv 1)) ((r m) (c r))<br/>      (if (zero? c) rv (max rv (+ 1 (order-of-magnitude c))))))<br/>  (string-append<br/>   (string-join<br/>   (for/list ((r m))<br/>     (string-join (map (\u03bb (c) (~a #:width col-width #:align 'right c)) r) \" \")) \"\\n\")<br/>   \"\\n\"))<br/>\u00a0<br/>(printf \"Upper:~%~a~%\" (matrix-&gt;string (pascal-upper-matrix 5)))<br/>(printf \"Lower:~%~a~%\" (matrix-&gt;string (pascal-lower-matrix 5)))<br/>(printf \"Symmetric:~%~a~%\" (matrix-&gt;string (pascal-symmetric-matrix 5)))</pre>"}, {"lang": "REXX", "loc": 35, "block": "<pre class=\"rexx highlighted_source\"><span class=\"coMULTI\">/*REXX program  generates and displays  three forms of an   NxN   Pascal matrix.        */</span><br/><span class=\"kw1\">numeric</span> <span class=\"kw2\">digits</span> <span class=\"nu0\">50</span>                                <span class=\"coMULTI\">/*be able to calculate huge factorials.*/</span><br/><span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N <span class=\"sy0\">.</span>                                    <span class=\"coMULTI\">/*obtain the optional matrix size  (N).*/</span><br/><span class=\"kw1\">if</span> N==<span class=\"st0\">''</span>  <span class=\"kw3\">then</span> N=<span class=\"nu0\">5</span>                               <span class=\"coMULTI\">/*Not specified?  Then use the default.*/</span><br/>                        <span class=\"kw1\">call</span> show  N,  upp<span class=\"br0\">(</span>N<span class=\"br0\">)</span>,  <span class=\"st0\">'Pascal upper triangular matrix'</span><br/>                        <span class=\"kw1\">call</span> show  N,  low<span class=\"br0\">(</span>N<span class=\"br0\">)</span>,  <span class=\"st0\">'Pascal lower triangular matrix'</span><br/>                        <span class=\"kw1\">call</span> show  N,  sym<span class=\"br0\">(</span>N<span class=\"br0\">)</span>,  <span class=\"st0\">'Pascal symmetric matrix'</span><br/><span class=\"kw1\">exit</span>                                             <span class=\"coMULTI\">/*stick a fork in it,  we're all done. */</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>upp:  <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N;  $=                <span class=\"coMULTI\">/*gen Pascal upper triangular matrix.  */</span><br/>            <span class=\"kw1\">do</span> i=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> N;  <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> N; $=$ comb<span class=\"br0\">(</span>j,   i<span class=\"br0\">)</span>;   <span class=\"kw3\">end</span>; <span class=\"kw3\">end</span>;   <span class=\"kw1\">return</span> $<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>low:  <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N;  $=                <span class=\"coMULTI\">/*gen Pascal lower triangular matrix.  */</span><br/>            <span class=\"kw1\">do</span> i=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> N;  <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> N; $=$ comb<span class=\"br0\">(</span>i,   j<span class=\"br0\">)</span>;   <span class=\"kw3\">end</span>; <span class=\"kw3\">end</span>;   <span class=\"kw1\">return</span> $<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>sym:  <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> N;  $=                <span class=\"coMULTI\">/*generate  Pascal symmetric  matrix.  */</span><br/>            <span class=\"kw1\">do</span> i=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> N;  <span class=\"kw1\">do</span> j=<span class=\"nu0\">0</span>  <span class=\"kw2\">for</span> N; $=$ comb<span class=\"br0\">(</span>i+j, i<span class=\"br0\">)</span>;   <span class=\"kw3\">end</span>; <span class=\"kw3\">end</span>;   <span class=\"kw1\">return</span> $<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>!:    <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x; \u00a0!=<span class=\"nu0\">1</span>;    <span class=\"kw1\">do</span> j=<span class=\"nu0\">2</span>  <span class=\"kw2\">to</span> x; \u00a0!=!<span class=\"sy0\">*</span>j;  <span class=\"kw3\">end</span>;         <span class=\"kw1\">return</span>\u00a0!<br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>comb: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> x,y;        <span class=\"kw1\">if</span> x=y  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">1</span>                <span class=\"coMULTI\">/* {=} case.*/</span><br/>                                       <span class=\"kw1\">if</span> y<span class=\"sy0\">&gt;</span>x  <span class=\"kw3\">then</span> <span class=\"kw1\">return</span> <span class=\"nu0\">0</span>                <span class=\"coMULTI\">/* {&gt;} case.*/</span><br/>      <span class=\"kw1\">if</span> x-y<span class=\"sy0\">&lt;</span>y  <span class=\"kw3\">then</span> y=x-y; _=<span class=\"nu0\">1</span>;   <span class=\"kw1\">do</span> j=x-y+<span class=\"nu0\">1</span>  <span class=\"kw2\">to</span> x; _=_<span class=\"sy0\">*</span>j; <span class=\"kw3\">end</span>;           <span class=\"kw1\">return</span> _ <span class=\"sy0\">/</span>\u00a0!<span class=\"br0\">(</span>y<span class=\"br0\">)</span><br/><span class=\"coMULTI\">/*\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500*/</span><br/>show: <span class=\"kw1\">procedure</span>; <span class=\"kw1\">parse</span> <span class=\"kw1\">arg</span> s,@;   w=<span class=\"nu0\">0</span>;    #=<span class=\"nu0\">0</span>                               <span class=\"coMULTI\">/*get args. */</span><br/>                           <span class=\"kw1\">do</span> x=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> s<span class=\"sy0\">**</span><span class=\"nu0\">2</span>;  w=<span class=\"kw6\">max</span><span class=\"br0\">(</span>w,<span class=\"nu0\">1</span>+<span class=\"kw6\">length</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>@,x<span class=\"br0\">)</span><span class=\"br0\">)</span><span class=\"br0\">)</span>;  <span class=\"kw3\">end</span><br/>                 <span class=\"kw1\">say</span>;   <span class=\"kw1\">say</span> <span class=\"kw6\">center</span><span class=\"br0\">(</span><span class=\"kw1\">arg</span><span class=\"br0\">(</span><span class=\"nu0\">3</span><span class=\"br0\">)</span>, <span class=\"nu0\">50</span>, <span class=\"st0\">'\u2500'</span><span class=\"br0\">)</span>                         <span class=\"coMULTI\">/*show title*/</span><br/>                           <span class=\"kw1\">do</span>    r=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> s;  <span class=\"kw1\">if</span> r==<span class=\"nu0\">1</span>  <span class=\"kw3\">then</span> $=<span class=\"st0\">'[['</span>          <span class=\"coMULTI\">/*row  1    */</span><br/>                                                       <span class=\"kw3\">else</span> $=<span class=\"st0\">' ['</span>          <span class=\"coMULTI\">/*rows 2   N*/</span><br/>                              <span class=\"kw1\">do</span> c=<span class=\"nu0\">1</span>  <span class=\"kw2\">for</span> s;  #=#+<span class=\"nu0\">1</span>;   e= <span class=\"br0\">(</span>c==s<span class=\"br0\">)</span>            <span class=\"coMULTI\">/*e \u2261 \"end\".*/</span><br/>                              $=$ <span class=\"sy0\">||</span> <span class=\"kw6\">right</span><span class=\"br0\">(</span><span class=\"kw6\">word</span><span class=\"br0\">(</span>@, #<span class=\"br0\">)</span>, w<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">','</span>, <span class=\"sy0\">\\</span>e<span class=\"br0\">)</span> <span class=\"sy0\">||</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">\"]\"</span>, e<span class=\"br0\">)</span><br/>                              <span class=\"kw3\">end</span>   <span class=\"coMULTI\">/*c*/</span>                                   <span class=\"coMULTI\">/* [\u2191]  row.*/</span><br/>                           <span class=\"kw1\">say</span> $ <span class=\"sy0\">||</span> <span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">','</span>, r<span class=\"sy0\">\\</span>==s<span class=\"br0\">)</span><span class=\"kw6\">left</span><span class=\"br0\">(</span><span class=\"st0\">\"]\"</span>, r==s<span class=\"br0\">)</span>         <span class=\"coMULTI\">/*show row. */</span><br/>                           <span class=\"kw3\">end</span>     <span class=\"coMULTI\">/*r*/</span><br/>                 <span class=\"kw1\">return</span></pre>"}, {"lang": "Ring", "loc": 75, "block": "<pre class=\"text highlighted_source\">\u00a0<br/># Project\u00a0: Pascal matrix generation<br/>\u00a0<br/>load \"stdlib.ring\"<br/>res = newlist(5,5)<br/>\u00a0<br/>see \"=== Pascal upper matrix ===\" + nl<br/>result = pascalupper(5)<br/>showarray(result)<br/>\u00a0<br/>see nl + \"=== Pascal lower matrix ===\" + nl<br/>result = pascallower(5)<br/>showarray(result)<br/>\u00a0<br/>see nl + \"=== Pascal symmetrical matrix ===\" + nl<br/>result = pascalsymmetric(5)<br/>showarray(result)<br/>\u00a0<br/>func pascalupper(n)<br/>    for m=1 to n<br/>          for p=1 to n<br/>               res[m][p] = 0<br/>          next<br/>    next <br/>    for p=1 to n<br/>         res[1][p] = 1<br/>    next    <br/>    for i=2 to n <br/>        for j=2 to i <br/>            res[j][i] = res[j][i-1]+res[j-1][i-1]<br/>        end <br/>    end <br/>    return res<br/>\u00a0<br/>func pascallower(n)<br/>        for m=1 to n<br/>              for p=1 to n<br/>                   res[m][p] = 0<br/>              next<br/>        next<br/>       for p=1 to n  <br/>             res[p][1] = 1<br/>       next<br/>       for i=2 to n <br/>            for j=2 to i <br/>                 res[i][j] = res[i-1][j]+res[i-1][j-1]<br/>            next<br/>        next<br/>        return res<br/>\u00a0<br/>func pascalsymmetric(n)<br/>        for m=1 to n<br/>              for p=1 to n<br/>                   res[m][p] = 0<br/>              next<br/>        next<br/>        for p=1 to n <br/>              res[p][1] = 1<br/>              res[1][p] = 1<br/>        next<br/>        for i=2 to n <br/>             for j = 2 to n <br/>                  res[i][j] = res[i-1][j]+res[i][j-1]<br/>             next<br/>        next<br/>        return res<br/>\u00a0<br/>func showarray(result)<br/>        for n=1 to 5<br/>              for m=1 to 5<br/>                   see \"\" + result[n][m] + \" \"<br/>              next<br/>             see nl<br/>        next<br/>\u00a0</pre>"}, {"lang": "Ruby", "loc": 10, "block": "<pre class=\"ruby highlighted_source\"><span class=\"co1\">#Upper, lower, and symetric Pascal Matrix - Nigel Galloway: May 3rd., 21015</span><br/><span class=\"kw3\">require</span> <span class=\"st0\">'pp'</span><br/>\u00a0<br/>ng = <span class=\"br0\">(</span>g = <span class=\"nu0\">0</span>..<span class=\"nu0\">4</span><span class=\"br0\">)</span>.<span class=\"me1\">collect</span><span class=\"br0\">{</span><span class=\"br0\">[</span><span class=\"br0\">]</span><span class=\"br0\">}</span><br/>g.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> g.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>j<span class=\"sy0\">|</span> ng<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = i==<span class=\"nu0\">0</span>\u00a0? <span class=\"nu0\">1</span>\u00a0: j<span class=\"sy0\">&lt;</span>i\u00a0? <span class=\"nu0\">0</span>\u00a0: ng<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>ng<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>pp ng; <span class=\"kw3\">puts</span><br/>g.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> g.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>j<span class=\"sy0\">|</span> ng<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = j==<span class=\"nu0\">0</span>\u00a0? <span class=\"nu0\">1</span>\u00a0: i<span class=\"sy0\">&lt;</span>j\u00a0? <span class=\"nu0\">0</span>\u00a0: ng<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"sy0\">+</span>ng<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>pp ng; <span class=\"kw3\">puts</span><br/>g.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> g.<span class=\"me1\">each</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>j<span class=\"sy0\">|</span> ng<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"br0\">]</span> = <span class=\"br0\">(</span>i==<span class=\"nu0\">0</span> <span class=\"kw1\">or</span> j==<span class=\"nu0\">0</span><span class=\"br0\">)</span>\u00a0? <span class=\"nu0\">1</span>\u00a0: ng<span class=\"br0\">[</span>i<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>j  <span class=\"br0\">]</span><span class=\"sy0\">+</span>ng<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>j<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">}</span><span class=\"br0\">}</span><br/>pp ng</pre>"}, {"lang": "Scala", "loc": 65, "block": "<pre class=\"scala highlighted_source\"><span class=\"co1\">//Pascal Matrix Generator</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">object</span></a> pascal<span class=\"br0\">{</span><br/>\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> main<span class=\"br0\">(</span> args<span class=\"sy0\">:</span>Array<span class=\"br0\">[</span>String<span class=\"br0\">]</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\t\tprintln<span class=\"br0\">(</span><span class=\"st0\">\"Enter the order of matrix\"</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">val</span></a> n <span class=\"sy0\">=</span> scala.<span class=\"me1\">io</span>.<span class=\"me1\">StdIn</span>.<span class=\"me1\">readInt</span><span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> F <span class=\"sy0\">=</span> <a href=\"http://scala-lang.org\"><span class=\"kw1\">new</span></a> Factorial<span class=\"br0\">(</span><span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> mx <span class=\"sy0\">=</span> Array.<span class=\"me1\">ofDim</span><span class=\"br0\">[</span>Int<span class=\"br0\">]</span><span class=\"br0\">(</span>n,n<span class=\"br0\">)</span><br/>\u00a0<br/>\t\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to <span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to <span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\t\t\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">if</span></a><span class=\"br0\">(</span> i<span class=\"sy0\">&gt;=</span>j <span class=\"br0\">)</span><span class=\"br0\">{</span>\t\t\t<span class=\"co1\">//iCj</span><br/>\t\t\t\tmx<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> F.<span class=\"me1\">fact</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> / <span class=\"br0\">(</span> <span class=\"br0\">(</span> F.<span class=\"me1\">fact</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span> F.<span class=\"me1\">fact</span><span class=\"br0\">(</span>i-j<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tprintln<span class=\"br0\">(</span><span class=\"st0\">\"iCj:\"</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to <span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">{</span>\t\t<span class=\"co1\">//iCj print</span><br/>\t\t\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> j <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to <span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\tprint<span class=\"br0\">(</span> mx<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span>+<span class=\"st0\">\" \"</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tprintln<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\tprintln<span class=\"br0\">(</span><span class=\"st0\">\"jCi:\"</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to <span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">{</span>\t\t<span class=\"co1\">//jCi print</span><br/>\t\t\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> j <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to <span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\tprint<span class=\"br0\">(</span> mx<span class=\"br0\">(</span>j<span class=\"br0\">)</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span>+<span class=\"st0\">\" \"</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tprintln<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t\t<span class=\"co1\">//(i+j)C j</span><br/>\t\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to <span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span><span class=\"sy0\">;</span> j <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to <span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\t\t\tmx<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"sy0\">=</span> F.<span class=\"me1\">fact</span><span class=\"br0\">(</span>i+j<span class=\"br0\">)</span> / <span class=\"br0\">(</span> <span class=\"br0\">(</span> F.<span class=\"me1\">fact</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"sy0\">*</span><span class=\"br0\">(</span> F.<span class=\"me1\">fact</span><span class=\"br0\">(</span>i<span class=\"br0\">)</span> <span class=\"br0\">)</span> <span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">}</span><br/>\t\t<span class=\"co1\">//print (i+j)Cj</span><br/>\t\tprintln<span class=\"br0\">(</span><span class=\"st0\">\"(i+j)Cj:\"</span><span class=\"br0\">)</span><br/>\t\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to <span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> j <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">0</span> to <span class=\"br0\">(</span>n-<span class=\"nu0\">1</span><span class=\"br0\">)</span> <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\t\tprint<span class=\"br0\">(</span> mx<span class=\"br0\">(</span>i<span class=\"br0\">)</span><span class=\"br0\">(</span>j<span class=\"br0\">)</span>+<span class=\"st0\">\" \"</span> <span class=\"br0\">)</span><br/>\t\t\t<span class=\"br0\">}</span><br/>\t\t\tprintln<span class=\"br0\">(</span><span class=\"st0\">\"\"</span><span class=\"br0\">)</span><br/>\t\t<span class=\"br0\">}</span><br/>\u00a0<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><a href=\"http://scala-lang.org\"><span class=\"kw1\">class</span></a> Factorial<span class=\"br0\">(</span><span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\u00a0<br/>\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">def</span></a> fact<span class=\"br0\">(</span> a<span class=\"sy0\">:</span>Int <span class=\"br0\">)</span><span class=\"sy0\">:</span> Int <span class=\"sy0\">=</span> <span class=\"br0\">{</span><br/>\u00a0<br/>\t\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">var</span></a> b<span class=\"sy0\">:</span>Int <span class=\"sy0\">=</span> <span class=\"nu0\">1</span><br/>\u00a0<br/>\t\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">for</span></a><span class=\"br0\">(</span> i <span class=\"sy0\">&lt;</span>- <span class=\"nu0\">2</span> to a <span class=\"br0\">)</span><span class=\"br0\">{</span><br/>\t\t\tb <span class=\"sy0\">=</span> b<span class=\"sy0\">*</span>i<br/>\t\t<span class=\"br0\">}</span><br/>\t\t<a href=\"http://scala-lang.org\"><span class=\"kw1\">return</span></a> b<br/>\t<span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "Sidef", "loc": 29, "block": "<pre class=\"ruby highlighted_source\">func grow_matrix<span class=\"br0\">(</span>matrix, callback<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    var m = matrix<br/>    var s = m.<span class=\"me1\">len</span><br/>    m<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span> = callback<span class=\"br0\">(</span><span class=\"nu0\">0</span>, m<span class=\"br0\">[</span>s<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    m<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>s<span class=\"br0\">]</span> = callback<span class=\"br0\">(</span>m<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span><span class=\"br0\">[</span>s<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, <span class=\"nu0\">0</span>, <span class=\"nu0\">0</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> m<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>s<span class=\"br0\">]</span> = callback<span class=\"br0\">(</span>m<span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>s<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, m<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>s<span class=\"br0\">]</span>, m<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">[</span>s<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>s<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">)</span><br/>    <span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> m<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span> = callback<span class=\"br0\">(</span>m<span class=\"br0\">[</span>s<span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span>, m<span class=\"br0\">[</span>s<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"sy0\">+</span><span class=\"nu0\">1</span><span class=\"br0\">]</span>, m<span class=\"br0\">[</span>s<span class=\"sy0\">-</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">)</span><span class=\"br0\">}</span> <span class=\"sy0\">*</span> <span class=\"br0\">(</span>s<span class=\"br0\">)</span><br/>    <span class=\"kw2\">return</span> m<br/><span class=\"br0\">}</span><br/>\u00a0<br/>func transpose<span class=\"br0\">(</span>matrix<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>    matrix<span class=\"br0\">[</span><span class=\"nu0\">0</span><span class=\"br0\">]</span>.<span class=\"me1\">range</span>.<span class=\"me1\">map</span><span class=\"br0\">{</span><span class=\"sy0\">|</span>i<span class=\"sy0\">|</span> matrix.<span class=\"me1\">map</span><span class=\"br0\">{</span>_<span class=\"br0\">[</span>i<span class=\"br0\">]</span><span class=\"br0\">}</span> <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>func madd_n_nw<span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"br0\">{</span> grow_matrix<span class=\"br0\">(</span>m, <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>_, n, nw<span class=\"br0\">)</span> <span class=\"br0\">{</span> n <span class=\"sy0\">+</span> nw <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>func madd_w_nw<span class=\"br0\">(</span>m<span class=\"br0\">)</span> <span class=\"br0\">{</span> grow_matrix<span class=\"br0\">(</span>m, <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>w, _, nw<span class=\"br0\">)</span> <span class=\"br0\">{</span> w <span class=\"sy0\">+</span> nw <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>func madd_w_n<span class=\"br0\">(</span>m<span class=\"br0\">)</span>  <span class=\"br0\">{</span> grow_matrix<span class=\"br0\">(</span>m, <span class=\"sy0\">-&gt;</span><span class=\"br0\">(</span>w, n, _<span class=\"br0\">)</span>  <span class=\"br0\">{</span> w <span class=\"sy0\">+</span> n  <span class=\"br0\">}</span><span class=\"br0\">)</span> <span class=\"br0\">}</span><br/>\u00a0<br/>var functions = <span class=\"br0\">[</span>madd_n_nw, madd_w_nw, madd_w_n<span class=\"br0\">]</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>f<span class=\"sy0\">|</span><br/>    func<span class=\"br0\">(</span>n<span class=\"br0\">)</span> <span class=\"br0\">{</span><br/>        var r = <span class=\"br0\">[</span><span class=\"br0\">[</span><span class=\"nu0\">1</span><span class=\"br0\">]</span><span class=\"br0\">]</span><br/>        <span class=\"br0\">{</span> f<span class=\"br0\">(</span>r<span class=\"br0\">)</span> <span class=\"br0\">}</span> <span class=\"sy0\">*</span> n<br/>        transpose<span class=\"br0\">(</span>r<span class=\"br0\">)</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/>functions.<span class=\"me1\">map</span> <span class=\"br0\">{</span> <span class=\"sy0\">|</span>f<span class=\"sy0\">|</span><br/>    f<span class=\"br0\">(</span><span class=\"nu0\">4</span><span class=\"br0\">)</span>.<span class=\"me1\">map</span> <span class=\"br0\">{</span> .<span class=\"me1\">map</span><span class=\"br0\">{</span> <span class=\"st0\">'%2s'</span> <span class=\"sy0\">%</span> _ <span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">' '</span><span class=\"br0\">)</span> <span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span><br/><span class=\"br0\">}</span>.<span class=\"me1\">join</span><span class=\"br0\">(</span><span class=\"st0\">\"<span class=\"es0\">\\n</span><span class=\"es0\">\\n</span>\"</span><span class=\"br0\">)</span>.<span class=\"me1\">say</span></pre>"}, {"lang": "Stata", "loc": 28, "block": "<pre class=\"text highlighted_source\">mata<br/>function pascal1(n) {<br/>\treturn(comb(J(1,n,0::n-1),J(n,1,0..n-1)))<br/>}<br/>\u00a0<br/>function pascal2(n) {<br/>\ta = I(n)<br/>\ta[.,1] = J(n,1,1)<br/>\tfor (i=3; i&lt;=n; i++) {<br/>\t\ta[i,2..i-1] = a[i-1,2..i-1]+a[i-1,1..i-2]<br/>\t}<br/>\treturn(a)<br/>}<br/>\u00a0<br/>function pascal3(n) {<br/>\ta = J(n,n,0)<br/>\tfor (i=1; i&lt;n; i++) {<br/>\t\ta[i+1,i] = i<br/>\t}<br/>\ts = p = I(n)<br/>\tk = 1<br/>\tfor (i=0; i&lt;n; i++) {<br/>\t\tp = p*a/k++<br/>\t\ts = s+p<br/>\t}<br/>\treturn(s)<br/>}<br/>end</pre>"}, {"lang": "Tcl", "loc": 35, "block": "<pre class=\"tcl highlighted_source\">\u00a0<br/><span class=\"kw2\">package</span> require math<br/>\u00a0<br/><span class=\"kw1\">namespace</span> <span class=\"kw1\">eval</span> pascal <span class=\"br0\">{</span><br/>    <span class=\"kw1\">proc</span> upper <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw2\">puts</span> -nonewline \\t<span class=\"br0\">[</span>::<span class=\"me1\">math</span>::<span class=\"me1\">choose</span> <span class=\"re0\">$j</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">proc</span> lower <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw2\">puts</span> -nonewline \\t<span class=\"br0\">[</span>::<span class=\"me1\">math</span>::<span class=\"me1\">choose</span> <span class=\"re0\">$i</span> <span class=\"re0\">$j</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/>    <span class=\"kw1\">proc</span> symmetric <span class=\"br0\">{</span>n<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>        <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> i <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> i<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>            <span class=\"kw1\">for</span> <span class=\"br0\">{</span><span class=\"kw1\">set</span> j <span class=\"nu0\">0</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"re0\">$j</span> <span class=\"sy0\">&lt;</span> <span class=\"re0\">$n</span><span class=\"br0\">}</span> <span class=\"br0\">{</span><span class=\"kw2\">incr</span> j<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>                <span class=\"kw2\">puts</span> -nonewline \\t<span class=\"br0\">[</span>::<span class=\"me1\">math</span>::<span class=\"me1\">choose</span> <span class=\"br0\">[</span><span class=\"kw1\">expr</span> <span class=\"br0\">{</span><span class=\"re0\">$i</span>+<span class=\"re0\">$j</span><span class=\"br0\">}</span><span class=\"br0\">]</span> <span class=\"re0\">$i</span><span class=\"br0\">]</span><br/>            <span class=\"br0\">}</span><br/>            <span class=\"kw2\">puts</span> <span class=\"st0\">\"\"</span><br/>        <span class=\"br0\">}</span><br/>    <span class=\"br0\">}</span><br/><span class=\"br0\">}</span><br/>\u00a0<br/><span class=\"kw1\">foreach</span> type <span class=\"br0\">{</span>upper lower symmetric<span class=\"br0\">}</span> <span class=\"br0\">{</span><br/>    <span class=\"kw2\">puts</span> <span class=\"st0\">\"<span class=\"es0\">\\n</span>* $type\"</span><br/>    pascal::<span class=\"re0\">$type</span> <span class=\"nu0\">5</span><br/><span class=\"br0\">}</span><br/>\u00a0</pre>"}, {"lang": "VBScript", "loc": 67, "block": "<pre class=\"vb highlighted_source\">\u00a0<br/><span class=\"kw2\">Function</span> pascal_upper(i,j)<br/>\tWScript.StdOut.Write <span class=\"st0\">\"Pascal Upper\"</span><br/>\tWScript.StdOut.WriteLine<br/>\t<span class=\"kw3\">For</span> l = i <span class=\"kw3\">To</span> j<br/>\t\t<span class=\"kw3\">For</span> m = i <span class=\"kw3\">To</span> j<br/>\t\t\t<span class=\"kw3\">If</span> l &lt;= m <span class=\"kw3\">Then</span><br/>\t\t\t\tWScript.StdOut.Write binomial(m,l) &amp; vbTab<br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\tWScript.StdOut.Write 0 &amp; vbTab<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t\tWScript.StdOut.WriteLine<br/>\t<span class=\"kw3\">Next</span><br/>\tWScript.StdOut.WriteLine<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> pascal_lower(i,j)<br/>\tWScript.StdOut.Write <span class=\"st0\">\"Pascal Lower\"</span><br/>\tWScript.StdOut.WriteLine<br/>\t<span class=\"kw3\">For</span> l = i <span class=\"kw3\">To</span> j<br/>\t\t<span class=\"kw3\">For</span> m = i <span class=\"kw3\">To</span> j<br/>\t\t\t<span class=\"kw3\">If</span> l &gt;= m <span class=\"kw3\">Then</span><br/>\t\t\t\tWScript.StdOut.Write binomial(l,m) &amp; vbTab<br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\tWScript.StdOut.Write 0 &amp; vbTab<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t\tWScript.StdOut.WriteLine<br/>\t<span class=\"kw3\">Next</span><br/>\tWScript.StdOut.WriteLine\t<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> pascal_symmetric(i,j)<br/>\tWScript.StdOut.Write <span class=\"st0\">\"Pascal Symmetric\"</span><br/>\tWScript.StdOut.WriteLine<br/>\t<span class=\"kw3\">For</span> l = i <span class=\"kw3\">To</span> j <br/>\t\t<span class=\"kw3\">For</span> m = i <span class=\"kw3\">To</span> j<br/>\t\t\tWScript.StdOut.Write binomial(l+m,m) &amp; vbTab<br/>\t\t<span class=\"kw3\">Next</span><br/>\t\tWScript.StdOut.WriteLine<br/>\t<span class=\"kw3\">Next</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> binomial(n,k)<br/>\tbinomial = factorial(n)/(factorial(n-k)*factorial(k))<br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"kw2\">Function</span> factorial(n)<br/>\t<span class=\"kw3\">If</span> n = 0 <span class=\"kw3\">Then</span><br/>\t\tfactorial = 1<br/>\t<span class=\"kw3\">Else</span><br/>\t\t<span class=\"kw3\">For</span> i = n <span class=\"kw3\">To</span> 1 <span class=\"kw3\">Step</span> -1<br/>\t\t\t<span class=\"kw3\">If</span> i = n <span class=\"kw3\">Then</span><br/>\t\t\t\tfactorial = n<br/>\t\t\t<span class=\"kw3\">Else</span><br/>\t\t\t\tfactorial = factorial * i<br/>\t\t\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/>\t\t<span class=\"kw3\">Next</span><br/>\t<span class=\"kw3\">End</span> <span class=\"kw3\">If</span><br/><span class=\"kw3\">End</span> <span class=\"kw2\">Function</span><br/>\u00a0<br/><span class=\"co1\">'Test driving<br/></span><span class=\"kw2\">Call</span> pascal_upper(0,4)<br/><span class=\"kw2\">Call</span> pascal_lower(0,4)<br/><span class=\"kw2\">Call</span> pascal_symmetric(0,4)<br/>\u00a0</pre>"}, {"lang": "zkl", "loc": 8, "block": "<pre class=\"text highlighted_source\">fcn binomial(n,k){ (1).reduce(k,fcn(p,i,n){ p*(n-i+1)/i },1,n) }<br/>fcn pascal_upp(n){ [[(i,j); n; n; '{ binomial(j,i) }]]:toMatrix(_) } // [[..]] is list comprehension<br/>fcn pascal_low(n){ [[(i,j); n; n; binomial]]:toMatrix(_) }<br/>fcn pascal_sym(n){ [[(i,j); n; n; '{ binomial(i+j,i) }]]:toMatrix(_) }<br/>fcn toMatrix(ns){ // turn a string of numbers into a square matrix (list of lists)<br/>   cols:=ns.len().toFloat().sqrt().toInt();<br/>   ns.pump(List,T(Void.Read,cols-1),List.create)<br/>}</pre>"}]}